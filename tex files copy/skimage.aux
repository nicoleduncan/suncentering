\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\newlabel{sec:introduction}{{1}{1}{Introduction}{section.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {2}1D Plot of a 2D image}{1}{section.2}}
\newlabel{sec:1d_plot_of_a_2d_image}{{2}{1}{1D Plot of a 2D image}{section.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces The raw 2D image we started out with. There are 7 pixels in this image equal to 255, the max brightness for a byte array. These pixels simulate abnormally high values in our image as a result of bad pixels, gamma rays, etc.\relax }}{1}{figure.caption.3}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{raw}{{1}{1}{The raw 2D image we started out with. There are 7 pixels in this image equal to 255, the max brightness for a byte array. These pixels simulate abnormally high values in our image as a result of bad pixels, gamma rays, etc.\relax }{figure.caption.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Drawbacks}{1}{section.3}}
\newlabel{sec:drawbacks}{{3}{1}{Drawbacks}{section.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Lowest 99\% of sorted 2D image.\relax }}{2}{figure.caption.4}}
\newlabel{sorted}{{2}{2}{Lowest 99\% of sorted 2D image.\relax }{figure.caption.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}This Plot Says it All}{2}{section.4}}
\newlabel{sec:this_plot_says_it_all}{{4}{2}{This Plot Says it All}{section.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Some Numbers}{2}{section.5}}
\newlabel{sec:some_numbers}{{5}{2}{Some Numbers}{section.5}{}}
\gdef\@@FBset@{\c@FBcnt3\def\FB@@boxmax{\FBo@ht148.18616pt\FBf@ht0.0pt}}
\gdef\@@FBset@i{\c@FBcnt3\def\FB@@boxmax{\FBo@ht148.18616pt\FBf@ht0.0pt}}
\gdef\@@FBset@ii{\c@FBcnt3\def\FB@@boxmax{\FBo@ht148.18616pt\FBf@ht0.0pt}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces The vertical lines correspond to eyeballed boundaries of the sorted array. A large part of the left half of the array is cropped out to emphasize the shape of the humps and peaks. The derivative has been scaled to within the max/min of the starting master array. The width of the smoothing filter is 1000 wide.\relax }}{3}{figure.caption.5}}
\newlabel{comps}{{3}{3}{The vertical lines correspond to eyeballed boundaries of the sorted array. A large part of the left half of the array is cropped out to emphasize the shape of the humps and peaks. The derivative has been scaled to within the max/min of the starting master array. The width of the smoothing filter is 1000 wide.\relax }{figure.caption.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Taking this Method Further}{3}{section.6}}
\newlabel{sec:taking_this_method_further}{{6}{3}{Taking this Method Further}{section.6}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.1}Without Zeroing Out the Array}{3}{subsection.6.1}}
\newlabel{sub:without_zeroing_out_the_array}{{6.1}{3}{Without Zeroing Out the Array}{subsection.6.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces The top is the histogram of the sorted array. The bottom is the same plot but zoomed to a y-range of [0:300].\relax }}{4}{figure.caption.6}}
\newlabel{histozoom}{{4}{4}{The top is the histogram of the sorted array. The bottom is the same plot but zoomed to a y-range of [0:300].\relax }{figure.caption.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces This plot reveals that when sorted, the regions bounded by the vertical lines (which are artificially places, not the result of any computation) include pixels from neighboring regions. For high-value pixels, i.e., the region bounded by the rightmost vertical line and the last element of the sorted array, the x and y positions are completely (no vertical dots) isolated from other regions. When we look at the middle region, we see that low-value pixels from the brightest region(most likely dark limb pixels) are being sorted into the middle region of the sorted array. The worst case scenario is the left-most region which has pixels from both the first and second regions. This approach, however, is without the inclusion of cropping and then setting the cropped area to zero.\relax }}{4}{figure.caption.7}}
\newlabel{saysitall}{{5}{4}{This plot reveals that when sorted, the regions bounded by the vertical lines (which are artificially places, not the result of any computation) include pixels from neighboring regions. For high-value pixels, i.e., the region bounded by the rightmost vertical line and the last element of the sorted array, the x and y positions are completely (no vertical dots) isolated from other regions. When we look at the middle region, we see that low-value pixels from the brightest region(most likely dark limb pixels) are being sorted into the middle region of the sorted array. The worst case scenario is the left-most region which has pixels from both the first and second regions. This approach, however, is without the inclusion of cropping and then setting the cropped area to zero.\relax }{figure.caption.7}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces The suns are lined up vertically\relax }}{5}{figure.caption.8}}
\newlabel{inaline}{{6}{5}{The suns are lined up vertically\relax }{figure.caption.8}{}}
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces Center Positions Using Different Thresholds\relax }}{5}{table.caption.9}}
\newlabel{threshcomp}{{1}{5}{Center Positions Using Different Thresholds\relax }{table.caption.9}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7}Robustness of Finding Thresholds}{5}{section.7}}
\newlabel{sec:robustness_of_finding_thresholds}{{7}{5}{Robustness of Finding Thresholds}{section.7}{}}
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces Center Positions Using Different Methods\relax }}{6}{table.caption.11}}
\newlabel{numethod}{{2}{6}{Center Positions Using Different Methods\relax }{table.caption.11}{}}
\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces Thresholds of Brighter/Dimmer Images Using Threshold on deriv(smooth(deriv(sorted)))\relax }}{6}{table.caption.13}}
\newlabel{brightnesstest}{{3}{6}{Thresholds of Brighter/Dimmer Images Using Threshold on deriv(smooth(deriv(sorted)))\relax }{table.caption.13}{}}
\@writefile{lot}{\contentsline {table}{\numberline {4}{\ignorespaces Thresholds of Brighter/Dimmer Images Using max() of on deriv(smooth(deriv(sorted)))\relax }}{6}{table.caption.14}}
\newlabel{brightnesstestmax}{{4}{6}{Thresholds of Brighter/Dimmer Images Using max() of on deriv(smooth(deriv(sorted)))\relax }{table.caption.14}{}}
\@writefile{lot}{\contentsline {table}{\numberline {5}{\ignorespaces Center Positions Using max() of on deriv(smooth(deriv(sorted)))\relax }}{6}{table.caption.15}}
\newlabel{centerpositions_scaled}{{5}{6}{Center Positions Using max() of on deriv(smooth(deriv(sorted)))\relax }{table.caption.15}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces The top row are the x positions plotted against the sorted pixel values. In the second row we find the center of the brightest region and set the x (and y) positions in a 60-wide window to 0. In the third region we find the pixel positions of the second brightest region and repeat the process of zeroing out neighboring pixels. In the third row, only the dimmest region remains, free from the dim pixels of the first two regions.\relax }}{7}{figure.caption.10}}
\newlabel{quickcenters}{{7}{7}{The top row are the x positions plotted against the sorted pixel values. In the second row we find the center of the brightest region and set the x (and y) positions in a 60-wide window to 0. In the third region we find the pixel positions of the second brightest region and repeat the process of zeroing out neighboring pixels. In the third row, only the dimmest region remains, free from the dim pixels of the first two regions.\relax }{figure.caption.10}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces The left column is our present cropping method, the middle column is the method using \texthl  {\texttt  {where()}} statements, and the right column uses the zero-out method.\relax }}{8}{figure.caption.12}}
\newlabel{betterenough}{{8}{8}{The left column is our present cropping method, the middle column is the method using \hl {\texttt {where()}} statements, and the right column uses the zero-out method.\relax }{figure.caption.12}{}}
