/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "Documentation for ./";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("bundle_analysis/abundle.html", "abundle.pro", '.pro file in <a href="bundle_analysis/dir-overview.html">bundle_analysis/ directory</a>', "abundle.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("idlastro/ad2xy.html", "ad2xy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ad2xy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ad2xy.html#ad2xy", "ad2xy", 'routine in <a href="idlastro/ad2xy.html">ad2xy.pro</a>', "ad2xy.pro", "", "ad2xy", " NAME:      AD2XY  PURPOSE:      Compute X and Y from native coordinates and a FITS  astrometry structure  EXPLANATION:      If a WCS projection (Calabretta & Greisen 2002, A&A, 395, 1077) is      present, then the procedure WCSXY2SPH is used to compute native      coordinates.   If distortion is present then this is corrected.      In all cases, the inverse of the CD matrix is applied and offset      from the reference pixel to obtain X and Y.       AD2XY is generally meant to be used internal to other procedures.   For      interactive purposes, use ADXY.   CALLING SEQUENCE:      AD2XY, a ,d, astr, x, y   INPUTS:      A -     R.A. or longitude in DEGREES, scalar or vector      D -     Dec. or longitude in DEGREES, scalar or vector      ASTR - astrometry structure, output from EXTAST procedure containing:         .CD   -  2 x 2 array containing the astrometry parameters CD1_1 CD1_2                in DEGREES/PIXEL                                   CD2_1 CD2_2         .CDELT - 2 element vector giving increment at reference point in                DEGREES/PIXEL         .CRPIX - 2 element vector giving X and Y coordinates of reference pixel                (def = NAXIS/2) in FITS convention (first pixel is 1,1)         .CRVAL - 2 element vector giving coordinates of the reference pixel                in DEGREES         .CTYPE - 2 element vector giving projection types         .LONGPOLE - scalar longitude of north pole (default = 180)         .PV2 - Vector of additional parameter (e.g. PV2_1, PV2_2) needed in                some projections         .DISTORT - Optional substructure specifying distortion parameters   OUTPUTS:      X     - row position in pixels, scalar or vector      Y     - column position in pixels, scalar or vector       X,Y will be in the standard IDL convention (first pixel is 0), and      *not* the FITS convention (first pixel is 1)  NOTES:       AD2XY tests for presence of WCS coordinates by the presence of a dash       in the 5th character position in the value of CTYPE (e.g 'DEC--SIN').  PROCEDURES USED:        TAG_EXIST(), WCSSPH2XY  REVISION HISTORY:      Converted to IDL by B. Boothman, SASC Tech, 4/21/86      Use astrometry structure,  W. Landsman      Jan. 1994      Do computation correctly in degrees  W. Landsman       Dec. 1994      Only pass 2 CRVAL values to WCSSPH2XY   W. Landsman      June 1995      Don't subscript CTYPE      W. Landsman       August 1995      Understand reversed X,Y (X-Dec, Y-RA) axes,   W. Landsman  October 1998      Consistent conversion between CROTA and CD matrix W. Landsman October 2000      No special case for tangent projection W. Landsman June 2003      Work for non-WCS coordinate transformations W. Landsman Oct 2004      Use CRVAL reference point for non-WCS transformation  W.L. March 2007      Use post V6.0 notation  W.L. July 2009  ", "adastrxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/add_distort.html", "add_distort.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "add_distort.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/add_distort.html#add_distort", "add_distort", 'routine in <a href="idlastro/add_distort.html">add_distort.pro</a>', "add_distort.pro", "", "add_distort", "", "hdrastr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/adjustposition.html", "adjustposition.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "adjustposition.pro", "", "", " NAME:        AdjustPosition   PURPOSE:         This is a program for interactively adjusting the plot position        coordinates. The result of the function is a four-element floating        point array of normalized coordinates, suitable for passing to the        POSITION keyword of most IDL graphics commands.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Graphics   CALLING SEQUENCE:         position = AdjustPosition(startingPosition)   OPTIONAL INPUTS:         startingPosition - A four-element array of normalized coordinates             of the form [x0, y0, x1, y1].   OUTPUTS:         position - The adjusted plot position. A four-element array of normalized coordinates.   INPUT KEYWORDS:         GROUP_LEADER - The group leader of this program. This keyword             is required to ensure modal operation when calling from             another widget program.         TITLE - The title of the window.  Adjust Plot Position in Window...  by default.         XOFFSET - The X offset of the program on the display. Calculated from the             upper left-hand corner of the display.         YOFFSET - The Y offset of the program on the display. Calculated from the             upper left-hand corner of the display.   OUTPUT KEYWORDS:         CANCEL - Returns a 1 if the user selects the Cancel button. Returns 0 otherwise.             Note that if the use cancels, the  position  parameter is set to the value of             the  startingPosition  parameter.   DEPENDENCIES:         Reqires FSC_FIELD and FSC_PLOTWINDOW from the Coyote Library:                       http://www.idlcoyote.com/programs/fsc_field.pro                      http://www.idlcoyote.com/programs/fsc_plotwindow.pro   MODIFICATION HISTORY:         Written by David Fanning, March 2001.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/adjustposition.html#AdjustPosition_PlotEvents", "AdjustPosition_PlotEvents", 'routine in <a href="coyote/adjustposition.html">adjustposition.pro</a>', "adjustposition.pro", "", "AdjustPosition_PlotEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/adjustposition.html#AdjustPosition_FieldEvents", "AdjustPosition_FieldEvents", 'routine in <a href="coyote/adjustposition.html">adjustposition.pro</a>', "adjustposition.pro", "", "AdjustPosition_FieldEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/adjustposition.html#AdjustPosition_ButtonEvents", "AdjustPosition_ButtonEvents", 'routine in <a href="coyote/adjustposition.html">adjustposition.pro</a>', "adjustposition.pro", "", "AdjustPosition_ButtonEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/adjustposition.html#AdjustPosition", "AdjustPosition", 'routine in <a href="coyote/adjustposition.html">adjustposition.pro</a>', "adjustposition.pro", "", "AdjustPosition", "", "Group_LeaderTitleCancelXOffsetYOffsetcurrentPosition", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/adstring.html", "adstring.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "adstring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/adstring.html#adstring", "adstring", 'routine in <a href="idlastro/adstring.html">adstring.pro</a>', "adstring.pro", "", "adstring", " NAME:        ADSTRING  PURPOSE:        Return RA and Dec as character string(s) in sexagesimal format.  EXPLANATION:        RA and Dec may be entered as either a 2 element vector or as        two separate vectors (or scalars).  One can also specify the precision        of the declination in digits after the decimal point.   CALLING SEQUENCE        result = ADSTRING( ra_dec, precision, /TRUNCATE )                or        result = ADSTRING( ra,dec,[ precision, /TRUNCATE ] )                or        result = ADSTRING( dec, [ PRECISION= ]   INPUTS:        RA_DEC - 2 element vector giving the Right Ascension and declination                in decimal degrees.                      or        RA     - Right ascension in decimal degrees, numeric scalar or vector        DEC    - Declination in decimal degrees, numeric scalar or vector       If only parameter is supplied then it must be either a scalar (which      is converted to sexagesimal) or a two element [RA, Dec] vector.  OPTIONAL INPUT:        PRECISION  - Integer scalar (0-4) giving the number of digits after the                decimal of DEClination.   The RA is automatically 1 digit more.                This parameter may either be the third parameter after RA,DEC                or the second parameter after [RA,DEC].  If only DEC is supplied                then precision must be supplied as a keyword parameter.   If no                PRECISION parameter or keyword is passed, a  precision of 1 for                both RA and DEC is returned to maintain  compatibility with past                ADSTRING versions.    Values of  precision larger than 4 will                be truncated to 4.    If PRECISION is 3 or 4, then RA and Dec                should be input as double precision.  OPTIONAL INPUT KEYWORD:        /TRUNCATE - if set, then the last displayed digit in the output is                truncated in precision rather than rounded.   This option is                useful if ADSTRING() is used to form an official IAU name                (see http://vizier.u-strasbg.fr/Dic/iau-spec.htx) with                coordinate specification.   The IAU name will typically be                be created by applying STRCOMPRESS/REMOVE) after the ADSTRING()                call, e.g.               strcompress( adstring(ra,dec,0,/truncate), /remove)   ;IAU format         PRECISION = Alternate method of supplying the precision parameter,  OUTPUT:        RESULT - Character string(s) containing HR,MIN,SEC,DEC,MIN,SEC formatted                as ( 2I3,F5.(p+1),2I3,F4.p ) where p is the PRECISION                parameter.    If only a single scalar is supplied it is                converted to a sexagesimal string (2I3,F5.1).   EXAMPLE:        (1) Display CRVAL coordinates in a FITS header, H         IDL&gt; crval = sxpar(h,'CRVAL*')  ;Extract 2 element CRVAL vector (degs)        IDL&gt; print, adstring(crval)     ;Print CRVAL vector sexagesimal format         (2)  print,adstring(30.42,-1.23,1)  ==&gt;  ' 02 01 40.80  -01 13 48.0'             print,adstring(30.42,+0.23)    ==&gt;  ' 02 01 40.8   +00 13 48.0'             print,adstring(+0.23)          ==&gt;  '+00 13 48.0'         (3) The first two calls in (2) can be combined in a single call using            vector input               print,adstring([30.42,30.42],[-1.23,0.23], 1)  PROCEDURES CALLED:        RADEC, SIXTY()   REVISION HISTORY:        Written   W. Landsman                      June 1988        Addition of variable precision and DEC seconds precision fix.        ver.  Aug. 1990 [E. Deutsch]        Output formatting spiffed up       October 1991 [W. Landsman]        Remove ZPARCHECK call, accept 1 element vector  April 1992 [W. Landsman]        Call ROUND() instead of NINT()    February 1996  [W. Landsman]        Check roundoff past 60s           October 1997   [W. Landsman]        Work for Precision =4             November 1997  [W. Landsman]        Major rewrite to allow vector inputs   W. Landsman  February 2000        Fix possible error in seconds display when Precision=0                                P. Broos/W. Landsman April 2002        Added /TRUNCATE keyword, put leading zeros in seconds display                                P. Broos/W. Landsman September 2002        Fix declination zero values under vector processing W.Landsman Feb 2004        Fix possible problem in leading zero display W. Landsman June 2004        Assume since V5.4, omit fstring() call  W. Landsman April 2006        Fix significant bug when round a declination with -1&lt;dec&lt;0           Add PRECISION keyword    W.L. Aug 2008        Use formatting for  +  and  0   W. L.    May 2009        Allow formatting of longitudes &gt;99.99  W. L.  Sep 2012  ", "TRUNCATEPRECISIONra_decdecprecision", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/adxy.html", "adxy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "adxy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/adxy.html#adxy", "adxy", 'routine in <a href="idlastro/adxy.html">adxy.pro</a>', "adxy.pro", "", "adxy", " NAME:        ADXY  PURPOSE:        Use a FITS header to convert astronomical to pixel coordinates  EXPLANATION:        Use an image header to compute X and Y positions, given the        RA and Dec (or longitude, latitude) in decimal degrees.   CALLING SEQUENCE:        ADXY, HDR               ;Prompt for Ra and DEC        ADXY, hdr, a, d, x, y, [ /PRINT, ALT= ]   INPUTS:        HDR - FITS Image header containing astrometry parameters   OPTIONAL INPUTS:        A - Right ascension in decimal DEGREES, scalar or vector        D - Declination in decimal DEGREES, scalar or vector         If A and D are not supplied, user will be prompted to supply        them in either decimal degrees or HR,MIN,SEC,DEG,MN,SC format.   OPTIONAL OUTPUT:        X     - row position in pixels, same number of elements as A and D        Y     - column position in pixels         X and Y will be in standard IDL convention (first pixel is 0) and not        the FITS convention (first pixel is 1).      As in FITS an integral        value corresponds to the center of a pixel.  OPTIONAL KEYWORD INPUT:        /PRINT - If this keyword is set and non-zero, then results are displayed                at the terminal.        ALT -  single character 'A' through 'Z' or ' ' specifying an alternate              astrometry system present in the FITS header.    The default is              to use the primary astrometry or ALT = ' '.   If /ALT is set,              then this is equivalent to ALT = 'A'.   See Section 3.3 of              Greisen & Calabretta (2002, A&A, 395, 1061) for information about              alternate astrometry keywords.   OPERATIONAL NOTES:        If less than 5 parameters are supplied, or if the /PRINT keyword is        set, then the X and Y positions are displayed at the terminal.         If the procedure is to be used repeatedly with the same header,        then it would be faster to use AD2XY.   PROCEDURES CALLED:        AD2XY, ADSTRING(), EXTAST, GETOPT(), TEN()   REVISION HISTORY:        W. Landsman                 HSTX          January, 1988        Use astrometry structure   W. Landsman   January, 1994        Changed default ADSTRING format   W. Landsman    September, 1995        Check if latitude/longitude reversed in CTYPE keyword W. L. Feb. 2004        Added ALT keyword   W. Landsman   September 2004        Work for non-spherical coordinate transformation W. Landsman May 2005        More informative error message if astrometry missing W.L. Feb 2008        Cosmetic updates W.L. July 2011  ", "PRINTALThdradxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/airtovac.html", "airtovac.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "airtovac.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/airtovac.html#airtovac", "airtovac", 'routine in <a href="idlastro/airtovac.html">airtovac.pro</a>', "airtovac.pro", "", "airtovac", " NAME:        AIRTOVAC  PURPOSE:        Convert air wavelengths to vacuum wavelengths  EXPLANATION:        Wavelengths are corrected for the index of refraction of air under        standard conditions.  Wavelength values below 2000 A will not be        altered.  Uses relation of Ciddor (1996).   CALLING SEQUENCE:        AIRTOVAC, WAVE_AIR, [ WAVE_VAC]   INPUT/OUTPUT:        WAVE_AIR - Wavelength in Angstroms, scalar or vector                If this is the only parameter supplied, it will be updated on                output to contain double precision vacuum wavelength(s).  OPTIONAL OUTPUT:         WAVE_VAC - Vacuum wavelength in Angstroms, same number of elements as                  WAVE_AIR, double precision   EXAMPLE:        If the air wavelength is  W = 6056.125 (a Krypton line), then        AIRTOVAC, W yields an vacuum wavelength of W = 6057.8019   METHOD: 	Formula from Ciddor 1996, Applied Optics 62, 958   NOTES:        Take care within 1 A of 2000 A.   Wavelengths below 2000 A *in air* are        not altered.  REVISION HISTORY        Written W. Landsman                November 1991        Use Ciddor (1996) formula for better accuracy in the infrared            Added optional output vector, W Landsman Mar 2011        Iterate for better precision W.L./D. Schlegel  Mar 2011  ", "wave_airwave_vac", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/aitoff.html", "aitoff.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "aitoff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/aitoff.html#aitoff", "aitoff", 'routine in <a href="idlastro/aitoff.html">aitoff.pro</a>', "aitoff.pro", "", "aitoff", " NAME:        AITOFF  PURPOSE:        Convert longitude, latitude to X,Y using an AITOFF projection.  EXPLANATION:        This procedure can be used to create an all-sky map in Galactic        coordinates with an equal-area Aitoff projection.  Output map        coordinates are zero longitude centered.   CALLING SEQUENCE:        AITOFF, L, B, X, Y   INPUTS:        L - longitude - scalar or vector, in degrees        B - latitude - same number of elements as L, in degrees   OUTPUTS:        X - X coordinate, same number of elements as L.   X is normalized to                be between -180 and 180        Y - Y coordinate, same number of elements as L.  Y is normalized to                be between -90 and 90.   NOTES:        See AIPS memo No. 46, page 4, for details of the algorithm.  This        version of AITOFF assumes the projection is centered at b=0 degrees.   REVISION HISTORY:        Written  W.B. Landsman  STX          December 1989        Modified for Unix:                J. Bloch        LANL SST-9      5/16/91 1.1        Converted to IDL V5.0   W. Landsman   September 1997  ", "lbxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/aitoff_grid.html", "aitoff_grid.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "aitoff_grid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/aitoff_grid.html#AITOFF_GRID", "AITOFF_GRID", 'routine in <a href="idlastro/aitoff_grid.html">aitoff_grid.pro</a>', "aitoff_grid.pro", "", "AITOFF_GRID", " NAME:        AITOFF_GRID   PURPOSE:        Produce an overlay of latitude and longitude lines over a plot or image  EXPLANATION:        The grid is plotted on the current graphics device. AITOFF_GRID        assumes that the ouput plot coordinates span the x-range of        -180 to 180 and the y-range goes from -90 to 90.   CALLING SEQUENCE:         AITOFF_GRID [,DLONG,DLAT, LABEL=, /NEW, CHARTHICK=, CHARSIZE=,                      FONT=, _EXTRA=]   OPTIONAL INPUTS:         DLONG   = Optional input longitude line spacing in degrees. If left                  out, defaults to 30.        DLAT    = Optional input latitude line spacing in degrees. If left                  out, defaults to 30.   OPTIONAL INPUT KEYWORDS:         LABEL           = Optional keyword specifying that the latitude and                          longitude lines on the prime meridian and the                          equator should be labeled in degrees. If LABELS is                          given a value of 2, i.e. LABELS=2, then the longitude                          labels will be in hours instead of degrees.         CHARSIZE       = If /LABEL is set, then CHARSIZE specifies the size                          of the label characters (passed to XYOUTS)         CHARTHICK     =  If /LABEL is set, then CHARTHICK specifies the                          thickness of the label characters (passed to XYOUTS)        FONT          =   scalar font graphics keyword (-1,0 or 1) for text        /NEW          =   If this keyword is set, then AITOFF_GRID will create                          a new plot grid, rather than overlay an existing plot.         Any valid keyword to OPLOT such as COLOR, LINESTYLE, THICK can be        passed to AITOFF_GRID (though the _EXTRA facility) to to specify the        color, style, or thickness of the grid lines.  OUTPUTS:        Draws grid lines on current graphics device.   EXAMPLE:        Create a labeled Aitoff grid of the Galaxy, and overlay stars at        specified Galactic longitudes, glong and latitudes, glat         IDL&gt; aitoff_grid,/label,/new        ;Create labeled grid        IDL&gt; aitoff, glong, glat, x,y      ;Convert to X,Y coordinates        IDL&gt; plots,x,y,psym=2              ;Overlay  star  positions   PROCEDURES USED:        AITOFF  NOTES:        If labeling in hours (LABEL=2) then the longitude spacing should be        a multiple of 15 degrees   AUTHOR AND MODIFICATIONS:         J. Bloch        1.2     6/2/91        Converted to IDL V5.0   W. Landsman   September 1997        Create default plotting coords, if needed   W. Landsman  August 2000        Added _EXTRA, CHARTHICK, CHARSIZE keywords  W. Landsman  March 2001        Several tweaks, plot only hours not minutes W. Landsman January 2002        Allow FONT keyword to be passed to XYOUTS.  T. Robishaw Apr. 2006  ", "LABELNEW_EXTRACHARSIZECHARTHICKFONTDLONGDLAT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/public/al_legend.html", "al_legend.pro", '.pro file in <a href="coyote/public/dir-overview.html">coyote/public/ directory</a>', "al_legend.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/public/al_legend.html#al_legend", "al_legend", 'routine in <a href="coyote/public/al_legend.html">al_legend.pro</a>', "al_legend.pro", "", "al_legend", " NAME:        AL_LEGEND  PURPOSE:        Create an annotation legend for a plot.  EXPLANATION:        This procedure was originally named LEGEND, but a distinct LEGEND()        function was introduced into IDL V8.0.   Therefore, the        original LEGEND procedure in the Astronomy Library is renamed to        AL_LEGEND.         This procedure makes a legend for a plot.  The legend can contain        a mixture of symbols, linestyles, Hershey characters (vectorfont),        and filled polygons (usersym).  A test procedure, al_legendtest.pro,        shows legend's capabilities.  Placement of the legend is controlled        with keywords like /right, /top, and /center or by using a position        keyword for exact placement (position=[x,y]) or via mouse (/position).   CALLING SEQUENCE:        AL_LEGEND [,items][,keyword options]  EXAMPLES:        The call:                al_legend,['Plus sign','Asterisk','Period'],psym=[1,2,3]          produces:                -----------------                |               |                |  + Plus sign  |                |  * Asterisk   |                |  . Period     |          Each symbol is drawn with a cgPlots command, so they look OK.          Other examples are given in optional output keywords.                 |               |         lines = indgen(6)                       ; for line styles        items = 'linestyle '+strtrim(lines,2)   ; annotations        al_legend,items,linestyle=lines         ; vertical legend---upper left        items = ['Plus sign','Asterisk','Period']        sym = [1,2,3]        al_legend,items,psym=sym                   ; ditto except using symbols        al_legend,items,psym=sym,/horizontal       ; horizontal format        al_legend,items,psym=sym,box=0             ; sans border        al_legend,items,psym=sym,delimiter='='     ; embed '=' betw psym & text        al_legend,items,psym=sym,margin=2          ; 2-character margin        al_legend,items,psym=sym,position=[x,y]    ; upper left in data coords        al_legend,items,psym=sym,pos=[x,y],/norm   ; upper left in normal coords        al_legend,items,psym=sym,pos=[x,y],/device ; upper left in device coords        al_legend,items,psym=sym,/position         ; interactive position        al_legend,items,psym=sym,/right            ; at upper right        al_legend,items,psym=sym,/bottom           ; at lower left        al_legenditems,psym=sym,/center           ; approximately near center        al_legend,items,psym=sym,number=2          ; plot two symbols, not one      Plot 3 filled colored squares        al_legend,items,/fill,psym=[8,8,8],colors=['red','green','blue']          Another example of the use of AL_LEGEND can be found at         http://www.idlcoyote.com/cg_tips/al_legend.php  INPUTS:        items = text for the items in the legend, a string array.                For example, items = ['diamond','asterisk','square'].                You can omit items if you don't want any text labels.  OPTIONAL INPUT KEYWORDS:         linestyle = array of linestyle numbers  If linestyle[i] &lt; 0, then omit                ith symbol or line to allow a multi-line entry.     If                linestyle = -99 then text will be left-justified.        psym = array of plot symbol numbers or names.  If psym[i] is negative,                then a line connects pts for ith item.  If psym[i] = 8, then the                procedure USERSYM is called with vertices defined in the                keyword usersym.   If psym[i] = 88, then use the previously                defined user symbol.    If 11 &lt;= psym[i] &lt;= 46 then David                Fanning's function CGSYMCAT() will be used for additional                symbols.   Note that                PSYM=10 (histogram plot mode) is not allowed since it                cannot be used with the cgPlots command.        vectorfont = vector-drawn characters for the sym/line column, e.g.,                ['!9B!3','!9C!3','!9D!3'] produces an open square, a checkmark,                and a partial derivative, which might have accompanying items                ['BOX','CHECK','PARTIAL DERIVATIVE'].                There is no check that !p.font is set properly, e.g., -1 for                X and 0 for PostScript.  This can produce an error, e.g., use                !20 with PostScript and !p.font=0, but allows use of Hershey                *AND* PostScript fonts together.        N. B.: Choose any of linestyle, psym, and/or vectorfont.  If none is                present, only the text is output.  If more than one                is present, all need the same number of elements, and normal                plot behaviour occurs.                By default, if psym is positive, you get one point so there is                no connecting line.  If vectorfont[i] = '',                then cgPlots is called to make a symbol or a line, but if                vectorfont[i] is a non-null string, then cgText is called.        /help = flag to print header        /horizontal = flag to make the legend horizontal        /vertical = flag to make the legend vertical (D=vertical)        background_color - color name or number to fill the legend box.               Automatically sets /clear.    (D = -1)        box = flag to include/omit box around the legend (D=include) 		  outline_color = color of box outline (D = !P.color)        bthick = thickness of the legend box (D = !P.thick)        charsize = just like !p.charsize for plot labels        charthick = just like !p.charthick for plot labels        clear = flag to clear the box area before drawing the legend        colors = array of colors names or numbers for plot symbols/lines           See cgCOLOR for list of color names.   Default is 'Opposite'           If you are using index colors (0-255), then supply color as a byte,           integer or string, but not as a long, which will be interpreted as           a decomposed color. See http://www.idlcoyote.com/cg_tips/legcolor.php        delimiter = embedded character(s) between symbol and text (D=none)        font = scalar font graphics keyword (-1,0 or 1) for text        linsize = Scale factor for line length (0-1), default = 1                  Set to 0 to give a dot, 0.5 give half default line length        margin = margin around text measured in characters and lines        number = number of plot symbols to plot or length of line (D=1)        spacing = line spacing (D=bit more than character height)        position = data coordinates of the /top (D) /left (D) of the legend        pspacing = psym spacing (D=3 characters) (when number of symbols is              greater than 1)        textcolors = array of color names or numbers for text.  See cgCOLOR           for a list of color names.   Default is 'Opposite' of background        thick = array of line thickness numbers (D = !P.thick), if used, then                linestyle must also be specified        normal = use normal coordinates for position, not data        device = use device coordinates for position, not data        /window - if set then send legend to a resizeable graphics window        usersym = 2-D array of vertices, cf. usersym in IDL manual.              (/USERSYM =square, default is to use existing USERSYM definition)        /fill = flag to fill the usersym        /left_legend = flag to place legend snug against left side of plot                  window (D)        /right_legend = flag to place legend snug against right side of plot                window.    If /right,pos=[x,y], then x is position of RHS and                text runs right-to-left.        /top_legend = flag to place legend snug against top of plot window (D)        /bottom = flag to place legend snug against bottom of plot window                /top,pos=[x,y] and /bottom,pos=[x,y] produce same positions.         If LINESTYLE, PSYM, VECTORFONT, SYMSIZE, THICK, COLORS, or        TEXTCOLORS are supplied as scalars, then the scalar value is set for        every line or symbol in the legend.  Outputs:        legend to current plot device  OPTIONAL OUTPUT KEYWORDS:        corners = 4-element array, like !p.position, of the normalized          coords for the box (even if box=0): [llx,lly,urx,ury].          Useful for multi-column or multi-line legends, for example,          to make a 2-column legend, you might do the following:            c1_items = ['diamond','asterisk','square']            c1_psym = [4,2,6]            c2_items = ['solid','dashed','dotted']            c2_line = [0,2,1]            al_legend,c1_items,psym=c1_psym,corners=c1,box=0            al_legend,c2_items,line=c2_line,corners=c2,box=0,pos=[c1[2],c1[3]]            c = [c1[0]&lt;c2[0],c1[1]&lt;c2[1],c1[2]&gt;c2[2],c1[3]&gt;c2[3]]          cgplots,[c[0],c[0],c[2],c[2],c[0]],[c[1],c[3],c[3],c[1],c[1]],/norm           Useful also to place the legend.  Here's an automatic way to place          the legend in the lower right corner.  The difficulty is that the          legend's width is unknown until it is plotted.  In this example,          the legend is plotted twice: the first time in the upper left, the          second time in the lower right.           al_legend,['1','22','333','4444'],linestyle=indgen(4),corners=corners                        ; BOGUS LEGEND---FIRST TIME TO REPORT CORNERS            xydims = [corners[2]-corners[0],corners[3]-corners[1]]                        ; SAVE WIDTH AND HEIGHT            chdim=[!d.x_ch_size/float(!d.x_size),!d.y_ch_size/float(!d.y_size)]                        ; DIMENSIONS OF ONE CHARACTER IN NORMALIZED COORDS            pos = [!x.window[1]-chdim[0]-xydims[0] $                        ,!y.window[0]+chdim[1]+xydims[1]]                        ; CALCULATE POSITION FOR LOWER RIGHT            cgplot,findgen(10)    ; SIMPLE PLOT; YOU DO WHATEVER YOU WANT HERE.            al_legend,['1','22','333','4444'],linestyle=indgen(4),pos=pos                        ; REDO THE LEGEND IN LOWER RIGHT CORNER          You can modify the pos calculation to place the legend where you          want.  For example to place it in the upper right:            pos = [!x.window[1]-chdim[0]-xydims[0],!y.window[1]-xydims[1]]  Common blocks:        none  Procedure:        If keyword help is set, call doc_library to print header.        See notes in the code.  Much of the code deals with placement of the        legend.  The main problem with placement is not being        able to sense the length of a string before it is output.  Some crude        approximations are used for centering.  Restrictions:        Here are some things that aren't implemented.        - An orientation keyword would allow lines at angles in the legend.        - An array of usersyms would be nice---simple change.        - An order option to interchange symbols and text might be nice.        - Somebody might like double boxes, e.g., with box = 2.        - Another feature might be a continuous bar with ticks and text.        - There are no guards to avoid writing outside the plot area.        - There is no provision for multi-line text, e.g., '1st line!c2nd line'          Sensing !c would be easy, but !c isn't implemented for PostScript.          A better way might be to simply output the 2nd line as another item          but without any accompanying symbol or linestyle.  A flag to omit          the symbol and linestyle is linestyle[i] = -1.        - There is no ability to make a title line containing any of titles          for the legend, for the symbols, or for the text.  Side Effects:  Modification history:        write, 24-25 Aug 92, F K Knight (knight@ll.mit.edu)        allow omission of items or omission of both psym and linestyle, add          corners keyword to facilitate multi-column legends, improve place-          ment of symbols and text, add guards for unequal size, 26 Aug 92, FKK        add linestyle(i)=-1 to suppress a single symbol/line, 27 Aug 92, FKK        add keyword vectorfont to allow characters in the sym/line column,          28 Aug 92, FKK        add /top, /bottom, /left, /right keywords for automatic placement at          the four corners of the plot window.  The /right keyword forces          right-to-left printing of menu. 18 Jun 93, FKK        change default position to data coords and add normal, data, and          device keywords, 17 Jan 94, FKK        add /center keyword for positioning, but it is not precise because          text string lengths cannot be known in advance, 17 Jan 94, FKK        add interactive positioning with /position keyword, 17 Jan 94, FKK        allow a legend with just text, no plotting symbols.  This helps in          simply describing a plot or writing assumptions done, 4 Feb 94, FKK        added thick, symsize, and clear keyword Feb 96, W. Landsman HSTX                David Seed, HR Wallingford, d.seed@hrwallingford.co.uk        allow scalar specification of keywords, Mar 96, W. Landsman HSTX        added charthick keyword, June 96, W. Landsman HSTX        Made keyword names  left,right,top,bottom,center longer,                                  Aug 16, 2000, Kim Tolbert        Added ability to have regular text lines in addition to plot legend        lines in legend.  If linestyle is -99 that item is left-justified.        Previously, only option for no sym/line was linestyle=-1, but then text        was lined up after sym/line column.    10 Oct 2000, Kim Tolbert        Make default value of thick = !P.thick  W. Landsman  Jan. 2001        Don't overwrite existing USERSYM definition  W. Landsman Mar. 2002 	     Added outline_color BT 24 MAY 2004        Pass font keyword to cgText commands.  M. Fitzgerald, Sep. 2005        Default spacing, pspacing should be relative to charsize. M. Perrin, July 2007        Don't modify position keyword  A. Kimball/ W. Landsman Jul 2007        Small update to Jul 2007 for /NORMAL coords.  W. Landsman Aug 2007        Use SYMCAT() plotting symbols for 11&lt;=PSYM&lt;=46   W. Landsman  Nov 2009        Make a sharper box edge T. Robishaw/W.Landsman July 2010        Added BTHICK keyword W. Landsman October 2010        Added BACKGROUND_COLOR keyword  W. Landsman February 2011        Incorporate Coyote graphics  W. Landsman  February 2011        Added LINSIZE keyword W.L./V.Gonzalez   May 2011        Fixed a small problem with Convert_Coord when the Window keyword is set.                          David Fanning, May 2011.        Fixed problem when /clear and /Window are set J. Bailin/WL   May 2011        CGQUERY was called instead of CGCONTROL   W.L.  June 2011        Fixed typo preventing BTHICK keyword from working W.L. Dec 2011        Remove call to SYMCAT() W.L. Dec 2011        Changed the way the WINDOW keyword adds commands to cgWindow, and        now default to BACKGROUND for background color. 1 Feb 2012 David Fanning        Allow 1 element SYMSIZE for vector input, WL Apr 2012.        Allow to specify symbols by cgSYMCAT() name WL Aug 2012        Fixed bug when linsize, /right called simultaneously, Dec 2012, K.Stewart        Added a check for embedded symbols in the items string array. March 2013. David Fanning   ", "BOTTOM_LEGENDBOXCENTER_LEGENDCHARTHICKCHARSIZECLEARCOLORSCORNERSDATADELIMITERDEVICEFILLHELPHORIZONTALLEFT_LEGENDLINESTYLEMARGINNORMALNUMBERPOSITIONPSPACINGPSYMRIGHT_LEGENDSPACINGSYMSIZETEXTCOLORSTHICKTOP_LEGENDUSERSYMVECTORFONTVERTICALOUTLINE_COLORFONTBTHICKbackground_colorWINDOWLINSIZEitems", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/al_legend.html", "al_legend.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "al_legend.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/al_legend.html#al_legend", "al_legend", 'routine in <a href="idlastro/al_legend.html">al_legend.pro</a>', "al_legend.pro", "", "al_legend", " NAME:        AL_LEGEND  PURPOSE:        Create an annotation legend for a plot.  EXPLANATION:        This procedure was originally named LEGEND, but a distinct LEGEND()        function was introduced into IDL V8.0.   Therefore, the        original LEGEND procedure in the Astronomy Library is renamed to        AL_LEGEND.         This procedure makes a legend for a plot.  The legend can contain        a mixture of symbols, linestyles, Hershey characters (vectorfont),        and filled polygons (usersym).  A test procedure, legendtest.pro,        shows legend's capabilities.  Placement of the legend is controlled        with keywords like /right, /top, and /center or by using a position        keyword for exact placement (position=[x,y]) or via mouse (/position).  CALLING SEQUENCE:        AL_LEGEND [,items][,keyword options]  EXAMPLES:        The call:                al_legend,['Plus sign','Asterisk','Period'],psym=[1,2,3]          produces:                -----------------                |               |                |  + Plus sign  |                |  * Asterisk   |                |  . Period     |          Each symbol is drawn with a cgPlots command, so they look OK.          Other examples are given in optional output keywords.                 |               |         lines = indgen(6)                       ; for line styles        items = 'linestyle '+strtrim(lines,2)   ; annotations        al_legend,items,linestyle=lines         ; vertical legend---upper left        items = ['Plus sign','Asterisk','Period']        sym = [1,2,3]        al_legend,items,psym=sym                   ; ditto except using symbols        al_legend,items,psym=sym,/horizontal       ; horizontal format        al_legend,items,psym=sym,box=0             ; sans border        al_legend,items,psym=sym,delimiter='='     ; embed '=' betw psym & text        al_legend,items,psym=sym,margin=2          ; 2-character margin        al_legend,items,psym=sym,position=[x,y]    ; upper left in data coords        al_legend,items,psym=sym,pos=[x,y],/norm   ; upper left in normal coords        al_legend,items,psym=sym,pos=[x,y],/device ; upper left in device coords        al_legend,items,psym=sym,/position         ; interactive position        al_legend,items,psym=sym,/right            ; at upper right        al_legend,items,psym=sym,/bottom           ; at lower left        al_legenditems,psym=sym,/center           ; approximately near center        al_legend,items,psym=sym,number=2          ; plot two symbols, not one      Plot 3 filled colored squares        al_legend,items,/fill,psym=[8,8,8],colors=['red','green','blue']          Another example of the use of AL_LEGEND can be found at         http://www.idlcoyote.com/cg_tips/al_legend.php  INPUTS:        items = text for the items in the legend, a string array.                For example, items = ['diamond','asterisk','square'].                You can omit items if you don't want any text labels.  OPTIONAL INPUT KEYWORDS:         linestyle = array of linestyle numbers  If linestyle[i] &lt; 0, then omit                ith symbol or line to allow a multi-line entry.     If                linestyle = -99 then text will be left-justified.        psym = array of plot symbol numbers or names.  If psym[i] is negative,                then a line connects pts for ith item.  If psym[i] = 8, then the                procedure USERSYM is called with vertices defined in the                keyword usersym.   If psym[i] = 88, then use the previously                defined user symbol.    If 11 &lt;= psym[i] &lt;= 46 then David                Fanning's function CGSYMCAT() will be used for additional                symbols.   Note that                PSYM=10 (histogram plot mode) is not allowed since it                cannot be used with the cgPlots command.        vectorfont = vector-drawn characters for the sym/line column, e.g.,                ['!9B!3','!9C!3','!9D!3'] produces an open square, a checkmark,                and a partial derivative, which might have accompanying items                ['BOX','CHECK','PARTIAL DERIVATIVE'].                There is no check that !p.font is set properly, e.g., -1 for                X and 0 for PostScript.  This can produce an error, e.g., use                !20 with PostScript and !p.font=0, but allows use of Hershey                *AND* PostScript fonts together.        N. B.: Choose any of linestyle, psym, and/or vectorfont.  If none is                present, only the text is output.  If more than one                is present, all need the same number of elements, and normal                plot behaviour occurs.                By default, if psym is positive, you get one point so there is                no connecting line.  If vectorfont[i] = '',                then cgPlots is called to make a symbol or a line, but if                vectorfont[i] is a non-null string, then cgText is called.        /help = flag to print header        /horizontal = flag to make the legend horizontal        /vertical = flag to make the legend vertical (D=vertical)        background_color - color name or number to fill the legend box.               Automatically sets /clear.    (D = -1)        box = flag to include/omit box around the legend (D=include) 		  outline_color = color of box outline (D = !P.color)        bthick = thickness of the legend box (D = !P.thick)        charsize = just like !p.charsize for plot labels        charthick = just like !p.charthick for plot labels        clear = flag to clear the box area before drawing the legend        colors = array of colors names or numbers for plot symbols/lines           See cgCOLOR for list of color names.   Default is 'Opposite'           If you are using index colors (0-255), then supply color as a byte,           integer or string, but not as a long, which will be interpreted as           a decomposed color. See http://www.idlcoyote.com/cg_tips/legcolor.php        delimiter = embedded character(s) between symbol and text (D=none)        font = scalar font graphics keyword (-1,0 or 1) for text        linsize = Scale factor for line length (0-1), default = 1                  Set to 0 to give a dot, 0.5 give half default line length        margin = margin around text measured in characters and lines        number = number of plot symbols to plot or length of line (D=1)        spacing = line spacing (D=bit more than character height)        position = data coordinates of the /top (D) /left (D) of the legend        pspacing = psym spacing (D=3 characters) (when number of symbols is              greater than 1)        textcolors = array of color names or numbers for text.  See cgCOLOR           for a list of color names.   Default is 'Opposite' of background        thick = array of line thickness numbers (D = !P.thick), if used, then                linestyle must also be specified        normal = use normal coordinates for position, not data        device = use device coordinates for position, not data        /window - if set then send legend to a resizeable graphics window        usersym = 2-D array of vertices, cf. usersym in IDL manual.              (/USERSYM =square, default is to use existing USERSYM definition)        /fill = flag to fill the usersym        /left_legend = flag to place legend snug against left side of plot                  window (D)        /right_legend = flag to place legend snug against right side of plot                window.    If /right,pos=[x,y], then x is position of RHS and                text runs right-to-left.        /top_legend = flag to place legend snug against top of plot window (D)        /bottom = flag to place legend snug against bottom of plot window                /top,pos=[x,y] and /bottom,pos=[x,y] produce same positions.         If LINESTYLE, PSYM, VECTORFONT, SYMSIZE, THICK, COLORS, or        TEXTCOLORS are supplied as scalars, then the scalar value is set for        every line or symbol in the legend.  Outputs:        legend to current plot device  OPTIONAL OUTPUT KEYWORDS:        corners = 4-element array, like !p.position, of the normalized          coords for the box (even if box=0): [llx,lly,urx,ury].          Useful for multi-column or multi-line legends, for example,          to make a 2-column legend, you might do the following:            c1_items = ['diamond','asterisk','square']            c1_psym = [4,2,6]            c2_items = ['solid','dashed','dotted']            c2_line = [0,2,1]            al_legend,c1_items,psym=c1_psym,corners=c1,box=0            al_legend,c2_items,line=c2_line,corners=c2,box=0,pos=[c1[2],c1[3]]            c = [c1[0]&lt;c2[0],c1[1]&lt;c2[1],c1[2]&gt;c2[2],c1[3]&gt;c2[3]]          cgplots,[c[0],c[0],c[2],c[2],c[0]],[c[1],c[3],c[3],c[1],c[1]],/norm           Useful also to place the legend.  Here's an automatic way to place          the legend in the lower right corner.  The difficulty is that the          legend's width is unknown until it is plotted.  In this example,          the legend is plotted twice: the first time in the upper left, the          second time in the lower right.           al_legend,['1','22','333','4444'],linestyle=indgen(4),corners=corners                        ; BOGUS LEGEND---FIRST TIME TO REPORT CORNERS            xydims = [corners[2]-corners[0],corners[3]-corners[1]]                        ; SAVE WIDTH AND HEIGHT            chdim=[!d.x_ch_size/float(!d.x_size),!d.y_ch_size/float(!d.y_size)]                        ; DIMENSIONS OF ONE CHARACTER IN NORMALIZED COORDS            pos = [!x.window[1]-chdim[0]-xydims[0] $                        ,!y.window[0]+chdim[1]+xydims[1]]                        ; CALCULATE POSITION FOR LOWER RIGHT            cgplot,findgen(10)    ; SIMPLE PLOT; YOU DO WHATEVER YOU WANT HERE.            al_legend,['1','22','333','4444'],linestyle=indgen(4),pos=pos                        ; REDO THE LEGEND IN LOWER RIGHT CORNER          You can modify the pos calculation to place the legend where you          want.  For example to place it in the upper right:            pos = [!x.window[1]-chdim[0]-xydims[0],!y.window[1]-xydims[1]]  Common blocks:        none  Procedure:        If keyword help is set, call doc_library to print header.        See notes in the code.  Much of the code deals with placement of the        legend.  The main problem with placement is not being        able to sense the length of a string before it is output.  Some crude        approximations are used for centering.  Restrictions:        Here are some things that aren't implemented.        - An orientation keyword would allow lines at angles in the legend.        - An array of usersyms would be nice---simple change.        - An order option to interchange symbols and text might be nice.        - Somebody might like double boxes, e.g., with box = 2.        - Another feature might be a continuous bar with ticks and text.        - There are no guards to avoid writing outside the plot area.        - There is no provision for multi-line text, e.g., '1st line!c2nd line'          Sensing !c would be easy, but !c isn't implemented for PostScript.          A better way might be to simply output the 2nd line as another item          but without any accompanying symbol or linestyle.  A flag to omit          the symbol and linestyle is linestyle[i] = -1.        - There is no ability to make a title line containing any of titles          for the legend, for the symbols, or for the text.  Side Effects:  Modification history:        write, 24-25 Aug 92, F K Knight (knight@ll.mit.edu)        allow omission of items or omission of both psym and linestyle, add          corners keyword to facilitate multi-column legends, improve place-          ment of symbols and text, add guards for unequal size, 26 Aug 92, FKK        add linestyle(i)=-1 to suppress a single symbol/line, 27 Aug 92, FKK        add keyword vectorfont to allow characters in the sym/line column,          28 Aug 92, FKK        add /top, /bottom, /left, /right keywords for automatic placement at          the four corners of the plot window.  The /right keyword forces          right-to-left printing of menu. 18 Jun 93, FKK        change default position to data coords and add normal, data, and          device keywords, 17 Jan 94, FKK        add /center keyword for positioning, but it is not precise because          text string lengths cannot be known in advance, 17 Jan 94, FKK        add interactive positioning with /position keyword, 17 Jan 94, FKK        allow a legend with just text, no plotting symbols.  This helps in          simply describing a plot or writing assumptions done, 4 Feb 94, FKK        added thick, symsize, and clear keyword Feb 96, W. Landsman HSTX                David Seed, HR Wallingford, d.seed@hrwallingford.co.uk        allow scalar specification of keywords, Mar 96, W. Landsman HSTX        added charthick keyword, June 96, W. Landsman HSTX        Made keyword names  left,right,top,bottom,center longer,                                  Aug 16, 2000, Kim Tolbert        Added ability to have regular text lines in addition to plot legend        lines in legend.  If linestyle is -99 that item is left-justified.        Previously, only option for no sym/line was linestyle=-1, but then text        was lined up after sym/line column.    10 Oct 2000, Kim Tolbert        Make default value of thick = !P.thick  W. Landsman  Jan. 2001        Don't overwrite existing USERSYM definition  W. Landsman Mar. 2002 	     Added outline_color BT 24 MAY 2004        Pass font keyword to cgText commands.  M. Fitzgerald, Sep. 2005        Default spacing, pspacing should be relative to charsize. M. Perrin, July 2007        Don't modify position keyword  A. Kimball/ W. Landsman Jul 2007        Small update to Jul 2007 for /NORMAL coords.  W. Landsman Aug 2007        Use SYMCAT() plotting symbols for 11&lt;=PSYM&lt;=46   W. Landsman  Nov 2009        Make a sharper box edge T. Robishaw/W.Landsman July 2010        Added BTHICK keyword W. Landsman October 2010        Added BACKGROUND_COLOR keyword  W. Landsman February 2011        Incorporate Coyote graphics  W. Landsman  February 2011        Added LINSIZE keyword W.L./V.Gonzalez   May 2011        Fixed a small problem with Convert_Coord when the Window keyword is set.                          David Fanning, May 2011.        Fixed problem when /clear and /Window are set J. Bailin/WL   May 2011        CGQUERY was called instead of CGCONTROL   W.L.  June 2011        Fixed typo preventing BTHICK keyword from working W.L. Dec 2011        Remove call to SYMCAT() W.L. Dec 2011        Changed the way the WINDOW keyword adds commands to cgWindow, and        now default to BACKGROUND for background color. 1 Feb 2012 David Fanning        Allow 1 element SYMSIZE for vector input, WL Apr 2012.        Allow to specify symbols by cgSYMCAT() name WL Aug 2012  ", "BOTTOM_LEGENDBOXCENTER_LEGENDCHARTHICKCHARSIZECLEARCOLORSCORNERSDATADELIMITERDEVICEFILLHELPHORIZONTALLEFT_LEGENDLINESTYLEMARGINNORMALNUMBERPOSITIONPSPACINGPSYMRIGHT_LEGENDSPACINGSYMSIZETEXTCOLORSTHICKTOP_LEGENDUSERSYMVECTORFONTVERTICALOUTLINE_COLORFONTBTHICKbackground_colorWINDOWLINSIZEitems", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/alpha.html", "alpha.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "alpha.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/alpha.html#alpha", "alpha", 'routine in <a href="sep20/alpha.html">alpha.pro</a>', "alpha.pro", "", "alpha", "      Finds the center of N whole suns and M partial suns using limb-fitting for the whole suns and simple centroiding for the partial suns   ", "", "          -1", "       NONE, BRAH   idldoc,root='../suncentering', output='doc_lib',format_style='rst',/user,/quiet,markup_style='rst'  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/alpha.html", "alpha.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "alpha.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/alpha.html#alpha", "alpha", 'routine in <a href="code_snapshots/orig_version/alpha.html">alpha.pro</a>', "alpha.pro", "", "alpha", "      Finds the center of N whole suns and M partial suns using limb-fitting for the whole suns and simple centroiding for the partial suns   ", "", "          -1", "       NONE, BRAH   idldoc,root='/Users/jerensuzuki/Documents/suncentering', output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/alpha.html", "alpha.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "alpha.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    KAHUNA   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image. Instead    of scanning rows to crop, scans in a circle. Using solar centers, identifies fiducial positions.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/alpha.html#alpha", "alpha", 'routine in <a href="code_snapshots/obsolete_code/alpha.html">alpha.pro</a>', "alpha.pro", "", "alpha", "       This version uses limb fitting opposed to masking (tricenter).   ", "time           Outputs how much time the program takes   ", "          -1", "       Find and ISOLATE fiducials, not just mask them out         Ignore center if sun is too close to edge (or if when cropping, we cro outside wholeimage)         Use 25% of median(image)        Um, let's not (Apr24)         Make sure program doesn't freak out when sun isn't in POV   ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/alpha.html", "alpha.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "alpha.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/alpha.html#alpha", "alpha", 'routine in <a href="code_snapshots/jul25/alpha.html">alpha.pro</a>', "alpha.pro", "", "alpha", "      Finds the center of N whole suns and M partial suns using limb-fitting for the whole suns and simple centroiding for the partial suns   ", "", "          -1", "       NONE, BRAH   idldoc,root='/Users/jerensuzuki/Documents/suncentering', output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/alpha.html", "alpha.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "alpha.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/alpha.html#alpha", "alpha", 'routine in <a href="code_snapshots/test_version/alpha.html">alpha.pro</a>', "alpha.pro", "", "alpha", "      Finds the center of N whole suns and M partial suns using limb-fitting for the whole suns and simple centroiding for the partial suns   ", "", "          -1", "       NONE, BRAH   idldoc,root='/Users/jerensuzuki/Documents/suncentering', output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/alpha.html", "alpha.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "alpha.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/alpha.html#alpha", "alpha", 'routine in <a href="code_snapshots/albert_version/alpha.html">alpha.pro</a>', "alpha.pro", "", "alpha", "      Finds the center of N whole suns and M partial suns using limb-fitting for the whole suns and simple centroiding for the partial suns   ", "", "          -1", "       NONE, BRAH   idldoc,root='/Users/jerensuzuki/Documents/suncentering', output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/alpha.html", "alpha.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "alpha.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/alpha.html#alpha", "alpha", 'routine in <a href="code_snapshots/sep11/alpha.html">alpha.pro</a>', "alpha.pro", "", "alpha", "      Finds the center of N whole suns and M partial suns using limb-fitting for the whole suns and simple centroiding for the partial suns   ", "", "          -1", "       NONE, BRAH   idldoc,root='../suncentering', output='doc_lib',format_style='rst',/user,/quiet,markup_style='rst'  ");
  
  

libdata[libdataItem++] = new Array("idlastro/altaz2hadec.html", "altaz2hadec.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "altaz2hadec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/altaz2hadec.html#altaz2hadec", "altaz2hadec", 'routine in <a href="idlastro/altaz2hadec.html">altaz2hadec.pro</a>', "altaz2hadec.pro", "", "altaz2hadec", "  NAME:     ALTAZ2HADEC  PURPOSE:     Convert Horizon (Alt-Az) coordinates to Hour Angle and Declination.  EXPLANATION: <span class= code-output >  Can deal with the NCP singularity.    Intended mainly to be used by</span> <span class= code-output >  program hor2eq.pro</span> CALLING SEQUENCE:    ALTAZ2HADEC, alt, az, lat, ha, dec   INPUTS    alt - the local apparent altitude, in DEGREES, scalar or vector    az  - the local apparent azimuth, in DEGREES, scalar or vector,          measured EAST of NORTH!!!  If you have measured azimuth west-of-south         (like the book MEEUS does), convert it to east of north via:                        az = (az + 180) mod 360     lat -  the local geodetic latitude, in DEGREES, scalar or vector.   OUTPUTS    ha  -  the local apparent hour angle, in DEGREES.  The hour angle is the           time that right ascension of 0 hours crosses the local meridian.           It is unambiguously defined.    dec -  the local apparent declination, in DEGREES.   EXAMPLE:      Arcturus is observed at an apparent altitude of 59d,05m,10s and an      azimuth (measured east of north) of 133d,18m,29s while at the      latitude of +43.07833 degrees.      What are the local hour angle and declination of this object?       IDL&gt; altaz2hadec, ten(59,05,10), ten(133,18,29), 43.07833, ha, dec      ===&gt; Hour angle ha = 336.683 degrees           Declination, dec = 19.1824 degrees         The widely available XEPHEM code gets:                  Hour Angle = 336.683                  Declination = 19.1824   REVISION HISTORY:     Written  Chris O'Dell Univ. of Wisconsin-Madison May 2002  ", "altazlathadec", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ansi_value.html", "ansi_value.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ansi_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ansi_value.html#ANSI_VALUE", "ANSI_VALUE", 'routine in <a href="coyote/ansi_value.html">ansi_value.pro</a>', "ansi_value.pro", "       Bernat Puigdomenech   ", "ANSI_VALUE", "   Provides a way to display non-printable characters in widget elements.   ", "EXAMPLE         Set this keyword to see an example of non-printable characters          rendered in a Dialog_Pickfile widget.   str_in         The input string that you wish to render on a widget element.   ", "Widgets", "     Change History: <span class= code-output >  Written, 2 September 2011. Bernat Puigdomenech.</span>       Copyright (c) 2011, Bernat Puigdomenech.      Call the built-in example:   <span class= code-prompt >IDL&gt;</span> void = ANSI_Value(/EXAMPLE)  ");
  
  

libdata[libdataItem++] = new Array("idlastro/aper.html", "aper.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "aper.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/aper.html#aper", "aper", 'routine in <a href="idlastro/aper.html">aper.pro</a>', "aper.pro", "", "aper", " NAME:       APER  PURPOSE:       Compute concentric aperture photometry (adapted from DAOPHOT)  EXPLANATION:      APER can compute photometry in several user-specified aperture radii.      A separate sky value is computed for each source using specified inner      and outer sky radii.   CALLING SEQUENCE:      APER, image, xc, yc, [ mags, errap, sky, skyerr, phpadu, apr, skyrad,                        badpix, /NAN, /EXACT, /FLUX, PRINT = , /SILENT,                        /MEANBACK, MINSKY=, SETSKYVAL = ]  INPUTS:      IMAGE -  input image array      XC     - vector of x coordinates.      YC     - vector of y coordinates   OPTIONAL INPUTS:      PHPADU - Photons per Analog Digital Units, numeric scalar.  Converts                the data numbers in IMAGE to photon units.  (APER assumes                Poisson statistics.)      APR    - Vector of up to 12 REAL photometry aperture radii.      SKYRAD - Two element vector giving the inner and outer radii                to be used for the sky annulus.   Ignored if the SETSKYVAL               keyword is set.      BADPIX - Two element vector giving the minimum and maximum value                of a good pixel.   If badpix is not supplied or if BADPIX[0] is                equal to BADPIX[1] then it is assumed that there are no bad                pixels.     Note that fluxes will not be computed for any star                with a bad pixel within the aperture area, but that bad pixels                will be simply ignored for the sky computation.    The BADPIX                parameter is ignored if the /NAN keyword is set.   OPTIONAL KEYWORD INPUTS:      CLIPSIG - if /MEANBACK is set, then this is the number of sigma at which              to clip the background.  Default=3      CONVERGE_NUM:  if /MEANBACK is set then if the proportion of            rejected pixels is less than this fraction, the iterations stop.            Default=0.02, i.e., iteration stops if fewer than 2% of pixels            excluded.      /EXACT -  By default, APER counts subpixels, but uses a polygon              approximation for the intersection of a circular aperture with              a square pixel (and normalizes the total area of the sum of the              pixels to exactly match the circular area).   If the /EXACT              keyword, then the intersection of the circular aperture with a              square pixel is computed exactly.    The /EXACT keyword is much              slower and is only needed when small (~2 pixels) apertures are              used with very undersampled data.      /FLUX - By default, APER uses a magnitude system where a magnitude of                25 corresponds to 1 flux unit.   If set, then APER will keep               results in flux units instead of magnitudes.      MAXITER if /MEANBACK is set then this is the ceiling on number of              clipping iterations of the background.  Default=5      /MEANBACK - if set, then the background is computed using the 3 sigma              clipped mean (using meanclip.pro) rather than using the mode              computed with mmm.pro.    This keyword is useful for the Poisson              count regime or where contamination is known  to be minimal.       MINSKY - Integer giving mininum number of sky values to be used with MMM              APER will not compute a flux if fewer valid sky elements are                within the sky annulus.   Default = 20.      /NAN  - If set then APER will check for NAN values in the image.   /NAN              takes precedence over the BADPIX parameter.   Note that fluxes              will not be computed for any star with a NAN pixel within the              aperture area, but that NAN pixels will be simply ignored for              the sky computation.      PRINT - if set and non-zero then APER will also write its results to                a file aper.prt.   One can specify the output file name by                setting PRINT = 'filename'.      READNOISE - Scalar giving the read noise (or minimum noise for any               pixel.   This value is passed to the procedure mmm.pro when               computing the sky, and is only need for images where               the noise is low, and pixel values are quantized.      /SILENT -  If supplied and non-zero then no output is displayed to the                terminal.      SETSKYVAL - Use this keyword to force the sky to a specified value                rather than have APER compute a sky value.    SETSKYVAL                can either be a scalar specifying the sky value to use for                all sources, or a 3 element vector specifying the sky value,                the sigma of the sky value, and the number of elements used                to compute a sky value.   The 3 element form of SETSKYVAL                is needed for accurate error budgeting.   OUTPUTS:      MAGS   -  NAPER by NSTAR array giving the magnitude for each star in                each aperture.  (NAPER is the number of apertures, and NSTAR                is the number of stars).   If the /FLUX keyword is not set, then                a flux of 1 digital unit is assigned a zero point magnitude of                25.      ERRAP  -  NAPER by NSTAR array giving error for each star.  If a                magnitude could not be determined then  ERRAP = 9.99 (if in                 magnitudes) or ERRAP = !VALUES.F_NAN (if /FLUX is set).      SKY  -    NSTAR element vector giving sky value for each star in                flux units      SKYERR -  NSTAR element vector giving error in sky values   EXAMPLE:        Determine the flux and error for photometry radii of 3 and 5 pixels        surrounding the position 234.2,344.3 on an image array, im.   Compute        the partial pixel area exactly.    Assume that the flux units are in        Poisson counts, so that PHPADU = 1, and the sky value is already known        to be 1.3, and that the range [-32767,80000] for bad low and bad high        pixels         IDL&gt; aper, im, 234.2, 344.3, flux, eflux, sky,skyerr, 1, [3,5], -1, $             [-32767,80000],/exact, /flux, setsky = 1.3   PROCEDURES USED:        GETOPT, MMM, PIXWT(), STRN(), STRNUMBER()  NOTES:        Reasons that a valid magnitude cannot be computed include the following:       (1) Star position is too close (within 0.5 pixels) to edge of the frame       (2) Less than 20 valid pixels available for computing sky       (3) Modal value of sky could not be computed by the procedure MMM       (4) *Any* pixel within the aperture radius is a  bad  pixel       (5) The total computed flux is negative.     In this case the negative           flux and error are returned.         For the case where the source is fainter than the background, APER will        return negative fluxes if /FLUX is set, but will otherwise give        invalid data (since negative fluxes can't be converted to magnitudes)         APER was modified in June 2000 in two ways: (1) the /EXACT keyword was        added (2) the approximation of the intersection of a circular aperture        with square pixels was improved (i.e. when /EXACT is not used)  REVISON HISTORY:        Adapted to IDL from DAOPHOT June, 1989   B. Pfarr, STX        FLUX keyword added                       J. E. Hollis, February, 1996        SETSKYVAL keyword, increase maxsky       W. Landsman, May 1997        Work for more than 32767 stars           W. Landsman, August 1997        Don't abort for insufficient sky pixels  W. Landsman  May 2000        Added /EXACT keyword                     W. Landsman  June 2000        Allow SETSKYVAL = 0                      W. Landsman  December 2000        Set BADPIX[0] = BADPIX[1] to ignore bad pixels W. L.  January 2001        Fix chk_badpixel problem introduced Jan 01 C. Ishida/W.L. February 2001        Set bad fluxes and error to NAN if /FLUX is set  W. Landsman Oct. 2001        Remove restrictions on maximum sky radius W. Landsman  July 2003        Added /NAN keyword  W. Landsman November 2004        Set badflux=0 if neither /NAN nor badpix is set  M. Perrin December 2004        Added READNOISE keyword   W. Landsman January 2005        Added MEANBACK keyword   W. Landsman October 2005        Correct typo when /EXACT and multiple apertures used.  W.L. Dec 2005        Remove VMS-specific code W.L. Sep 2006        Add additional keywords if /MEANBACK is set W.L  Nov 2006        Allow negative fluxes if /FLUX is set  W.L.  Mar 2008        Previous update would crash if first star was out of range  W.L. Mar 2008        Fix floating equality test for bad magnitudes W.L./J.van Eyken Jul 2009        Added MINSKY keyword W.L. Dec 2011  ", "SETSKYVALPRINTSILENTFLUXEXACTNanREADNOISEMEANBACKCLIPSIGMAXITERCONVERGE_NUMMINSKYimagexcycmagserrapskyskyerrphpaduaprskyradbadpix", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/arcbar.html", "arcbar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "arcbar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/arcbar.html#arcbar", "arcbar", 'routine in <a href="idlastro/arcbar.html">arcbar.pro</a>', "arcbar.pro", "", "arcbar", " NAME:        ARCBAR  PURPOSE:        Draw an arc bar on an image showing the astronomical plate scale   CALLING SEQUENCE:        ARCBAR, hdr, arclen,[  COLOR= , /DATA, LABEL= , /NORMAL, POSITION =,                               /SECONDS, SIZE=, THICK=, FONT= ]   INPUTS:        hdr - image FITS header with astrometry, string array        arclen - numeric scalar giving length of bar in arcminutes (default)                or arcseconds (if /SECONDS is set)   OPTIONAL KEYWORD INPUTS:        COLOR - name  or integer scalar specifying the color to draw the arcbar                See cgColor for a list of available color names        /DATA - if set and non-zero, then the POSITION keyword is given in data               units        LABEL - string giving user defined label for bar.  Default label is size                of bar in arcminutes        /NORMAL - if this keyword is set and non-zero, then POSITION is given in                normalized units        POSITION - 2 element vector giving the (X,Y) position in device units                (or normalized units if /NORMAL is set, or data units if /DATA                is set) at which to place the  scale bar.   If not supplied,                then the user will be prompted to place the cursor at the                desired position        /SECONDS - if set, then arlen is specified in arcseconds rather than                arcminutes        SIZE  - scalar specifying character size of label, default = 1.0        THICK -  Character thickness of the label, default = !P.THICK        FONT - scalar font graphics keyword (-1,0 or 1) for text   EXAMPLE:        Place a 3' arc minute scale bar, at position 300,200 of the current        image window, (which is associated with a FITS header, HDR)         IDL&gt; arcbar, HDR, 3, pos = [300,200]   RESTRICTIONS:        When using using a device with scalable pixels (e.g. postscript)        the data coordinate system must be established before calling ARCBAR.        If data coordinates are not set, then ARCBAR assumes that the displayed        image size is given by the NAXIS1 keyword in the FITS header.  PROCEDURE CALLS:        AD2XY, EXTAST, GSSSADXY, SXPAR(), cgPlot, cgText  REVISON HISTORY:        written by L. Taylor (STX) from ARCBOX (Boothman)        modified for Version 2 IDL,                     B. Pfarr, STX, 4/91        New ASTROMETRY structures               W.Landsman,  HSTX, Jan 94        Recognize a GSSS header                 W. Landsman June 94        Added /NORMAL keyword                   W. Landsman Feb. 96        Use NAXIS1 for postscript if data coords not set,  W. Landsman Aug 96        Fixed typo for postscript W. Landsman   Oct. 96        Account for zeropoint offset in postscript  W. Landsman   Apr 97        Added /DATA, /SECONDS keywords   W. Landsman    July 1998        Use device-independent label offset  W. Landsman   August 2001        Allow font keyword to be passed.  T. Robishaw Apr. 2006        Remove obsolete TVCURSOR command  W. Landsman Jul 2007        Use Coyote Graphics W. Landsman  February 2011  ", "LABELSIZETHICKDATACOLORPOSITIONNORMALSECONDSFONThdrarclen", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/arcsample.html", "arcsample.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "arcsample.pro", "", "", " NAME:        ARCSAMPLE   PURPOSE:         Given X and Y points that describe a closed curve in 2D space,        this function returns an output curve that is sampled a specified        number of times at approximately equal arc distances.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities   CALLING SEQUENCE:         ArcSample, x_in, y_in, x_out, y_out   INPUT_PARAMETERS:         x_in:          The input X vector of points.        y_in:          The input Y vector of points.   OUTPUT_PARAMETERS:        x_out:          The output X vector of points.       y_out:          The output Y vector of points.   KEYWORDS:       POINTS:         The number of points in the output vectors. Default: 50.       PHASE:          A scalar between 0.0 and 1.0, for fine control of where interpolates                      are sampled. Default: 0.0.   MODIFICATION HISTORY:         Written by David W. Fanning, 1 December 2003, based on code supplied           to me by Craig Markwardt.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/arcsample.html#ArcSample", "ArcSample", 'routine in <a href="coyote/arcsample.html">arcsample.pro</a>', "arcsample.pro", "", "ArcSample", "", "POINTSPHASEx_iny_inx_outy_out", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/arrows.html", "arrows.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "arrows.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/arrows.html#arrows", "arrows", 'routine in <a href="idlastro/arrows.html">arrows.pro</a>', "arrows.pro", "", "arrows", " NAME:       ARROWS  PURPOSE:       To display  weathervane  directional arrows on an astronomical image  EXPLANATION:       Overlays a graphic showing orientation of North and East.   CALLING SEQUENCE:       ARROWS,h, [ xcen, ycen, ARROWLEN= , CHARSIZE=  COLOR= , /DATA                               FONT=, /NORMAL, /NOTVERTEX, THICK=  ]   INPUTS:        h - FITS header array, must include astrometry   OPTIONAL INPUTS:        xcen,ycen - numeric scalars, specifying the center position of 		arrows.   Position in device units unless the /NORMALIZED 		keyword is specified.   If not supplied, then ARROWS 		will prompt for xcen and ycen   OPTIONAL KEYWORD INPUTS:        arrowlen  - length of arrows in terms of normal Y size of vector-drawn                      character,  default  = 3.5, floating point scalar        charsize  - character size, default = 2.0, floating point scalar        color     -  color name or number for the arrows and NE letters.  See                  cgCOLOR() for a list of color names.        Data - if this keyword is set and nonzero, the input center (xcen,                  ycen) is understood to be in data coordinates        font - IDL vector font number (1-20) to use to display NE letters.                  For example, set font=13 to use complex italic font.        NotVertex - Normally (historically) the specified xcen,ycen indicated                    the position of the vertex of the figure.  If this                    keyword is set, the xcen,ycen coordinates refer to a sort                    of 'center of mass' of the figure.  This allows the                    figure to always appear with the area irregardless of                    the rotation angle.        Normal - if this keyword is set and nonzero, the input center                 (xcen,ycen) is taken to be in normalized coordinates.   The                 default is device coordinates.        thick     - line thickness, default = 2.0, floating point scalar  OUTPUTS:        none  EXAMPLE:        Draw a weathervane at (400,100) on the currently active window,        showing the orientation of the image associated with a FITS header, hdr         IDL&gt; arrows, hdr, 400, 100   METHOD:        Uses EXTAST to EXTract ASTrometry from the FITS header.   The        directions of North and East are computed and the procedure        ONE_ARROW called to create the  weathervane .   PROCEDURES USED:        GETROT - Computes rotation from the FITS header        ONE_ARROW - Draw a labeled arrow        ZPARCHECK  REVISON HISTORY:        written by B. Boothman 2/5/86        Recoded with new procedures ONE_ARROW, ONE_RAY.  R.S.Hill,HSTX,5/20/92        Added separate determination for N and E arrow to properly display          arrows irregardless of handedness or other peculiarities and added          /NotVertex keyword to improve positioning of figure. E.Deutsch 1/10/93        Added /DATA and /NORMAL keywords W. Landsman      July 1993        Recognize GSSS header    W. Landsman       June 1993        Added /FONT keyword W. Landsman           April 1995        Modified to work correctly for COLOR=0  J.Wm.Parker, HITC   1995 May 25        Work correctly for negative CDELT values   W. Landsman   Feb. 1996        Use GETROT to compute rotation   W. Landsman    June 2003        Restored /NotVertex keyword which was not working after June 2003 change                   W. Landsman  January 2004  ", "thickcharsizearrowlencolorNotVertexNormalDatafonthxcenycen", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/asinh.html", "asinh.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "asinh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/asinh.html#asinh", "asinh", 'routine in <a href="idlastro/asinh.html">asinh.pro</a>', "asinh.pro", "", "asinh", " NAME:      ASINH  PURPOSE:      Return the inverse hyperbolic sine of the argument  EXPLANATION:      The inverse hyperbolic sine is used for the calculation of asinh      magnitudes, see Lupton et al. (1999, AJ, 118, 1406)   CALLING SEQUENCE      result = asinh( x)  INPUTS:      X - hyperbolic sine, numeric scalar or vector or multidimensional array         (not complex)   OUTPUT:      result - inverse hyperbolic sine, same number of elements as X               double precision if X is double, otherwise floating pt.   METHOD:      Expression given in  Numerical Recipes, Press et al. (1992), eq. 5.6.7      Note that asinh(-x) = -asinh(x) and that asinh(0) = 0. and that      if y = asinh(x) then x = sinh(y).   REVISION HISTORY:      Written W. Landsman                 February, 2001      Work for multi-dimensional arrays  W. Landsman    August 2002      Simplify coding, and work for scalars again  W. Landsman October 2003  ", "x", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/asinhscl.html", "asinhscl.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "asinhscl.pro", "", "", " NAME:        ASINHSCL   PURPOSE:         This is a utility routine to perform an inverse hyperbolic sine        function intensity transformation on an image. I think of this        as a sort of  tuned  gamma or power-law function. The algorithm,        and notion of  asinh magnitudes , comes from a paper by Lupton,        et. al, in The Astronomical Journal, 118:1406-1410, 1999 September.        I've relied on the implementation of Erin Sheldon, found here:             http://cheops1.uchicago.edu/idlhelp/sdssidl/plotting/tvasinh.html         I'm also grateful of discussions with Marshall Perrin on the IDL        newsgroup with respect to the meaning of the  softening parameter , beta,        and for finding (and fixing!) small problems with the code.         Essentially this transformation allow linear scaling of noise values,        and logarithmic scaling of signal values, since there is a small        linear portion of the curve and a much large logarithmic portion of        the curve. (See the EXAMPLE section for some tips on how to view this        transformation curve.)   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         outputImage = ASINHSCL(image)   ARGUMENTS:         image:         The image or signal to be scaled. Written for 2D images, but arrays                       of any size are treated alike.   KEYWORDS:         BETA:          This keyword corresponds to the  softening parameter  in the Lupon et. al paper.                       This factor determines the input level at which linear behavior sets in. Beta                       should be set approximately equal to the amount of  noise  in the input signal.                       IF BETA=0 there is a very small linear portion of the curve; if BETA=200 the                       curve is essentially all linear. The default value of BETA is set to 3, which                       is appropriate for a small amount of noise in your signal. The value is always                       positive.         NEGATIVE:      If set, the  negative  of the result is returned.         MAX:           Any value in the input image greater than this value is                       set to this value before scaling.         MIN:           Any value in the input image less than this value is                       set to this value before scaling.         OMAX:          The output image is scaled between OMIN and OMAX. The                       default value is 255.         OMIN:          The output image is scaled between OMIN and OMAX. The                       default value is 0.  RETURN VALUE:         outputImage:   The output, scaled into the range OMIN to OMAX. A byte array.   COMMON BLOCKS:        None.   EXAMPLES:         Plot,  ASinhScl(Indgen(256), Beta=0.0), LineStyle=0        OPlot, ASinhScl(Indgen(256), Beta=0.1), LineStyle=1        OPlot, ASinhScl(Indgen(256), Beta=1.0), LineStyle=2        OPlot, ASinhScl(Indgen(256), Beta=10.), LineStyle=3        OPlot, ASinhScl(Indgen(256), Beta=100), LineStyle=4   RESTRICTIONS:       Requires cgScaleVector from the Coyote Library:          http://www.idlcoyote.com/programs/cgScaleVector.pro       Incorporates ASINH from the NASA Astronomy Library and renamed ASINHSCL_ASINH.         http://idlastro.gsfc.nasa.gov/homepage.html   MODIFICATION HISTORY:         Written by:  David W. Fanning, 24 February 2006.        Removed ALPHA keyword and redefined the BETA keyword to correspond          to the  softening parameter  of Lupton et. al., following the          suggestions of Marshall Perrin. 25 April 2006. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/asinhscl.html#ASinhScl_ASinh", "ASinhScl_ASinh", 'routine in <a href="coyote/asinhscl.html">asinhscl.pro</a>', "asinhscl.pro", "", "ASinhScl_ASinh", "", "x", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/asinhscl.html#ASinhScl", "ASinhScl", 'routine in <a href="coyote/asinhscl.html">asinhscl.pro</a>', "asinhscl.pro", "", "ASinhScl", "", "BETANEGATIVEMAXMINOMAXOMINimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/aspect.html", "aspect.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "aspect.pro", "", "", " NAME:   ASPECT   PURPOSE:    This function calculates and returns the normalized position   coordinates necessary to put a plot with a specified aspect ratio   into the currently active graphics window. It works on the display   output window as well as in a PostScript output window.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:    Graphics   CALLING SEQUENCE:    position = ASPECT(aspectRatio)   INPUTS:    aspectRatio: A floating point value that is the desired aspect      ratio (ratio of heigth to width) of the plot in the current      graphics output window. If this parameter is missing, an aspect      ratio of 1.0 (a square plot) is assumed.   KEYWORD PARAMETERS:    MARGIN:  The margin around the edges of the plot. The value must be      a floating point value between 0.0 and 0.5. It is expressed in      normalized coordinate units. The default margin is 0.15.    WINDOWASPECT: The aspect ratio of the target window. If not provided,      the value is obtained from the current graphics window.   OUTPUTS:    position: A four-element floating array of normalized coordinates.      The order of the elements is [x0, y0, x1, y1], similar to the      !P.POSITION system variable or the POSITION keyword on any IDL      graphic command.   EXAMPLE:    To create a plot with an aspect ratio of 1:2 and a margin of   0.10 around the edge of the output window, do this:       plotPosition = ASPECT(0.5, Margin=0.10)      PLOT, Findgen(11), POSITION=plotPosition    Notice this can be done in a single IDL command, like this:       PLOT, Findgen(11), POSITION=ASPECT(0.5, Margin=0.10)   MODIFICATION HISTORY:    Written by: David Fanning, November 1996.        Added better error checking, 18 Feb 1997, DWF.        Added WindowAspect keyword. 10 Feb 2000. DWF        Added double precision tolerance for aspectRatio. 9 NOV 2001 BT        Officially retired in favor of cgAspect. 11 February 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/aspect.html#ASPECT", "ASPECT", 'routine in <a href="coyote/aspect.html">aspect.pro</a>', "aspect.pro", "", "ASPECT", "", "MARGINWindowAspectaspectRatio", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/aspect.html", "aspect.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "aspect.pro", "", "", " NAME:   ASPECT   PURPOSE:    This function calculates and returns the normalized position   coordinates necessary to put a plot with a specified aspect ratio   into the currently active graphics window. It works on the display   output window as well as in a PostScript output window.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:    Graphics   CALLING SEQUENCE:    position = ASPECT(aspectRatio)   INPUTS:    aspectRatio: A floating point value that is the desired aspect      ratio (ratio of heigth to width) of the plot in the current      graphics output window. If this parameter is missing, an aspect      ratio of 1.0 (a square plot) is assumed.   KEYWORD PARAMETERS:    MARGIN:  The margin around the edges of the plot. The value must be      a floating point value between 0.0 and 0.5. It is expressed in      normalized coordinate units. The default margin is 0.15.    WINDOWASPECT: The aspect ratio of the target window. If not provided,      the value is obtained from the current graphics window.   OUTPUTS:    position: A four-element floating array of normalized coordinates.      The order of the elements is [x0, y0, x1, y1], similar to the      !P.POSITION system variable or the POSITION keyword on any IDL      graphic command.   EXAMPLE:    To create a plot with an aspect ratio of 1:2 and a margin of   0.10 around the edge of the output window, do this:       plotPosition = ASPECT(0.5, Margin=0.10)      PLOT, Findgen(11), POSITION=plotPosition    Notice this can be done in a single IDL command, like this:       PLOT, Findgen(11), POSITION=ASPECT(0.5, Margin=0.10)   MODIFICATION HISTORY:    Written by: David Fanning, November 1996.        Added better error checking, 18 Feb 1997, DWF.        Added WindowAspect keyword. 10 Feb 2000. DWF        Added double precision tolerance for aspectRatio. 9 NOV 2001 BT  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/aspect.html#ASPECT", "ASPECT", 'routine in <a href="idlastro/coyote/aspect.html">aspect.pro</a>', "aspect.pro", "", "ASPECT", "", "MARGINWindowAspectaspectRatio", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/astdisp.html", "astdisp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "astdisp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/astdisp.html#AstDisp", "AstDisp", 'routine in <a href="idlastro/astdisp.html">astdisp.pro</a>', "astdisp.pro", "", "AstDisp", " NAME: 	ASTDISP   PURPOSE: 	Print astronomical and pixel coordinates in a standard format  EXPLANATION: 	This procedure (ASTrometry DISPlay) prints the astronomical and 	pixel coordinates in a standard format.  X,Y must be supplied.  RA,DEC 	may also be supplied, and a data number (DN) may also be 	supplied.   With use of the Coords= keyword, a string containing the 	formatted data can be returned in addition or instead (with /silent) 	of printing.   CALLING SEQUENCE: 	ASTDISP, x, y, [Ra, Dec, DN, COORD = , /SILENT ]   INPUT: 	X  - The X pixel coordinate(s), scalar or vector 	Y  - The Y pixel coordinate(s), scalar or vector   OPTIONAL INPUTS: 	RA -  Right Ascension in *degrees*, scalar or vector 	DEC - DEClination in *degrees*, scalar or vector (if RA is supplied, DEC must also be supplied) 	DN -  Data Number or Flux values  	Each of the inputs X,Y, RA, DEC, DN should have the same number of 		elements  OPTIONAL INPUT KEYWORDS: 	SILENT    Prevents printing.  Only useful when used with Coords=  OUTPUT: 	Printed positions in both degrees and sexagesimal format 	All passed variables remain unchanged  OPTIONAL KEYWORD OUTPUT: 	COORDS    Returns the formatted coordinates in a string  PROCEDURES CALLED: 	ADSTRING - used to format the RA and Dec  HISTORY: 	10-AUG-90 Version 1 written by Eric W. Deutsch 	20-AUG-91 Converted to standard header.  Vectorized Code.  E. Deutsch 	20-NOV-92 Added Coords= and /silent.  E.Deutsch 	Converted to IDL V5.0   W. Landsman   September 1997  ", "CoordssilentxyradecDN", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/astro.html", "astro.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "astro.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/astro.html#astro", "astro", 'routine in <a href="idlastro/astro.html">astro.pro</a>', "astro.pro", "", "astro", " NAME:      ASTRO  PURPOSE:      Interactive utility for precession and coordinate conversion.   CALLING SEQUENCE:      ASTRO, [ selection, EQUINOX =, /FK4]   OPTIONAL INPUT:       SELECTION - Scalar Integer (0-6) giving the the particular astronomical               utility to be used.  (0) Precession, (1) RA, Dec (2000) to Galactic               coordinates, (2) Galactic to RA,Dec (2000) (3) RA,Dec (2000) to               Ecliptic, (4) Ecliptic to RA, Dec, (5) Ecliptic to Galactic, (6) Galactic               to Ecliptic.   Program will prompt for SELECTION if this               parameter is omitted.   OPTIONAL KEYWORD INPUT:        EQUINOX - numeric scalar specifying the equinox to use when converting                between celestial and other coordinates.    If not supplied,                then the RA and Dec will be assumed to be in EQUINOX J2000.                This keyword is ignored by the precession utility.   For                example, to convert from RA and DEC (J1975) to Galactic                coordinates:                 IDL&gt; astro, 1, E=1975        /FK4 - If this keyword is set and nonzero, then calculations are done               in the FK4 system.    For example, to convert from RA and Dec               (B1975) to Galactic coordinates                 IDL&gt; astro,1, E=1975,/FK4  METHOD:       ASTRO uses PRECESS to compute precession, and EULER to compute       coordinate conversions.   The procedure GET_COORDS is used to       read the coordinates, and ADSTRING to format the RA,Dec output.   NOTES:       (1) ASTRO temporarily sets !QUIET to suppress compilation messages and       keep a pretty screen display.        (2) ASTRO was changed in December 1998 to use J2000 as the default       equinox, **and may be incompatible with earlier calls.***        (3) A nice online page for coordinate conversions is available at        http://heasarc.gsfc.nasa.gov/cgi-bin/Tools/convcoord/convcoord.pl  PROCEDURES USED:       Procedures: GET_COORDS, EULER       Function: ADSTRING  REVISION HISTORY       Written, W. Landsman November 1987       Code cleaned up       W. Landsman   October 1991       Added Equinox keyword, call to GET_COORDS, W. Landsman   April, 1992       Allow floating point equinox input J. Parker/W. Landsman  July 1996       Make FK5 the default, add FK4 keyword  ", "EQUINOXFK4selection", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/astrolib.html", "astrolib.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "astrolib.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/astrolib.html#ASTROLIB", "ASTROLIB", 'routine in <a href="idlastro/astrolib.html">astrolib.pro</a>', "astrolib.pro", "", "ASTROLIB", " NAME:        ASTROLIB  PURPOSE:        Add the non-standard system variables used by the IDL Astronomy Library  EXPLANATION:        Also defines the environment variable ASTRO_DATA pointing to the        directory containing data files  associated with the IDL Astronomy        library (system dependent -- user must edit the third line in the        program below).   CALLING SEQUENCE:        ASTROLIB   INPUTS:        None.   OUTPUTS:        None.   METHOD:        The non-standard system variables !PRIV, !TEXTUNIT, and        !TEXTOUT are added using DEFSYSV.   REVISION HISTORY:        Written, Wayne Landsman, July 1986.        Use DEFSYSV instead of ADDSYSVAR           December 1990        Test for system variable existence before definition    July 2001        Assume since V55, remove VMS support  W. Landsman   Sep 2006        Remove !Debug, comment out ASTRO_DATA definition  WL  Jan 2009  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/autohist.html", "autohist.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "autohist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/autohist.html#AUTOHIST", "AUTOHIST", 'routine in <a href="idlastro/autohist.html">autohist.pro</a>', "autohist.pro", "", "AUTOHIST", " NAME:        AUTOHIST   PURPOSE:        Draw a histogram using automatic bin-sizing.  EXPLANATION        AUTOHIST chooses a number of bins (initially, SQRT(2*N). If this leads        to a histogram in which &gt; 1/5 of the central 50% of the bins are empty,        it decreases the number of bins and tries again. The minimum # bins is        5. The max=199.     Called by HISTOGAUSS and HALFAGAUSS.   CALLING SEQUENCE:        AUTOHIST, Sample, XLines, Ylines, XCenters, YCenters, [/NOPLOT, ]                              ...Plotting Keywords  INPUT:        Sample = the vector to be histogrammed   OUTPUT:        XLINES = vector of x coordinates of the points that trace the rectangular                histogram bins        YLINES = vector of y coordinates. To draw the histogram plot YLINES vs                  XLINES        XCENTERS = the x values of the bin centers        YCENTERS = the corresponding y values   OPTIONAL INPUT KEYWORDS:        /NOPLOT  If set, nothing is drawn         Any plotting keywords (e.g. XTITLE) may be supplied to AUTOHIST through        the _EXTRA facility.  REVISION HISTORY:        Written,   H. Freudenreich, STX, 1/91        1998 March 17 - Changed shading of histogram.  RSH, RSTX        V5.0 update, _EXTRA keywords  W. Landsman    April 2002        Added NOCLIP keyword for POLYFILL call C. Paxson/W. Landsman July 2003        Use Coyote graphics   W. Landsman  Feb 2011  ", "NOPLOT_EXTRAVZXZYXXYY", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/avg.html", "avg.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "avg.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/avg.html#AVG", "AVG", 'routine in <a href="idlastro/avg.html">avg.pro</a>', "avg.pro", "", "AVG", " NAME:        AVG  PURPOSE:        Return the average value of an array, or 1 dimension of an array  EXPLANATION:        Calculate the average value of an array, or calculate the average        value over one dimension of an array as a function of all the other        dimensions.         In 2009, a DIMENSION keyword was added to the IDL MEAN() function,        giving it the same capability as AVG().  Thus, the use of AVG() is now        **deprecated** in favor of the MEAN() function.  CALLING SEQUENCE:        RESULT = AVG( ARRAY, [ DIMENSION, /NAN, /DOUBLE ] )   INPUTS:        ARRAY = Input array.  May be any type except string.   OPTIONAL INPUT PARAMETERS:        DIMENSION = Optional dimension to do average over, integer scalar   OPTIONAL KEYWORD INPUT:       /NAN - Set this keyword to cause the routine to check for occurrences of             the IEEE floating-point value NaN in the input data.  Elements with             the value NaN are treated as missing data.       /DOUBLE - By default, if the input Array is double-precision, complex,                 or double complex, the result is of the same type;  64 bit                 integers are also returned as double.   Otherwise the result                 the  result is floating-point.   Use of the /DOUBLE keyword                 forces a double precision output.   Note that internal                 computations are always done in double precision.  OUTPUTS:        The average value of the array when called with one parameter.         If DIMENSION is passed, then the result is an array with all the        dimensions of the input array except for the dimension specified,        each element of which is the average of the corresponding vector        in the input array.         For example, if A is an array with dimensions of (3,4,5), then the        command B = AVG(A,1) is equivalent to                         B = FLTARR(3,5)                        FOR J = 0,4 DO BEGIN                                FOR I = 0,2 DO BEGIN                                        B[I,J] = TOTAL( A[I,*,J] ) / 4.                                ENDFOR                        ENDFOR   RESTRICTIONS:        Dimension specified must be valid for the array passed; otherwise the        input array is returned as the output array.  PROCEDURE:        AVG(ARRAY) = TOTAL(ARRAY, /DOUBLE)/N_ELEMENTS(ARRAY) when called with        one parameter.  MODIFICATION HISTORY:        William Thompson        Applied Research Corporation        July, 1986              8201 Corporate Drive                                Landover, MD  20785        Converted to Version 2      July, 1990        Replace SUM call with TOTAL    W. Landsman    May, 1992        Converted to IDL V5.0   W. Landsman   September 1997        Added /NAN keyword   W. Landsman      July 2000        Accept a scalar input value    W. Landsman/jimm@berkeley   November 2000        Internal calculations always in double precision W. Landsman March 2002        Return NAN if all values in array are NAN  W. Landsman April 2002        Fixed coding bug if all values in array are NAN W. Landsman Jan 2004  ", "NANDOUBLEARRAYDIMENSION", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/barkbark.html", "barkbark.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "barkbark.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/barkbark.html#barkbark", "barkbark", 'routine in <a href="code_snapshots/obsolete_code/barkbark.html">barkbark.pro</a>', "barkbark.pro", "", "barkbark", "", "inputthresh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/baryvel.html", "baryvel.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "baryvel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/baryvel.html#baryvel", "baryvel", 'routine in <a href="idlastro/baryvel.html">baryvel.pro</a>', "baryvel.pro", "", "baryvel", " NAME:        BARYVEL  PURPOSE:        Calculates heliocentric and barycentric velocity components of Earth.   EXPLANATION:        BARYVEL takes into account the Earth-Moon motion, and is useful for        radial velocity work to an accuracy of  ~1 m/s.   CALLING SEQUENCE:        BARYVEL, dje, deq, dvelh, dvelb, [ JPL =  ]   INPUTS:        DJE - (scalar) Julian ephemeris date.        DEQ - (scalar) epoch of mean equinox of dvelh and dvelb. If deq=0                then deq is assumed to be equal to dje.  OUTPUTS:        DVELH: (vector(3)) heliocentric velocity component. in km/s        DVELB: (vector(3)) barycentric velocity component. in km/s         The 3-vectors DVELH and DVELB are given in a right-handed coordinate        system with the +X axis toward the Vernal Equinox, and +Z axis        toward the celestial pole.   OPTIONAL KEYWORD SET:        JPL - if /JPL set, then BARYVEL will call the procedure JPLEPHINTERP              to compute the Earth velocity using the full JPL ephemeris.              The JPL ephemeris FITS file JPLEPH.405 must exist in either the              current directory, or in the directory specified by the              environment variable ASTRO_DATA.   Alternatively, the JPL keyword              can be set to the full path and name of the ephemeris file.              A copy of the JPL ephemeris FITS file is available in                  http://idlastro.gsfc.nasa.gov/ftp/data/  PROCEDURES CALLED:        Function PREMAT() -- computes precession matrix        JPLEPHREAD, JPLEPHINTERP, TDB2TDT - if /JPL keyword is set  NOTES:        Algorithm taken from FORTRAN program of Stumpff (1980, A&A Suppl, 41,1)        Stumpf claimed an accuracy of 42 cm/s for the velocity.    A        comparison with the JPL FORTRAN planetary ephemeris program PLEPH        found agreement to within about 65 cm/s between 1986 and 1994         If /JPL is set (using JPLEPH.405 ephemeris file) then velocities are        given in the ICRS system; otherwise in the FK4 system.  EXAMPLE:        Compute the radial velocity of the Earth toward Altair on 15-Feb-1994           using both the original Stumpf algorithm and the JPL ephemeris         IDL&gt; jdcnv, 1994, 2, 15, 0, jd          ;==&gt; JD = 2449398.5        IDL&gt; baryvel, jd, 2000, vh, vb          ;Original algorithm                ==&gt; vh = [-17.07243, -22.81121, -9.889315]  ;Heliocentric km/s                ==&gt; vb = [-17.08083, -22.80471, -9.886582]  ;Barycentric km/s        IDL&gt; baryvel, jd, 2000, vh, vb, /jpl   ;JPL ephemeris                ==&gt; vh = [-17.07236, -22.81126, -9.889419]  ;Heliocentric km/s                ==&gt; vb = [-17.08083, -22.80484, -9.886409]  ;Barycentric km/s         IDL&gt; ra = ten(19,50,46.77)*15/!RADEG    ;RA  in radians        IDL&gt; dec = ten(08,52,3.5)/!RADEG        ;Dec in radians        IDL&gt; v = vb[0]*cos(dec)*cos(ra) + $   ;Project velocity toward star                vb[1]*cos(dec)*sin(ra) + vb[2]*sin(dec)   REVISION HISTORY:        Jeff Valenti,  U.C. Berkeley    Translated BARVEL.FOR to IDL.        W. Landsman, Cleaned up program sent by Chris McCarthy (SfSU) June 1994        Converted to IDL V5.0   W. Landsman   September 1997        Added /JPL keyword  W. Landsman   July 2001        Documentation update W. Landsman Dec 2005  ", "JPLdjedeqdvelhdvelb", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/best4.html", "best4.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "best4.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/best4.html#best4", "best4", 'routine in <a href="code_snapshots/test_version/best4.html">best4.pro</a>', "best4.pro", "", "best4", "       Chooses best 4 fiducials (closest to disk center)   ", "inputstruct           Structure containing all the solar information  fidstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/best4.html", "best4.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "best4.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/best4.html#best4", "best4", 'routine in <a href="sep20/best4.html">best4.pro</a>', "best4.pro", "", "best4", "       Chooses best 4 fiducials (closest to disk center)   ", "inputstruct           Structure containing all the solar information  fidstruct           Structure containing all the fiducial information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/best4.html", "best4.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "best4.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/best4.html#best4", "best4", 'routine in <a href="code_snapshots/albert_version/best4.html">best4.pro</a>', "best4.pro", "", "best4", "       Chooses best 4 fiducials (closest to disk center)   ", "inputstruct           Structure containing all the solar information  fidstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/best4.html", "best4.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "best4.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/best4.html#best4", "best4", 'routine in <a href="code_snapshots/sep11/best4.html">best4.pro</a>', "best4.pro", "", "best4", "       Chooses best 4 fiducials (closest to disk center)   ", "inputstruct           Structure containing all the solar information  fidstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/best4.html", "best4.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "best4.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/best4.html#best4", "best4", 'routine in <a href="code_snapshots/jul25/best4.html">best4.pro</a>', "best4.pro", "", "best4", "       Chooses best 4 fiducials (closest to disk center)   ", "inputstruct           Structure containing all the solar information  fidstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/beta.html", "beta.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "beta.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/beta.html#beta", "beta", 'routine in <a href="code_snapshots/aug22_notworking/beta.html">beta.pro</a>', "beta.pro", "", "beta", "      Finds the center of N whole suns and M partial suns using limb-fitting for the whole suns and simple centroiding for the partial suns   ", "", "          -1", "       NONE, BRAH   idldoc,root='/Users/jerensuzuki/Documents/suncentering', output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/betterwhichcropmethod.html", "betterwhichcropmethod.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "betterwhichcropmethod.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/betterwhichcropmethod.html#betterwhichcropmethod", "betterwhichcropmethod", 'routine in <a href="code_snapshots/obsolete_code/betterwhichcropmethod.html">betterwhichcropmethod.pro</a>', "betterwhichcropmethod.pro", "", "betterwhichcropmethod", "       Crops differently according to which region is selected.   ", "region           1) main sun            2) 50% brightness sun            3) 25% brightness sun  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/binary.html", "binary.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "binary.pro", "", "", " NAME:   BINARY   PURPOSE:     This function is used to display a binary representation of byte,    integer, and long integer values.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Utilities   CALLING SEQUENCE:     output = Binary(theNumber)   RETURN VALUE:     output:        A string array of 0s and 1s to be printed (normally), in a                   binary representation of the number. The number is represented with                   the highest bits on the left and the lowest bits on the right,                   when printed with the PRINT command.   ARGUMENTS:    theNumber:      The number for which the user wants a binary representation.                   It must be BYTE, INT, or LONG.   KEYWORDRS:    COLOR:          If this keyword is set, the binary representation always                   contains 24 bits of output.    SEPARATE:       If this keyword is set, the output is separated with space                   between each group of eight bits.   EXAMPLE:    IDL&gt; Print, Binary(24B)           0 0 0 1 1 0 0 0   IDL&gt; Print, Binary(24L)           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0   IDL&gt; Print, Binary(24L, /COLOR)           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0   IDL&gt; Print, Binary(24L, /COLOR, /SEPARATE)           0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0    0 0 0 1 1 0 0 0   MODIFICATION HISTORY:    Written by: David W. Fanning, November 10, 2007.   Fixed a problem with error handling. 13 March 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/binary.html#BINARY", "BINARY", 'routine in <a href="coyote/binary.html">binary.pro</a>', "binary.pro", "", "BINARY", "", "COLORSEPARATEnumber", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/bitget.html", "bitget.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "bitget.pro", "", "", " NAME:        BITGET   PURPOSE:         Returns the bit value (0 or 1) of a specified bit in a supplied number.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities   CALLING SEQUENCE:         bitValue = BitGet(number, bit)   INPUT_PARAMETERS:         number:          The input number. Should be a scalar integer. If not, it is converted to                         one by rounding.         bit:             The number of the bit you are interested in. A value between 0 and 63.                         If not supplied, all 64 bit values of the number are returned. May be                         an array of bit numbers.   OUTPUT_PARAMETERS:        bitValue:        The value, 0 or 1, of the specified bit in the number.   KEYWORDS:       SILENT:           If set, suppresses informational messages regarding rounding operations.   MODIFICATION HISTORY:         Written by David W. Fanning, 14 June 2006.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/bitget.html#BitGet", "BitGet", 'routine in <a href="coyote/bitget.html">bitget.pro</a>', "bitget.pro", "", "BitGet", "", "SILENTvaluebit", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/bitget.html", "bitget.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "bitget.pro", "", "", " NAME:        BITGET   PURPOSE:         Returns the bit value (0 or 1) of a specified bit in a supplied number.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities   CALLING SEQUENCE:         bitValue = BitGet(number, bit)   INPUT_PARAMETERS:         number:          The input number. Should be a scalar integer. If not, it is converted to                         one by rounding.         bit:             The number of the bit you are interested in. A value between 0 and 63.                         If not supplied, all 64 bit values of the number are returned. May be                         an array of bit numbers.   OUTPUT_PARAMETERS:        bitValue:        The value, 0 or 1, of the specified bit in the number.   KEYWORDS:       SILENT:           If set, suppresses informational messages regarding rounding operations.   MODIFICATION HISTORY:         Written by David W. Fanning, 14 June 2006.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/bitget.html#BitGet", "BitGet", 'routine in <a href="idlastro/coyote/bitget.html">bitget.pro</a>', "bitget.pro", "", "BitGet", "", "SILENTvaluebit", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/biweight_mean.html", "biweight_mean.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "biweight_mean.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/biweight_mean.html#BIWEIGHT_MEAN", "BIWEIGHT_MEAN", 'routine in <a href="idlastro/biweight_mean.html">biweight_mean.pro</a>', "biweight_mean.pro", "", "BIWEIGHT_MEAN", " NAME: 	BIWEIGHT_MEAN   PURPOSE: 	Calculate the center and dispersion (like mean and sigma) of a 	distribution using bisquare weighting.   CALLING SEQUENCE: 	Mean = BIWEIGHT_MEAN( Vector, [ Sigma, Weights ] )   INPUTS: 	Vector = Distribution in vector form   OUTPUT: 	Mean - The location of the center.   OPTIONAL OUTPUT ARGUMENTS:  	Sigma = An outlier-resistant measure of the dispersion about the 	      center, analogous to the standard deviation.  	Weights = The weights applied to the data in the last iteration,                  floating point vector   NOTES:        Since a sample mean  scaled by sigma/sqrt(N), has a Student's T        distribution, the half-width of the  95% confidence interval for        the sample mean  can be determined as follows:           ABS( T_CVF( .975, .7*(N-1) )*SIGMA/SQRT(N) )        where N = number of  points, and  0.975 = 1 - (1 - 0.95)/2.  PROCEDURES USED:        ROBUST_SIGMA()  REVISION HISTORY 	Written,  H. Freudenreich, STX, 12/89 	Modified 2/94, H.T.F.: use a biweighted standard deviation rather than 		median absolute deviation. 	Modified 2/94, H.T.F.: use the fractional change in SIGMA as the 		convergence criterion rather than the change in center/SIGMA.        Modified May 2002  Use MEDIAN(/EVEN)        Modified October 2002, Faster computation of weights        Corrected documentation on 95% confidence interval of mean                  P.Broos/W. Landsman   July 2003  ", "YSIGMAWEIGHTs", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/blink.html", "blink.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "blink.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/blink.html#BLINK", "BLINK", 'routine in <a href="idlastro/blink.html">blink.pro</a>', "blink.pro", "", "BLINK", " NAME: 	BLINK  PURPOSE: 	To allow the user to alternatively examine two or more windows within 	a single window.   CALLING SEQUENCE: 	BLINK, Wndw [, T]   INPUTS: 	Wndw  A vector containing the indices of the windows to blink. 	T     The time to wait, in seconds, between blinks.  This is optional 	      and set to 1 if not present.   OUTPUTS: 	None.   PROCEDURE: 	The images contained in the windows given are written to a pixmap. 	The contents of the the windows are copied to a display window, in 	order, until a key is struck.   EXAMPLE: 	Blink windows 0 and 2 with a wait time of 3 seconds  	IDL&gt; blink, [0,2], 3   MODIFICATION HISTORY: 	Written by Michael R. Greason, STX, 2 May 1990. 	Allow different size windows   Wayne Landsman    August, 1991 	Converted to IDL V5.0   W. Landsman   September 1997  ", "wndwt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/blkshift.html", "blkshift.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "blkshift.pro", "", "", " NAME:    BLKSHIFT   AUTHOR:    Craig B. Markwardt, NASA/GSFC Code 662, Greenbelt, MD 20770    craigm@lheamail.gsfc.nasa.gov   PURPOSE:    Shift a block of data to a new position in a file (possibly overlapping)   CALLING SEQUENCE:     BLKSHIFT, UNIT, POS, [ DELTA, TO=TO, /NOZERO, ERRMSG=ERRMSG,              BUFFERSIZE=BUFFERSIZE ]   DESCRIPTION:    BLKSHIFT moves a block of data forward or backward, to a new   position in a data file.  The old and new positions of the block   can overlap safely.    The new position can be specified with either the DELTA parameter,   which gives the number of bytes to move forward (positive delta) or   backward (negative delta); or the TO keyword, which give the new   absolute starting position of the block.    The block can be moved beyond the current end of file point, in   which case the intervening gap is filled with zeros (optionally).   The gap left at the old position of the block is also optionally   zero-filled.    If a set of data up to the end of the file is being   moved forward (thus making the file smaller) then   the file is truncated at the new end.using TRUNCATE_LUN.   INPUTS:     UNIT - a logical unit number, opened for reading and writing.     POS - POS[0] is the position of the block in the file, in bytes,          before moving.  POS[1], if present, is the size of the block          in bytes.  If POS[1] is not given, then the block is from          POS[0] to the end of the file.     DELTA - the (optional) offset in bytes between the old and new            positions, from the start of the block.  Positive values            indicate moving the data forward (toward the end of file),            and negative values indicate moving the data backward            (toward the beginning of the file).  One of DELTA and TO            must be specified; DELTA overrides the TO keyword.             Attempts to move the block beyond the end of the file will            succeed.  A block can never be moved beyond the beginning            of the file; it will be moved to the beginning instead.   KEYWORD PARAMETERS:     TO - the absolute file offset in bytes for the new start of the         block.  One of DELTA and TO must be specified; DELTA         overrides the TO keyword.     /NOZERO - if set, then newly created gaps will not be explicitly             zeroed.   Note that in same systems (e.g. MacOS) the gaps will             always be zeroed whether or not /NOZERO is set.     ERRMSG - If defined and passed, then any error messages will be             returned to the user in this parameter rather than             depending on the MESSAGE routine in IDL.  If no errors             are encountered, then a null string is returned.  			BLKSHIFT, UNIT, POS, DElTA, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...     BUFFERSIZE - the maximum buffer size for transfers, in bytes.                 Larger values of this keyword impose larger memory                 requirements on the application; smaller values will                 lead to more transfer operations.                 Default: 32768 (bytes)   MODIFICATION HISTORY:     Written, CM, Apr 2000    Documented and re-written, CM, 20 Jul 2000    Renamed from FXSHIFT to BLKSHIFT, CM, 21 Jul 2000    Documentation, CM, 12 Dec 2002    Truncate if moving data block forward from  the end of file              using TRUNCATE_LUN   W. Landsman Feb. 2005    Assume since V5.5, remove VMS support  W. Landsman  Sep 2006    Assume since V5.6, TRUNCATE_LUN available  W. Landsman Sep 2006    MacOS can point beyond EOF    W. Landsman   Aug 2009   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/blkshift.html#BLKSHIFT", "BLKSHIFT", 'routine in <a href="idlastro/blkshift.html">blkshift.pro</a>', "blkshift.pro", "", "BLKSHIFT", "", "NOZEROERRMSGBUFFERSIZETOUNITPOS0DELTA0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html", "blob_analyzer__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "blob_analyzer__define.pro", "", "", " NAME:        BLOB_ANALYZER__DEFINE   PURPOSE:         The purpose of this routine is to create a system for analyzing        regions of interest (ROIs) or (more commonly)  blobs  inside images.        In particular, given a suitable image (this will require judgement on        your part), the program will automatically select  blobs  or connected        regions in the image and make it possible for you to analyze these        blobs. An example program is provided to show you one way the program        can be used.         The code is a wrapper, essentially, for LABEL_REGION and HISTOGRAM, with        a couple of my other image processing routines (FIND_BOUNDARY and FIT_ELLIPSE)        used in a supporting role.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Analysis, Image Processing   CALLING SEQUENCE:         analyzer = Obj_New( BLOB_ANALYZER , image)   INPUTS:     image:           A two-dimensional image array. To make this program memory efficient,                     a copy of the image is *not* stored in the object. You will be responsible                     for image operations outside this program.   KEYWORDS:     ALL_NEIGHBORS:    Set this keyword to look at all eight neighbors when searching                      for connectivity. The default is to look for four neighbors on                      each side of the starting pixel. Passed directly to LABEL_REGION.     MASK:             A two-dimensional array, the same size as image, that identifies the                      foreground and background pixels in the image. Applying the mask                      should result in a bi-level image of 0s and 1s, where 1 identifies the                      blobs you wish to analyze. If a mask is not provided, the mask is created                      like this:                       mask = image &gt; 0     SCALE:            A one- or two-dimensional given the pixel scaling parameters. By default [1.0, 1.0].                      If passed a scalar, the scale parameter is applied to both the X and Y directions of                      each pixel. Statistical output is reported with scaling unless the NOSCALE keyword                      is set. Scaling also effects the data that is output from the various methods.   OBJECT METHODS:     The following methods are provided. Please see the documentation header for each method for    information on arguments and keywords that can be used with the method.     FitEllipse:       This method fits an ellipse to the blob. It returns information about the fitted                      ellipse, including the points that all the ellipse to be drawn.     GetIndices:       This method returns the indices for a particular blob in the image.     GetStats:         This method returns a structure containing statistics for a particular blob in the image.                      The structure is defined as follows:                       stats = {INDEX: indexNumber, $                  ; The index number of this blob.                               COUNT: N_Elements(indices), $          ; The number of indices in this blob.                               PERIMETER_PTS: boundaryPts, $          ; A [2,n] array of points that describe the blob perimeter.                               PIXEL_AREA: pixelArea, $               ; The area as calculated by pixels in the blob.                               PERIMETER_AREA: perimeterArea, $       ; The area as calculated by the blob perimeter. (Smaller than pixel area.)                               CENTER: centroid[0:1], $               ; The [x,y] array that identifies the centroid of the blob.                               PERIMETER_LENGTH: perimeter_length, $  ; The perimenter length (scaled unless the NOSCALE keyword is set).                               SCALE: scale, $                        ; The [xscale, yscale] array used in scaling.                               MINCOL: Min(xyindices[0,*]), $         ; The minimum column index in the blob.                               MAXCOL: Max(xyindices[0,*]), $         ; The maximum column index in the blob.                               MINROW: Min(xyindices[1,*]), $         ; The minimum row index in the blob.                               MAXROW: Max(xyindices[1,*])}           ; The maximum row index in the blob.     NumberOfBlobs:     The number of blobs identified in the image.     ReportStats:       This methods reports statistics on every identified blob in the image. The                       report can be sent to the display (the default) or to a file. The format for                       the report works for most images, but you may have to change the format or override                       this method for your particular image. The reported statistics are basically the                       output of the GetStats and FitEllipse methods.      Here is an example of statistical output from the example program below.    INDEX   NUM_PIXELS   CENTER_X    CENTER_Y   PIXEL_AREA   PERIMETER_AREA   PERIMETER_LENGTH  MAJOR_AXIS   MINOR_AXIS    ANGLE      0        426        107.89       9.78       106.50          98.00            37.56          12.15        11.29       -8.05      1        580        151.97      10.22       145.00         134.25            49.21          17.49        11.77       -0.99      2        812        266.29      15.36       203.00         190.75            52.56          17.88        14.65     -107.48      3       1438        204.53      43.29       359.50         344.13            70.23          21.68        21.12      -76.47   RESTRICTIONS:         Requires programs from the Coyote Library. At the very least, those below are required.        It is *highly* recommended that you install the entire library. FIT_ELLIPSE has been        changed specifically for this release, so by sure you get a copy of that with this        source code.         http://www.idlcoyote.com/programs/coyoteprograms.zip         ERROR_MESSAGE     http://www.idlcoyote.com/programs/error_message.pro        FIND_BOUNDARY     http://www.idlcoyote.com/programs/find_boundary.pro        FIT_ELLIPSE       http://www.idlcoyote.com/programs/fit_ellipse.pro         The program currently works only with 2D bi-level images.   EXAMPLE:         To run an example program. Compile the file and type  example  at the IDL command line.         IDL&gt; .compile blob_analyzer__define        IDL&gt; example   MODIFICATION HISTORY:         Written by David W. Fanning, Fanning Software Consulting, 17 August 2008.        Ideas taken from discussion with Ben Tupper and Ben's program HBB_ANALYZER.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html#Blob_Analyzer::FitEllipse", "Blob_Analyzer::FitEllipse", 'routine in <a href="coyote/blob_analyzer__define.html">blob_analyzer__define.pro</a>', "blob_analyzer__define.pro", "", "Blob_Analyzer::FitEllipse", "", "AXESCENTERNOSCALENPOINTSORIENTATIONSEMIAXESindexNumber", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html#Blob_Analyzer::GetIndices", "Blob_Analyzer::GetIndices", 'routine in <a href="coyote/blob_analyzer__define.html">blob_analyzer__define.pro</a>', "blob_analyzer__define.pro", "", "Blob_Analyzer::GetIndices", "", "COUNTXSIZEYSIZEindexNumber", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html#Blob_Analyzer::GetStats", "Blob_Analyzer::GetStats", 'routine in <a href="coyote/blob_analyzer__define.html">blob_analyzer__define.pro</a>', "blob_analyzer__define.pro", "", "Blob_Analyzer::GetStats", "", "INDICESNOSCALEXYINDICESindexNumber", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html#Blob_Analyzer::NumberOfBlobs", "Blob_Analyzer::NumberOfBlobs", 'routine in <a href="coyote/blob_analyzer__define.html">blob_analyzer__define.pro</a>', "blob_analyzer__define.pro", "", "Blob_Analyzer::NumberOfBlobs", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html#Blob_Analyzer::ReportStats", "Blob_Analyzer::ReportStats", 'routine in <a href="coyote/blob_analyzer__define.html">blob_analyzer__define.pro</a>', "blob_analyzer__define.pro", "", "Blob_Analyzer::ReportStats", "", "NOSCALETOFILEFILENAME", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html#Blob_Analyzer::CLEANUP", "Blob_Analyzer::CLEANUP", 'routine in <a href="coyote/blob_analyzer__define.html">blob_analyzer__define.pro</a>', "blob_analyzer__define.pro", "", "Blob_Analyzer::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html#Blob_Analyzer::INIT", "Blob_Analyzer::INIT", 'routine in <a href="coyote/blob_analyzer__define.html">blob_analyzer__define.pro</a>', "blob_analyzer__define.pro", "", "Blob_Analyzer::INIT", "", "ALL_NEIGHBORSMASKSCALEinputImage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html#Example", "Example", 'routine in <a href="coyote/blob_analyzer__define.html">blob_analyzer__define.pro</a>', "blob_analyzer__define.pro", "", "Example", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/blob_analyzer__define.html#Blob_Analyzer__DEFINE", "Blob_Analyzer__DEFINE", 'routine in <a href="coyote/blob_analyzer__define.html">blob_analyzer__define.pro</a>', "blob_analyzer__define.pro", "", "Blob_Analyzer__DEFINE", "", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/boost_array.html", "boost_array.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "boost_array.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/boost_array.html#BOOST_ARRAY", "BOOST_ARRAY", 'routine in <a href="idlastro/boost_array.html">boost_array.pro</a>', "boost_array.pro", "", "BOOST_ARRAY", " NAME: 	BOOST_ARRAY  PURPOSE: 	Append one array onto a destination array  EXPLANATION: 	Add array APPEND to array DESTINATION, allowing the dimensions of 	DESTINATION to adjust to accommodate it.  If both input arrays have the 	same number of dimensions, then the output array will have one 	additional dimension.  Otherwise, the last dimension of DESTINATION 	will be incremented by one.  CATEGORY: 	Utility  CALLING SEQUENCE: 	BOOST_ARRAY, DESTINATION, APPEND  INPUT: 	DESTINATION	= Array to be expanded. 	APPEND		= Array to append to DESTINATION.  OUTPUTS: 	DESTINATION	= Expanded output array.  RESTRICTIONS: 	DESTINATION and APPEND have to be either both of type string or both of 	numerical types.  	APPEND cannot have more dimensions than DESTINATION.   MODIFICATION HISTOBY: 	Written Aug'88 (DMZ, ARC) 	Modified Sep'89 to handle byte arrays (DMZ) 	Modifed to version 2, Paul Hick (ARC), Feb 1991 	Removed restriction to 2D arrays, William Thompson (ARC), Feb 1992. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "DESTINATIONAPPEND", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/bordercheck.html", "bordercheck.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "bordercheck.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/bordercheck.html#bordercheck", "bordercheck", 'routine in <a href="code_snapshots/obsolete_code/bordercheck.html">bordercheck.pro</a>', "bordercheck.pro", "", "bordercheck", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/boxave.html", "boxave.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "boxave.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/boxave.html#boxave", "boxave", 'routine in <a href="idlastro/boxave.html">boxave.pro</a>', "boxave.pro", "", "boxave", " NAME:        BOXAVE  PURPOSE:        Box-average a 1 or 2 dimensional array.  EXPLANATION:        This procedure differs from the intrinsic REBIN function in the follow        2 ways:         (1) the box size parameter is specified rather than the output                array size        (2) for INTEGER arrays, BOXAVE computes intermediate steps using REAL*4                (or REAL*8 for 64bit integers) arithmetic.   This is                considerably slower than REBIN but avoids integer truncation   CALLING SEQUENCE:        result = BOXAVE( Array, Xsize,[ Ysize ] )   INPUTS:        ARRAY - Two dimensional input Array to be box-averaged.  Array may be                one or 2 dimensions and of any type except character.   OPTIONAL INPUTS:        XSIZE - Size of box in the X direction, over which the array is to                be averaged.  If omitted, program will prompt for this                parameter.        YSIZE - For 2 dimensional arrays, the box size in the Y direction.                If omitted, then the box size in the X and Y directions are                assumed to be equal   OUTPUT:        RESULT - Output array after box averaging.  If the input array has                dimensions XDIM by YDIM, then RESULT has dimensions                XDIM/NBOX by YDIM/NBOX.  The type of RESULT is the same as                the input array.  However, the averaging is always computed                using REAL arithmetic, so that the calculation should be exact.                If the box size did not exactly divide the input array, then                then not all of the input array will be boxaveraged.   PROCEDURE:        BOXAVE boxaverages all points simultaneously using vector subscripting   NOTES:        If im_int is a 512 x 512 integer array, then the two statements                 IDL&gt; im = fix(round(rebin(float(im_int), 128, 128)))                IDL&gt; im  = boxave( im_int,4)         give equivalent results.   The use of REBIN is faster, but BOXAVE is        is less demanding on virtual memory, since one does not need to make        a floating point copy of the entire array.   REVISION HISTORY:        Written, W. Landsman, October 1986        Call REBIN for REAL*4 and REAL*8 input arrays, W. Landsman Jan, 1992        Removed /NOZERO in output array definition     W. Landsman 1995        Fixed occasional integer overflow problem      W. Landsman Sep. 1995        Allow unsigned data types                      W. Landsman Jan. 2000        Assume since V5.4, Allow 64bit integers        W. Landsman Apr  2006  ", "arrayxsizeysize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/boxit.html", "boxit.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "boxit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/boxit.html#boxit", "boxit", 'routine in <a href="code_snapshots/obsolete_code/boxit.html">boxit.pro</a>', "boxit.pro", "", "boxit", "		Makes a box around the sun (or round piece of paper) with equal sized padding for every scenario.   ", "file", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/bprecess.html", "bprecess.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "bprecess.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/bprecess.html#Bprecess", "Bprecess", 'routine in <a href="idlastro/bprecess.html">bprecess.pro</a>', "bprecess.pro", "", "Bprecess", " NAME:        BPRECESS  PURPOSE:        Precess positions from J2000.0 (FK5) to B1950.0 (FK4)  EXPLANATION:        Calculates the mean place of a star at B1950.0 on the FK4 system from        the mean place at J2000.0 on the FK5 system.   CALLING SEQUENCE:        bprecess, ra, dec, ra_1950, dec_1950, [ MU_RADEC = , PARALLAX =                                        RAD_VEL =, EPOCH =   ]   INPUTS:        RA,DEC - Input J2000 right ascension and declination in *degrees*.                Scalar or N element vector   OUTPUTS:        RA_1950, DEC_1950 - The corresponding B1950 right ascension and                declination in *degrees*.    Same number of elements as                RA,DEC but always double precision.   OPTIONAL INPUT-OUTPUT KEYWORDS        MU_RADEC - 2xN element double precision vector containing the proper                   motion in seconds of arc per tropical *century* in right                   ascension and declination.        PARALLAX - N_element vector giving stellar parallax (seconds of arc)        RAD_VEL  - N_element vector giving radial velocity in km/s         The values of MU_RADEC, PARALLAX, and RADVEL will all be modified        upon output to contain the values of these quantities in the        B1950 system.  The parallax and radial velocity will have a very        minor influence on the B1950 position.         EPOCH - scalar giving epoch of original observations, default 2000.0d            This keyword value is only used if the MU_RADEC keyword is not set.  NOTES:        The algorithm is taken from the Explanatory Supplement to the        Astronomical Almanac 1992, page 186.        Also see Aoki et al (1983), A&A, 128,263         BPRECESS distinguishes between the following two cases:        (1) The proper motion is known and non-zero        (2) the proper motion is unknown or known to be exactly zero (i.e.                extragalactic radio sources).   In this case, the reverse of                the algorithm in Appendix 2 of Aoki et al. (1983) is used to                ensure that the output proper motion is  exactly zero. Better                precision can be achieved in this case by inputting the EPOCH                of the original observations.         The error in using the IDL procedure PRECESS for converting between        B1950 and J1950 can be up to 12 , mainly in right ascension.   If        better accuracy than this is needed then BPRECESS should be used.         An unsystematic comparison of BPRECESS with the IPAC precession        routine (http://nedwww.ipac.caltech.edu/forms/calculator.html) always        gives differences less than 0.15 .  EXAMPLE:        The SAO2000 catalogue gives the J2000 position and proper motion for        the star HD 119288.   Find the B1950 position.         RA(2000) = 13h 42m 12.740s      Dec(2000) = 8d 23' 17.69''        Mu(RA) = -.0257 s/yr      Mu(Dec) = -.090 ''/yr         IDL&gt; mu_radec = 100D* [ -15D*.0257, -0.090 ]        IDL&gt; ra = ten(13, 42, 12.740)*15.D        IDL&gt; dec = ten(8, 23, 17.69)        IDL&gt; bprecess, ra, dec, ra1950, dec1950, mu_radec = mu_radec        IDL&gt; print, adstring(ra1950, dec1950,2)                ===&gt; 13h 39m 44.526s    +08d 38' 28.63    REVISION HISTORY:        Written,    W. Landsman                October, 1992        Vectorized, W. Landsman                February, 1994        Treat case where proper motion not known or exactly zero  November 1994        Handling of arrays larger than 32767   Lars L. Christensen, march, 1995        Fixed bug where A term not initialized for vector input             W. Landsman        February 2000        Use V6.0 notation  W. Landsman Mar 2011   ", "MU_RADECPARALLAXRAD_VELEPOCHradecra_1950dec_1950", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/break_path.html", "break_path.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "break_path.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/break_path.html#BREAK_PATH", "BREAK_PATH", 'routine in <a href="idlastro/break_path.html">break_path.pro</a>', "break_path.pro", "", "BREAK_PATH", " NAME:     BREAK_PATH()   PURPOSE:      Breaks up a path string into its component directories.   CALLING SEQUENCE:      Result = BREAK_PATH( PATHS [ /NoCurrent])   INPUTS:      PATHS   = A string containing one or more directory paths.  The                individual paths are separated by commas, although in UNIX,                colons can also be used.  In other words, PATHS has the same                format as !PATH, except that commas can be used as a separator                regardless of operating system.                 A leading $ can be used in any path to signal that what follows                is an environmental variable, but the $ is not necessary.                Environmental variables can themselves contain multiple paths.   OUTPUT:       The result of the function is a string array of directories.       Unless the NOCURRENT keyword is set, the first element of the array is       always the null string, representing the current directory.  All the       other directories will end in the correct separator character for the       current operating system.   OPTIONAL INPUT KEYWORD:       /NOCURRENT = If set, then the current directory (represented by                the null string) will not automatically be prepended to the                output.   PROCEDURE CALLS:       None.   REVISION HISTORY:        Version 1, William Thompson, GSFC, 6 May 1993.                Added IDL for Windows compatibility.        Version 2, William Thompson, GSFC, 16 May 1995                Added keyword NOCURRENT        Version 3, William Thompson, GSFC, 29 August 1995                Modified to use OS_FAMILY        Version 4, Zarro, GSFC, 4 August 1997                Added trim to input        Fix directory character on Macintosh system   A. Ferro   February 2000        Use STRSPLIT instead of STR_SEP()   W. Landsman    July 2002        Remove VMS support    W. Landsman   September 2006  ", "NOCURRENTPATHS", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/bsort.html", "bsort.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "bsort.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/bsort.html#Bsort", "Bsort", 'routine in <a href="idlastro/bsort.html">bsort.pro</a>', "bsort.pro", "", "Bsort", " NAME:        BSORT  PURPOSE:        Function to sort data into ascending order, like a simple bubble sort.  EXPLANATION:        Original subscript order is maintained when values are equal (FIFO).        (This differs from the IDL SORT routine alone, which may rearrange        order for equal values)         A faster algorithm (radix sort) for numeric data is available  at        http://idldatapoint.com/2012/04/19/an-lsd-radix-sort-algorithm-in-idl/  CALLING SEQUENCE:        result = bsort( array, [ asort, /INFO, /REVERSE ] )   INPUT:        Array - array to be sorted   OUTPUT:        result - sort subscripts are returned as function value   OPTIONAL OUTPUT:        Asort - sorted array   OPTIONAL KEYWORD INPUTS:        /REVERSE - if this keyword is set, and non-zero, then data is sorted                  in descending order instead of ascending order.        /INFO = optional keyword to cause brief message about # equal values.   HISTORY        written by F. Varosi Oct.90:        uses WHERE to find equal clumps, instead of looping with IF ( EQ ).        compatible with string arrays, test for degenerate array        20-MAY-1991     JKF/ACC via T AKE- return indexes if the array to                        be sorted has all equal values.        Aug - 91  Added  REVERSE keyword   W. Landsman        Always return type LONG    W. Landsman     August 1994        Converted to IDL V5.0   W. Landsman   September 1997  ", "INFOREVERSEArrayAsort", "          -1", "");
  
  

libdata[libdataItem++] = new Array("bundle_analysis/bundle.html", "bundle.pro", '.pro file in <a href="bundle_analysis/dir-overview.html">bundle_analysis/ directory</a>', "bundle.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("idlastro/calz_unred.html", "calz_unred.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "calz_unred.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/calz_unred.html#calz_unred", "calz_unred", 'routine in <a href="idlastro/calz_unred.html">calz_unred.pro</a>', "calz_unred.pro", "", "calz_unred", " NAME:      CALZ_UNRED  PURPOSE:      Deredden a galaxy spectrum using the Calzetti et al. (2000) recipe  EXPLANATION:      Calzetti et al.  (2000, ApJ 533, 682) developed a recipe for dereddening      the spectra of galaxies where massive stars dominate the radiation output,      valid between 0.12 to 2.2 microns.     (CALZ_UNRED extrapolates between      0.12 and 0.0912 microns.)   CALLING SEQUENCE:      CALZ_UNRED, wave, flux, ebv, [ funred, R_V = ]  INPUT:       WAVE - wavelength vector (Angstroms)       FLUX - calibrated flux vector, same number of elements as WAVE                If only 3 parameters are supplied, then this vector will                updated on output to contain the dereddened flux.       EBV  - color excess E(B-V), scalar.  If a negative EBV is supplied,                then fluxes will be reddened rather than deredenned.                Note that the supplied color excess should be that derived for                the stellar  continuum, EBV(stars), which is related to the                reddening derived from the gas, EBV(gas), via the Balmer                decrement by EBV(stars) = 0.44*EBV(gas)   OUTPUT:       FUNRED - unreddened flux vector, same units and number of elements                as FLUX.   FUNRED values will be zeroed outside valid domain                Calz_unred (0.0912 - 2.2 microns).   OPTIONAL INPUT KEYWORD:        R_V - Ratio of total to selective extinction, default = 4.05.              Calzetti et al. (2000) estimate R_V = 4.05 +/- 0.80 from optical              -IR observations of 4 starbursts.  EXAMPLE:        Estimate how a flat galaxy spectrum (in wavelength) between 1200 A        and 3200 A is altered by a reddening of E(B-V) = 0.1.         IDL&gt; w = 1200 + findgen(40)*50      ;Create a wavelength vector        IDL&gt; f = w*0 + 1                    ;Create a  flat  flux vector        IDL&gt; calz_unred, w, f, -0.1, fnew  ;Redden (negative E(B-V)) flux vector        IDL&gt; plot,w,fnew   NOTES:        Use the 4 parameter calling sequence if you wish to save the                original flux vector.  PROCEDURE CALLS:       POLY()  REVISION HISTORY:        Written   W. Landsman        Raytheon  ITSS   December, 2000  ", "R_Vwavefluxebvfunred", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/capfirstletter.html", "capfirstletter.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "capfirstletter.pro", "", "", " NAME:        CAPFIRSTLETTER   PURPOSE:         Given a string, separates the parts by white space, commas,        semi-colons, or colons. Each part has the first letter capitalized.        The returned string has the capitalized parts separated by a space.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities   CALLING SEQUENCE:         capitalizedString = CatFirstLetter(theString)   AUGUMENTS:         theString:         The input string.   RETURN_VALUE:        capitalizedString:  The capitalized output string. There is a space between parts                           (words) of the input string.   KEYWORDS:       None.   MODIFICATION HISTORY:         Written by David W. Fanning, 29 July 2005.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/capfirstletter.html#CapFirstLetter", "CapFirstLetter", 'routine in <a href="coyote/capfirstletter.html">capfirstletter.pro</a>', "capfirstletter.pro", "", "CapFirstLetter", "", "theString", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ccm_unred.html", "ccm_unred.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ccm_unred.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ccm_unred.html#ccm_UNRED", "ccm_UNRED", 'routine in <a href="idlastro/ccm_unred.html">ccm_unred.pro</a>', "ccm_unred.pro", "", "ccm_UNRED", " NAME:      CCM_UNRED  PURPOSE:      Deredden a flux vector using the CCM 1989 parameterization  EXPLANATION:      The reddening curve is that of Cardelli, Clayton, and Mathis (1989 ApJ.      345, 245), including the update for the near-UV given by O'Donnell      (1994, ApJ, 422, 158).   Parameterization is valid from the IR to the      far-UV (3.5 microns to 0.1 microns).       Users might wish to consider using the alternate procedure FM_UNRED      which uses the extinction curve of Fitzpatrick (1999).  CALLING SEQUENCE:      CCM_UNRED, wave, flux, ebv, funred, [ R_V = ]              or      CCM_UNRED, wave, flux, ebv, [ R_V = ]  INPUT:      WAVE - wavelength vector (Angstroms)      FLUX - calibrated flux vector, same number of elements as WAVE              If only 3 parameters are supplied, then this vector will              updated on output to contain the dereddened flux.      EBV  - color excess E(B-V), scalar.  If a negative EBV is supplied,              then fluxes will be reddened rather than deredenned.   OUTPUT:      FUNRED - unreddened flux vector, same units and number of elements              as FLUX   OPTIONAL INPUT KEYWORD      R_V - scalar specifying the ratio of total selective extinction              R(V) = A(V) / E(B - V).    If not specified, then R_V = 3.1              Extreme values of R(V) range from 2.75 to 5.3   EXAMPLE:      Determine how a flat spectrum (in wavelength) between 1200 A and 3200 A      is altered by a reddening of E(B-V) = 0.1.   Assume an  average       reddening for the diffuse interstellar medium (R(V) = 3.1)         IDL&gt; w = 1200 + findgen(40)*50      ;Create a wavelength vector        IDL&gt; f = w*0 + 1                    ;Create a  flat  flux vector        IDL&gt; ccm_unred, w, f, -0.1, fnew  ;Redden (negative E(B-V)) flux vector        IDL&gt; plot,w,fnew   NOTES:      (1) The CCM curve shows good agreement with the Savage & Mathis (1979)              ultraviolet curve shortward of 1400 A, but is probably              preferable between 1200 and 1400 A.      (2)  Many sightlines with peculiar ultraviolet interstellar extinction              can be represented with a CCM curve, if the proper value of              R(V) is supplied.      (3)  Curve is extrapolated between 912 and 1000 A as suggested by              Longo et al. (1989, ApJ, 339,474)      (4) Use the 4 parameter calling sequence if you wish to save the                original flux vector.      (5) Valencic et al. (2004, ApJ, 616, 912) revise the ultraviolet CCM              curve (3.3 -- 8.0 um-1).    But since their revised curve does              not connect smoothly with longer and shorter wavelengths, it is              not included here.   REVISION HISTORY:        Written   W. Landsman        Hughes/STX   January, 1992        Extrapolate curve for wavelengths between 900 and 1000 A   Dec. 1993        Use updated coefficients for near-UV from O'Donnell   Feb 1994        Allow 3 parameter calling sequence      April 1998        Converted to IDLV5.0                    April 1998  ", "R_Vwavefluxebvfunred", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html", "center.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "center.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " At the end of the day this should find the center of the sun using a variety of (working) methods   Compiled the doc with idldoc,root='/Users/jerensuzuki/Documents/suncentering', $  output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html#scanbox", "scanbox", 'routine in <a href="code_snapshots/obsolete_code/center.html">center.pro</a>', "center.pro", "", "scanbox", "       Boxit was too computation-intensive, this is more a rough boxing program   ", "file       File to be read in  time       Print the elapsed time  meanthresh       Use the average of the image as the threshold value. Otherwise, use half of max  scan_width       How far apart the scanning should be   ", "          -1", "       cropped = scanbox(file='$PWD/sep11_postit/104533_20120912_124300_353097_0.bin',/time)   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html#comp2", "comp2", 'routine in <a href="code_snapshots/obsolete_code/center.html">center.pro</a>', "center.pro", "", "comp2", "           Finds the centroid by summing all values over a certain threshold and averaging them   ", "file       File to be read in  time       Prints the elapsed time  plot       Makes a nice plot  sigmavalue       Sets the threshold to be max(image) - sigmavalue*stddev(image)   xpos       X center  ypos       Y center  thresh       Threshold used to select pixels   ", "          -1", "           comp2,xpos,ypos,/plot   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html#comp4", "comp4", 'routine in <a href="code_snapshots/obsolete_code/center.html">center.pro</a>', "center.pro", "", "comp4", "           Only used to save the strips into structures.  ", "file       File to be read in  time       Prints the elapsed time  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be max(image) - sigmavalue*stddev(image)   xstrips       Structure containing row strips  ystrips       Structure containing column strips  thresh       Threshold used to select pixels   ", "          -1", "           comp4,xstrips,ystrips,thresh,/time,scan_width=10,/thalf   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html#comp5", "comp5", 'routine in <a href="code_snapshots/obsolete_code/center.html">center.pro</a>', "center.pro", "", "comp5", "           Only used to save the cut-down strips into structures. Doesn't import            the whole strip data from comp4, it goes straight from scanbox (skips comp4).   ", "file       File to be read in  time       Prints the elapsed time  ministrip_length       How long the total array of the cut-down strip will be  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be max(image) - sigmavalue*stddev(image)   xstrips       Contains the row sctructures of strips  ystrips       Contains the col sctructures of strips  thresh       Threshold value used   ", "          -1", "           comp5,xstrips,ystrips,thresh      Exactly how much data should be stored in a structure? Since we're interested in saving space,    doesn't make sense to repeat any data in the structures.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html#comp6v2", "comp6v2", 'routine in <a href="code_snapshots/obsolete_code/center.html">center.pro</a>', "center.pro", "", "comp6v2", "       Uses the data from comp5 and draws a linear/quadratic/cubic/etc. function to find midpoint.        Order is the power of the function. Different from comp6 in that this method uses fz_roots()        and comp6 uses spline to interpolate where the limb crosses a threshold. Imports the strips        from comp5.   ", "file       File to be read in  order       What order polynomial to use for POLY_FIT()  time       Prints the elapsed time  scan_width       Ondicates how far apart to scan  ministrip_length       How long the trimmed down strip will be  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be max(image) - sigmavalue*stddev(image)   xpos       X Center  ypos       Y Center   ", "          -1", "           comp6,xpos,ypos,order=3   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html#cc", "cc", 'routine in <a href="code_snapshots/obsolete_code/center.html">center.pro</a>', "center.pro", "", "cc", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html#makesomescatplots", "makesomescatplots", 'routine in <a href="code_snapshots/obsolete_code/center.html">center.pro</a>', "center.pro", "", "makesomescatplots", "   Makes a few scatter plots based on varying parameters. Sucks that the values are hardcoded.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html#msmsp", "msmsp", 'routine in <a href="code_snapshots/obsolete_code/center.html">center.pro</a>', "center.pro", "", "msmsp", "   Abbreviated form of  Make Some More Scatter Plots     Making more scat plots now that I've fixed my program and am now moving onto bmp images   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center.html#center", "center", 'routine in <a href="code_snapshots/obsolete_code/center.html">center.pro</a>', "center.pro", "", "center", "       Finds the centroid using a variety of compression levels         Important!:        IDL uses the origin to be the top left corner for 2d arrays and a column is indexed from 0        starting from the top. You have been WARNED.  ", "file       File to be read in  ministrip_length       How long the cut-down strip is  scan_width       How far apart the scans are  time       Prints the elapsed time  order       What order polynomial to use for POLY_FIT()  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be: <span class= code-output >   max(image) - sigmavalue*stddev(image)</span>  ", "          -1", "   More Keywords/parameters     How strict are we going to be for the outputs of each compression file?     Deal with fiducials hitting the limb (Does it even matter?)     Deal with scan_width; scan_width=5 seems to produce some pretty good results.     I fixed the values being stuck, it was because I added to the index where the image value &gt; thresh,    I should've subtracted instead. Note: Don't do that again.     Probably too early to say, but I think I've finished this program. It's robust and gets near-perfect    values for each blur amount. The only thing that changes the fit considerably is what order poly-    nomial I use.   ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center_newer.html", "center_newer.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "center_newer.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " At the end of the day this should find the center of the sun using a variety of (working) methods   Compiled the doc with idldoc,root='/Users/jerensuzuki/Documents/suncentering', $  output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center_newer.html#center", "center", 'routine in <a href="code_snapshots/obsolete_code/center_newer.html">center_newer.pro</a>', "center_newer.pro", "", "center", "       Finds the centroid using a variety of compression levels        Removed the 'vX' suffix because it got confusing keeping track of which numbers went with what         Important!:        IDL uses the origin to be the top left corner for 2d arrays and a column is indexed from 0        starting from the top. You have been WARNED.  ", "file       File to be read in  ministrip_length       How long the cut-down strip is  scan_width       How far apart the scans are  time       Prints the elapsed time  order       What order polynomial to use for POLY_FIT()  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be: <span class= code-output >   max(image) - sigmavalue*stddev(image)</span>  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  storestruct       Toggles whether or not we want to save data at all   ", "          -1", "   More Keywords/parameters     How strict are we going to be for the outputs of each compression file?     Deal with fiducials hitting the limb (Does it even matter?)     Deal with scan_width; scan_width=5 seems to produce some pretty good results.     I fixed the values being stuck, it was because I added to the index where the image value &gt; thresh,    I should've subtracted instead. Note: Don't do that again.     Threshold value doesn't have a safety in terms of cosmic rays or single pixels with absurdly high    values. Got to have some sort of catch here just in case.     For some reason, after I added code to look at 5 center chords, the y-limbs are all wonky. Why?    They cross through fiducials, that's why. The fiducials are so wide that a median filter won't get    rid of them.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center_newer.html#scanbox", "scanbox", 'routine in <a href="code_snapshots/obsolete_code/center_newer.html">center_newer.pro</a>', "center_newer.pro", "", "scanbox", "       Boxit was too computation-intensive, this is more a rough boxing program.        Uses knowledge of approx size of sun to only scan until it hits the sun then        moves the crop borders based on the given parameters.   ", "file       File to be read in  time       Print the elapsed time  meanthreshscan_width       How far apart the scanning should be. Fine tuned compared to scanbox  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)  storestruct       Toggles whether or not we want to save data at all   ", "          -1", "       cropped = scanbox(file='$PWD/sep11_postit/104533_20120912_124300_353097_0.bin',/time)   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center_newer.html#comp2", "comp2", 'routine in <a href="code_snapshots/obsolete_code/center_newer.html">center_newer.pro</a>', "center_newer.pro", "", "comp2", "           Finds the centroid by summing all values over a certain threshold and averaging them.   ", "file       File to be read in  time       Prints the elapsed time  plot       Makes a nice plot  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)         Having a sigmavalue=2 makes the pixels chosen from the sun more circular than sigmavalue=1   xpos       X center  ypos       Y center  thresh       Threshold used to select pixels   ", "          -1", "           comp2,xpos,ypos,thresh,time=time,sigmavalue=sigmavalue,file=file   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center_newer.html#comp3", "comp3", 'routine in <a href="code_snapshots/obsolete_code/center_newer.html">center_newer.pro</a>', "center_newer.pro", "", "comp3", "           Looks only at the positions of pixels above a threshold and doen't care        About their actual values, like in comp2. More  accurate  to find the        center than comp2 since this gives all solar pixels equal weighting.   ", "file       File to be read in  time       Prints the elapsed time  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)         Having a sigmavalue=2 makes the pixels chosen from the sun more circular than sigmavalue=1   xpos       X center  ypos       Y center  thresh       Threshold used to select pixels   ", "          -1", "           comp3,xpos,ypos,thresh,time=time,sigmavalue=sigmavalue,file=file   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center_newer.html#comp4", "comp4", 'routine in <a href="code_snapshots/obsolete_code/center_newer.html">center_newer.pro</a>', "center_newer.pro", "", "comp4", "           Only saves 5 strips centered around the solar diameter to reduce the amount of limb-            darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.            Called into comp5.  ", "file       File to be read in  time       Prints the elapsed time  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  nstrips       How many strips to select, centered around the row/col diameter  storestruct       Toggles whether or not we want to save data at all   xstrips       Structure containing row strips  ystrips       Structure containing column strips  thresh       Threshold used to select pixels   ", "          -1", "           comp4,xstrips,ystrips,thresh,/time,scan_width=10   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center_newer.html#comp5", "comp5", 'routine in <a href="code_snapshots/obsolete_code/center_newer.html">center_newer.pro</a>', "center_newer.pro", "", "comp5", "           Calls comp4 to acquire data strips then saves limb strips.   ", "file       File to be read in  time       Prints the elapsed time  ministrip_length       How long the total array of the cut-down strip will be  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be:     max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  storestruct       Toggles whether or not we want to save data at all   xstrips       Contains the row sctructures of strips  ystrips       Contains the col sctructures of strips  thresh       Threshold value used   ", "          -1", "           comp5,xstrips,ystrips,thresh      Exactly how much data should be stored in a structure? Since we're interested in saving space,    doesn't make sense to repeat any data in the structures.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/center_newer.html#comp6", "comp6", 'routine in <a href="code_snapshots/obsolete_code/center_newer.html">center_newer.pro</a>', "center_newer.pro", "", "comp6", "       Uses the data from comp5 and fits an n-th order polynomial to the limb to find where        it crosses the threshold. Imports the strips from comp5.   ", "file       File to be read in  order       What order polynomial to use for POLY_FIT()  time       Prints the elapsed time  scan_width       Ondicates how far apart to scan  ministrip_length       How long the trimmed down strip will be  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be:     max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  storestruct       Toggles whether or not we want to save data at all   xpos       X Center  ypos       Y Center   ", "          -1", "           comp6,xpos,ypos,order=3   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/centertlb.html", "centertlb.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "centertlb.pro", "", "", " NAME:        CENTERTLB   PURPOSE:         This is a utility routine to position a widget program        on the display at an arbitrary location. By default the        widget is centered on the display.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities   CALLING SEQUENCE:         CenterTLB, tlb, [x, y, /NOCENTER, /DEVICE, CENTERONTLB=wOtherTLBID]   REQUIRED INPUTS:         tlb: The top-level base identifier of the widget program. This must        be a valid widget ID.   OPTIONAL INPUTS:         x:  Set this equal to a normalized position for the center        of the widget as measured from the left-hand side of the screen.        The default value is 0.5 (the center)  Setting this equal to 1.0        places the widget at the far right-hand side of the screen.         y:  Set this equal to a normalized position for the center        of the widget as measured from the bottom of the screen.        The default value is 0.5 (the center) Setting this equal to 1.0        places the widget at the top of the screen.   KEYWORDS:        DEVICE:  Normally, the x and y parameters are specified in normalized       coordinates. If this keyword is set, they are taken to be in DEVICE       coordinates.        NOCENTER:  By default, the center of the widget is positioned at the       location specified by the x and y parameters.  If NOCENTER is set       to a non-zero value, then the upper left corner of the widget       is postioned at the specifed location.        CENTERONTLB:  If provided, the center of the widget is positioned at       the center of the widget whose ID is provided here.   PROCEDURE:         The program should be called after all the widgets have        been created, but just before the widget hierarchy is realized.        It uses the top-level base geometry along with the display size        to calculate offsets for the top-level base that will center the        top-level base on the display.   COMMENT:        Regardless of the values set for x, y and NOCENTER, the widget        is not permitted to run off the display.   MODIFICATION HISTORY:         Written by:  Dick Jackson, 12 Dec 98.        Modified to use device-independent Get_Screen_Size             function. 31 Jan 2000. DWF.        Added x, y, NOCENTER and run-off protection. 26 Jan 2001. BT.        Added a maximum value of 1280 for X screen size. This helps             center the widget on a single monitor when using dual             monitor settings with some graphics cards. 3 Feb 2003. DWF.        Added DEVICE keyword. 4 January 2006. DWF.        Added CenterOnTLB keyword. 7 March 2011. DJ.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/centertlb.html#CenterTLB", "CenterTLB", 'routine in <a href="idlastro/coyote/centertlb.html">centertlb.pro</a>', "centertlb.pro", "", "CenterTLB", "", "NoCenterDeviceCenterOnTLBtlbxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html", "centerv2.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "centerv2.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " At the end of the day this should find the center of the sun using a variety of (working) methods   Compiled the doc with idldoc,root='/Users/jerensuzuki/Documents/suncentering', $  output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html#scanbox", "scanbox", 'routine in <a href="code_snapshots/obsolete_code/centerv2.html">centerv2.pro</a>', "centerv2.pro", "", "scanbox", "       Boxit was too computation-intensive, this is more a rough boxing program   ", "file       File to be read in  time       Print the elapsed time  meanthreshscan_width       How far apart the scanning should be  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)  ", "          -1", "       cropped = scanbox(file='$PWD/sep11_postit/104533_20120912_124300_353097_0.bin',/time)   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html#comp2", "comp2", 'routine in <a href="code_snapshots/obsolete_code/centerv2.html">centerv2.pro</a>', "centerv2.pro", "", "comp2", "           Finds the centroid by summing all values over a certain threshold and averaging them   ", "file       File to be read in  time       Prints the elapsed time  plot       Makes a nice plot  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   xpos       X center  ypos       Y center  thresh       Threshold used to select pixels   ", "          -1", "           comp2,xpos,ypos,thresh,time=time,sigmavalue=sigmavalue,file=file   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html#comp4", "comp4", 'routine in <a href="code_snapshots/obsolete_code/centerv2.html">centerv2.pro</a>', "centerv2.pro", "", "comp4", "           Only used to save the strips into structures.  ", "file       File to be read in  time       Prints the elapsed time  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   xstrips       Structure containing row strips  ystrips       Structure containing column strips  thresh       Threshold used to select pixels   ", "          -1", "           comp4,xstrips,ystrips,thresh,/time,scan_width=10   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html#comp5v2", "comp5v2", 'routine in <a href="code_snapshots/obsolete_code/centerv2.html">centerv2.pro</a>', "centerv2.pro", "", "comp5v2", "           Only used to save the cut-down strips into structures. Imports strips from            comp4 like a good code should.   ", "file       File to be read in  time       Prints the elapsed time  ministrip_length       How long the total array of the cut-down strip will be  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be:     max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   xstrips       Contains the row sctructures of strips  ystrips       Contains the col sctructures of strips  thresh       Threshold value used   ", "          -1", "           comp5v2,xstrips,ystrips,thresh      Exactly how much data should be stored in a structure? Since we're interested in saving space,    doesn't make sense to repeat any data in the structures.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html#comp6v2", "comp6v2", 'routine in <a href="code_snapshots/obsolete_code/centerv2.html">centerv2.pro</a>', "centerv2.pro", "", "comp6v2", "       Uses the data from comp5v2 and draws a linear/quadratic/cubic/etc. function to find midpoint.        Order is the power of the function. Different from comp6 in that this method uses fz_roots()        and comp6 uses spline to interpolate where the limb crosses a threshold. Imports the strips        from comp5v2.   ", "file       File to be read in  order       What order polynomial to use for POLY_FIT()  time       Prints the elapsed time  scan_width       Ondicates how far apart to scan  ministrip_length       How long the trimmed down strip will be  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be:     max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   xpos       X Center  ypos       Y Center   ", "          -1", "           comp6,xpos,ypos,order=3   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html#cc", "cc", 'routine in <a href="code_snapshots/obsolete_code/centerv2.html">centerv2.pro</a>', "centerv2.pro", "", "cc", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html#makesomescatplots", "makesomescatplots", 'routine in <a href="code_snapshots/obsolete_code/centerv2.html">centerv2.pro</a>', "centerv2.pro", "", "makesomescatplots", "   Makes a few scatter plots based on varying parameters. Sucks that the values are hardcoded.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html#msmsp", "msmsp", 'routine in <a href="code_snapshots/obsolete_code/centerv2.html">centerv2.pro</a>', "centerv2.pro", "", "msmsp", "   Abbreviated form of  Make Some More Scatter Plots     Making more scat plots now that I've fixed my program and am now moving onto bmp images   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv2.html#centerv2", "centerv2", 'routine in <a href="code_snapshots/obsolete_code/centerv2.html">centerv2.pro</a>', "centerv2.pro", "", "centerv2", "       Finds the centroid using a variety of compression levels         Important!:        IDL uses the origin to be the top left corner for 2d arrays and a column is indexed from 0        starting from the top. You have been WARNED.  ", "file       File to be read in  ministrip_length       How long the cut-down strip is  scan_width       How far apart the scans are  time       Prints the elapsed time  order       What order polynomial to use for POLY_FIT()  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be: <span class= code-output >   max(image) - sigmavalue*stddev(image)</span>  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   ", "          -1", "   More Keywords/parameters     How strict are we going to be for the outputs of each compression file?     Deal with fiducials hitting the limb (Does it even matter?)     Deal with scan_width; scan_width=5 seems to produce some pretty good results.     I fixed the values being stuck, it was because I added to the index where the image value &gt; thresh,    I should've subtracted instead. Note: Don't do that again.     Threshold value doesn't have a safety in terms of cosmic rays or single pixels with absurdly high    values. Got to have some sort of catch here just in case.  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv3.html", "centerv3.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "centerv3.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " At the end of the day this should find the center of the sun using a variety of (working) methods   Compiled the doc with idldoc,root='/Users/jerensuzuki/Documents/suncentering', $  output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv3.html#centerv3", "centerv3", 'routine in <a href="code_snapshots/obsolete_code/centerv3.html">centerv3.pro</a>', "centerv3.pro", "", "centerv3", "       Finds the centroid using a variety of compression levels         Different from v2 in that this one is slightly more organized and uses a different version of        comp2.         Important!:        IDL uses the origin to be the top left corner for 2d arrays and a column is indexed from 0        starting from the top. You have been WARNED.  ", "file       File to be read in  ministrip_length       How long the cut-down strip is  scan_width       How far apart the scans are  time       Prints the elapsed time  order       What order polynomial to use for POLY_FIT()  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be: <span class= code-output >   max(image) - sigmavalue*stddev(image)</span>  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   ", "          -1", "   More Keywords/parameters     How strict are we going to be for the outputs of each compression file?     Deal with fiducials hitting the limb (Does it even matter?)     Deal with scan_width; scan_width=5 seems to produce some pretty good results.     I fixed the values being stuck, it was because I added to the index where the image value &gt; thresh,    I should've subtracted instead. Note: Don't do that again.     Threshold value doesn't have a safety in terms of cosmic rays or single pixels with absurdly high    values. Got to have some sort of catch here just in case.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv3.html#scanbox", "scanbox", 'routine in <a href="code_snapshots/obsolete_code/centerv3.html">centerv3.pro</a>', "centerv3.pro", "", "scanbox", "       Boxit was too computation-intensive, this is more a rough boxing program   ", "file       File to be read in  time       Print the elapsed time  meanthreshscan_width       How far apart the scanning should be  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)  ", "          -1", "       cropped = scanbox(file='$PWD/sep11_postit/104533_20120912_124300_353097_0.bin',/time)   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv3.html#comp2", "comp2", 'routine in <a href="code_snapshots/obsolete_code/centerv3.html">centerv3.pro</a>', "centerv3.pro", "", "comp2", "           Finds the centroid by summing all values over a certain threshold and averaging them   ", "file       File to be read in  time       Prints the elapsed time  plot       Makes a nice plot  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   xpos       X center  ypos       Y center  thresh       Threshold used to select pixels   ", "          -1", "           comp2,xpos,ypos,thresh,time=time,sigmavalue=sigmavalue,file=file   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv3.html#comp4", "comp4", 'routine in <a href="code_snapshots/obsolete_code/centerv3.html">centerv3.pro</a>', "centerv3.pro", "", "comp4", "           Only used to save the strips into structures.  ", "file       File to be read in  time       Prints the elapsed time  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   xstrips       Structure containing row strips  ystrips       Structure containing column strips  thresh       Threshold used to select pixels   ", "          -1", "           comp4,xstrips,ystrips,thresh,/time,scan_width=10   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv3.html#comp5v2", "comp5v2", 'routine in <a href="code_snapshots/obsolete_code/centerv3.html">centerv3.pro</a>', "centerv3.pro", "", "comp5v2", "           Only used to save the cut-down strips into structures. Imports strips from            comp4 like a good code should.   ", "file       File to be read in  time       Prints the elapsed time  ministrip_length       How long the total array of the cut-down strip will be  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be:     max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   xstrips       Contains the row sctructures of strips  ystrips       Contains the col sctructures of strips  thresh       Threshold value used   ", "          -1", "           comp5v2,xstrips,ystrips,thresh      Exactly how much data should be stored in a structure? Since we're interested in saving space,    doesn't make sense to repeat any data in the structures.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv3.html#comp6v2", "comp6v2", 'routine in <a href="code_snapshots/obsolete_code/centerv3.html">centerv3.pro</a>', "centerv3.pro", "", "comp6v2", "       Uses the data from comp5v2 and draws a linear/quadratic/cubic/etc. function to find midpoint.        Order is the power of the function. Different from comp6 in that this method uses fz_roots()        and comp6 uses spline to interpolate where the limb crosses a threshold. Imports the strips        from comp5v2.   ", "file       File to be read in  order       What order polynomial to use for POLY_FIT()  time       Prints the elapsed time  scan_width       Ondicates how far apart to scan  ministrip_length       How long the trimmed down strip will be  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be:     max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep   xpos       X Center  ypos       Y Center   ", "          -1", "           comp6,xpos,ypos,order=3   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv3.html#cc", "cc", 'routine in <a href="code_snapshots/obsolete_code/centerv3.html">centerv3.pro</a>', "centerv3.pro", "", "cc", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv3.html#msmsp", "msmsp", 'routine in <a href="code_snapshots/obsolete_code/centerv3.html">centerv3.pro</a>', "centerv3.pro", "", "msmsp", "   Abbreviated form of  Make Some More Scatter Plots     Making more scat plots now that I've fixed my program and am now moving onto bmp images   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html", "centerv4.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "centerv4.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " At the end of the day this should find the center of the sun using a variety of (working) methods   Compiled the doc with idldoc,root='/Users/jerensuzuki/Documents/suncentering', $  output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html#centerv4", "centerv4", 'routine in <a href="code_snapshots/obsolete_code/centerv4.html">centerv4.pro</a>', "centerv4.pro", "", "centerv4", "       Finds the centroid using a variety of compression levels         Different from v2 in that this one is slightly more organized and uses a different version of        comp2v2.         Important!:        IDL uses the origin to be the top left corner for 2d arrays and a column is indexed from 0        starting from the top. You have been WARNED.  ", "file       File to be read in  ministrip_length       How long the cut-down strip is  scan_width       How far apart the scans are  time       Prints the elapsed time  order       What order polynomial to use for POLY_FIT()  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be: <span class= code-output >   max(image) - sigmavalue*stddev(image)</span>  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  storestruct       Toggles whether or not we want to save data at all   ", "          -1", "   More Keywords/parameters     How strict are we going to be for the outputs of each compression file?     Deal with fiducials hitting the limb (Does it even matter?)     Deal with scan_width; scan_width=5 seems to produce some pretty good results.     I fixed the values being stuck, it was because I added to the index where the image value &gt; thresh,    I should've subtracted instead. Note: Don't do that again.     Threshold value doesn't have a safety in terms of cosmic rays or single pixels with absurdly high    values. Got to have some sort of catch here just in case.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html#scanboxv2", "scanboxv2", 'routine in <a href="code_snapshots/obsolete_code/centerv4.html">centerv4.pro</a>', "centerv4.pro", "", "scanboxv2", "       Boxit was too computation-intensive, this is more a rough boxing program.    Compared to scanbox, scanboxv2 uses knowledge of approx size of sun to only scan    until it hits the sun then moves the crop borders based on the given parameters.   ", "file       File to be read in  time       Print the elapsed time  meanthreshscan_width       How far apart the scanning should be. Fine tuned compared to scanbox  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)  storestruct       Toggles whether or not we want to save data at all   ", "          -1", "       cropped = scanboxv2(file='$PWD/sep11_postit/104533_20120912_124300_353097_0.bin',/time)   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html#comp2v2", "comp2v2", 'routine in <a href="code_snapshots/obsolete_code/centerv4.html">centerv4.pro</a>', "centerv4.pro", "", "comp2v2", "           Finds the centroid by summing all values over a certain threshold and averaging them.        Differs from comp2 in that this one uses a much, much more beautiful way to create the mask   ", "file       File to be read in  time       Prints the elapsed time  plot       Makes a nice plot  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)         Having a sigmavalue=2 makes the pixels chosen from the sun more circular than sigmavalue=1   xpos       X center  ypos       Y center  thresh       Threshold used to select pixels   ", "          -1", "           comp2v2,xpos,ypos,thresh,time=time,sigmavalue=sigmavalue,file=file   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html#comp3", "comp3", 'routine in <a href="code_snapshots/obsolete_code/centerv4.html">centerv4.pro</a>', "centerv4.pro", "", "comp3", "           Looks only at the positions of pixels above a threshold and doen't care        About their actual values, like in comp2v2. More  accurate  to find the        center than comp2v2 since this gives all solar pixels equal weighting.   ", "file       File to be read in  time       Prints the elapsed time  plot       Makes a nice plot  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)         Having a sigmavalue=2 makes the pixels chosen from the sun more circular than sigmavalue=1   xpos       X center  ypos       Y center  thresh       Threshold used to select pixels   ", "          -1", "           comp3,xpos,ypos,thresh,time=time,sigmavalue=sigmavalue,file=file   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html#comp3v2", "comp3v2", 'routine in <a href="code_snapshots/obsolete_code/centerv4.html">centerv4.pro</a>', "centerv4.pro", "", "comp3v2", "           Looks only at the positions of pixels above a threshold and doen't care        about their actual values, like in comp2v2. Different from comp3 in that this        version uses sort instead of the 2d array where   ", "file       File to be read in  time       Prints the elapsed time  plot       Makes a nice plot  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)         Having a sigmavalue=2 makes the pixels chosen from the sun more circular than sigmavalue=1   xpos       X center  ypos       Y center  thresh       Threshold used to select pixels   ", "          -1", "           comp3,xpos,ypos,thresh,time=time,sigmavalue=sigmavalue,file=file   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html#comp4", "comp4", 'routine in <a href="code_snapshots/obsolete_code/centerv4.html">centerv4.pro</a>', "centerv4.pro", "", "comp4", "           Only used to save the strips into structures.  ", "file       File to be read in  time       Prints the elapsed time  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  storestruct       Toggles whether or not we want to save data at all   xstrips       Structure containing row strips  ystrips       Structure containing column strips  thresh       Threshold used to select pixels   ", "          -1", "           comp4,xstrips,ystrips,thresh,/time,scan_width=10   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html#comp4v2", "comp4v2", 'routine in <a href="code_snapshots/obsolete_code/centerv4.html">centerv4.pro</a>', "centerv4.pro", "", "comp4v2", "           Only used to save the strips into structures. Different from comp4 in that comp4v2            only saves 5 strips centered around the solar diameter to reduce the amount of limb-            darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.  ", "file       File to be read in  time       Prints the elapsed time  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  nstrips       How many strips to select, centered around the row/col diameter  storestruct       Toggles whether or not we want to save data at all   xstrips       Structure containing row strips  ystrips       Structure containing column strips  thresh       Threshold used to select pixels   ", "          -1", "           comp4v2,xstrips,ystrips,thresh,/time,scan_width=10   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html#comp5v3", "comp5v3", 'routine in <a href="code_snapshots/obsolete_code/centerv4.html">centerv4.pro</a>', "centerv4.pro", "", "comp5v3", "           Only used to save the cut-down strips into structures. Differs from comp5v2            in that this one uses comp4v2. That's it.   ", "file       File to be read in  time       Prints the elapsed time  ministrip_length       How long the total array of the cut-down strip will be  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be:     max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  storestruct       Toggles whether or not we want to save data at all   xstrips       Contains the row sctructures of strips  ystrips       Contains the col sctructures of strips  thresh       Threshold value used   ", "          -1", "           comp5v3,xstrips,ystrips,thresh      Exactly how much data should be stored in a structure? Since we're interested in saving space,    doesn't make sense to repeat any data in the structures.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centerv4.html#comp6v2", "comp6v2", 'routine in <a href="code_snapshots/obsolete_code/centerv4.html">centerv4.pro</a>', "centerv4.pro", "", "comp6v2", "       Uses the data from comp5v3 and draws a linear/quadratic/cubic/etc. function to find midpoint.        Order is the power of the function. Different from comp6 in that this method uses fz_roots()        and comp6 uses spline to interpolate where the limb crosses a threshold. Imports the strips        from comp5v3.   ", "file       File to be read in  order       What order polynomial to use for POLY_FIT()  time       Prints the elapsed time  scan_width       Ondicates how far apart to scan  ministrip_length       How long the trimmed down strip will be  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be:     max(image) - sigmavalue*stddev(image)   savstep       The number of steps to include in the fits file.        savstep = 1: cropped image        savstep = 2: long strips        savstep = 3: limb strips        savstep = 4: center of mask  saveonly       Determines whether or not savstep saves steps leading up to savstep or just savstep  storestruct       Toggles whether or not we want to save data at all   xpos       X Center  ypos       Y Center   ", "          -1", "           comp6,xpos,ypos,order=3   ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centroidtest.html", "centroidtest.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "centroidtest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/centroidtest.html#centroidtest", "centroidtest", 'routine in <a href="code_snapshots/obsolete_code/centroidtest.html">centroidtest.pro</a>', "centroidtest.pro", "", "centroidtest", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/centroidwholesuns.html", "centroidwholesuns.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "centroidwholesuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/centroidwholesuns.html#centroidwholesuns", "centroidwholesuns", 'routine in <a href="code_snapshots/albert_version/centroidwholesuns.html">centroidwholesuns.pro</a>', "centroidwholesuns.pro", "", "centroidwholesuns", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "inputstruct           Structure containing the centers and cropped images of all 3 suns   inputimage           Image that we start out with   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/centroidwholesuns.html", "centroidwholesuns.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "centroidwholesuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/centroidwholesuns.html#centroidwholesuns", "centroidwholesuns", 'routine in <a href="code_snapshots/test_version/centroidwholesuns.html">centroidwholesuns.pro</a>', "centroidwholesuns.pro", "", "centroidwholesuns", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "inputstruct           Structure containing the centers and cropped images of all 3 suns   inputimage           Image that we start out with   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/centroidwholesuns.html", "centroidwholesuns.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "centroidwholesuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/centroidwholesuns.html#centroidwholesuns", "centroidwholesuns", 'routine in <a href="code_snapshots/orig_version/centroidwholesuns.html">centroidwholesuns.pro</a>', "centroidwholesuns.pro", "", "centroidwholesuns", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "inputstruct           Structure containing the centers and cropped images of all 3 suns   inputimage           Image that we start out with   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/centroidwholesuns.html", "centroidwholesuns.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "centroidwholesuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/centroidwholesuns.html#centroidwholesuns", "centroidwholesuns", 'routine in <a href="code_snapshots/jul25/centroidwholesuns.html">centroidwholesuns.pro</a>', "centroidwholesuns.pro", "", "centroidwholesuns", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "inputstruct           Structure containing the centers and cropped images of all 3 suns   inputimage           Image that we start out with   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/centroidwholesuns.html", "centroidwholesuns.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "centroidwholesuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/centroidwholesuns.html#centroidwholesuns", "centroidwholesuns", 'routine in <a href="sep20/centroidwholesuns.html">centroidwholesuns.pro</a>', "centroidwholesuns.pro", "", "centroidwholesuns", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "inputstruct           Structure containing the centers and cropped images of all 3 suns   inputimage           Image that we start out with   limbfittedcentroids           Strucutre comtaining all information   best4           Structure containing positions of best 4 fiducials   fixfid           Structure containing all fiducial positions   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/centroidwholesuns.html", "centroidwholesuns.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "centroidwholesuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/centroidwholesuns.html#centroidwholesuns", "centroidwholesuns", 'routine in <a href="code_snapshots/aug22_notworking/centroidwholesuns.html">centroidwholesuns.pro</a>', "centroidwholesuns.pro", "", "centroidwholesuns", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "inputstruct           Structure containing the centers and cropped images of all 3 suns   inputimage           Image that we start out with   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/centroidwholesuns.html", "centroidwholesuns.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "centroidwholesuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/centroidwholesuns.html#centroidwholesuns", "centroidwholesuns", 'routine in <a href="code_snapshots/sep11/centroidwholesuns.html">centroidwholesuns.pro</a>', "centroidwholesuns.pro", "", "centroidwholesuns", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "inputstruct           Structure containing the centers and cropped images of all 3 suns   inputimage           Image that we start out with   fixfid           If set, marks the second run of centroidwholesuns and attempts to fix any chord slicing if the chord edge crosses a fiducial.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgaddtopath.html", "cgaddtopath.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgaddtopath.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgaddtopath.html#cgADDTOPATH", "cgADDTOPATH", 'routine in <a href="coyote/cgaddtopath.html">cgaddtopath.pro</a>', "cgaddtopath.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgADDTOPATH", " Adds a directory to the beginning of the !PATH system variable.   ", "VERBOSE       Set this keyword if you wish to receive confirmation of action.   theDirectory       The name of the directory to add to !PATH. If missing, the current directory.   ", "Utility", "     Written, 20 Sept 2010.        Copyright (c) 2010, Fanning Software Consulting, Inc.      For example, to add a  programs  directory to the IDL path: <span class= code-output >  cgAddToPath, '/usr/david/IDL/programs/'</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgappendtofilename.html", "cgappendtofilename.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgappendtofilename.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgappendtofilename.html#cgAppendToFilename", "cgAppendToFilename", 'routine in <a href="coyote/cgappendtofilename.html">cgappendtofilename.pro</a>', "cgappendtofilename.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgAppendToFilename", " The purpose of this routine is to allow the user append text to the end of the  root name of an absolute file name. The text is appended to the end of the root  name (see cgRootName) and before the final file extension.   ", "filename        This file name the text is to be to be appended to. It may be a relative or absolute path         name to a file.  theText        The text to append to the end of the file root name.   ", "Utilities", "     Change History: <span class= code-output >  Written by: David W. Fanning, 19 September 2012.</span>       Copyright (c)2012, Fanning Software Consulting, Inc.      Append  processed  to a filename:   <span class= code-prompt >IDL&gt;</span> thePath =  C:\rsi\idl7.8\lib\jester.img    <span class= code-prompt >IDL&gt;</span> outFileName = cgAppendToFilename(thePath, '_processed')   <span class= code-prompt >IDL&gt;</span> Print, outFileName <span class= code-output >       C:\rsi\idl7.8\lib\jester_processed.img</span>        The appended filename.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgarrow.html", "cgarrow.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgarrow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgarrow.html#cgArrow", "cgArrow", 'routine in <a href="coyote/cgarrow.html">cgarrow.pro</a>', "cgarrow.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgArrow", " Provides a device-independent and color-model-independent way of drawing an arrow  in a specified color.   The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD         An alternative way to set the Window keyword.  COLOR         An alternative way to specify the color to use in erasing the graphics window.          Color names are those used with cgColor. This parameter is used in          preference to the background_color parameter.  DATA          Set this keyword of the arrow locations are in data coordinates.           Device coordinates are assumed.  HSIZE         The size of the the arrow head. By default 1/64th the width          of the device. (!D.X_SIZE / 64.)  HTHICK         The thickness of the line drawing the arrowhead.  LINESTYLE         The line style of the arrow. Line style integers as in PLOT.  NORMAL          Set this keyword of the arrow locations are in normalized coordinates.           Device coordinates are assumed.  SOLID          Set this keyword to draw solid, filled arrows.  THICK         The thickness of the line drawing the shaft of the arrow.  WINDOW         Set this keyword to add the command to an cgWindow application.   _REF_EXTRAx0         The x location of the blunt end of the arrow. May be a vector. Assumes          device coordinates.  y0         The y location of the blunt end of the arrow. May be a vector. Assumes          device coordinates.  x1         The x location of the sharp end of the arrow. May be a vector. Assumes          device coordinates.  y1         The y location of the sharp end of the arrow. May be a vector. Assumes          device coordinates.   ", "Graphics", "     Change History: <span class= code-output >  Written, 23 November 2010. DWF. Based on old Arrow routine in IDL.</span> <span class= code-output >  Added Window keyword 24 January 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Added the ADDCMD keyword to make the interface more consistent with other Coyote Grapics routines. 18 April 2013. DWF.</span>       Copyright (c) 2010-2013, Fanning Software Consulting, Inc.      Used to draw arrows:   <span class= code-prompt >IDL&gt;</span> cgArrow, 50, 50, 100, 100, /Solid  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgaspect.html", "cgaspect.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgaspect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgaspect.html#cgAspect", "cgAspect", 'routine in <a href="coyote/cgaspect.html">cgaspect.pro</a>', "cgaspect.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgAspect", " The purpose of this function is to calculate a position in a graphics window with  a specified aspect ratio (ysize/xsize).   ", "ALIGN         Normally, the output position is centered in the intial input position. This          keyword can alter the placement of the final position with respect to the initial          position. Allowed values are  top ,  right ,  bottom ,  left , and  center .  ASPECT         This keyword provides an alternative way of specifying the aspect_rato value. Pass          this keyword any 2D array, and the aspect ratio will be calculated to match the 2D array.  POSITION         Use this keyword to specify a four-element normalized starting position for calculating          the final position in the graphics window. By default, the staring position is given          by [0.0, 0.0, 1.0, 1.0] (the entire window). If the Single_Plot keyword is set, the          default position is given by [0.125, 0.125, 0.9, 0.9].  SINGLE_PLOT         Set this keyword to change the default starting Position to [0.125, 0.125, 0.9, 0.9].  WASPECT         Set this keyword to the window aspect ratio. If not used, the window aspect is calculated from          the current graphics window as Float(!D.Y_VSize) / !D.X_VSize.   aspect_ratio         The requested aspect ratio. Be careful to specify this as a float.   ", "Utility", "     Change History: <span class= code-output >  Written, 12 February 2013 by David W. Fanning.</span>       Copyright (c) 2013, Fanning Software Consulting, Inc.      Here is how to use this program to display two differently sized images aligned at their tops: <span class= code-output >   img1 = cgDemoData(7)</span> <span class= code-output >   img2 = congrid(img1, 360, 180)</span> <span class= code-output >   cgDisplay, 900, 450</span>  <span class= code-output >   pos = cgLayout([2,1], OYMargin=[4, 11], OXMargin=[5, 8], XGap=6)</span> <span class= code-output >   pos1 = pos[*,0]</span> <span class= code-output >   img1pos = cgAspect(Position=pos1, Aspect=img1, Align='top')</span> <span class= code-output >   cgImage, img1, CTIndex=3, /AXES, POSITION=img1pos, OPOSITION=op</span> <span class= code-output >   cgColorbar, CTIndex=3, /Fit</span>  <span class= code-output >   pos2 = pos[*,1]</span> <span class= code-output >   img2pos = cgAspect(Position=pos2, Aspect=img2, Align='top')</span> <span class= code-output >   cgImage, img2, /AXES, POSITION=img2pos, CTIndex=2, /NoErase</span> <span class= code-output >   cgColorbar, CTIndex=2, /Fit</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgaxis.html", "cgaxis.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgaxis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgaxis.html#cgAxis", "cgAxis", 'routine in <a href="idlastro/coyote/cgaxis.html">cgaxis.pro</a>', "cgaxis.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgAxis", " Provides a device-independent and color-model-independent way to draw an axis into  a graphics window. It is a wrapper to the AXIS command.   The program requires the Coyote Library  to be installed on your machine.   ", "CHARSIZE         The character size for axes annotations. Uses cgDefCharSize to select default          character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR         The color of the text. Color names are those used with cgColor. By default,           black , unless the upper-right hand pixel in the display is black, then  white .  DATA         Set this keyword to indicate xloc and yloc are in data coordinates. Data coordinates          are the default, unless DEVICE or NORMAL is set.  DEVICE         Set this keyword to indicate xloc and yloc are in device coordinates.  FONT         The type of font desired. By default, !P.Font.  NORMAL         Set this keyword to indicate xloc and yloc are in normalized coordinates.  SAVE         Set this keyword to save the scaling parameters set by the axis for subsequent use.  T3D         Set this keyword to rotate the axis is the 3D data space set up with !P.T.  TITLE         The title or annotation that appears on the axis.  XAXIS         If set to 0, the axis is drawn under the plot with the tick marks pointing up; if set          to 1, the axis is drawn on top of the plot with the tick marks pointing down.  XLOG         Set this keyword to specify a logarithmic axis type.  XTITLE         An alternative way to set the Title keyword for X axes. Use Title instead.  YAXIS         If set to 0, the axis is drawn on the left of the plot with the tick marks pointing          to the right. If set to 1, the axis is drawn on the right of the plot with the tick          marks pointing to the left.  YLOG         Set this keyword to specify a logarithmic axis type.  YTITLE         An alternative way to set the Title keyword for Y axes. Use Title instead.  YNOZERO         Set this keyword to prevent the Y axis from starting at 0.  ZAXIS         Set to 0-3 to position the Z axis in various locatons. See the AXIS documentation.  ZLOG         Set this keyword to specify a logarithmic axis type.  ZTITLE         An alternative way to set the Title keyword for Z axes. Use Title instead.  WINDOW         Set this keyword to add the command to the in the current cgWindow application.  _REF_EXTRA          Any keywords appropriate for the AXIS command.   xloc       The X location of the axis.  yloc       The Y location of the axis.  zloc       The Z location of the axis.   ", "Graphics", "     Change History: <span class= code-output >  Written, 25 Janauray 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Modifed the way I am handling brain dead AXIS command. 30 May 2011. DWF.</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >  Added T3D keyword. 1 March 2012. DWF.</span> <span class= code-output >  Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used like the IDL AXIS command:   <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(1), YStyle=8, Position=[0.1, 0.1, 0.85, 0.9], /Window   <span class= code-prompt >IDL&gt;</span> cgAxis, /YAxis, Color='red', YRange=[-500, 500], /Save, /Window  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgaxis.html", "cgaxis.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgaxis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgaxis.html#cgAxis", "cgAxis", 'routine in <a href="coyote/cgaxis.html">cgaxis.pro</a>', "cgaxis.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgAxis", " Provides a device-independent and color-model-independent way to draw an axis into  a graphics window. It is a wrapper to the AXIS command.   The program requires the Coyote Library  to be installed on your machine.   ", "CHARSIZE         The character size for axes annotations. Uses cgDefCharSize to select default          character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR         The color of the text. Color names are those used with cgColor. By default,           black , unless the upper-right hand pixel in the display is black, then  white .  DATA         Set this keyword to indicate xloc and yloc are in data coordinates. Data coordinates          are the default, unless DEVICE or NORMAL is set.  DEVICE         Set this keyword to indicate xloc and yloc are in device coordinates.  FONT         The type of font desired. By default, !P.Font.  NORMAL         Set this keyword to indicate xloc and yloc are in normalized coordinates.  SAVE         Set this keyword to save the scaling parameters set by the axis for subsequent use.  T3D         Set this keyword to rotate the axis is the 3D data space set up with !P.T.  TITLE         The title or annotation that appears on the axis.  XAXIS         If set to 0, the axis is drawn under the plot with the tick marks pointing up; if set          to 1, the axis is drawn on top of the plot with the tick marks pointing down.  XLOG         Set this keyword to specify a logarithmic axis type.  XTITLE         An alternative way to set the Title keyword for X axes. Use Title instead.  YAXIS         If set to 0, the axis is drawn on the left of the plot with the tick marks pointing          to the right. If set to 1, the axis is drawn on the right of the plot with the tick          marks pointing to the left.  YLOG         Set this keyword to specify a logarithmic axis type.  YTITLE         An alternative way to set the Title keyword for Y axes. Use Title instead.  YNOZERO         Set this keyword to prevent the Y axis from starting at 0.  ZAXIS         Set to 0-3 to position the Z axis in various locatons. See the AXIS documentation.  ZLOG         Set this keyword to specify a logarithmic axis type.  ZTITLE         An alternative way to set the Title keyword for Z axes. Use Title instead.  WINDOW         Set this keyword to add the command to the in the current cgWindow application.  _REF_EXTRA          Any keywords appropriate for the AXIS command.   xloc       The X location of the axis.  yloc       The Y location of the axis.  zloc       The Z location of the axis.   ", "Graphics", "     Change History: <span class= code-output >  Written, 25 Janauray 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Modifed the way I am handling brain dead AXIS command. 30 May 2011. DWF.</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >  Added T3D keyword. 1 March 2012. DWF.</span> <span class= code-output >  Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used like the IDL AXIS command:   <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(1), YStyle=8, Position=[0.1, 0.1, 0.85, 0.9], /Window   <span class= code-prompt >IDL&gt;</span> cgAxis, /YAxis, Color='red', YRange=[-500, 500], /Save, /Window  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgbarplot.html", "cgbarplot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgbarplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgbarplot.html#cgBarPlot", "cgBarPlot", 'routine in <a href="coyote/cgbarplot.html">cgbarplot.pro</a>', "cgbarplot.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgBarPlot", " Provides a device-independent and color-model-independent way to create a bar  plot or to overplot on an existing bar plot.   The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD        Set this keyword to add the command to a cgWindow resizeable graphics window.  AXISCOLOR        If this keyword is a string, the name of the axis color. By default, 'black'.         Otherwise, the keyword is assumed to be a color index into the current color table.  BACKGROUND        If this keyword is a string, the name of the background color. By default, 'white'.         Otherwise, the keyword is assumed to be a color index into the current color table.  BARCOORDS        A vector of values for the center point of the bars.  BARNAMES        A string array, containing one string label per bar. If the bars are vertical,         the labels are placed beneath them.  If horizontal (rotated) bars are specified,         the labels are placed to the left of the bars.  BAROFFSET        A scalar that specifies the offset to be applied to the first bar, in units of          nominal bar width .  This keyword allows, for example, different groups of bars         to be overplotted on the same graph.  BARSPACE        A scalar that specifies, in units of  nominal bar width , the spacing between bars.         For example, if BARSPACE is 1.0, then all bars will have one bar-width of space         between them. If not specified, the bars are spaced apart by 20% of the bar width.  BARTHICK        A scalar that specifies the thickness of the bar outlines.  BARWIDTH         A floating-point value that specifies the width of the bars in units of  nominal bar          width .  The nominal bar width is computed so that all the bars (and the space          between them will fill the available space (optionally controlled with the BASERANGE          keyword).  BASELINES         A vector, the same size as VALUES, that contains the base value associated          with each bar.  If not specified, a base value of zero is used for all bars.  BASERANGE         A floating-point scalar in the range 0.0 to 1.0, that determines the fraction of          the total available plotting area (in the direction perpendicular to the bars) to          be used. If not specified, the full available area is used.  COLORS         A vector of color values, the same size as VALUES, containing either the color          names, 24-bit color values, or color index numbers (byte values) of the colors to          be used for the bars. If not specified, the colors are selected based on the          available colors in the current color table.  LAYOUT         This keyword specifies a grid with a graphics window and determines where the          graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].          The grid is determined by the number of columns (ncolumns) by the number of          rows (nrows). The location of the graphic is determined by the third number. The          grid numbering starts in the upper left (1) and goes sequentually by column and then          by row.  NOERASE         Set this keyword to draw the plot without erasing the display first.  OUTFILENAME        If the Output keyword is set, the user will be asked to supply an output         filename, unless this keyword is set to a non-null string. In that case, the         value of this keyword will be used as the filename and there will be no dialog         presented to the user.  OUTLINE         Set this keyword to draw an outline around each bar in the OPLOTCOLORS.  OUTPUT        Set this keyword to the type of output desired. Possible values are these: <span class= code-output >   'PS'   - PostScript file</span> <span class= code-output >   'EPS'  - Encapsulated PostScript file</span> <span class= code-output >   'PDF'  - PDF file</span> <span class= code-output >   'BMP'  - BMP raster file</span> <span class= code-output >   'GIF'  - GIF raster file</span> <span class= code-output >   'JPEG' - JPEG raster file</span> <span class= code-output >   'PNG'  - PNG raster file</span> <span class= code-output >   'TIFF' - TIFF raster file</span>         Or, you can simply set this keyword to the name of the output file, and the type of         file desired will be determined by the file extension. If you use this option, the         user will not be prompted to supply the name of the output file.          All raster file output is created through PostScript intermediate files (the         PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed         to produce anything other than PostScript output. (See cgPS2PDF and PS_END for         details.) And also note that you should NOT use this keyword when doing multiple         plots. The keyword is to be used as a convenient way to get PostScript or raster         output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  OPLOTCOLORS         A vector of color values, similar to colors for overplot outlines on the bars.          If a scalar value (e.g.,  charcoal ) the same value is used for all outlines.  OVERPLOT         Set this keyword if you wish to overplot data on an already exisiting set of          axes. It is like calling the IDL OPLOT command.  POSITION         The usual four-element normalized position vector for the Plot comamnd.  RANGEROTATE         If set, this keyword indicates that horizontal rather than vertical bars should          be drawn.  The bases of horizontal bars are on the left,  Y  axis and the bars          extend to the right.  TITLE         The title of the plot, if supplied.  WINDOW         Set this keyword if you want to display the plot in a resizable graphics window.  XSTYLE         The normal XSTYLE keyword. See  Graphics Keywords  in on-line help.  XTITLE         The X title of the plot, if supplied.  YSTYLE         The normal YSTYLE keyword. See  Graphics Keywords  in on-line help.  YTITLE         The Y title of the plot, if supplied.  _REF_EXTRA        Any keyword appropriate for the IDL Plot command is allowed in the program.   values        A vector containing the values to be represented by bars. Each element in         the vector will be represented by a bar.   ", "Graphics", "     Change History: <span class= code-output >  Written, 3 October 2011. DWF. Written as a straight-forward translation of</span> <span class= code-output >      the IDL Bar_Plot program. In retrospect, maybe not the best idea, as I</span> <span class= code-output >      don't think the Bar_Plot program actually works and the interface is clunky.</span> <span class= code-output >      But, this is a start. The interface may change to something more elegant over</span> <span class= code-output >      time.</span> <span class= code-output >   Updated the BACKGROUND color selection from lessons learned in 27 Oct 2011 cgContour</span> <span class= code-output >       corrections. 27 Oct 2011. DWF.</span> <span class= code-output >   Added the ability to send the output directly to a file via the OUTPUT keyword. 9 Dec 2011, DWF.</span> <span class= code-output >   PostScript, PDF, and Imagemagick parameters can now be tailored with cgWindow_SetDefs. 14 Dec 2001. DWF.</span> <span class= code-output >   Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >   Fixed a problem with keyword inheritance. Added XStyle and YStyle keywords. 25 Jan 2012. DWF.</span> <span class= code-output >   Added BARCOORDS keyword to return bar plot locations. 25 Jan 2012.</span> <span class= code-output >   Changes to allow better default colors, based on changes to cgColor and cgDefaultColor. 1 Feb 2012. DWF.</span> <span class= code-output >   Small problem with setting range keywords and with extraneous marks on the bar plot axis fixed. 6 Feb 2012. DWF.</span> <span class= code-output >   Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >   Fixed a typo that was interfering with the YTITLE keyword. 3 Oct 2012. DWF.</span> <span class= code-output >   Fixed a bug in the interaction of the NOERASE and OVERPLOT keywords. 14 Jan 2013. DWF.</span> <span class= code-output >   Added a BARTHICK keyword to change the thickness of the bar outlines. 28 Feb 2013. DWF.</span> <span class= code-output >   Further work checking for NANs in the display of the data. NAN data set to length of 0. 3 Sept 2013. DWF.</span>       Copyright (c) 2011-2013, Fanning Software Consulting, Inc.      To create bar plots of four different bar classes. Example uses AL_Legend from     the NASA Astronomy Library. Comment out if not available.:     Create data: <span class= code-output >  seed = -5L</span> <span class= code-output >  data1 = RandomU(seed, 5) * 10.0</span> <span class= code-output >  data2 = RandomU(seed, 5) * 7.5</span> <span class= code-output >  data3 = RandomU(seed, 5) * 7.5</span> <span class= code-output >  data4 = RandomU(seed, 5) * 10.0</span>     Display as four different plots: <span class= code-output >  !P.Multi=[0,2,2]</span> <span class= code-output >  cgDisplay, WID=0</span> <span class= code-output >  cgBarPlot, data1, /OUTLINE, OPLOTCOLOR='charcoal', YRANGE=[0, 12], COLORS='red', XTITLE='Class 1'</span> <span class= code-output >  cgBarPlot, data2, /OUTLINE, OPLOTCOLOR='charcoal', YRANGE=[0, 12], COLORS='blue', XTITLE='Class 2'</span> <span class= code-output >  cgBarPlot, data3, /OUTLINE, OPLOTCOLOR='charcoal', YRANGE=[0, 12], COLORS='gold', XTITLE='Class 3'</span> <span class= code-output >  cgBarPlot, data4, /OUTLINE, OPLOTCOLOR='charcoal', YRANGE=[0, 12], COLORS='dark green', XTITLE='Class 4'</span> <span class= code-output >  !P.Multi=0</span>     Display as accumulated bar plots: <span class= code-output >  cgDisplay, WID=1</span> <span class= code-output >  barnames = ['Exp 1', 'Exp 2', 'Exp 3', 'Exp 4', 'Exp 5']</span> <span class= code-output >  cgBarPlot, data1, YRANGE=[0, 35], COLORS='red', BARNAMES=barnames</span> <span class= code-output >  cgBarplot, data2, /OVERPLOT, BASELINE=data1, COLORS='blue'</span> <span class= code-output >  cgBarplot, data3, /OVERPLOT, BASELINE=data1+data2, COLORS='gold'</span> <span class= code-output >  cgBarplot, data4, /OVERPLOT, BASELINE=data1+data2+data3, COLORS='dark green'</span> <span class= code-output >  colors = ['red', 'blue', 'gold', 'dark green']</span> <span class= code-output >  items = ['Class 1', 'Class 2', 'Class 3', 'Class 4']</span> <span class= code-output >  Al_Legend, items, /FILL, PSYM=Replicate(15,4), COLORS=colors, SYMSIZE=Replicate(1.75,4), $</span> <span class= code-output >      POSITION=[0.20, 0.92], /NORMAL, CHARSIZE=cgDefCharSize()</span>     Display all on same plot: <span class= code-output >  cgDisplay, WID=2</span> <span class= code-output >  cgBarPlot, data1, YRANGE=[0, 12], BAROFFSET=2.5, BASERANGE=0.20, COLORS='red'</span> <span class= code-output >  cgBarplot, data2, /OVERPLOT, BAROFFSET=9.5, BASERANGE=0.20, COLORS='blue'</span> <span class= code-output >  cgBarplot, data3, /OVERPLOT, BAROFFSET=17.0, BASERANGE=0.20, COLORS='gold'</span> <span class= code-output >  cgBarplot, data4, /OVERPLOT, BAROFFSET=24.5, BASERANGE=0.20, COLORS='dark green'</span> <span class= code-output >  colors = ['red', 'blue', 'gold', 'dark green']</span> <span class= code-output >  items = ['Class 1', 'Class 2', 'Class 3', 'Class 4']</span> <span class= code-output >  Al_Legend, items, /FILL, PSYM=Replicate(15,4), COLORS=colors, SYMSIZE=Replicate(1.75,4), $</span> <span class= code-output >      POSITION=[0.45, 0.92], /NORMAL, CHARSIZE=cgDefCharSize()</span>      ");
  
  

libdata[libdataItem++] = new Array("coyote/cgblendimage.html", "cgblendimage.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgblendimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgblendimage.html#cgBlendImage", "cgBlendImage", 'routine in <a href="coyote/cgblendimage.html">cgblendimage.pro</a>', "cgblendimage.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgBlendImage", " This alpha blends two 24-bit images and displays them with the cgImage command.   The program requires the Coyote Library  to be installed on your machine.   ", "ALPHA         A number between 0 and 1 that indicates the percentage of the foreground image          to alpha-blend into the background image. For example, ALPHA=0.2 will give          a weigth of 20% to the foreground image pixels and 80% to the background image          pixels.    window: in, optional, type=intarr          A one-, two-, or three-element array giving the window index numbers for          the foreground, background, and display windows, repectively. If one-element,          the foreground image is retrieved from that window and displayed in the current          window. If two elements, the foreground and background images are obtained from          the first two elements, respectively, and a new third display window is opened.          This is the same for three elements, except the third element is used to specify          the display window.  WINDOW_REF_EXTRA         Any keyword appropriate for the cgImage command is also accepted by keyword          inheritance.   foreGroundImage         A 24-bit foreground image with the same dimensions as the background image.  backGroundImage         A 24-bit background image with the same dimensions as the foreground image.   ", "Graphics", "     Change History: <span class= code-output >  Written by: David W. Fanning, 26 May 2009.</span> <span class= code-output >  Added the WINDOW keyword. 16 February 2012. DWF.</span>       Copyright (c) 2009-2012, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgboxplot.html", "cgboxplot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgboxplot.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " This is graphics routine to display a box plot, also known as a box and  whisker plot, in IDL direct graphics. The box encloses the interquartile  range (IQR), defined at IQR75-IQR25. The whiskers extend out to the maximum  or minimum value of the data, or to the 1.5 times either the IQR75 or IQR25,  if there is data beyond this range. Outliers are identified with small circles.   The program requires the Coyote Library  to be installed on your machine.   If you wish to draw multiple boxplots in a display window, it will make more sense to  use cgLayout to set up your plot positions than to use !P.Multi. This is because the  labels on the plot are set up independently of the plot with the XCharsize keyword and  this size is not affected by !P.Multi, which normally controls not only the position of  plots, but the character size of plot labels, too.   ", "", "Graphics", "     Change History: <span class= code-output >  Written by David W. Fanning, 4 March 2009.</span> <span class= code-output >  Added STATS keyword to return data statistics. 5 March 2009. DWF.</span> <span class= code-output >  Added MISSING_DATA_VALUE keyword to identify missing values. 14 March 2009. DWF.</span> <span class= code-output >  Removed limitation of LABELS array having no more than 28 elements. 14 March 2009. DWF.</span> <span class= code-output >  Made it possible to pass a pointer array containing the data, if desired. 14 March 2009. DWF.</span> <span class= code-output >  Added ROTATE keyword to rotate labels. 16 March 2009. DWF.</span> <span class= code-output >  Added several modifications to guard against ill-formed data in the cgBoxPlot_Draw</span> <span class= code-output >    procedure. 23 March 2009. DWF.</span> <span class= code-output >  Added keywords FILLBOXES and BOXCOLOR. 24 March 2009. DWF.</span> <span class= code-output >  Redefined the STATS structure to include MEAN and to store values as doubles. 25 March 2009. DWF.</span> <span class= code-output >  Fixed in a bug that resulted in incorrect behavior when the MISSING_DATA_VALUE keyword</span> <span class= code-output >    was used. 8 April 2009. DWF.</span> <span class= code-output >  Fixed a typo that didn't allow a single column vector to be displayed as a box plot. 17 May 2009. DWF.</span> <span class= code-output >  Now allow a single row vector to be passed into program and displayed. 20 May 2009. DWF.</span> <span class= code-output >  Added NOCLIP=0 keyword to PLOTS command when drawing outliers. 15 July 2009. DWF.</span> <span class= code-output >  Minor adjustment of the X axis label position. 28 October 2010. DWF.</span> <span class= code-output >  Add the ability to change the label character size and thickness via the normal</span> <span class= code-output >    XCHARSIZE and XTHICK keywords you would use for a plot. 3 Dec 2010. DWF.</span> <span class= code-output >  Fixed a couple of typos, added ADDCMD, CHARSIZE, LAYOUT and WINDOW keywords. 2 Feb 2011. DWF.</span> <span class= code-output >  Added the ability to send the output directly to a file via the OUTPUT keyword. 9 Dec 2011, DWF.</span> <span class= code-output >  PostScript, PDF, and Imagemagick parameters can now be tailored with cgWindow_SetDefs. 14 Dec 2011. DWF.</span> <span class= code-output >  Added XLOCATION and WIDTH keywords. 5 June 2012. DWF.</span> <span class= code-output >  The XCharSize keyword was not being used correctly. 2 July 2013. DWF.</span>       Copyright (c) 2009, Fanning Software Consulting, Inc.      Here is an example, using data from the Michaelson-Morley speed of light experiment,     in which they made five experiments of 20 measurements of the speed of light each.     The data can be downloaded from here: <span class= code-output >  http://www.idlcoyote.com/misc/mm_data.dat</span>     Here are the IDL commands to read the data and produce a box plot of it: <span class= code-output >   OpenR, 1, Find_Resource_File('mm_data.dat')</span> <span class= code-output >   header = Strarr(2)</span> <span class= code-output >   Readf, 1, header</span> <span class= code-output >   data = Intarr(5, 20)</span> <span class= code-output >   Readf, 1, data</span> <span class= code-output >   Close, 1</span> <span class= code-output >   cgBoxPlot, data, XTITLE='Experiment Number', YTITLE='Speed of Light'</span>     Here is an example that produces a low, medium, and high box for each of     six experiments and plots them: <span class= code-output >    data = fltarr(18, 40)</span> <span class= code-output >    index = indgen(6)*3</span> <span class= code-output >    for j=0,5 do data[index[j],*] = Randomu(seed, 40)*6</span> <span class= code-output >    index = index+1</span> <span class= code-output >    for j=0,5 do data[index[j],*] = Randomu(seed, 40)*10</span> <span class= code-output >    index = index+1</span> <span class= code-output >    for j=0,5 do data[index[j],*] = Randomu(seed, 40)*15</span> <span class= code-output >    cgPlot, [0,1], /nodata, yrange=[0,16], xrange=[0,19], $</span> <span class= code-output >       xtickformat='(A1)', ytitle='Gc(mms-1)', YStyle=1</span> <span class= code-output >    index = indgen(6)*3</span> <span class= code-output >    width = ((!X.CRange[1] - !X.Crange[0]) / (20)) * 0.75</span> <span class= code-output >    cgBoxPlot, data[index, *],/overplot, XLOCATION=index+1, WIDTH=width, $</span> <span class= code-output >       BOXCOLOR='rose', /FILLBOX</span> <span class= code-output >    cgBoxPlot, data[index+1, *],/overplot, XLOCATION=index+2, WIDTH=width, $</span> <span class= code-output >       BOXCOLOR='pale green', /FILLBOX</span> <span class= code-output >    cgBoxPlot, data[index+2, *],/overplot, XLOCATION=index+3, WIDTH=width, $</span> <span class= code-output >       BOXCOLOR='goldenrod', /FILLBOX</span> <span class= code-output >    labels = ['AAA', 'BBB', 'CCC', 'DDD', 'EEE', 'FFF']</span> <span class= code-output >    for j=0,5 do cgText, (index+2)[j], -1, labels[j], Alignment=0.5</span>         An article about his program can be found here: <span class= code-output >    http://www.idlcoyote.com/graphics_tips/box_whisker.html</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgboxplot.html#cgBoxPlot_Prepare_Data", "cgBoxPlot_Prepare_Data", 'routine in <a href="coyote/cgboxplot.html">cgboxplot.pro</a>', "cgboxplot.pro", "", "cgBoxPlot_Prepare_Data", " This function prepares the data for display by removing any  missing data values from further consideration.   ", "data        The data to be prepared.  missing_data_value        The missing data value that should be found and removed from the data.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgboxplot.html#cgBoxPlot_Draw", "cgBoxPlot_Draw", 'routine in <a href="coyote/cgboxplot.html">cgboxplot.pro</a>', "cgboxplot.pro", "", "cgBoxPlot_Draw", " Draws the box plot in the display window.   ", "BOXCOLOR       If FILLBOXES is set, the IQR box is filled with this color.  COLOR       A string color name, as appropriate for the cgColor program. The boxplot        will be drawn in this color.  FILLBOXES       Set this keyword to fill the IQR box with a color, specified by BOXCOLOR.  OUTLIERCOLOR       The name of the color the outliers are drawn in. By default, the BoxColor.  OUTLINECOLOR       The color the box outlines are drawn in. By default, the BoxColor if FillBoxes' is        set and Color if not.  STATS       Set this to a named variable that will return an array of structures        for each of the columns of data. The statistics are calculated in this        routine.  WIDTH        The width of the box.  XLOCATION        The x starting location of the box.   thisdata       The data to be draw as a box plot.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgboxplot.html#cgBoxPlot", "cgBoxPlot", 'routine in <a href="coyote/cgboxplot.html">cgboxplot.pro</a>', "cgboxplot.pro", "", "cgBoxPlot", "   This is graphics routine to display a box plot, also known as a box and    whisker plot, in IDL direct graphics. The box encloses the interquartile    range (IQR), defined at IQR75-IQR25. The whiskers extend out to the maximum    or minimum value of the data, or to the 1.5 times either the IQR75 or IQR25,    if there is data beyond this range. Outliers are identified with small circles.  ", "ADDCMD       Set this keyword to add the command to the resizeable graphics window cgWindow.  AXISCOLOR       A string color name, as appropriate for the cgCOLOR program.        By default, the same as the COLOR keyword. Used only if OVERPLOT        keyword is not set.  BACKGROUND_COLOR       A string color name, as appropriate for the cgColor program.        Used only if OVERPLOT keyword is not set.  BOXCOLOR       If FILLBOXES is set, the IQR box is filled with this color.  CHARSIZE       Set this to the character size to use on the plot. If undefined, uses        the value of cgDefCharsize().  COLOR       A string color name, as appropriate for the cgColor program. The boxplot        will be drawn in this color.  FILLBOXES       Set this keyword to fill the IQR box with a color, specified by BOXCOLOR.  LABELS       A string array of the same length as the number of columns of data.        The boxplots will be labeled with these labels along the X axis.        Used only if OVERPLOT keyword is not set.  LAYOUT       This keyword specifies a grid with a graphics window and determines where the        graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].        The grid is determined by the number of columns (ncolumns) by the number of        rows (nrows). The location of the graphic is determined by the third number. The        grid numbering starts in the upper left (1) and goes sequentually by column and then        by row.  MISSING_DATA_VALUE       Set this keyword to a value that will be used to identify missing data.        Missing data is not used in the calculations of the box plot.  OUTFILENAME       If the Output keyword is set, the user will be asked to supply an output        filename, unless this keyword is set to a non-null string. In that case, the        value of this keyword will be used as the filename and there will be no dialog        presented to the user.  OUTLIERCOLOR       The name of the color the outliers are drawn in. By default, the BoxColor.  OUTLINECOLOR       The color the box outlines are drawn in. By default, the BoxColor if FillBoxes' is        set and Color if not.  OUTPUT       Set this keyword to the type of output desired. Possible values are these: <span class= code-output >    'PS'   - PostScript file</span> <span class= code-output >    'EPS'  - Encapsulated PostScript file</span> <span class= code-output >    'PDF'  - PDF file</span> <span class= code-output >    'BMP'  - BMP raster file</span> <span class= code-output >    'GIF'  - GIF raster file</span> <span class= code-output >    'JPEG' - JPEG raster file</span> <span class= code-output >    'PNG'  - PNG raster file</span> <span class= code-output >    'TIFF' - TIFF raster file</span>        Or, you can simply set this keyword to the name of the output file, and the type of        file desired will be determined by the file extension. If you use this option, the        user will not be prompted to supply the name of the output file.         All raster file output is created through PostScript intermediate files (the        PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed        to produce anything other than PostScript output. (See cgPS2PDF and PS_END for        details.) And also note that you should NOT use this keyword when doing multiple        plots. The keyword is to be used as a convenient way to get PostScript or raster        output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  OVERPLOT       If this keyword is set, the boxplots will be overdrawn on the current        set of axes. The X axis will be presumed to be scaled from 0 to 1 more        than the number of columns in data.  ROTATE       Set to a value between -90 and 90 degree. The labels will be rotated this        amount. Positive values rotate in CCW fashion, negative values in CW fashion.  STATS       Set this to a named variable that will return an array of structures        for each of the columns of data. The structure will be defined as        this:             struct = { Median:0.0D, Mean: 0.0D, Min:0.0D, Max:0.0D, $                       Q25:0.0D, Q75:0.0D, IQR:0.0D, SDEV:0.0D, N:0L }         Where  mean  is the median value of the data,  Q25  and  Q75  are the 25th percent        quartile and 75th percent quartile of the data, repectively,  IRG  is the        Interquartile Range, SDEV is the standard deviation, and N is the number of points        used to construct the box plot.  XCHARSIZE       The size of the X axis labels.  XLOCATION       The X location where the data should be plotted. Can be an array the save size as        the first dimension of data. Normally, this is an integer from 1 to the number of        boxplots that are on the final plot.  XTHICK       The thickness of the X axis labels.  WIDTH        The  width  of each box plot in data units. The default is calculated from         the X axis range and the number of boxes to draw on the plot like this:         ((!X.CRange[1] - !X.Crange[0]) / (numbox+2.0)) * 0.9.  WINDOW       Set this keyword to display the plot in a resizeable graphics window (cgWindow).  _REF_EXTRA         Any keyword appropriate for the cgPlot command is also accepted by keyword          inheritance.  data       A two-dimensional array. The data for each box plot will be in        the columns of the data array. There will be one box plot drawn        for each column in the data array. The maximum column size is 28.        As an alternative, data can be a pointer array, in which case        there will be one box plot drawn for each valid pointer in the array.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgcbar2kml.html", "cgcbar2kml.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcbar2kml.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcbar2kml.html#cgCBar2KML", "cgCBar2KML", 'routine in <a href="coyote/cgcbar2kml.html">cgcbar2kml.pro</a>', "cgcbar2kml.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgCBar2KML", " This program creates a KML file that can be opened in Google Earth to display a  color bar as a ScreenOverlay. Screen overlays are images that are displayed in  a fixed location on the Google Earth display. A corresponding color bar image file is  produced. The KML and color bar image file must be in the same directory to use them with  Google Earth. In general, any keyword used for horizontal color bars in cgColorbar can  be used with this program. The colorbar image is made from a PostScript intermediate file, which  means ImageMagick must be installed on your computer and available to IDL to run this program  successfully. Please see IDL Output for Web Display  for details.      ", "ADDTOFILE       If this keyword contains a cgKML_File object, the image is added to the file        as a &lt;ScreenOverlay&gt; element and a separate KML file is not created. In other        words, the Filename keyword is ignored and the image file created takes its        name from the cgKML_File object.  BACKGROUND       The background color for the color bar.  BOTTOM       The lowest color index of the colors to be loaded in the color bar.  BREWER         This keyword is used only if the CTIndex keyword is used to select a color table number.          Setting this keyword allows Brewer color tables to be used.  CHARPERCENT       A value from 0.0 go 1.0 that is multiplied by the CHARSIZE to produce        the character size for the color bar. This value is only used if CHARSIZE is        undefined. This keyword is primarily useful for using color bars in resizeable        graphics windows (cgWindow).  CHARSIZE       The character size of the color bar annotations. Default is cgDefCharsize()*charPercent.  CLAMP        A two-element array in data units. The color bar is clamped to these         two values. This is mostly of interest if you are  window-leveling          an image. The clamp is set to the  window  of the color bar.         Normally, when you are doing this, you would like the colors outside         the  window  to be set to a neutral color. Use the NEUTRALINDEX keyword         to set the netural color index in the color bar. (See the Examples section         for more information.)  COLOR        The name of the color to use for color bar annotations. Ignored unless passed         the name of a cgColor color. The default value is to use the ANNOTATECOLOR.  CTINDEX         The index number of a color table. The Brewer and Reverse keywords will be checked          to see how to load the color table into the Palette keyword. This keyword will take          precidence over any colors that are loaded with the Palette keyword.  DESCRIPTION       A string that is used to describe the image in the Google Earth interface.  DISCRETE         Set this keyword to configure certain properties of the color bar to make          discrete color blocks for the color bar. This works best if you are using          a handful of colors in the color bar (e.g, 8-16).  DIVISIONS         The number of divisions to divide the bar into. There will          be (divisions + 1) annotations. The default is 0 if using the          default color bar formatting, which allows the plot command to          determine how many divisions to make. Otherwise, if you are specifying          some other format for the tick labels, the default number of divisions          is six.  DRAWORDER        The drawing order of image overlay. The first order is 0. Images with a higher         order are drawn on top of images with a lower order.  FILENAME        The name of the KML file that will be created. The image file will have the same name,         but with a *.png file extension. The KML file and the image file will be created in the         same directory.  FORMAT       The format of the color bar annotations. Default is   . Note that the        formatting behaviour can change, depending up values for the keywords        RANGE and DIVISIONS. If you prefer to let the IDL Plot command determine        how the color bar labels are formatted, set the format to a null string and        set the DIVISIONS keyword to 0. Note the difference in these two commands: <span class= code-output >   cgColorbar, Range=[18,125], Position=[0.1, 0.8, 0.9, 0.85]</span> <span class= code-output >   cgColorbar, Range=[18,125], Position=[0.1, 0.7, 0.9, 0.75], Divisions=0</span>  KMZ        Set this keyword to move the KML file and support files to a KMZ compressed file.         Note that this capability is ONLY available in versions of IDL starting with version 8.0.  LOCATION       A two-element array giving the location of the top-left corner of the        color bar in normalized coordinates from the upper-left of the Google Earth        display screen. Default is [0.025, 0.975].  MAXRANGE       The maximum data value for the color bar annotation. Default is NCOLORS.  MINOR       The number of minor tick divisions.  MINRANGE       The minimum data value for the bar annotation.  NCOLORS       This is the number of colors in the color bar.  NEUTRALINDEX       This is the color index to use for color bar values outside the        clamping range when clamping the color bar with the CLAMP keyword.        If this keyword is absent, the highest color table value is used        for low range values and the lowest color table value is used        for high range values, in order to provide contrast with the        clamped region. (See the Examples section for more information.)  OOB_FACTOR       The default is to make the length of the out-of-bounds triangle the        same distance as the height (or width, in the case of a vertical        color bar) of the color bar. If you would prefer a shorted triangle length,        set this keyword to a value less than zero (e.g., 0.5). If you prefer a        longer length, set this keyword to a value greater than zero. The  standard         length will be multiplied by this value.  OOB_HIGH       The name of an out-of-bounds high color. This color will be represented        by a triangle on the right or top of the color bar. If the color is        a string byte value (e.g.,  215 ), then this color in the current color        table is used. The color can also be a three-element color triple        (e.g., [240, 200, 65]).  OOB_LOW       The name of an out-of-bounds low color. This color will be represented        by a triangle on the left or bottom of the color bar. If the color is        a string byte value (e.g.,  215 ), then this color in the current color        table is used. The color can also be a three-element color triple        (e.g., [240, 200, 65]).  PALETTE       A color palette containing the RGB color vectors to use for the color        bar. The program will sample NCOLORS from the color palette.  PLACENAME        This is the &lt;name&gt; element in a Feature object. It is user-defined text that is used as         the label for an object in Google Earth.  RANGE       A two-element vector of the form [min, max]. Provides an alternative        and faster way way of setting the MINRANGE and MAXRANGE keywords.  REVERSE       An alternative keyword name (one I can actually remember!) for the INVERTCOLORS keyword.        It reverses the colors in the color bar.  TCHARSIZE       The title size. By default, the same as Charsize. Note that this keyword is        ignored for vertical color bars unless the title location (TLocation) is on        the opposite side of the color bar from the color bar labels. This is a consequence        of being upable to determine the length of color bar labels programmatically in this        orientation.  TICKINTERVAL       Set this keyword to the interval spacing of major tick marks. Use this keyword in        place of XTickInterval or YTickInterval keywords.  TICKLEN       Set this keyword to the major tick length desired. Default is 0.25. Setting this        keyword to a value greater than or equal to 0.5 will result in major tick marks        extending the width of the color bar. Note that setting this keyword to 0.3 or        greater will result in minor tick mark lengths being set to 0.01, which is almost        too small to be seen. All direct graphics tick marks act in this (strange!) way.  TICKNAMES       A string array of names or values for the color bar tick marks.  TITLE       This is title for the color bar. The default is to have no title.  XLOG       Set this keyword to use logarithmic scaling for the colorbar data range.  XTICKINTERVAL       This keyword is trapped, but unused. Please use theTickInterval keyword instead.  XTITLE        This keyword is ignored. Use the Title keyword to set a title for the color bar.  WIDTH       The width, in pixels, of the colorbar image that is created.  _REF_EXTRA         Any keyword appropriate KML screen overlay objects is allowed.   ", "Graphics FileIO Maps", "     Change History: <span class= code-output >  Written, 30 October 2012 by David W. Fanning.</span> <span class= code-output >  Added DRAWORDER keyword and fixed a typo concerning MISSING_VALUE. 31 Oct 2012. DWF.</span> <span class= code-output >  Have been writing the absolute path to the image file into the KML file, when I should</span> <span class= code-output >      have been using a relative path. 22 Feb 2013. DWF.</span>       Copyright (c) 2012-2013, Fanning Software Consulting, Inc.      Here is how you can put an AVHRR NDVI image of Africa on a Google Earth display     with a color bar: <span class= code-output >  ;; Download the image file from the Coyote web page.</span> <span class= code-output >  netObject = Obj_New('IDLnetURL')</span> <span class= code-output >  url = 'http://www.idlcoyote.com/data/AF03sep15b.n16-VIg.tif'</span> <span class= code-output >  returnName = netObject -&gt; Get(URL=url, FILENAME='AF03sep15b.n16-VIg.tif')</span> <span class= code-output >  Obj_Destroy, netObject</span>  <span class= code-output >  ;; Create the image overlay KML file.</span> <span class= code-output >  kmlFile = Obj_New('cgKML_File', 'avhrr_ndvi_cb.kml')</span> <span class= code-output >  cgLoadCT, 11, /Brewer, /Reverse, RGB_Table=palette</span> <span class= code-output >  map = cgGeoMap('AF03sep15b.n16-VIg.tif', Image=image)</span> <span class= code-output >  scaledImage = BytScl(image &gt; 0)</span> <span class= code-output >  cgImage2KML, scaledImage, map, $</span> <span class= code-output >     Palette=palette, Missing_Value=0, $</span> <span class= code-output >     Description='AVHRR NDVI Data from Africa', $</span> <span class= code-output >     PlaceName='AVHRR Africa', $</span> <span class= code-output >     AddToFile=kmlFile</span> <span class= code-output >  cgCBar2KML, Palette=palette, Range=[0,9400], $</span> <span class= code-output >     Title='NDVI Index', $</span> <span class= code-output >     Description='AVHRR NDVI Color Bar', $</span> <span class= code-output >     PlaceName='NDVI Color Bar', $</span> <span class= code-output >     AddToFile=kmlFile</span> <span class= code-output >  kmlFile -&gt; Save</span> <span class= code-output >  kmlFile -&gt; Destroy</span>  <span class= code-output >  ;; Start Google Earth and open the KML file you just created.</span>     The output should look like the figure above.      If you just wish to create a KML file with a color bar, you can do this: <span class= code-output >  cgCBar2KML, Filename='colorbar.kml', CTIndex=5, Title='Test Color Bar'</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcentertlb.html", "cgcentertlb.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcentertlb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcentertlb.html#cgCenterTLB", "cgCenterTLB", 'routine in <a href="coyote/cgcentertlb.html">cgcentertlb.pro</a>', "cgcentertlb.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgCenterTLB", " This is a utility routine to position a widget program on the display at an arbitrary  location. By default the widget is centered on the display.   ", "CenterOnTLB      If provided, the center of the widget is positioned at       the center of the widget whose ID is provided here.  Device       Normally, the x and y parameters are specified in normalized        coordinates. If this keyword is set, they are taken to be in device        coordinates.  NoCenter       By default, the center of the widget is positioned at the        location specified by the x and y parameters.  If NoCenter is set        to a non-zero value, then the upper left corner of the widget        is postioned at the specifed location.   tlb       The top-level base identifier of the widget program. This must        be a valid widget ID.  x       Set this equal to a normalized position for the center        of the widget as measured from the left-hand side of the screen.        The default value is 0.5 (the center)  Setting this equal to 1.0        places the widget at the far right-hand side of the screen.  y       Set this equal to a normalized position for the center        of the widget as measured from the bottom of the screen.        The default value is 0.5 (the center) Setting this equal to 1.0        places the widget at the top of the screen.   ", "Utilities", "    Change History: <span class= code-output >  Written by:  Dick Jackson, 12 Dec 98.</span> <span class= code-output >  Modified to use device-independent Get_Screen_Size</span> <span class= code-output >       function. 31 Jan 2000. DWF.</span> <span class= code-output >  Added x, y, NOCENTER and run-off protection. 26 Jan 2001. BT.</span> <span class= code-output >  Added a maximum value of 1280 for X screen size. This helps</span> <span class= code-output >       center the widget on a single monitor when using dual</span> <span class= code-output >       monitor settings with some graphics cards. 3 Feb 2003. DWF.</span> <span class= code-output >  Added DEVICE keyword. 4 January 2006. DWF.</span> <span class= code-output >  Added CenterOnTLB keyword. 7 March 2011. DJ.</span> <span class= code-output >  Renamed cgCenterTLB and retired the previous CenterTLB program. 29 Oct 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgchangemapprojection.html", "cgchangemapprojection.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgchangemapprojection.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgchangemapprojection.html#cgChangeMapProjection", "cgChangeMapProjection", 'routine in <a href="coyote/cgchangemapprojection.html">cgchangemapprojection.pro</a>', "cgchangemapprojection.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgChangeMapProjection", " This function warps a map projected image from one map projection to another, using  Map_Proj_Image to do the warping. Useful in general, it is used specifically to  warp map projected images into the Equirectangular map projection with a WGS 84 ellipsoid  that is used by Google Earth. See the program cgImage2KML to see how it is used.   ", "BOUNDARY       A four-element array specifying the Cartesian (XY) coordinates of the input        image range, in the form [xmin, ymin, xmax, ymax]. If this parameter is not        present, the boundary will be obtained from the MapIn map coordinate object.        On output, this variable will contain the Cartesian boundary of the warped image.  BILINEAR       Set this keyword to warp the image with bilinear interpolation. The default is        to do nearest neighbor interpolation.  LATLONBOX       A four-element float array containing the boundaries of the warped image in        the [north, south, east, west] form preferred by Google Earth. Listed as degrees.  MAPOUT       A map coordinate object (cgMap) describing the map projection and coordinates of the        warped image. This image will be warped into this map projection. The [XY]Range of        this object will be set to the XYRange of the output image.  MASK       Set this keyword equal to a named variable that will contain a byte array of the same        dimensions as the output image, containing a mask of the “good” values. Values in the output        image that were set to Missing (that is, the values were off the map) will have a mask value        of 0, while all other mask values will be 1.  MISSING       Set this keyword equal to an integer value to be used for pixels that fall outside of        the valid map coordinates. The default value is 0.  XYRANGE       The Cartesian (XY) coordinates associated with the output image. These are the map image        boundaries of the output image.   image       Any 2D or true-color image with or without an alpha channel. This image will        be warped to the output map projection (mapOut).  mapIn       A map coordinate object (cgMap) describing the map projection and coordinates of the        input image that is to be warped.   ", "Map Projections Utilities", "     Change History: <span class= code-output >  Written, 30 October 2012 by David W. Fanning.</span> <span class= code-output >  Fixed a problem with a TRANSPOSE command for true-color images. Bad logic. 4 Jan 2012. DWF.</span> <span class= code-output >  Fixed a problem in which Map_Proj_Image was not handling true-color image warping correctly</span> <span class= code-output >     and also a problem with handling missing values passed from cgImage2KML correctly. 20 Feb 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      To prepare a GeoTiff file for creating a KML overlay on Google Earth: <span class= code-output >  netObject = Obj_New('IDLnetURL')</span> <span class= code-output >  url = 'http://www.idlcoyote.com/data/AF03sep15b.n16-VIg.tif'</span> <span class= code-output >  returnName = netObject -&gt; Get(URL=url, FILENAME=AF03sep15b.n16-VIg.tif')</span> <span class= code-output >  Obj_Destroy, netObject</span> <span class= code-output >  map = cgGeoMap('AF03sep15b.n16-VIg.tif')</span> <span class= code-output >  googleMap = Obj_New('cgMap', 'Equirectangular', Ellipsoid='WGS 84')</span> <span class= code-output >  warpedImage = cgChangeMapProjection(image, map, MAPOUT=googleMap)</span>      An image warped into the output map projection is returned.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcheckforsymbols.html", "cgcheckforsymbols.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcheckforsymbols.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcheckforsymbols.html#cgCheckForSymbols", "cgCheckForSymbols", 'routine in <a href="coyote/cgcheckforsymbols.html">cgcheckforsymbols.pro</a>', "cgcheckforsymbols.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgCheckForSymbols", " The purpose of this funciton is to check a string for symbols, encased in escape  characters, that should be revolved with cgSymbol. The cgSymbol name will appear  with the characters  $\  prepended to the name, and the character  $  appended. All  Greek characters and other symbols supported by cgSymbol are allowed. Also,  subscripts and superscripts are allowed: <span class= code-output >   $\upTEXT$ : Raise the text in TEXT to superscript level and reduce character size by 62%.</span> <span class= code-output >   $\extTEXT$ : Raise the text in TEXT to superscript level and reduce character size by 44%.</span> <span class= code-output >   $\downTEXT$ : Lower the text in TEXT to subscript level and reduce character size by 62%.</span> <span class= code-output >   $\subTEXT$ : Lower the text in TEXT to subscript level and reduce character size by 44%.</span>   ", "aString       The string that should be searched for cgSymbol values.   ", "Utilities", "     Change History: <span class= code-output >  Written by David W. Fanning, 27 July 2012.</span> <span class= code-output >  Modified to check for superscript and subscript codes. 9 November 2012. DWF.</span> <span class= code-output >  Modified to allow the user to use the TexToIDL program from embedded codes.</span> <span class= code-output >      To use a right arrow, for example, aString = '5 $\tex\rightarrow$ 3'</span> <span class= code-output >  Added the ability to use Greek letters as subscripts and superscripts. See</span> <span class= code-output >      the examples for details. 21 April 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      To create a plot that uses the Greek mu character on the X axis and     the Angstrom squared symbol on the Y axis: <span class= code-output >  cgPlot, cgDemoData(1), XTitle='Length ($\mu$M)', YTitle='Distance ($\Angstrom$$\up2$)'</span>     It is possible to use Greek characters as superscripts and subscripts. Do so by     prepending the Greek character with  \\  inside the normal superscript or subscript     notation. For example, to use lambda as an exponent to the Greek character Omega, you     can type this: <span class= code-output >  cgPlot, cgDemoData(1), XTitle='$\Omega$$\exp\\lambda$', Charsize=2.0</span>     To use lambda as a subscript, type this:          cgPlot, cgDemoData(1), XTitle='$\Omega$$\sub\\lambda$', Charsize=2.0      The program has been modified to accept TexToIDL tokens. They must be preceed by     a  \tex  prefix. For example, to draw a right arrow between 5 and 3, you would     construct the embedded string like this: <span class= code-output >    aString = '5 $\tex\rightarrow$ 3'</span> <span class= code-output >    cgText, 0.5, 0.5, /Normal, Align=0.5, Charsize=3.0, aString</span>      The modified string with the cgSymbol code embedded in place of the     escaped symbol name.   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgcheckforsymbols.html", "cgcheckforsymbols.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgcheckforsymbols.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgcheckforsymbols.html#cgCheckForSymbols", "cgCheckForSymbols", 'routine in <a href="idlastro/coyote/cgcheckforsymbols.html">cgcheckforsymbols.pro</a>', "cgcheckforsymbols.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgCheckForSymbols", " The purpose of this funciton is to check a string for symbols, encased in escape  characters, that should be revolved with cgSymbol. The cgSymbol name will appear  with the characters  $\  prepended to the name, and the character  $  appended. All  Greek characters and other symbols supported by cgSymbol are allowed.   ", "aString       The string that should be searched for cgSymbol values.   ", "Utilities", "     Change History: <span class= code-output >  Written by David W. Fanning, 27 July 2012.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      To create a plot that uses the Greek mu character on the X axis and     the Angstrom symbol on the Y axis: <span class= code-output >  cgPlot, cgDemoData(1), XTitle='Length ($\mu$M)', YTitle='Distance ($\Angstrom$)'</span>      The modified string with the cgSymbol code embedded in place of the     escaped symbol name.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcleanup.html", "cgcleanup.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcleanup.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcleanup.html#cgCleanUp", "cgCleanUp", 'routine in <a href="coyote/cgcleanup.html">cgcleanup.pro</a>', "cgcleanup.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgCleanUp", " This procedure cleans-up and/or destroys any open graphics or widget windows on the display.   ", "ALL       Set this keyword if you wish to clean up windows of all types.  CG       Set this keyword if you wish to clean up only Coyote Graphics windows.  DG       Set this keyword if you wish to clean up only Direct Graphics windows.  FG       Set this keyword if you wish to clean up only Function Graphics windows.   ", "Utility", "     Written, 6 October 2012.        Copyright (c) 2012, Fanning Software Consulting, Inc.      For example, to destroy all windows on the display:   <span class= code-prompt >IDL&gt;</span> cgCleanup  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcliptomap.html", "cgcliptomap.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcliptomap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcliptomap.html#cgCliptoMap", "cgCliptoMap", 'routine in <a href="coyote/cgcliptomap.html">cgcliptomap.pro</a>', "cgcliptomap.pro", "     FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgCliptoMap", " Allows an image or geoTiff file to be clipped or subset to a map projected boundary.   ", "LATLONBOX         A four-element array representing the boundary of the output image in          the Google Map preferred form of [north, south, east, west] in decimal          degrees.  MAP         A map coordinate object (cgMap) that maps or georeferences the input image.  OUTBOUNDARY         A four-element array containing the final map boundary of the clipped image.          The boundary will be in XY coordinates (projected meters).  OUTMAP         An output map coordinate object (cgMap) that describes the output image.  OUTPOSITION         A four-element array containing the pixel locations of the output image          in the input image pixel coordinate system: [x0,y0,x1,y1]. In other words,          these are the values used to subset the input image.   imageIn        Either a 2D or true-color image (in which, in both cases, a map coordinate object must be provided with the         MAP keyword) or the name of the GeoTiff file from which an image and a map coordinate object         can be obtained.  boundary        A four-element array containing the map boundary to which the image should be clipped.   ", "Map Utilities", "     Change History: <span class= code-output >  Written, 16 August 2012. DWF.</span> <span class= code-output >  If the absolute value of the maximum of the boundary is LE 360, assume you need to convert</span> <span class= code-output >     from lat/lon space to projected meter space. 23 Aug 2012. DWF.</span> <span class= code-output >  Added MAPOUT and LATLONBOX keywords. 1 Nov 2012. DWF.</span> <span class= code-output >  Added OUTPOSITION keywords. 29 Nov 2012. DWF.</span> <span class= code-output >  I have reason to believe the way I was creating the location vectors and</span> <span class= code-output >     and image subset in this program was causing me to be 1 pixel off in</span> <span class= code-output >     creating the image subset. The algorithm has been tweaked to correct this. 12 Dec 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      The clipped or subsetted image is returned.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html", "cgcmdwindow__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcmdwindow__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "  Creates a  command  window for IDL traditional commands (Plot, Contour,   Surface, etc. or for Coyote Graphics routines, cgPlot, cgContour, cgSurf, etc.).   In addition, the window contents can be saved as PostScript files or as raster image   files. If ImageMagick is installed on your machine, the raster image files can be   created in very high quality from PostScript files. This program can be used in   place of a normal draw widget or as a stand-alone program.    The program is designed to work with any IDL traditional graphics routine   that is a procedure and includes no more than four positional parameters.   Any number of keywords can be used to specify properties of the graphical   output. Any number of graphics commands can be  added  the the window.   Simply use the AddCommand method to add commands.    If your program does not load its own color tables, the color tables in   effect when this program is initiated are used to display the graphics   commands.    To create PostScript output from within the program, your graphics program   has to be written in such a way that it can work properly in the PostScript   device. This means there are no Window commands, WSet commands, and the like   that are not allowed in the PostScript device. Such commands are allowed in   programs, of course, if they are  protected . Usually such protection looks   like this: <span class= code-output >  IF (!D.Flags AND 256) NE 0 THEN Window, ...</span>   The Coyote Graphics program cgDisplay is a good program for opening graphics    windows , because such PostScript protection is built into the program. In a PostScript   device, cgDisplay produces a  window  with the same aspect ratio as the current   display graphics window, which is an aid in producing PostScript output that   looks like the same output in the display window.    Much better looking raster files can be created from the graphics window contents,   if the raster files are created by converting PostScript files to the raster   file. If the ImageMagick  convert  command can be found on your machine, you   will have the option to create raster files using this method. I *highly*   recommend doing so, as fonts and other plot annotation will be of much higher   quality using this method.    This program has been designed to work with other Coyote Graphics routines: cgPlot,   cgContour, cgSurf, and so on, although I expect it to work with any IDL   traditional graphics routine, if the routine is well written.   ", "", "Graphics", "     Change History: <span class= code-output >  Separated from old cgWindow program 22 Jan 2012, by David W. Fanning.</span> <span class= code-output >  Fixed a typo in PackageCommand method that prevented extra keywords from</span> <span class= code-output >     being collectd. 26 Jan 2012. DWF.</span> <span class= code-output >  Fixed a problem with MULTI keyword. 31 Jan 2012. DWF.</span> <span class= code-output >  Added a COPY method. 7 Feb 2012. DWF.</span> <span class= code-output >  Fixed a problem with input filenames in the AutoRasterFile method. 22 Feb 2012. DWF.</span> <span class= code-output >  Modified Draw_Widget creation routine to account for events that were added in</span> <span class= code-output >     different versions of IDL. 23 Feb 2012. DWF.</span> <span class= code-output >  Added ability to use IM_WIDTH keyword to set the width of raster file output</span> <span class= code-output >     created with ImageMagick. 3 April 2012. DWF.</span> <span class= code-output >  Forgot to specify the GROUP_LEADER when calling PS_START. Caused PSConfig to</span> <span class= code-output >     run though its block when cgWindow was called from a blocking widget program.</span> <span class= code-output >     5 June 2012. DWF.</span> <span class= code-output >  Added the ability to save the file name and directory of the last output file, so</span> <span class= code-output >      that subsequent file saves can use that last name and directory as a starting</span> <span class= code-output >      default filename. 11 July 2012. DWF.</span> <span class= code-output >  In decompling cgWindow from cgCmdWindow, I accidentally named the WASPECT keyword ASPECT. Restored</span> <span class= code-output >       original name in this version. 13 July 2012. DWF.</span> <span class= code-output >  I added a new method, ReplaceEscapeSequences, that can evaluate escape sequences in</span> <span class= code-output >       string parameters and keywords to call the appropriate cgSymbol value at run-time.</span> <span class= code-output >       This eliminates the need for alternate keywords. 27 July 2012. DWF.</span> <span class= code-output >  Added WDestroyObjects keyword to destroy objects parameters, if needed. 11 November 2012. DWF.</span> <span class= code-output >  Not adding IM_WIDTH parameter from cgWindow_GetDefs. 19 November 2012. DWF.</span> <span class= code-output >  Modified ReplaceEscapeSequence method to use cgCheckForSymbols. 24 November 2012. DWF.</span> <span class= code-output >  Modified to allow keywords to turn off messages from PS_START and PS_END with keywords. 27 November 2012. DWF.</span> <span class= code-output >  The output filename was not specified correctly when making PDF file automatically. Fixed. 2 Dec 2012. DWF.</span> <span class= code-output >  Renamed the MULTI keyword to WMULTI, as it was suppose to be. 11 Feb 2013. DWF.</span> <span class= code-output >  Misspelled keyword in PackageCommand method. 21 February 2013. DWF.</span> <span class= code-output >  Modified GUI so there is only one Raster Image File choice, depending on if ImageMagick is</span> <span class= code-output >     installed. 21 May 2013. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.   ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::Init", "cgCmdWindow::Init", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::Init", " This method initializes the object that is at the heart of the Coyote Graphics system.  It allows you to both configure the draw widget for events and to load a command into  the command window.   ", "AltPS_Keywords       A structure containing alternative keyword names (as tags) and values for        those keywords to be used when the current device is the PostScript device.        See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the examples        below for details on how to use this keyword.  AltPS_Params       A structure containing alternative parameter values to be used when        the current device is the PostScript device. Structure names are restricted        to the names  P1 ,  P2 ,  P3  and  P4 to correspond to the equivalent positional        parameter. See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the        examples below for details on how to use this keyword.  Background       The background color of the window. Specifying a background color        automatically sets the WErase keyword.  Button_Events       Set this keyword to turn button events on for the draw widget.  CmdDelay       If this keyword is set to a value other than zero, there will be a        delay of this many seconds between command execution. This will permit         movies  of command sequences to be displayed.  Command       The graphics procedure command to be executed. This parameter        must be a string and the the command must be a procedure. Examples        are 'Surface', 'Contour', 'Plot', 'cgPlot', cgContour, etc.  Drop_Events       Set this keyword to turn drop events on for the draw widget.  EraseIt       Set this keyword to cause the window to be erased before graphics commands        are drawn. This may need to be set, for example, to display images.  Event_Handler        The name of an event handler procedure to accept events from         the draw widget. Write the event handler procedure with two         positional parameters. The first will be the event structure         returned from the draw widget. The second will be the cgCmdWindow         object reference (i.e., self) to allow you to manipulate the         command window.  Group_Leader       The identifier of a widget to serve as a group leader for this program.        If the group leader is destroyed, this program is also destroyed. Used        when calling this program from another widget program.  Keyboard_Events       Set this keyword to turn keyboard events on for the draw widget.  Method       Set this keyword if the command is an object method call rather than a        procedure call. If this keyword is set, the first positional parameter, p1,        must be present and must be a valid object reference.  Motion_Events       Set this keyword to turn motion events on for the draw widget.  OXMargin       A two-element array indicating the left and right X outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  OYMargin       A two-element array indicating the bottom and top Y outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  P1       The first positional parameter appropriate for the graphics command.  P2       The second positional parameter appropriate for the graphics command.  P3       The third positional parameter appropriate for the graphics command.  P4       The fourth positional parameter appropriate for the graphics command.  ReplaceCmd       Set this keyword to replace a graphics command from an cgWindow.        If CmdIndex is undefined, *all* commands in the window are replaced. Use        WinID to identify the cgWindow you are interested in. If WinID is        undefined, the last cgWindow created is used for the replacement.  Storage       Any user-defined IDL variable will be stored in the object storage location.        Defined here for convenience. Same as Storage keyword for the SetProperty method.  Tracking_Events       Set this keyword to turn tracking events on for the draw widget.  WAspect       Set this keyword to the aspect ratio you would like the window to have.        The aspect ratio is calculated as (ysize/xsize). Must be a float value.        If this keyword is set, the window will maintain this aspect ratio,        even when it is resized.  WDestroyObjects       If this keyword is set, and any of the input parameters p1-p4 is an object,        the object parameter will be destroyed when the window is destroyed.  Wheel_Events       Set this keyword to turn wheel events on for the draw widget.  WMulti        Set this keyword in exactly the same way you would set the !P.Multi keyword.         It will allow you to display multi-plots in the cgWindow graphics window.  WTitle       The title of the graphics window if the program creates its own top-level        base widget. A window index number is appended to the title so multiple cgWindow        programs can be selected. Also used to register the widget program and as the        title of the object when it is stored.  WXPos       The x offset in device coordinates of the window from the upper-left corner of        the display, if the program creates its own top-level base. Otherwise, this keyword        is ignored.  WXSize       The x size in device coordinates of the graphics window.  WYPos       The y offset in device coordinates of the window from the upper-left corner of        the display, if the program creates its own top-level base. Otherwise, this keyword        is ignored.  WYSize       The y size in device coordinates of the the graphics window.  _Extra       The  extra  keywords for the command that is being added to the window.  parent       The parent base widget for this draw widget object. If not defined,        the program will create its own top-level base widget.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindowDrawRealize", "cgCmdWindowDrawRealize", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindowDrawRealize", " This program is called when the draw widget is realized. The purpose is to find  and set the window index number in the program, store the object reference on  an external linked list so it can found again later, and to execute the loaded  commands.   ", "drawID         The widget identifier of the draw widget.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindowKillNotify", "cgCmdWindowKillNotify", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindowKillNotify", " This program is called when the draw widget is destroyed. The purpose  is to clean up the object.   ", "drawID         The widget identifier of the draw widget.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::Cleanup", "cgCmdWindow::Cleanup", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::Cleanup", " The cleanup method for the cgCmdWindow object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command::CreateCommandStruct", "cgWindow_Command::CreateCommandStruct", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command::CreateCommandStruct", " This procedure builds a command structure and saves the structure  to the main IDL level. Its purpose is to allow the user to work  with restored commands independently of the window interface.   ", "Quiet         If set, the message indicated where the variable was saved          and what its name is is not printed in the IDL command window.  structName         The name of the command structure to be saved at the          main IDL level.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command::Copy", "cgWindow_Command::Copy", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command::Copy", " This procedure makes and returns a copy of a command object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command::Get_Keywords", "cgWindow_Command::Get_Keywords", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command::Get_Keywords", " This procedure returns the keyword in a command object, if there  are any keywords.   ", "HAS_KEYWORDS         If set to 1, the function returned keywords. If set to 0,          there were no keywords in the command to return.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command::Draw", "cgWindow_Command::Draw", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command::Draw", "", "SUCCESSKEYWORDS", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command::EvaluateKeywords", "cgWindow_Command::EvaluateKeywords", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command::EvaluateKeywords", " This method replaces stored keyword values with alternative keyword values, if they  are available. The return variable is a list of the keywords with the  alternative values substituted for the stored values.   ", "SUCCESS         If the command executed successfully, return a 1. Otherwise          return a 0.  keywords       The list of input keywords.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command::List", "cgWindow_Command::List", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command::List", " This method lists the current command by printing a representation  of the command in the command log window.   ", "prefix       A prefix for the printed command (e.g., an index number, etc.).   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command::ReplaceEscapeSequences", "cgWindow_Command::ReplaceEscapeSequences", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command::ReplaceEscapeSequences", " This method searches for escape sequences in text keywords and replaces  them if necessary with the particular token from cgSymbol. To create an  micrometer symbol, for example, you might specify an XTITLE keyword like  this: XTITLE='Length ($\mu$M)'. The symbol name should be proceeded by  a  $\  and ended with a  $ .   ", "aString        Either a scalar or array of strings, or a structure of keyword parameters.         If a structure, then the ReplaceEscapeSequences method is called recursively.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command::Cleanup", "cgWindow_Command::Cleanup", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command::Cleanup", " The clean-up routine for the command object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command::INIT", "cgWindow_Command::INIT", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command::INIT", " The initialization routine for the command object.   ", "ALTPS_KEYWORDS       A structure of alternative keyword names and values to be used        when the PostScript device is the current graphics device.  ALTPS_PARAMS       A structure of alternative parameters and values to be used        when the PostScript device is the current graphics device.  COMMAND       The command that is being stored in the command object.  DESTROYOBJECTS       If this keyword is set, and any of the input parameters p1-p4 is an object,        the object parameter will be destroyed when the window is destroyed.  KEYWORDS       A structure containing keyword:value pairs to be executed        with the command.  P1       The first positional parameter of the command being stored        in the structure.  P2       The second positional parameter of the command being stored        in the structure.  P3       The third positional parameter of the command being stored        in the structure.  P4       The fourth positional parameter of the command being stored        in the structure.  TYPE       The type of command. 0 indicates a procedure. 1 indicates an object method.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_ID__Define", "cgWindow_ID__Define", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_ID__Define", " The structure definition module for structure that is stored  on the window manager list.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow_Cleanup", "cgCmdWindow_Cleanup", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow_Cleanup", " The clean-up method for the cgCmdWindow object.  ", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgWindow_Command__Define", "cgWindow_Command__Define", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgWindow_Command__Define", " The class definition module for the cgWindow_Command object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::AddCommand", "cgCmdWindow::AddCommand", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::AddCommand", " Adds a command object of class cgWINDOW_COMMAND to the command list  maintained by the window.   ", "INDEX         The index number of where the command should be added in the command list.          The command is added to the end of the command list by default.  command         A command object of class cgWINDOW_COMMAND.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::AutoPostScriptFile", "cgCmdWindow::AutoPostScriptFile", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::AutoPostScriptFile", " Provides a programmatic way to create a PostScript file from the window.  Call by setting the CREATE_PS keyword with cgControl.   ", "filename         The name of the PostScript file to generate.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::AutoRasterFile", "cgCmdWindow::AutoRasterFile", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::AutoRasterFile", " Provides a programmatic way to create a raster file from the window.  Call by setting the create_png, etc. keyword with cgControl.   ", "filetype         The type of raster file (e.g., PNG, JPEG, etc.).  filename         The name of the output file.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::Copy", "cgCmdWindow::Copy", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::Copy", " This method copies the contents of the draw widget to the current graphics window using  the DEVICE COPY method. The DEVICE COPY command looks like this: <span class= code-output >  DEVICE, COPY=[origin[0], origin[1], extent[0], extent[1], destination[0], destination[1], self.wid]</span>  If the IMAGE keyword is used, the window contents are stored in a band-interleaved image variable  and the window contents are not copied into the current graphics window.   ", "DESTINATION        A two-element array specifying the device coordinates of the lower-left         corner of the copied region in the destination window. By default, [0,0].  EXTENT       A two-element array specifying the number of columns and rows to copy.        If missing, the entire draw widget window is copied. By default, [!D.X_Size, !D.Y_Size].  IMAGE       Set this keyword to a named IDL variable that returns a copy of the draw        widget contents as a band interleaved (MxNx3) image. If this keyword is set        nothing is copied from the window.  ORIGIN       A two-element array specifying the device coordinates of the lower-left        corner of region in the draw widget window to be copied. By default, [0,0].  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::DrawWidgetConfig", "cgCmdWindow::DrawWidgetConfig", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::DrawWidgetConfig", " This method allows you to turn draw widget events on and off and to set  the name of an event handler procedure to accept these widget events.  An event handler procedure must be defined to get the events processed  correctly.   ", "Button_Events         Set this keyword to turn button events on for the draw widget.  Drop_Events         Set this keyword to turn drop events on for the draw widget.  Event_Handler         The name of an event handler procedure to accept events from          the draw widget. Write the event handler procedure with two          positional parameters. The first will be the event structure          returned from the draw widget. The second will be the cgCmdWindow          object reference (i.e., self) to allow you to manipulate the          command window.  Keyboard_Events         Set this keyword to turn keyboard events on for the draw widget.  Motion_Events         Set this keyword to turn motion events on for the draw widget.  Storage         Any user-defined IDL variable will be stored in the object storage location.          Defined here for convenience. Same as Storage keyword for the SetProperty method.  Tracking_Events         Set this keyword to turn tracking events on for the draw widget.  Wheel_Events         Set this keyword to turn wheel events on for the draw widget.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::DrawWidgetEvents", "cgCmdWindow::DrawWidgetEvents", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::DrawWidgetEvents", " This event handler processes draw widget events and sends the events  to a user-defined event handler, if such and event handler exists.  The event handler must be defined to accept two positional parameters.  The first is the event structure returned by the draw widget, and the  second is the cgCmdWindow object reference.   ", "event         An event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::CreatePostScriptFile", "cgCmdWindow::CreatePostScriptFile", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::CreatePostScriptFile", " Sends the window commands to a PostScript file.   ", "event         An event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::DeleteCommand", "cgCmdWindow::DeleteCommand", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::DeleteCommand", " Deletes a command object from the command list maintained by the window.   ", "ALL         If set, all the commands in the command list are deleted.  cmdIndex         The zero-based index of the command to delete. If undefined, the          index of the last command in the window is used.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow_Dispatch_Events", "cgCmdWindow_Dispatch_Events", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow_Dispatch_Events", " All widget events come here and are dispatched to the proper object method.   ", "event         An event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::ExecuteCommands", "cgCmdWindow::ExecuteCommands", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::ExecuteCommands", " This method executes the commands on the command list.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::GetCommandKeyword", "cgCmdWindow::GetCommandKeyword", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::GetCommandKeyword", " This method retrieves the value of a keyword from a particular command,  if it can.   ", "SUCCESS         If the program can successfully get the keyword, this variable will          contain the value 1. Otherwise, it will contain the value 0.  keyword        The name of the keyword you would like to retrieve from the command.  cmdIndex        The index number of the command you wish to retrieve the keyword from.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::GetProperty", "cgCmdWindow::GetProperty", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::GetProperty", " This method retrieves properties from the object.   ", "ADJUSTSIZE         Set this keyword to adjust default character size to the display window size.  BACKGROUND         The background color of the window. Only use if the ERASEIT property is also set.  COMMANDS         A list of the commands stored in the window.  DELAY         Set this keyword to the amount of  delay  you want between commands in the command list.  DIMENSIONS         Set this keyword to a two-element array giving the xsize and ysize          of the draw widget.  ERASEIT         If this property is set, the cgWindow erases with the background color before          displaying the commands in the window's command list.  IM_DENSITY         Set this keyword to the sampling density when ImageMagick creates raster image          file from PostScript outout.  IM_RESIZE         Set this keyword to percentage that the raster image file created my ImageMagick          from PostScript output should be resized.  IM_OPTIONS         Set this keyword to any ImageMagick options you would like to pass along to the          ImageMagick convert command when creating raster image files from PostScript output.  IM_RASTER         Set this keyword to zero to create raster files using the create_png etc. keywords          directly, instead of via ImageMagick.  IM_TRANSPARENT         Set this keyword to allow ImageMagick to create transparent backgrounds when it          makes raster image files from PostScript output.  NOEXECUTECOMMANDS         Set this keyword to 1 to prevent the window from executing the commands and to          0 if you want the window to execute the commands.  MULTI         Set this keyword to the !P.MULTI setting you want to use for the window.          !P.MULTI is set to this setting before command execution, and set back to          it's default value when the commands are finished executing.  PALETTE         Use this keyword to pass in an N-by-3 (or 3-by-N) byte array containing the          R, G, and B vectors of a color table. It is probably easier to use cgLoadCT or          XCOLORS to load color tables for the window, but this is provided as another option.  PDF_PATH         Set this keyword to the name of the path to the Ghostscript command for converting PS to PDF.  PDF_UNIX_CONVERT_CMD         Set this keyword to the name of an alternative UNIX command to convert PostScript to PDF.  PS_CHARSIZE         The PostScript character size.  PS_DECOMPOSED         Set this keyword to zero to set the PostScript color mode to indexed color and to          one to set the PostScript color mode to decomposed color.  PS_DELETE         Set this keyword to zero if you want to keep the PostScript output ImageMagick creates          when making raster file output.  PS_ENCAPSULATED         Set this keyword to configure PSCONFIG to produce encapsulated PostScript output by default.  PS_FONT         Set this keyword to the type of font you want to use in PostScript output. It sets the          FONT keyword on the PSConfig command. Normally, 0 (hardware fonts) or 1 (true-type fonts).  PS_METRIC         Set this keyword to configure PSCONFIG to use metric values and A4 page size in its interface.  PS_SCALE_FACTOR         Set his keyword to the PostScript scale factor you wish to use in creating PostScript output.  PS_QUIET         Set this keyword to set the QUIET keyword on PS_Start.  PS_TT_FONT         Set this keyword to the name of a true-type font to use in creating PostScript output.  TLB         The widget identifier of the top-level base widget.  STORAGE         An IDL variable that was defined and stored here by the program's user .  WID         The window index number of the draw widget.  XOMARGIN         Sets the !X.OMargin system variable when multiple plots are displayed in the window.  YOMARGIN         Sets the !Y.OMargin system variable when multiple plots are displayed in the window.  _EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::ListCommand", "cgCmdWindow::ListCommand", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::ListCommand", " This method lists the command indicated by the command index. In the  absence of the command index, all commands are listed.   ", "CREATECOMMANDSTRUCT          Set to a named variable to return a command structure of this command.  cmdIndex         The index number of the command you wish to list. If not supplied,          all the commands in the window are listed.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::LoadColors", "cgCmdWindow::LoadColors", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::LoadColors", " This method loads color table vectors into the program.  The XCOLORS_DATA keyword is required to get color vector  information from XCOLORS.   ", "XCOLORS_DATA         The information XColors sends to an object when colors are changed          in XColors.   r        The red color vector.  g        The green color vector.  b        The blue color vector.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::Output", "cgCmdWindow::Output", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::Output", " This method creates PostScript, PDF, BMP, GIF, JPEG, PNG, and TIFF file output  from the pixmap window contents. The method assumes ImageMagick and Ghostscript  are installed correctly.   ", "filename        The name of the output file. The type of file is determined from the         file name extension.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::PackageCommand", "cgCmdWindow::PackageCommand", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::PackageCommand", " Packages the command up into a command object that can be added to the window  or used to replace commands that are already in the window.   ", "AddCmd       Set this keyword to add the packaged command to the command list.  AltPS_Keywords       A structure containing alternative keyword names (as tags) and values for        those keywords to be used when the current device is the PostScript device.        See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the examples        below for details on how to use this keyword.  AltPS_Params       A structure containing alternative parameter values to be used when        the current device is the PostScript device. Structure names are restricted        to the names  P1 ,  P2 ,  P3  and  P4  to correspond to the equivalent positional        parameter. See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the        examples below for details on how to use this keyword.  CmdIndex       The command list index. This is used when adding or replacing a command. If the        command index is undefined when replacing a command, all the commands in the command        list are replaced with the command that is being added. If the command index is        undefined when adding a command, the command is added to the end of the command list.  DestroyObjectsExecute       Set this keyword is you want to execute the commands in the command list as soon as        the current command is added to the list. Otherwise, no command execution takes place.  Method       Set this keyword if the command is an object method call rather than a        procedure call. If this keyword is set, the first positional parameter, p1,        must be present and must be a valid object reference.  Multi       A replacement value to assign to the self.pmulti value. It is        a way to reset multiple command plotting to single command plotting        for a new single command. Like calling: object -&gt; SetPropery, MULTI=multi. Used only if        ReplaceCmd is set.  ReplaceCmd       Set this keyword to replace a graphics command with this packaged command on the command list        If CmdIndex is undefined, *all* the commands on the command list are replaced.  _Extra       Any extra keywords are collected by keyword inheritance for the command structure.  command       The graphics procedure command to be executed. This parameter        must be a string and the the command must be a procedure. Examples        are 'Surface', 'Contour', 'Plot', 'cgPlot', cgContour, etc.  p1       The first positional parameter appropriate for the graphics command.  p2       The second positional parameter appropriate for the graphics command.  p3       The third positional parameter appropriate for the graphics command.  p4       The fourth positional parameter appropriate for the graphics command.   ", "          -1", "    The command, packaged as a cgWindow_Command object, is returned.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::ReplaceCommand", "cgCmdWindow::ReplaceCommand", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::ReplaceCommand", " This method replaces a command in the command list. If cmdIndex is missing,  all the commands in the command list are replaced by this command.   ", "MULTI        A replacement value to assign to the self.pmulti value. It is         a way to reset multiple command plotting to single command plotting         for a new single command. Like calling: object -&gt; SetPropery, MULTI=multi.  command       The new command object.  cmdIndex       The index number of the  command  to replace. If absent, then        all the current commands are replaces with this new command.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::Resize", "cgCmdWindow::Resize", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::Resize", " This method resizes the graphics window and executes the commands again.   ", "x        The new X size of the draw widget in device coordinates.  y        The new Y size of the draw widget in device coordinates.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::SaveAsRaster", "cgCmdWindow::SaveAsRaster", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::SaveAsRaster", " This event handler method saves the graphics window as a raster image file.  PDF files also pass through here.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::RestoreCommands", "cgCmdWindow::RestoreCommands", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::RestoreCommands", " This method restores the commands from a specified file and loads them  into the window.   ", "filename       The name of the file containing the cgWindow commands that were previously saved.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::RestoreDataCoords", "cgCmdWindow::RestoreDataCoords", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::RestoreDataCoords", " This method restores the current data coordinate system by restoring the system variable  state from the last command execution.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::SaveCommands", "cgCmdWindow::SaveCommands", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::SaveCommands", " This method saves the commands from a cgWindow into a form that can be  e-mailed to colleagues or restored to a cgWindow at some later time.   ", "filename       The name of the file where the cgWindow commands are to be saved.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::SaveDataCoords", "cgCmdWindow::SaveDataCoords", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::SaveDataCoords", " This method saves the current data coordinate system by saving all the plotting and mapping  system variables after the commands have been executed in the program.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::SetProperty", "cgCmdWindow::SetProperty", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::SetProperty", " This method sets properties of the window object.   ", "ADJUSTSIZE        Set this keyword to adjust default character size to the display window size.  BACKGROUND        The background color of the window. Only use if the ERASEIT property is also set.  DELAY        Set this keyword to the amount of  delay  you want between commands in the command list.  DIMENSIONS        Set this keyword to a two-element array giving the xsize and ysize         of the draw widget.  ERASEIT        If this property is set, the cgWindow erases with the background color before         displaying the commands in the window's command list.  IM_DENSITY        Set this keyword to the sampling density when ImageMagick creates raster image         file from PostScript outout.  IM_OPTIONS        Set this keyword to any ImageMagick options you would like to pass along to the         ImageMagick convert command when creating raster image files from PostScript output.  IM_RASTER        Set this keyword to zero to create raster files using the create_png etc. keywords         directly, instead of via ImageMagick.  IM_RESIZE        Set this keyword to percentage that the raster image file created my ImageMagick         from PostScript output should be resized.  IM_TRANSPARENT        Set this keyword to allow ImageMagick to create transparent backgrounds when it         makes raster image files from PostScript output.  IM_WIDTHPDF_UNIX_CONVERT_CMD        Set this keyword to the name of an alternative UNIX command to convert PostScript to PDF.  PDF_PATH        Set this keyword to the name of the path to the Ghostscript command for converting PS to PDF.  PALETTE        Use this keyword to pass in an N-by-3 (or 3-by-N) byte array containing the         R, G, and B vectors of a color table. It is probably easier to use cgLoadCT or         XCOLORS to load color tables for the window, but this is provided as another option.  PS_CHARSIZE        The PostScript character size.  PS_DECOMPOSED        Set this keyword to zero to set the PostScript color mode to indexed color and to         one to set the PostScript color mode to decomposed color.  PS_DELETE        Set this keyword to zero if you want to keep the PostScript output ImageMagick creates         when making raster file output.  PS_ENCAPSULATED        Set this keyword to configure PSCONFIG to produce encapsulated PostScript output by default.  PS_FONT        Set this keyword to the type of font you want to use in PostScript output. It sets the         FONT keyword on the PSConfig command. Normally, 0 (hardware fonts) or 1 (true-type fonts).  PS_METRIC        Set this keyword to configure PSCONFIG to use metric values and A4 page size in its interface.  PS_QUIET        Set this keyword to set the QUIET keyword on PS_Start.  PS_SCALE_FACTOR        Set his keyword to the PostScript scale factor you wish to use in creating PostScript output.  PS_TT_FONT        Set this keyword to the name of a true-type font to use in creating PostScript output.  NOEXECUTECOMMANDS        Set this keyword to 1 to prevent the window from executing the commands and to         0 if you want the window to execute the commands.  MULTI        Set this keyword to the !P.MULTI setting you want to use for the window.         !P.MULTI is set to this setting before command execution, and set back to         it's default value when the commands are finished executing.  STORAGE        A storage location for any kind of IDL variable. This functions like a user value in         a widget program.  XOMARGIN        Sets the !X.OMargin system variable when multiple plots are displayed in the window.  YOMARGIN        Sets the !Y.OMargin system variable when multiple plots are displayed in the window.   UPDATE        Set this keyword to zero if you do not want the updates to be done immediately         after the properties are changed.  WID        The draw window index number. Not to be used by the user. Used by the draw widget         Notify_Realize callback routine when the draw widget is realized.  _EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow::StoreObjectReference", "cgCmdWindow::StoreObjectReference", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow::StoreObjectReference", " This method saves the window object reference in a linked-list system variable.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcmdwindow__define.html#cgCmdWindow__Define", "cgCmdWindow__Define", 'routine in <a href="coyote/cgcmdwindow__define.html">cgcmdwindow__define.pro</a>', "cgcmdwindow__define.pro", "", "cgCmdWindow__Define", " The definition module for the cgCmdWindow object   ", "class        The object class structure definition. Occasionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgcolor.html", "cgcolor.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgcolor.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " The purpose of this function is to obtain drawing colors  by name and in a device/decomposition independent way.  The color names and values may be read in as a file, or 192 color  names and values are supplied with the program. These colors were  obtained from the file rgb.txt, found on most X-Window distributions,  and from colors in the Brewer color tables.  Representative colors were chosen from across the color spectrum.  If the color names '0', '1', '2', ..., '255' are used, they will  correspond to the colors in the current color table in effect at  the time the cgColor program is called.   The program requires the Coyote Library  to be installed on your machine.   ", "", "Graphics", "     Change History: <span class= code-output >  Written by: David W. Fanning</span> <span class= code-output >  Modified FSC_COLOR to create cgColor 9 February 2011. DWF.</span> <span class= code-output >  Modified to allow a three-element color triple to be used in place of the color</span> <span class= code-output >     name parameter. This allows one user-defined color to be used. 4 Dec 2011. DWF.</span> <span class= code-output >  Modified to allow byte and 16-bit integer values to be used to specify colors</span> <span class= code-output >     in the current color table. 5 Dec 2011. DWF.</span> <span class= code-output >  Modified to allow the  opposite  pixel to be determined in the Z-graphics buffer. 24 Dec 2011. DWF.</span> <span class= code-output >  Modified the code to handle long integers depending on the current color mode and the</span> <span class= code-output >      number of values passed in. 10 January 2012. DWF.</span> <span class= code-output >  Made sure the return values are BYTES not INTEGERS, in cases where this is expected. 10 Jan 2012. DWF.</span> <span class= code-output >  Added  Background  as a color name. The opposite of  Opposite . 1 Feb 2012. DWF.</span> <span class= code-output >  When returning a vector of color values, now making sure to return a byte array if</span> <span class= code-output >       in indexed color mode. 27 Feb 2012. DWF.</span> <span class= code-output >  Added Compile Opt id2 to all file modules. 22 July 2012. DWF.</span> <span class= code-output >  Added  opposite  and  background  colors to Brewer colors. 14 August 2012. DWF.</span>       Copyright (c) 2009-2012, Fanning Software Consulting, Inc.      To get drawing colors in a device-decomposed independent way: <span class= code-output >   axisColor = cgColor( Green , !D.Table_Size-2)</span> <span class= code-output >   backColor = cgColor( Charcoal , !D.Table_Size-3)</span> <span class= code-output >   dataColor = cgColor( Yellow , !D.Table_Size-4)</span> <span class= code-output >   Plot, Findgen(11), Color=axisColor, Background=backColor, /NoData</span> <span class= code-output >   OPlot, Findgen(11), Color=dataColor</span>     To set the viewport color in object graphics: <span class= code-output >   theView = Obj_New('IDLgrView', Color=cgColor('Charcoal', /Triple))</span>     To change the viewport color later: <span class= code-output >   theView-&gt;SetProperty, Color=cgColor('Antique White', /Triple)</span>     To load the drawing colors  red ,  green , and  yellow  at indices 100-102, type this:    <span class= code-prompt >IDL&gt;</span> TVLCT, cgColor([ red ,  green ,  yellow ], /Triple), 100     To interactively choose a color, set the SELECTCOLOR keyword:    <span class= code-prompt >IDL&gt;</span> color = cgColor(/SelectColor)     The cgPickColorName program is a good way to learn the names of the colors available:    <span class= code-prompt >IDL&gt;</span> color = cgPickColorName()  ");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgcolor.html#cgColor_Color24", "cgColor_Color24", 'routine in <a href="idlastro/coyote/cgcolor.html">cgcolor.pro</a>', "cgcolor.pro", "", "cgColor_Color24", "+  This function accepts a [red, green, blue] triple that  describes a particular color and returns a 24-bit long  integer that is equivalent to (can be decomposed into)  that color.   ", "color       A three-element byte array containing the color        triple. The triple can be either a row or column        vector of three elements or it can be an N-by-3 array of        color triples.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgcolor.html#cgColor", "cgColor", 'routine in <a href="idlastro/coyote/cgcolor.html">cgcolor.pro</a>', "cgcolor.pro", "", "cgColor", " The purpose of this function is to obtain drawing colors  by name and in a device/decomposition independent way.   ", "AllColors        Set this keyword to return indices, or 24-bit values, or color         triples, for all the known colors, instead of for a single color.  Brewer        An obsolete keyword. If used, only Brewer colors are loaded into the color         vectors internally.  Check_Connection         An obsolete keyword now completely ignored.  ColorStructure        This output keyword (if set to a named variable) will return a         structure in which the fields will be the known color names (without spaces)         and the values of the fields will be either color table index numbers or         24-bit color values. If you have specified a vector of color names, then         this will be a structure containing just those color names as fields.  Cancel        This keyword is always set to 0, unless that SELECTCOLOR keyword is used.         Then it will correspond to the value of the CANCEL output keyword in cgPickColorName.  Decomposed        Set this keyword to 0 or 1 to force the return value to be         a color table index or a 24-bit color value, respectively. This         keyword is normally set by the color state of the current graphics device.  Filename        The  name of an ASCII file that can be opened to read in color values and color         names. There should be one color per row in the file. Please be sure there are         no blank lines in the file. The format of each row should be: <span class= code-output >  redValue  greenValue  blueValue  colorName</span>         Color values should be between 0 and 255. Any kind of white-space         separation (blank characters, commas, or tabs) are allowed. The color         name should be a string, but it should NOT be in quotes. A typical         entry into the file would look like this: <span class= code-output >  255   255   0   Yellow</span>  Names        If this keyword is set, the return value of the function is a string array         containing the names of the colors. These names would be appropriate, for example,         in building a list widget with the names of the colors. If the NAMES         keyword is set, the COLOR and INDEX parameters are ignored.  NColors        Returns the number of colors that cgColor  knows  about. Currently ncolors=193.  NoDisplay        An obsolete keyword, now totally ignored.  Row        If this keyword is set, the return value of the function when the TRIPLE         keyword is set is returned as a row vector, rather than as the default         column vector. This is required, for example, when you are trying to         use the return value to set the color for object graphics objects. This         keyword is completely ignored, except when used in combination with the         TRIPLE keyword.  SelectColor       Set this keyword if you would like to select the color name with        the cgPickColorName program. Selecting this keyword automaticallys sets        the INDEX positional parameter. If this keyword is used, any keywords        appropriate for cgPickColorName can also be used. If this keyword is used,        the first positional parameter can be a color name that will appear in        the SelectColor box.  Triple        Setting this keyword will force the return value of the function to         always be a color triple, regardless of color decomposition state or         visual depth of the machine. The value will be a three-element column         vector unless the ROW keyword is also set.  _Ref_Extra        Any keyword parameter appropriate for cgPickColorName can be used.        These include BOTTOM, COLUMNS, GROUP_LEADER, INDEX, and TITLE.   theColour        Normally the name of the color desired. However, this can also be         a string index number (e.g., '215') or a byte or short integer         value (e.g, 215B or 215S). If this is the case, the color         in the current color table at this index number is used for the         color that is returned. The value may also be a vector of color names.         The color may also be a three-element byte or integer array specifying a         user-defined color triple. Only one color triple is allowed.          To see a list of the color names available set the NAMES keyword. Colors available are these: <span class= code-output >  Active            Almond     Antique White        Aquamarine             Beige            Bisque</span> <span class= code-output >  Black               Blue       Blue Violet             Brown         Burlywood        Cadet Blue</span> <span class= code-output >  Charcoal       Chartreuse         Chocolate             Coral   Cornflower Blue          Cornsilk</span> <span class= code-output >  Crimson              Cyan    Dark Goldenrod         Dark Gray        Dark Green        Dark Khaki</span> <span class= code-output >  Dark Orchid      Dark Red       Dark Salmon   Dark Slate Blue         Deep Pink       Dodger Blue</span> <span class= code-output >  Edge                 Face         Firebrick      Forest Green             Frame              Gold</span> <span class= code-output >  Goldenrod            Gray             Green      Green Yellow         Highlight          Honeydew</span> <span class= code-output >  Hot Pink       Indian Red             Ivory             Khaki          Lavender        Lawn Green</span> <span class= code-output >  Light Coral    Light Cyan        Light Gray      Light Salmon   Light Sea Green      Light Yellow</span> <span class= code-output >  Lime Green          Linen           Magenta            Maroon       Medium Gray     Medium Orchid</span> <span class= code-output >  Moccasin             Navy             Olive        Olive Drab            Orange        Orange Red</span> <span class= code-output >  Orchid     Pale Goldenrod        Pale Green            Papaya              Peru              Pink</span> <span class= code-output >  Plum          Powder Blue            Purple               Red              Rose        Rosy Brown</span> <span class= code-output >  Royal Blue   Saddle Brown            Salmon       Sandy Brown         Sea Green          Seashell</span> <span class= code-output >  Selected           Shadow            Sienna          Sky Blue        Slate Blue        Slate Gray</span> <span class= code-output >  Snow         Spring Green        Steel Blue               Tan              Teal              Text</span> <span class= code-output >  Thistle            Tomato         Turquoise            Violet        Violet Red             Wheat</span> <span class= code-output >  White              Yellow</span>         Here are the Brewer color names: <span class= code-output >  WT1        WT2       WT3       WT4       WT5       WT6       WT7       WT8</span> <span class= code-output >  TAN1      TAN2      TAN3      TAN4      TAN5      TAN6      TAN7      TAN8</span> <span class= code-output >  BLK1      BLK2      BLK3      BLK4      BLK5      BLK6      BLK7      BLK8</span> <span class= code-output >  GRN1      GRN2      GRN3      GRN4      GRN5      GRN6      GRN7      GRN8</span> <span class= code-output >  BLU1      BLU2      BLU3      BLU4      BLU5      BLU6      BLU7      BLU8</span> <span class= code-output >  ORG1      ORG2      ORG3      ORG4      ORG5      ORG6      ORG7      ORG8</span> <span class= code-output >  RED1      RED2      RED3      RED4      RED5      RED6      RED7      RED8</span> <span class= code-output >  PUR1      PUR2      PUR3      PUR4      PUR5      PUR6      PUR7      PUR8</span> <span class= code-output >  PBG1      PBG2      PBG3      PBG4      PBG5      PBG6      PBG7      PBG8</span> <span class= code-output >  YGB1      YGB2      YGB3      YGB4      YGB5      YGB6      YGB7      YGB8</span> <span class= code-output >  RYB1      RYB2      RYB3      RYB4      RYB5      RYB6      RYB7      RYB8</span> <span class= code-output >  TG1        TG2       TG3       TG4       TG5       TG6       TG7       TG8</span>         The color name  OPPOSITE  is also available. It chooses a color  opposite  to the         color of the pixel in the upper-right corner of the display, if a window is open.         Otherwise, this color is  black  in PostScript and  white  everywhere else.         The color OPPOSITE is used if this parameter is absent or a color name is mis-spelled.           The color name  BACKGROUND  can similarly be used to select the color of the pixel          in the upper-right corner of the display, if a window is open.   colorIndex        The color table index where the color should be loaded. Colors are         loaded into the color table only if using indexed color mode in the         current graphics device. If this parameter is missing, the color will         be loaded at a unique color index number, if necessary.   ", "          -1", "     The return value depends on the color mode in effect at the time      the program is called and which keyword is used with the program.      In normal operation, if the graphics device is using indexed color      mode, the program will load a color at a unique (or specified)      index and return that index number. If the graphics device is using      decomposed color mode, the program will create a 24-bit color value      that can be used to specify the particular color desired. In this      case, no color is loaded in the color table. This is the preferred      mode for working with colors in IDL.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcolor.html", "cgcolor.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcolor.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " The purpose of this function is to obtain drawing colors  by name and in a device/decomposition independent way.  The color names and values may be read in as a file, or 192 color  names and values are supplied with the program. These colors were  obtained from the file rgb.txt, found on most X-Window distributions,  and from colors in the Brewer color tables.  Representative colors were chosen from across the color spectrum.  If the color names '0', '1', '2', ..., '255' are used, they will  correspond to the colors in the current color table in effect at  the time the cgColor program is called.   Please note that all Coyote Graphics routines use cgColor internally to specify  their colors in a color-model independent way. It is not necessary to call  cgColor yourself unless you are using it with a traditional IDL command (e.g., Plot).  For example: <span class= code-output >   Plot, data, Color=cgColor('dodger blue')</span>  But, it is not needed with Coyote Graphics commands: <span class= code-output >   cgPlot, data, Color='dodger blue'</span>  The program requires the Coyote Library  to be installed on your machine.   ", "", "Graphics", "     Change History: <span class= code-output >  Written by: David W. Fanning</span> <span class= code-output >  Modified FSC_COLOR to create cgColor 9 February 2011. DWF.</span> <span class= code-output >  Modified to allow a three-element color triple to be used in place of the color</span> <span class= code-output >     name parameter. This allows one user-defined color to be used. 4 Dec 2011. DWF.</span> <span class= code-output >  Modified to allow byte and 16-bit integer values to be used to specify colors</span> <span class= code-output >     in the current color table. 5 Dec 2011. DWF.</span> <span class= code-output >  Modified to allow the  opposite  pixel to be determined in the Z-graphics buffer. 24 Dec 2011. DWF.</span> <span class= code-output >  Modified the code to handle long integers depending on the current color mode and the</span> <span class= code-output >      number of values passed in. 10 January 2012. DWF.</span> <span class= code-output >  Made sure the return values are BYTES not INTEGERS, in cases where this is expected. 10 Jan 2012. DWF.</span> <span class= code-output >  Added  Background  as a color name. The opposite of  Opposite . 1 Feb 2012. DWF.</span> <span class= code-output >  When returning a vector of color values, now making sure to return a byte array if</span> <span class= code-output >       in indexed color mode. 27 Feb 2012. DWF.</span> <span class= code-output >  Added Compile Opt id2 to all file modules. 22 July 2012. DWF.</span> <span class= code-output >  Added  opposite  and  background  colors to Brewer colors. 14 August 2012. DWF.</span> <span class= code-output >  Some versions of IDL report the size of widget windows incorrectly, so instead of</span> <span class= code-output >        sampling the very top-right pixel, I now back off a little. 1 Nov 2012. DWF.</span> <span class= code-output >  For numerical values less than 256, in indexed color state, I now return the values</span> <span class= code-output >        directly to the user. This should significantly speed up many Coyote Graphics</span> <span class= code-output >        processes. 14 December 2012. DWF.</span> <span class= code-output >  Removed cgColor_Color24 module in favor of using Coyote Library routine cgColor24. 5 Jan 2013. DWF.</span> <span class= code-output >  The keyword ROW was being ignored if multiple colors were specified with TRIPLE keyword. Fixed. 10 July 2013. DWF.</span>       Copyright (c) 2009-2013, Fanning Software Consulting, Inc.      To get drawing colors in a device-decomposed independent way: <span class= code-output >   axisColor = cgColor( Green , !D.Table_Size-2)</span> <span class= code-output >   backColor = cgColor( Charcoal , !D.Table_Size-3)</span> <span class= code-output >   dataColor = cgColor( Yellow , !D.Table_Size-4)</span> <span class= code-output >   Plot, Findgen(11), Color=axisColor, Background=backColor, /NoData</span> <span class= code-output >   OPlot, Findgen(11), Color=dataColor</span>     To set the viewport color in object graphics: <span class= code-output >   theView = Obj_New('IDLgrView', Color=cgColor('Charcoal', /Triple))</span>     To change the viewport color later: <span class= code-output >   theView-&gt;SetProperty, Color=cgColor('Antique White', /Triple)</span>     To load the drawing colors  red ,  green , and  yellow  at indices 100-102, type this:    <span class= code-prompt >IDL&gt;</span> TVLCT, cgColor([ red ,  green ,  yellow ], /Triple), 100     To interactively choose a color, set the SELECTCOLOR keyword:    <span class= code-prompt >IDL&gt;</span> color = cgColor(/SelectColor)     The cgPickColorName program is a good way to learn the names of the colors available:    <span class= code-prompt >IDL&gt;</span> color = cgPickColorName()      ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcolor.html#cgColor", "cgColor", 'routine in <a href="coyote/cgcolor.html">cgcolor.pro</a>', "cgcolor.pro", "", "cgColor", " The purpose of this function is to obtain drawing colors  by name and in a device and color model independent way.   ", "ALLCOLORS        Set this keyword to return indices, or 24-bit values, or color         triples, for all the known colors, instead of for a single color.  BREWER        An obsolete keyword. If used, only Brewer colors are loaded into the color         vectors internally.  CHECK_CONNECTION         An obsolete keyword now completely ignored.  COLORSTRUCTURE        This output keyword (if set to a named variable) will return a         structure in which the fields will be the known color names (without spaces)         and the values of the fields will be either color table index numbers or         24-bit color values. If you have specified a vector of color names, then         this will be a structure containing just those color names as fields.  CANCEL        This keyword is always set to 0, unless that SELECTCOLOR keyword is used.         Then it will correspond to the value of the CANCEL output keyword in cgPickColorName.  DECOMPOSED        Set this keyword to 0 or 1 to force the return value to be         a color table index or a 24-bit color value, respectively. This         keyword is normally set by the color state of the current graphics device.  FILENAME        The  name of an ASCII file that can be opened to read in color values and color         names. There should be one color per row in the file. Please be sure there are         no blank lines in the file. The format of each row should be: <span class= code-output >  redValue  greenValue  blueValue  colorName</span>         Color values should be between 0 and 255. Any kind of white-space         separation (blank characters, commas, or tabs) are allowed. The color         name should be a string, but it should NOT be in quotes. A typical         entry into the file would look like this: <span class= code-output >  255   255   0   Yellow</span>  NAMES        If this keyword is set, the return value of the function is a string array         containing the names of the colors. These names would be appropriate, for example,         in building a list widget with the names of the colors. If the NAMES         keyword is set, the COLOR and INDEX parameters are ignored.  NCOLORS        Returns the number of colors that cgColor  knows  about. Currently ncolors=193.  NODISPLAY        An obsolete keyword, now totally ignored.  ROW        If this keyword is set, the return value of the function when the TRIPLE         keyword is set is returned as a row vector, rather than as the default         column vector. This is required, for example, when you are trying to         use the return value to set the color for object graphics objects. This         keyword is completely ignored, except when used in combination with the         TRIPLE keyword.  SELECTCOLOR       Set this keyword if you would like to select the color name with        the cgPickColorName program. Selecting this keyword automaticallys sets        the INDEX positional parameter. If this keyword is used, any keywords        appropriate for cgPickColorName can also be used. If this keyword is used,        the first positional parameter can be a color name that will appear in        the SelectColor box.  TRIPLE        Setting this keyword will force the return value of the function to         always be a color triple, regardless of color decomposition state or         visual depth of the machine. The value will be a three-element column         vector unless the ROW keyword is also set.  _REF_EXTRA        Any keyword parameter appropriate for cgPickColorName can be used.        These include BOTTOM, COLUMNS, GROUP_LEADER, INDEX, and TITLE.   theColour        Normally the name of the color desired. However, this can also be         a string index number (e.g., '215') or a byte or short integer         value (e.g, 215B or 215S). If this is the case, the color         in the current color table at this index number is used for the         color that is returned. The value may also be a vector of color names.         The color may also be a three-element byte or integer array specifying a         user-defined color triple. Only one color triple is allowed.          To see a list of the color names available set the NAMES keyword. Colors available are these: <span class= code-output >  Active            Almond     Antique White        Aquamarine             Beige            Bisque</span> <span class= code-output >  Black               Blue       Blue Violet             Brown         Burlywood        Cadet Blue</span> <span class= code-output >  Charcoal       Chartreuse         Chocolate             Coral   Cornflower Blue          Cornsilk</span> <span class= code-output >  Crimson              Cyan    Dark Goldenrod         Dark Gray        Dark Green        Dark Khaki</span> <span class= code-output >  Dark Orchid      Dark Red       Dark Salmon   Dark Slate Blue         Deep Pink       Dodger Blue</span> <span class= code-output >  Edge                 Face         Firebrick      Forest Green             Frame              Gold</span> <span class= code-output >  Goldenrod            Gray             Green      Green Yellow         Highlight          Honeydew</span> <span class= code-output >  Hot Pink       Indian Red             Ivory             Khaki          Lavender        Lawn Green</span> <span class= code-output >  Light Coral    Light Cyan        Light Gray      Light Salmon   Light Sea Green      Light Yellow</span> <span class= code-output >  Lime Green          Linen           Magenta            Maroon       Medium Gray     Medium Orchid</span> <span class= code-output >  Moccasin             Navy             Olive        Olive Drab            Orange        Orange Red</span> <span class= code-output >  Orchid     Pale Goldenrod        Pale Green            Papaya              Peru              Pink</span> <span class= code-output >  Plum          Powder Blue            Purple               Red              Rose        Rosy Brown</span> <span class= code-output >  Royal Blue   Saddle Brown            Salmon       Sandy Brown         Sea Green          Seashell</span> <span class= code-output >  Selected           Shadow            Sienna          Sky Blue        Slate Blue        Slate Gray</span> <span class= code-output >  Snow         Spring Green        Steel Blue               Tan              Teal              Text</span> <span class= code-output >  Thistle            Tomato         Turquoise            Violet        Violet Red             Wheat</span> <span class= code-output >  White              Yellow</span>         Here are the Brewer color names: <span class= code-output >  WT1        WT2       WT3       WT4       WT5       WT6       WT7       WT8</span> <span class= code-output >  TAN1      TAN2      TAN3      TAN4      TAN5      TAN6      TAN7      TAN8</span> <span class= code-output >  BLK1      BLK2      BLK3      BLK4      BLK5      BLK6      BLK7      BLK8</span> <span class= code-output >  GRN1      GRN2      GRN3      GRN4      GRN5      GRN6      GRN7      GRN8</span> <span class= code-output >  BLU1      BLU2      BLU3      BLU4      BLU5      BLU6      BLU7      BLU8</span> <span class= code-output >  ORG1      ORG2      ORG3      ORG4      ORG5      ORG6      ORG7      ORG8</span> <span class= code-output >  RED1      RED2      RED3      RED4      RED5      RED6      RED7      RED8</span> <span class= code-output >  PUR1      PUR2      PUR3      PUR4      PUR5      PUR6      PUR7      PUR8</span> <span class= code-output >  PBG1      PBG2      PBG3      PBG4      PBG5      PBG6      PBG7      PBG8</span> <span class= code-output >  YGB1      YGB2      YGB3      YGB4      YGB5      YGB6      YGB7      YGB8</span> <span class= code-output >  RYB1      RYB2      RYB3      RYB4      RYB5      RYB6      RYB7      RYB8</span> <span class= code-output >  TG1        TG2       TG3       TG4       TG5       TG6       TG7       TG8</span>         The color name  OPPOSITE  is also available. It chooses a color  opposite  to the         color of the pixel in the upper-right corner of the display, if a window is open.         Otherwise, this color is  black  in PostScript and  white  everywhere else.         The color OPPOSITE is used if this parameter is absent or a color name is mis-spelled.           The color name  BACKGROUND  can similarly be used to select the color of the pixel          in the upper-right corner of the display, if a window is open.   colorIndex        The color table index where the color should be loaded. Colors are         loaded into the color table only if using indexed color mode in the         current graphics device. If this parameter is missing, the color will         be loaded at a unique color index number, if necessary.   ", "          -1", "     The return value depends on the color mode in effect at the time      the program is called and which keyword is used with the program.      In normal operation, if the graphics device is using indexed color      mode, the program will load a color at a unique (or specified)      index and return that index number. If the graphics device is using      decomposed color mode, the program will create a 24-bit color value      that can be used to specify the particular color desired. In this      case, no color is loaded in the color table. This is the preferred      mode for working with colors in IDL.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcolor24.html", "cgcolor24.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcolor24.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcolor24.html#cgCOLOR24", "cgCOLOR24", 'routine in <a href="coyote/cgcolor24.html">cgcolor24.pro</a>', "cgcolor24.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgCOLOR24", " The purpose of this function is to convert a RGB color triple  into the equivalent 24-bit long integer. The 24-bit integer  can be decomposed into the appropriate color by interpreting  the lowest 8 bits as red, the middle 8 bits as green, and the  highest 8 bits as blue. This routine was written to be used with  device-independent color programs like cgColor.   ", "color       A three-element column or row array representing a color triple. Or an        N-by-three element array of color triples. The values of the elements        must be between 0 and 255.   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written by:  David Fanning, 3 February 96.</span> <span class= code-output >  Completely revised the algorithm to accept color arrays. 19 October 2000. DWF.</span>       Copyright (c) 1996-2012, Fanning Software Consulting, Inc.      To convert the color triple for the color YELLOW, (255, 255, 0), to the     hexadecimal value '00FFFF'x or the decimal number 65535, type: <span class= code-output >  color = COLOR24([255, 255, 0])</span>      A 24-bit long integer that can be decomposed into a color triple value.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcolorbar.html", "cgcolorbar.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcolorbar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcolorbar.html#cgColorbar", "cgColorbar", 'routine in <a href="coyote/cgcolorbar.html">cgcolorbar.pro</a>', "cgcolorbar.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgColorbar", " The purpose of this routine is to add a color bar to the current graphics window.               The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD       Set this keyword to add the command to the resizeable graphics window cgWindow.  ANNOTATECOLOR       The name of the  annotation color  to use. The names are those for        cgCOLOR. If this keyword is used, the annotation color is loaded after        the color bar is displayed. This keyword is provided to maintain backward        compatibility, but also to solve the potential problem of an extra line showing up        in the color bar when the COLOR keyword is used in indexed color mode. In other words,        use ANNOTATECOLOR in place of COLOR for complete color model independent results.  BOTTOM       The lowest color index of the colors to be loaded in the color bar.  BREWER         This keyword is used only if the CTIndex keyword is used to select a color table number.          Setting this keyword allows Brewer color tables to be used.  CHARPERCENT       A value from 0.0 go 1.0 that is multiplied by the CHARSIZE to produce        the character size for the color bar. This value is only used if CHARSIZE is        undefined. This keyword is primarily useful for using color bars in resizeable        graphics windows (cgWindow).  CHARSIZE       The character size of the color bar annotations. Default is cgDefCharsize()*charPercent.  CLAMP        A two-element array in data units. The color bar is clamped to these         two values. This is mostly of interest if you are  window-leveling          an image. The clamp is set to the  window  of the color bar.         Normally, when you are doing this, you would like the colors outside         the  window  to be set to a neutral color. Use the NEUTRALINDEX keyword         to set the netural color index in the color bar. (See the Examples section         for more information.)  COLOR        The name of the color to use for color bar annotations. Ignored unless passed         the name of a cgColor color. The default value is to use the ANNOTATECOLOR.  CTINDEX         The index number of a color table. The Brewer and Reverse keywords will be checked          to see how to load the color table into the Palette keyword. This keyword will take          precidence over any colors that are loaded with the Palette keyword.  DISCRETE         Set this keyword to configure certain properties of the color bar to make          discrete color blocks for the color bar. This works best if you are using          a handful of colors in the color bar (e.g, 8-16).  DIVISIONS         The number of divisions to divide the bar into. There will be (divisions + 1) annotations.          When set to 0 (the default), the IDL Plot command detemines the number of divisions used.  FIT       If this keyword is set, the colorbar  fits  itself to the normalized        coordinates of the last graphics command executed. In other words, for        a horizontal color bar, postition[[0,2]] = !X.Window, and for a vertical        color bar, position[[1,3]] = !Y.Window. Other positions are adjusted        to put the colorbar  reasonably  close to the plot. The fit many not always        be accurate. If you are fitting to an image, be sure to set the SAVE keyword        on cgImage to establish a data coordinate system.  FONT       Sets the font of the annotation. Hershey: -1, Hardware:0, True-Type: 1.  FORMAT       The format of the color bar annotations. The dfault is to let the IDL Plot command        determine how the color bar labels are formatted.  INVERTCOLORS       Setting this keyword inverts the colors in the color bar.  MAXRANGE       The maximum data value for the color bar annotation. Default is NCOLORS.  MINOR       The number of minor tick divisions.  MINRANGE       The minimum data value for the bar annotation.  NCOLORS       This is the number of colors in the color bar.  NEUTRALINDEX       This is the color index to use for color bar values outside the        clamping range when clamping the color bar with the CLAMP keyword.        If this keyword is absent, the highest color table value is used        for low range values and the lowest color table value is used        for high range values, in order to provide contrast with the        clamped region. (See the Examples section for more information.)  NODISPLAY       This keyword is obsolete and is no longer used.  OOB_FACTOR       The default is to make the length of the out-of-bounds triangle the        same distance as the height (or width, in the case of a vertical        color bar) of the color bar. If you would prefer a shorted triangle length,        set this keyword to a value less than zero (e.g., 0.5). If you prefer a        longer length, set this keyword to a value greater than zero. The  standard         length will be multiplied by this value.  OOB_HIGH       The name of an out-of-bounds high color. This color will be represented        by a triangle on the right or top of the color bar. If the color is        a string byte value (e.g.,  215 ), then this color in the current color        table is used. The color can also be a three-element color triple        (e.g., [240, 200, 65]). Note, you can CANNOT use a long integer as        a color table index number with this keyword. If you want to use a        color table index number, be sure the number is a short integer, byte        value, or a string (e.g, OOB_HIGH=200S, OOB_HIGH=200B, or OOB_HIGH='200').  OOB_LOW       The name of an out-of-bounds low color. This color will be represented        by a triangle on the left or bottom of the color bar. If the color is        a string byte value (e.g.,  215 ), then this color in the current color        table is used. The color can also be a three-element color triple        (e.g., [240, 200, 65]). Note, you can CANNOT use a long integer as        a color table index number with this keyword. If you want to use a        color table index number, be sure the number is a short integer, byte        value, or a string (e.g, OOB_HIGH=200S, OOB_HIGH=200B, or OOB_HIGH='200').  PALETTE       A color palette containing the RGB color vectors to use for the color        bar. The program will sample NCOLORS from the color palette.  POSITION       A four-element array of normalized coordinates in the same        form as the POSITION keyword on a plot. Default is[0.88, 0.10, 0.95, 0.90]        for a vertical bar and [0.10, 0.88, 0.90, 0.95] for a horizontal bar.        See the FIT keyword, also.  RANGE       A two-element vector of the form [min, max]. Provides an alternative        and faster way way of setting the MINRANGE and MAXRANGE keywords.  REVERSE       An alternative keyword name (one I can actually remember!) for the INVERTCOLORS keyword.        It reverses the colors in the color bar.  RIGHT       This puts the labels on the right-hand side of a vertical color bar. It applies        only to vertical color bars.  TCHARSIZE       The title size. By default, the same as Charsize. Note that this keyword is        ignored for vertical color bars unless the title location (TLocation) is on        the opposite side of the color bar from the color bar labels. This is a consequence        of being upable to determine the length of color bar labels programmatically in this        orientation.  TEXTTHICK        Sets the thickness of the textual annotations on the color bar.  TLOCATION       The title location, which allows the user to set the title location independently        of the colorbar labels. May be  TOP  or  BOTTOM  for horizontal color bars, and         LEFT  or  RIGHT  for vertical color bars.  TICKINTERVAL       Set this keyword to the interval spacing of major tick marks. Use this keyword in        place of XTickInterval or YTickInterval keywords.  TICKLEN       Set this keyword to the major tick length desired. Default is 0.25. Setting this        keyword to a value greater than or equal to 0.5 will result in major tick marks        extending the width of the color bar. Note that setting this keyword to 0.3 or        greater will result in minor tick mark lengths being set to 0.01, which is almost        too small to be seen. All direct graphics tick marks act in this (strange!) way.  TICKNAMES       A string array of names or values for the color bar tick marks. There should be        divisions + 1 tick names in the array.  TITLE       This is title for the color bar. The default is to have no title.  TOP       This puts the labels on top of the bar rather than under it. The keyword only        applies if a horizontal color bar is rendered.  VERTICAL       Setting this keyword give a vertical color bar. The default is a horizontal color bar.  XLOG       Set this keyword to use logarithmic scaling for the colorbar data range.  XTICKINTERVAL       This keyword is trapped, but unused. Please use theTickInterval keyword instead.  XTICKLAYOUT       See the Plot graphics kewyords for an example. Used here only to track this keyword.  XTITLE        This keyword is ignored. Use the Title keyword to set a title for the color bar.  YLOG       Set this keyword to use logarithmic scaling for the colorbar data range.  YTICKINTERVAL       This keyword is trapped, but unused. Please use theTickInterval keyword instead.  YTICKLAYOUT       See the Plot graphics kewyords for an example. Used here only to track this keyword.  YTITLE        This keyword is ignored. Use the Title keyword to set a title for the color bar.  WINDOW       Set this keyword to display the plot in a resizeable graphics window (cgWindow).  _REF_EXTRA         Any keyword appropriate for the PLOT and AXIS commands is also accepted by keyword          inheritance.   ", "Graphics", "     Change History: <span class= code-output > Written by: David W. Fanning, 4 February 2011, as a direct descendant of cgColorbar.</span> <span class= code-output > Program developement stopped on cgColorbar as of this date, and this program has</span> <span class= code-output > become a part of the Coyote Graphics System.</span> <span class= code-output > Added FIT keyword. 28 Feb 2011. DWF</span> <span class= code-output > Made default character size cgDefCharsize*0.85. 28 Feb 2011. DWF.</span> <span class= code-output > Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output > Added CHARPERCENT keyword 18 March 2011. DWF.</span> <span class= code-output > Added XTITLE and YTITLE keywords, which do nothing except prevent these keywords</span> <span class= code-output >    from being used inadvertently. 27 May 2011. DWF.</span> <span class= code-output > Fixed a problem with assigning the color with the ANNOTATECOLOR keyword in the</span> <span class= code-output >    Z-graphics buffer. 30 Aug 2011. DWF.</span> <span class= code-output > Changed the default DIVISIONS to 0 and the default FORMAT to   . 2 Sept 2011. DWF.</span> <span class= code-output > Added code that will force MINRANGE and MAXRANGE values to be scalars. 5 Sept 2011. DWF.</span> <span class= code-output > Problem with division by zero when FORMAT is not default value. Now, if format</span> <span class= code-output >    is the default value, then default is DIVISIONS=0, else DIVISIONS=6.</span> <span class= code-output > Documented the TICKLEN keyword and set the default tick length to 0.25. 3 Oct 2011. DWF.</span> <span class= code-output > Added the OOB_FACTOR, OOB_HIGH and OOB_LOW keywords. 5 Dec 2011. DWF.</span> <span class= code-output > Added DISCRETE keyword. 7 Dec 2011. DWF.</span> <span class= code-output > Changed the way the top axis was drawn, and had a problem with EXTRA keywords. Fixed. 20 Dec 2011. DWF.</span> <span class= code-output > Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output > Fixed a problem with color palettes by defining NCOLORS according to the number of colors</span> <span class= code-output >    in the palette. 19 March 2012. DWF.</span> <span class= code-output > Set the maximum number of divisions at 59 to recognize the IDL plot limit for tick marks. 19 March 2012. DWF.</span> <span class= code-output > Modifications to the FIT algorithm to make sure the color bar is completely inside</span> <span class= code-output >     the graphics window. Also fixed mis-spelled variable name. 20 March 2012. DWF.</span> <span class= code-output > Added TickInterval, XTickInterval and YTickInterval keywords to accommodate interval</span> <span class= code-output >     spacing of major tick marks. 21 July 2012. DWF.</span> <span class= code-output > Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output > Added TLOCATION and TCHARSIZE keywords. 20 September 2012. DWF.</span> <span class= code-output > Implemented a fix that will allow the user to specify a tick formatting function name</span> <span class= code-output >    with the FORMAT keyword. 21 September 2012. DWF.</span> <span class= code-output > Fixed a problem in which setting the RANGE keyword gave different results, depending upon whether</span> <span class= code-output >    a FORMAT keyword was used or not. This change will affect the default color bar labeling</span> <span class= code-output >    *if* the user specifies a range. If you prefer the old labeling behavior, simiply set</span> <span class= code-output >    the `Divisions` keyword to 0. 16 Oct 2012. DWF.</span> <span class= code-output > Added CTINDEX, and BREWER keywords to make loading a color table palette easier. 20 October 2012. DWF.</span> <span class= code-output > Fixed a strange interaction between TickInterval and the Format keywords. 5 Nov 2012. DWF.</span> <span class= code-output > Changes to support a tick formatting function when a log axis is used. 7 February 2013. DWF.</span> <span class= code-output > Added XTICKLAYOUT and YTICKLAYOUT keywords. 8 February 2013. DWF.</span> <span class= code-output > Somehow the default AnnotateColor had gotten changed from  opposite . Restored. 18 Feb 2013. DWF.</span> <span class= code-output > Greatly simplified the code and turned over the responsibility of doing tick formatting and setting</span> <span class= code-output >    the number of divisions, etc. to the PLOT command. I do this with some trepidation, because it</span> <span class= code-output >    is a big change, but I think it will lead to better results in the long run and won't affect</span> <span class= code-output >    current IDL programs much, if at all. 27 Feb 2013. DWF.</span> <span class= code-output > Added TEXTTHICK keyword to change the thickness of the textual annotations. 28 Feb 2013. DWF.</span> <span class= code-output > Added more error handling for bad POSITION values. 26 July 2013. DWF.</span> <span class= code-output > Modified the code so that the original input POSITION values are not changed by the</span> <span class= code-output >     program code. 8 August 2013. DWF.</span>       Copyright (c) 2008-2013, Fanning Software Consulting, Inc.      To display a horizontal color bar above a contour plot, type: <span class= code-output >  cgLOADCT, 5, NCOLORS=100</span> <span class= code-output >  cgCONTOUR, DIST(31,41), POSITION=[0.15, 0.15, 0.95, 0.75], $</span> <span class= code-output >     C_COLORS=INDGEN(25)*4, NLEVELS=25</span> <span class= code-output >  cgCOLORBAR, NCOLORS=100, POSITION=[0.15, 0.85, 0.95, 0.90]</span>     Example using the Clamp and NeutralIndex keywords: <span class= code-output >  cgLOADCT, 33, NCOLORS=254</span> <span class= code-output >  TVLCT, cgCOLOR('gray', /TRIPLE), 255</span> <span class= code-output >  cgCOLORBAR, NCOLORS=254, NEUTRALINDEX=255, RANGE=[0,1500], $</span> <span class= code-output >      DIVISIONS=8, CLAMP=[400, 800]</span>     Additional examples can be found in the article Adding a Color Bar.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcolorfill.html", "cgcolorfill.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcolorfill.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcolorfill.html#cgColorFill", "cgColorFill", 'routine in <a href="coyote/cgcolorfill.html">cgcolorfill.pro</a>', "cgcolorfill.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgColorFill", " Provides a device-independent and color-model-independent way to fill a polygon  with a particular color. This is a wrapper to the PolyFill command in IDL.   The program requires the Coyote Library  to be installed on your machine.   ", "COLOR         The name of the fill color. Color names are those used with cgColor.          This value can also be a long integer or an index into the current color          table.  NORMAL         Set to indicate the polygon vertices are in normalized coordinates.  DEVICE         Set to indicate the polygon vertices are in device coordinates.  POSITION         Set to the normal four-element normalized position array for locating          a rectangular region in a graphics window. If this keyword is used, the          x and y parameters are constructed from this position.  WINDOW         Set this keyword to add the command to the current cgWindow application.  _REF_EXTRA         Any other keywords to the IDL POLYFILL command may be used.   x         A vector argument providing the X coordinates of the points to be connected.          The vector must contain at least three elements. If only one argument is          specified, X must be an array of either two or three vectors (i.e., (2,*)          or (3,*)). In this special case, the vector X[0,*] specifies the X values,          X[1,*] specifies Y, and X[2,*] contain the Z values.  y         A vector argument providing the Y coordinates of the points to be connected.          Y must contain at least three elements.  z         An optional vector argument providing the Z coordinates of the points to be          connected. Z must contain at least three elements.   ", "Graphics", "     Change History: <span class= code-output >  Written, 24 December 2010. DWF.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >  Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >  Added WINDOW keyword. 24 Jan 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >  Added a POSITION keyword to allow setting the color position in a graphics window. 24 Jan 2013. DWF.</span>       Copyright (c) 2010-2013, Fanning Software Consulting, Inc.      Used like the IDL Polyfill command:   <span class= code-prompt >IDL&gt;</span> cgColorFill, [0.25, 0.25, 0.75, 0.75, 0.25], [0.25, 0.75, 0.75, 0.25, 0.25], $ <span class= code-output >            /NORMAL, COLOR='blue'</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgcolorfill.html", "cgcolorfill.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgcolorfill.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgcolorfill.html#cgColorFill", "cgColorFill", 'routine in <a href="idlastro/coyote/cgcolorfill.html">cgcolorfill.pro</a>', "cgcolorfill.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgColorFill", " Provides a device-independent and color-model-independent way to fill a polygon  with a particular color. This is a wrapper to the PolyFill command in IDL.   The program requires the Coyote Library  to be installed on your machine.   ", "COLOR         The name of the fill color. Color names are those used with cgColor.          This value can also be a long integer or an index into the current color          table.  NORMAL         Set to indicate the polygon vertices are in normalized coordinates.  DEVICE         Set to indicate the polygon vertices are in device coordinates.  WINDOW         Set this keyword to add the command to the current cgWindow application.  _REF_EXTRA         Any other keywords to the IDL POLYFILL command may be used.   x         A vector argument providing the X coordinates of the points to be connected.          The vector must contain at least three elements. If only one argument is          specified, X must be an array of either two or three vectors (i.e., (2,*)          or (3,*)). In this special case, the vector X[0,*] specifies the X values,          X[1,*] specifies Y, and X[2,*] contain the Z values.  y         A vector argument providing the Y coordinates of the points to be connected.          Y must contain at least three elements.  z         An optional vector argument providing the Z coordinates of the points to be          connected. Z must contain at least three elements.   ", "Graphics", "     Change History: <span class= code-output >  Written, 24 December 2010. DWF.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >  Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >  Added WINDOW keyword. 24 Jan 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.      Used like the IDL Polyfill command:   <span class= code-prompt >IDL&gt;</span> cgColorFill, [0.25, 0.25, 0.75, 0.75, 0.25], [0.25, 0.75, 0.75, 0.25, 0.25], $ <span class= code-output >            /NORMAL, COLOR='blue'</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgconlevels.html", "cgconlevels.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgconlevels.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgconlevels.html#cgConLevels", "cgConLevels", 'routine in <a href="coyote/cgconlevels.html">cgconlevels.pro</a>', "cgconlevels.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgConLevels", " This program is designed to create  nicely formatted  contour levels for use in  contour plots. The idea is to be able to produce evenly spaced contour intervals  with the contour levels rounded off to the preferred degree of accuracy. The program  will make a  guess  as to how to do this, but users can also take control of the  process if the results are not pleasing enough.   There is no claim that this program always produces the best results. It is more  of a tool that can produce decent result in many situations.   The program requires the Coyote Library  to be installed on your machine.   ", "FACTOR         The program makes a  guess  at how to best round the levels in the data          presented to it. This guess is not always what the user wants. This keyword          allows the user to  fine tune  the guess, so that it behaves better. See the          examples for details on how this keyword can be used. There is some danger,          when using the factor keyword that the results will be terrible. Don't dismay!          Just try something else.  MAXVALUE         Normally, the levels are calculated using the minimum and maximum values          of the input data. The maximum value used in the calculation can be replaced          with this value, if you wish. If both the MinValue and MaxValue keywords          are used, you do not need to pass the data parameter.  MINMAX         The actual minimum and maximum values used to calculate the levels.  MINVALUE         Normally, the levels are calculated using the minimum and maximum values          of the input data. The minimum value used in the calculation can be replaced          with this value, if you wish.  NLEVELS         The number of contour levels desired.  SILENT         Set this keyword if you want the program to remain  silent  in the face of          errors. If this keyword is set, the user should rely on the Success keyword          to determine whether the program completed its work.  STEP         The step size actually used in the program to calculate the levels.  SUCCESS         Upon return, will contain a 1 if the program executed succesfully and          a 0 otherwise.   data         The data for which contour levels are desired.   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written, 8 December 2011. David W. Fanning</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Here is the normal way a contour plot might be created: <span class= code-output >   cgDisplay, WID=0</span> <span class= code-output >   data = cgScaleVector(cgDemoData(2), 0.1, 4534.5)</span> <span class= code-output >   cgLoadCT, 33, NColors=10, Bottom=1</span> <span class= code-output >   cgContour, data, NLevels=10, /Fill, /Outline, $</span> <span class= code-output >      Position=[0.1, 0.1, 0.9, 0.75], C_Colors=Indgen(10)+1</span> <span class= code-output >   cgColorbar, NColors=9, Bottom=1, /Discrete, /Fit, $</span> <span class= code-output >      Range=[Min(data), Max(data)], OOB_High=10, OOB_Low='white'</span>     Here is how the same plot might be created with cgConLevels     to produce contour levels at 500 step intervals: <span class= code-output >   cgDisplay, WID=1</span> <span class= code-output >   data = cgScaleVector(cgDemoData(2), 0.1, 4534.5)</span> <span class= code-output >   cgLoadCT, 33, NColors=10, Bottom=1</span> <span class= code-output >   levels = cgConLevels(data, Factor=100, MINVALUE=0)</span> <span class= code-output >   cgContour, data, Levels=levels, /Fill, /Outline, $</span> <span class= code-output >      Position=[0.1, 0.1, 0.9, 0.75], C_Colors=Indgen(10)+1</span> <span class= code-output >   cgColorbar, NColors=9, Bottom=1, /Discrete, /Fit, $</span> <span class= code-output >      Range=[Min(levels), Max(levels)], OOB_High=10, OOB_Low='white'</span>     In this example, the data is scaled so that it is a bit more perverse.     The levels have been chosen so they round in the third decimal place: <span class= code-output >   cgDisplay, WID=2</span> <span class= code-output >   data = cgScaleVector(cgDemoData(2), 0.153, 0.986)</span> <span class= code-output >   cgLoadCT, 33, NColors=10, Bottom=1</span> <span class= code-output >   levels = cgConLevels(data)</span> <span class= code-output >   cgContour, data, Levels=levels, /Fill, /Outline, $</span> <span class= code-output >      Position=[0.1, 0.1, 0.9, 0.75], C_Colors=Indgen(10)+1</span> <span class= code-output >   cgColorbar, NColors=9, Bottom=1, /Discrete, /Fit, $</span> <span class= code-output >      Range=[Min(levels), Max(levels)], OOB_High=10, OOB_Low='white'</span>     It might be better to have the data rounded in the second data place, to     the nearest 0.05 value. This can be done with the Factor keyword: <span class= code-output >   cgDisplay, WID=3</span> <span class= code-output >   data = cgScaleVector(cgDemoData(2), 0.153, 0.986)</span> <span class= code-output >   cgLoadCT, 33, NColors=10, Bottom=1</span> <span class= code-output >   levels = cgConLevels(data, Factor=0.05)</span> <span class= code-output >   cgContour, data, Levels=levels, /Fill, /Outline, $</span> <span class= code-output >      Position=[0.1, 0.1, 0.9, 0.75], C_Colors=Indgen(10)+1</span> <span class= code-output >   cgColorbar, NColors=9, Bottom=1, /Discrete, /Fit, $</span> <span class= code-output >      Range=[Min(levels), Max(levels)], OOB_High=10, OOB_Low='white'</span>       A vector of contour levels of the requested number. Each level is      rounded to a predefined or specified degree of accuracy.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcontainer__define.html", "cgcontainer__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcontainer__define.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >David W. Fanning</span> <span class= code-output >1645 Sheely Drive</span> <span class= code-output >Fort Collins, CO 80526 USA</span> <span class= code-output >Phone: 970-221-0438</span> <span class= code-output >E-mail: david@idlcoyote.com</span> <span class= code-output >Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   A modified IDL container with properties needed for Coyote Graphics routines.   ", "", "Obejct Programming Utility", "     Change History: <span class= code-output >  Written, by David W. Fanning, 7 November 2011.</span> <span class= code-output >  Modified the SetProperty and GetProperty method to indicate errors if</span> <span class= code-output >     extra keywords reach them. 3 Nov 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcontainer__define.html#cgContainer::INIT", "cgContainer::INIT", 'routine in <a href="coyote/cgcontainer__define.html">cgcontainer__define.pro</a>', "cgcontainer__define.pro", "", "cgContainer::INIT", "   The object initialization method.   ", "NAME         Use this keyword to name the object. Names are often used to select objects in          program code.  UVALUE         A storage space for storing any kind of IDL variable of importance to the user.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcontainer__define.html#cgContainer::AddToTrash", "cgContainer::AddToTrash", 'routine in <a href="coyote/cgcontainer__define.html">cgcontainer__define.pro</a>', "cgcontainer__define.pro", "", "cgContainer::AddToTrash", "   Adds an object to the trash container. Any object add to the trash will    be destroyed when this object is destroyed.   ", "object      The object to be added to the trash container.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcontainer__define.html#cgContainer::FindByName", "cgContainer::FindByName", 'routine in <a href="coyote/cgcontainer__define.html">cgcontainer__define.pro</a>', "cgcontainer__define.pro", "", "cgContainer::FindByName", "   This method returns the positions (indices) of named objects in    the container.   ", "Case_Sensitive        Set this keyword to 1 to indicate a case sensitive search. By default, the         search is case insensitive.  Count         On exit, this variable will contain the number of positions returned that          meet the search criteria.  RegExp         Set this keyword to indicate that searchName is a regular expression.  _Extra         Any keywords supported by STREGEX can also be used. Requires REGEXP to be set.  searchName      The name of the object that you wish to locate in the container.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcontainer__define.html#cgContainer::GetName", "cgContainer::GetName", 'routine in <a href="coyote/cgcontainer__define.html">cgcontainer__define.pro</a>', "cgcontainer__define.pro", "", "cgContainer::GetName", "   Returns the name of the object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcontainer__define.html#cgContainer::GetProperty", "cgContainer::GetProperty", 'routine in <a href="coyote/cgcontainer__define.html">cgcontainer__define.pro</a>', "cgcontainer__define.pro", "", "cgContainer::GetProperty", "   This method allows the user to get various properties of the object. In general,    the same keywords that are used for the INIT method can be used here. Superclass    values can also be obtained.   ", "NAME         Use this keyword to name the object. Names are often used to select objects in          program code.  COUNT         Use the keyword to return the number of objects in the container.  UVALUE         Returns the user value, if any.  _REF_EXTRA         Returns the value of any keyword in the superclass object.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcontainer__define.html#cgContainer::SetProperty", "cgContainer::SetProperty", 'routine in <a href="coyote/cgcontainer__define.html">cgcontainer__define.pro</a>', "cgcontainer__define.pro", "", "cgContainer::SetProperty", "   This method allows the user to set various properties of the object. In general,    the same keywords that are used for the INIT method can be used here. Superclass    values can also be set.   ", "NAME         Use this keyword to name the object. Names are often used to select objects in          program code.  UVALUE         A storage space for storing any kind of IDL variable of importance to the user.  _REF_EXTRA         Any superclass keyword can be set here.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcontainer__define.html#cgContainer::CLEANUP", "cgContainer::CLEANUP", 'routine in <a href="coyote/cgcontainer__define.html">cgcontainer__define.pro</a>', "cgcontainer__define.pro", "", "cgContainer::CLEANUP", "   This is the clean-up routine for the object.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcontainer__define.html#cgContainer__Define", "cgContainer__Define", 'routine in <a href="coyote/cgcontainer__define.html">cgcontainer__define.pro</a>', "cgcontainer__define.pro", "", "cgContainer__Define", "   This is the class definition module. Structures used to manipulate    map projection and map datum information are also created here.   ", "class       Occasionally, it is useful to have an object class definition as        a structure variable. Using this output keyword will allow that.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgcontour.html", "cgcontour.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgcontour.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgcontour.html#cgContour", "cgContour", 'routine in <a href="idlastro/coyote/cgcontour.html">cgcontour.pro</a>', "cgcontour.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgContour", " The purpose of cgContour is to create a wrapper for the traditional IDL graphics  command, Contour. The Contour command has a number of deficiencies that make it  difficult to use in a modern computing environment. cgContour corrects these  deficiencies and allows the user to produce traditional contour plots in a device  and machine independent manner.   The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD        Set this keyword to add the command to an cgWindow. Setting this keyword         automatically sets the WINDOW keyword, but the command does not erase the         graphics window as it would normally.  ASPECT        Set this keyword to a floating point ratio that represents the aspect ratio         (ysize/xsize) of the resulting plot. The plot position may change as a result         of setting this keyword. Note that Aspect cannot be used when plotting with         !P.MULTI.  AXISCOLOR        If this keyword is a string, the name of the axis color.         Otherwise, the keyword is assumed to be a color index into the current color table.  AXESCOLOR        Provisions for bad spellers.  BACKGROUND        If this keyword is a string, the name of the background color.         Otherwise, the keyword is assumed to be a color index into the current color table.  C_CHARSIZE        The character size of the annotations used on the contour lines themselves.         By default, 75% of Charsize.  C_COLORS        Set to the index values of the contour colors or to named colors. Must contain         the same number of colors as the number of requested contour levels.  C_LABELS        A vector that specifies which contour levels to label. If used, the LABEL         keyword is ignored.  CELL_FILL        Set to indicate filled contours should be created using the  cell fill  method.         This keyword should always be set if displaying filled contours on map projections         or if missing data is present in the data you are contouring.  CHARSIZE        The character size for axes annotations. Uses cgDefCharSize to select default         character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR        If this keyword is a string, the name of the data color. By default, same as AXISCOLOR.         Otherwise, the keyword is assumed to be a color index into the current color table.  FILL        Set to indicate filled contours should be created.  FONT        The type of font desired for axis annotation.  IRREGULAR        If this keyword is set, the data, x, and y input parameters are taken to be         irregularly gridded data, the the data is gridded for use in the contour plot         using the Triangulate and Trigrid method. The resolution of the gridded output         is set by the RESOLUTION keyword.  LABEL        An number that tells how to label contour levels. A 0 means         no contour levels are labelled. A 1 (the default) means all contour levels are         labelled. A 2 means label every 2nd contour level is labelled. A 3 means every         3rd contour level is labelled, and so on.  LAYOUT        This keyword specifies a grid with a graphics window and determines where the         graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].         The grid is determined by the number of columns (ncolumns) by the number of         rows (nrows). The location of the graphic is determined by the third number. The         grid numbering starts in the upper left (1) and goes sequentually by column and then         by row.  LEVELS        A vector of data levels to contour. If used, NLEVELS is ignored. If missing,         NLEVELS is used to construct N equally-spaced contour levels.  NLEVELS        If the Contour plot LEVELS keyword is not used, this keyword will produce this         number of equally spaced contour intervals. Unlike the Contour NLEVELS keyword,         this keyword actually works!  NOCLIP        Normally, the plot is clipped to the axes boundaries. Setting this keyword prevents         such clipping. Normally, this keyword is only used when there is a problem displaying         contour plots in 3D space.  NOERASE        Set this keyword to prevent the window from erasing the contents before displaying         the contour plot.  MAP_OBJECT        If you are overplotting (OVERPLOT=1) on a map projection set up with Map_Proj_Init         and using projected meter space, rather than lat/lon space, then you can use this         keyword to provide a cgMap object that will allow you to convert the x and y         grid parameters from longitude and latitude, respectively, to projected meter space         before the contour is displayed. Note, you MUST pass the x and y grid parameters         to cgContour if you are overplotting on a map projection. There is no checking to         be sure these parameters are in the correct longitude and latitude range, respectively.  MISSINGVALUE        Use this keyword to identify any missing data in the input data values.  OLEVELS        Set to a named variable to return the actual contour levels used in the program.         Unfortunately, output variables cannot be returned if the cgContour command is         being executed in a cgWindow.  ONIMAGE        If this keyword is set, and an image has been display previously with cgImage,         then the contour plot will determine the location of the image in the display         window and overplot itself onto that image.  OUTCOLOR        The color of the contour lines when the Outline keyword is used.  OUTFILENAME        If the Output keyword is set, the user will be asked to supply an output         filename, unless this keyword is set to a non-null string. In that case, the         value of this keyword will be used as the filename and there will be no dialog         presented to the user.  OUTLINE        This keyword applies only if the Fill keyword is set. It will draw the         contour lines on top of the filled contour. It draws the outline in the OutColor.  OUTPUT        Set this keyword to the type of output desired. Possible values are these: <span class= code-output >   'PS'   - PostScript file</span> <span class= code-output >   'EPS'  - Encapsulated PostScript file</span> <span class= code-output >   'PDF'  - PDF file</span> <span class= code-output >   'BMP'  - BMP raster file</span> <span class= code-output >   'GIF'  - GIF raster file</span> <span class= code-output >   'JPEG' - JPEG raster file</span> <span class= code-output >   'PNG'  - PNG raster file</span> <span class= code-output >   'TIFF' - TIFF raster file</span>         Or, you can simply set this keyword to the name of the output file, and the type of         file desired will be determined by the file extension. If you use this option, the         user will not be prompted to supply the name of the output file.          All raster file output is created through PostScript intermediate files (the         PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed         to produce anything other than PostScript output. (See cgPS2PDF and PS_END for         details.) And also note that you should NOT use this keyword when doing multiple         plots. The keyword is to be used as a convenient way to get PostScript or raster         output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  OVERPLOT        Set this keyword to overplot the contours onto a previously established         data coordinate system.  PALETTE        A (256x3) color palette containing the RGB color vectors to use for coloring contours.         Contour colors will be sampled from the color table palette into the number         of contour levels required. If the palette is NOT 256 elements in length, then         it is assumed that the length corresponds to the number of levels to be contoured.  POSITION        Set this keyword to a four-element [x0,y0,x1,y1] array giving the contour plot         position in normalized coordinates.  RESOLUTION        If the IRREGULAR keyword is set, this keyword specifies the X and Y resolution         in a two element integer array of the final gridded data that is sent to the         contour plot.  T3D        Set this keyword to use the 3D axis rotation matrix in !P.T3D.  TITLE        Set this keyword to the title of the plot.  TRADITIONAL         If this keyword is set, the traditional color scheme of a black background for          graphics windows on the display is used and PostScript files always use a white background.  WINDOW        Set this keyword to replace all the commands in the current cgWindow or to         create a new cgWindow, if one doesn't currenly exist, for displaying this command.         To create a new cgWindow if one currenly exists, use the cgWindow command  XSTYLE        If unused in the program, set to 1 to force exact axis scaling.  XTHICK        The thickness of the X axis annotations.  XTICKLEN        The length of the X tick marks. Set to a negative value to create outward         facing tick marks.  XTICKV        A vector of tick values to use with the tick marks. See IDL documentation for         graphics keywords for additional information.  XTICKS        The number of tick intervals on the X axis.  XTITLE        Set this keyword to the X title of the plot.  YSTYLE        If unused in the program, set to 1 to force exact axis scaling.  YTHICK        The thickness of the Y axis annotations.  YTICKLEN        The length of the Y tick marks. Set to a negative value to create outward         facing tick marks.  YTICKV        A vector of tick values to use with the tick marks. See IDL documentation for         graphics keywords for additional information.  YTICKS        The number of tick intervals on the Y axis.  YTITLE        Set this keyword to the Y title of the plot.  ZVALUE_REF_EXTRA        Any keyword appropriate for the IDL Contour command is allowed in the program.   data         A one- or two-dimensional array containing the values that make          up the contour surface.  x         A vector or two-dimensional array specifying the X coordinates for          the contour surface.  y         A vector or two-dimensional array specifying the Y coordinates for          the contour surface.   ", "Graphics", "     Change History: <span class= code-output >  Written, 11 November 2010. DWF.</span> <span class= code-output >  Restored the CELL_FILL keyword, which had been accidentally removed in</span> <span class= code-output >     the earlier version. 12 November 2010. DWF.</span> <span class= code-output >  Add the ability to specify the contour colors as color names. 16 November 2010. DWF.</span> <span class= code-output >  Now setting decomposition state by calling SetDecomposedState. 16 November 2010. DWF.</span> <span class= code-output >  Final color table restoration skipped in Z-graphics buffer. 17 November 2010. DWF.</span> <span class= code-output >  Background keyword now applies in PostScript file as well. 17 November 2010. DWF.</span> <span class= code-output >  Many changes after BACKGROUND changes to get !P.MULTI working again! 18 November 2010. DWF.</span> <span class= code-output >  Fixed a small problem with the OVERPLOT keyword. 18 Nov 2010. DWF.</span> <span class= code-output >  Changes so that color variables don't change type. 23 Nov 2010. DWF.</span> <span class= code-output >  Added WINDOW keyword to allow graphic to be displayed in a resizable graphics window. 8 Dec 2010. DWF</span> <span class= code-output >  Modifications to allow cgContour to be drop-in replacement for old Contour commands in</span> <span class= code-output >      indexed color mode. 24 Dec 2010. DWF.</span> <span class= code-output >  Previous changes introduced problems with OVERPLOT that have now been fixed. 28 Dec 2010. DWF.</span> <span class= code-output >  Set NOERASE keyword from !P.NoErase system variable when appropriate. 28 Dec 2010. DWF.</span> <span class= code-output >  Additional problems with NOERASE discovered and solved. 29 Dec 2010. DWF.</span> <span class= code-output >  Change to DECOMPOSED color was using incorrect color tables. 29 Dec 2010. DWF.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >  Still working on getting contour colors to work in decomposed color mode in all</span> <span class= code-output >       circumstances. 2 Jan 2011. DWF.</span> <span class= code-output >  Fixed problem with FILL when no contour colors (C_COLORS) are specified. 3 Jan 2011. DWF.</span> <span class= code-output >  Fixed a problem that preventing output keyword (e.g., PATH_INFO) from being returned properly.</span> <span class= code-output >       3 Jan 2011. DWF.</span> <span class= code-output >  Fixed a problem calculating NLEVELS when LEVELS keyword was used instead. 3 Jan 2011. DWF.</span> <span class= code-output >  TVLCT commands protected from NULL device. 4 Jan 2011. DWF.</span> <span class= code-output >  Fixed a no color problem when CELL_FILL was set. 11 Jan 2011. DWF.</span> <span class= code-output >  Fixed a problem with overlaying filled contours with /OVERPLOT. 11 Jan 2011. DWF.</span> <span class= code-output >  Selecting character size now with cgDefCharSize. 11 Jan 2011. DWF.</span> <span class= code-output >  Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >  Fixed a problem in which I assumed the background color was a string. 18 Jan 2011. DWF.</span> <span class= code-output >  Added ADDCMD keyword. 26 Jan 2011. DWF.</span> <span class= code-output >  Added LAYOUT keyword. 28 Jan 2011. DWF.</span> <span class= code-output >  Added PALETTE keyword. 4 Feb 2011. DWF.</span> <span class= code-output >  Color table vectors must be obtained AFTER loading the color palette. 6 March 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Modifications to allow palettes of less than 256 elememts in length to be used. 1 April 2011. DWF.</span> <span class= code-output >  Modifications to repair axes and tickmarks when creating filled contour plots. 28 May 2011. DWF.</span> <span class= code-output >  Whoops! Last fix shouldn't apply to OVERPLOTTING. Fixed. 22 June 2011. DWF.</span> <span class= code-output >  Still more work to get axes overplotting to work correct. 5 July 2011. DWF.</span> <span class= code-output >  Added an ONIMAGE keyword that allows the contours to be overplotted on top of an image that</span> <span class= code-output >     has been displayed with cgImage. This requires that the SAVE keyword is set in the</span> <span class= code-output >     cgImage call.</span> <span class= code-output >  Improved error handling. 26 Aug 2011. DWF.</span> <span class= code-output >  Got the data type correct in the part of the code that creates levels. 6 Sept 2011. DWF.</span> <span class= code-output >  Small change to allow cgWindow to set the current graphics window if it is the only</span> <span class= code-output >     window on the display. 15 Sept 2011. DWF.</span> <span class= code-output >  Had to add XTICKV, YTICKV, XTICKS, and YTICKS keywords to get repaired axes to work</span> <span class= code-output >      properly on filled contour plots. There may be other keywords needed, but I am</span> <span class= code-output >      going to add them on an as-needed basis. 30 Sept 2011. DWF.</span> <span class= code-output >  Other keywords WERE needed! I added XTICKLEN and YTICKLEN keywords to the repaired axes</span> <span class= code-output >      code. 3 Oct 2011. DWF.</span> <span class= code-output >  Change from 15 Sept 2011 forgot to include the possibility of pixmap windows. Algorithm</span> <span class= code-output >      made more robust. 27 Oct 2011. DWF.</span> <span class= code-output >  There was a problem with axes when plotting contours in 3D that has been fixed. 18 Nov 2011. DWF.</span> <span class= code-output >  Added OLEVELS keyword. 7 Dec 2011. DWF.</span> <span class= code-output >  Added OUTLINE and OUTCOLOR keywords. 8 Dec 2011. DWF.</span> <span class= code-output >  Modified the way the axes are drawn when given a negative tick length. 9 Dec 2011. DWF.</span> <span class= code-output >  Added the ability to send the output directly to a file via the OUTPUT keyword. 9 Dec 2011, DWF.</span> <span class= code-output >  PostScript, PDF, and Imagemagick parameters can now be tailored with cgWindow_SetDefs. 14 Dec 2001. DWF.</span> <span class= code-output >  Made sure the OUTLINE keyword works with CELL_FILL, too. 16 Dec 2011. DWF.</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >  Added MAP_OBJECT keyword. 28 Dec 2011. DWF.</span> <span class= code-output >  Changes to allow better default colors, based on changes to cgColor and cgDefaultColor. 1 Feb 2012. DWF.</span> <span class= code-output >  Axis repair for filled contour plots (done with AXIS) results in incorrect tick labeling with</span> <span class= code-output >      date/time axes. Replaced repair code with actual Contour command. 9 March 2012. DWF.</span> <span class= code-output >  Fixed a problem with color palettes by defining NLEVELS according to the number of colors</span> <span class= code-output >      in the palette. 19 March 2012. DWF.</span> <span class= code-output >  Now allowing the user to draw in the  background  color, if the COLOR or AXISCOLOR is  BACKGROUND . 19 March 2012. DWF.</span> <span class= code-output >  The axis repair change on 9 March was not working in multi plots because the plot was already</span> <span class= code-output >      advanced. Added a fix to make sure the repair is to the correct multi plot. 20 April 2012. DWF.</span> <span class= code-output >  Added an ASPECT keyword to maintain the program aspect ratio. 12 July 2012. DWF.</span> <span class= code-output >  Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.      Use as you would use the IDL CONTOUR command: <span class= code-output >  data = dist(51)</span> <span class= code-output >  cgContour, data</span> <span class= code-output >  LoadCT, 33</span> <span class= code-output >  cgContour, data, /FILL</span> <span class= code-output >  cgContour, data, /OVERPLOT</span>     If you wish to overplot on top of an image, use the ONIMAGE keyword, rather     than the OVERPLOT keyword:        cgImage, data, /SCALE, XRANGE=[-10, 10], YRANGE=[-5,5], /AXES        cgContour, data, /ONIMAGE         See Device Independent Contour Plots        for additional examples.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcontour.html", "cgcontour.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcontour.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcontour.html#cgContour", "cgContour", 'routine in <a href="coyote/cgcontour.html">cgcontour.pro</a>', "cgcontour.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgContour", " The purpose of cgContour is to create a wrapper for the traditional IDL graphics  command, Contour. The Contour command has a number of deficiencies that make it  difficult to use in a modern computing environment. cgContour corrects these  deficiencies and allows the user to produce traditional contour plots in a device  and machine independent manner.      The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD        Set this keyword to add the command to an cgWindow. Setting this keyword         automatically sets the WINDOW keyword, but the command does not erase the         graphics window as it would normally.  ASPECT        Set this keyword to a floating point ratio that represents the aspect ratio         (ysize/xsize) of the resulting plot. The plot position may change as a result         of setting this keyword. Note that Aspect cannot be used when plotting with         !P.MULTI.  AXISCOLOR        If this keyword is a string, the name of the axis color.         Otherwise, the keyword is assumed to be a color index into the current color table.  AXESCOLOR        Provisions for bad spellers.  BACKGROUND        If this keyword is a string, the name of the background color.         Otherwise, the keyword is assumed to be a color index into the current color table.  C_ANNOTATION        The label to be drawn on each contour. Normally contours are labeled with their         value. This vector of strings may substitute for those values.  C_CHARSIZE        The character size of the annotations used on the contour lines themselves.         By default, 75% of Charsize.  C_COLORS        Set to the index values of the contour colors or to named colors. Must contain         the same number of colors as the number of requested contour levels.  C_LABELS        A vector that specifies which contour levels to label. If used, the LABEL         keyword is ignored.  C_ORIENTATIONC_SPACINGCELL_FILL        Set to indicate filled contours should be created using the  cell fill  method.         This keyword should always be set if displaying filled contours on map projections         or if missing data is present in the data you are contouring.  CHARSIZE        The character size for axes annotations. Uses cgDefCharSize to select default         character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR        If this keyword is a string, the name of the data color. By default, same as AXISCOLOR.         Otherwise, the keyword is assumed to be a color index into the current color table.  FILL        Set to indicate filled contours should be created.  FONT        The type of font desired for axis annotation.  ISOTROPIC         Set this keyword to set the Aspect keyword to the plot aspect ratio that preserves          identical scaling for the X and Y axes. This keyword cannot be used with multiple          contour plots on the page.  IRREGULAR        If this keyword is set, the data, x, and y input parameters are taken to be         irregularly gridded data, the the data is gridded for use in the contour plot         using the Triangulate and Trigrid method. The resolution of the gridded output         is set by the RESOLUTION keyword.  LABEL        An number that tells how to label contour levels. A 0 means         no contour levels are labelled. A 1 (the default) means all contour levels are         labelled. A 2 means label every 2nd contour level is labelled. A 3 means every         3rd contour level is labelled, and so on.  LAYOUT        This keyword specifies a grid with a graphics window and determines where the         graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].         The grid is determined by the number of columns (ncolumns) by the number of         rows (nrows). The location of the graphic is determined by the third number. The         grid numbering starts in the upper left (1) and goes sequentually by column and then         by row.  LEVELS        A vector of data levels to contour. If used, NLEVELS is ignored. If missing,         NLEVELS is used to construct N equally-spaced contour levels.  NLEVELS        If the Contour plot LEVELS keyword is not used, this keyword will produce this         number of equally spaced contour intervals. Unlike the Contour NLEVELS keyword,         this keyword actually works!  NOCLIP        Normally, the plot is clipped to the axes boundaries. Setting this keyword prevents         such clipping. Normally, this keyword is only used when there is a problem displaying         contour plots in 3D space.  NOERASE        Set this keyword to prevent the window from erasing the contents before displaying         the contour plot.  MAP_OBJECT        If you are overplotting (OVERPLOT=1) on a map projection set up with Map_Proj_Init         and using projected meter space, rather than lat/lon space, then you can use this         keyword to provide a cgMap object that will allow you to convert the x and y         grid parameters from longitude and latitude, respectively, to projected meter space         before the contour is displayed. Note, you MUST pass the x and y grid parameters         to cgContour if you are overplotting on a map projection. There is no checking to         be sure these parameters are in the correct longitude and latitude range, respectively.  MISSINGVALUE        Use this keyword to identify any missing data in the input data values.  OLEVELS        Set to a named variable to return the actual contour levels used in the program.         Unfortunately, output variables cannot be returned if the cgContour command is         being executed in a cgWindow.  ONIMAGE        If this keyword is set, and an image has been display previously with cgImage,         then the contour plot will determine the location of the image in the display         window and overplot itself onto that image.  OUTCOLOR        The color of the contour lines when the Outline keyword is used.  OUTFILENAME        If the Output keyword is set, the user will be asked to supply an output         filename, unless this keyword is set to a non-null string. In that case, the         value of this keyword will be used as the filename and there will be no dialog         presented to the user.  OUTLINE        This keyword applies only if the Fill keyword is set. It will draw the         contour lines on top of the filled contour. It draws the outline in the OutColor.  OUTPUT        Set this keyword to the type of output desired. Possible values are these: <span class= code-output >   'PS'   - PostScript file</span> <span class= code-output >   'EPS'  - Encapsulated PostScript file</span> <span class= code-output >   'PDF'  - PDF file</span> <span class= code-output >   'BMP'  - BMP raster file</span> <span class= code-output >   'GIF'  - GIF raster file</span> <span class= code-output >   'JPEG' - JPEG raster file</span> <span class= code-output >   'PNG'  - PNG raster file</span> <span class= code-output >   'TIFF' - TIFF raster file</span>         Or, you can simply set this keyword to the name of the output file, and the type of         file desired will be determined by the file extension. If you use this option, the         user will not be prompted to supply the name of the output file.          All raster file output is created through PostScript intermediate files (the         PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed         to produce anything other than PostScript output. (See cgPS2PDF and PS_END for         details.) And also note that you should NOT use this keyword when doing multiple         plots. The keyword is to be used as a convenient way to get PostScript or raster         output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  OVERPLOT        Set this keyword to overplot the contours onto a previously established         data coordinate system.  PALETTE        A (256x3) color palette containing the RGB color vectors to use for coloring contours.         Contour colors will be sampled from the color table palette into the number         of contour levels required. If the palette is NOT 256 elements in length, then         it is assumed that the length corresponds to the number of levels to be contoured.  POSITION        Set this keyword to a four-element [x0,y0,x1,y1] array giving the contour plot         position in normalized coordinates.  RESOLUTION        If the IRREGULAR keyword is set, this keyword specifies the X and Y resolution         in a two element integer array of the final gridded data that is sent to the         contour plot.  T3D        Set this keyword to use the 3D axis rotation matrix in !P.T3D.  TITLE        Set this keyword to the title of the plot.  TRADITIONAL         If this keyword is set, the traditional color scheme of a black background for          graphics windows on the display is used and PostScript files always use a white background.  WINDOW        Set this keyword to replace all the commands in the current cgWindow or to         create a new cgWindow, if one doesn't currenly exist, for displaying this command.         To create a new cgWindow if one currenly exists, use the cgWindow command  XSTYLE        If unused in the program, set to 1 to force exact axis scaling.  XTHICK        The thickness of the X axis annotations.  XTICKLEN        The length of the X tick marks. Set to a negative value to create outward         facing tick marks.  XTICKV        A vector of tick values to use with the tick marks. See IDL documentation for         graphics keywords for additional information.  XTICKS        The number of tick intervals on the X axis.  XTITLE        Set this keyword to the X title of the plot.  YSTYLE        If unused in the program, set to 1 to force exact axis scaling.  YTHICK        The thickness of the Y axis annotations.  YTICKLEN        The length of the Y tick marks. Set to a negative value to create outward         facing tick marks.  YTICKV        A vector of tick values to use with the tick marks. See IDL documentation for         graphics keywords for additional information.  YTICKS        The number of tick intervals on the Y axis.  YTITLE        Set this keyword to the Y title of the plot.  ZVALUE_REF_EXTRA        Any keyword appropriate for the IDL Contour command         is allowed in the program.   data         A one- or two-dimensional array containing the values that make          up the contour surface.  x         A vector or two-dimensional array specifying the X coordinates for          the contour surface.  y         A vector or two-dimensional array specifying the Y coordinates for          the contour surface.   ", "Graphics", "     Change History: <span class= code-output >  Written, 11 November 2010. DWF.</span> <span class= code-output >  Restored the CELL_FILL keyword, which had been accidentally removed in</span> <span class= code-output >     the earlier version. 12 November 2010. DWF.</span> <span class= code-output >  Add the ability to specify the contour colors as color names. 16 November 2010. DWF.</span> <span class= code-output >  Now setting decomposition state by calling SetDecomposedState. 16 November 2010. DWF.</span> <span class= code-output >  Final color table restoration skipped in Z-graphics buffer. 17 November 2010. DWF.</span> <span class= code-output >  Background keyword now applies in PostScript file as well. 17 November 2010. DWF.</span> <span class= code-output >  Many changes after BACKGROUND changes to get !P.MULTI working again! 18 November 2010. DWF.</span> <span class= code-output >  Fixed a small problem with the OVERPLOT keyword. 18 Nov 2010. DWF.</span> <span class= code-output >  Changes so that color variables don't change type. 23 Nov 2010. DWF.</span> <span class= code-output >  Added WINDOW keyword to allow graphic to be displayed in a resizable graphics window. 8 Dec 2010. DWF</span> <span class= code-output >  Modifications to allow cgContour to be drop-in replacement for old Contour commands in</span> <span class= code-output >      indexed color mode. 24 Dec 2010. DWF.</span> <span class= code-output >  Previous changes introduced problems with OVERPLOT that have now been fixed. 28 Dec 2010. DWF.</span> <span class= code-output >  Set NOERASE keyword from !P.NoErase system variable when appropriate. 28 Dec 2010. DWF.</span> <span class= code-output >  Additional problems with NOERASE discovered and solved. 29 Dec 2010. DWF.</span> <span class= code-output >  Change to DECOMPOSED color was using incorrect color tables. 29 Dec 2010. DWF.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >  Still working on getting contour colors to work in decomposed color mode in all</span> <span class= code-output >       circumstances. 2 Jan 2011. DWF.</span> <span class= code-output >  Fixed problem with FILL when no contour colors (C_COLORS) are specified. 3 Jan 2011. DWF.</span> <span class= code-output >  Fixed a problem that preventing output keyword (e.g., PATH_INFO) from being returned properly.</span> <span class= code-output >       3 Jan 2011. DWF.</span> <span class= code-output >  Fixed a problem calculating NLEVELS when LEVELS keyword was used instead. 3 Jan 2011. DWF.</span> <span class= code-output >  TVLCT commands protected from NULL device. 4 Jan 2011. DWF.</span> <span class= code-output >  Fixed a no color problem when CELL_FILL was set. 11 Jan 2011. DWF.</span> <span class= code-output >  Fixed a problem with overlaying filled contours with /OVERPLOT. 11 Jan 2011. DWF.</span> <span class= code-output >  Selecting character size now with cgDefCharSize. 11 Jan 2011. DWF.</span> <span class= code-output >  Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >  Fixed a problem in which I assumed the background color was a string. 18 Jan 2011. DWF.</span> <span class= code-output >  Added ADDCMD keyword. 26 Jan 2011. DWF.</span> <span class= code-output >  Added LAYOUT keyword. 28 Jan 2011. DWF.</span> <span class= code-output >  Added PALETTE keyword. 4 Feb 2011. DWF.</span> <span class= code-output >  Color table vectors must be obtained AFTER loading the color palette. 6 March 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Modifications to allow palettes of less than 256 elememts in length to be used. 1 April 2011. DWF.</span> <span class= code-output >  Modifications to repair axes and tickmarks when creating filled contour plots. 28 May 2011. DWF.</span> <span class= code-output >  Whoops! Last fix shouldn't apply to OVERPLOTTING. Fixed. 22 June 2011. DWF.</span> <span class= code-output >  Still more work to get axes overplotting to work correct. 5 July 2011. DWF.</span> <span class= code-output >  Added an ONIMAGE keyword that allows the contours to be overplotted on top of an image that</span> <span class= code-output >     has been displayed with cgImage. This requires that the SAVE keyword is set in the</span> <span class= code-output >     cgImage call.</span> <span class= code-output >  Improved error handling. 26 Aug 2011. DWF.</span> <span class= code-output >  Got the data type correct in the part of the code that creates levels. 6 Sept 2011. DWF.</span> <span class= code-output >  Small change to allow cgWindow to set the current graphics window if it is the only</span> <span class= code-output >     window on the display. 15 Sept 2011. DWF.</span> <span class= code-output >  Had to add XTICKV, YTICKV, XTICKS, and YTICKS keywords to get repaired axes to work</span> <span class= code-output >      properly on filled contour plots. There may be other keywords needed, but I am</span> <span class= code-output >      going to add them on an as-needed basis. 30 Sept 2011. DWF.</span> <span class= code-output >  Other keywords WERE needed! I added XTICKLEN and YTICKLEN keywords to the repaired axes</span> <span class= code-output >      code. 3 Oct 2011. DWF.</span> <span class= code-output >  Change from 15 Sept 2011 forgot to include the possibility of pixmap windows. Algorithm</span> <span class= code-output >      made more robust. 27 Oct 2011. DWF.</span> <span class= code-output >  There was a problem with axes when plotting contours in 3D that has been fixed. 18 Nov 2011. DWF.</span> <span class= code-output >  Added OLEVELS keyword. 7 Dec 2011. DWF.</span> <span class= code-output >  Added OUTLINE and OUTCOLOR keywords. 8 Dec 2011. DWF.</span> <span class= code-output >  Modified the way the axes are drawn when given a negative tick length. 9 Dec 2011. DWF.</span> <span class= code-output >  Added the ability to send the output directly to a file via the OUTPUT keyword. 9 Dec 2011, DWF.</span> <span class= code-output >  PostScript, PDF, and Imagemagick parameters can now be tailored with cgWindow_SetDefs. 14 Dec 2001. DWF.</span> <span class= code-output >  Made sure the OUTLINE keyword works with CELL_FILL, too. 16 Dec 2011. DWF.</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >  Added MAP_OBJECT keyword. 28 Dec 2011. DWF.</span> <span class= code-output >  Changes to allow better default colors, based on changes to cgColor and cgDefaultColor. 1 Feb 2012. DWF.</span> <span class= code-output >  Axis repair for filled contour plots (done with AXIS) results in incorrect tick labeling with</span> <span class= code-output >      date/time axes. Replaced repair code with actual Contour command. 9 March 2012. DWF.</span> <span class= code-output >  Fixed a problem with color palettes by defining NLEVELS according to the number of colors</span> <span class= code-output >      in the palette. 19 March 2012. DWF.</span> <span class= code-output >  Now allowing the user to draw in the  background  color, if the COLOR or AXISCOLOR is  BACKGROUND . 19 March 2012. DWF.</span> <span class= code-output >  The axis repair change on 9 March was not working in multi plots because the plot was already</span> <span class= code-output >      advanced. Added a fix to make sure the repair is to the correct multi plot. 20 April 2012. DWF.</span> <span class= code-output >  Added an ASPECT keyword to maintain the program aspect ratio. 12 July 2012. DWF.</span> <span class= code-output >  Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >  Added C_ANNOTATION keyword. 10 Nov 2012. DWF.</span> <span class= code-output >  Modified the way default colors are selected when the background color is  white . 4 Dec 2012. DWF.</span> <span class= code-output >  Making more effort to set the CELL_FILL keyword instead of FILL if filling contours on maps. 7 Jan 2013. DWF.</span> <span class= code-output >  Added C_ORIENTATION and C_SPACING keywords and modified the program to allow line filling. 28 Jan 2013. DWF.</span> <span class= code-output >  Added ISOTROPIC keyword. 27 June 2013. DWF.</span>       Copyright (c) 2010-2013, Fanning Software Consulting, Inc.      Use as you would use the IDL CONTOUR command: <span class= code-output >  data = dist(51)</span> <span class= code-output >  cgContour, data</span> <span class= code-output >  LoadCT, 33</span> <span class= code-output >  cgContour, data, /FILL</span> <span class= code-output >  cgContour, data, /OVERPLOT</span>     If you wish to overplot on top of an image, use the ONIMAGE keyword, rather     than the OVERPLOT keyword:        cgImage, data, /SCALE, XRANGE=[-10, 10], YRANGE=[-5,5], /AXES        cgContour, data, /ONIMAGE         See Device Independent Contour Plots        for additional examples.   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgcontrol.html", "cgcontrol.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgcontrol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgcontrol.html#cgControl", "cgControl", 'routine in <a href="idlastro/coyote/cgcontrol.html">cgcontrol.pro</a>', "cgcontrol.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com/</span>  ", "cgControl", "   Allows the user to set various properties of an cgWindow object. This is essentially    a wrapper to the cgWindow SetProperty method.   ", "ADJUSTSIZE         Set this keyword to adjust default character size to the display window size.  ASPECT         Set this keyword to the desired aspect ratio (ysize/xsize) of the window.  ALL         This keyword applies only to keywords that manipulate commands in the command          list (e.g., DeleteCmd). It will select all the commands in the command list to          apply the action to.  BACKGROUND         The background color of the window. Only use if the ERASEIT property is also set.  CMDINDEX         This keyword applies only to keywords that manipulate commands in the command          list (e.g., DeleteCmd). It specifies the command index number of the command          for which the action is desired.  CREATE_BMP          Set this keyword to the name of a bitmap file to create automatically from the window.           Using this keyword is a way to create a bitmap file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).           Depreciated now in favor of the Output keyword.  CREATE_GIF          Set this keyword to the name of a GIF file to create automatically from the window.           Using this keyword is a way to create a GIF file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).           Depreciated now in favor of the Output keyword.  CREATE_JPEG          Set this keyword to the name of a JPEG file to create automatically from the window.           Using this keyword is a way to create a JPEG file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).           Depreciated now in favor of the Output keyword.  CREATE_PDF          Set this keyword to the name of a PNG file to create automatically from the window.           Using this keyword is a way to create a PDF file programmatically from a cgWindow application.           The PDF file will be created via the Coyote Graphics program cgPS2PDF.           Depreciated now in favor of the Output keyword.  CREATE_PNG          Set this keyword to the name of a PNG file to create automatically from the window.           Using this keyword is a way to create a PNG file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).  CREATE_PS          Set this keyword to the name of a PostScript file to create automatically from the window.           Using this keyword is a way to create a PostScript file programmatically from a cgWindow application.           Depreciated now in favor of the Output keyword.  CREATE_TIFF          Set this keyword to the name of a TIFF file to create automatically from the window.           Using this keyword is a way to create a TIFF file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).           Depreciated now in favor of the Output keyword.  PALETTE         Use this keyword to pass in an N-by-3 (or 3-by-N) byte array containing the          R, G, and B vectors of a color table. It is probably easier to use cgLoadCT or          XCOLORS to load color tables for the window, but this is provided as another option.  DELAY         Set this keyword to the amount of  delay  you want between commands in the command list.  DELETECMD          Set this keyword to delete a command in the cgWindow. The keywords cmdIndex and All           are used in deleting the specified command.  DESTROY          Set this keyword to destroy the cgWindow program. This keyword should not be used           with other keywords.  DIMENSIONS          Set this keyword to a two-element array giving the xsize and ysize           of the draw widget.  ERASEIT         If this property is set, the cgWindow erases with the background color before          displaying the commands in the window's command list.  EXECUTE         Set this keyword to 1 to exectute the commands in the window's command list.          Set this keyword to 0 to prevent command excution. This is useful, for example,          if you want to load commands without having them be executed immediately.  GET_KEYCMDINDEX         Set this value to the number of the command (zero-based) for which you want to          obtain the keyword value. If not provided, the first command (command 0) is searched.  GET_KEYWORD         The name of the keyword whose value you want to return in get_keyvalue. The name must          be spelled EXACTLY as you used the keyword, except that case does not matter. The string          is converted to UPPERCASE to locate the proper keyword. Although it was my intention to use          this to retrieve output keyword values, this is not possible using cgWindow due to the way          Call_Procedure and keyword inheritance work.  GET_KEYVALUE         The value of the keyword specified in get_keyword. If the keyword cannot be found, this          value will be undefined. You MUST check for this before using the return variable in your program.  LISTCMDMULTI         Set this keyword to the !P.MULTI setting you want to use for the window.          !P.MULTI is set to this setting before command execution, and set back to          it's default value when the commands are finished executing.  OBJECT         If this keyword is set, the selection is assumed to be an object reference.  OUTPUT         This keyword should be set to the name of an output file. It is a short-hand way of          specifying the CREATE_*** keywords. The type of file is taken from the file name          extension.  TITLE         If this keyword is set, the selection is assumed to be a window title. All          matching is done in uppercase characters.  UPDATE         Set this keyword to zero if you do not want the updates to be done immediately          after the properties are changed.  WIDGETID         If this keyword is set, the selection is assumed to be a widget identifier.  XOMARGIN         Sets the !X.OMargin system variable when multiple plots are displayed in the window.  YOMARGIN         Sets the !Y.OMargin system variable when multiple plots are displayed in the window.   IM_DENSITY         Set this keyword to the sampling density when ImageMagick creates raster image          file from PostScript outout.  IM_RESIZE         Set this keyword to percentage that the raster image file created my ImageMagick          from PostScript output should be resized.  IM_OPTIONS         Set this keyword to any ImageMagick options you would like to pass along to the          ImageMagick convert command when creating raster image files from PostScript output.  IM_RASTER         Set this keyword to zero to create raster files using the create_png etc. keywords          directly, instead of via ImageMagick.  IM_TRANSPARENT         Set this keyword to allow ImageMagick to create transparent backgrounds when it          makes raster image files from PostScript output.  IM_WIDTH        Set this keyword to the width of the output raster file in pixel units. The height of the raster         file is set to preserve the aspect ratio of the output image. Applies only to raster images (eg         PNG, JPEG, TIFF, etc.) created from PostScript files with ImageMagick.  PDF_UNIX_CONVERT_CMD         Set this keyword to the name of an alternative UNIX command to convert PostScript to PDF.  PDF_PATH         Set this keyword to the name of the path to the Ghostscript command for converting PS to PDF.  PS_CHARSIZE         The PostScript character size.  PS_DECOMPOSED         Set this keyword to zero to set the PostScript color mode to indexed color and to          one to set the PostScript color mode to decomposed color.  PS_DELETE         Set this keyword to zero if you want to keep the PostScript output ImageMagick creates          when making raster file output.  PS_ENCAPSULATED          Set this keyword to configure PSCONFIG to produce encapsulated PostScript output by default.  PS_FONT        Set this keyword to the type of font you want to use in PostScript output. It sets the         FONT keyword on the PSConfig command. Normally, 0 (hardware fonts) or 1 (true-type fonts).  PS_METRIC          Set this keyword to configure PSCONFIG to use metric values and A4 page size in its interface.  PS_QUIET          Set this keyword to set the QUIET keyword on PS_Start.  PS_SCALE_FACTOR          Set his keyword to the PostScript scale factor you wish to use in creating PostScript output.  PS_TT_FONT        Set this keyword to the name of a true-type font to use in creating PostScript output.  RESTORE_VISUALIZATION          Set this keyword to the name of a visualization save file to restore.  SAVE_VISUALIZATION          Set this keyword to the name of a file where the visualization should be saved.  selection       Normally, a window index number of an cgWindow application. But, the selection        can be a widget identifier, an object reference, or a window title, depending on        which keywords are set. The cgWindow matching the selection has its properties set.   ", "Graphics", "     Change History:      Written, 28 January 2011. DWF.      Added CREATE_PS keyword. 16 Feb 2011. DWF.      Added PS_QUIET, GET_KEYCMDINDEX, GET_KEYWORD, and GET_KEYVALUE keywords. 17 Feb 2011. DWF.      Added im_raster and the create_... raster options. 18 Feb 2011. Jeremy Bailin      Added the ability to set and unset adjustable text size in         cgWindow with ADJUSTSIZE keyword. 24 April 2011. DWF.      Added the ability to set the dimensions of the draw widget programmatically. 14 June 2011.      Added PS_DECOMPOSED keyword to set the PostScript color mode. 30 Aug 2011. DWF.      Added SAVE_VISUALIZATION and RESTORE_VISUALIZATION keywords. 15 Sept 2011. DWF.      Added ASPECT keyword to control window aspect ratio. 9 Nov 2011. DWF.      Added CREATE_PDF, PDF_UNIX_CONVERT_CMD, and PDF_PATH keywords. 11 Dec 2011. DWF.      Added IM_WIDTH keyword. 3 April 2012. DWF.      Added the OUTPUT keyword. 3 April 2012. DWF.        Copyright (c) 2011-2012, Fanning Software Consulting, Inc.      Used to set cgWindow properties:   <span class= code-prompt >IDL&gt;</span> cgControl, Background='gray', EraseIt=1   <span class= code-prompt >IDL&gt;</span> cgControl, Multi=[0,2,2]  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcontrol.html", "cgcontrol.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcontrol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcontrol.html#cgControl", "cgControl", 'routine in <a href="coyote/cgcontrol.html">cgcontrol.pro</a>', "cgcontrol.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com/</span>  ", "cgControl", "   Allows the user to set various properties of an cgWindow object. This is essentially    a wrapper to the cgWindow SetProperty method.   ", "ADJUSTSIZE         Set this keyword to adjust default character size to the display window size.  ALL         This keyword applies only to keywords that manipulate commands in the command          list (e.g., DeleteCmd). It will select all the commands in the command list to          apply the action to.  BACKGROUND         The background color of the window. Only use if the ERASEIT property is also set.  CMDINDEX         This keyword applies only to keywords that manipulate commands in the command          list (e.g., DeleteCmd). It specifies the command index number of the command          for which the action is desired.  CREATE_BMP          Set this keyword to the name of a bitmap file to create automatically from the window.           Using this keyword is a way to create a bitmap file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).           Depreciated now in favor of the Output keyword.  CREATE_GIF          Set this keyword to the name of a GIF file to create automatically from the window.           Using this keyword is a way to create a GIF file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).           Depreciated now in favor of the Output keyword.  CREATE_JPEG          Set this keyword to the name of a JPEG file to create automatically from the window.           Using this keyword is a way to create a JPEG file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).           Depreciated now in favor of the Output keyword.  CREATE_PDF          Set this keyword to the name of a PNG file to create automatically from the window.           Using this keyword is a way to create a PDF file programmatically from a cgWindow application.           The PDF file will be created via the Coyote Graphics program cgPS2PDF.           Depreciated now in favor of the Output keyword.  CREATE_PNG          Set this keyword to the name of a PNG file to create automatically from the window.           Using this keyword is a way to create a PNG file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).  CREATE_PS          Set this keyword to the name of a PostScript file to create automatically from the window.           Using this keyword is a way to create a PostScript file programmatically from a cgWindow application.           Depreciated now in favor of the Output keyword.  CREATE_TIFF          Set this keyword to the name of a TIFF file to create automatically from the window.           Using this keyword is a way to create a TIFF file programmatically from a cgWindow application.           The raster file will be created via ImageMagick if im_raster has been set (default).           Depreciated now in favor of the Output keyword.  PALETTE         Use this keyword to pass in an N-by-3 (or 3-by-N) byte array containing the          R, G, and B vectors of a color table. It is probably easier to use cgLoadCT or          XCOLORS to load color tables for the window, but this is provided as another option.  DELAY         Set this keyword to the amount of  delay  you want between commands in the command list.  DELETECMD          Set this keyword to delete a command in the cgWindow. The keywords cmdIndex and All           are used in deleting the specified command.  DESTROY          Set this keyword to destroy the cgWindow program. This keyword should not be used           with other keywords.  DIMENSIONS          Set this keyword to a two-element array giving the xsize and ysize           of the draw widget.  ERASEIT         If this property is set, the cgWindow erases with the background color before          displaying the commands in the window's command list.  EXECUTE         Set this keyword to 1 to exectute the commands in the window's command list.          Set this keyword to 0 to prevent command excution. This is useful, for example,          if you want to load commands without having them be executed immediately.  GET_KEYCMDINDEX         Set this value to the number of the command (zero-based) for which you want to          obtain the keyword value. If not provided, the first command (command 0) is searched.  GET_KEYWORD         The name of the keyword whose value you want to return in get_keyvalue. The name must          be spelled EXACTLY as you used the keyword, except that case does not matter. The string          is converted to UPPERCASE to locate the proper keyword. Although it was my intention to use          this to retrieve output keyword values, this is not possible using cgWindow due to the way          Call_Procedure and keyword inheritance work.  GET_KEYVALUE         The value of the keyword specified in get_keyword. If the keyword cannot be found, this          value will be undefined. You MUST check for this before using the return variable in your program.  LISTCMDMULTI         Set this keyword to the !P.MULTI setting you want to use for the window.          !P.MULTI is set to this setting before command execution, and set back to          it's default value when the commands are finished executing.  OBJECT         If this keyword is set, the selection is assumed to be an object reference.  OUTPUT         This keyword should be set to the name of an output file. It is a short-hand way of          specifying the CREATE_*** keywords. The type of file is taken from the file name          extension.  TITLE         If this keyword is set, the selection is assumed to be a window title. All          matching is done in uppercase characters.  UPDATE         Set this keyword to zero if you do not want the updates to be done immediately          after the properties are changed.  WIDGETID         If this keyword is set, the selection is assumed to be a widget identifier.  XOMARGIN         Sets the !X.OMargin system variable when multiple plots are displayed in the window.  YOMARGIN         Sets the !Y.OMargin system variable when multiple plots are displayed in the window.   IM_DENSITY         Set this keyword to the sampling density when ImageMagick creates raster image          file from PostScript outout.  IM_RESIZE         Set this keyword to percentage that the raster image file created my ImageMagick          from PostScript output should be resized.  IM_OPTIONS         Set this keyword to any ImageMagick options you would like to pass along to the          ImageMagick convert command when creating raster image files from PostScript output.  IM_RASTER         Set this keyword to zero to create raster files using the create_png etc. keywords          directly, instead of via ImageMagick.  IM_TRANSPARENT         Set this keyword to allow ImageMagick to create transparent backgrounds when it          makes raster image files from PostScript output.  IM_WIDTH        Set this keyword to the width of the output raster file in pixel units. The height of the raster         file is set to preserve the aspect ratio of the output image. Applies only to raster images (eg         PNG, JPEG, TIFF, etc.) created from PostScript files with ImageMagick.  PDF_UNIX_CONVERT_CMD         Set this keyword to the name of an alternative UNIX command to convert PostScript to PDF.  PDF_PATH         Set this keyword to the name of the path to the Ghostscript command for converting PS to PDF.  PS_CHARSIZE         The PostScript character size.  PS_DECOMPOSED         Set this keyword to zero to set the PostScript color mode to indexed color and to          one to set the PostScript color mode to decomposed color.  PS_DELETE         Set this keyword to zero if you want to keep the PostScript output ImageMagick creates          when making raster file output.  PS_ENCAPSULATED          Set this keyword to configure PSCONFIG to produce encapsulated PostScript output by default.  PS_FONT        Set this keyword to the type of font you want to use in PostScript output. It sets the         FONT keyword on the PSConfig command. Normally, 0 (hardware fonts) or 1 (true-type fonts).  PS_METRIC          Set this keyword to configure PSCONFIG to use metric values and A4 page size in its interface.  PS_QUIET          Set this keyword to set the QUIET keyword on PS_Start.  PS_SCALE_FACTOR          Set his keyword to the PostScript scale factor you wish to use in creating PostScript output.  PS_TT_FONT        Set this keyword to the name of a true-type font to use in creating PostScript output.  RESIZE        A two element array giving the xsize and ysize of the resulting graphics window (the draw widget).         If a scalar is passed, the same value will be used for both xsize and ysize.  RESTORE_VISUALIZATION          Set this keyword to the name of a visualization save file to restore.  SAVE_VISUALIZATION          Set this keyword to the name of a file where the visualization should be saved.  selection       Normally, a window index number of an cgWindow application. But, the selection        can be a widget identifier, an object reference, or a window title, depending on        which keywords are set. The cgWindow matching the selection has its properties set.   ", "Graphics", "     Change History:      Written, 28 January 2011. DWF.      Added CREATE_PS keyword. 16 Feb 2011. DWF.      Added PS_QUIET, GET_KEYCMDINDEX, GET_KEYWORD, and GET_KEYVALUE keywords. 17 Feb 2011. DWF.      Added im_raster and the create_... raster options. 18 Feb 2011. Jeremy Bailin      Added the ability to set and unset adjustable text size in         cgWindow with ADJUSTSIZE keyword. 24 April 2011. DWF.      Added the ability to set the dimensions of the draw widget programmatically. 14 June 2011.      Added PS_DECOMPOSED keyword to set the PostScript color mode. 30 Aug 2011. DWF.      Added SAVE_VISUALIZATION and RESTORE_VISUALIZATION keywords. 15 Sept 2011. DWF.      Added ASPECT keyword to control window aspect ratio. 9 Nov 2011. DWF.      Added CREATE_PDF, PDF_UNIX_CONVERT_CMD, and PDF_PATH keywords. 11 Dec 2011. DWF.      Added IM_WIDTH keyword. 3 April 2012. DWF.      Added the OUTPUT keyword. 3 April 2012. DWF.      Removed ASPECT keyword, which never worked, and added RESIZE keyword. 13 Aug 2013. DWF.        Copyright (c) 2011-2013, Fanning Software Consulting, Inc.      Used to set cgWindow properties:   <span class= code-prompt >IDL&gt;</span> cgControl, Background='gray', EraseIt=1   <span class= code-prompt >IDL&gt;</span> cgControl, Multi=[0,2,2]  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgcoord__define.html", "cgcoord__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcoord__define.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >David W. Fanning</span> <span class= code-output >1645 Sheely Drive</span> <span class= code-output >Fort Collins, CO 80526 USA</span> <span class= code-output >Phone: 970-221-0438</span> <span class= code-output >E-mail: david@idlcoyote.com</span> <span class= code-output >Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   An object for maintaining a coordinate system for data annotation or display.    Simply calling the Draw method of the object sets up the data coordinate system.   ", "", "Object Programming Graphics", "     Change History: <span class= code-output >  Written, by David W. Fanning, 7 November 2011.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcoord__define.html#cgCoord::INIT", "cgCoord::INIT", 'routine in <a href="coyote/cgcoord__define.html">cgcoord__define.pro</a>', "cgcoord__define.pro", "", "cgCoord::INIT", "   The initialization method of the object.   ", "POSITION         The normalized position of the map projection space in the graphics window.          The default position is [0.075, 0.075, 0.925, 0.900].  XLOG         Set this keyword if you wish the X axis range to be logarithmic.  XRANGE         Set this keyword to the X axis range desired in the data coordinate system.          The default os [0,1].  YLOG         Set this keyword if you wish the Y axis range to be logarithmic.  YRANGE         Set this keyword to the Y axis range desired in the data coordinate system.          The default os [0,1].  _REF_EXTRA          Any keywords appropriate for superclass objects can also be specified.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcoord__define.html#cgCoord::Draw", "cgCoord::Draw", 'routine in <a href="coyote/cgcoord__define.html">cgcoord__define.pro</a>', "cgcoord__define.pro", "", "cgCoord::Draw", "   This method sets up the data coordinate space of the object by drawing    an  invisible  plot.  ", "_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcoord__define.html#cgCoord::GetProperty", "cgCoord::GetProperty", 'routine in <a href="coyote/cgcoord__define.html">cgcoord__define.pro</a>', "cgcoord__define.pro", "", "cgCoord::GetProperty", "   This method allows the user to get various properties of the object. In general,    the same keywords that are used for the INIT method can be used here.  ", "POSITIONXLOGXRANGEYLOGYRANGE_REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcoord__define.html#cgCoord::SetProperty", "cgCoord::SetProperty", 'routine in <a href="coyote/cgcoord__define.html">cgcoord__define.pro</a>', "cgcoord__define.pro", "", "cgCoord::SetProperty", "   This method allows the user to set various properties of the object. In general,    the same keywords that are used for the INIT method can be used here.  ", "POSITIONXLOGXRANGEYLOGYRANGE_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcoord__define.html#cgCoord::CLEANUP", "cgCoord::CLEANUP", 'routine in <a href="coyote/cgcoord__define.html">cgcoord__define.pro</a>', "cgcoord__define.pro", "", "cgCoord::CLEANUP", "   This is the clean-up routine for the object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgcoord__define.html#cgCoord__Define", "cgCoord__Define", 'routine in <a href="coyote/cgcoord__define.html">cgcoord__define.pro</a>', "cgcoord__define.pro", "", "cgCoord__Define", "   This is the class definition module.   ", "class       Occasionally, it is useful to have an object class definition as        a structure variable. Using this output keyword will allow that.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgcoyotegraphic.html", "cgcoyotegraphic.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgcoyotegraphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgcoyotegraphic.html#cgCoyoteGraphic", "cgCoyoteGraphic", 'routine in <a href="coyote/cgcoyotegraphic.html">cgcoyotegraphic.pro</a>', "cgcoyotegraphic.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgCoyoteGraphic", " This simply identifies a routine as a Coyote Graphics routine. It is written  so I can identify such routines in cgWindow before I assign a background color.   ", "routine", "Graphics", "     Change History: <span class= code-output >  Written, 18 January 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used in Coyote Graphics programs:   <span class= code-prompt >IDL&gt;</span> IF cgCoyoteGraphic('cgDraw_ROI') THEN background = 'white'  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdbltostr.html", "cgdbltostr.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdbltostr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdbltostr.html#cgDBLTOSTR", "cgDBLTOSTR", 'routine in <a href="coyote/cgdbltostr.html">cgdbltostr.pro</a>', "cgdbltostr.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDBLTOSTR", " This is a program for converting a double precision numerical value  to a string that maintains the 14 double-precision significant digits.   ", "value         A double-precision or floating point value that is to be converted to a string.   ", "Utilities", "    Change History: <span class= code-output >  Written by BioPhys and offered to the IDL newsgroup,  7 November 2005.</span> <span class= code-output >  Slightly modified and renamed by David Fanning,  30 November,  2005.</span> <span class= code-output >  Retired as DblToStr and reincarnated it as cgDblToStr. 30 November, 2012. DWF.</span>       Copyright (c) 2005-2012, Fanning Software Consulting, Inc.      Here is how to use this program:   <span class= code-prompt >IDL&gt;</span> Print, cgDblToStr(54.84392095433821d) <span class= code-output >       54.843920954338</span>      A string value with the appropriate number of significant digits is returned.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdcbar.html", "cgdcbar.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdcbar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdcbar.html#cgDCBar", "cgDCBar", 'routine in <a href="coyote/cgdcbar.html">cgdcbar.pro</a>', "cgdcbar.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDCBar", " The purpose of this routine is to add a discrete color bar to  a graphics plot. A  discrete  color bar is one with a handful  of colors. Labels are centered beneath or beside the color fields.         The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD       Set this keyword to add the command to the resizeable graphics window cgWindow.  BARCOLOR       This is the name of a color known to cgCOLOR that can be used to draw the color        bar outlines. By default, the same as specified with the COLOR keyword.  BOTTOM       The lowest color index of the colors to be loaded in the color bar.  CHARPERCENT       A value from 0.0 go 1.0 that is multiplied by the CHARSIZE to produce        the character size for the color bar. This value is only used if CHARSIZE is        undefined. This keyword is primarily useful for using color bars in resizeable        graphics windows (cgWindow).  CHARSIZE       The character size of the color bar annotations. Default is cgDefCharsize()*charPercent.  COLOR        The name of the color to use for color bar annotations.  FILENAME        The name of a color table file that can be read by cgCOLOR. This allows you to         specify your own color names for your own colors.  FIT       If this keyword is set, the colorbar tries to  fit  itself to the normalized        coordinates of the last graphics command executed. In other words, for        a horizontal color bar, postition[[0,2]] = !X.Window, and for a vertical        color bar, position[[1,3]] = !Y.Window. Other positions are adjusted        to put the colorbar  reasonably  close to the plot. Because there are so many        ways this colorbar can be displayed, the  fit  may not always be a good one.        If you are fitting to an image, be sure to set the SAVE keyword on cgImage        to establish a data coordinate system.  FONT       Sets the font of the annotation. Hershey: -1, Hardware:0, True-Type: 1.  LABELS       An array of string labels that should annotate each color. Must be the same length        as the colors vector. Colors are labelled consecutively by default.  NCOLORS       An alternative way to specify the colors in the color bar is by        using the NCOLORS and BOTTOM keywords to locate the colors in the        current color table. The NCOLORS and BOTTOM keywords have the same        meaning as in the LOADCT, XLOADCT, XCOLORS, or cgCOLORBAR programs.  POSITION       A four-element array of normalized coordinates in the same        form as the POSITION keyword on a plot. Default is [0.88, 0.10, 0.95, 0.90]        for a vertical bar and [0.10, 0.88, 0.90, 0.95] for a horizontal bar.        See the FIT keyword, also.  RIGHT       This puts the title on the right-hand side of a vertical color bar. It applies        only to vertical color bars.  ROTATE       Set this keyword to a value that will rotate the label text.        Positive values between 0 and 180 degrees rotate in a counter-clockwise        sense. Negative values between 0 and 180 degress rotate in a        clockwise sense.  SPACING       When labels are rotated, it is a little difficult to determine where,        exactly, they should be located. This keyword gives the user some control        over this location. The location  spacer  is multiplied by this amount.        So, for example, to move the labels a little further away from the color bar,        make this number greater than 1 (e.g, 1.25). To move the labels a little closer,        use a number less than 1 (e.g, 0.75).  TCHARSIZE       The character size of the title. By default, set to cgDefCharsize().  TREVERSE       Set this keyword to reverse the direction of the title on a vertical color bar.  TITLE       This is title for the color bar. The default is to have no title.  VERTICAL       Setting this keyword give a vertical color bar. The default is a horizontal color bar.  WINDOW       Set this keyword to display the plot in a resizeable graphics window (cgWindow).   colors       A vector of  colors  to be represented in the color bar. The vector can be a        vector of color  names  that are known to cgColor. Or, it can be a vector of        24-bit color values that can be decomposed into color triples. Or, it can be a        vector of byte or integer values that can be used as indices into the current        color table. If both colors and NCOLORS (see below) are undefined, a 10-element        color table will be loaded and used.   ", "Graphics", "     Change History: <span class= code-output > Written by: David W. Fanning, 15 March 2009.</span> <span class= code-output > Modification to code to avoid changing the colors vectors. 15 March 2009.</span> <span class= code-output > Added FONT keyword. 1 April 2009. DWF.</span> <span class= code-output > Code modified to support 24-bit PostScript printers. 23 September 2009. DWF.</span> <span class= code-output > Fixed a problem with determining visual depth in Z-buffer. 15 January 2010. DWF.</span> <span class= code-output > Added SPACING keyword and changed the default spacing on horizontal color bars slightly.  23 Apr 2010. DWF.</span> <span class= code-output > Modified the spacing of the labels on the color bar, specifically for the PostScript device. 3 November 2010. DWF.</span> <span class= code-output > Added Window and AddCmd keywords. 28 Jan 2011. DWF.</span> <span class= code-output > Added a Right keyword and changed the title spacing a little bit for aesthetic reasons. 2 July 2011. DWF.</span> <span class= code-output > Fixed a problem with assigning the color with the COLOR keyword in the Z-buffer. 30 Aug 2011. DWF.</span> <span class= code-output > The default BOTTOM keyword value was incorrect. Fixed in this version. 5 December 2011. DWF.</span> <span class= code-output > Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output > Previous change incorrectly implemented for PS device. Fixed. 29 Dec 2011. DWF.</span> <span class= code-output > Added CHARPERCENT, FIT, and TREVERSE keywords. Cleaned up documentation. 20 March 2012. DWF.</span> <span class= code-output > Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span>       Copyright (c) 2009-2012, Fanning Software Consulting, Inc.         To display a 12 color horizontal color bar, labels with a three-letter        month abbreviation: <span class= code-output >  cgDisplay</span> <span class= code-output >  cgLoadCT, 5, NCOLORS=12, BOTTOM=1</span> <span class= code-output >  cgDCBar, NCOLORS=12, BOTTOM=1, LABELS=cgMonths(/Abbreviation)</span>        To load a 5 color vertical color bar, with the labels rotated 45 degrees: <span class= code-output >  cgDisplay</span> <span class= code-output >  labels = StrArr(5)</span> <span class= code-output >  FOR j=0,4 DO labels[j] = 'City ' + StrTrim(j+1,2)</span> <span class= code-output >  colors = ['dodger blue', 'yellow', 'forest green', 'purple', 'tan']</span> <span class= code-output >  cgDCBar, colors, LABELS=labels, ROTATE=45, /VERTICAL</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgdefaultcolor.html", "cgdefaultcolor.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgdefaultcolor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgdefaultcolor.html#cgDefaultColor", "cgDefaultColor", 'routine in <a href="idlastro/coyote/cgdefaultcolor.html">cgdefaultcolor.pro</a>', "cgdefaultcolor.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDefaultColor", " The purpose of this function is to choose a default color for Coyote Graphics routines.   ", "BACKGROUND        If this keyword is set, the color is treated as a background color. Otherwise,         it is treated as a drawing color.  DEFAULT         A color of any type allowed as the inputColour. Used if the inputColour is undefined.  MODE         The color mode. A 0 mean indexed color mode. A 1 means decomposed color mode.          If not supplied in the call, the color mode is determined at run-time with GetDecomposedState.          The color mode is *always* determined at run time if the current graphics device          is the PostScript device.  TRADITIONAL         Set this keyword if you are using the traditional color scheme of white foreground          and black background. If this keyword is set, and the current graphics device is          the PostScript device, the colors will be reversed, in the traditional IDL graphics          way.   inputColour        The input color. May be undefined, a byte, integer, long, or string. If the         device is in indexed color mode at the time the request is made, then all,         byte, integer, and long values will be treated as indices into the current         color table. The variable may be a vector.   ", "Graphics", "     Change History: <span class= code-output >  Written, 24 December 2011. David W. Fanning.</span> <span class= code-output >  Modified to make sure a LONG integer in indexed color mode is in the range 0-255. 10 Jan 2012. DWF.</span> <span class= code-output >  Modified to make sure MODE is always determined at run-time for PostScript device. 14 Jan 2012. DWF.</span> <span class= code-output >  Allow other data types to be treated as color table index numbers, as long as they are in the</span> <span class= code-output >     range 0 to 255, and the MODE indicates indexed color. 7 March 2012. DWF.</span> <span class= code-output >  Modified so that the variable MODE will not change in the calling program program. 8 March 2012. DWF.</span> <span class= code-output >  Made FOR loop counter a LONG integer. 3 July 2012. DWF.</span> <span class= code-output >  More work on getting the MODE correct to handle LONG integers properly. Now, in PostScript, we get</span> <span class= code-output >      the current mode, except if we have been told what mode to be in. 21 July 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Use as a device independent way to get a color: <span class= code-output >  background = cgDefaultColor(bColor, /Background)</span> <span class= code-output >  color = cgDefaultColor(bColor)</span> <span class= code-output >  cgPlot, cgDemoData, Background=background, Color=color</span>       Returns a scalar or vector (depends on the type of the input color) of color     names (strings) to be used as the  color  in Coyote Graphics routines. If the     MODE is 1 and the inputColor is of type LONG, then the return value is an array     or scalar of type LONG.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdefaultcolor.html", "cgdefaultcolor.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdefaultcolor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdefaultcolor.html#cgDefaultColor", "cgDefaultColor", 'routine in <a href="coyote/cgdefaultcolor.html">cgdefaultcolor.pro</a>', "cgdefaultcolor.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDefaultColor", " The purpose of this function is to choose a default color for Coyote Graphics routines.   ", "BACKGROUND        If this keyword is set, the color is treated as a background color. Otherwise,         it is treated as a drawing color.  DEFAULT         A color of any type allowed as the inputColour. Used if the inputColour is undefined.  MODE         The color mode. A 0 mean indexed color mode. A 1 means decomposed color mode.          If not supplied in the call, the color mode is determined at run-time with GetDecomposedState.          The color mode is *always* determined at run time if the current graphics device          is the PostScript device.  TRADITIONAL         Set this keyword if you are using the traditional color scheme of white foreground          and black background. If this keyword is set, and the current graphics device is          the PostScript device, the colors will be reversed, in the traditional IDL graphics          way.   inputColour        The input color. May be undefined, a byte, integer, long, or string. If the         device is in indexed color mode at the time the request is made, then all,         byte, integer, and long values will be treated as indices into the current         color table. The variable may be a vector.   ", "Graphics", "     Change History: <span class= code-output >  Written, 24 December 2011. David W. Fanning.</span> <span class= code-output >  Modified to make sure a LONG integer in indexed color mode is in the range 0-255. 10 Jan 2012. DWF.</span> <span class= code-output >  Modified to make sure MODE is always determined at run-time for PostScript device. 14 Jan 2012. DWF.</span> <span class= code-output >  Allow other data types to be treated as color table index numbers, as long as they are in the</span> <span class= code-output >     range 0 to 255, and the MODE indicates indexed color. 7 March 2012. DWF.</span> <span class= code-output >  Modified so that the variable MODE will not change in the calling program program. 8 March 2012. DWF.</span> <span class= code-output >  Made FOR loop counter a LONG integer. 3 July 2012. DWF.</span> <span class= code-output >  More work on getting the MODE correct to handle LONG integers properly. Now, in PostScript, we get</span> <span class= code-output >      the current mode, except if we have been told what mode to be in. 21 July 2012. DWF.</span> <span class= code-output >  For numerical values less than 256, in indexed color state, I now return the values</span> <span class= code-output >        directly to the user. This should significantly speed up many Coyote Graphics</span> <span class= code-output >        processes. 14 December 2012. DWF.</span> <span class= code-output >  Modified to return byte and integer values as LONG decomposed integers, if decomposed</span> <span class= code-output >        mode is currently in effect. 14 December 2012. DWF.</span> <span class= code-output >  Now setting all background colors to WHITE, not BACKGROUND. 16 Dec 2012. DWF.</span> <span class= code-output >  Whoops! Forgot one of the background colors in the Traditional section. 11 Jan 2013. DWF.</span> <span class= code-output >  Made the counters in the loops long integers to accommodate large color vectors. 29 Apr 2013. Joe Sapp.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Use as a device independent way to get a color: <span class= code-output >  background = cgDefaultColor(bColor, /Background)</span> <span class= code-output >  color = cgDefaultColor(bColor)</span> <span class= code-output >  cgPlot, cgDemoData, Background=background, Color=color</span>       Returns a scalar or vector (depends on the type of the input color) of color     names (strings) to be used as the  color  in Coyote Graphics routines. If the     MODE is 1 and the inputColor is of type LONG, then the return value is an array     or scalar of type LONG.   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgdefcharsize.html", "cgdefcharsize.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgdefcharsize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgdefcharsize.html#cgDefCharSize", "cgDefCharSize", 'routine in <a href="idlastro/coyote/cgdefcharsize.html">cgdefcharsize.pro</a>', "cgdefcharsize.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDefCharSize", "   Defines a default character size for Coyote Graphics routines (cgPlot, cgContour, etc.)    IF !P.Charsize is set, the function simply returns !P.Charsize.   ", "ADJUSTSIZE        If this keyword is set, the output character size is adjusted to         fit the size of the output graphics window. No adjustment is ever         done in PostScript. Applies only when !P.Charsize=0.  FONT        The font type: -1 = Hershey, 0 = hardware, 1 = true-type.   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written, 11 January 2011. DWF.</span> <span class= code-output >  Added an ADJUSTSIZE keyword to allow adjustable sizing of characters</span> <span class= code-output >     in resizeable graphics windows. 24 April 2011. DWF.</span> <span class= code-output >  Made sure this program only adjusts text size on devices that support</span> <span class= code-output >     windows. 20 July 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdefcharsize.html", "cgdefcharsize.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdefcharsize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdefcharsize.html#cgDefCharSize", "cgDefCharSize", 'routine in <a href="coyote/cgdefcharsize.html">cgdefcharsize.pro</a>', "cgdefcharsize.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDefCharSize", "   Defines a default character size for Coyote Graphics routines (cgPlot, cgContour, etc.)    IF !P.Charsize is set, the function simply returns !P.Charsize.   ", "ADJUSTSIZE        If this keyword is set, the output character size is adjusted to         fit the size of the output graphics window. No adjustment is ever         done in PostScript. Applies only when !P.Charsize=0.  FONT        The font type: -1 = Hershey, 0 = hardware, 1 = true-type.   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written, 11 January 2011. DWF.</span> <span class= code-output >  Added an ADJUSTSIZE keyword to allow adjustable sizing of characters</span> <span class= code-output >     in resizeable graphics windows. 24 April 2011. DWF.</span> <span class= code-output >  Made sure this program only adjusts text size on devices that support</span> <span class= code-output >     windows. 20 July 2011. DWF.</span> <span class= code-output >  Made PostScript default font sizes on Windows slightly larger to conform</span> <span class= code-output >     with function graphics output in IDL 8.2.3. 17 June 2013. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdelete.html", "cgdelete.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdelete.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdelete.html#cgDelete", "cgDelete", 'routine in <a href="coyote/cgdelete.html">cgdelete.pro</a>', "cgdelete.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDelete", "   Allows the user to delete one or more cgWindow applications. The cgWindow can    be identifed by window index number, widget identifier, title, or object reference,    depending on which keywords are set.   ", "ALL         If this keyword is set, all the cgWindow applications currently on the display          are deleted.  OBJECT         If this keyword is set, the selection is assumed to be an object reference.  WIDGETID         If this keyword is set, the selection is assumed to be a widget identifier.   TITLE         If this keyword is set, the selection is assumed to be a window title. All          matching is done in uppercase characters.  selection       Normally, a window index number of an cgWindow application. But, the selection        can be a widget identifier, an object reference, or a window title, depending on        which keywords are set. The cgWindow matching the selection is deleted. If not        provided, the current cgWindow is deleted.   ", "Graphics", "     Change History: <span class= code-output >  Written, 24 January 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used to delete an cgWindow application:   <span class= code-prompt >IDL&gt;</span> cgDelete, 'Window 1', /TITLE  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdemodata.html", "cgdemodata.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdemodata.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   The purpose of this function is to read a selection of standard    data sets that are found in the normal IDL distribution in the    subdirectory $IDL_DIR/examples/data. At least 25 data sets are    available in all categories of data. The user selects one of the    possible data sets with the mouse. Several of the data sets    simply create data used to illustrate graphics commands (numbers 1-3),    and two of the data sets produce random data. Data set 17 produces    a random vector of 101 elements. Data set 18 produces a 2D array of    random values, suitable for display as a contour plot or image.   ", "", "Utilities", "     Change History: <span class= code-output > Written by:  David W. Fanning, 5 March 1999.</span> <span class= code-output > Added some additonal random data capability. 29 April 99. DWF</span> <span class= code-output > Added IMAGES keyword. 31 March 2000. DWF.</span> <span class= code-output > Fixed a problem with the CANCEL button. 25 Oct 2002. DWF.</span> <span class= code-output > Added new JPEG, DICOM, TIFF, and PGN images. 30 Oct 2002. DWF.</span> <span class= code-output > Modified old program units to work with IDL strict arrays. 29 June 2003. DWF</span> <span class= code-output > Yikes! Somehow lost the event handler for the CANCEL button! Fixed. 1 Jan 2012. DWF.</span> <span class= code-output > Added 2D Combined Gaussian data set. Renamed utility routines. 22 Jan 2013. DWF.</span>       Copyright (c) 2011-2013, Fanning Software Consulting, Inc.         To load the world elevation data set: <span class= code-output >   image = cgDemoData(7)</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdemodata.html#cgdemodata_smooth2", "cgdemodata_smooth2", 'routine in <a href="coyote/cgdemodata.html">cgdemodata.pro</a>', "cgdemodata.pro", "", "cgdemodata_smooth2", " Does multiple smoothing. A routine from the JHUAPL IDL Library.   ", "help        Set this keyword to print function syntax help.  i        The input array to be smoothed.  w        The size of the smoothing window. Forced to be an odd integer.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgdemodata.html#cgdemodata_makez", "cgdemodata_makez", 'routine in <a href="coyote/cgdemodata.html">cgdemodata.pro</a>', "cgdemodata.pro", "", "cgdemodata_makez", " Make simulated 2-d data. A routine from the JHUAPL IDL Library.   ", "help        Set this keyword to print function syntax help.  lastseed        Returns the last random seed used.  periodic        Set this keyword to force the data to match at either end.  seed        Sets the random seed for repeatable results.  nx        The X size of the data to be created.  ny        The Y size of the data to be created.  w        The smoothing window size.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgdemodata.html#cgdemodata_makey", "cgdemodata_makey", 'routine in <a href="coyote/cgdemodata.html">cgdemodata.pro</a>', "cgdemodata.pro", "", "cgdemodata_makey", " Make simulated data vector. A routine from the JHUAPL IDL Library.   ", "seed        Sets the random seed for repeatable results.  lastseed        Returns the last random seed used.  periodic        Set this keyword to force the data to match at either end.  help        Set this keyword to print function syntax help.  n        The size of the data vector to be created.  w        The smoothing window size.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgdemodata.html#cgdemodata_gauss2d", "cgdemodata_gauss2d", 'routine in <a href="coyote/cgdemodata.html">cgdemodata.pro</a>', "cgdemodata.pro", "", "cgdemodata_gauss2d", " Creates a two-dimensions Gaussian data set.   ", "nx        The X size of the output array.  ny        The Y size of the output array.  x        The X location of the Gaussian in the array.  y        The Y location of the Gaussian in the array.  fwhm        The full width at half-maximum of Gaussian.  array        The output array containing the Gaussian.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgdemodata.html#cgDemoData_Cancel", "cgDemoData_Cancel", 'routine in <a href="coyote/cgdemodata.html">cgdemodata.pro</a>', "cgdemodata.pro", "", "cgDemoData_Cancel", " This event handler responds to the CANCEL button.   ", "event        The event structure passed by the window manager from the CANCEL button.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgdemodata.html#cgDemoData_ReadData", "cgDemoData_ReadData", 'routine in <a href="coyote/cgdemodata.html">cgdemodata.pro</a>', "cgdemodata.pro", "", "cgDemoData_ReadData", " Reads the data set from its current location.   ", "number        The selection number.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgdemodata.html#cgDemoData_EVENT", "cgDemoData_EVENT", 'routine in <a href="coyote/cgdemodata.html">cgdemodata.pro</a>', "cgdemodata.pro", "", "cgDemoData_EVENT", " Reads the data set from its current location.   ", "event        The event handler for the graphical user interface.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgdemodata.html#cgDemoData", "cgDemoData", 'routine in <a href="coyote/cgdemodata.html">cgdemodata.pro</a>', "cgdemodata.pro", "", "cgDemoData", " Select a dataset either interactively or by selection.   ", "CANCEL       If a graphical user interface is used for the data selection, this output        keyword is set to 1 if the user clicks the CANCEL button. Otherwise, it is        set to 0.  GROUP_LEADER       The identifier of a widget group leader for this widget application. If the        group leader dies, this program will die as well.  IMAGES       Set this keyword if you wish to see only 2D images in the selection widget.  selection       The data set selection number. If not present, a graphical user        interface is presented to the user so that a data set may be        selected.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgdisplay.html", "cgdisplay.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgdisplay.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgdisplay.html#cgDisplay", "cgDisplay", 'routine in <a href="idlastro/coyote/cgdisplay.html">cgdisplay.pro</a>', "cgdisplay.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDisplay", "   The purpose of cgDisplay is to open a graphics window on the display, or in the    PostScript device, or in the Z-graphics buffer, depending upon the current graphics    device. In PostScript a window of the proper aspect ratio is created with PSWindow.    Using cgDisplay to open  windows  will allow you to more easily write device-independent    IDL programs.   ", "ASPECT        Set this keyword to create a window with this aspect ratio (ysize/xsize).         If aspect is greater than 1, then the ysize will be used in the aspect         ratio calculation. If the aspect is less than or equal to 1, then the         xsize will be used in the aspect ratio calculation of the final window size.         If the input to the ASPECT keyword is an image, then the aspect ratio will         be calculated from the image itself.  COLOR        If this keyword is a string, the name of the data color. By default, 'white'.         Color names are those used with cgColor. Otherwise, the keyword is assumed         to be a color index into the current color table. The color is not used if         the  window  is opened in PostScript on the Z-graphics buffer.  FREE         Set this keyword to open a window with a free or unused window index number.          This keyword applied only to graphics windows created on the computer display.  FORCE         Because of the way cgDisplay is designed to work in many devices and in resizeable          graphics windows, it is sometimes the case that it won't create a window for you.          If you set this keyword, a graphics window will be created while in any device that          supports graphics windows.  LOCATION         Set this keyword to a two-element integer array indicated the pixel position of          the upper-left corner of the graphics window from the upper-left corner of the display.  MATCH         If this keyword is set, the new display window will match the size of the current          display window, if there is one.  PIXMAP         Set this keyword to create a pixmap window (a window in memory only).  RETAIN         Set this keyword to the values 0, 1, or 2, to indicate no backing store, server          provided backing store, or IDL provided backing store, respectively. By default,          set to 1 for Windows users and to 2 for UNIX users.  TITLE         Set this keyword to a string that is used as the window title.  WID         The window index number of the IDL graphics window to create.  WINDOW         Because I want to use cgDisplay everywhere, including in resizeable graphics          windows, and I don't want it opening windows then, it first checks to be sure          there are no resizeable graphics windows on the display before it creates a window.          Setting this keyword will overrule this check and create a normal IDL graphics window          on the display. This will allow you to open a normal graphics window at the same          time a resizeable graphics window exists on the display.  XPOS         The X position of the window, specified in device coordinates. On Motif platforms,          XPOS specifies the X position of the lower left corner and is measured from the          lower left corner of the screen. On Windows platforms, XPOS specifies the X position          of the upper left corner and is measured from the upper left corner of the screen.          This value can also be specified as the first element in the Location keyword.  XSIZE         The X size of the graphics window created. By default, 640. The PXSIZE parameter          is used in preference to the XSIZE keyword value.  YPOS         The Y position of the window, specified in device coordinates. On Motif platforms,          YPOS specifies the Y position of the lower left corner and is measured from the          lower left corner of the screen. On Windows platforms, YPOS specifies the Y position          of the upper left corner and is measured from the upper left corner of the screen.          This value can also be specified as the second element in the Location keyword.  YSIZE         The Y size of the graphics window created. By default, 512. The PYSIZE parameter          is used in preference to the YSIZE keyword value.  _EXTRA         Any keywords supported by the WINDOW command are allowed.   pxsize         The X size of the graphics window created. By default, 640.  pysize         The Y size of the graphics window created. By default, 512.   ", "Graphics", "     Change History: <span class= code-output >  Written, 15 November 2010. DWF.</span> <span class= code-output >  Changes so that color variables don't change type. 23 Nov 2010. DWF.</span> <span class= code-output >  Moved the window index argument to the WID keyword. 9 Dec 2010. DWF.</span> <span class= code-output >  Modified to produce a window in PostScript and the Z-buffer, too. 15 Dec 2010. DWF.</span> <span class= code-output >  Added the FREE keyword. 3 January 2011. DWF.</span> <span class= code-output >  I made a change that allows you to call cgDisplay inside a program that is</span> <span class= code-output >     going to be added to a cgWindow. The program will not open a graphics window</span> <span class= code-output >     if the current graphics window ID is found in a list of cgWindow window IDs.</span> <span class= code-output >     It is now possible to use cgDisplay in any graphics program, even those that</span> <span class= code-output >     will be run in cgWindow. 17 Nov 2011. DWF.</span> <span class= code-output >  Added ASPECT keyword. 18 Nov 2011. DWF.</span> <span class= code-output >  Allowed the window ASPECT to be set with an image argument. 25 Nov 2011. DWF.</span> <span class= code-output >  Now use Scope_Level to always create a display when cgDisplay is called from</span> <span class= code-output >     the main IDL level. 7 Feb 2012. DWF.</span> <span class= code-output >  Added FORCE and MATCH keywords. 16 Feb 2012. DWF.</span> <span class= code-output >  Added PIXMAP, RETAIN, TITLE, XPOS, YPOS, and LOCATION keywords. 4 Sept 2012. DWF.</span>       Copyright (c) 2010-2012, Fanning Software Consulting, Inc.      Use like the IDL WINDOW command:   <span class= code-prompt >IDL&gt;</span> cgDisplay, XSIZE=500 YSIZE=400   <span class= code-prompt >IDL&gt;</span> cgDisplay, 500, 500, WID=1, COLOR='gray'  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdisplay.html", "cgdisplay.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdisplay.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdisplay.html#cgDisplay", "cgDisplay", 'routine in <a href="coyote/cgdisplay.html">cgdisplay.pro</a>', "cgdisplay.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDisplay", "   The purpose of cgDisplay is to open a graphics window on the display, or in the    PostScript device, or in the Z-graphics buffer, depending upon the current graphics    device. In PostScript a window of the proper aspect ratio is created with PSWindow.    Using cgDisplay to open  windows  will allow you to more easily write device-independent    IDL programs.   ", "ASPECT        Set this keyword to create a window with this aspect ratio (ysize/xsize).         If aspect is greater than 1, then the ysize will be used in the aspect         ratio calculation. If the aspect is less than or equal to 1, then the         xsize will be used in the aspect ratio calculation of the final window size.         If the input to the ASPECT keyword is an image, then the aspect ratio will         be calculated from the image itself.  COLOR        If this keyword is a string, the name of the data color. By default, 'white'.         Color names are those used with cgColor. Otherwise, the keyword is assumed         to be a color index into the current color table. The color is not used if         the  window  is opened in PostScript on the Z-graphics buffer.  FREE         Set this keyword to open a window with a free or unused window index number.          This keyword applied only to graphics windows created on the computer display.  FORCE         Because of the way cgDisplay is designed to work in many devices and in resizeable          graphics windows, it is sometimes the case that it won't create a window for you.          If you set this keyword, a graphics window will be created while in any device that          supports graphics windows.  LOCATION         Set this keyword to a two-element integer array indicated the pixel position of          the upper-left corner of the graphics window from the upper-left corner of the display.  MATCH         If this keyword is set, the new display window will match the size of the current          display window, if there is one.  PIXMAP         Set this keyword to create a pixmap window (a window in memory only).  RETAIN         Set this keyword to the values 0, 1, or 2, to indicate no backing store, server          provided backing store, or IDL provided backing store, respectively. By default,          set to 1 for Windows users and to 2 for UNIX users.  TITLE         Set this keyword to a string that is used as the window title.  WID         The window index number of the IDL graphics window to create.  WINDOW         Because I want to use cgDisplay everywhere, including in resizeable graphics          windows, and I don't want it opening windows then, it first checks to be sure          there are no resizeable graphics windows on the display before it creates a window.          Setting this keyword will overrule this check and create a normal IDL graphics window          on the display. This will allow you to open a normal graphics window at the same          time a resizeable graphics window exists on the display.  XPOS         The X position of the window, specified in device coordinates. On Motif platforms,          XPOS specifies the X position of the lower left corner and is measured from the          lower left corner of the screen. On Windows platforms, XPOS specifies the X position          of the upper left corner and is measured from the upper left corner of the screen.          This value can also be specified as the first element in the Location keyword.  XSIZE         The X size of the graphics window created. By default, 640. The PXSIZE parameter          is used in preference to the XSIZE keyword value.  YPOS         The Y position of the window, specified in device coordinates. On Motif platforms,          YPOS specifies the Y position of the lower left corner and is measured from the          lower left corner of the screen. On Windows platforms, YPOS specifies the Y position          of the upper left corner and is measured from the upper left corner of the screen.          This value can also be specified as the second element in the Location keyword.  YSIZE         The Y size of the graphics window created. By default, 512. The PYSIZE parameter          is used in preference to the YSIZE keyword value.  _EXTRA         Any keywords supported by the WINDOW command are allowed.   pxsize         The X size of the graphics window created. By default, 640.  pysize         The Y size of the graphics window created. By default, 512.   ", "Graphics", "     Change History: <span class= code-output >  Written, 15 November 2010. DWF.</span> <span class= code-output >  Changes so that color variables don't change type. 23 Nov 2010. DWF.</span> <span class= code-output >  Moved the window index argument to the WID keyword. 9 Dec 2010. DWF.</span> <span class= code-output >  Modified to produce a window in PostScript and the Z-buffer, too. 15 Dec 2010. DWF.</span> <span class= code-output >  Added the FREE keyword. 3 January 2011. DWF.</span> <span class= code-output >  I made a change that allows you to call cgDisplay inside a program that is</span> <span class= code-output >     going to be added to a cgWindow. The program will not open a graphics window</span> <span class= code-output >     if the current graphics window ID is found in a list of cgWindow window IDs.</span> <span class= code-output >     It is now possible to use cgDisplay in any graphics program, even those that</span> <span class= code-output >     will be run in cgWindow. 17 Nov 2011. DWF.</span> <span class= code-output >  Added ASPECT keyword. 18 Nov 2011. DWF.</span> <span class= code-output >  Allowed the window ASPECT to be set with an image argument. 25 Nov 2011. DWF.</span> <span class= code-output >  Now use Scope_Level to always create a display when cgDisplay is called from</span> <span class= code-output >     the main IDL level. 7 Feb 2012. DWF.</span> <span class= code-output >  Added FORCE and MATCH keywords. 16 Feb 2012. DWF.</span> <span class= code-output >  Added PIXMAP, RETAIN, TITLE, XPOS, YPOS, and LOCATION keywords. 4 Sept 2012. DWF.</span>       Copyright (c) 2010-2012, Fanning Software Consulting, Inc.      Use like the IDL WINDOW command:   <span class= code-prompt >IDL&gt;</span> cgDisplay, XSIZE=500 YSIZE=400   <span class= code-prompt >IDL&gt;</span> cgDisplay, 500, 500, WID=1, COLOR='gray'  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdotplot.html", "cgdotplot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdotplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdotplot.html#cgDotPlot", "cgDotPlot", 'routine in <a href="coyote/cgdotplot.html">cgdotplot.pro</a>', "cgdotplot.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDotPlot", " The purpose of cgDotPlot is to create a  dot plot  of the sort described on this  web page.       ", "ADDCMD        Set this keyword to add the command to the resizeable graphics window cgWindow.  AXISCOLOR        If this keyword is a string, the name of the axis color.         Otherwise, the keyword is assumed to be a color index into the current color table.  BACKGROUND        If this keyword is a string, the name of the background color.         Otherwise, the keyword is assumed to be a color index into the current color table.  CHARSIZE        The character size for axes annotations. Uses cgDefCharSize to select default         character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR        If this keyword is a string, the name of the data color.         Color names are those used with cgColor. Otherwise, the keyword is assumed         to be a color index into the current color table.  FONT        The type of font desired for axis annotation.  LABELCHARSIZE        The character size of the labels. The default is to use Charsize.  LABELCOLOR        The name of the color the labels should be drawn in. The default is the         AxisColor.  NOGRID        Set this keyword to eliminate the background grid from the plot.  NOERASE        Set this keyword to draw the plot without erasing the display first.  OUTPUT        Set this keyword to the name of an output file. The type of file is determined         from the file's extension, as listed below. Normally, the file name is given in         all lowercase letters: <span class= code-output >   'ps'   - PostScript file</span> <span class= code-output >   'eps'  - Encapsulated PostScript file</span> <span class= code-output >   'pdf'  - PDF file</span> <span class= code-output >   'bmp'  - BMP raster file</span> <span class= code-output >   'gif'  - GIF raster file</span> <span class= code-output >   'jpg' - JPEG raster file</span> <span class= code-output >   'png'  - PNG raster file</span> <span class= code-output >   'tif' - TIFF raster file</span>        All raster file output is created through PostScript intermediate files (the         PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed         to produce anything other than PostScript output. (See cgPS2PDF and PS_END for         details.) And also note that you should NOT use this keyword when doing multiple         plots. The keyword is to be used as a convenient way to get PostScript or raster         output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  OVERPLOT        Set this keyword if you wish to overplot data on an already exisiting set of         cgDotPlot axes. Note that labels will have to be passed, but they will not be         drawn again in the overplotting.  POSITION        The usual four-element position vector for the Plot comamnd. Only monitored and         possibly set if the Aspect keyword is used.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46. This may also be set to the          name  of a symbol, such as returned from Print, cgSymCat(/Names).  PLOTFILLCOLOR        The name of the color that fills the area inside the axes on the plot.  SYMSIZE        The symbol size.  TITLE         The title of the plot.  XCHARSIZE        The character size of the annotations on the X axis of the plot.  XGRIDSTYLE        The X line style of the grid lines used to draw the grid on the axis. By default, dots.  XRANGE        A two-element array giving the X range of the plot.  XSTYLE        A two-element array giving the X style of the plot. Normally, this is         set to 1 to give exact axis ranges. Otherwise, not used.  XTITLE         The X title of the plot.  YGRIDSTYLE        The Y line style of the grid lines used to draw the grid on the axis. By default, dots.   WINDOW        Set this keyword to replace all the commands in a current cgWindow or to         create a new cgWindow for displaying this command.  labels         A vector of string labels to be plotted along the left edge of the dot plot.  values         A vector of values associated with each label, representing the values to be          plotted on the dot plot.   ", "Graphics", "     Change History: <span class= code-output >  Written, 12 November 2012, by David W. Fanning and donated to the IDL community</span> <span class= code-output >      by Marta Yebra of CSIRO, Australia.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      There are several examples in a main-level program at the end of this program file.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdraw_roi.html", "cgdraw_roi.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdraw_roi.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdraw_roi.html#cgDraw_ROI", "cgDraw_ROI", 'routine in <a href="coyote/cgdraw_roi.html">cgdraw_roi.pro</a>', "cgdraw_roi.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgDraw_ROI", " This procedure draws a region or group of regions, defined by the IDLanROI or  IDLanROIGroup objects, on a direct graphics device. The type of ROI drawn is  based on the TYPE property of a given IDLanROI object. These can be points,  polylines, or filled polygons. This procedure is a Coyote Graphics wrapper for  the built-in IDL procedure DRAW_ROI.   ", "ADDCMD        Set this keyword to add the command to an cgWindow. Setting this keyword         automatically sets the WINDOW keyword, but the command does not erase the         graphics window as it would normally.  COLOR         The name of the polygon color. Color names are those used with cgColor.          This value can also be a long integer or a byte or short integer index          into the current color table.  DEVICE         Set to indicate the polygon vertices are in device coordinates, rather than data coordinates.  LINESTYLE         Set this keyword to the normal linestyle graphics keyword values. The default is a solid line.  NORMAL         Set to indicate the polygon vertices are in normalized coordinates, rather than data coordinates.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46. May also be specified as a         symbol names. See cgSymCat for details.  SYMSIZE        A scalar or vector of symbol sizes. Default is 1.0. May be a vector of the same         length as X.  T3D        Set this keyword to use the 3D coordinate system established by !P.T.  THICKWINDOW         Set this keyword to add the command to the current cgWindow application.  _REF_EXTRA         Any DRAW_ROI keyword          not defined here may be used   roi         The input ROI object. Must be either an IDLanROI object or an IDLanROIGroup          object (if you wish to draw multiple ROIs at the same time).   ", "Graphics", "     Change History: <span class= code-output >  Written, 11 November 2012. David W. Fanning.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Download cgDraw_ROI_Example     for an example program illustrating how cgDraw_ROI can be used.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgdrawshapes.html", "cgdrawshapes.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgdrawshapes.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This program draws the entities in a shapefile, containing latitude and    longitude polygons or polylines, on a map projection. To draw the shapefile    entities automatically, no matter what kind of values the polygon vertices    have, and without a map projection, set the AUTODRAW keyword.     It is assumed a map projection command has been issued and is in effect at    the time this program is called. Alternatively, you can use a cgMap object,    which will set up the map coordinate space and provide the map structure required    for plotting in that XY map coordinate space.     If the ATTRVALUES keyword is undefined, all entities are drawn, but only a single value    for COLORS, FCOLORS, FILL, LINESTYLE, and THICK is allowed.      ", "", "Graphics Map Projections", "    Modification History: <span class= code-output >  Written by David W. Fanning by modifiying DrawStates to be more</span> <span class= code-output >     general, 13 May 2010. DWF.</span> <span class= code-output >  Added the AUTODRAW keyword for automatic drawing. 15 May 2010. DWF.</span> <span class= code-output >  Added COMPILE_OPT idl2 to make sure all loop variables are longs. 5 July 2010. DWF.</span> <span class= code-output >  Corrected an aspect ratio problem with AUTODRAW and upgraded to Coyote Graphics.</span> <span class= code-output >     3 January 2011. DWF.</span> <span class= code-output >  Previous method of freeing entity pointers took 10 times times longer than freeing</span> <span class= code-output >     pointers as I go. Also added MinNumVerts keyword to screen out the drawing of</span> <span class= code-output >     small polygons. 6 October 2011. DWF.</span> <span class= code-output >  Wrong string case for discovering particular attributes caused them not to be drawn. 27 Oct 2011. DWF.</span> <span class= code-output >  Added the ability to draw point shapefiles. Changed default color to  opposite . 20 Aug 2012. DWF.</span> <span class= code-output >  Made sure a window is open when the default color is chosen. 29 Aug 2012. DWF.</span>      Copyright (c) 2011, Fanning Software Consulting, Inc.      Example using cgMap_Set to set up the map projection space: <span class= code-output >  shapefile = Filepath(subdir=['examples','data'], 'states.shp')</span> <span class= code-output >  cgDisplay, 800, 700</span> <span class= code-output >  cgMap_Set, 40.0, -117.5, /Albers, /IsoTropic, Limit=[30, -125, 50, -108], $</span> <span class= code-output >      Position=[0.05, 0.05, 0.95, 0.95]</span> <span class= code-output >  cgDrawShapes, shapefile, AttrName='STATE_ABBR', $</span> <span class= code-output >      AttrValues=['CA', 'OR', 'WA', 'AZ', 'UT', 'ID', 'NV'], Thick=1, $</span> <span class= code-output >      FColors=['firebrick', 'grn4', 'pur4', 'tan4', 'steel blue', 'org4', 'yellow'], $</span> <span class= code-output >      Fill = Replicate(1, 7), Colors='charcoal'</span> <span class= code-output >  cgMap_Grid, LatDel = 2.0, LonDel = 2.0, /Box_Axes, Color='charcoal'</span>     Example using cgMap to set up the map projection space: <span class= code-output >  shapefile = Filepath(subdir=['examples','data'], 'states.shp')</span> <span class= code-output >  cgDisplay, 800, 700, WID=1</span> <span class= code-output >  mapCoord = Obj_New('cgMap', 'Albers Equal Area', Limit=[30, -125, 50, -108], $</span> <span class= code-output >             Position=[0.2, 0.05, 0.8, 0.95], CENTER_LATITUDE=40.0, $</span> <span class= code-output >             CENTER_LONGITUDE=-117, STANDARD_PAR1=40, STANDARD_PAR2=-39)</span> <span class= code-output >  cgDrawShapes, shapefile, AttrName='STATE_ABBR', $</span> <span class= code-output >      AttrValues=['CA', 'OR', 'WA', 'AZ', 'UT', 'ID', 'NV'], Thick=1, $</span> <span class= code-output >      FColors=['firebrick', 'grn4', 'pur4', 'tan4', 'steel blue', 'org4', 'yellow'], $</span> <span class= code-output >      Fill = Replicate(1, 7), Colors='charcoal', MapCoord=mapCoord, /USELIMIT</span> <span class= code-output >  cgMap_Grid,  /Box_Axes, Color='charcoal', Map_Structure=mapCoord</span>     Example drawing the states.shp file automatically, without a map projection: <span class= code-output >  shapefile = Filepath(subdir=['examples','data'], 'states.shp')</span> <span class= code-output >  cgDrawShapes, shapefile, /Autodraw</span>     Example using cgMap to set up the map projection space in a resizeable graphics window: <span class= code-output >  shapefile = Filepath(subdir=['examples','data'], 'states.shp')</span> <span class= code-output >  cgWindow, WAspect=800.0/700</span> <span class= code-output >  mapCoord = Obj_New('cgMap', 'Albers Equal Area', LIMIT=[30, -125, 45, -108], $</span> <span class= code-output >             Position=[0.05, 0.05, 0.95, 0.95], CENTER_LATITUDE=37.5, $</span> <span class= code-output >             CENTER_LONGITUDE=-117, STANDARD_PAR1=40, STANDARD_PAR2=-39)</span> <span class= code-output >  mapCoord -&gt; AddCmd</span> <span class= code-output >  cgDrawShapes, shapefile, AttrName='STATE_ABBR', $</span> <span class= code-output >      AttrValues=['CA', 'OR', 'WA', 'AZ', 'UT', 'ID', 'NV'], Thick=1, $</span> <span class= code-output >      FColors=['firebrick', 'grn4', 'pur4', 'tan4', 'steel blue', 'org4', 'yellow'], $</span> <span class= code-output >      Fill = Replicate(1, 7), Colors='charcoal', MapCoord=mapCoord, /AddCmd</span> <span class= code-output >  cgMap_Grid, LatDel = 2.0, LonDel = 2.0, /Box_Axes, Color=cgColor('charcoal'), $</span> <span class= code-output >       Map_Structure=mapCoord, /AddCmd</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgdrawshapes.html#cgDrawShapes_DrawEntity", "cgDrawShapes_DrawEntity", 'routine in <a href="coyote/cgdrawshapes.html">cgdrawshapes.pro</a>', "cgdrawshapes.pro", "", "cgDrawShapes_DrawEntity", " Draw the shape file entity on the map projection.   ", "COLOR         The name of the color used to draw the entity. Used as fill color          for filled symbols when drawing points.  FCOLOR         The name of the color used to fill the entity. Used if the FILL          keyword is set.  FILL         Set this keyword to fill the entity with a color.  LINESTYLE         Set this keyword to the line style type to draw the entity.  MAPCOORD         A map coordinate object (e.g., cgMap). Required to draw the          entity on a GCTP map projection set up with MAP_PROJ_INIT.  PROJECTED_XY         The program assumes the shapefile entities are expressed in latitude and          longitude values. If the entiites are expressed in projected XY Cartesian          coordinates, then set this value.  PSYM         When drawing points, the symbol to use. May be any value supported by          cgSymbol. The default is a filled circle, filled with Colors.  SYMSIZE         The default symbol size. Used only when displaying points.  THICK         The thickness of the line used to draw the entity.  entity        The shapefile entity that is read out of the shape file. In should be         a polygon or a polyline.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgdrawshapes.html#cgDrawShapes", "cgDrawShapes", 'routine in <a href="coyote/cgdrawshapes.html">cgdrawshapes.pro</a>', "cgdrawshapes.pro", "", "cgDrawShapes", "   This program draws the entities in a shapefile, containing latitude and    longitude points, polygons, polylines, or polypoings on a map projection.    Values may also be in projected meter space, if the proper map coordinate    object is passed to the program (e.g, via the MapCoord keyword). To draw the shapefile    entities automatically, no matter what kind of values the polygon vertices    or points have, and without a map projection, set the AUTODRAW keyword.   ", "ADDCMD         Set this keyword to add the command to a cgWindow.  AUTODRAW         If set, the shapefile entities are examined to find the X and Y          boundaries and a data coordinate space is set up to display the          entities automatically. If the shapefile is drawn automatically,          the restriction that the shapefile vertices be in latitude and          longitude values is removed. Do NOT set this keyword, if you          are using the MAPCOORD keyword, too. If no map projection is          currently in effect (!X.TYPE NE 3) and no map coordinate object          has been provided, this keyword is automatically set.  ATTRNAME         The name of the attribute in the file that you wish to draw.          By default, this is set to the first attribute name in the file.          If you are unsure of the attribute names in your shapefile,          use the Coyote Library program cgShapeInfo to browse the file          ahead of time.  ATTRVALUES         The value of the attribute identified by ATTRNAME. This variable can          be a scalar or vector string array identifying a subset of attribute          values to be drawn. For example, if ATTRNAME='STATE_NAME', then          ATTRVALUE can identify the particular states to draw. For example,          ATTRVALUE=['ARIZONA', 'WYOMING', 'OREGON']. By default, the value          is  ALL , which means that all of the shape entities identified by          ATTRNAME will be drawn.  COLORS         The name of the color or colors used to draw the entity. This          may be a string array of the same size as ATTRVALUES.  FCOLORS         The name of the color used to fill the entity. Used if the FILL          keyword is set. By default, the same as the COLORS keyword.  FILL         Set this keyword to fill the entity with a color.  LINESTYLE         The normal linestyle keyword index to choose plotting line styles.          By default, set to 0 and solid lines. May be a vector of the same          size as ATTRVALUES.  MAPCOORD         A map coordinate object (e.g., cgMap). Required to draw the          entity on a GCTP map projection set up with MAP_PROJ_INIT.          Note that this could also be a map structure as returned from MAP_PROJ_INIT,          but in that case the user is resposible for setting up the XY map          coordinate space independently and outside of this program.  MINNUMVERTS         Set this keyword to the minimum number of vertices required to actually          draw a polygon. In other words, to to drawn, a polygon must have at least          this number of vertices.  PROJECTED_XY         The program assumes the shapefile entities are expressed in latitude and          longitude values. If the entiites are expressed in projected XY Cartesian          coordinates, then set this value.  PSYM         When drawing points, the symbol to use. May be any value supported by          cgSymbol. The default is a filled circle, filled with Colors.  SYMSIZE         The default symbol size. Used only when displaying points.  THICK         The thickness of the line used to draw the entity.  USELIMIT         Set this keyword to use the LIMIT as determined from the map coordinate object.          This keyword applies only if a valid MapCoord object is passed to the program.  WINDOW         Set this keyword to add this command to a current cgWindow program. If a          cgWindow doesn't exist, one is created.  shapeFile        The name of a shapefile. If this variable is not provided, the user will         be asked to select a shapefile with the normal file dialogs.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgerase.html", "cgerase.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgerase.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgerase.html#cgErase", "cgErase", 'routine in <a href="idlastro/coyote/cgerase.html">cgerase.pro</a>', "cgerase.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgErase", "   Provides a device-independent and color-model-independent way to erase a graphics    window with a particular color.   ", "COLOR         An alternative way to specify the color to use in erasing the graphics window.          Color names are those used with cgColor. This parameter is used in          preference to the background_color parameter.  LAYOUT         This keyword specifies a grid with a graphics window and determines where the          graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].          The grid is determined by the number of columns (ncolumns) by the number of          rows (nrows). The location of the graphic is determined by the third number. The          grid numbering starts in the upper left (1) and goes sequentually by column and then          by row. If this keyword is used, only this portion of the window is erased.  WINDOW         Set this keyword to erase the current cgWindow application.  Erasing  in          this case means removing all the current commands.   background_color         The color to use in erasing the graphics window. Default is  white.           Color names are those used with cgColor.   ", "Graphics", "     Change History: <span class= code-output >  Written, 12 November 2010. DWF.</span> <span class= code-output >  Modified so that input variables are not changed. 18 Nov 2010. DWF.</span> <span class= code-output >  Got my color selection algorithm right. COLOR keyword takes precedence</span> <span class= code-output >    over the parameter. 18 Nov 2010. DWF.</span> <span class= code-output >  Modified to erase in decomposed color, if possible.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >  Added WINDOW keyword. 26 Jan 2011. DWF.</span> <span class= code-output >  Added LAYOUT keyword. 1 Feb 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.      Used to  erase  various things:   <span class= code-prompt >IDL&gt;</span> cgErase   <span class= code-prompt >IDL&gt;</span> cgErase, 'gray'   <span class= code-prompt >IDL&gt;</span> cgErase, COLOR='charcoal'    <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(1), /Window   <span class= code-prompt >IDL&gt;</span> cgErase, /Window    <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(17), Layout=[2,2,1]   <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(17), Layout=[2,2,4]   <span class= code-prompt >IDL&gt;</span> cgErase, Layout=[2,2,1]  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgerase.html", "cgerase.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgerase.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgerase.html#cgErase", "cgErase", 'routine in <a href="coyote/cgerase.html">cgerase.pro</a>', "cgerase.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgErase", "   Provides a device-independent and color-model-independent way to erase a graphics    window with a particular color.   ", "COLOR         An alternative way to specify the color to use in erasing the graphics window.          Color names are those used with cgColor. This parameter is used in          preference to the background_color parameter.  LAYOUT         This keyword specifies a grid with a graphics window and determines where the          graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].          The grid is determined by the number of columns (ncolumns) by the number of          rows (nrows). The location of the graphic is determined by the third number. The          grid numbering starts in the upper left (1) and goes sequentually by column and then          by row. If this keyword is used, only this portion of the window is erased.  WINDOW         Set this keyword to erase the current cgWindow application.  Erasing  in          this case means removing all the current commands.   background_color         The color to use in erasing the graphics window. Default is  white.           Color names are those used with cgColor.   ", "Graphics", "     Change History: <span class= code-output >  Written, 12 November 2010. DWF.</span> <span class= code-output >  Modified so that input variables are not changed. 18 Nov 2010. DWF.</span> <span class= code-output >  Got my color selection algorithm right. COLOR keyword takes precedence</span> <span class= code-output >    over the parameter. 18 Nov 2010. DWF.</span> <span class= code-output >  Modified to erase in decomposed color, if possible.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >  Added WINDOW keyword. 26 Jan 2011. DWF.</span> <span class= code-output >  Added LAYOUT keyword. 1 Feb 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.      Used to  erase  various things:   <span class= code-prompt >IDL&gt;</span> cgErase   <span class= code-prompt >IDL&gt;</span> cgErase, 'gray'   <span class= code-prompt >IDL&gt;</span> cgErase, COLOR='charcoal'    <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(1), /Window   <span class= code-prompt >IDL&gt;</span> cgErase, /Window    <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(17), Layout=[2,2,1]   <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(17), Layout=[2,2,4]   <span class= code-prompt >IDL&gt;</span> cgErase, Layout=[2,2,1]  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgerrplot.html", "cgerrplot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgerrplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgerrplot.html#cgErrPlot", "cgErrPlot", 'routine in <a href="coyote/cgerrplot.html">cgerrplot.pro</a>', "cgerrplot.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgErrPlot", " The purpose of cgErrPlot is to overplot error bars for data points on  previously drawn line and bar plots.   To allow cgErrPlot to be a drop-in replacement for the IDL ErrPlot program, the program  can be called in either of two ways: <span class= code-output >   cgErrPlot, indep, low, high</span>  Or: <span class= code-output >   cgErrPlot, high, low</span>  This is a really weird syntax (high and low reversed!), so be careful!   The program requires the Coyote Library  to be installed on your machine.   ", "AddCmd        Set this keyword to add the command to an cgWindow display.  Color        If this keyword is a string, the name of the data color. By default, 'black'.         Color names are those used with cgColor. Otherwise, the keyword is assumed         to be a color index into the current color table. May be a vector of the same         length as X.  Device        Not used. Just defined so it can't be used by the user of the program.  Horizontal        Set this keyword to draw an errorbar along the X direction.         In this case, indep contains coordinates along the Y axis,         and low and high along the X axis  NoClip        Defined differently than in PlotS.  PSym        Not used. Just defined so it can't be used by the user of the program.  Thick        The width of the lines used to draw the error bars.  Width        The width of the error bars, in units of the width of the plot area.  The default         is 1% of plot width. May be a vector of the same length as X.  _Extra        Any graphics keywords supported by the PLOTS command are allowed.   indep         The independent data vector (X vector) if all three input parameters are used.          If only two input parameters are used, this parameter is assumed to be the High          parameter.  low         If three input parameters are used, this parameter is assumed to contain the low          values of the error estimates. Error bars will be drawn from the low value to the          high value.  high         If three input parameters are used, this parameter is assumed to contain the high          values of the error estimates. Error bars will be drawn from the low value to the          high value.   ", "Graphics", "     Change History: <span class= code-output >  Written, 30 Jan 2012. Modeled on ErrPlot from IDL library. David W. Fanning.</span> <span class= code-output >  Added Horizontal keyword. 19 March 2013. Fabien Maussion.</span> <span class= code-output >  Forgot to allow COLOR keyword to be a vector of colors. 18 June 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Use like the IDL ErrPlot command: <span class= code-output >  data = cgDemoData(1)</span> <span class= code-output >  seed = 3L ; So you see what I see.</span> <span class= code-output >  x = Indgen(N_Elements(data))</span> <span class= code-output >  cgPlot, x, data</span> <span class= code-output >  errLow = RandomU(seed, N_Elements(data)) * 1.5</span> <span class= code-output >  errHigh = RandomU(seed, N_Elements(data)) * 1.5</span>     Then, use this: <span class= code-output >  cgErrPlot, x, data-errLow, data+errHigh, COLOR='red'</span>     Or, use this: <span class= code-output >  cgErrPlot, data+errHigh, data-errLow, Color='red'</span>     Use with a bar plot: <span class= code-output >  bardata = Indgen(10)+1</span> <span class= code-output >  barLow = RandomU(seed, N_Elements(bardata)) * 1.5</span> <span class= code-output >  barHigh = RandomU(seed, N_Elements(bardata)) * 1.5</span> <span class= code-output >  cgBarPlot, bardata, BarCoords=x</span> <span class= code-output >  cgErrPlot, x, bardata-barLow, bardata+barHigh, Color='blue'</span>     Use with horizontal bars.        y = cgDemoData(1)        seed = 3L        x = Indgen(N_Elements(y))        cgPlot, x, y, /WINDOW        errLow = RandomU(seed, N_Elements(y)) * 1.5        errHigh = RandomU(seed, N_Elements(y)) * 1.5        cgErrPlot, x, y-errLow, y+errHigh, COLOR='red', /ADDCMD        cgErrPlot, y, x-errLow, x+errHigh, COLOR='blue', /HORIZONTAL, /ADDCMD   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgfileselect__define.html", "cgfileselect__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgfileselect__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgfileselect__define.html#cgFileSelect::GetProperty", "cgFileSelect::GetProperty", 'routine in <a href="coyote/cgfileselect__define.html">cgfileselect__define.pro</a>', "cgfileselect__define.pro", "", "cgFileSelect::GetProperty", " This method returns the object properties.  ", "FILENAMELASTDIRPARENTTLBUNAMEUVALUE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgfileselect__define.html#cgFileSelect::SetProperty", "cgFileSelect::SetProperty", 'routine in <a href="coyote/cgfileselect__define.html">cgfileselect__define.pro</a>', "cgfileselect__define.pro", "", "cgFileSelect::SetProperty", " This method sets the object properties.  ", "FILENAMELASTDIRUVALUE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgfileselect__define.html#cgFileSelect::CLEANUP", "cgFileSelect::CLEANUP", 'routine in <a href="coyote/cgfileselect__define.html">cgfileselect__define.pro</a>', "cgfileselect__define.pro", "", "cgFileSelect::CLEANUP", " The class clean-up method.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgfileselect__define.html#cgFileSelect::INIT", "cgFileSelect::INIT", 'routine in <a href="coyote/cgfileselect__define.html">cgfileselect__define.pro</a>', "cgfileselect__define.pro", "", "cgFileSelect::INIT", " The class initialization method.   ", "FILENAMEFRAMELABELSIZENAMESIZETITLEUNAMEUVALUEparent          The identifier of the parent widget. If not used, a top-level base widget           will be created to hold the contents of the program.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgfileselect__define.html#cgFileSelect_Events", "cgFileSelect_Events", 'routine in <a href="coyote/cgfileselect__define.html">cgfileselect__define.pro</a>', "cgfileselect__define.pro", "", "cgFileSelect_Events", " The class event handler. All program widget events come here to be processed.   ", "event         The event structure from the widget causing the event. +  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgfileselect__define.html#cgFileSelect__Define", "cgFileSelect__Define", 'routine in <a href="coyote/cgfileselect__define.html">cgfileselect__define.pro</a>', "cgfileselect__define.pro", "", "cgFileSelect__Define", " The class definition module for the cgFileSelect object.   ", "class         The structure definition for the cgFileSelect object class.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgfindcoyotefiles.html", "cgfindcoyotefiles.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgfindcoyotefiles.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgfindcoyotefiles.html#cgFindCoyoteFiles", "cgFindCoyoteFiles", 'routine in <a href="coyote/cgfindcoyotefiles.html">cgfindcoyotefiles.pro</a>', "cgfindcoyotefiles.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgFindCoyoteFiles", " This procedure looks for Coyote Library routines in every directory in the IDL path  and reports the directories that it strongly suspects contain Coyote Library files.  The purpose of this is to aid in eliminating old and out-dated Coyote Library routines  from your IDL path. The goal is to have a single Coyote Library directory with the latest  Coyote Library programs in it.   ", "", "Utility", "     Written, 11 July 2012 by David W. Fanning.      Now looking for PS_Start and PS_End, too. 21 Feb 2013. DWF.        Copyright (c) 2012, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgfindmapboundary.html", "cgfindmapboundary.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgfindmapboundary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgfindmapboundary.html#cgFindMapBoundary", "cgFindMapBoundary", 'routine in <a href="coyote/cgfindmapboundary.html">cgfindmapboundary.pro</a>', "cgfindmapboundary.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgFindMapBoundary", " Utility routine to find the map projection grid boundary from a file,  if it is possible to do so. Currently works with GeoTIFF files, CF 1.4  compliant netCDF files, and GPD files created with the GPD_Viewer software  from the Catatlyst Library.   ", "USE_LATLON        If the filename is a netCDF file, set this keyword to force the boundary         to be determined by reading the include latitude/longitude arrays.  UTM_SOUTH        Set this keyword to add 10e6 to each of the Y values. This is sometimes         necessary with LandSat images in the Southern hemisphere, where the Y values         are given in negative values to indicate southern UTM zones.  XRANGE        A two element vector: boundary[[0,2]]  YRANGE        A two element vector: boundary[[1,3]]   filename       The name of a filename to open to see if a projected map grid boundary can be found.  boundary       The boundary of the image in projected meter space, in the form [x0,y0,x1,y1].   ", "Utility", "    Written by: David W. Fanning, 23 February 2010.: <span class= code-output >  Added XRANGE and YRANGE keywords. 25 February 2010. DWF</span> <span class= code-output >  Added USE_LATLON keyword for finding boundary of netCDF files containing latitude</span> <span class= code-output >     and longitude arrays. 6 April 2010. DWF.</span> <span class= code-output >  Added UTM_SOUTH keyword to handle Landsat dat in UTM projections in GeoTiff files</span> <span class= code-output >     that have to have 10e6 added to Y values to make them work in IDL. 14 Aug 2012. DWF.</span> <span class= code-output >  Renamed cgFindMapBoundary from FindMapBoundary. 21 Aug 2012. DWF.</span> <span class= code-output >  Changed reference to NCDF_Coord to cgNCDFMap. 28 Oct 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      The return value is either a 1, indicating a boundary can be found, or a 0 indicating     that the boundary could not be found.   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgfixps.html", "cgfixps.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgfixps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgfixps.html#cgFIXPS", "cgFIXPS", 'routine in <a href="idlastro/coyote/cgfixps.html">cgfixps.pro</a>', "cgfixps.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgFIXPS", " This program modifies an IDL-produced PostScript landscape mode file so that the output  is right side up rather than upside down. In other words, it turns a so-called seascape  file into an actual landscape file. Files that are not currently in landscape mode will  be ignored. Tested with single and multiple page PostScript output from IDL 7.0.1 and 7.1.   The program requires the Coyote Library  to be installed on your machine.   ", "A4        Set this keyword if the PostScript file is using a A4 Europeran sized page.  LEDGER        Set this keyword if the PostScript file is using a US ledger size (11 x 17 inch) page.  LEGAL        Set this keyword if the PostScript file is using a US legal size (8.5 x 14 inch) page.  LETTER        Set this keyword if the PostScript file is using a US letter size (8.5 x 11 inch) page.  PAGETYPE        A generic way to set the page size. A string of  LETTER ,  LEDGER ,  LEGAL , or  A4 .  QUIET        Set this keyword to suppress error messages from the program.  SUCCESS        If this keyword is set to a named variable, then on output the variable will         return a 1 if the operation was successful, and a 0 otherwise. Using this         keyword also supresses the program's ability to  throw  an error. Informational         messages are issued about program developments, but this program will allow the         program caller to decide what to do with unsuccessful program completion.   in_filename        The name of an IDL-produced PostScript file in landscape mode.  out_filename        The name of the fixed output PostScript file. If not provided, the input         file is overwritten. Overwritting assumes proper read/write permission in         TEMP directory and in the directory where the input file is located.   ", "Graphics Utilities", "     Change History: <span class= code-output > Written by: David W. Fanning, 6 August 2009.</span> <span class= code-output > Change to overwrite input file if output filename is not provided. 6 August 2009. DWF.</span> <span class= code-output > Incorporated checks for non-landscape mode files and files that have already been fixed. 6 August 2009. DWF.</span> <span class= code-output > Modified to fix multiple-page PostScript files and to work seamlessly with PS_START output. 8 August 2009. DWF.</span> <span class= code-output > Ran into a problem in which the PostScript file is stored in the directory pointed</span> <span class= code-output >    to by the IDL_TMPDIR environment variable. Now check to see if the input filename</span> <span class= code-output >    is the same as the output filename and make a change, if necessary. 22 July 2010. DWF.</span> <span class= code-output >  Retreated to standard error handling with ERROR_MESSAGE as there are inevitable errors. 2 August 2010. DWF.</span> <span class= code-output >  Output file was created, even if not used. Now deleting file and issuing messages to</span> <span class= code-output >     explain why output file was not created. 1 November 2010. DWF.</span> <span class= code-output >  Added SUCCESS and QUIET keywords. 15 Novemember 2010. DWF.</span> <span class= code-output >  PostScript file structure changed in IDL 8. Made adjustment to find the</span> <span class= code-output >      PageBoundingBox line. 19 Dec 2010. DWF.</span>       Copyright (c) 2009-2012, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgfixps.html", "cgfixps.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgfixps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgfixps.html#cgFIXPS", "cgFIXPS", 'routine in <a href="coyote/cgfixps.html">cgfixps.pro</a>', "cgfixps.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgFIXPS", " This program modifies an IDL-produced PostScript landscape mode file so that the output  is right side up rather than upside down. In other words, it turns a so-called seascape  file into an actual landscape file. Files that are not currently in landscape mode will  be ignored. Tested with single and multiple page PostScript output from IDL 7.0.1 and 7.1.   The program requires the Coyote Library  to be installed on your machine.   ", "A4        Set this keyword if the PostScript file is using a A4 Europeran sized page.  LEDGER        Set this keyword if the PostScript file is using a US ledger size (11 x 17 inch) page.  LEGAL        Set this keyword if the PostScript file is using a US legal size (8.5 x 14 inch) page.  LETTER        Set this keyword if the PostScript file is using a US letter size (8.5 x 11 inch) page.  PAGETYPE        A generic way to set the page size. A string of  LETTER ,  LEDGER ,  LEGAL , or  A4 .  QUIET        Set this keyword to suppress error messages from the program.  SUCCESS        If this keyword is set to a named variable, then on output the variable will         return a 1 if the operation was successful, and a 0 otherwise. Using this         keyword also supresses the program's ability to  throw  an error. Informational         messages are issued about program developments, but this program will allow the         program caller to decide what to do with unsuccessful program completion.   in_filename        The name of an IDL-produced PostScript file in landscape mode.  out_filename        The name of the fixed output PostScript file. If not provided, the input         file is overwritten. Overwritting assumes proper read/write permission in         TEMP directory and in the directory where the input file is located.   ", "Graphics Utilities", "     Change History: <span class= code-output > Written by: David W. Fanning, 6 August 2009.</span> <span class= code-output > Change to overwrite input file if output filename is not provided. 6 August 2009. DWF.</span> <span class= code-output > Incorporated checks for non-landscape mode files and files that have already been fixed. 6 August 2009. DWF.</span> <span class= code-output > Modified to fix multiple-page PostScript files and to work seamlessly with PS_START output. 8 August 2009. DWF.</span> <span class= code-output > Ran into a problem in which the PostScript file is stored in the directory pointed</span> <span class= code-output >    to by the IDL_TMPDIR environment variable. Now check to see if the input filename</span> <span class= code-output >    is the same as the output filename and make a change, if necessary. 22 July 2010. DWF.</span> <span class= code-output >  Retreated to standard error handling with ERROR_MESSAGE as there are inevitable errors. 2 August 2010. DWF.</span> <span class= code-output >  Output file was created, even if not used. Now deleting file and issuing messages to</span> <span class= code-output >     explain why output file was not created. 1 November 2010. DWF.</span> <span class= code-output >  Added SUCCESS and QUIET keywords. 15 Novemember 2010. DWF.</span> <span class= code-output >  PostScript file structure changed in IDL 8. Made adjustment to find the</span> <span class= code-output >      PageBoundingBox line. 19 Dec 2010. DWF.</span>       Copyright (c) 2009-2012, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("coyote/cggeomap.html", "cggeomap.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cggeomap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cggeomap.html#cgGeoMap", "cgGeoMap", 'routine in <a href="coyote/cggeomap.html">cggeomap.pro</a>', "cggeomap.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com/</span>  ", "cgGeoMap", "   The purpose of this function is to translate a GEOTIFF structure    (as returned by QUERY_TIFF or READ_TIFF) into a map coordinate    object (cgMap) that can be used to georeference images with a    map data coordinate system. The Coyote Library is required.     It is not possible to have a one-to-one mapping between every GeoTIFF file and a map projection    in IDL, since IDL has a limited number of map projections and datums available. And, even at that,    I have not implemented all of IDL's map projections or datums, only those that I thought were most    likely to be encountered in my own work. If you run into a GeoTIFF file that does not work in this    code (either because of an error in the code or because it is not supported), please contact me.    I am interested in supporting as many GeoTIFF files as possible and I will take pains to do so if    I know they are needed.   ", "BOUNDARY        A four-element array giving the boundaries of the map projection in the form         [x0,y0,x1,y1]. This is a more convenient way of expressing the range         of the map space.  CLIP         Set this keyword to display the image (assumes the Display keyword is set)          with a two-precent histogram clipping.  DISPLAY         Set this keyword to display the image with the map annotations in a          resizeable cgWindow.  ELLIPSOID         The name of the ellipsoid used in the GeoTiff file.  GCOLOR         The name of a color the map grid should be displayed with. The default          is  gray . Color names are those supported by cgColor.  GEOTIFF        A GeoTIFF structure of geoTags. Normally obtained by calling         QUERY_TIFF or READ_TIFF, but will be read from the file if a         filename is passed as the first positional parameter. If the geotag         is read from the file, it can be passed back to the user by setting         this keyword to a named variable.  GRID         If a cgMap object is made successfully, then setting this keyword          will add a cgMapGrid object to the cgMap object.  CCOLOR        The name of a color the map continents should be displayed with. The default         is  charcoal . Color names are those supported by cgColor.  CONTINENTS         If a cgMap object is made successfully, then setting this keyword          will add a cgMapContinents object to the cgMap object.  IMAGE         Set this keyword to a named variable that on exit will contain the image data.  LATLONBOX        A four-element array giving the boundaries of the map projection in the         Google Map form of [north, south, east, west]. This is useful when you         are creating image overlays to be added to Google Earth.  MAP_PROJECTION         The name of the map projection found in the GeoTiff file.  MCOLOR         The name of a color the map should be displayed in. (Normally the map          border and map title are displayed in this color.)  ONIMAGE         Set this keword if the map object is to get its position from the last          cgImage command issued.  PALETTE         If the GeoTiff file contains RGB color vectors, and keywords to cgGeoTiff cause the          file to be read (e.g, IMAGE or DISPLAY), then this output keyword will contain those          vectors in a 3-by-256 byte array.  SILENT         IDL cannot map every GeoTiff image to a supported map projection or datum.          Normally, if the GeoTIFF image is unsupported, an error message is issued.          Setting this keyword will suppress such error messages. If you do this, you          MUST check the SUCCESS keyword to see if the program ran successfully. (Of          course, it is a good idea to check it in any case!)  SUB_RECT         Set this keyword to a four-element array, [x, y, width, height], that          specifies a rectangular region within the file to extract. Only the          rectangular portion of the image selected by this keyword is read and          returned. The rectangle is measured in pixels from the lower left          corner (right hand coordinate system). If this keyword is not use, the          entire image is read.  SUCCESS         An output variable that will contain a 1 if the map coordinate object was          created successfully. Or to a 0 if it was not created successfully.  TITLE         The title of the map projection.  _EXTRA         Any keyword appropriate for cgImage can be collected and passed along if          the DISPLAY keyword is also set.   image        A GeoTIFF image. This can optionally be the name of a GeoTiff file.         If a filename is used, do not pass the geoTiff parameter, as this         parameter will be obtained from the GeoTiff file.   ", "Graphics Map Projections", "     Modification History: <span class= code-output >  Converted from old GeoTIff program in Catalyst Library to run with Coyote Graphics routines.</span> <span class= code-output >     9 November 2011. David W. Fanning.</span> <span class= code-output >   Assuming meters as unit length if can't find linear measure in file. 1 Dec 2011. DWF.</span> <span class= code-output >   Added UTM Zone 18S (projection 29178) for LandSAT MSS images over Amazon. 1 Dec 2011. DWF.</span> <span class= code-output >   Added the ability to pass cgImage keywords via the keyword inheritance mechanism. 1 Dec 2011. DWF.</span> <span class= code-output >   Added SUB_RECT keyword. 5 Dec 2011. DWF.</span> <span class= code-output >   Added ability to read GOES EAST and GOES WEST GeoTiff files  from this NOAA web site:</span> <span class= code-output >      http://http://www.osdpd.noaa.gov/ml/gis/index.html. 26 Dec 2011. DWF.</span> <span class= code-output >   Modified code to read GeoTiff files created by HEG v2.11 from HDF-EOS2 grid files. 30 Dec 2011. DWF.</span> <span class= code-output >   Modified to read multi-dimensional GeoTiff images and reverse the images correct. 12 Jan 2012. DWF.</span> <span class= code-output >   Write base filename as title for window if the DISPLAY keyword is set. 22 Feb 2012. DWF.</span> <span class= code-output >   Had inexplicably left out CENTER_LATITUDE parameter in Equirectangular projection. 30 July 2012. DWF.</span> <span class= code-output >   Added PALETTE keyword to return the RGB color palette present in the file, if any. 16 August 2012. DWF.</span> <span class= code-output >   Moved the geotiff argument to a GEOTIFF keyword, as I always expect it to be this way. 6 Sept 2012. DWF.</span> <span class= code-output >   Removed UTM/WGS84 warning message in IDL 8.2, as this problem has been fixed in IDL 8.2. 2 Oct 2012. DWF.</span> <span class= code-output >   Added BOUNDARY, ELLIPSOID, LATLONBOX, and MAP_PROJECTION output keywords to facilitate</span> <span class= code-output >      creating Google Earth overlays. 30 Oct 2012. DWF.</span>       Copyright (c) 2011-2012, Fanning Software Consulting, Inc.      To display a GeoTiff image in cgWindow with map annotations: <span class= code-output >  file = 'C:\IDL\data\tiff\AF03sep15b.n16-VIg.tif'</span> <span class= code-output >  mapCoord = cgGeoMap(file, /Continents, /Grid, /Display)</span>       A cgMap coordinate object is returned containing the map projection information      for the image.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cggeomosaic.html", "cggeomosaic.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cggeomosaic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cggeomosaic.html#cgGeoMosaic", "cgGeoMosaic", 'routine in <a href="coyote/cggeomosaic.html">cggeomosaic.pro</a>', "cggeomosaic.pro", "     FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgGeoMosaic", " Creates a mosaic or combination image, given the names of two GeoTiff image files.  The images must be 2D images.   ", "FILENAME         The name of the output GeoTiff file. If not provided, the user will          be asked to create a name. If provided, the user will not be prompted          and this name will be used.  IMAGEOUT         The final image mosaic.  MAPOUT         A map coordinate object (cgMap) that geolocates the new image mosaic.  MISSING         The missing value in the input images. If scalar value, the same value is used          for both images, but may be a two-element array.  MISS_OUT         The missing value of the output image. If undefined, missing[0] is used. If          missing[0] is undefined, the value 0B is used.  SUCCESS         This keyword is set to 1 if the function completed successfully. And to          0 otherwise.   geofile_1        The name of the first GeoTiff file to be combined into a mosaic.  geofile_2        The name of the second GeoTiff file to be combined into a mosaic.   ", "Map Utilities", "     Change History: <span class= code-output >  Written, 18 August 2012. DWF.</span> <span class= code-output >  Added SUCCESS keyword 4 September 2012. DWF.</span> <span class= code-output >  Now blending overlap regions using 50% of pixel values from the two images. 14 Sept 2012. DWF.</span> <span class= code-output >  Revamp of algorithm's handing of missing values.  Added MISS_OUT keyword and removed HISTOMATCH</span> <span class= code-output >     keyword because it only works for BYTE data. Restricted mosaicking to 2D images. 29 Jan 2013. DWF.</span>       Copyright (c) 2012-2013, Fanning Software Consulting, Inc.      The name of a GeoTiff image file containing the combined image mosaic.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cggoogle_metersperpixel.html", "cggoogle_metersperpixel.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cggoogle_metersperpixel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cggoogle_metersperpixel.html#cgGoogle_MetersPerPixel", "cgGoogle_MetersPerPixel", 'routine in <a href="coyote/cggoogle_metersperpixel.html">cggoogle_metersperpixel.pro</a>', "cggoogle_metersperpixel.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgGoogle_MetersPerPixel", " This funtion returns the number of meters per pixel for a particular zoom level  in images returned using Google's Static Image API.   ", "zoomLevel       The Google zoom level used in retrieving Google Maps using the static image API.        Documentation: https://developers.google.com/maps/documentation/staticmaps/.   ", "Utility", "     Written, 20 June 2012.      Updated the algorithm for determining meters per pixel to use WGS-84 equitorial radius         based on suggestion by Alain LeCacheax. 11 Sept 2012. DWF.        Copyright (c) 2012, Fanning Software Consulting, Inc.      For example, to find the meters per pixel for a zoom level of 12:   <span class= code-prompt >IDL&gt;</span> Print, cgGoogle_MetersPerPixel(12) <span class= code-output >       38.218514</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cggooglemapmarker__define.html", "cggooglemapmarker__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cggooglemapmarker__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapmarker__define.html#cgGoogleMapMarker__Define", "cgGoogleMapMarker__Define", 'routine in <a href="coyote/cggooglemapmarker__define.html">cggooglemapmarker__define.pro</a>', "cggooglemapmarker__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgGoogleMapMarker__Define", " This program is the definition module for a Google Map Marker structure, which is  used in the GoogleMapWidget object to add markers to Google Static Map images.   ", "", "Utility", "     Written, 20 June 2012.        Copyright (c) 2012, Fanning Software Consulting, Inc.      Create a variety of map markers: <span class= code-output >  marker1 = {cgGoogleMapMarker, 'normal', 'dodger blue', 'A', $</span> <span class= code-output >       Ptr_New(40.600), Ptr_New(-105.100)}</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cggooglemapwidget.html", "cggooglemapwidget.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cggooglemapwidget.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget.html#cgGoogleMapWidget", "cgGoogleMapWidget", 'routine in <a href="coyote/cggooglemapwidget.html">cggooglemapwidget.pro</a>', "cggooglemapwidget.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgGoogleMapWidget", " This is the driver for the cgGoogleMapWidget object, which is a compound widget  object that obtains a Google static map from Google Maps and displays it in the  program's draw widget window. It can be used either as a stand-alone program or  to create a map image in draw widget in a larger widget program.   This program implements a subset of the Google Static Map API, which can be found in  more detail here: https://developers.google.com/maps/documentation/staticmaps/. The  program works by building a URL for a map image. A connection to the Internet is  required to then request a map image (in GIF, JPEG or PNG format) to be returned from  Google Maps. The returned image is then read and loaded into a draw widget window  of the right size for the returned map image. The default is to delete the image file  that is created, but the user can also set keywords to retain the image that is downloaded  from Google Maps. Users are able to control button and motion events in the resulting  draw widget with their own event handler module. A cgMap coordinate object is created  to establish a map reference coordinate system on top of the returned map image, allowing  other map information to be drawn on top of the returned map image.   ", "BOX_AXES         Set this keyword to draw box axes around the Google Map.  BUTTON_EVENTS         Set this keyword to turn button events on for the draw widget in the program.  CENTER_LATITUDE         The center latitude of the requested Google map. If not provided, the latitude of          Fort Collins, Colorado, home of Coyote. Latitudes are only recognized to four          decimals values of precision.  CENTER_LONGITUDE         The center longitude of the requested Google map. If not provided, the longitude of          Fort Collins, Colorado, home of Coyote. Longitude are only recognized to four          decimals values of precision.  IMAGETYPE         The type of image format the Google map should be returned in. The default is          a 32-bit full color PNG file. The image types are given in the Google Static Map          API documentation and are as follows: png or png8, png32, gif, jpg, and jpg-baseline.  KEEP_IMAGE         Set this keyword if you wish to save the Google map as an image when the object          is destroyed.  EVENT_METHOD         The name of the event handler method for the draw widget. If you use this keyword,          you will also need to write this event handler module. It gets sent one positional          parameter, the event structure created by the draw widget.  EVENT_PRO         The name of an external event handler procedure for the draw widget. The event handler          procedure gets sent one positional parameter, the event structure created by the draw widget.  MAPTYPE         Set this keyword to the type of map you wish to retrieve from Google Maps. The          choices are listed in the Google Static Map API documentation and are:  roadmap ,           terrain ,  satellite , and  hybrid .  MARKERS         A scalar or array of cgGoogleMapMarker structures. If present, the markers will          be requested with the map from Google. The cgGoogleMapMarker structure is defined          like this: <span class= code-output >  struct = { cgGOOGLEMAPMARKER, $</span> <span class= code-output >     size:   , $         ; The marker size ( tiny ,  small ,  mid  or  normal )</span> <span class= code-output >     color:   , $        ; A color name as provided by cgColor.</span> <span class= code-output >     label:   , $        ; A single uppercase character label from the set {A-Z,0-9}.</span> <span class= code-output >     lats: Ptr_New(), $  ; A pointer to one or more latitude values.</span> <span class= code-output >     lons: Ptr_New() }   ; A pointer to one or more longitude values.</span>         Note that the user will be responsible for freeing the pointers in the MARKERS          structure. This program will not do that.  MOTION_EVENTS         Set this keyword to turn motion events on for the draw widget in the program.  TEMPDIR         The directory where the image containing the Google map is written. By default,          it is obtained from the environment like this: tempdir = GetEnv('IDL_TMPDIR').  VISIBLEMARKERS         Set this keyword to 0 to temporarily turn off the display of the markers. Normally,          markers are drawn (if present), unless this flag is set to 0.  XSIZE         The X size of the program's draw widget. A maximum of 690 if box axes are requested          and a maximum of 640 if no box axes are requested. Box axes require a 25 pixel border          and the maximum size of a Google Map is 640 pixels.  YSIZE         The Y size of the program's draw widget. A maximum of 690 if box axes are requested          and a maximum of 640 if no box axes are requested. Box axes require a 25 pixel border          and the maximum size of a Google Map is 640 pixels.  ZOOMLEVEL         The zoom level of the requested Google map. Should be an integer between 0 and 21.   parent         The identifier of the parent widget of the draw widget that is going to be          created by the program. If not provided, the program will create its own          top-level base widget as the parent.   ", "Graphics Widgets", "     Change History: <span class= code-output >  Written, 25 June 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Used to put two markers on a map of Fort Collins, Colorado, in a stand-alone window: <span class= code-output >   PRO cgGoogleMapWidget_Test</span> <span class= code-output >       marker1 = {cgGOOGLEMAPMARKER, 'normal', 'dodger blue', 'A', Ptr_New(40.600), Ptr_New(-105.100)}</span> <span class= code-output >       marker2 = {cgGOOGLEMAPMARKER, 'normal', 'purple',      'B', Ptr_New(40.605), Ptr_New(-105.105)}</span> <span class= code-output >       googleObject = cgGoogleMapWidget(MARKERS=[marker1, marker2], MAPTYPE='Terrain')</span> <span class= code-output >   END</span>      The return value is an instance of a cgGoogleMapWidget object.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html", "cggooglemapwidget__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cggooglemapwidget__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " This is a compound widget object that obtains a Google static map from Google Maps  and displays it in the program's draw widget window. It can be used either as a  stand-alone program or to create a map image in draw widget in a larger widget program.   This program implements a subset of the Google Static Map API, which can be found in  more detail here: https://developers.google.com/maps/documentation/staticmaps/. The  program works by building a URL for a map image. A connection to the Internet is  required to then request a map image (in JPEG or PNG format) to be returned from  Goggle Maps. The returned image is then read and loaded into a draw widget window  of the right size for the returned map image. The default is to delete the image file  that is created, but user can also set keywords to retain the image that is downloaded  from Google Maps. Users are able to control button and motion events in the resulting  draw widget with their own event handler module. A cgMap coordinate object is created  to establish a map reference coordinate system on top of the returned map image, allowing  other map information to be drawn on top of the returned map image.      ", "", "Graphics", "     Change History: <span class= code-output >  Written, 25 June 2012. DWF.</span> <span class= code-output >  Set the RETAIN keyword on the draw widget for UNIX machines. 28 June 2012. DWF.</span> <span class= code-output >  Beefed up and changed error handling when failing to obtain a map from Google Maps. 28 June 2012. DWF.</span> <span class= code-output >  Added NoForwardFix keyword to call to cgMap to allow better drawing of markers. 29 June 2012. DWF.</span> <span class= code-output >  Added the ability to turn markers on or off with VisibleMarkers keyword and property. 29 June 2012. DWF.</span> <span class= code-output >  Added a WID keyword to the GetProperty method to all the user to obtain the Goggle Map</span> <span class= code-output >      window index number. 29 Aug 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Used to put two markers on a map of Fort Collins, Colorado, in a stand-alone window: <span class= code-output >   PRO cgGoogleMapWidget_Test</span> <span class= code-output >       marker1 = {cgGOOGLEMAPMARKER, 'normal', 'dodger blue', 'A', Ptr_New(40.600), Ptr_New(-105.100)}</span> <span class= code-output >       marker2 = {cgGOOGLEMAPMARKER, 'normal', 'purple',      'B', Ptr_New(40.605), Ptr_New(-105.105)}</span> <span class= code-output >       googleObject = Obj_New('cgGoogleMapWidget', MARKERS=[marker1, marker2], MAPTYPE='Terrain')</span> <span class= code-output >   END</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::INIT", "cgGoogleMapWidget::INIT", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::INIT", " This is the initialization method of the cgGoogleMapWidget object.   ", "BOX_AXES         Set this keyword to draw box axes around the Google Map.  BUTTON_EVENTS         Set this keyword to turn button events on for the draw widget in the program.  CENTER_LATITUDE         The center latitude of the requested Google map. If not provided, the latitude of          Fort Collins, Colorado, home of Coyote. Latitudes are only recognized to four          decimals values of precision.  CENTER_LONGITUDE         The center longitude of the requested Google map. If not provided, the longitude of          Fort Collins, Colorado, home of Coyote. Longitude are only recognized to four          decimals values of precision.  EVENT_METHOD         The name of the event handler method (a procedure) for the draw widget. If you use this keyword,          you will also need to write this event handler module. It gets sent one positional          parameter, the event structure created by the draw widget.  EVENT_PRO         The name of an external event handler procedure for the draw widget. The event handler          procedure gets sent one positional parameter, the event structure created by the draw widget.  IMAGETYPE         The type of image format the Google map should be returned in. The default is          a 32-bit full color PNG file. The image types are given in the Google Static Map          API documentation and are as follows: png or png8, png32, gif, jpg, and jpg-baseline.  KEEP_IMAGE         Set this keyword if you wish to save the Google map as an image when the object          is destroyed.  MAPTYPE         Set this keyword to the type of map you wish to retrieve from Google Maps. The          choices are listed in the Google Static Map API documentation and are:  roadmap ,           terrain ,  satellite , and  hybrid .  MARKERS         A scalar or array of cgGoogleMapMarker structures. If present, the markers will          be requested with the map from Google. The cgGoogleMapMarker structure is defined          like this: <span class= code-output >  struct = { cgGOOGLEMAPMARKER, $</span> <span class= code-output >     size:   , $         ; The marker size ( tiny ,  small ,  mid  or  normal )</span> <span class= code-output >     color:   , $        ; A color name as provided by cgColor.</span> <span class= code-output >     label:   , $        ; A single uppercase character label from the set {A-Z,0-9}.</span> <span class= code-output >     lats: Ptr_New(), $  ; A pointer to one or more latitude values.</span> <span class= code-output >     lons: Ptr_New() }   ; A pointer to one or more longitude values.</span>         Note that the user will be responsible for freeing the pointers in the MARKERS          structure. This program will not do that.  MOTION_EVENTS         Set this keyword to turn motion events on for the draw widget in the program.  TEMPDIR         The directory where the image containing the Google map is written. By default,          it is obtained from the environment like this: tempdir = GetEnv('IDL_TMPDIR').  VISIBLEMARKERS         Set this keyword to 0 to temporarily turn off the display of the markers. Normally,          markers are drawn (if present), unless this flag is set to 0.  XSIZE         The X size of the program's draw widget. A maximum of 690 if box axes are requested          and a maximum of 640 if no box axes are requested. Box axes require a 25 pixel border          and the maximum size of a Google Map is 640 pixels.  YSIZE         The Y size of the program's draw widget. A maximum of 690 if box axes are requested          and a maximum of 640 if no box axes are requested. Box axes require a 25 pixel border          and the maximum size of a Google Map is 640 pixels.  ZOOMLEVEL         The zoom level of the requested Google map. Should be an integer between 0 and 21.  parent         The identifier of the parent widget of the draw widget that is going to be          created by the program. If not provided, the program will create its own          top-level base widget as the parent.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::CLEANUP", "cgGoogleMapWidget::CLEANUP", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::CLEANUP", " The clean-up method for the object. When the object is destroyed,  this method will free the object's pointers and objects. If you  wanted to save the map image file, this is where you do it.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::CreateMapCoordObject", "cgGoogleMapWidget::CreateMapCoordObject", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::CreateMapCoordObject", " This method creates a cgMap map coordinate object for georeferencing the  map image returned by Google maps. Use this object to establish a geocoordinate  reference rectangle for drawing on top of the map image.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::Draw", "cgGoogleMapWidget::Draw", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::Draw", " The purpose of this method is obtain the map from Google as an image and display  it in the draw widget window.   ", "SUCCESS        On return, if set to 1 a map image was successfully obtained from Google. Otherwise, 0.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::DrawWidgetEvents", "cgGoogleMapWidget::DrawWidgetEvents", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::DrawWidgetEvents", " The purpose of this method is handle draw widget events.   ", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::GetMapCoord", "cgGoogleMapWidget::GetMapCoord", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::GetMapCoord", " This method returns the map coordinate object that sets up the georeferencing  coordinate system (in projected meter space) for drawing on top of the map image.   ", "UPDATE         Set this keyword to make sure a new map coordinate object is created.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::GetProperty", "cgGoogleMapWidget::GetProperty", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::GetProperty", " The properties of the object are retrieved with this method.   ", "CENTER_LATITUDE         The center latitude of the requested Google map.  CENTER_LONGITUDE         The center longitude of the requested Google map.  EVENT_METHOD         The name of the event handler method for the draw widget.  FILENAME         The name of the file where the map image is stored.  MAPIMAGE         The image variable containing the Goggle map. The size and dimensions          of the image depend upon what was retrieved from Google.  IMAGETYPE         The type of image format the Google map should be returned in.  MAPPOSITION         The position of the map in the display window.  MAPCOORD         The map coordinate object. Another way to obtain the map coordinate object is          to use the GetMapCoord method.  MAPTYPE         The type of Google map requested by the program.  MARKERSWIDXSIZE         The X size of the program's draw widget.  YSIZE         The Y size of the program's draw widget.  ZOOMLEVEL         The zoom level of the requested Google map.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::Map_Type", "cgGoogleMapWidget::Map_Type", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::Map_Type", " The purpose of this method is to display a map with a particular map type.   ", "event       The event structure passed to this event handler method from which the map        type can be obtained. Or, the map type itself, passed as a string.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::Notify_Realize", "cgGoogleMapWidget::Notify_Realize", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::Notify_Realize", " The purpose of this method is to draw the initial map plot in the draw widget.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::SetProperty", "cgGoogleMapWidget::SetProperty", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::SetProperty", " The purpose of this method is to set some of the object's properties. If  you wish to retrive a new map after updating the object properties, be sure  to set the DRAW keyword.   ", "CENTER_LATITUDE         The center latitude of the requested Google map. If not provided, the latitude of          Fort Collins, Colorado, home of Coyote. Latitudes are only recognized to four          decimals values of precision.  CENTER_LONGITUDE         The center longitude of the requested Google map. If not provided, the longitude of          Fort Collins, Colorado, home of Coyote. Longitude are only recognized to four          decimals values of precision.  DRAW         Set this keyword if you want to immediate retrieve and display a new map with the          updated properties.  EVENT_METHOD         The name of the event handler method for the draw widget. If you use this keyword,          you will also need to write this event handler module. It gets sent one positional          parameter, the event structure created by the draw widget.  EVENT_PRO         The name of an external event handler procedure for the draw widget. The event handler          procedure gets sent one positional parameter, the event structure created by the draw widget.  IMAGETYPE         The type of image format the Google map should be returned in. The default is          a 32-bit full color PNG file. The image types are given in the Google Static Map          API documentation and are as follows: png or png8, png32, gif, jpg, and jpg-baseline.  MAPTYPE         Set this keyword to the type of map you wish to retrieve from Google Maps. The          choices are listed in the Google Static Map API documentation and are:  roadmap ,           terrain ,  satellite , and  hybrid .  MARKERS         A scalar or array of cgGoogleMapMarker structures. If present, the markers will          be requested with the map from Google. The GoogleMapMarker structure is defined          like this: <span class= code-output >  struct = { cgGOOGLEMAPMARKER, $</span> <span class= code-output >     size:   , $         ; The marker size ( tiny ,  small ,  mid  or  normal )</span> <span class= code-output >     color:   , $        ; A color name as provided by cgColor.</span> <span class= code-output >     label:   , $        ; A single uppercase character label from the set {A-Z,0-9}.</span> <span class= code-output >     lats: Ptr_New(), $  ; A pointer to one or more latitude values.</span> <span class= code-output >     lons: Ptr_New() }   ; A pointer to one or more longitude values.</span>         Note that the user will be responsible for freeing the pointers in the MARKERS          structure. This program will not do that.  VISIBLEMARKERS         Set this keyword to 0 to temporarily turn off the display of the markers. Normally,          markers are drawn (if present), unless this flag is set to 0.  ZOOMLEVEL         The zoom level of the requested Google map. Should be an integer between 0 and 21.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::SetWindow", "cgGoogleMapWidget::SetWindow", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::SetWindow", " The purpose of this method is to make the draw widget window the current window.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::Zoom_In", "cgGoogleMapWidget::Zoom_In", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::Zoom_In", " The purpose of this method is to zoom into the map by  increasing the zoom factor.   ", "event       The event structure passed to this event handler method. Not used currently.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget::Zoom_Out", "cgGoogleMapWidget::Zoom_Out", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget::Zoom_Out", " The purpose of this method is to zoom out of the map by  decreasing the zoom factor.   ", "event       The event structure passed to this event handler method. Not used currently.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget_Notify_Realize", "cgGoogleMapWidget_Notify_Realize", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget_Notify_Realize", " This is the realize notify routine for the widget. Its function call the  Realize_Notify method to draw the initial plot in the display window.   ", "id        The widget identifier of the widget that has been realized.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget_Cleanup", "cgGoogleMapWidget_Cleanup", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget_Cleanup", " This is the cleanup routine for the widget. Its function is to destroy  the underlying program object.   ", "tlb        The widget identifier of the parent base widget that just died.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget_Events", "cgGoogleMapWidget_Events", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget_Events", " This is the main event handler for the program. All events come here  to be distributed to the appropriate event handler method according  to instructions packed into the UVALUE of any widget generating an  event.   ", "event        The event structure passed by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggooglemapwidget__define.html#cgGoogleMapWidget__Define", "cgGoogleMapWidget__Define", 'routine in <a href="coyote/cggooglemapwidget__define.html">cggooglemapwidget__define.pro</a>', "cggooglemapwidget__define.pro", "", "cgGoogleMapWidget__Define", " The object class definition for the cgGoogleMapWidget class.   ", "class        The object class definition as a structure. Occasionally, comes in handy.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cggraphicskeywords__define.html", "cggraphicskeywords__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cggraphicskeywords__define.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " Provides an object interface to handle IDL direct graphics plotting keywords. Basically,  any graphics keyword that is common to IDL plotting routines (e.g. Plot, Contour,  Surface, etc.) is supported here. See the IDL documentation for  Graphics Keywords for  a complete list.   The program requires the Coyote Library  to be installed on your machine.   ", "", "Graphics", "     Change History: <span class= code-output >  Written, 16 May 2012, by David W. Fanning.</span> <span class= code-output >  Added missing LINESTYLE keyword. 22 May 2012. DWF.</span> <span class= code-output >  BIG problem in the way I was handling the PSYM keyword solved! 18 July 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cggraphicskeywords__define.html#cgGraphicsKeywords::INIT", "cgGraphicsKeywords::INIT", 'routine in <a href="coyote/cggraphicskeywords__define.html">cggraphicskeywords__define.pro</a>', "cggraphicskeywords__define.pro", "", "cgGraphicsKeywords::INIT", " This method initializes the object. Any  graphics keyword  that falls under  the IDL definition is allowed. Plus, there are a few  Coyote Graphics  specific  keywords (e.g., AXISCOLOR) that are not allowed in normal IDL plotting routines.  Colors are handled in the Coyote Graphics way, as color names, primarily.  ", "AXISCOLORBACKGROUNDCHARSIZECHARTHICKCLIPCOLORDATADEVICELINESTYLENORMALFONTNOCLIPNODATANOERASEPOSITIONPSYMSUBTITLESYMSIZET3DTHICKTICKLENTITLEXCHARSIZEXGRIDSTYLEXMARGINXMINORXRANGEXSTYLEXTHICKXTICK_GETXTICKFORMATXTICKINTERVALXTICKLAYOUTXTICKLENXTICKNAMEXTICKSXTICKUNITSXTICKVXTITLEYCHARSIZEYGRIDSTYLEYMARGINYMINORYRANGEYSTYLEYTHICKYTICK_GETYTICKFORMATYTICKINTERVALYTICKLAYOUTYTICKLENYTICKNAMEYTICKSYTICKUNITSYTICKVYTITLEZCHARSIZEZGRIDSTYLEZMARGINZMINORZRANGEZSTYLEZTHICKZTICK_GETZTICKFORMATZTICKINTERVALZTICKLAYOUTZTICKLENZTICKNAMEZTICKSZTICKUNITSZTICKVZTITLEZVALUE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggraphicskeywords__define.html#cgGraphicsKeywords::CLEANUP", "cgGraphicsKeywords::CLEANUP", 'routine in <a href="coyote/cggraphicskeywords__define.html">cggraphicskeywords__define.pro</a>', "cggraphicskeywords__define.pro", "", "cgGraphicsKeywords::CLEANUP", " The clean-up method for the object. Nearly all keywords are stored as pointers  that must be cleaned up here.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggraphicskeywords__define.html#cgGraphicsKeywords::GetProperty", "cgGraphicsKeywords::GetProperty", 'routine in <a href="coyote/cggraphicskeywords__define.html">cggraphicskeywords__define.pro</a>', "cggraphicskeywords__define.pro", "", "cgGraphicsKeywords::GetProperty", " The GetProperty method is the way graphics routines obtain the keyword values for  the graphics keywords.  ", "AXISCOLORBACKGROUNDCHARSIZECHARTHICKCLIPCOLORDATADEVICEFONTLINESTYLENORMALNOCLIPNODATANOERASEPOSITIONPSYMSUBTITLESYMSIZET3DTHICKTICKLENTITLEXCHARSIZEXGRIDSTYLEXMARGINXMINORXRANGEXSTYLEXTHICKXTICK_GETXTICKFORMATXTICKINTERVALXTICKLAYOUTXTICKLENXTICKNAMEXTICKSXTICKUNITSXTICKVXTITLEYCHARSIZEYGRIDSTYLEYMARGINYMINORYRANGEYSTYLEYTHICKYTICK_GETYTICKFORMATYTICKINTERVALYTICKLAYOUTYTICKLENYTICKNAMEYTICKSYTICKUNITSYTICKVYTITLEZCHARSIZEZGRIDSTYLEZMARGINZMINORZRANGEZSTYLEZTHICKZTICK_GETZTICKFORMATZTICKINTERVALZTICKLAYOUTZTICKLENZTICKNAMEZTICKSZTICKUNITSZTICKVZTITLEZVALUE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggraphicskeywords__define.html#cgGraphicsKeywords::SetProperty", "cgGraphicsKeywords::SetProperty", 'routine in <a href="coyote/cggraphicskeywords__define.html">cggraphicskeywords__define.pro</a>', "cggraphicskeywords__define.pro", "", "cgGraphicsKeywords::SetProperty", " The SetProperty method is how these keyword values are set for the plotting routine.  ", "AXISCOLORBACKGROUNDCHARSIZECHARTHICKCLIPCOLORDATADEVICENORMALFONTLINESTYLENOCLIPNODATANOERASEPOSITIONPSYMSUBTITLESYMSIZET3DTHICKTICKLENTITLEXCHARSIZEXGRIDSTYLEXMARGINXMINORXRANGEXSTYLEXTHICKXTICK_GETXTICKFORMATXTICKINTERVALXTICKLAYOUTXTICKLENXTICKNAMEXTICKSXTICKUNITSXTICKVXTITLEYCHARSIZEYGRIDSTYLEYMARGINYMINORYRANGEYSTYLEYTHICKYTICK_GETYTICKFORMATYTICKINTERVALYTICKLAYOUTYTICKLENYTICKNAMEYTICKSYTICKUNITSYTICKVYTITLEZCHARSIZEZGRIDSTYLEZMARGINZMINORZRANGEZSTYLEZTHICKZTICK_GETZTICKFORMATZTICKINTERVALZTICKLAYOUTZTICKLENZTICKNAMEZTICKSZTICKUNITSZTICKVZTITLEZVALUE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggraphicskeywords__define.html#cgGraphicsKeywords__Define", "cgGraphicsKeywords__Define", 'routine in <a href="coyote/cggraphicskeywords__define.html">cggraphicskeywords__define.pro</a>', "cggraphicskeywords__define.pro", "", "cgGraphicsKeywords__Define", " This is the object class definition for the cgGraphicsKeywords object class.  Normally, this class serves as the superclass for Coyote Graphics graphics  objects that need graphics keyword support.  ", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cggreek.html", "cggreek.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cggreek.pro", "", "", " NAME:   cgGREEK   PURPOSE:     This function provides a device-independent way to ask for a Greek letter as    a string that can be included, for example, in a plot title. It uses the Greek    simplex font (!4) when used with Hershey fonts, and the Symbol font (!9) when    used with PostScript or True-Type fonts. Selects the type of Greek character to    return based on value of !P.FONT. Updated now to return the UNICODE values for    Greek characters for those fonts that support them (Macintosh?).   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Graphics, Utilities   CALLING SEQUENCE:     greekString = cgGreek(greekLetter)   RETURN VALUE:     greekString    A string that represents the Greek letter.   ARGUMENTS:    greekLetter:    The name of the Greek letter desired. A string. Default: 'alpha'.                   Valid string names are the 24 characters of the Greek alphabet.                      alpha        nu                      beta         xi                      gamma        omicron                      delta        pi                      epsilon      rho                      zeta         sigma                      eta          tau                      theta        upsilon                      iota         phi                      kappa        chi                      lambda       psi                      mu           omega                     Note that if the first letter of the name is capitalized, this is                    the equivalent of setting the CAPITAL keyword.   KEYWORDRS:    CAPTIAL:        If this keyword is set, the captial Greek letter is returned rather                   than the lowercase Greek letter. An alternative way of capitalizing                   the letter is to make the first letter of the name an uppercase letter.    EXAMPLE:        If this keyword is set, the names of the Greek characters and their                   symbols are written out in the current graphics window.    PS:             Normally, the PostScript version of the greek letter is returned if                   the current device is PostScript and !P.Font is 0 or 1. But, the                   PostScript version of the greek letter can be obtained at any time                   and in any device, by setting this keyword.    UNICODE:        If this keyword is set, the function returns the Unicode for the Greek                   letter.   EXAMPLE:    Lowercase PSI:       IDL&gt; Plot, findgen(11), XTitle='This title contains ' + $            cgGreek('psi') + ' as a Greek letter'    Uppercase PSI:       IDL&gt; Plot, findgen(11), XTitle='This title contains ' + $            cgGreek('Psi') + ' as a Greek letter'  NOTES:    See the following article for additional information:         http://www.idlcoyote.com/ps_tips/greeksym.html   RESTRICTIONS:    For this program to work correctly on your graphics display, you should be using   Hershey fonts (!P.Font=-1). It will work correctly in PostScript with either   hardware fonts (!P.Font=0) or True-Type fonts (!P.Font=1).   MODIFICATION HISTORY:    Written by: David W. Fanning, 9 January 2010.   An alternative way to get an uppercase letter is to make the first letter of      the Greek name uppercase. (Maarten Sneep's suggestion!) 11 Jan 2010. DWF   Had the wrong value for the PostScript version of Phi. 26 January 2010. DWF   Added UNICODE keyword and values for Greek characters. 11 June 2010. DWF.   Changed the branching from !D.NAME EQ 'PS' to !P.FONT NE -1. (This is actually       what the documentation says, and what I intended.) 13 Dec 2010. DWF.   I don't think the last change did quite want I wanted. More tweaking to make       this more responsive to being in a PostScript file. 31 July 2011. DWF.   Added PS keyword so the return value is the PostScript file. This is for       convenience only, as the return value will be the PostScript value if       the current graphics device is PS and FONT is not equal to -1. 30 Aug 2011. DWF.   Retired Greek and replaced by cgGreek. 23 Dec 2012. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cggreek.html#cgGreek_Example", "cgGreek_Example", 'routine in <a href="coyote/cggreek.html">cggreek.pro</a>', "cggreek.pro", "", "cgGreek_Example", "", "UNICODEPS", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cggreek.html#cgGreek", "cgGreek", 'routine in <a href="coyote/cggreek.html">cggreek.pro</a>', "cggreek.pro", "", "cgGreek", "", "CAPITALEXAMPLEPSUNICODEletter", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cghasimagemagick.html", "cghasimagemagick.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cghasimagemagick.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cghasimagemagick.html#cgHasImageMagick", "cgHasImageMagick", 'routine in <a href="coyote/cghasimagemagick.html">cghasimagemagick.pro</a>', "cghasimagemagick.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgHasImageMagick", "   Searches for the ImageMagick  convert  command to see if ImageMagick is available    on the system.   ", "VERSION        Returns the version number of the ImageMagick convert command, if found.   ", "Utilities", "     Change History: <span class= code-output >  Written, 17 January 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used to determine if the ImageMagick convert command is available:   <span class= code-prompt >IDL&gt;</span> available = cgHasImageMagick(Version=version)   <span class= code-prompt >IDL&gt;</span> IF available THEN Print, version  ");
  
  

libdata[libdataItem++] = new Array("coyote/cghistogram.html", "cghistogram.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cghistogram.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cghistogram.html#cgHistogram", "cgHistogram", 'routine in <a href="coyote/cghistogram.html">cghistogram.pro</a>', "cghistogram.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgHistogram", " This program is used as a wrapper to the Histogram command in IDL. It works around a bug  in the Histogram command when byte data is binned in versions prior to IDL 8.2, and it takes  care to match the data type of the BinSize keyword to the data type of the data being binned.  If this matching is not done, Histogram silently returns incorrect results. I have added the ability to  smooth the data (with the Smooth keyword) and to return the relative frequency of the histogram,  rather than the histogram counts (with the Frequency keyword). The relative frequency is a  number between 0 and 1. I have also added the ability to specify  missing  data that should not be  binned.   ", "BINSIZE       The binsize of the histogram. By default, Scott's Choice of bin size for histograms is used: <span class= code-output >   binsize = (3.5 * StdDev(data)) / N_Elements(data)^(0.3333)</span>        If BINSIZE in not defined, and NBINS is defined, the BINSIZE is calcuated as: <span class= code-output >    binsize = (Max(dataToHistogram) - Min(dataToHistogram)) / (NBINS -1)</span>        While it is pointed out in the HISTOGRAM documentation, it is extremely        important that the BINSIZE be of the same data type as the data you are going to        calculate the histogram of. If it is not, VERY strange things can happen, but the        worst is that HISTOGRAM silently returns incorrect results. I try hard to avoid this        result in this program.  FREQUENCY       If this keyword is set, the relative frequency is returned, rather than the        histogram counts. Relative frequency is a number between 0 and 1. The total of        all the relative frequencies should equal 1.0.  INPUT       Set this keyword to a named variable that contains an array to be added to the        output of cgHistogram. The density function of data is added to the existing        contents of Input and returned as the result. The array is converted to        longword type if necessary and must have at least as many elements as are        required to form the histogram. Multiple histograms can be efficiently        accumulated by specifying partial sums via this keyword.  L64       If set, the return value of HISTOGRAM are 64-bit integers, rather than        the default 32-bit integers. Set by default if 64-bit integers are passed in.  LOCATIONS       Starting locations of each bin. Locations has the same number of elements as the result,        and has the same data type as the input data array.  MAX       The maximum value to use in calculating input histogram.  MIN       The minimum value to use in calculating input histogram.  MISSING       The value that should be represented as  missing  and not used in the histogram.        Be aware that if the input data is not of type  float  or  double  that the input        data will be converted to floating point prior to calculating the histogram.  NAN       If set, ignore NAN values in calculating and plotting histogram. Set by default if the        Missing keyword is used.  NBINS       The number of output bins in the histogram. The meaning is slightly different from        the meaning in the HISTOGRAM command. Used only to calculate BINSIZE when BINSIZE is        not specified. In this case, binsize = rangeofData/(nbins-1). When the number of bins        is low, the results can be non-intuitive. For this reason, I would discourage the use        of NBins in favor of the BinSize keyword.  OMAX       The maximum output value used to construct the histogram. (See HISTOGRAM documentation.)  OMIN       The minimum output value used to construct the histogram. (See HISTOGRAM documentation.)  REVERSE_INDICES       The list of reverse indices returned from the HISTOGRAM command. (See HISTOGRAM documentation.)  SMOOTH       Set this keyword to an odd positive integer to smooth the histogram output before plotting.        The integer will set the width of a smoothing box to be applied to the histogram data with        the Smooth function. This keyword is ignored if the Frequency keyword is set.   data       The data from which the histogram is created.   ", "General", "    Change History: <span class= code-output >  Written by:  David W. Fanning, 7 March 2013.</span>       Copyright (c) 2013, Fanning Software Consulting, Inc.      Create a normal distribution of random numbers and take the histogram: <span class= code-output >  numbers = RandomU(-3L, 1000, /Normal)</span> <span class= code-output >  histResults = cgHistogram(numbers, Binsize=0.25)</span> <span class= code-output >  cgPlot, histResults</span>     Additional examples of histogram plots can be found here: <span class= code-output >   http://www.idlcoyote.com/gallery/index.html</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cghistoplot.html", "cghistoplot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cghistoplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cghistoplot.html#cgHistoplot", "cgHistoplot", 'routine in <a href="coyote/cghistoplot.html">cghistoplot.pro</a>', "cghistoplot.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgHistoplot", " This program is used to draw a histogram plot in an IDL direct graphics window..      The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD       Set this keyword to add the command to the resizeable graphics window cgWindow.  AXISCOLORNAME       The name of the axis color. All color names are derived from cgColor.  BACKCOLORNAME       The name of the background color. All color names are derived from cgColor.  BINSIZE       The binsize of the histogram. By default, Scott's Choice of bin size for histograms is used: <span class= code-output >   binsize = (3.5 * StdDev(data)) / N_Elements(data)^(0.3333)</span>        If BINSIZE in not defined, and NBINS is defined, the BINSIZE is calcuated as: <span class= code-output >    binsize = (Max(dataToHistogram) - Min(dataToHistogram)) / (NBINS -1)</span>        While it is pointed out in the HISTOGRAM documentation, it is extremely        important that the BINSIZE be of the same data type as the data you are going to        calculate the histogram of. If it is not VERY strange things can happen. I've        tried to protect you from most of the bad things, but I don't have a high confidence        level that I have done it for every situation. If you see something that  just don't        look right , I would check first to see if your data types match. That might solve        all your problems.  CHARSIZE       The character size of the annotations. Default set by calling cgDefCharSize().  COLOR       Used as a shorthand way of setting the DataColorName keyword or, if the FillPolygon        keyword is set, the PolyColor keyword. Only used if those other two keywords are not        set.  DATACOLORNAME       The name of the data color for drawing the histogram outlines.  FILENAME       The name of a color name file to use with cgCOLOR.  FILLPOLYGON       Set this keyword to fill the histogram polygons with the POLYCOLOR.  FREQUENCY       If this keyword is set, the relative frequency is plotted on the Y axis,        rather than the histogram density.  HISTDATA       The output value of the internal HISTOGRAM command.  L64       If set, the return value of HISTOGRAM are 64-bit integers, rather than        the default 32-bit integers.  LAYOUT       This keyword specifies a grid with a graphics window and determines        where the graphic should appear. The syntax of LAYOUT is a 3-element        array: [ncolumns, nrows, location]. The grid is determined by the        number of columns (ncolumns) by the number of rows (nrows). The location        of the graphic is determined by the third number. The grid numbering        starts in the upper left (1) and goes sequentually by column and then by row.  LINE_FILL       If set, the polygons are filled with lines instead of solid color. If        this keyword is set, the following keywords can also be used: ORIENTATION,        PATTERN, POLYCOLOR, and SPACING.  LINE_THICK       Set this keyword to set the thickness of lines used in the fill pattern. Applies only        if the Line_Fill keyword is set.  LOCATIONS       Starting locations of each bin. (See the HISTOGRAM documentation for details.)  LOG       Set this keyword if you wish the histogram count to be represented on a logarithmic scale.  MAXINPUT       The maximum value to use in calculating input histogram. Equivalent to the MAX keyword        in the HISTOGRAM documentation.  MAX_VALUE       The maximum Y data value to represent on graphics plot. Default: Max(data) * 1.05.  MIN_VALUE       The minimum Y data value to represent on graphics plot. Default: 0.  MININPUT       The minimum value to use in calculating input histogram. Equivalent to the MIN keyword        in the HISTOGRAM documentation.  MISSING       The value that should be represented as  missing  and not used in the histogram.        Be aware that if the input data is not of type  float  or  double  that the input        data will be converted to floating point prior to calculating the histogram.  NAN       If set, ignore NAN values in calculating and plotting histogram.  NBINS       The number of output bins in the histogram. Meaning is slightly different from        meaning in the HISTOGRAM command. Used only to calculate BINSIZE when BINSIZE is        not specified. In this case, binsize = rangeofData/(nbins-1).  NOERASEOMAX       The maximum output value used to construct the histogram. (See HISTOGRAM documentation.)  OMIN       The minimum output value used to construct the histogram. (See HISTOGRAM documentation.)  OPLOT       Set this keyword if you want to overplot the histogram on already established axes.  OPROBABILITY       Set this keyword if you want to overplot the cumulative probability on the plot.  ORIENTATION       The orientation (rotations) of the lines used to fill the polygons if LINE_FILL is set.        (See POLYFILL documentation.)  OUTFILENAME       If the Output keyword is set, the user will be asked to supply an output        filename, unless this keyword is set to a non-null string. In that case, the        value of this keyword will be used as the filename and there will be no dialog        presented to the user.  OUTLINE       Set this keyword if you wish to draw only the outline of the histogram plot,        in a manner similar to setting PSYM=10 on a PLOT command.  OUTPUT       Set this keyword to the type of output desired. Possible values are these: <span class= code-output >    'PS'   - PostScript file</span> <span class= code-output >    'EPS'  - Encapsulated PostScript file</span> <span class= code-output >    'PDF'  - PDF file</span> <span class= code-output >    'BMP'  - BMP raster file</span> <span class= code-output >    'GIF'  - GIF raster file</span> <span class= code-output >    'JPEG' - JPEG raster file</span> <span class= code-output >    'PNG'  - PNG raster file</span> <span class= code-output >    'TIFF' - TIFF raster file</span>        Or, you can simply set this keyword to the name of the output file, and the type of        file desired will be determined by the file extension. If you use this option, the        user will not be prompted to supply the name of the output file.         All raster file output is created through PostScript intermediate files (the        PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed        to produce anything other than PostScript output. (See cgPS2PDF and PS_END for        details.) And also note that you should NOT use this keyword when doing multiple        plots. The keyword is to be used as a convenient way to get PostScript or raster        output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  PATTERN       The fill pattern for the polygons if the FILLPOLYGON keyword is set. (See POLYFILL documentation.)  POLYCOLOR       The name of the polygon fill color if the FILLPOLYGON keyword is set.  POSITION       The position of the plot axes in normalized data coordinates, [x0,y0,x1,y1].  PROBABILITY_FUNCTION       The total cummulative probability of the histogram plot, scaled from 0 to 1.  PROBCOLORNAME       The name of the probability color for overplotting the cumulative probability        on the plot.  PROBTHICK       The thickness of the probability line drawn on the plot.  REVERSE_INDICES       The list of reverse indices returned from the HISTOGRAM command. (See HISTOGRAM documentation.)  ROTATE       Set this keyword to cause the histogram bins to be drawn from left to right, rather        than from bottom to top.  SMOOTH       Set this keyword to an odd positive integer to smooth the histogram output before plotting.        The integer will set the width of a smoothing box to be applied to the histogram data with        the Smooth function.  SPACING       The spacing of fill line if the 'LINE_FILL keyword is set. (See POLYFILL documentation.)  THICK       Set this keyword to a value greater than 1 to draw thicker axes and lines.  TITLE        Set this keyword to the plot title.  WINDOW        Set this keyword to replace all the commands in the current cgWindow or to         create a new cgWindow, if one doesn't currenly exist, for displaying this command.         To create a new cgWindow if one currenly exists, use the cgWindow command.  XTICKNAMES        An array of tick names for the axis.  XTICKFORMAT        As tick format or name of tick formatting function for the axis.  XTICKS        The number of major tick spaces for the axis.  XTICKVALUES        A vector of tick values that should be labelled on the axis.  XTITLE        The X title of the histogram plot.  YTICKNAMES        An array of tick names for the axis.  YTICKFORMAT        As tick format or name of tick formatting function for the axis.  YTICKS        The number of major tick spaces for the axis.  YTICKVALUES        A vector of tick values that should be labelled on the axis.  YTITLE        The Y title of the histogram plot.  _REF_EXTRA         Any additional PLOT keywords are passed via keyword inheritance.   data       The data from which the histogram is created.   ", "Graphics", "    Change History: <span class= code-output >  Written by:  David W. Fanning, 14 November 2007.</span> <span class= code-output >  Modified to work with !P.MULTI. 20 Nov 2007. DWF.</span> <span class= code-output >  Slight problem with extra space at the right end of the plot resolved. 20 Nov 2007. DWF.</span> <span class= code-output >  Added FILE and NOLINES keywords. 24 Nov 2007. DWF.</span> <span class= code-output >  Added additional HISTOGRAM access via keywords. 24 Nov 2007. DWF.</span> <span class= code-output >  Fixed a small problem with FILLPOLY keyword. 26 Nov 2007. DWF.</span> <span class= code-output >  Fixed a small problem with the OVERPLOTTED histogram being slightly offset. 12 Jan 2009. DWF</span> <span class= code-output >  Major reconstructive surgery on the actual drawing part of the program. As far as I can</span> <span class= code-output >     tell, all functionality is the same, but without drawing problems evidenced before. 14 March 2009. DWF.</span> <span class= code-output >  A small problem with the way I was specifying ranges caused the bars to be slightly offset. 23 March 2009. DWF.</span> <span class= code-output >  I fixed a small problem with BINSIZE and HISTOGRAM data type matching (see the Note), and I also</span> <span class= code-output >     fixed a small problem with the range calculations when byte data is passed in. 1 April 2009. DWF.</span> <span class= code-output >  I removed a NOLINES keyword, which was no longer being used. 1 April 2009. DWF.</span> <span class= code-output >  MIN_VALUE and MAX_VALUE keywords now work again, thanks to Josiah Schwab. 22 April 2009. DWF.</span> <span class= code-output >  Changed default POLYFILL color to  ROSE . 22 April 2009. DWF.</span> <span class= code-output >  Having problems with binsize selection when data to histogram is an integer type. Fixed. 8 June 2009. DWF.</span> <span class= code-output >  When the input array has a considerable number of NANs, the Histogram command complains with an error</span> <span class= code-output >       Array has too many elements.  This happens even when the NAN keyword is set for the Histogram</span> <span class= code-output >      command. So, I now screen for NANs before I process the histogram. 8 June 2009. DWF.</span> <span class= code-output >  Added MISSING keyword to represent missing data. 18 July 2009. DWF.</span> <span class= code-output >  Adding the MISSING keyword exposed a problem I had in restoring the original input data</span> <span class= code-output >      to its original values when there were NANs and MISSING values. Fixed now by making</span> <span class= code-output >      a copy of the data to work on internally. Everything else is too complex. 20 July 2009. DWF.</span> <span class= code-output >  Yikes! Bad error in calculating start and end of histogram plot when overplotting fixed. 4 Sept 2009. DWF.</span> <span class= code-output >  Added needed XSTYLE=1 to AXIS command to match Plot axis labelling. 19 Oct 2009. DWF.</span> <span class= code-output >  Added a THICK keyword. 9 November 2009. DWF.</span> <span class= code-output >  Added an OUTLINE keyword so only the outline of the histogram is plotted. 3 December 2009. DWF.</span> <span class= code-output >  I was trying to be a good citizen by reloading the input color table when I exited</span> <span class= code-output >       the program. But, of course, that makes it impossible to use the program in</span> <span class= code-output >       the Z-buffer. Fixed by being less of a good citizen. 23 July 2010. DWF.</span> <span class= code-output >  Because of the way I was dealing with NANs and MISSING data, the reverse indices were</span> <span class= code-output >       inaccurate when they were returned, if there was NANs or MISSING data in the</span> <span class= code-output >       input array. The data is now being handled correctly in all cases. This requires</span> <span class= code-output >       that missing data must be set to !VALUES.F_NAN prior to calculating the histogram.</span> <span class= code-output >       This means the data MUST be converted to floats for this operation. Since I am</span> <span class= code-output >       always working on a *copy* of the data when this occurs, it should not affect</span> <span class= code-output >       user input data. Also, I scan all input floating point and double data for NANs,</span> <span class= code-output >       and if found, and the NAN keyword is not set, I issue a warning and set the NAN</span> <span class= code-output >       keyword. This is a change in behavior. 1 October 2010. DWF.</span> <span class= code-output >  Fixed a problem when specifying more than one POLYCOLOR. I made a change to the program</span> <span class= code-output >       and forgot to propogate it everywhere. 4 October 2010. DWF.</span> <span class= code-output >  Default axis color name changed from  Navy  to  Black . 28 October 2010. DWF.</span> <span class= code-output >  Fixed a problem with restoring color tables in PostScript. 24 Nov 2010. DWF.</span> <span class= code-output >  Added OPROBABILITY, PROBCOLOR, and PROBABILITY keywords. 24 Nov 2010. DWF.</span> <span class= code-output >  Changed the way I find a default axis color. 3 Dec 2010. DWF.</span> <span class= code-output >  Expanded search for  integers  from in BINSIZE calculation from DataType LE 3</span> <span class= code-output >        to include DataType GE 12, too. 8 Dec 2010. DWF.</span> <span class= code-output >  Added WINDOW keyword. 24 Jan 2011. DWF.</span> <span class= code-output >  Added ADDCMD keyword. 26 Jan 2011. DWF.</span> <span class= code-output >  Added LAYOUT keyword. 28 Jan 2011. DWF.</span> <span class= code-output >  Added CHARSIZE keyword. 2 Feb 2011. DWF.</span> <span class= code-output >  Added YTITLE keyword. 9 May 2011. DWF.</span> <span class= code-output >  Worked around a PLOT problem when setting the X axis range that caused the Y axis</span> <span class= code-output >     range to be corrupted. 19 May 2011. DWF.</span> <span class= code-output >  Added the ROTATE keyword. 18 Aug 2011. DWF.</span> <span class= code-output >  I was calculating and displaying the cumulative probability distribution function</span> <span class= code-output >      incorrectly. Now changed to what I think is the correct result. 8 Nov 2011. DWF.</span> <span class= code-output >  Added the ability to send the output directly to a file via the OUTPUT keyword. 9 Dec 2011, DWF.</span> <span class= code-output >  PostScript, PDF, and Imagemagick parameters can now be tailored with cgWindow_SetDefs. 14 Dec 2001. DWF.</span> <span class= code-output >  I had a problem with OVERPLOTs being slightly offset because I was calculating the xrange</span> <span class= code-output >      and yrange, rather than taking them from !X.CRange and !Y.CRange. 17 Dec 2011. DWF.</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >  Incomplete implementation of new color selection scheme, fixed. 30 Dec 2011. DWF.</span> <span class= code-output >  The change of 17 Dec 2011 was incorrect, as I misunderstood the problem. Restored original. 30 Dec 2011. DWF.</span> <span class= code-output >  Changes to allow better default colors, based on changes to cgColor and cgDefaultColor. 1 Feb 2012. DWF.</span> <span class= code-output >  Added a SMOOTH keyword. 26 April 2012. DWF.</span> <span class= code-output >  Small fix (CR missing!) to allow overplotting in cgWindow. 26 April 2012. DWF.</span> <span class= code-output >  The Outline keyword was incorrectly drawing the last histogram bin outline. Fixed. 26 April 2012. DWF.</span> <span class= code-output >  Added POSITION and PROBTHICK keywords to set the plot position and the thickness of the cumulative</span> <span class= code-output >     probability line, respectively. 25 May 2012. DWF.</span> <span class= code-output >  If the cumulative probability option (keyword OPROBABILITY) is set, a second axis is drawn indicating</span> <span class= code-output >     the cumulative probablity from 0 to 1. 25 May 2012. DWF.</span> <span class= code-output >   Whoops! Don't want to set default position unless Total(!P.MULTI) equals zero. 25 May 2012. DWF.</span> <span class= code-output >   More work on getting the cumulative probability to be correctly plotted. 30 May 2012. DWF.</span> <span class= code-output >   More whoops! Setting POSITION now interfering with LAYOUT keyword. More fixes to restore LAYOUT. 26 July 2012. DWF.</span> <span class= code-output >   Aaauuughhh! Typo introduced in yesterday's fix before I saved final version. 27 July 2012. DWF.</span> <span class= code-output >   Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >   Mis-spelled  probability  in one section of the code. Fixed. 31 July 2012. DWF.</span> <span class= code-output >   Added COLOR keyword. 19 Sept 2012. DWF.</span> <span class= code-output >   Now restoring previous plot parameters after drawing cumulative probability axis, so as not</span> <span class= code-output >      to interfere with subsequent overplotting. 27 Sept 2012. DWF.</span> <span class= code-output >   Changed the way the  ystart  variable is set on log plots. 21 Jan 2013. DWF.</span> <span class= code-output >   Now taking into account the MININPUT and MAXINPUT values when calculating a default bin size. 19 Feb 2013. DWF.</span> <span class= code-output >   Added [XY]TickNames, [XY]Tickformat, [XY]TickS, and [XY]TickValues keywords. 21 Feb 2013. DWF.</span> <span class= code-output >   Now choosing the default tick format of '(F)' when LOG is set. 28 April 2013. DWF.</span> <span class= code-output >   Added Line_Thick keyword to change thickness of fill line. 28 Aug 2013. DWF.</span>       Copyright (c) 2007-2013, Fanning Software Consulting, Inc.      Some of the ways cgHistogram can be used: <span class= code-output >  cgHistoplot, Dist(256), BINSIZE=5.0</span> <span class= code-output >  cgHistoplot, Fix(RandomU(seed, 200)*20), POLYCOLOR=['charcoal', 'steel blue'], /FILLPOLYGON</span> <span class= code-output >  cgHistoplot, Fix(RandomU(seed, 200)*20), POLYCOLOR=['navy', 'forest green'], /LINE_FILL, ORIENTATION=[45,-45]</span>     Additional examples can be found here: <span class= code-output >   http://www.idlcoyote.com/gallery/index.html</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgimage.html", "cgimage.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgimage.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com/</span>  ", "", " The purpose of this program is to create a TV command that works the way  the TV command would be expected to work if it was written today, rather  than 25 years ago. In other words, it knows the difference between an  8-bit device and a 24-bit device, it honors the POSITION keyword like  other graphics commands in IDL, it honors the !P.MULTI value, like other  graphics commands in IDL, it works seamlessly with both 8-bit and 24-bit  images. In addition to other modern features, this program can also  display images that contain an alpha channel and can display transparent  images.   There is a common block in cgImage that is defined as follows upon exiting  this command: <span class= code-output >  COMMON FSC_$CGIMAGE, $</span> <span class= code-output >     _cgimage_xsize, $    ; The X size of the image.</span> <span class= code-output >     _cgimage_ysize, $    ; The Y size of the imge.</span> <span class= code-output >     _cgimage_winxsize, $ ; The X size of the window displaying the image.</span> <span class= code-output >     _cgimage_winysize, $ ; The Y size of the window displaying the image.</span> <span class= code-output >     _cgimage_position, $ ; The final position of the image in the window.</span> <span class= code-output >     _cgimage_winID, $    ; The window index number of the window displaying the image.</span> <span class= code-output >     _cgimage_current     ; Set to 1 if a call to cgImage is made.</span>  The program requires the Coyote Library  to be installed on your machine.   To learn more about transparent images and cgImage see the article  Working with Transparent Images and cgImage.   ", "", "Graphics", "    Modification History: <span class= code-output > Written by: David W. Fanning, from modifications to TVIMAGE. 3 Feb 2011.</span> <span class= code-output > 8 Feb 2011. Added OPOSITION keyword. DWF.</span> <span class= code-output > 27 Feb 2011. Added keywords to make cgImage more compatible with TVImage calls. DWF.</span> <span class= code-output > Color table vectors must be obtained AFTER loading the color palette. 6 March 2011. DWF.</span> <span class= code-output > I have been convinced (conversations with Wayne Landsman) that if the</span> <span class= code-output >    CENTER keyword is set, the MINUS_ONE keyword is not needed, since</span> <span class= code-output >    it was created to solve the same problem. So, I have changed the</span> <span class= code-output >    default setting of MINUS_ONE to 0. 14 March 2011. DWF.</span> <span class= code-output >  Corrected a problem with restoring color tables if a PALETTE is used. 31 March 2011. DWF.</span> <span class= code-output >  Whoops! Documented a CHARSIZE keyword, but forgot to define it. 7 July 2011.</span> <span class= code-output >  Damnation! I did the same thing with the FONT keyword! 25 July 2011.</span> <span class= code-output >  And now a TITLE keyword! What the devil is going on!? 29 Aug 2011.</span> <span class= code-output >  Very slight modifications to image size and start position so that the image is</span> <span class= code-output >     positioned completely inside the axes. 30 Sept 2011. DWF.</span> <span class= code-output >  Fitting the image inside the axes causes image matching problems (and lines!) in</span> <span class= code-output >     other programs, so I've decided to only do positioning inside axes when the</span> <span class= code-output >     user asks for this capability by setting the new FIT_INSIDE keyword. 16 Nov 2011. DWF.</span> <span class= code-output >  Problem with transparent images with alpha channels caused by changes in the TVImage-&gt;cgImage</span> <span class= code-output >     transition. Added AlphaFGPosition keyword to address issues. Cleaned up the</span> <span class= code-output >     code and improved the internal documentation. 22 Nov 2011. DWF.</span> <span class= code-output >  Added the ability to stretch 2D image arrays in various ways before display. 1 Dec 2011.</span> <span class= code-output >  Added the ability to handle missing data in 2D arrays before display. 1 Dec 2011.</span> <span class= code-output >  Added a DISPLAY keyword to display the image in windows with the image aspect ratio. 2 Dec 2011.</span> <span class= code-output >  Added the ability to send the output directly to a file via the OUTPUT keyword. 9 Dec 2011, DWF.</span> <span class= code-output >  PostScript, PDF, and Imagemagick parameters can now be tailored with cgWindow_SetDefs. 14 Dec 2001. DWF.</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >  Changes to allow better default colors, based on changes to cgColor and cgDefaultColor. 1 Feb 2012. DWF.</span> <span class= code-output >  I was passing the wrong MINVALUE and MAXVALUE values to the scaling function. 12 Feb 2012. DWF.</span> <span class= code-output >  I made cgImage aware of a  feature  of MAP_SET that sets !P.MULTI[0]=-1, which was screwing</span> <span class= code-output >     up the algorithm to cause cgImage to erase the display window. 28 Feb 2012. DWF.</span> <span class= code-output >  Added a Standard Deviation stretch, including the EXCLUDE and MULTIPLIER keywords to the</span> <span class= code-output >     SDevScl command. 6 June 2012. DWF.</span> <span class= code-output >  Now saving the image POSITION in FSC_$CGIMAGE common block, even if in PostScript, because other</span> <span class= code-output >     routines (e.g., cgMap) may depend on it (e.g., using ONIMAGE keyword). 26 July 2012. DWF.</span> <span class= code-output >  Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >  Modified the way the XRANGE and YRANGE keywords work when the OVERPLOT keyword is also set. In this case,</span> <span class= code-output >     I will modify the image position to honor the XRANGE and YRANGE values with respect to the axes that the</span> <span class= code-output >     image is being overplot onto. 15 August 2012. DWF.</span> <span class= code-output >  Set the NOERASE keyword if the OVERPLOT keyword is set and NOERASE is undefined. 16 Aug 2012. DWF.</span> <span class= code-output >  Modified the way the HIST_EQUAL stretch works. Previously the image was displayed as all zeros</span> <span class= code-output >     if the input image had a minimum value less that zero. 21 Aug 2012. DWF.</span> <span class= code-output >  Fixed a problem with the INTERPOLATE variable that prevented interpolaton from occurring. 12 Sept 2012. DWF.</span> <span class= code-output >  A misspelled MULTIPLIER keyword was interfering with a Standard Deviation stretch. 16 Sept 2012. DWF</span> <span class= code-output >  Added the TRANSPARENT keyword to allow transparent display of images. 17 October 2012. DWF.</span> <span class= code-output >  Added the MAPCOORD keyword to allow the XRANGE and YRANGE of the image to be specified by the map</span> <span class= code-output >     coordinate object. 17 October 2012. DWF.</span> <span class= code-output >  Added CTINDEX, BREWER, and REVERSE keywords to make loading a color table palette easier. 17 October 2012. DWF.</span> <span class= code-output >  Now setting MISSING_VALUE pixels to completely transparent if a transparent image is created. 17 October 2012. DWF.</span> <span class= code-output >  Added the ability to apply a stretch to a 2D image prior to converting it to a transparent image. 18 October 2012.DWF.</span> <span class= code-output >  Added a FILENAME keyword so that files of known format (GeoTIFF, JPEG, PNG, etc.) can be read to supply an</span> <span class= code-output >     image for display. 18 October 2012. DWF.</span> <span class= code-output >  Fixed a problem that prevented transparent images from be displayed with !P.Multi. 20 Oct 2012. DWF.</span> <span class= code-output >  Provided a fix to allow transparent images in versions of IDL from IDL 6.4 and earlier. 18 Nov 2012. DWF.</span> <span class= code-output >  When reading a GeoTiff file, the map object created should be named mapCoord, not map, so that</span> <span class= code-output >     the image data ranges can be set automatically. 11 January 2013. DWF.</span> <span class= code-output >  Additional work to allow overplotting of transparent images. 12 Jan 2013. DWF.</span> <span class= code-output >  For some reason I thought I had to have transparency ON when overplotting. This turns out to be wrong</span> <span class= code-output >      and gets in the way of outputting to PostScript and working with some map projected images. I've</span> <span class= code-output >      removed this requirement in the code. I also fixed a problem in which the OUTPUT position changes</span> <span class= code-output >      if the TRANSPARENT keyword is used. 27 January 2013. DWF.</span> <span class= code-output >  I had some code dealing with XRANGE and YRANGE properties of the image when a map coodinate object</span> <span class= code-output >      was used with cgImage. This was inadvertently setting the XRANGE and YRANGE properties of the</span> <span class= code-output >      image, which was in turn causing the range values to be SAVED in the plotting system variables.</span> <span class= code-output >      This interferred with backward compatibility with the TV command, so I have removed it. 31 Jan 2013. DWF.</span> <span class= code-output >  Whoops! Typo in my last fix. Getting too old, I guess. 6 Feb 2013. DWF.</span> <span class= code-output >  Setting any of the MISSING_*** keywords while doing multiple plots resulted in the value</span> <span class= code-output >      of !P.Multi being ignored for the image. This is fixed for now, but just a warning. Setting</span> <span class= code-output >      these keywords creates transparent images, and makes things MUCH more complicated. So, I'm</span> <span class= code-output >      probably at the limit of what is possible now. :-) 30 April 2013. DWF.</span> <span class= code-output >  The LAYOUT keyword went on walkabout after the last changes. Restored to operation. 12 July 2013. DWF.</span>       Copyright (c) 2011-2013, Fanning Software Consulting, Inc.       To display an image with a contour plot on top of it, type: <span class= code-output >  filename = FILEPATH(SUBDIR=['examples','data'], 'worldelv.dat')</span> <span class= code-output >  image = BYTARR(360,360)</span> <span class= code-output >  OPENR, lun, filename, /GET_LUN</span> <span class= code-output >  READU, lun, image</span> <span class= code-output >  FREE_LUN, lun</span>  <span class= code-output >  thisPostion = [0.1, 0.1, 0.9, 0.9]</span> <span class= code-output >  cgIMAGE, image, POSITION=thisPosition, /KEEP_ASPECT_RATIO</span> <span class= code-output >  CONTOUR, image, POSITION=thisPosition, /NOERASE, XSTYLE=1, $</span> <span class= code-output >      YSTYLE=1, XRANGE=[0,360], YRANGE=[0,360], NLEVELS=10</span>      To display four images in a window without spacing between them: <span class= code-output >  !P.Multi=[0,2,2]</span> <span class= code-output >  cgImage, image, Margin=0</span> <span class= code-output >  cgImage, image, Margin=0</span> <span class= code-output >  cgImage, image, Margin=0</span> <span class= code-output >  cgImage, image, Margin=0</span> <span class= code-output >  !P.Multi = 0</span>      To display four image in a window with associated color bars: <span class= code-output >  !P.Multi=[0,2,2]</span> <span class= code-output >  p = [0.02, 0.3, 0.98, 0.98]</span> <span class= code-output >  LoadCT, 0</span> <span class= code-output >  cgImage, image, Position=p</span> <span class= code-output >  cgColorbar, Position=[p[0], p[1]-0.1, p[2], p[1]-0.05]</span> <span class= code-output >  p = [0.02, 0.3, 0.98, 0.98]</span> <span class= code-output >  LoadCT, 2</span> <span class= code-output >  cgImage, image, Position=p</span> <span class= code-output >  cgColorbar, Position=[p[0], p[1]-0.1, p[2], p[1]-0.05]</span> <span class= code-output >  p = [0.02, 0.3, 0.98, 0.98]</span> <span class= code-output >  LoadCT, 3</span> <span class= code-output >  cgImage, image, Position=p</span> <span class= code-output >  cgColorbar, Position=[p[0], p[1]-0.1, p[2], p[1]-0.05]</span> <span class= code-output >  p = [0.02, 0.3, 0.98, 0.98]</span> <span class= code-output >  LoadCT, 5</span> <span class= code-output >  cgImage, image, Position=p</span> <span class= code-output >  cgColorbar, Position=[p[0], p[1]-0.1, p[2], p[1]-0.05]</span> <span class= code-output >  !P.Multi =0</span>      To set a missing value to -32767 and the color white and do      a 3% histogram clip of the image: <span class= code-output >  cgLoadCT, 4, /Brewer, NColors=254</span> <span class= code-output >  TVLCT, palette, /Get</span> <span class= code-output >  cgImage, image, Missing_Value=-32767, Missing_Color='white', Stretch='Clip', Clip=3</span>      To display a transparent image on top of another image: <span class= code-output >  cgImage, cgDemoData(7), CTIndex=0</span> <span class= code-output >  cgImage, cgDemoData(5), CTIndex=33, Transparent=50, $</span> <span class= code-output >       AlphaFGPosition=[0.25, 0.25, 0.75, 0.75], Missing_Value=0</span>      ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgimage.html#cgImage_Make_Transparent_Image", "cgImage_Make_Transparent_Image", 'routine in <a href="coyote/cgimage.html">cgimage.pro</a>', "cgimage.pro", "", "cgImage_Make_Transparent_Image", " This function creates a transparent image out of a normal 2D or 3D image.   ", "MISSING_VALUE         The number that represents the missing value in the image. Available only with 2D images.          This value is set to be completely transparent in the image.  PALETTE         A 3x256 byte array containing the color table vectors that the image is to          be displayed in.  SUCCESS         An output keyword that is set to 1 if the transparent image is created          successfully. Otherwise, set to 0.  image        The input image. Must be either 2D or a true-color image.  transparent        The transparentcy of the image with respect to the background image. A number         from 0 to 100.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgimage.html#cgImage_Prepare_Alpha", "cgImage_Prepare_Alpha", 'routine in <a href="coyote/cgimage.html">cgimage.pro</a>', "cgimage.pro", "", "cgImage_Prepare_Alpha", " This routine prepares a transparent image (an image with an alpha channel)  for display.   ", "ALPHABGPOSITION       The normalized position or portion of the background image used to create the alpha image.  ALPHAFGPOSITION       The normalized position in the background image where the input image is to be located.  TV       If this keyword is set, the alpha channel is removed from the        input image, because we cannot display an image with an alpha        channel if the cgImage command is acting like a smarter IDL        TV command.  image       The input image that is being prepared for display. It will contain        an alpha channel.  alphaBackgroundImage       The background image. The input image will be blended        with the background image.   ", "          -1", "     Returns an image that has been blended with the background image and is      suitable for display with cgImage.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgimage.html#cgImage_Prepare_Output", "cgImage_Prepare_Output", 'routine in <a href="coyote/cgimage.html">cgimage.pro</a>', "cgimage.pro", "", "cgImage_Prepare_Output", " This routine scales or otherwise prepares an image to be displayed.   ", "BOTTOM         If the SCALE keyword is set, the image is scaled before display so that all          displayed pixels have values greater than or equal to BOTTOM and less than          or equal to TOP.  BETA         The beta factor in a Hyperpolic Sine stretch.  CLIP         A number between 0 and 50 that indicates the percentage of pixels to clip          off either end of the image histogram before performing a linear stretch.  EXCLUDE         The value to exclude in a standard deviation stretch.  EXPONENT         The logarithm exponent in a logarithmic stretch.  GAMMA         The gamma factor in a gamma stretch.  INTERPOLATE         Set this keyword to interpolate with bilinear interpolation the display image as it          is sized to its final position in the display window. Interpolation will potentially          create image values that do not exist in the original image. The default is to do no          interpolation, so that image values to not change upon resizing. Interpolation can          result in smoother looking final images.  MAXVALUE         If this value is defined, the data is linearly scaled between MINVALUE          and MAXVALUE. MAXVALUE is set to MAX(image) by default. Setting this          keyword to a value automatically sets SCALE to 1. If the maximum value of the          image is greater than 255, this keyword is defined and SCALE=1.  MEAN         The mean factor in a logarithmic stretch.  MINUS_ONE         The value of this keyword is passed along to the cgResizeImage          command. It prevents cgResizeImage from adding an extra row and          column to the resulting array, which can be a problem with          small image arrays.  MINVALUE         If this value is defined, the data is linearly scaled between MINVALUE          and MAXVALUE. MINVALUE is set to MIN(image) by default. Setting this          keyword to a value automatically sets SCALE=1. If the minimum value of the          image is less than 0, this keyword is defined and SCALE=1.  MISSING_INDEX         The index of the missing color in the final byte scaled image.  MISSING_VALUE         The number that represents the missing value in the image.  MULTIPLIER         The multiplication factor in a standard deviation stretch. The standard deviation          is multiplied by this factor to produce the thresholds for a linear stretch.  NEGATIVE         Set this keyword if you want to display the image with a negative or reverse stretch.  SCALE         Set this keyword to byte scale the image before display. If this keyword is not set,          the image is not scaled before display. This keyword will be set automatically by using          any of the keywords normally associated with byte scaling an image.  STRETCH         The type of scaling performed prior to display.          May be specified as a number or as a string (e.g, 4 or  Log ).             Number   Type of Stretch              0         None           No scaling whatsoever is done.              1         Linear         scaled = BytScl(image, MIN=minValue, MAX=maxValue)              2         Clip           A histogram stretch, with a percentage of pixels clipped at both the top and bottom              3         Gamma          scaled = GmaScl(image, MIN=minValue, MAX=maxValue, Gamma=gamma)              4         Log            scaled = LogScl(image, MIN=minValue, MAX=maxValue, Mean=mean, Exponent=exponent)              5         Asinh          scaled = AsinhScl(image, MIN=minValue, MAX=maxValue, Beta=beta)              6         SquareRoot     A linear stretch of the square root histogram of the image values.              7         Equalization   A linear stretch of the histogram equalized image histogram.              8         Gaussian       A Gaussian normal function is applied to the image histogram.              9         MODIS          Scaling done in the differential manner of the MODIS Rapid Response Team                                       and implemented in the Coyote Library routine ScaleModis.              10        StdDev         A standard deviation stretch. scaled = SDevScl(image, Multiplier=2.0).  SIGMA         The sigma scale factor in a Gaussian stretch.  TOP         If the SCALE keyword is set, the image is scaled before display so that all          displayed pixels have values greater than or equal to BOTTOM and less than          or equal to TOP.  image       The input image that is being prepared for display.  xsize       The output X size of the image.  ysize       The output Y size of the image.   ", "          -1", "     Returns an image that can be displaye properly.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgimage.html#cgImage", "cgImage", 'routine in <a href="coyote/cgimage.html">cgimage.pro</a>', "cgimage.pro", "", "cgImage", " The purpose of this program is to create a TV command that works the way  the TV command would be expected to work if it was written today, rather  than 25 years ago. In other words, it knows the difference between an  8-bit device and a 24-bit device, it honors the POSITION keyword like  other graphics commands in IDL, it honors the !P.MULTI value, like other  graphics commands in IDL, it works seamlessly with both 8-bit and 24-bit  images. In addition to other modern features, this program can also  display images that contain an alpha channel and can display transparent  images.   Also, two-dimensional image arrays can be manipulated, stretched,  and scaled directly with keywords to cgImage. These keywords do not  work with alpha channel images, or if the TV keyword is used with  cgImage.   ", "ADDCMD         Set this keyword to add this command to an already open cgWindow to          be executed when the window is resized. If the DISPLAY keyword is also          set, this keyword will act as if the WINDOW keyword were set.  ALPHABACKGROUNDIMAGE         Normally, when a image with an alpha channel is displayed, the image is          blended with whatever is currently in the display window. This means, the          program has to obtain that background image. This is not a problem on devices          (e.g., WIN, X, Z) that allow this kind of operation, but it is on devices          (e.g., the PostScript device, PS) that do not. To get around this problem,          you can pass the background image to the cgImage program. This background image          will be blended with the alpha channel image you wish to display. If an alpha          channel image is displayed on a device in which there is no way to obtain the          background image, and this keyword is not used to pass a background image, then          the alpha channel image will be blended with a white background image.          This keyword is only used if an alpha channel image is passed to the          program via the IMAGE parameter. The AlphaBackgroundImage does not need          to have the same dimensions as the alpha channel image. The background image          can be either a 2D image or a 24-bit image.  ALPHABGPOSITION         The normalized position or portion of the background image that is going to be used          to create the alpha channel image. Normally, and by default, the alphabgposition encompasses          the entire graphics window, [0.0, 0.0, 1.0, 1.0].  ALPHAFGPOSITION         The normalized position in the background image where the input image is to be located.          By default, the input image takes up the entire extent of the background image, [0.0, 0.0, 1.0, 1.0].  AXIS         A misspelled version of the AXES keyword. Provided as a service to people whose          fingers have minds of their own.  AXES         Set this keyword to display the image with axes surrounding the image. If the POSITION          keyword is not used, a MARGIN of 0.1 is used to allow the axes to show. If you wish          to make the image fit entirely inside the axes, set the FIT_INSIDE keyword. Otherwise,          the axis sit on top of the image data.  AXKEYWORDS         A structure of AXIS keywords and values that can be used to configure the axes          in whatever way the user desires. Many of the most often used axis keywords are available          as cgImage keywords. For example:   <span class= code-prompt >IDL&gt;</span> axis_format = {XTicks:4, XTickname:['Cow', 'Pig', 'Dog', 'Cat', 'Owl']}   <span class= code-prompt >IDL&gt;</span> cgImage, cgDemoData(7), AXKEYWORDS=axis_format, /Axes, XRange=[0,20]  BACKGROUND         The name of the background color for the image display. Unlike the TV command in IDL,          the cgImage command will erase the display before executing the command like other          fundamental graphics commands (e.g., Plot, Contour, Surface) in IDL.  BOTTOM         If the SCALE keyword is set, the image is scaled before display so that all          displayed pixels have values greater than or equal to BOTTOM and less than          or equal to TOP. Available only with 2D images.  BETA         The beta factor in a Hyperpolic Sine stretch. Available only with 2D images.  BREWER         This keyword is used only if the CTIndex keyword is used to select a color table number.          Setting this keyword allows Brewer color tables to be used.  CHARSIZE         Sets the character size. Used only if the AXES keyword is also set. By default,          the value from cgDefCharsize().  CLIP         A number between 0 and 50 that indicates the percentage of pixels to clip          off either end of the image histogram before performing a linear stretch.          Available only with 2D images.  COLOR         The name of the color in which to draw the axes. Used only if the AXES keyword is set.  CTINDEX         The index number of a color table. The Brewer and Reverse keywords will be checked          to see how to load the color table into the Palette keyword. This keyword will take          precidence over any colors that are loaded with the Palette keyword. The default is          to use whatever colors are loaded in the current hardware color table.  DISPLAY         If this keyword is set, a new display window is created (with cgDisplay) that has the          same aspect ratio as the image. The image is displayed in that window. If the WINDOW          keyword is also set, a new cgWindow is created with the WASPECT keyword set to the image          aspect ratio, and the image is displayed in that new cgwindow.  ERASE         An obsolete keyword. Used only for compatibility with the earlier TVImage command. The          default for cgImage is to always erase the graphics display before displaying the image          unless told otherwise by setting the NOERASE keyword. This makes cgImage consistent with          other IDL graphics commands.  EXCLUDE         The value to exclude in a standard deviation stretch.  EXPONENT         The logarithm exponent in a logarithmic stretch. Available only with 2D images.  FILENAME         The name of a file that IDL can read with READ_IMAGE (e.g, GEOTIFF, TIF, JPEG, PNG, etc.).          The file is read to obtain the image to be displayed.  FIT_INSIDE         When the AXES keyword is set, the default is to position the axes on top of the image          using the POSITION. However, if this keyword is set, the axes are positioned at POSITION          and the image is sized so that it fits entirely inside the axes.  FONT         This keyword selects the font used for axis and title display. The default is to use          the value of !P.Font.  GAMMA         The gamma factor in a gamma stretch. Available only with 2D images.  INTERPOLATE         Set this keyword to interpolate with bilinear interpolation the display image as it          is sized to its final position in the display window. Interpolation will potentially          create image values that do not exist in the original image. The default is to do no          interpolation, so that image values to not change upon resizing. Interpolation can          result in smoother looking final images.  KEEP_ASPECT_RATIO         By default, the output image is resized into the POSITION in the graphics window.          This can result in a distortion of the image aspect ratio (the Y size of the image          divided by the X size of the image). Setting this keyword will preserve the original          aspect ratio of the image in the output display window. In effect, the image will          be placed in the window POSITION in a way that preserves its aspect ratio. The          actual final location of the image in the display window can be obtained via the          OPOSITION keyword.  LAYOUT         This keyword specifies a grid with a graphics window and determines          where the graphic should appear. The syntax of LAYOUT is a 3-element          array: [ncolumns, nrows, location]. The grid is determined by the          number of columns (ncolumns) by the number of rows (nrows). The location          of the graphic is determined by the third number. The grid numbering          starts in the upper left (1) and goes sequentually by column and then          by row. Note that using the LAYOUT keyword automatically sets the NOERASE          keyword to 1.  MAPCOORD         An object reference to a map coordinate object (e.g., cgMap). If present, the          XRANGE and YRANGE keyword values will be obtained from this map object, if they          are not defined otherwise.  MARGIN         A single value, expressed as a normalized coordinate, that          can easily be used to calculate a position in the window.          The margin is used to calculate a POSITION that gives          the image an equal margin around the edge of the window.          The margin must be a number in the range 0.0 to 0.333. This          keyword is ignored if the POSITION or OVERPLOT keywords are          used. It is also ignored when cgImage is executed in a          multi-plot window, EXCEPT if it's value is zero. In this          special case, the image will be drawn into its position in          the multi-plot window with no margins whatsoever. (The          default is to have a slight margin about the image to separate          it from other images or graphics. The default margin is 0.05.)  MAXVALUE         If this value is defined, the data is linearly scaled between MINVALUE          and MAXVALUE. MAXVALUE is set to MAX(image) by default. Setting this          keyword to a value automatically sets SCALE to 1. If the maximum value of the          image is greater than 255, this keyword is defined and SCALE=1.  MEAN         The mean factor in a logarithmic stretch. Available only with 2D images.  MISSING_COLOR         The color name of the missing value. Available only with 2D images.  MISSING_INDEX         The index of the missing color in the final byte scaled image. Available only with 2D images.  MISSING_VALUE         The number that represents the missing value in the image. Available only with 2D images.  NEGATIVE         Set this keyword if you want to display the image with a negative or reverse stretch.          Available only with 2D images.  MINUS_ONE         The value of this keyword is passed along to the cgResizeImage          command. It prevents cgResizeImage from adding an extra row and          column to the resulting array, which can be a problem with          small image arrays.  MINVALUE         If this value is defined, the data is linearly scaled between MINVALUE          and MAXVALUE. MINVALUE is set to MIN(image) by default. Setting this          keyword to a value automatically sets SCALE=1. If the minimum value of the          image is less than 0, this keyword is defined and SCALE=1.  MULTIMARGIN         Sometimes, when displaying multiple images with !P.Multi, you          want the images to be slightly smaller than the position created          by !P.Multi so you can add, for example, a colorbar or an annotation          to the image. This keyword can be used to adjust the image position          by a small margin. A four-element array, the margins apply to the          [bottom, left, top, right] of the image position. So, to          leave room at the top of an image for a color bar, you might          type this: <span class= code-output >   cgImage, image, MultiMargin=[0, 0, 4, 0]</span>          This keyword applies *only* to images displayed with !P.Multi, and if          passed a scalar value, will use the same value for all four positions.  MULTIPLIER         The multiplication factor in a standard deviation stretch. The standard deviation          is multiplied by this factor to produce the thresholds for a linear stretch.  NCOLORS         If this keyword is supplied, the TOP keyword is ignored and the TOP keyword          is set equal to  NCOLORS-1. This keyword is provided to make cgImgScl easier          to use with the color-loading programs such as cgLOADCT: <span class= code-output >    cgLoadCT, 5, NColors=100, Bottom=100</span> <span class= code-output >    scaled = cgImgScl(image, NColors=100, Bottom=100)</span>          Setting this keyword to a value automatically sets SCALE=1 and STRETCH='LINEAR', if not          defined otherwise. Available only with 2D images.  NOERASE         Set this keyword to prevent the command from first erasing the graphics          display before displaying the image.  NOINTERPOLATION         This is an obsolete keyword that is included here only for compatibility with          the older TVImage command. Use the INTERPOLATE keyword.  NORMAL         Setting this keyword means image position coordinates x and y are interpreted          as being in normalized coordinates. This keyword is only valid if the TV          keyword is set.  OUTFILENAME         If the Output keyword is set, the user will be asked to supply an output          filename, unless this keyword is set to a non-null string. In that case, the          value of this keyword will be used as the filename and there will be no dialog          presented to the user.  OUTPUT         Set this keyword to the type of output desired. Possible values are these: <span class= code-output >  'PS'   - PostScript file</span> <span class= code-output >  'EPS'  - Encapsulated PostScript file</span> <span class= code-output >  'PDF'  - PDF file</span> <span class= code-output >  'BMP'  - BMP raster file</span> <span class= code-output >  'GIF'  - GIF raster file</span> <span class= code-output >  'JPEG' - JPEG raster file</span> <span class= code-output >  'PNG'  - PNG raster file</span> <span class= code-output >  'TIFF' - TIFF raster file</span>          Or, you can simply set this keyword to the name of the output file, and the type of          file desired will be determined by the file extension. If you use this option, the          user will not be prompted to supply the name of the output file.           All raster file output is created through PostScript intermediate files (the          PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed          to produce anything other than PostScript output. (See cgPS2PDF and PS_END for          details.) And also note that you should NOT use this keyword when doing multiple          plots. The keyword is to be used as a convenient way to get PostScript or raster          output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  OPOSITION         Set this keyword to a named variable to obtain the actual position in the          graphics window where the image was located. The output position may be          different from the input POSITION, especially if the KEEP_ASPECT_RATIO          keyword is set. Note that the output position is also stored in a          FSC_$CGIMAGE common block so that other programs (e.g., cgMap, cgImageInfo,          etc.) can take advantage of this information.  OVERPLOT         Setting this keyword causes the POSITION keyword to be ignored          and the image is positioned in the location established by the          last graphics command. If the XRange and YRange keywords are also          used, the image position is adjusted with respect to the current axes          range.  Setting this keyword also sets the NoErase keyword, if it is not currently set.          It is assumed that the overplotted images fits entirely inside or is coincident with the          position or range of the previous image. If not, an informational error is generated and          the position is forced into the range of 0 to 1.  PALETTE         Set this keyword to a 3x256 or 256x3 byte array containing the RGB color          vectors to be loaded before the image is displayed. Such vectors can be          obtained, for example, from cgLoadCT with the RGB_TABLE keyword: <span class= code-output >      cgLoadCT, 4, /BREWER, /REVERSE, RGB_TABLE=palette</span> <span class= code-output >      cgImage, cgDemoData(7), PALETTE=palette</span>  POSITION         The location of the image in the output window. This is a four-element          floating array of normalized coordinates of the type given by !P.POSITION          or the POSITION keyword to other IDL graphics commands. The form is [x0, y0, x1, y1].          The default is [0.0, 0.0, 1.0, 1.0]. Note that this keyword is ALSO an output          keyword. That is to say, upon return from cgImage this keyword (if passed by          reference) contains the actual position in the window where the image was          displayed. This may be different from the input values if the KEEP_ASPECT_RATIO          keyword is set, or if you are using cgImage with the POSITION keyword when !P.MULTI          is set to something other than a single plot. Note that the POSITION keyword should          not, normally, be used when displaying multiple images with !P.MULTI. If it is used,          its meaning differs slightly from its normal meaning. !P.MULTI is responsible for          calculating the position of graphics in the display window. Normally, it would be a          mistake to use a POSITION graphics keyword on a graphics command that was being drawn with          !P.MULTI. But in this special case, cgImage will use the POSITION coordinates to calculate          an image position in the actual position calculated for the image by !P.MULTI. The main          purpose of this functionality is to allow the user to display images along with          color bars when using !P.MULTI.  QUIET         There are situations when you would prefer that cgIMAGE does not advertise itself by          filling out the FSC_$CGIMAGE common block. For example, if you are using cgImage to          draw a color bar, it would not be necessary. Setting this keyword means that cgImage          just goes quietly about it's business without bothering anyone else.  REVERSE         Set this keyword to reverse the color table vectors selected with the CTIndex keyword.  SAVE         Set this to cause a data coordinate system to be established for the image. The XRANGE          and YRANGE keyword values will be used to establish a data coordinate system coincident          with the final image position. Setting the AXES keyword automatically sets SAVE=1.  SCALE         Set this keyword to byte scale the image before display. If this keyword is not set,          the image is not scaled before display. This keyword will be set automatically by using          any of the keywords normally associated with byte scaling an image. Available only with          2D images. If set, STRETCH is set to 1, unless it is set to another value.  SIGMA         The sigma scale factor in a Gaussian stretch. Available only with 2D images.  STRETCH         The type of scaling performed prior to display. May be specified as a number          or as a string (e.g, 3 or  Log ). Available only with 2D images. If  Min(image)          is less than zero or Max(image) is greater than 255, then the default value for          stretch is 1.           Number   Type of Stretch: <span class= code-output >   0         None           No scaling whatsoever is done.</span> <span class= code-output >   1         Linear         scaled = BytScl(image, MIN=minValue, MAX=maxValue)</span> <span class= code-output >   2         Clip           A histogram stretch, with a percentage of pixels clipped at both the top and bottom</span> <span class= code-output >   3         Gamma          scaled = GmaScl(image, MIN=minValue, MAX=maxValue, Gamma=gamma)</span> <span class= code-output >   4         Log            scaled = LogScl(image, MIN=minValue, MAX=maxValue, Mean=mean, Exponent=exponent)</span> <span class= code-output >   5         Asinh          scaled = AsinhScl(image, MIN=minValue, MAX=maxValue, Beta=beta)</span> <span class= code-output >   6         SquareRoot     A linear stretch of the square root histogram of the image values.</span> <span class= code-output >   7         Equalization   A linear stretch of the histogram equalized image histogram.</span> <span class= code-output >   8         Gaussian       A Gaussian normal function is applied to the image histogram.</span> <span class= code-output >   9         MODIS          Scaling done in the differential manner of the MODIS Rapid Response Team</span> <span class= code-output >                            and implemented in the Coyote Library routine ScaleModis.</span> <span class= code-output >   10        StdDev         Standard deviation stretch. scaled = SDevScl(image, MULTIPLIER=2).</span>  TITLE         Set this keyword to the title of the image plot. No title will appear with the          image unless the AXES keyword is also set.  TOP         If the SCALE keyword is set, the image is scaled before display so that all          displayed pixels have values greater than or equal to BOTTOM and less than          or equal to TOP. Available only with 2D images.  TRANSPARENT         A number between 0 and 100 that specifies the percent of transparency between the          image being displayed and the background image. Displaying a transparent image does          not advance !P.Multi.  TV         Setting this keyword makes the cgImage command work much like the brain-dead          TV command except that it will get colors right on all output devices. Most of          the cgImage keywords are ignored if this keyword is set.  WINDOW         Set this keyword to replace all the commands in a current cgWindow or to          create a new cgWindow for displaying this command. If the DISPLAY keyword is          also set, a new cgWindow will be created.  XRANGE         A two element array giving the X range of the image. By default set to          [0, size of image in X].  XTITLE         The X title of the image plot. Used only if AXES is set.  YRANGE         A two element array giving the Y range of the image. By default set to          [0, size of image in Y].  YTITLE         The Y title of the image plot. Used only if AXES is set.  _REF_EXTRA         Any keywords defined for the TV command can be used. This applies only          if the TV keyword is set.  image        An 8-bit (MxN), 24-bit (e.g., MxNx3), or a 24-bit + alpha channel         (e.g., MxNx4) image  to display.  x        The X position of the lower-left corner of the image in device         coordinates. This parameter is only recognized if the TV keyword         is set. If the Y position is not used, X is taken to be the image          position  in the window. See the TV command documenation for details.  y        The Y position of the lower-left corner of the image in device         coordinates. This parameter is only recognized if the TV keyword         is set.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgimage2kml.html", "cgimage2kml.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgimage2kml.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgimage2kml.html#cgImage2KML", "cgImage2KML", 'routine in <a href="coyote/cgimage2kml.html">cgimage2kml.pro</a>', "cgimage2kml.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgImage2KML", " This program creates a KML file that can be opened in Google Earth to display the  image drapped over the Google Earth terrain. A corresponding image file is also  produced. The KML and image file must be in the same directory to use them with  Google Earth.      ", "ADDTOFILE       If this keyword contains a cgKML_File object, the image is added to the file        as a &lt;GroundOverlay) element and a separate KML file is not created. In other        words, the Filename keyword is ignored and the image file created takes its        name from the cgKML_File object.   BREWER       This keyword is used only if the CTIndex keyword is used to select a color table number.        Setting this keyword allows Brewer color tables to be used.   CTINDEX       The index number of a color table. The Brewer and Reverse keywords will be checked        to see how to load the color table into the Palette keyword. This keyword will take        precidence over any colors that are loaded with the Palette keyword. This keyword        applies only to 2D images.   DESCRIPTION       A string that is used to describe the image in the Google Earth interface.   DRAWORDER        The drawing order of image overlay. The first order is 0. Images with a higher         order are drawn on top of images with a lower order.   GEOTIFF       The name of a GeoTiff file from which the image, mapcoord, palette (possibly),        and latlonbox values can be obtained.   FILENAME        The name of the KML file that will be created. The image file will have the same name,         but with a *.png file extension. The KML file and the image file will be created in the         same directory.   FLYTO        A three-element array that gives the coordinates [longitude, latitude, elevation] where         the  eye  should be located with respect to the Earth. This implements a LookAt element         in KML file, so that when the KML file is open, it  flies to  the location represented         here. Longitude must be in the range -180 to 180. Latitude must be in the range -90 to 90.         And elevation is a number in kilometers. If a two-element array [longitude, latitude] is         passed in, the default value for elevation is 11000 km above the surface of the Earth.   KMZ        Set this keyword to move the KML file and support files to a KMZ compressed file.         Note that this capability is ONLY available in versions of IDL starting with version 8.0.   LATLONBOX        A four-element array giving the boundaries of the map projection in the         Google Map form of [north, south, east, west]. Normally, this information         is obtained from the mapCoord object and need not be passed in. The values         are in latitude and longitude coordinates that go from -90 to 90 and -180 to         180 degrees, respectively.   MAX_VALUE        The value to use for the MAX value when the image is scaled with BYTSCL.   MIN_VALUE        The value to use for the MIN value when the image is scaled with BYTSCL.   MISSING_VALUE        The  color  of a pixel that will be treated as a  missing  color or value.         Any pixels in the image with this color value will be set completely         transparent. If Color is a string, use cgColor to obtain a color triple.         If Color is a non-strint scalar, this value is taken to be the missing color index         in a 2D image. Otherwise, this is assumed to be a color triple that indicates         the  missing  color or value in the output image. The alpha channel in the output image         is set to 0 for the  missing  color, which makes this value completely transparent.         If the Transparent keyword is not used, it is set to 0 by using the Missing_Value         keyword.   PALETTE        Set this keyword to a 3x256 or 256x3 byte array containing the RGB color         vectors to be loaded before the transparent image is created. Such vectors can be         obtained, for example, from cgLoadCT with the RGB_TABLE keyword:        <span class= code-prompt >IDL&gt;</span> cgLoadCT, 4, /BREWER, /REVERSE, RGB_TABLE=palette        <span class= code-prompt >IDL&gt;</span> tImage = cgTransparentImage( cgDemoData(7), PALETTE=palette)         The default is to use whatever colors are loaded in the current hardware color table.         A palette applies only to 2D input images.   PLACENAME        This is the &lt;name&gt; element in a Feature object. It is user-defined text that is used as         the label for an object in Google Earth.   RESIZE_FACTOR        Setting this keyword to a value allows the user to resize the image prior to making the         PNG image file that will be output with the KML file. This is especially helpful with         very large images. Setting the factor to 0.5 will reduce the image to half it's normal         size before processing. Setting the factor to 2.0 will increase the size by a factor         of 2 before processing. The image is resized with nearest neighbor sampling.   REVERSE        Set this keyword to reverse the color table vectors selected with the CTIndex keyword.   TRANSPARENT        The percentage of transparency desired in the output image. A number         between 0 and 100.   image       A 2D image or a 24-bit image with or without an alpha channel. If an alpha        channel is present, it will be modified by the program if the Transparent        keyword is used. An image is required unless the GeoTiff keyword is used        to obtain an image.   mapCoord       A map coordinate object (cgMap) from which map projection information and map        boundaries for the image overlay can be obtained. This parameter is required        unless the GeoTiff keyword is used to obtain a map coordinate object.   ", "Graphics FileIO Maps", "     Change History: <span class= code-output >  Written, 30 October 2012 by David W. Fanning.</span> <span class= code-output >  Added DRAWORDER keyword and fixed a typo concerning MISSING_VALUE. 31 Oct 2012. DWF.</span> <span class= code-output >  Fixed a problem that was causing floating underflow warnings to be thrown. 5 Nov 2012. DWF.</span> <span class= code-output >  Images with values between 0 and 255 were not getting scaled properly. Fixed. 30 Nov 2012. DWF.</span> <span class= code-output >  Added a FlyTo keyword to allow the user to fly to a particular location on the Earth. 31 Dec 2012. DWF.</span> <span class= code-output >  Was not handling 24- or 32-bit images correctly, nor was the MISSING_COLOR keyword being</span> <span class= code-output >      interpreted correctly when expressed as a color string. 20 Feb 2013. DWF.</span> <span class= code-output >  Have been writing the absolute path to the image file into the KML file, when I should</span> <span class= code-output >      have been using a relative path. 22 Feb 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Here is how you can put an AVHRR NDVI image of Africa on a Google Earth display: <span class= code-output >  ;; Download the image file from the Coyote web page.</span> <span class= code-output >  netObject = Obj_New('IDLnetURL')</span> <span class= code-output >  url = 'http://www.idlcoyote.com/data/AF03sep15b.n16-VIg.tif'</span> <span class= code-output >  returnName = netObject -&gt; Get(URL=url, FILENAME='AF03sep15b.n16-VIg.tif')</span> <span class= code-output >  Obj_Destroy, netObject</span>  <span class= code-output >  ;; Create the image overlay KML file.</span> <span class= code-output >  cgImage2KML, GeoTiff='AF03sep15b.n16-VIg.tif', Min_Value=0, CTIndex=11, $</span> <span class= code-output >     /Brewer, /Reverse, Transparent=50, Filename='avhrr_ndvi.kml', $</span> <span class= code-output >     Description='AVHRR NDVI Data from Africa'</span>  <span class= code-output >  ;; Start Google Earth and open the KML file you just created.</span>     The output should look like the figure above.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgimagegroup__define.html", "cgimagegroup__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgimagegroup__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgimagegroup__define.html#cgImageGroup::Init", "cgImageGroup::Init", 'routine in <a href="coyote/cgimagegroup__define.html">cgimagegroup__define.pro</a>', "cgimagegroup__define.pro", "", "cgImageGroup::Init", " The initialization module for the cgImageGroup object creates a specific  instance of the object.   ", "FILENAME        The name of an IDL image file that IDL can read with READ_IMAGE.  REVERSE        Set this keyword to reverse the image in the Y direction before display.  image       A 2D or true-color image variable to display and interact with. Optionally,        this variable may also be the name of an image file that IDL can open with        READ_IMAGE.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgimagegroup__define.html#cgImageGroup__Define", "cgImageGroup__Define", 'routine in <a href="coyote/cgimagegroup__define.html">cgimagegroup__define.pro</a>', "cgimagegroup__define.pro", "", "cgImageGroup__Define", " The class definition module for the cgImageGroup object.  ", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgimageinfo.html", "cgimageinfo.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgimageinfo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgimageinfo.html#cgImageInfo", "cgImageInfo", 'routine in <a href="coyote/cgimageinfo.html">cgimageinfo.pro</a>', "cgimageinfo.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgImageInfo", "  The purpose of this program is allow interactive inquiry of image   position and values for images displayed with cgImage.   After a call to cgImage, cgImageInfo can be called and the user   can use the cursor to click in the image display window. If the user clicks   inside the image, the image location and value will be printed out in the   user's IDL console window. The cgImageInfo program blocks the IDL command   line until the RIGHT mouse button is clicked in the image display window.    This cgImageInfo program is designed to work for the last image displayed with cgImage   on a Windows or X device. Precautions are taken to help you avoid shooting   yourself in the foot, but I can't anticipate every action a user might take at the   IDL command line. Pay particular attention to exiting the program with the RIGHT mouse   button before you close or kill the current graphics window. Failure to do so will   put you into a very strange and precarious state from which no rescue is possible.   You might want to consider using the Catalyst Program IMGWIN    as an alternative to cgImageInfo.   ", "image         A 2D or 3D image array. Values will be returned from this image.          In versions of IDL &lt; 8.0, it is possible to use a HASH object of          keys/images where this program will describe the value for each of          the images in the HASH object.  position         A four-element floating array giving the position of the image in          the display window. If not provided, the image position will be          retrieved from the last image position used with cgImage.   ", "Graphics", "     Change History: <span class= code-output >Written by: David W Fanning, 16 March 2008.</span> <span class= code-output >Added ability to specify position directly in call. 20 March 2008. DWF</span> <span class= code-output >Changed cursor operation to conform with expected differences</span> <span class= code-output >   between Windows and UNIX. 20 March 2008, DWF.</span> <span class= code-output >Slightly modified screen directions. 16 November 2010. DWF.</span> <span class= code-output >Modified so that multiple images/grids can be described 18 May 2011. MHS</span>       Copyright (c) 2008-2011, Fanning Software Consulting, Inc.       To display an image with axes and then inquire about it: <span class= code-output >   filename = FILEPATH(SUBDIR=['examples','data'], 'worldelv.dat')</span> <span class= code-output >   image = BYTARR(360,360)</span> <span class= code-output >   OPENR, lun, filename, /GET_LUN</span> <span class= code-output >   READU, lun, image</span> <span class= code-output >   FREE_LUN, lun</span>  <span class= code-output >   thisPosition = [0.1, 0.1, 0.9, 0.9]</span> <span class= code-output >   cgImage, image, /KEEP_ASPECT,  POSITION=thisPosition, /AXES</span> <span class= code-output >   cgImageInfo, image</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgimageinfodescribevalues.html", "cgimageinfodescribevalues.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgimageinfodescribevalues.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgimageinfodescribevalues.html#cgDescribeThisImgValues", "cgDescribeThisImgValues", 'routine in <a href="coyote/cgimageinfodescribevalues.html">cgimageinfodescribevalues.pro</a>', "cgimageinfodescribevalues.pro", "", "cgDescribeThisImgValues", "", "imageidxpixelypixel", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgimageinfodescribevalues.html#cgImageInfoDescribeValues", "cgImageInfoDescribeValues", 'routine in <a href="coyote/cgimageinfodescribevalues.html">cgimageinfodescribevalues.pro</a>', "cgimageinfodescribevalues.pro", "", "cgImageInfoDescribeValues", "  Provide information about the selected xy-pixel from an image, or a hash of   images.   ", "iimage       A 2D or 3D image array  xpixel       The X location on the image to fetch information from  ypixel       The y location on the image to fetch information from  hsh       If a valid HASH, it should contain key/Image (string/array) pairs that        will be described.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgimgscl.html", "cgimgscl.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgimgscl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgimgscl.html#cgImgScl", "cgImgScl", 'routine in <a href="coyote/cgimgscl.html">cgimgscl.pro</a>', "cgimgscl.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgImgScl", " This function scales an image using the same keywords and scaling available in  cgImage and cgStretch. Set the Stretch keyword for the types of image scaling  or stretching available.   ", "BOTTOM         If the SCALE keyword is set, the image is scaled before display so that all          displayed pixels have values greater than or equal to BOTTOM and less than          or equal to TOP.  BETA         The beta factor in a Hyperpolic Sine stretch.  CLIP         A number between 0 and 50 that indicates the percentage of pixels to clip          off either end of the image histogram before performing a linear stretch.  EXCLUDE         The value to exclude in a standard deviation stretch.  EXPONENT         The logarithm exponent in a logarithmic stretch.  GAMMA         The gamma factor in a gamma stretch.  INTERPOLATE         Set this keyword to interpolate with bilinear interpolation the display image as it          is sized to its final position in the display window. Interpolation will potentially          create image values that do not exist in the original image. The default is to do no          interpolation, so that image values to not change upon resizing. Interpolation can          result in smoother looking final images.  MAXVALUE         If this value is defined, the data is linearly scaled between MINVALUE          and MAXVALUE. MAXVALUE is set to MAX(image) by default. Setting this          keyword to a value automatically sets SCALE to 1. If the maximum value of the          image is greater than 255, this keyword is defined and SCALE=1.  MEAN         The mean factor in a logarithmic stretch.  MINUS_ONE         The value of this keyword is passed along to the cgResizeImage          command. It prevents cgResizeImage from adding an extra row and          column to the resulting array, which can be a problem with          small image arrays.  MINVALUE         If this value is defined, the data is linearly scaled between MINVALUE          and MAXVALUE. MINVALUE is set to MIN(image) by default. Setting this          keyword to a value automatically sets SCALE=1. If the minimum value of the          image is less than 0, this keyword is defined and SCALE=1.  MISSING_INDEX         The index of the missing color in the final byte scaled image.  MISSING_VALUE         The number that represents the missing value in the image.  MULTIPLIER         The multiplication factor in a standard deviation stretch. The standard deviation          is multiplied by this factor to produce the thresholds for a linear stretch.  NCOLORS         If this keyword is supplied, the TOP keyword is ignored and the TOP keyword          is set equal to  NCOLORS-1. This keyword is provided to make cgImgScl easier          to use with the color-loading programs such as cgLOADCT: <span class= code-output >    cgLoadCT, 5, NColors=100, Bottom=100</span> <span class= code-output >    scaled = cgImgScl(image, NColors=100, Bottom=100)</span>          Setting this keyword to a value automatically sets SCALE=1 and STRETCH='LINEAR', if not          defined otherwise. Available only with 2D images.  NEGATIVE         Set this keyword if you want to display the image with a negative or reverse stretch.  SCALE         Set this keyword to byte scale the image before display. If this keyword is not set,          the image is not scaled before display. This keyword will be set automatically by using          any of the keywords normally associated with byte scaling an image.  STRETCH         The type of scaling performed prior to display. May be specified as a number          or as a string (e.g, 3 or  Log ). Available only with 2D images. If  Min(image)          is less than zero or Max(image) is greater than 255, then the default value for          stretch is 1.           Number   Type of Stretch: <span class= code-output >   0         None           No scaling whatsoever is done.</span> <span class= code-output >   1         Linear         scaled = BytScl(image, MIN=minValue, MAX=maxValue)</span> <span class= code-output >   2         Linear 2%      A histogram stretch, with a percentage of pixels clipped at both the top and bottom</span> <span class= code-output >   3         Gamma          scaled = GmaScl(image, MIN=minValue, MAX=maxValue, Gamma=gamma)</span> <span class= code-output >   4         Log            scaled = LogScl(image, MIN=minValue, MAX=maxValue, Mean=mean, Exponent=exponent)</span> <span class= code-output >   5         Asinh          scaled = AsinhScl(image, MIN=minValue, MAX=maxValue, Beta=beta)</span> <span class= code-output >   6         SquareRoot     A linear stretch of the square root histogram of the image values.</span> <span class= code-output >   7         Equalization   A linear stretch of the histogram equalized image histogram.</span> <span class= code-output >   8         Gaussian       A Gaussian normal function is applied to the image histogram.</span> <span class= code-output >   9         MODIS          Scaling done in the differential manner of the MODIS Rapid Response Team</span> <span class= code-output >                            and implemented in the Coyote Library routine ScaleModis.</span> <span class= code-output >   10        StdDev         Standard deviation stretch. scaled = SDevScl(image, MULTIPLIER=2).</span>  SIGMA         The sigma scale factor in a Gaussian stretch.  TOP         If the SCALE keyword is set, the image is scaled before display so that all          displayed pixels have values greater than or equal to BOTTOM and less than          or equal to TOP.   image       The input image that is to be scaled. Only 2D images can be scaled, although        true-color images can be resized.  xsize       The output X size of the image.  ysize       The output Y size of the image.   ", "Graphics Utilities", "     Change History: <span class= code-output > Written by David W. Fanning, 21 September 2012.</span> <span class= code-output > Only define MISSING_INDEX value if needed. Change to support TRANSPARENT keyword</span> <span class= code-output >    in cgImage. 18 October 2012. DWF.</span> <span class= code-output > Only 2D images can be scaled. 18 October 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Used to for image display:   <span class= code-prompt >IDL&gt;</span> scaledImage = cgImgScl(image, Stretch=4, Exponent=2)   <span class= code-prompt >IDL&gt;</span> cgImage, scaledImage[0:100, 200:400], /Keep_Aspect       Returns a scaled image.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgjulian2date.html", "cgjulian2date.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgjulian2date.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgjulian2date.html#cgJulian2Date", "cgJulian2Date", 'routine in <a href="coyote/cgjulian2date.html">cgjulian2date.pro</a>', "cgjulian2date.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgJulian2Date", " The purpose of this function is to convert a Julian number into a date string. The format  of the string is selected with the Format keyword.   ", "FORMAT         An integer value that selects the date format.          Possible values are:               0: 09 Jan 1951               1: 09 Jan 1951 08:21:10               2: 09 Jan 1951 08h 21m 10s               3: Jan 9, 1951               4: Jan 9, 1951 08:21:10               5: Jan 9, 1951 08h 21m 10s               6: 09 JAN 1951               7: 09 JAN 1951 08:21:10               8: 09 JAN 1951 08h 21m 10s               9: JAN 9, 1951              10: JAN 9, 1951 08:21:10              11: JAN 9, 1951 08h 21m 10s              12: 09 January 1951              13: 09 January 1951 08:21:10              14: 09 January 1951 08h 21m 10s              15: January 9, 1951              16: January 9, 1951 08:21:10              17: January 9, 1951 08h 21m 10s              18: 01091951              19: 09011951              20: 19510109   jnumber         The Julian number that is to be converted. This may be an array of Julian numbers.   ", "Utilities", "     Change History: <span class= code-output >  Written, 9 January 2013 by David W. Fanning.</span> <span class= code-output >  Added formats 18 through 20. 1 Feb 2013. DWF.</span>       Copyright (c) 2013, Fanning Software Consulting, Inc.      IDL&gt; jnumber = Julday(8, 9, 1951, 8, 21, 10)     IDL&gt; Print, cgJulian2Date(jnumber, Format=1)          09 Aug 1951 12:00:00       A string or string array of dates corresponding to the Julian number that is input.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgkml2kmz.html", "cgkml2kmz.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgkml2kmz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgkml2kmz.html#cgKML2KMZ", "cgKML2KMZ", 'routine in <a href="coyote/cgkml2kmz.html">cgkml2kmz.pro</a>', "cgkml2kmz.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgKML2KMZ", "   This program simply collects files created from the cgImage2KML program and moves    the files to a zip file with a *.kmz file extention. The method used is an    undocumented and unsupported method for creating KMZ files in IDL 8. It should not    be relied upon, and it will not work in earlier versions of IDL. The cross-platform    zip file functionality is scheduled to be exposed to IDL users in an IDL release    sometime in 2013, but it is not known when or if this will occur.   ", "kml_filename         The name of a KML file to package as a KMZ file.   supportFiles         A scalar or vector of files to be included with the KML file to be packaged.          If not present, files in the same directory as the KML file and having the          same base filename will be used.   ", "Utility", "     Change History: <span class= code-output >  Written, 22 Fabruary 2013 by David W. Fanning.</span>       Copyright (c) 2013, Fanning Software Consulting, Inc.      Here is how to use this program with the Google Earth Image example in the     Coyote Gallery. The result is a file     named  google_earth_image.kmz  that can be loaded into Google Earth.        IDL&gt; Google_Earth_Image        IDL&gt; kml2kmz, 'google_earth_image.kml'   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgkml_feature__define.html", "cgkml_feature__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgkml_feature__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This program implements the KML abstract FEATURE class. For    reference, see  the Google KML Reference Documentation.    A Feature object extends a KML Object, and both should be inherited by,    for example, a KML Overlay object, which further extends this KML abstract    class.   ", "", "Graphics FileIO", "     Change History: <span class= code-output >  Written, 28 October 2012 by David W. Fanning.</span> <span class= code-output >  Fixed typo in spelling of N_Elements. 16 Jan 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      See the cgKML_File object for examples of how to create a KML file.   ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgkml_feature__define.html#cgKML_Feature::INIT", "cgKML_Feature::INIT", 'routine in <a href="coyote/cgkml_feature__define.html">cgkml_feature__define.pro</a>', "cgkml_feature__define.pro", "", "cgKML_Feature::INIT", " The purpose of this method is to establish a KML Feature object class. For reference, see  https://developers.google.com/kml/documentation/kmlreference#feature.   ", "ABSTRACTVIEW        Defines a viewpoint associated with any element derived from Feature. Either a cgKML_Camera or         cgKML_LookAt object.  ADDRESS        A string value representing an unstructured address written as a standard street, city,         state address, and/or as a postal code. You can use the &lt;address&gt; tag to specify the         location of a point instead of using latitude and longitude coordinates. (However, if         a &lt;Point&gt; is provided, it takes precedence over the &lt;address&gt;.)  AUTHOR        An anonymous structure with two tags. Tag  NAME  is a string that gives the author's name,         and tag  LINK  is a string that provides a URL to the author's web site.  DESCRIPTION        User-supplied content that appears in the description balloon. Can be complicated. See the         KML Reference for  Feature , cited above.  EXTENDEDDATA         A scalar or vector of anonymous structures containing a tag NAME and a tag VALUE, which          are both strings. An optional third field DISPLAYNAME can also be present. See the          &lt;ExtendedData&gt; reference (https://developers.google.com/kml/documentation/kmlreference#extendeddata)          for additional information.  OPEN       This keyword specifies whether a Document or Folder appears closed or open when first loaded        into the Places panel. The default is to show the Document or Folder collapsed rather than        expanded.  PHONENUMBER        A phone number. Used only by Google Maps Mobile.  PLACENAME        This is the &lt;name&gt; element in a Feature object. It is user-defined text that is used as         the label for an object in Google Earth.  SNIPPET        A short description of the feature. This description is displayed in the Places panel         under the name of the feature. If not supplied, the first two lines of the Description         are used.  STYLEURL        The URL of a &lt;Style&gt; or &lt;StyleMap&gt; defined in a Document. If the style is in the same         file, use a # reference. If the style is defined in an external file, use a full URL         along with # referencing.  TIMEPRIMITIVE        Associates this feature with a period of time (cgKML_Timespan object) or a point in time         (KML_Timestamp object).  VISIBILITY       This keyword specifies whether the feature is drawn in the 3D viewer when it is initially loaded. In        order for a feature to be visible, the &lt;visibility&gt; tag of all its ancestors must also be        set to 1. In the Google Earth List View, each Feature has a checkbox that allows the user        to control visibility of the Feature.      _ref_extra: in, optional          Any keywords appropriate for superclass objects may be passed into the program.  _REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_feature__define.html#cgKML_Feature::Body", "cgKML_Feature::Body", 'routine in <a href="coyote/cgkml_feature__define.html">cgkml_feature__define.pro</a>', "cgkml_feature__define.pro", "", "cgKML_Feature::Body", " This method adds Feature elements to the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_feature__define.html#cgKML_Feature::Build", "cgKML_Feature::Build", 'routine in <a href="coyote/cgkml_feature__define.html">cgkml_feature__define.pro</a>', "cgkml_feature__define.pro", "", "cgKML_Feature::Build", " This method builds the feature in a KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_feature__define.html#cgKML_Feature::GetProperty", "cgKML_Feature::GetProperty", 'routine in <a href="coyote/cgkml_feature__define.html">cgkml_feature__define.pro</a>', "cgkml_feature__define.pro", "", "cgKML_Feature::GetProperty", " The purpose of this method is to return object properties.   ", "ABSTRACTVIEW        Defines a viewpoint associated with any element derived from Feature. Either a cgKML_Camera or         cgKML_LookAt object.  ADDRESS        A string value representing an unstructured address written as a standard street, city,         state address, and/or as a postal code. You can use the &lt;address&gt; tag to specify the         location of a point instead of using latitude and longitude coordinates. (However, if         a &lt;Point&gt; is provided, it takes precedence over the &lt;address&gt;.)  AUTHOR        An anonymous structure with two tags. Tag  NAME  is a string that gives the author's name,         and tag  LINK  is a string that provides a URL to the author's web site.  DESCRIPTION        User-sullied content that appears in the description balloon. Can be complicated. See the         KML Reference for  Feature , cited above.  EXTENDEDDATA         A scalar or vector of anonymous structures containing a tag NAME and a tag VALUE, which          are both strings. An optional third field DISPLAYNAME can also be present. See the          &lt;ExtendedData&gt; reference (https://developers.google.com/kml/documentation/kmlreference#extendeddata)          for additional information.  OPEN       This keyword specifies whether a Document or Folder appears closed or open when first loaded        into the Places panel. The default is to show the Document or Folder collapsed rather than        expanded.  PLACENAME        This is the &lt;name&gt; element in a Feature object. It is user-defined text that is used as         the label for an object in Google Earth.  PHONENUMBER        A phone number. Used only by Google Maps Mobile.  SNIPPET        A short description of the feature. This description is displayed in the Places panel         under the name of the feature. If not supplied, the first two lines of the Description         are used.  STYLEURL        The URL of a &lt;Style&gt; or &lt;StyleMap&gt; defined in a Document. If the style is in the same         file, use a # reference. If the style is defined in an external file, use a full URL         along with # referencing.  TIMEPRIMITIVE        Associates this feature with a period of time (cgKML_Timespan object) or a point in time         (KML_Timestamp object).  VISIBILITY       This keyword specifies whether the feature is drawn in the 3D viewer when it is initially loaded. In        order for a feature to be visible, the &lt;visibility&gt; tag of all its ancestors must also be        set to 1. In the Google Earth List View, each Feature has a checkbox that allows the user        to control visibility of the Feature.      _ref_extra: out, optional          Any keywords appropriate for superclass objects may be passed into the program.  _REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_feature__define.html#cgKML_Feature::SetProperty", "cgKML_Feature::SetProperty", 'routine in <a href="coyote/cgkml_feature__define.html">cgkml_feature__define.pro</a>', "cgkml_feature__define.pro", "", "cgKML_Feature::SetProperty", " The purpose of this method is to set object properties.   ", "ABSTRACTVIEW        Defines a viewpoint associated with any element derived from Feature. Either a cgKML_Camera or         cgKML_LookAt object.  ADDRESS        A string value representing an unstructured address written as a standard street, city,         state address, and/or as a postal code. You can use the &lt;address&gt; tag to specify the         location of a point instead of using latitude and longitude coordinates. (However, if         a &lt;Point&gt; is provided, it takes precedence over the &lt;address&gt;.)  AUTHOR        An anonymous structure with two tags. Tag  NAME  is a string that gives the author's name,         and tag  LINK  is a string that provides a URL to the author's web site.  DESCRIPTION        User-sullied content that appears in the description balloon. Can be complicated. See the         KML Reference for  Feature , cited above.  EXTENDEDDATA         A scalar or vector of anonymous structures containing a tag NAME and a tag VALUE, which          are both strings. An optional third field DISPLAYNAME can also be present. See the          &lt;ExtendedData&gt; reference (https://developers.google.com/kml/documentation/kmlreference#extendeddata)          for additional information.  OPEN       This keyword specifies whether a Document or Folder appears closed or open when first loaded        into the Places panel. The default is to show the Document or Folder collapsed rather than        expanded.  PHONENUMBER        A phone number. Used only by Google Maps Mobile.  PLACENAME        This is the &lt;name&gt; element in a Feature object. It is user-defined text that is used as         the label for an object in Google Earth.  SNIPPET        A short description of the feature. This description is displayed in the Places panel         under the name of the feature. If not supplied, the first two lines of the Description         are used.  STYLEURL        The URL of a &lt;Style&gt; or &lt;StyleMap&gt; defined in a Document. If the style is in the same         file, use a # reference. If the style is defined in an external file, use a full URL         along with # referencing.  TIMEPRIMITIVE        Associates this feature with a period of time (cgKML_Timespan object) or a point in time         (KML_Timestamp object).  VISIBILITY       This keyword specifies whether the feature is drawn in the 3D viewer when it is initially loaded. In        order for a feature to be visible, the &lt;visibility&gt; tag of all its ancestors must also be        set to 1. In the Google Earth List View, each Feature has a checkbox that allows the user        to control visibility of the Feature.      _ref_extra: in, optional          Any keywords appropriate for superclass objects may be passed into the program.  _REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_feature__define.html#cgKML_Feature::CLEANUP", "cgKML_Feature::CLEANUP", 'routine in <a href="coyote/cgkml_feature__define.html">cgkml_feature__define.pro</a>', "cgkml_feature__define.pro", "", "cgKML_Feature::CLEANUP", " The purpose of this method is to destroy anything we created that may leak  memory or need to be released from use.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_feature__define.html#cgKML_Feature__Define", "cgKML_Feature__Define", 'routine in <a href="coyote/cgkml_feature__define.html">cgkml_feature__define.pro</a>', "cgkml_feature__define.pro", "", "cgKML_Feature__Define", " The cgKML_Feature class definition module. This is a mostly abstract class  that will be inherited by cgKML_Overlay and cgKML_Container objects (among others).  Basically, any KML element that should be added to a KML file will inherit this  object. It is a container object and represents part of the KML file hierarchy.   ", "class         The class definition returned as a structure variable. Occassionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html", "cgkml_file__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgkml_file__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This program creates a KML file that can be displayed with Google Earth.    It implements some (not all) of the objects or elements allowed in KML files. For    reference, see  the Google KML Reference Documentation.   ", "", "Graphics FileIO", "     Change History: <span class= code-output >  Written, 28 October 2012 by David W. Fanning.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      To create an image overlay object: <span class= code-output > kml = Obj_New('cgKML_File', 'test.kml')</span> <span class= code-output > overlay = Obj_New('cgKML_GroundOverlay', $</span> <span class= code-output >     HREF='myimage.tif', $</span> <span class= code-output >     LATLONBOX=[])</span> <span class= code-output > kml -&gt; Add, overlay</span> <span class= code-output > kml -&gt; Save</span> <span class= code-output > kml -&gt; Destroy</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::INIT", "cgKML_File::INIT", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::INIT", " The purpose of this method is to establish the name of a KML file that is to be written. Optionally,  a hint attribute can be specified that indicated to Google Earth that is should switch to sky view or  to another celestial body, such as Mars.   ", "HINT         A hint attribute (http://simplekml.readthedocs.org/en/latest/kml.html). Hint attributes are          used as a signal to Google Earth to switch to sky view or to another celestial body, such as Mars.  filename         The name of the KML file to be created. The output file should have a file extension of *.kml.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::Add", "cgKML_File::Add", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::Add", " This method allows KML objects to be added to the KML file.   ", "theObject         Only objects of class cgKML_OBJECT can be added to a KML file object.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::Body", "cgKML_File::Body", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::Body", " This method writes the contents of each KML object included in the file  to the file in a recursive way.   ", "LUN         The logical unit number that the KML file is attached to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::Destroy", "cgKML_File::Destroy", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::Destroy", " This method destroys the KML_File object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::GetProperty", "cgKML_File::GetProperty", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::GetProperty", " This method allows the user to obtain properties of the object.   ", "FILENAME         The name of the KML file being created.  HINT         The hint attribute that was input to the file via the INIT or SetProperty methods.  LEVEL         The heirarchtical level of this object.   _REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::Head", "cgKML_File::Head", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::Head", " This method opens the &lt;kml&gt; element and writes it to the file.   ", "LUN         The logical unit number that the KML file is attached to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::Save", "cgKML_File::Save", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::Save", " This method saves the KML file and writes it to disk.   ", "KMZ         If this keyword is set, the KML file is zipped into a KMZ. Only available for IDL 8.0          and higher.  SupportFiles         A string array of files that should be included in the KMZ file          along with the KML file. Will search for files, in not included.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::SetProperty", "cgKML_File::SetProperty", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::SetProperty", " This method allows the user to set properties of the object.   ", "FILENAME         The name of the KML file being created.  HINT         A hint attribute (http://simplekml.readthedocs.org/en/latest/kml.html). Hint attributes are          used as a signal to Google Earth to switch to sky view or to another celestial body, such as Mars.  _REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::Tail", "cgKML_File::Tail", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::Tail", " This method closes the &lt;kml&gt; element.   ", "LUN         The logical unit number that the KML file is attached to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File::CLEANUP", "cgKML_File::CLEANUP", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File::CLEANUP", " The purpose of this method is to destroy anything we created that may leak  memory or need to be released from use.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_file__define.html#cgKML_File__Define", "cgKML_File__Define", 'routine in <a href="coyote/cgkml_file__define.html">cgkml_file__define.pro</a>', "cgkml_file__define.pro", "", "cgKML_File__Define", " The cgKML_FILE class definition module.   ", "class         The class definition returned as a structure variable. Occassionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html", "cgkml_groundoverlay__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgkml_groundoverlay__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This program implements the KML GroundOverlay element. For    reference, see  the Google KML Reference Documentation.    A GroundOverlay element draws an image overlay draped onto the terrain    of a Google Earth display.   ", "", "Graphics FileIO", "     Change History: <span class= code-output >  Written, 28 October 2012 by David W. Fanning.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      See the cgKML_File object for examples of how to create a KML file.   ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html#cgKML_GroundOverlay::INIT", "cgKML_GroundOverlay::INIT", 'routine in <a href="coyote/cgkml_groundoverlay__define.html">cgkml_groundoverlay__define.pro</a>', "cgkml_groundoverlay__define.pro", "", "cgKML_GroundOverlay::INIT", " The purpose of this method is to establish an abstract KML GroundOverlay class. For reference, see  https://developers.google.com/kml/documentation/kmlreference?hl=fr#groundoverlay.   ", "ALTITUDE         Specifies the distance above the earth's surface, in meters, and is interpreted          according to the altitude mode  ALTMODE         The altitude mode. Possible values are  clampToGround , which ignores the Altitude          value and drapes the overlay over the terrain. The other possible mode is  absolute ,          which sets the altitude of the overlay relative to sea level, regardless of the          actual elevation of the terrain beneath the element. For example, if you set the          altitude of an overlay to 10 meters with an absolute altitude mode, the overlay will          appear to be at ground level if the terrain beneath is also 10 meters above sea level.          If the terrain is 3 meters above sea level, the overlay will appear elevated above the          terrain by 7 meters. It is also possible to set the mode to  clampToSeaFloor .  COLOR         Color values are expressed in hexadecimal notation, including opacity (alpha) values.          The order of expression is alpha, blue, green, red (aabbggrr). The range of values for          any one color is 0 to 255 (00 to ff). For opacity, 00 is fully transparent and ff is          fully opaque. For example, if you want to apply a blue color with 50 percent opacity          to an overlay, you would specify the following: COLOR =  7fff0000 .  DRAWORDER         This element defines the stacking order for the images in overlapping overlays.          Overlays with higher values are drawn on top of overlays with lower values.  HREF         A URL that identifies the location of the image associated with this Overlay. The          location can be either a local file (e.g., 'myimage.png') or a URL to an image          on a web server (e.g., 'http://www.idlcoyote.com/images/myimage.png').  LATLONBOX         A four-element float array that specifies the top, bottom, right, and left sides          of a bounding box that the ground overlay is aligned to. The elements of the array          also correspond to [north, south, east, west] coordinates, which should be specified          in decimal degrees. North/South coordinates are in the range -90 to +90, and East/West          coordinates are in the range -180 to 180.  LATLONQUAD         An 8-element array describing the four corners of a quadrilateral defining the overlay area.          Exactly four coordinate pairs have to be provided, each consisting of floating point values          for longitude and latitude. The coordinates must be specified in counter-clockwise order          with the first coordinate corresponding to the lower-left corner of the overlayed image.          The shape described by these corners must be convex.  ROTATION          Specifies a rotation of the overlay about its center, in degrees. Values can be ±180.           The default is 0 (north). Rotations are specified in a counterclockwise direction.           Used only with the LatLonBox array.  _REF_EXTRA         Any keywords appropriate for superclass objects may be passed into the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html#cgKML_GroundOverlay::Head", "cgKML_GroundOverlay::Head", 'routine in <a href="coyote/cgkml_groundoverlay__define.html">cgkml_groundoverlay__define.pro</a>', "cgkml_groundoverlay__define.pro", "", "cgKML_GroundOverlay::Head", " This method opens the &lt;GroundOverlay&gt; tag in the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html#cgKML_GroundOverlay::Body", "cgKML_GroundOverlay::Body", 'routine in <a href="coyote/cgkml_groundoverlay__define.html">cgkml_groundoverlay__define.pro</a>', "cgkml_groundoverlay__define.pro", "", "cgKML_GroundOverlay::Body", " This method adds GroundOverlay elements to the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html#cgKML_GroundOverlay::Tail", "cgKML_GroundOverlay::Tail", 'routine in <a href="coyote/cgkml_groundoverlay__define.html">cgkml_groundoverlay__define.pro</a>', "cgkml_groundoverlay__define.pro", "", "cgKML_GroundOverlay::Tail", " This method closes the &lt;GroundOverlay&gt; tag in the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html#cgKML_GroundOverlay::Build", "cgKML_GroundOverlay::Build", 'routine in <a href="coyote/cgkml_groundoverlay__define.html">cgkml_groundoverlay__define.pro</a>', "cgkml_groundoverlay__define.pro", "", "cgKML_GroundOverlay::Build", " This BUILD method builds the GroundOverlay section in the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html#cgKML_GroundOverlay::GetProperty", "cgKML_GroundOverlay::GetProperty", 'routine in <a href="coyote/cgkml_groundoverlay__define.html">cgkml_groundoverlay__define.pro</a>', "cgkml_groundoverlay__define.pro", "", "cgKML_GroundOverlay::GetProperty", " The purpose of this method is to return object properties.   ", "ALTITUDE         Specifies the distance above the earth's surface, in meters, and is interpreted          according to the altitude mode  ALTMODE         The altitude mode. Possible values are  clampToGround , which ignores the Altitude          value and drapes the overlay over the terrain. The other possible mode is  absolute ,          which sets the altitude of the overlay relative to sea level, regardless of the          actual elevation of the terrain beneath the element. For example, if you set the          altitude of an overlay to 10 meters with an absolute altitude mode, the overlay will          appear to be at ground level if the terrain beneath is also 10 meters above sea level.          If the terrain is 3 meters above sea level, the overlay will appear elevated above the          terrain by 7 meters.  LATLONBOX         A four-element float array that specifies the top, bottom, right, and left sides          of a bounding box that the ground overlay is aligned to. The elements of the array          also correspond to [north, south, east, west] coordinates, which should be specified          in decimal degrees. North/South coordinates are in the range -90 to +90, and East/West          coordinates are in the range -180 to 180.  LATLONQUAD         An 8-element array describing the four corners of a quadrilateral defining the overlay area.          Exactly four coordinate pairs have to be provided, each consisting of floating point values          for longitude and latitude. The coordinates must be specified in counter-clockwise order          with the first coordinate corresponding to the lower-left corner of the overlayed image.          The shape described by these corners must be convex.  ROTATION          Specifies a rotation of the overlay about its center, in degrees. Values can be ±180.           The default is 0 (north). Rotations are specified in a counterclockwise direction.           Used only with the LatLonBox array.  _REF_EXTRA         Any keywords for the superclass objects are allowed.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html#cgKML_GroundOverlay::SetProperty", "cgKML_GroundOverlay::SetProperty", 'routine in <a href="coyote/cgkml_groundoverlay__define.html">cgkml_groundoverlay__define.pro</a>', "cgkml_groundoverlay__define.pro", "", "cgKML_GroundOverlay::SetProperty", " The purpose of this method is to set object properties.   ", "ALTITUDE         Specifies the distance above the earth's surface, in meters, and is interpreted          according to the altitude mode  ALTMODE         The altitude mode. Possible values are  clampToGround , which ignores the Altitude          value and drapes the overlay over the terrain. The other possible mode is  absolute ,          which sets the altitude of the overlay relative to sea level, regardless of the          actual elevation of the terrain beneath the element. For example, if you set the          altitude of an overlay to 10 meters with an absolute altitude mode, the overlay will          appear to be at ground level if the terrain beneath is also 10 meters above sea level.          If the terrain is 3 meters above sea level, the overlay will appear elevated above the          terrain by 7 meters.  LATLONBOX         A four-element float array that specifies the top, bottom, right, and left sides          of a bounding box that the ground overlay is aligned to. The elements of the array          also correspond to [north, south, east, west] coordinates, which should be specified          in decimal degrees. North/South coordinates are in the range -90 to +90, and East/West          coordinates are in the range -180 to 180.  LATLONQUAD         An 8-element array describing the four corners of a quadrilateral defining the overlay area.          Exactly four coordinate pairs have to be provided, each consisting of floating point values          for longitude and latitude. The coordinates must be specified in counter-clockwise order          with the first coordinate corresponding to the lower-left corner of the overlayed image.          The shape described by these corners must be convex.  ROTATION          Specifies a rotation of the overlay about its center, in degrees. Values can be ±180.           The default is 0 (north). Rotations are specified in a counterclockwise direction.           Used only with the LatLonBox array.  _REF_EXTRA         Any keywords for the superclass objects are allowed.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html#cgKML_GroundOverlay::CLEANUP", "cgKML_GroundOverlay::CLEANUP", 'routine in <a href="coyote/cgkml_groundoverlay__define.html">cgkml_groundoverlay__define.pro</a>', "cgkml_groundoverlay__define.pro", "", "cgKML_GroundOverlay::CLEANUP", " The purpose of this method is to destroy anything we created that may leak  memory or need to be released from use.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_groundoverlay__define.html#cgKML_GroundOverlay__Define", "cgKML_GroundOverlay__Define", 'routine in <a href="coyote/cgkml_groundoverlay__define.html">cgkml_groundoverlay__define.pro</a>', "cgkml_groundoverlay__define.pro", "", "cgKML_GroundOverlay__Define", " The cgKML_GroundOverlay class definition module. It is a container object  and represents part of the KML file hierarchy.   ", "class         The class definition returned as a structure variable. Occassionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html", "cgkml_lookat__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgkml_lookat__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This program implements the KML abstract LookAt class. For    reference, see  the Google KML Reference Documentation.    A LookAt object extends a KML Object. The purpose of this object is to allow    Google Earth to  fly to  a particular location.   ", "", "Graphics FileIO", "     Change History: <span class= code-output >  Written, 31 December 2012 by David W. Fanning.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      See the cgKML_File object for examples of how to create a KML file.   ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html#cgKML_LookAt::INIT", "cgKML_LookAt::INIT", 'routine in <a href="coyote/cgkml_lookat__define.html">cgkml_lookat__define.pro</a>', "cgkml_lookat__define.pro", "", "cgKML_LookAt::INIT", " The purpose of this method is to establish a KML LookAt object class. For reference, see  https://developers.google.com/kml/documentation/kmlreference#lookat.   ", "ALTITUDEMODE         The mode of the altitude. Possible values are:  clampToGround ,  relativeToGround           and  absolute .  HEADING         The angle of the view. Valid values 0 to 360.  HEIGHT         The altitude (in km) of the eye with respect to the lat/lon point of the eye.          Called  altitude  in the KML documentation, but called  height  here to differentiate          keyword from  altitudeMode .  Positive values in kilometers.  LATITUDE         The input latitude where the eye should be located. Valid values -90 to 90.  LONGITUDE         The input longitude where the eye should be located. Valid values -180 to 180.  TILT         The tilt angle of the eye. Valid values 0 to 90.      _ref_extra: in, optional          Any keywords appropriate for superclass objects may be passed into the program.  _REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html#cgKML_LookAt::Build", "cgKML_LookAt::Build", 'routine in <a href="coyote/cgkml_lookat__define.html">cgkml_lookat__define.pro</a>', "cgkml_lookat__define.pro", "", "cgKML_LookAt::Build", " This method builds the feature in a KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html#cgKML_LookAt::Body", "cgKML_LookAt::Body", 'routine in <a href="coyote/cgkml_lookat__define.html">cgkml_lookat__define.pro</a>', "cgkml_lookat__define.pro", "", "cgKML_LookAt::Body", " This method adds LookAt elements to the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html#cgKML_LookAt::Head", "cgKML_LookAt::Head", 'routine in <a href="coyote/cgkml_lookat__define.html">cgkml_lookat__define.pro</a>', "cgkml_lookat__define.pro", "", "cgKML_LookAt::Head", " This method opens the &lt;LookAt&gt; tag in the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html#cgKML_LookAt::Tail", "cgKML_LookAt::Tail", 'routine in <a href="coyote/cgkml_lookat__define.html">cgkml_lookat__define.pro</a>', "cgkml_lookat__define.pro", "", "cgKML_LookAt::Tail", " This method closes the &lt;LookAt&gt; tag in the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html#cgKML_LookAt::GetProperty", "cgKML_LookAt::GetProperty", 'routine in <a href="coyote/cgkml_lookat__define.html">cgkml_lookat__define.pro</a>', "cgkml_lookat__define.pro", "", "cgKML_LookAt::GetProperty", " The purpose of this method is to set the object's properties.   ", "ALTITUDEMODE         The mode of the altitude. Possible values are:  clampToGround ,  relativeToGround           and  absolute .  HEADING         The angle of the view. Valid values 0 to 360.  HEIGHT         The altitude (in km) of the eye with respect to the lat/lon point of the eye.          Called  altitude  in the KML documentation, but called  height  here to differentiate          keyword from  altitudeMode .  LATITUDE         The input latitude where the eye should be located. Valid values -90 to 90.  LONGITUDE         The input longitude where the eye should be located.  TILT         The tilt angle of the eye. Valid values 0 to 90.      _ref_extra: out, optional          Any keywords appropriate for superclass objects may be passed into the program.  _REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html#cgKML_LookAt::SetProperty", "cgKML_LookAt::SetProperty", 'routine in <a href="coyote/cgkml_lookat__define.html">cgkml_lookat__define.pro</a>', "cgkml_lookat__define.pro", "", "cgKML_LookAt::SetProperty", " The purpose of this method is to set the object's properties.   ", "ALTITUDEMODE         The mode of the altitude. Possible values are:  clampToGround ,  relativeToGround           and  absolute .  HEADING         The angle of the view. Valid values 0 to 360.  HEIGHT         The altitude (in km) of the eye with respect to the lat/lon point of the eye.          Called  altitude  in the KML documentation, but called  height  here to differentiate          keyword from  altitudeMode .  Positive values in kilometers.  LATITUDE         The input latitude where the eye should be located. Valid values -90 to 90.  LONGITUDE         The input longitude where the eye should be located. Valid values -180 to 180.  TILT         The tilt angle of the eye. Valid values 0 to 90.      _ref_extra: in, optional          Any keywords appropriate for superclass objects may be passed into the program.  _REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html#cgKML_LookAt::CLEANUP", "cgKML_LookAt::CLEANUP", 'routine in <a href="coyote/cgkml_lookat__define.html">cgkml_lookat__define.pro</a>', "cgkml_lookat__define.pro", "", "cgKML_LookAt::CLEANUP", " The purpose of this method is to destroy anything we created that may leak  memory or need to be released from use.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_lookat__define.html#cgKML_LookAt__Define", "cgKML_LookAt__Define", 'routine in <a href="coyote/cgkml_lookat__define.html">cgkml_lookat__define.pro</a>', "cgkml_lookat__define.pro", "", "cgKML_LookAt__Define", " The cgKML_LookAt class definition module. This is a class that allows the  Google Earth application to  fly to  the position indicated.   ", "class         The class definition returned as a structure variable. Occassionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgkml_object__define.html", "cgkml_object__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgkml_object__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This program implements the KML abstract OBJECT class. For    reference, see  the Google KML Reference Documentation.    A Object object is a basic KML class, and should be inherited by,    for example, a cgKML_Feature object, which extends this KML abstract    class.   ", "", "Graphics FileIO", "     Change History: <span class= code-output >  Written, 28 October 2012 by David W. Fanning.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      See the cgKML_File object for examples of how to create a KML file.   ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgkml_object__define.html#cgKML_Object::INIT", "cgKML_Object::INIT", 'routine in <a href="coyote/cgkml_object__define.html">cgkml_object__define.pro</a>', "cgkml_object__define.pro", "", "cgKML_Object::INIT", " The purpose of this method is to establish an abstract KML Object class. For reference, see  https://developers.google.com/kml/documentation/kmlreference#object.   ", "TARGETID         A targetID attribute which is used to reference objects that have already been loaded          into Google Earch. For reference, see          https://developers.google.com/kml/documentation/kmlreference#object.  _REF_EXTRA         Any keywords appropriate for superclass objects may be passed into the program.  id         An ID attribute which allows unique identification of a KML element. For reference, see          https://developers.google.com/kml/documentation/kmlreference#object. The ID attribute must          be assigned in the &lt;Update&gt; mechanism is to be used.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_object__define.html#cgKML_Object::Build", "cgKML_Object::Build", 'routine in <a href="coyote/cgkml_object__define.html">cgkml_object__define.pro</a>', "cgkml_object__define.pro", "", "cgKML_Object::Build", " This BUILD method is an abstract method that should be overridden by any  object that you intend to add to a KML file. It is used to build the  actual KML code for the element in question.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_object__define.html#cgKML_Object::XMLTag", "cgKML_Object::XMLTag", 'routine in <a href="coyote/cgkml_object__define.html">cgkml_object__define.pro</a>', "cgkml_object__define.pro", "", "cgKML_Object::XMLTag", " This method writes an XML tag into the file. All parameters and  keywords are required. Sequence is: &lt;tag&gt;value&lt;/tag&gt;.   ", "LUN        The logical unit number of the open KML file to write to.  SPACEtag        The name of the XML tag to write to the file.  value        The value of the tag. May be any type of data that can be converted         to a string.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_object__define.html#cgKML_Object::GetParent", "cgKML_Object::GetParent", 'routine in <a href="coyote/cgkml_object__define.html">cgkml_object__define.pro</a>', "cgkml_object__define.pro", "", "cgKML_Object::GetParent", " The purpose of this function method is to return the parent object reference.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_object__define.html#cgKML_Object::GetProperty", "cgKML_Object::GetProperty", 'routine in <a href="coyote/cgkml_object__define.html">cgkml_object__define.pro</a>', "cgkml_object__define.pro", "", "cgKML_Object::GetProperty", " The purpose of this method is to return object properties.   ", "ID         The object ID.  PARENT         The parent object reference.  TARGETID         The targetID of the object.  _REF_EXTRA         Any keywords for the superclass objects are allowed.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_object__define.html#cgKML_Object::SetProperty", "cgKML_Object::SetProperty", 'routine in <a href="coyote/cgkml_object__define.html">cgkml_object__define.pro</a>', "cgkml_object__define.pro", "", "cgKML_Object::SetProperty", " The purpose of this method is to set object properties.   ", "ID         The object ID.  PARENT         The parent object reference.  TARGETID         The targetID of the object.  _REF_EXTRA         Any keywords for the superclass objects are allowed.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_object__define.html#cgKML_Object::CLEANUP", "cgKML_Object::CLEANUP", 'routine in <a href="coyote/cgkml_object__define.html">cgkml_object__define.pro</a>', "cgkml_object__define.pro", "", "cgKML_Object::CLEANUP", " The purpose of this method is to destroy anything we created that may leak  memory or need to be released from use.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_object__define.html#cgKML_Object__Define", "cgKML_Object__Define", 'routine in <a href="coyote/cgkml_object__define.html">cgkml_object__define.pro</a>', "cgkml_object__define.pro", "", "cgKML_Object__Define", " The cgKML_OBJECT class definition module. This is a mostly abstract class  that will be inherited by cgKML_Feature and cgKML_Geometery objects (among others).  Basically, any KML element that should be added to a KML file will inherit this  object. It is a container object and represents part of the KML file hierarchy.  Only objects of cgKML_Object class can be added to cgKML_File objects.   ", "class         The class definition returned as a structure variable. Occassionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgkml_overlay__define.html", "cgkml_overlay__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgkml_overlay__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This program implements the KML abstract OVERLAY class. For    reference, see  the Google KML Reference Documentation.    An Overlay object is a basic KML class, and should be inherited by,    for example, a cgKML_GroundOverlay object, which extends and implements    this KML abstract class.   ", "", "Graphics FileIO", "     Change History: <span class= code-output >  Written, 28 October 2012 by David W. Fanning.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      See the cgKML_File object for examples of how to create a KML file.   ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgkml_overlay__define.html#cgKML_Overlay::INIT", "cgKML_Overlay::INIT", 'routine in <a href="coyote/cgkml_overlay__define.html">cgkml_overlay__define.pro</a>', "cgkml_overlay__define.pro", "", "cgKML_Overlay::INIT", " The purpose of this method is to establish an abstract KML Overlay class. For reference, see  https://developers.google.com/kml/documentation/kmlreference?hl=fr#overlay.   ", "COLOR         Color values are expressed in hexadecimal notation, including opacity (alpha) values.          The order of expression is alpha, blue, green, red (aabbggrr). The range of values for          any one color is 0 to 255 (00 to ff). For opacity, 00 is fully transparent and ff is          fully opaque. For example, if you want to apply a blue color with 50 percent opacity          to an overlay, you would specify the following: COLOR =  7fff0000 .  DRAWORDER         This element defines the stacking order for the images in overlapping overlays.          Overlays with higher values are drawn on top of overlays with lower values.  HREF         A URL that identifies the location of the image associated with this Overlay. The          location can be either a local file (e.g., 'myimage.png') or a URL to an image          on a web server (e.g., 'http://www.idlcoyote.com/images/myimage.png').  _REF_EXTRA         Any keywords appropriate for superclass objects may be passed into the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_overlay__define.html#cgKML_Overlay::Body", "cgKML_Overlay::Body", 'routine in <a href="coyote/cgkml_overlay__define.html">cgkml_overlay__define.pro</a>', "cgkml_overlay__define.pro", "", "cgKML_Overlay::Body", " This method adds Overlay elements to the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_overlay__define.html#cgKML_Overlay::Build", "cgKML_Overlay::Build", 'routine in <a href="coyote/cgkml_overlay__define.html">cgkml_overlay__define.pro</a>', "cgkml_overlay__define.pro", "", "cgKML_Overlay::Build", " This BUILD method is an abstract method that should be overridden by any  object that you intend to add to a KML file. It is used to build the  actual KML code for the element in question.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_overlay__define.html#cgKML_Overlay::GetProperty", "cgKML_Overlay::GetProperty", 'routine in <a href="coyote/cgkml_overlay__define.html">cgkml_overlay__define.pro</a>', "cgkml_overlay__define.pro", "", "cgKML_Overlay::GetProperty", " The purpose of this method is to return object properties.   ", "COLOR         Color values are expressed in hexadecimal notation, including opacity (alpha) values.          The order of expression is alpha, blue, green, red (aabbggrr). The range of values for          any one color is 0 to 255 (00 to ff). For opacity, 00 is fully transparent and ff is          fully opaque. For example, if you want to apply a blue color with 50 percent opacity          to an overlay, you would specify the following: COLOR =  7fff0000 .  DRAWORDER         This element defines the stacking order for the images in overlapping overlays.          Overlays with higher values are drawn on top of overlays with lower values.  HREF         A URL that identifies the location of the image associated with this Overlay. The          location can be either a local file (e.g., 'myimage.png') or a URL to an image          on a web server (e.g., 'http://www.idlcoyote.com/images/myimage.png').  _REF_EXTRA         Any keywords for the superclass objects are allowed.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_overlay__define.html#cgKML_Overlay::SetProperty", "cgKML_Overlay::SetProperty", 'routine in <a href="coyote/cgkml_overlay__define.html">cgkml_overlay__define.pro</a>', "cgkml_overlay__define.pro", "", "cgKML_Overlay::SetProperty", " The purpose of this method is to set object properties.   ", "COLOR         Color values are expressed in hexadecimal notation, including opacity (alpha) values.          The order of expression is alpha, blue, green, red (aabbggrr). The range of values for          any one color is 0 to 255 (00 to ff). For opacity, 00 is fully transparent and ff is          fully opaque. For example, if you want to apply a blue color with 50 percent opacity          to an overlay, you would specify the following: COLOR =  7fff0000 .  DRAWORDER         This element defines the stacking order for the images in overlapping overlays.          Overlays with higher values are drawn on top of overlays with lower values.  HREF         A URL that identifies the location of the image associated with this Overlay. The          location can be either a local file (e.g., 'myimage.png') or a URL to an image          on a web server (e.g., 'http://www.idlcoyote.com/images/myimage.png').  _REF_EXTRA         Any keywords for the superclass objects are allowed.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_overlay__define.html#cgKML_Overlay::CLEANUP", "cgKML_Overlay::CLEANUP", 'routine in <a href="coyote/cgkml_overlay__define.html">cgkml_overlay__define.pro</a>', "cgkml_overlay__define.pro", "", "cgKML_Overlay::CLEANUP", " The purpose of this method is to destroy anything we created that may leak  memory or need to be released from use.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_overlay__define.html#cgKML_Overlay__Define", "cgKML_Overlay__Define", 'routine in <a href="coyote/cgkml_overlay__define.html">cgkml_overlay__define.pro</a>', "cgkml_overlay__define.pro", "", "cgKML_Overlay__Define", " The cgKML_Overlay class definition module. This is an abstract class  that will be inherited by overlay objects (GroundOverlay, and ScreenOverlay, among others).  Basically, any KML element that should be added to a KML file will inherit this  object. It is a container object and represents part of the KML file hierarchy.   ", "class         The class definition returned as a structure variable. Occassionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html", "cgkml_screenoverlay__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgkml_screenoverlay__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This program implements the KML ScreenOverlay element. For    reference, see  the Google KML Reference Documentation.    A ScreenOverlay element draws an image onto the Google Earth display or screen.   ", "", "Graphics FileIO", "     Change History: <span class= code-output >  Written, 3 November 2012 by David W. Fanning.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      See the cgKML_File object for examples of how to create a KML file.   ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html#cgKML_ScreenOverlay::INIT", "cgKML_ScreenOverlay::INIT", 'routine in <a href="coyote/cgkml_screenoverlay__define.html">cgkml_screenoverlay__define.pro</a>', "cgkml_screenoverlay__define.pro", "", "cgKML_ScreenOverlay::INIT", " The purpose of this method is to establish an abstract KML ScreenOverlay class. For reference, see  https://developers.google.com/kml/documentation/kmlreference?hl=fr#ScreenOverlay.   ", "COLOR         Color values are expressed in hexadecimal notation, including opacity (alpha) values.          The order of expression is alpha, blue, green, red (aabbggrr). The range of values for          any one color is 0 to 255 (00 to ff). For opacity, 00 is fully transparent and ff is          fully opaque. For example, if you want to apply a blue color with 50 percent opacity          to an overlay, you would specify the following: COLOR =  7fff0000 .  DRAWORDER         This element defines the stacking order for the images in overlapping overlays.          Overlays with higher values are drawn on top of overlays with lower values.  HREF         A URL that identifies the location of the image associated with this Overlay. The          location can be either a local file (e.g., 'myimage.png') or a URL to an image          on a web server (e.g., 'http://www.idlcoyote.com/images/myimage.png').  OVERLAY_XY         This keyword specifies a point [x,y] in the image overlay that is mapped to the          screen coordinate Screen_XY. The location of the point is specified by the values          in Overlay_Units_X and 'Overlay_Units_Y.  OVERLAY_UNIT_X         Three values are possible: (1)  fraction  indicates that the X value is a fraction of the image;          (2)  pixels  indicates the the X value is in pixels; and (3)  insetPixels  indicates the X          value is an indent from the right edge of the image.  OVERLAY_UNIT_Y         Three values are possible: (1)  fraction  indicates that the Y value is a fraction of the image;          (2)  pixels  indicates the the Y value is in pixels; and (3)  insetPixels  indicates the Y          value is an indent from the top edge of the image.  SCREEN_XY         This keyword specifies a point [x,y] relative to the screen origin that the overlay image          is mapped to. The location of the point is specified by the values in XUnits and 'YUnits.  SCREEN_UNIT_X         Three values are possible: (1)  fraction  indicates that the X value is a fraction of the image;          (2)  pixels  indicates the the X value is in pixels; and (3)  insetPixels  indicates the X          value is an indent from the right edge of the image.  SCREEN_UNIT_Y         Three values are possible: (1)  fraction  indicates that the Y value is a fraction of the image;          (2)  pixels  indicates the the Y value is in pixels; and (3)  insetPixels  indicates the Y          value is an indent from the top edge of the image.  SIZE_XY         This keyword specifies the size of the image for the screen overlay as follows. A -1          indicates to use the native dimensions of the image. A 0 indicates that the aspect ratio          of the image should be preserved. Any other value sets the output dimension of the image,          according to the  unit  values.  SIZE_UNIT_X         Three values are possible: (1)  fraction  indicates that the X value is a fraction of the image;          (2)  pixels  indicates the the X value is in pixels; and (3)  insetPixels  indicates the X          value is an indent from the right edge of the image.  SIZE_UNIT_Y         Three values are possible: (1)  fraction  indicates that the Y value is a fraction of the image;          (2)  pixels  indicates the the Y value is in pixels; and (3)  insetPixels  indicates the Y          value is an indent from the top edge of the image.  ROTATION         This keyword indicates the angle of rotation of the screen overlay in degrees counterclockwise          from North. A value from -180 to 180.  _REF_EXTRA         Any keywords appropriate for superclass objects may be passed into the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html#cgKML_ScreenOverlay::Head", "cgKML_ScreenOverlay::Head", 'routine in <a href="coyote/cgkml_screenoverlay__define.html">cgkml_screenoverlay__define.pro</a>', "cgkml_screenoverlay__define.pro", "", "cgKML_ScreenOverlay::Head", " This method opens the &lt;ScreenOverlay&gt; tag in the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html#cgKML_ScreenOverlay::Body", "cgKML_ScreenOverlay::Body", 'routine in <a href="coyote/cgkml_screenoverlay__define.html">cgkml_screenoverlay__define.pro</a>', "cgkml_screenoverlay__define.pro", "", "cgKML_ScreenOverlay::Body", " This method adds ScreenOverlay elements to the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html#cgKML_ScreenOverlay::Tail", "cgKML_ScreenOverlay::Tail", 'routine in <a href="coyote/cgkml_screenoverlay__define.html">cgkml_screenoverlay__define.pro</a>', "cgkml_screenoverlay__define.pro", "", "cgKML_ScreenOverlay::Tail", " This method closes the &lt;ScreenOverlay&gt; tag in the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html#cgKML_ScreenOverlay::Build", "cgKML_ScreenOverlay::Build", 'routine in <a href="coyote/cgkml_screenoverlay__define.html">cgkml_screenoverlay__define.pro</a>', "cgkml_screenoverlay__define.pro", "", "cgKML_ScreenOverlay::Build", " This BUILD method builds the ScreenOverlay section in the KML file.   ", "LUN        The logical unit number of the open KML file to write to.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html#cgKML_ScreenOverlay::GetProperty", "cgKML_ScreenOverlay::GetProperty", 'routine in <a href="coyote/cgkml_screenoverlay__define.html">cgkml_screenoverlay__define.pro</a>', "cgkml_screenoverlay__define.pro", "", "cgKML_ScreenOverlay::GetProperty", " The purpose of this method is to return object properties.   ", "OVERLAY_XY         This keyword specifies a point [x,y] in the image overlay that is mapped to the          screen coordinate Screen_XY. The location of the point is specified by the values          in Overlay_Units_X and 'Overlay_Units_Y.  OVERLAY_UNIT_X         Three values are possible: (1)  fraction  indicates that the X value is a fraction of the image;          (2)  pixels  indicates the the X value is in pixels; and (3)  insetPixels  indicates the X          value is an indent from the right edge of the image.  OVERLAY_UNIT_Y         Three values are possible: (1)  fraction  indicates that the Y value is a fraction of the image;          (2)  pixels  indicates the the Y value is in pixels; and (3)  insetPixels  indicates the Y          value is an indent from the top edge of the image.  SCREEN_XY         This keyword specifies a point [x,y] relative to the screen origin that the overlay image          is mapped to. The location of the point is specified by the values in XUnits and 'YUnits.  SCREEN_UNIT_X         Three values are possible: (1)  fraction  indicates that the X value is a fraction of the image;          (2)  pixels  indicates the the X value is in pixels; and (3)  insetPixels  indicates the X          value is an indent from the right edge of the image.  SCREEN_UNIT_Y         Three values are possible: (1)  fraction  indicates that the Y value is a fraction of the image;          (2)  pixels  indicates the the Y value is in pixels; and (3)  insetPixels  indicates the Y          value is an indent from the top edge of the image.  SIZE_XY         This keyword specifies the size of the image for the screen overlay as follows. A -1          indicates to use the native dimensions of the image. A 0 indicates that the aspect ratio          of the image should be preserved. Any other value sets the output dimension of the image,          according to the  unit  values.  SIZE_UNIT_X         Three values are possible: (1)  fraction  indicates that the X value is a fraction of the image;          (2)  pixels  indicates the the X value is in pixels; and (3)  insetPixels  indicates the X          value is an indent from the right edge of the image.  SIZE_UNIT_Y         Three values are possible: (1)  fraction  indicates that the Y value is a fraction of the image;          (2)  pixels  indicates the the Y value is in pixels; and (3)  insetPixels  indicates the Y          value is an indent from the top edge of the image.  ROTATION         This keyword indicates the angle of rotation of the screen overlay in degrees counterclockwise          from North. A value from -180 to 180.  _REF_EXTRA         Any keywords for the superclass objects are allowed.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html#cgKML_ScreenOverlay::SetProperty", "cgKML_ScreenOverlay::SetProperty", 'routine in <a href="coyote/cgkml_screenoverlay__define.html">cgkml_screenoverlay__define.pro</a>', "cgkml_screenoverlay__define.pro", "", "cgKML_ScreenOverlay::SetProperty", " The purpose of this method is to set object properties.   ", "OVERLAY_XY         This keyword specifies a point [x,y] in the image overlay that is mapped to the          screen coordinate Screen_XY. The location of the point is specified by the values          in Overlay_Units_X and 'Overlay_Units_Y.  OVERLAY_UNIT_X         Three values are possible: (1)  fraction  indicates that the X value is a fraction of the image;          (2)  pixels  indicates the the X value is in pixels; and (3)  insetPixels  indicates the X          value is an indent from the right edge of the image.  OVERLAY_UNIT_Y         Three values are possible: (1)  fraction  indicates that the Y value is a fraction of the image;          (2)  pixels  indicates the the Y value is in pixels; and (3)  insetPixels  indicates the Y          value is an indent from the top edge of the image.  SCREEN_XY         This keyword specifies a point [x,y] relative to the screen origin that the overlay image          is mapped to. The location of the point is specified by the values in XUnits and 'YUnits.  SCREEN_UNIT_X         Three values are possible: (1)  fraction  indicates that the X value is a fraction of the image;          (2)  pixels  indicates the the X value is in pixels; and (3)  insetPixels  indicates the X          value is an indent from the right edge of the image.  SCREEN_UNIT_Y         Three values are possible: (1)  fraction  indicates that the Y value is a fraction of the image;          (2)  pixels  indicates the the Y value is in pixels; and (3)  insetPixels  indicates the Y          value is an indent from the top edge of the image.  SIZE_XY         This keyword specifies the size of the image for the screen overlay as follows. A -1          indicates to use the native dimensions of the image. A 0 indicates that the aspect ratio          of the image should be preserved. Any other value sets the output dimension of the image,          according to the  unit  values.  SIZE_UNIT_X         Three values are possible: (1)  fraction  indicates that the X value is a fraction of the image;          (2)  pixels  indicates the the X value is in pixels; and (3)  insetPixels  indicates the X          value is an indent from the right edge of the image.  SIZE_UNIT_Y         Three values are possible: (1)  fraction  indicates that the Y value is a fraction of the image;          (2)  pixels  indicates the the Y value is in pixels; and (3)  insetPixels  indicates the Y          value is an indent from the top edge of the image.  ROTATION         This keyword indicates the angle of rotation of the screen overlay in degrees counterclockwise          from North. A value from -180 to 180.  _REF_EXTRA         Any keywords for the superclass objects are allowed.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html#cgKML_ScreenOverlay::CLEANUP", "cgKML_ScreenOverlay::CLEANUP", 'routine in <a href="coyote/cgkml_screenoverlay__define.html">cgkml_screenoverlay__define.pro</a>', "cgkml_screenoverlay__define.pro", "", "cgKML_ScreenOverlay::CLEANUP", " The purpose of this method is to destroy anything we created that may leak  memory or need to be released from use.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgkml_screenoverlay__define.html#cgKML_ScreenOverlay__Define", "cgKML_ScreenOverlay__Define", 'routine in <a href="coyote/cgkml_screenoverlay__define.html">cgkml_screenoverlay__define.pro</a>', "cgkml_screenoverlay__define.pro", "", "cgKML_ScreenOverlay__Define", " The cgKML_ScreenOverlay class definition module. It is a container object and  represents part of the KML file hierarchy.   ", "class         The class definition returned as a structure variable. Occassionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cglayout.html", "cglayout.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cglayout.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cglayout.html#cgLayout", "cgLayout", 'routine in <a href="coyote/cglayout.html">cglayout.pro</a>', "cglayout.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgLayout", " The purpose of this program is to return the normalized position coordinates for  a line plot, contour plot, or image plot with a specific  layout  in the current  graphics window. A  layout  has a specified grid of columns and rows organized  inside a graphics display window. This is similar to the positions calculated by  !P.Multi, although a great deal more flexible. Of course, with additional flexibility  and power comes more responsibility. You will be required to use the NoErase keyword  correctly and you will be responsible for setting the character size on your plots.  These jobs are normally handled by !P.Multi. Some users will find this liberating, some  will find it a pain in the keister. There is always !P.Multi to go back to.   A grid position is a combination of the number of columns and rows desired, plus  the application of inside and outside margins, as well as a desired aspect ratio.  Margins are specified in units of one-third the !D.X_PX_CM value to be device independent.  The outside margins locate the grid inside the graphics display window.  (These are equivalent to !X.OMargin and !Y.OMargin system variable when displaying  a grid with !P.Multi, for example.) Inside margins use the same units, but are  used to modify the initial grid positions in the window. (These are equivalent  to using the XMargin and YMargin keywords on a plot command.) For example, inside margins  might be used to leave room inside a larger position for color bars or other annotations  you wish to put on a graphics display. The aspect ratio modifies the grid position  after the outside and inside margins have been applied to create the final grid position,  which will be centered in its initial grid position.   ", "ASPECT         This kewyord allows you to specify a specific aspect ratio for the return          positions. The aspect ratio is calculated as YDimension/XDimension. So, for          example, if you wish the positions to be twice as wide as they are high, you          would set the Aspect keyword to 1.0/2.0 or 0.5. If you wish your positions to          have a square aspect ratio, you would set the Aspect keyword to 1.0.   IXMARGIN         This keyword is a two-element vector that sets the right and left, respectively, inside          X margin for the grid position. Units are multiples of !D.X_CH_SIZE. Default = [0,0].   IYMARGIN         This keyword is a two-element vector that sets the bottom and top, respectively, inside          Y margin for the grid position. Units are multiples of !D.Y_CH_SIZE. Default = [0,0].   OXMARGIN         This keyword is a two-element vector that sets the right and left, respectively, inside          X margin for the grid position. The default OXMargins are suitable for displaying line          plots. If you are displaying image plots, you may wish to make the OXMargins the same on          both sides of the graphics display window (e.g, OXMargin=[5,5]). Units are multiples of          !D.X_CH_SIZE. Default = [10,4].   OYMARGIN         This keyword is a two-element vector that sets the bottom and top, respectively, inside          Y margin for the grid position. The default OYMargins are suitable for displaying line          plots. There is a little additional room at the top of the plot in the defaults for adding          a title to a multiple plot set-up. Units are multiples of !D.Y_CH_SIZE. Default = [6,8].   XGAP         This keywords sets the distance between plots in the X dimension. Units are multiples          of !D.X_CH_SIZE.   YGAP         This keywords sets the distance between plots in the Y dimension. Units are multiples          of !D.Y_CH_SIZE.   layout         This parameter sets up the grid layout for the current graphics window. A grid          is organized by columns and rows, with the first grid position located in the upper-left          corner of the current graphics display window and proceeding in row order. This parameter          is either a two-element vector, giving the number of columns and number of rows,          respectively (e.g., [ncols,nrows]), or it is a three-element vector, giving, in addition, the          specific grid location for which a position is required (e.g, [ncols, nrows, gridPosition]).          Grid positions start at 1 with the first grid in the upper left corner of the graphics display          window and proceed in row order, sequentually, until the last grid position, which is equal          to the number of columns times the number of rows.   ", "Graphics Utilities", "    Change History: <span class= code-output >  Written, 19 December 2012 by David W. Fanning, from suggestions from Matthew Argall.</span> <span class= code-output >  Changed the notion of one  unit  from the values of !D.X_CH_SIZE and !D.Y_CH_SIZE to</span> <span class= code-output >      1/3 of the value of !D.X_PX_CM. This gives me more consistent measurements on the</span> <span class= code-output >      display and in a PostScript file. 12 Feb 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Here is how to use this program to display line plots: <span class= code-output >   cgDisplay, WID=0</span> <span class= code-output >   pos = cgLayout([2,2])</span> <span class= code-output >   FOR j=0,3 DO BEGIN</span> <span class= code-output >     cgPlot, cgDemoData(17), NoErase=j NE 0, Position=pos[*,j], Title='Plot ' + StrTrim(j+1,2)</span> <span class= code-output >   ENDFOR</span> <span class= code-output >   cgText, 0.5, 0.925, /Normal, 'Example Plot Layout', Alignment=0.5, Charsize=cgDefCharsize()*1.25</span>     Here is how to use this program to display contour plots or images with colorbars: <span class= code-output >   cgDisplay, WID=1</span> <span class= code-output >   cgLoadCT, 22, /Brewer, /Reverse</span> <span class= code-output >   pos = cgLayout([2,2], OXMargin=[5,5], OYMargin=[5,12], XGap=3, YGap=10)</span> <span class= code-output >   FOR j=0,3 DO BEGIN</span> <span class= code-output >     p = pos[*,j]</span> <span class= code-output >     cgImage, cgDemoData(18), NoErase=j NE 0, Position=p</span> <span class= code-output >     cgColorBar, position=[p[0], p[3]+0.05, p[2], p[3]+0.1]</span> <span class= code-output >   ENDFOR</span> <span class= code-output >   cgText, 0.5, 0.925, /Normal, 'Example Image Layout', Alignment=0.5, Charsize=cgDefCharsize()*1.25</span>            Here is how to display square plots in a PostScript file: <span class= code-output >   PS_Start, 'cglayout_example.ps'</span> <span class= code-output >   cgDisplay</span> <span class= code-output >   pos = cgLayout([2,2], Aspect=1.0)</span> <span class= code-output >   FOR j=0,3 DO BEGIN</span> <span class= code-output >     cgPlot, cgDemoData(17), NoErase=j NE 0, Position=pos[*,j], Title='Plot ' + StrTrim(j+1,2)</span> <span class= code-output >   ENDFOR</span> <span class= code-output >   cgText, 0.5, 0.925, /Normal, 'Example Plot Layout', Alignment=0.5, Charsize=cgDefCharsize()*1.25</span> <span class= code-output >   PS_End</span>     Here is how to draw the third plot in a 3 column by 2 row layout: <span class= code-output >   cgDisplay, 800, 600, WID=3</span> <span class= code-output >   cgPlot, cgDemoData(17), Position=cgLayout([3,2,3])</span>      This function returns the normalized position coordinates for a particular     location in a grid of locations (if the layout parameter is a three-element array),     or a 4-by-(ncols*nrows) array of grid positions with one position for each location     in the ncols by nrows grid of locations (if the layout parameter is a two-element array).     The return variable is suitable for passing to the POSITION keyword of an IDL graphics     command (e.g., cgPlot, cgContour, cgImage, etc.). The grid positions are organized in     row order, starting with the grid location in the upper-left of the graphihcs display window.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cglegenditem__define.html", "cglegenditem__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cglegenditem__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   The purpose of this program is to create a simple legend object that can be drawn on    a data plot. Perhaps later such objects can be collected into a more sophisticated     legend  object.   ", "", "Graphics", "     Change History: <span class= code-output >  Written 18 July 2012. DWF.</span> <span class= code-output >  Adapted to accept multiple legend elements. Legend elements are stacked vertically.</span> <span class= code-output >     Each legend element can be given its own title, color, symbol symbol color, and</span> <span class= code-output >     linestyle. Legend elements are offset  by 1.3*!D.Y_CH_Size/!D.YSize.  A single</span> <span class= code-output >     symbol can now be drawn in the center of the line instead of one at each end</span> <span class= code-output >     point with the CENTER_SYM keyword. 04/25/2013, Matthew Argall.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.       A plot with a simple legend: <span class= code-output >  cgDisplay, 800, 450</span> <span class= code-output >  legendItem1 = Obj_New('cgLegendItem', SymColor='red7', PSym=6, Symsize=1.5, $</span> <span class= code-output >      Location=[0.825, 0.875], Title='May 27', /Hardware, Length=0.05)</span> <span class= code-output >  legendItem2 = Obj_New('cgLegendItem', SymColor='blu7', PSym=15, Symsize=1.5, $</span> <span class= code-output >      Location=[0.825, 0.835], Title='June 27', /Hardware, Length=0.05)</span> <span class= code-output >  cgPlot, cgDemoData(17), PSym=-6, SymColor='red7', Position=[0.15, 0.15, 0.8, 0.9], $</span> <span class= code-output >     Legends=[legendItem1,legendItem2], Label='First Experiment'</span> <span class= code-output >  cgOPlot, cgDemoData(17), PSym=-15, SymColor='blu7'</span> <span class= code-output >  Obj_Destroy, [legendItem1,legendItem2]</span>     Same as the previous example, but with a single legend object and with the symbol     centered on the line: <span class= code-output >  cgDisplay, 800, 450</span> <span class= code-output >  legendItem = Obj_New('cgLegendItem', SymColor=['red7', 'blu7'], $</span> <span class= code-output >      PSym=[6,15], Symsize=1.5, Location=[0.825, 0.875], Title=['May 27', 'Jun 27'], $</span> <span class= code-output >      /CENTER_SYM, /Hardware, Length=0.05)</span> <span class= code-output >  cgPlot, cgDemoData(17), PSym=-6, SymColor='red7', Position=[0.15, 0.15, 0.8, 0.9], $</span> <span class= code-output >     Legends=legendItem, Label='First Experiment'</span> <span class= code-output >  cgOPlot, cgDemoData(17), PSym=-15, SymColor='blu7'</span> <span class= code-output >  Obj_Destroy, legendItem</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cglegenditem__define.html#cgLegendItem::Draw", "cgLegendItem::Draw", 'routine in <a href="coyote/cglegenditem__define.html">cglegenditem__define.pro</a>', "cglegenditem__define.pro", "", "cgLegendItem::Draw", " This method draws the legend item in a graphics window.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cglegenditem__define.html#cgLegendItem::GetProperty", "cgLegendItem::GetProperty", 'routine in <a href="coyote/cglegenditem__define.html">cglegenditem__define.pro</a>', "cglegenditem__define.pro", "", "cgLegendItem::GetProperty", " This method obtains properties from the object.   ", "CENTER_SYM        This keyword is set if symbols are placed in the center of the line.  CHARSIZE        The character size for the legend text. Uses cgDefCharsize by default.         Ignored if using hardware fonts on the display.  COLOR        The name of the data color. This is the color of each data line.  HARDWARE        Set this keyword if you want to output the legend text in a hardware font.  LENGTH        The length of the line connecting symbols in the legend, in normalized         coordinates (0 to 1 in the graphics window). Set this equal to 0.0 if         you wish to only plot symbols in the legend.  LINESTYLE        The line style for drawing each line.  LOCATION        The location of the upper-left corner of the legend item,         in normalized coordinates (0 to 1 in the graphics window).  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46.  SYMCOLOR        The name of the symbol color. By default, the same as the COLOR keyword.  SYMSIZE        The symbol size.  SYMTHICK        The thickness of the symbol.  TCOLOR        The Title color. Set by default to Color.  THICK        The thickness of the line.  TITLE        The  title  or text for each legend item.  TT_FONT        The name of a true-type font to use for the legend text.  VISIBLE        Set this keyword to determine in the line should be drawn (visible=1), or         if the line should not be drawn (visible=0).  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cglegenditem__define.html#cgLegendItem::SetProperty", "cgLegendItem::SetProperty", 'routine in <a href="coyote/cglegenditem__define.html">cglegenditem__define.pro</a>', "cglegenditem__define.pro", "", "cgLegendItem::SetProperty", " This method sets properties of the object.   ", "CENTER_SYM        Set this keyword to place a single symbol in the center of the line.  CHARSIZE        The character size for the legend text. Uses cgDefCharsize by default.         Ignored if using hardware fonts on the display.  COLOR        The name of the data color. This is the color of each data line.  HARDWARE        Set this keyword if you want to output the legend text in a hardware font.  LENGTH        The length of the line connecting symbols in the legend, in normalized         coordinates (0 to 1 in the graphics window). Set this equal to 0.0 if         you wish to only plot symbols in the legend.  LINESTYLE        The line style for drawing each line.  LOCATION        The location of the upper-left corner of the legend item,         in normalized coordinates (0 to 1 in the graphics window).         The default is [0.1, 0.95].  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46.  SYMCOLOR        The name of the symbol color. By default, the same as the COLOR keyword.  SYMSIZE        The symbol size.  SYMTHICK        The thickness of the symbol.  TCOLOR        The Title color. Set by default to Color.  THICK        The thickness of the line.  TITLE        The  title  or text for each legend item.  TT_FONT        The name of a true-type font to use for the legend text.  VISIBLE        Set this keyword to determine in the line should be drawn (visible=1), or         if the line should not be drawn (visible=0).  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cglegenditem__define.html#cgLegendItem::CLEANUP", "cgLegendItem::CLEANUP", 'routine in <a href="coyote/cglegenditem__define.html">cglegenditem__define.pro</a>', "cglegenditem__define.pro", "", "cgLegendItem::CLEANUP", " This method destroys anything the object uses that retains memory space.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cglegenditem__define.html#cgLegendItem::INIT", "cgLegendItem::INIT", 'routine in <a href="coyote/cglegenditem__define.html">cglegenditem__define.pro</a>', "cglegenditem__define.pro", "", "cgLegendItem::INIT", " This method creates an instance of the object.   ", "CENTER_SYM        Set this keyword to place a single symbol in the center of the line. The default         is to draw a symbol at each endpoint of the line.  CHARSIZE        The character size for the legend text. Uses cgDefCharsize by default.         Ignored if using hardware fonts on the display.  COLOR        The name of the data color. This is the color of each data line.  HARDWARE        Set this keyword if you want to output the legend text in a hardware font.  LENGTH        The length of the line connecting symbols in the legend, in normalized         coordinates (0 to 1 in the graphics window). Set this equal to 0.0 if         you wish to only plot symbols in the legend.  LINESTYLE        The line style for drawing each line.  LOCATION        The location of the upper-left corner of the legend item,         in normalized coordinates (0 to 1 in the graphics window).         The default is [0.1, 0.95].  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46.  SYMCOLOR        The name of the symbol color. By default, the same as the COLOR keyword.  SYMSIZE        The symbol size.  SYMTHICK        The thickness of the symbol.  TCOLOR        The Title color. Set by default to Color.  THICK        The thickness of the line.  TITLE        The  title  or text for each legend item.  TT_FONT        The name of a true-type font to use for the legend text.  VISIBLE        Set this keyword to determine in the line should be drawn (visible=1), or         if the line should not be drawn (visible=0).  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cglegenditem__define.html#cgLegendItem__Define", "cgLegendItem__Define", 'routine in <a href="coyote/cglegenditem__define.html">cglegenditem__define.pro</a>', "cglegenditem__define.pro", "", "cgLegendItem__Define", " The class definition module for the object.   ", "class        The class definition as a structure variable. Occasionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgloadct.html", "cgloadct.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgloadct.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgloadct.html#cgLoadCT", "cgLoadCT", 'routine in <a href="coyote/cgloadct.html">cgloadct.pro</a>', "cgloadct.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgLoadCT", "   This is a drop-in replacement for the IDL-supplied program LOADCT.    The same keywords used with LOADCT apply. In addition, a REVERSE keyword    is supplied to reverse the color table vectors, and a CLIP keyword is    supplied to be able to clip the normal LOADCT color table. This is    extremely useful if you wish to use a reduced number of colors. All color    table loading is handled silently. And Brewer color tables can be loaded.   ", "ADDCMD       Set this keyword to add the command to the resizeable graphics window cgWindow.  BREWER       Set this keyword if you wish to use the Brewer Colors, as implemented in the Coyote        Library file, fsc_brewer.tbl. This program will look first in the $IDL_DIR/resource/colors        directory for the color table file, and failing to find it there will look in the same        directory that the source code of this program is located, then in the IDL path.        Finally, if it still can't find the file, it will ask you to locate it.        If you can't find it, the program will simply return without loading a color table.  BOTTOM       The lowest color table index. The colors in the color table start loading here.  CLIP       A one- or two-element integer array that indicates how to clip the original color        table vectors. This is useful if you are restricting the number of colors, and do        not which to have black or white (the usual color table end members) in the        loaded color table. CLIP[0] is the lower bound. (A scalar value of CLIP is treated as        CLIP[0].) CLIP[1] is the upper bound. For example, to load a blue-temperature color bar        with only blue colors, you might type this:     <span class= code-prompt >IDL&gt;</span> cgLoadCT, 1, CLIP=[110,240]     <span class= code-prompt >IDL&gt;</span> CINDEX  <span class= code-output >Or, alternatively, if you wanted to include white at the upper end of the color table:</span>    <span class= code-prompt >IDL&gt;</span> cgLoadCT, 1, CLIP=110    <span class= code-prompt >IDL&gt;</span> CINDEX  RGB_TABLE       If this keyword is set to a named variable, the color table is returned as an        [NCOLORS,3] array and no colors are loaded in the display.  FILENAME       The name of a color table file to open. By default colors1.tbl in the IDL        resource directory.  GET_NAMES       If set to a named variable, the names of the color tables are returned        and no colors are loaded in the display. Note that RGB_TABLE cannot be        used concurrently with GET_NAMES. Use two separate calls if you want both.  NCOLORS       The number of colors to be loaded into the color table.  REVERSE       If this keyword is set, the color table vectors are reversed.  ROW       Set this keyword to indicate you are getting the RGB_TABLE vectors        for use in the IDL's object graphics routines. Whereas TVLCT expects color        tables to be 256x3 (column vectors), the object graphics routines expect them        to be 3x256 (row vectors). Setting this keyword will transpose the vectors        before they are returned.  SILENT       This keyword is provided ONLY for compatibility with LOADCT. All color table        manipulations are handled silently.  WINDOW       Set this keyword to add the command to an cgWindow application.  WINID       The window index number of an cgWindow to receive the color vectors.        If this parameter is absent, the color table vectors are sent to the        current cgWindow.   table         Optional color table number to load. Integer from 0 to the number of          tables in the color table file, minus 1.   ", "Graphics", "    Change History: <span class= code-output >  Written by David W. Fanning, 30 October 2007.</span> <span class= code-output >  Added ability to read Brewer Color Table file, if available, with BREWER keyword. 14 May 2008. DWF.</span> <span class= code-output >  Small change in the way the program looks for the Brewer file. 8 July 2008. DWF.</span> <span class= code-output >  Changed the way the program looks for the Brewer color table file. Now use</span> <span class= code-output >     the Coyote Library routine FIND_RESOURCE_FILE to look for the file. 29 June 2010. DWF.</span> <span class= code-output >  Renamed Colorbar procedure to cgColorbar to avoid conflict with IDL 8 Colorbar function.</span> <span class= code-output >     26 September 2010. DWF.</span> <span class= code-output >  Added ROW keyword to transpose color table vectors for new graphics functions</span> <span class= code-output >     in IDL 8. 23 Nov 2010. DWF.</span> <span class= code-output >  Added WINDOW and WINID keywords. 26 January 2011. DWF.</span> <span class= code-output >  Added ADDCMD keyword. 29 Jan 2011. DWF.</span> <span class= code-output >  Program delevopment ended and code transferred to cgLoadCT as of 4 Feb 2011. DWF.</span> <span class= code-output >  Added missing ADDCMD keyword. 28 April 2011. DWF.</span> <span class= code-output >  Fixed a problem that occurred when the BOTTOM keyword was used in conjuntion with</span> <span class= code-output >     the WINDOW keyword, resulting in incorrect colors in cgWindow programs. 28 April 2011. DWF.</span> <span class= code-output >  Added CubeHelix color table from code written by James R. A. Davenport. 5 Nov 2012. DWF.</span> <span class= code-output >  Made sure NCOLORS default takes BOTTOM value into account. 18 June 2013. DWF.</span>       Copyright (c) 2007-2012, Fanning Software Consulting, Inc.      Suppose you wanted to create a color table that displayed negative values with     red-temperature values and positive values with blue-temperature values, and you     would like the red-temperature values to be reversed in the color table (so dark     colors adjoin in the color table and indicate values near zero). You could do this: <span class= code-output >   cgLoadCT, 0</span> <span class= code-output >   cgLoadCT, 3, /REVERSE, CLIP=[32,240], BOTTOM=1, NCOLORS=10</span> <span class= code-output >   cgLoadCT, 1, CLIP=[64, 245], BOTTOM=11, NCOLORS=10</span> <span class= code-output >   cgColorbar, NCOLORS=20, BOTTOM=1, DIV=10, RANGE=[-10,10]</span>     Here is an example that shows the difference between LOADCT and cgLoadCT: <span class= code-output >   ERASE, COLOR=cgCOLOR('Charcoal)</span> <span class= code-output >   LoadCT, 5, NCOLORS=8</span> <span class= code-output >   cgColorbar, NCOLORS=8, DIVISIONS=8, POSITION=[0.1, 0.65, 0.9, 0.75], XMINOR=0, XTICKLEN=1</span> <span class= code-output >   cgLoadCT, 5, NCOLORS=8, CLIP=[16, 240]</span> <span class= code-output >   cgColorbar, NCOLORS=8, DIVISIONS=8, POSITION=[0.1, 0.35, 0.9, 0.45], XMINOR=0, XTICKLEN=1</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgloggen.html", "cgloggen.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgloggen.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgloggen.html#cgLogGen", "cgLogGen", 'routine in <a href="coyote/cgloggen.html">cgloggen.pro</a>', "cgloggen.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgLogGen", " This function creates an evenly spaced vector of points in log space.   ", "Double         Set this keyword to return the values as double precision values.          Otherwise, floating point values are returned.  Finish         The ending value of the vector. The output values are evenly spaced          between Start and Finish. This value must be a positive number.  Start         The starting value of the vector. The output values are evenly spaced          between Start and Finish. This value must be a positive number.   numpts       The number of points desired in the output vector.   ", "Math Utilities", "     Change History: <span class= code-output >  Written, 17 January 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      To create 10 values evenly spaced between 5 and 15: <span class= code-output >  points = cgLogGen(10, Start=5, Finish=150)</span> <span class= code-output >  cgPlot, points, PSym=2, /YLog</span>      A vector of values, evenly spaced along a log axis.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgmap__define.html", "cgmap__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmap__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >David W. Fanning</span> <span class= code-output >1645 Sheely Drive</span> <span class= code-output >Fort Collins, CO 80526 USA</span> <span class= code-output >Phone: 970-221-0438</span> <span class= code-output >E-mail: david@idlcoyote.com</span> <span class= code-output >Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   Provides an easy way to set up a map projection coordinate space using GCTP map    projections normally accessed via Map_Proj_Init. Allows an unlimited number of map    overlays, and can provide a fresh map structure on demand, eliminating the problem    of ephemerial map structures that plaqued Map_Proj_Init until IDL 8.x. This program    is basically a wrapper for Map_Proj_Init, with additional features that make it    superiour for working with map projections in IDL.        Only GCTP projections are allowed. If you wish to use projections normally      set up with Map_Set, use the comparable cgMap_Set command.   ", "", "Graphics Map Projections", "     Change History: <span class= code-output >  Brought over to the Coyote Library from a similar routine in the Catalyst Library.</span> <span class= code-output >     Updated to account for the bug that creates incorrect result in UTM projections</span> <span class= code-output >     when using the WGS84 ellipsoid. The Wallbeck ellipsoid is substituted for the</span> <span class= code-output >     WGS84 ellipsoid in this instance. David W. Fanning, 7 November 2011.</span> <span class= code-output >  Added IS_CYLINDRICAL method to solve a problem with grid labeling and drawing</span> <span class= code-output >     of grid lines. 16 Dec 2011. DWF.</span> <span class= code-output >  Added ERASE method to erase the display. 28 Dec 2011. DWF.</span> <span class= code-output >  Added check for identical range values in FORWARD method. 30 Dec 2011. DWF.</span> <span class= code-output >  I am convinced that the map structure returned by Map_Proj_Init, when there</span> <span class= code-output >     is a LIMIT used in the call contains a uv_box with incorrect latitude values.</span> <span class= code-output >     This is important because other routines (e.g., cgMapGrid) depend on these values.</span> <span class= code-output >     I've created a fix wherein I fixed the uv_box latitude values to correspond</span> <span class= code-output >     to the LIMIT of the map projection. 6 April 2012. DWF.</span> <span class= code-output >  Set the default CENTER_LATITUDE and CENTER_LONGITUDE to 0.0. 9 April 2012. DWF.</span> <span class= code-output >  Added NOFORWARDFIX keyword to allow skipping of the  fix  in the FORWARD method,</span> <span class= code-output >     as sometimes this is not needed or required. 29 June 2012. DWF.</span> <span class= code-output >  Fixed a problem that required having to set the UTM zone in addition to the latitude</span> <span class= code-output >     and longitude in a UTM projection. Now using cgUTMZone to determine the proper</span> <span class= code-output >     zone. 8 Aug 2012. DWF.</span> <span class= code-output >  Added a BOUNDARY keyword to the GetProperty method. 16 Aug 2012. DWF.</span> <span class= code-output >  Modified to allow Hotine Oblique Mercator map projections to work correctly. 7 Sept 2012. DWF.</span> <span class= code-output >  Additional changes to better handle IDL 8.2 map projections. 12 Sept 2012. DWF.</span> <span class= code-output >  Added LATLONBOX keyword to the GetProperty method to allow me to obtain</span> <span class= code-output >      the map boundary in the Google Map preferred notation of [north, south, east, west]</span> <span class= code-output >      in degrees. 30 Oct 2012.</span> <span class= code-output >  I was calculating the default X and Y range incorrectly for non-UTM map projections.</span> <span class= code-output >      I have now gone back to my original method of using the UV_BOX of the map structure</span> <span class= code-output >      to do this. However, there is still a problem with the UV_BOX when the center latitude</span> <span class= code-output >      is not zero. I still attempt to fix this problem in the code (SetMapProjection method). 3 Jan 2012. DWF.</span> <span class= code-output >  I added ASPECT and ISOTROPIC keywords to allow the setting of the aspect ratio of the map. 3 Jan 2012. DWF.</span> <span class= code-output >  Added zone to the information returned with MapInfo method if projection is UTM. 25 April 2013. DWF.</span> <span class= code-output >  The map aspect was disappearing because Total(!P.Multi) can occasionally be LT 0! Fixed. 3 July 2013. DWF.</span>       Copyright (c) 2011-2013, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::INIT", "cgMap::INIT", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::INIT", "   The initialization method for the cgMap object.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. The DRAW method of the object is called in cgWindow.  ASPECT        Set this keyword to a floating point ratio that represents the aspect ratio         (ysize/xsize) of the resulting map projection. Note that Aspect cannot be         used when plotting with !P.MULTI. Consider using cgLayout instead for multiple         plots.  BACKGROUND        The name of the background color. Used only if the map object erases         the display when it draws its contents.  BCOLOR        The name of the color to draw box axes with. Requires BOX_AXES be set.  BOX_AXES        Set this keyword to draw a box-style grid axes around the map. Applies         only if creating a mapGrid object.  CCOLOR        The name of the drawing color for the MapContinents object if this is requested.  CENTER_LATITUDE        The center latitude of the map projection.  CENTER_LONGITUDE        The center longitude of the map projection.  COLOR        The name of the drawing color for the object. Passed along to the mapGrid         and MapContinents object if these are requested.  CONTINENTS        Set this keyword if you wish to create an overlay object of continental outlines         that will be rendered when the draw method is called.  DATUM        This keyword is being depreciated in favor of the keyword ELLIPSOID,         corresponding to changes to Map_Proj_Init initiated in IDL 7.  DRAW        Set this keyword if you wish to immediately call the DRAW method after the         object has been completely initialized.  EASTINGELLIPSOID        Set this to the name or index number of the ellopsoid or datum you wish to use         for the map projection. The value is passed directly to Map_Proj_Init. The         default is a sphere for those projections that only support a sphere, otherwise         a Clark projection is used to conform to Map_Proj_Init defaults.  ERASE        Set this keyword if you wish to have the object erase the current graphics display         before drawing its content in the DRAW method. The graphics display will be erased         in the background color.  FILL        Set this keyword to display filled continents, if the keyword CONTINENTS is set.  GCOLOR        The name of the drawing color for the MapGrid object if this is requested.  GRID        Set this keyword if you wish to create an overlay object of map grid lines         that will be rendered when the draw method is called.  HIRES        Set this keyword if you wish to use high resolution continental outlines.         Passed to the MapContinents object if one is requested.  ISOTROPIC        Set this keyword to set the Aspect keyword to a value that correctly represents         the same map unit length in both the X and Y directions. In other words, a map         unit measured in the X direction is the same physical length as a map unit measured         in the Y direction.  LAND_COLOR        The name of the drawing color for filled continents, if the keyword CONTINENTS         is set. Passed directly to the cgMapContinents object.  LATLON_RANGES        Normally the XRANGE and YRANGE keywords are set in terms of projected meters. If         this keyword is set, then the values of XRANGE and YRANGE are assumed to be in longitude         and latitude values, respectively, and will be converted to projected meters prior to         being stored in the object.  LCOLOR        Set this to the name of the label color to use in labeling grid lines.         By default, the same as COLOR, or if BOX_AXIS is set, then same as BCOLOR.  LIMIT        The normal LIMIT keyword to Map_Proj_Init, specifying the limit of the map         projection in terms of latitude and longitude. Normally, Limit is used when using         Map_Proj_Init. Most work is done by specifying the projected XY rectangular         coordinate system with the keywords XRANGE and YRANGE.  NAME        Use this keyword to name the object. Names are often used to select objects in         program code.  NOBORDER        If this keyword is set, the customary border than surrounds the map projection is         not drawn.  NOFORWARDFIX        There is, I believe, a bug in MAP_PROJ_FORWARD that renders longitude values         incorrectly in projected meter space. This is evidenced by MAP_GRID not producing         the correct longitude lines in map coordinate systems set up in projected XY meters.         In the FORWARD method I correct for this. But, this correction is not always needed         or wanted. This property of the object allows me to turn that correction on or off,         as needed. Normally, the fix is provided, unless this keyword is set to 1.  NORTHINGONIMAGE        If this keyword is set, the position of the map projection in the graphics window         is obtained from the last image displayed with cgImage. This makes it extremely         easy to display an image and immediately set up a map projection space that will         allow you to annotate the image using map locations.  POSITION        The normalized position of the map projection space in the graphics window.         The default is [0.075, 0.075, 0.925, 0.925]  RADIANS        Set this keyword to indicate latitude and longitude values are in radians rather         than degrees.  SEMIMAJOR_AXIS        The length of the semimajor axis of the ellipsoid in meters. Normally calculated         from the ELLIPSOID keyword values.  SEMIMINOR_AXIS        The length of the semiminor axis of the ellipsoid in meters. Normally calculated         from the ELLIPSOID keyword values.  SPHERE_RADIUS        The length of the ellipsoidal sphere in meters. Normally calculated from the         ELLIPSOID keyword values.  TITLE        The title of the map projection display.  WINDOW        If this keyword is set, the object replaces any commands in a current         cgWindow or it opens a new cgWindow and adds itself to it.  XRANGE        Set this keyword to the X axis range desired in the data coordinate system.         Normally expressed in XY projected meter space, unless the LATLON_RANGES         keyword is set. The default is mapStruct.uv_box[[0,2]].  YRANGE         Set this keyword to the X axis range desired in the data coordinate system.          Normally expressed in XY projected meter space, unless the LATLON_RANGES          keyword is set. The default is mapStruct.uv_box[[1,3]].  UVALUE        A storage space for storing any kind of IDL variable of importance to the user.  ZONE         The zone (normally in UTM projections) of the map projection. If not given and needed,          calculated from the CENTER_LATITUDE and CENTER_LONGITUDE keyword values.  _EXTRA         Other keywords accepted by the MAP_PROJ_INIT command are allowed and are passed          directly to the MAP_PROJ_INIT program.   map_projection        The name or index number of the map projection desired. Passed directly         to Map_Proj_Init as the map projection value. Only GCTP projections are         allowed. If you wish to use projections normally set up with Map_Set, use         the comparable cgMap_Set command.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::AddCmd", "cgMap::AddCmd", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::AddCmd", "   Adds the object as a command (the DRAW method is called) in a cgWindow    resizeable graphics window. If there is no current cgWindow, one is    created.   ", "REPLACE        If this keyword is set, object DRAW method replaces any commands in the         current graphics window.  METHOD        The object method to add to the cgWindow.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::AddOverlay", "cgMap::AddOverlay", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::AddOverlay", "   Adds the an overlay object into the overlay container of the object.    Overlay objects are drawn (by calling their DRAW methods) after the    map coordinate space is set up in the DRAW method of the object. They    are drawn in the order they appear in the object.   ", "overLayObject       The object that will draw a graphic overlay in the map projection space        created by this map object. Typically, overlay objects contain map grid        lines (cgMapGrid object), continental outlines (cgMapContinents object), or        other types of graphical overlays. The only requirement of an overlay        object is that is have a DRAW method and that it draw into a map        projection space. This may be an object array.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::Advance", "cgMap::Advance", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::Advance", "   Advances the map projection position to the next position of a multiple    plot (using !P.MULTI). Does not need to be called directly, as the object    will call this method as needed.   ", "DRAW        Set this keyword to immediately call the draw method after the position         has been advanced.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::Draw", "cgMap::Draw", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::Draw", "   This method sets up the map projection space of the object. Also, if map    borders or titles are required, they are drawn here. If the object contains    any overlay objects, they are also drawn at this time.   ", "ERASE        Set this keyword to erase contents of the map window for one time only         in this Draw method. It does NOT set the Erase parameter for the object.  NOGRAPHICS        If this keyword is set, no graphics are drawn, but the map data coordinate         system is set up.   _EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::Erase", "cgMap::Erase", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::Erase", "   This method erases the graphics window.   ", "COLOR        The color used in the erasing of the display.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::Forward", "cgMap::Forward", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::Forward", "   This method transforms latitude and longitude values into projected    XY Cartesian values. This is known as the forward map transformation.   ", "NOFORWARDFIX         I may be wrong about the fix I put in when the longitude values          are the same. If so, setting this keyword will avoid the fix.          The default value is the default for the object.   lons         The longitude values to transform. May be a scalar or an array.  lats         The latitude values to transform. May be a scalar or an array.  mapStruct         The map structure to use in doing the forward transformation. If          not provided, the map structure is obtained from the object itself.   ", "          -1", "    The projected XY coordinates are returned in a 2xN array. The first     column contains the projected X values and the second column contains     the projected Y values.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::Is_Cylindrical", "cgMap::Is_Cylindrical", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::Is_Cylindrical", "   This method returns a 1 if the map projection is a cylindrical projection    and a 0 otherwise.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::GetMapStruct", "cgMap::GetMapStruct", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::GetMapStruct", "   This method returns a map structure that is the result of calling Map_Proj_Init.    It is important to get a fresh map structure because up until IDL 8, the map    structure was ephemeral (http://www.idlcoyote.com/map_tips/ephemeral.php).    Every time this function is called, a new map structure is created.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::GetProperty", "cgMap::GetProperty", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::GetProperty", "   This method allows the user to get various properties of the object. In general,    the same keywords that are used for the INIT method can be used here. Here    are a few that are different.   ", "BACKGROUNDBCOLORBOUNDARY        A four-element array giving the boundaries of the image in the form         [x0,y0,x1,y1]. This is a more convenient way of expressing the range         of the map space.  CENTER_LATITUDECENTER_LONGITUDECOLORDATUMDRAWEASTINGELLIPSOIDERASEHIRESLATLONBOX        A four-element array giving the boundaries of the map projection in the         Google Map form of [north, south, east, west]. This is useful when you         are creating image overlays to be added to Google Earth.  LIMITMAP_PROJECTIONNAMENOBORDERNOFORWARDFIXNORTHINGONIMAGEOVERLAYS        Set this keyword to a named variable that will return an object         array containing the overlay objects in the map object.  POSITIONRADIANSSEMIMAJOR_AXISSEMIMINOR_AXISSPHERE_RADIUSTITLEXRANGEYRANGEUVALUEZONE_REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::Inverse", "cgMap::Inverse", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::Inverse", "   This method transforms X and Y projected Cartesian map coordinates into    longitude and latitude values. This is known as the inverse map transformation.   ", "x         The projected X values to transform. May be a scalar or an array.  y         The projected Y values to transform. May be a scalar or an array.   ", "          -1", "    The projected lon/lat coordinates are returned in a 2xN array. The first     column contains the longitude values and the second column contains     the latitude values.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::LatLonLabels", "cgMap::LatLonLabels", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::LatLonLabels", "", "LATDELTALATLABLATNAMESLATSLONDELTALONLABLONNAMESLONSSUCCESS", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::MapInfo", "cgMap::MapInfo", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::MapInfo", "   This method returns information about the current map projection in an    IDL structure variable. Fields of the structure will reflect    values that are used in MAP_PROJ_INIT to create a map structure.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::SetProperty", "cgMap::SetProperty", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::SetProperty", "   This method allows the user to set various properties of the object. In general,    the same keywords that are used for the INIT method can be used here.   ", "BACKGROUND        The name of the background color. Used only if the map object erases         the display when it draws its contents.  BCOLOR        The name of the color to draw box axes with. Requires BOX_AXES be set.  BOX_AXES        Set this keyword to draw a box-style grid axes around the map. Applies         only if creating a mapGrid object.  CCOLOR        The name of the drawing color for the MapContinents object if this is requested.  CENTER_LATITUDE        The center latitude of the map projection.  CENTER_LONGITUDE        The center longitude of the map projection.  COLOR        The name of the drawing color for the object. Passed along to the mapGrid         and MapContinents object if these are requested.  CONTINENTS        Set this keyword if you wish to create an overlay object of continental outlines         that will be rendered when the draw method is called.  DATUM        This keyword is being depreciated in favor of the keyword ELLIPSOID,         corresponding to changes to Map_Proj_Init initiated in IDL 7.  DRAW        Set this keyword if you wish to immediately call the DRAW method after the         object has been completely initialized.  EASTINGELLIPSOID        Set this to the name or index number of the ellopsoid or datum you wish to use         for the map projection. The value is passed directly to Map_Proj_Init.  ERASE        Set this keyword if you wish to have the object erase the current graphics display         before drawing its content in the DRAW method. The graphics display will be erased         in the background color.  GCOLOR        The name of the drawing color for the MapGrid object if this is requested.  GRID        Set this keyword if you wish to create an overlay object of map grid lines         that will be rendered when the draw method is called.  HIRES        Set this keyword if you wish to use high resolution continental outlines.         Passed to the MapContinents object if one is requested.  LATLON_RANGES        Normally the XRANGE and YRANGE keywords are set in terms of projected meters. If         this keyword is set, then the values of XRANGE and YRANGE are assumed to be in longitude         and latitude values, respectively, and will be converted to projected meters prior to         being stored in the object.  LCOLOR        Set this to the name of the label color to use in labeling grid lines.         By default, the same as COLOR, or if BOX_AXIS is set, then same as BCOLOR.  LIMIT        The normal LIMIT keyword to Map_Proj_Init, specifying the limit of the map         projection in terms of latitude and longitude. Normally, little used when using         Map_Proj_Init. Most work is done by specifying the projected XY rectangular         coordinate system with the keywords XRANGE and YRANGE.  MAP_PROJECTION        The name or index number of a GCTP map projection to use.  NAME        Use this keyword to name the object. Names are often used to select objects in         program code.  NOBORDER        If this keyword is set, the customary border than surrounds the map projection is         not drawn.  NOFORWARDFIX        There is, I believe, a bug in MAP_PROJ_FORWARD that renders longitude values         incorrectly in projected meter space. This is evidenced by MAP_GRID not producing         the correct longitude lines in map coordinate systems set up in projected XY meters.         In the FORWARD method I correct for this. But, this correction is not always needed         or wanted. This property of the object allows me to turn that correction on or off,         as needed. Normally, the fix is provided, unless this keyword is set to 1.  NORTHINGONIMAGE        If this keyword is set, the position of the map projection in the graphics window         is obtained from the last image displayed with cgImage. This makes it extremely         easy to display an image and immediately set up a map projection space that will         allow you to annotate the image using map locations.  POSITION        The normalized position of the map projection space in the graphics window.         The default value is [0.075, 0.075, 0.925, 0.900].  RADIANS        Set this keyword to indicate latitude and longitude values are in radians rather         than degrees.  SEMIMAJOR_AXIS        The length of the semimajor axis of the ellipsoid in meters. Normally calculated         from the ELLIPSOID keyword values.  SEMIMINOR_AXIS        The length of the semiminor axis of the ellipsoid in meters. Normally calculated         from the ELLIPSOID keyword values.  SPHERE_RADIUS        The length of the ellipsoidal sphere in meters. Normally calculated from the         ELLIPSOID keyword values.  TITLE        The title of the map projection display.  XRANGE        Set this keyword to the X axis range desired in the data coordinate system.         Normally expressed in XY projected meter space, unless the LATLON_RANGES         keyword is set. The default is mapStruct.uv_box[[0,2]].  YRANGE         Set this keyword to the X axis range desired in the data coordinate system.          Normally expressed in XY projected meter space, unless the LATLON_RANGES          keyword is set. The default is mapStruct.uv_box[[1,3]]  UVALUE        A storage space for storing any kind of IDL variable of importance to the user.  ZONE         The zone (normally in UTM projections) of the map projection. If not given and needed,          calculated from the CENTER_LATITUDE and CENTER_LONGITUDE keyword values.  _EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap::CLEANUP", "cgMap::CLEANUP", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap::CLEANUP", "   This is the clean-up routine for the object.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap__define.html#cgMap__Define", "cgMap__Define", 'routine in <a href="coyote/cgmap__define.html">cgmap__define.pro</a>', "cgmap__define.pro", "", "cgMap__Define", "   This is the class definition module. Structures used to manipulate    map projectatum information are also created here.   ", "class       Occasionally, it is useful to have an object class definition as        a structure variable. Using this output keyword will allow that.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgmap_continents.html", "cgmap_continents.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmap_continents.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmap_continents.html#cgMap_Continents", "cgMap_Continents", 'routine in <a href="coyote/cgmap_continents.html">cgmap_continents.pro</a>', "cgmap_continents.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgMap_Continents", "   Provides a simple wrapper to the MAP_CONTINENTS command in IDL that can be used    to draw map continental outlines in a device and color independent way with    Coyote Graphics programs.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. Note that a map projection command must be         added to the window before this command is added to be effective.  BACKGROUND        The name of the background color. A polygon of this color is drawn         in the map space set up by the map projection before continents and         other items are drawn.  COASTS        Set this keyword if you want coasts to be drawn. This keyword is ignored if using FILENAME.  COLOR        The name of the drawing color for the program.  CONTINENTS        Set this keyword if you want continental outlines to be drawn. This will be         set automatically if COASTS, COUNTRIES, RIVERS, AND USA keywords are all set         to zero. This keyword is ignored if using FILENAME.  COUNTRIES        Set this keyword to draw political boundaries.  FILL_CONTINENTS        Set this keyword to draw filled polygons rather than outlines. If the value is         2, the continents are filled with lines rather than colors.  HIRES        Set this keyword to use the high-resolution data supplied with IDL for MAP_CONTINENTS.         This keyword is ignored if using FILENAME.  LIMITS        Set to a four-element vector, [Latmin, LonMin, LatMax, LonMax] that describes the         limit rectangle. Only plot line segments that pass through this rectangle.  LINESTYLE        Set to the type of linestyle in drawing outlines. Set solid lines by default.  MAP_STRUCTURE        Set this keyword to a map structure as returned by Map_Proj_Init or to a map         coordinate object (i.e., cgMap) from which a map structure can be obtained.  MLINESTYLE        This keyword depreciated in favor of LINESTYLE keyword.  MLINETHICK        This keyword depreciated in favor of THICK keyword.  ORIENTATION        Set this keyword to the counterclockwise angle in degrees from horizontal that         the line fill should be drawn. Only applies if the FILL_CONTINENTS keyword is 2.  OUTLINERIVERS        Set this keyword if you wish to draw rivers. This keyword is ignored if using FILENAME.  SPACING        Set this keyword to the spacing, in centimeters, for a line fill. This keyword only has         effect if the FILL_CONTINENTS keyword is set to 2.  T3D        Set this graphics keyword if you wish to draw outlines use the T3D transformation matrix.         This keyword is ignored if using FILENAME.  THICK        Set this keyword to the thickness of the lines that are drawn.  USA        Set this keyword if you wish do draw United States state boundaries. This keyword is         ignored if using FILENAME.  ZVALUE        Set this keyword to the ZVALUE where the outlines should be drawn. Set to 0 by default.         This keyword is ignored if using FILENAME.   _EXTRA", "Graphics Map Projections", "    Change History: <span class= code-output >  Written by David W. Fanning, 7 November 2011.</span> <span class= code-output >  Added an ERASE=0 to the /NOGRAPHICS keyword on the Draw method call to cgMap. 27 Dec 2011. DWF</span> <span class= code-output >  Changed the default line thickness to !P.Thick to better support PostScript files. 28 Dec 2011. DWF.</span> <span class= code-output >  Modified slightly to allow a three-element byte array to be used as the COLOR. 18 April 2012. DWF.</span> <span class= code-output >  Added a BACKGROUND keyword. 31 Aug 2012. DWF.</span>      Copyright (c) 2011-2012, Fanning Software Consulting, Inc.       To display a map of the Cuba and Haiti: <span class= code-output >   cgMap_Set, /Mercator, Limit=[5.0, -95, 35.0, -55.0]</span> <span class= code-output >   cgMap_Continents, Background='dodger blue', /Continents, /Fill, Color='tan'</span> <span class= code-output >   cgMap_Continents, /Countries, /USA, Color='navy', /Continents</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgmap_grid.html", "cgmap_grid.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmap_grid.pro", "   FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This program provides a significantly modified MAP_GRID command that    can be used with other Coyote Graphics routines.       Description of known MAP_GRID problems: <span class= code-output >  http://www.idlcoyote.com/map_tips/noclip.html</span> <span class= code-output >  http://www.idlcoyote.com/map_tips/missinggrid.html</span> <span class= code-output >  http://www.idlcoyote.com/map_tips/extralines.php</span>  ", "", "Graphics Map Projections", "     Change History: <span class= code-output >  Written by David W. Fanning, 7 November 2011.</span> <span class= code-output >  Significant modification of the MAP_GRID command in IDL to fix known</span> <span class= code-output >     problems, especially when used in conjunction with map projection spaces</span> <span class= code-output >     set up with MAP_PROJ_INIT. David W. Fanning, 7 November 2011.</span> <span class= code-output >  Added an ERASE=0 to the /NOGRAPHICS keyword on the Draw method call to cgMap. 27 Dec 2011.</span> <span class= code-output >  Changed the default line thickness to !P.Thick to better support PostScript files. 28 Dec 2011. DWF.</span> <span class= code-output >  Fixed a problem with grid labeling when values were passed with LATS or LONS keyword. 6 April 2012. DWF.</span> <span class= code-output >  Modified slightly to allow a three-element byte array to be used as the COLOR. 18 April 2012. DWF.</span> <span class= code-output >  If a Map object is available, I make sure to call DRAW method before drawing graphics. 12 Sept 2012. DWF.</span> <span class= code-output >  Added cgGRID keyword to allow the cgMap object to create latitude and longitude grid in its</span> <span class= code-output >      LatLonLabels method. Previously used by default, but it doesn't work well with global</span> <span class= code-output >      map projections. It works best with small map areas in UTM projection space. 3 Jan 2013. DWF.</span> <span class= code-output >  Removed some old code that was used to correct latitude and longitude values. No longer needed,</span> <span class= code-output >      I hope, with the new cgGRID keyword. 3 Jan 2013.</span> <span class= code-output >  Corrected bug in variable spelling that affect LONDELTA and LATDELTA keywords. 6 Jan 2013. DWF.</span> <span class= code-output >  Lost a piece of code that allows longitude box axes. Added back in. 23 Jan 2013. DWF.</span> <span class= code-output >  T3D keyword was not being applied. Fixed. 11 February 2013. DWF.</span> <span class= code-output >  Added NOCLIP keyword. 15 February 2013. DWF.</span> <span class= code-output >  Sometimes a longitude line is draw incorrectly due to the fact that the longitude vector does not</span> <span class= code-output >     have a point in the XRANGE of the projection. A fix to that problem has failed to work in all</span> <span class= code-output >     circumstances, so I have done more work on that algorithm to see if I can solve the problem is</span> <span class= code-output >     a better way. Now usine Value_Locate to test for point. 19 February 2013. DWF.</span>       Copyright (c) 2011-2013, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmap_grid.html#cgMap_Grid_Incr", "cgMap_Grid_Incr", 'routine in <a href="coyote/cgmap_grid.html">cgmap_grid.pro</a>', "cgmap_grid.pro", "", "cgMap_Grid_Incr", " Find the grid increment find defining the latitude and longitude delta  values, if they are not currently defined.   ", "span       The data range.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap_grid.html#cgMap_Grid_Solve", "cgMap_Grid_Solve", 'routine in <a href="coyote/cgmap_grid.html">cgmap_grid.pro</a>', "cgmap_grid.pro", "", "cgMap_Grid_Solve", " Find the point on the line between points c0 and c1, expressed in  DEVICE coordinates, where the longitude (Icoord = 0) or latitude  (Icoord = 1) is equal to Gwant.  If the segment between c0 and c1  doesn't intersect the given meridan or parallel, or either endpoint  is not mappable, return NaN. Otherwise, return the device coordinate,  X if Icoord = 0, or Y if Icoord = 1, of the intersection.   ", "MAP_STRUCTURE         The map structure to covert XY projected meters to lat/lon space.   c0       Input coordinate?  c1       Input coordinate?  icoord       Index of input coordinate?  gwant       Global wrapping?   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap_grid.html#cgMap_Grid_Check_Range", "cgMap_Grid_Check_Range", 'routine in <a href="coyote/cgmap_grid.html">cgmap_grid.pro</a>', "cgmap_grid.pro", "", "cgMap_Grid_Check_Range", "    This routine fixes a bug in MAP_GRID that causes map labels to be     written outside the map boundary when using hardware or true-type     fonts. It checks to be sure the label is inside the map boundary     before it is written. Users can control how  exact  the boundary is     when using GCTP map projections by setting the FUZZY keyword to     a multiplication factor that is multiplied times the calculated     data range of the map projection.      If a point is determined to be outside the map boundary, a single     data value is returned by the function. This is a signal that this     data point should not be drawn.   ", "FUZZY        This keyword applies only if the GCTP keyword is set. Set the         keyword to a value that is a percentage of the current data range.         This percentage of the range is added to or subtracted from the         values used to determine if the label is  inside  the boundary.         It allows you to be a little less exact when selecting inside         points. There are occasional aesthetic reasons for allowing fuzzy         boundaries. A reasonable value for fuzziness might be 0.0125.  GCTP        Set this keyword to calculate boundaries in terms of the the         current calculated data range variables !X.CRange and !Y.CRange.         Otherwise, the boundaries are taken from !Map.LL_BOX.   xy       The input label point. Normally, a two element array.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmap_grid.html#cgMap_Grid", "cgMap_Grid", 'routine in <a href="coyote/cgmap_grid.html">cgmap_grid.pro</a>', "cgmap_grid.pro", "", "cgMap_Grid", " Provides a MAP_GRID command that can be used in conjunction with other  Coyote Graphics programs and in resizeable graphics windows. Any keyword  appropriate for the MAP_GRID command in IDL can be used.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. Note that a map projection command must be added to the         window before this command is added to be effective.  BCOLOR        The name of the color to draw box axes with.  BOX_AXES        Set this keyword to draw box axes on the map projection.  CGGRID        Set this keyword to allow the latitude and longitude values to be set by         the LatLon_Labels method in the cgMap object. Previously this was used by         default, but it caused a lot of problems with global or near global map projections.         This really should be used ONLY if you are mapping a very small region of the Earth,         and maybe if you are using a UTM map projection. Othersize, it is probably not         needed, so I have made it an optional choice.  CHARSIZE        The character size for the labels. Default is cgDefCharSize()*0.75.  CLIP_TEXT        Set this keyword to a zero value to turn off clipping of text labels.         By default, text labels are clipped. This keyword is ignored if the Box_Axes         keyword is set.  COLOR        The name of the drawing color for the program.  FILL_HORIZONFORMAT        Set this keyword to a format for the grid labels.  FUZZY        This keyword applies only if the MAP_STRUCTURE keyword is used. Set the         keyword to a value that is a percentage of the current data range.         This percentage of the range is added to or subtracted from the         values used to determine if the label is  inside  the boundary.         It allows you to be a little less exact when selecting inside         points. There are occasional aesthetic reasons for allowing fuzzy         boundaries. A reasonable value for fuzziness might be 0.0125.  GLINESTYLE        Not used. Use Linestyle instead.  GLINETHICK        Not used. Use Thick instead.  HORIZON        Set this keyword to draw the current map horizon.  INCREMENT        Determines the smoothness of graticle lines by setting the spacing between         them. A low number is a smooth number.  LABEL        An number that tells how to label the grid line. A 0 means no grid lines are         labelled. A 1 means all grid lines are labelled. A 2 means label every 2nd         grid line is labelled. A 3 means every  3rd grid line is labelled, and so on.  LATALIGN        This keyword controls the alignment of the text baseline for latitude labels.         A value of 0.0 left justifies the label, 1.0 right justifies it, and 0.5         centers it. This keyword is ignored if the Box_Axes keyword is set.  LATDELTA        Set this keyword to the spacing in degrees between parallels of latitude in         the grid. If this keyword is not set, a suitable value is determined from the         current map projection.  LATLABEL        The longitude at which to place latitude labels. The default is the center         longitude on the map if using Map_Set, and a longitude line on the left of the         plot if using Map_Proj_Init. This keyword is ignored if the Box_Axes keyword is set.  LATNAMES        Set this keyword equal to an array specifying the names to be used for the         latitude labels. By default, this array is automatically generated in units         of degrees. The LATNAMES array can be either type string or any single numeric         type, but should not be of mixed type. When LATNAMES is specified, the LATS         keyword must also be specified. The number of elements in the two arrays need         not be equal. If there are more elements in the LATNAMES array than in the LATS         array, the extra LATNAMES are ignored. If there are more elements in the LATS         array than in the LATNAMES array, labels in degrees will be automatically         provided for the missing latitude labels. The LATNAMES keyword can be also used         when the LATS keyword is set to a single value. It this case, the first label         supplied will be used at the specified latitude; subsequent names will be         placed at the next latitude line to the north, wrapping around the globe if         appropriate. Caution should be used when using LATNAMES in conjunction with a         single LATS value, since the number of visible latitude gridlines is dependent         on many factors.  LATS        Set this keyword equal to a one or more element vector of latitudes for which         lines will be drawn (and optionally labeled). If LATS is omitted, appropriate         latitudes will be generated based on the value of the (optional) LATDEL keyword.         If LATS is set to a single value, that latitude and a series of automatically         generated latitudes will be drawn (and optionally labeled). Automatically generated         latitudes have values that extend over the map. If LATS is a single value, that         value is taken to be the starting point for labelling (See the LABEL keyword).  LCOLOR        Set this to the name of the label color to use in labeling grid lines.         By default, the same as COLOR, or if BOX_AXIS is set, then same as BCOLOR.  LINESTYLE        This keyword is the same as the GLineStyle keyword, but is a more         natural way of setting the value.  LONALIGN        This keyword controls the alignment of the text baseline for longitude labels.         A value of 0.0 left justifies the label, 1.0 right justifies it, and 0.5         centers it. This keyword is ignored if the Box_Axes keyword is set.  LONDELTA        Set this keyword to the spacing in degrees between parallels of longitude in         the grid. If this keyword is not set, a suitable value is determined from the         current map projection.  LONLABEL        The latitude at which to place longitude labels. The default is the center         longitude on the map if using Map_Set, and a longitude line on the left of the         plot if using Map_Proj_Init. This keyword is ignored if the Box_Axes keyword is set.  LONNAMES        Set this keyword equal to an array specifying the names to be used for the         longitude labels. By default, this array is automatically generated in units         of degrees. The LATNAMES array can be either type string or any single numeric         type, but should not be of mixed type. When LATNAMES is specified, the LATS         keyword must also be specified. The number of elements in the two arrays need         not be equal. If there are more elements in the LATNAMES array than in the LATS         array, the extra LATNAMES are ignored. If there are more elements in the LATS         array than in the LATNAMES array, labels in degrees will be automatically         provided for the missing longitude labels. The LATNAMES keyword can be also used         when the LATS keyword is set to a single value. It this case, the first label         supplied will be used at the specified longitude; subsequent names will be         placed at the next longitude line to the north, wrapping around the globe if         appropriate. Caution should be used when using LATNAMES in conjunction with a         single LATS value, since the number of visible longitude gridlines is dependent         on many factors.  LONS        Set this keyword equal to a one or more element vector of longitudes for which         lines will be drawn (and optionally labeled). If LATS is omitted, appropriate         longitudes will be generated based on the value of the (optional) LATDEL keyword.         If LATS is set to a single value, that longitude and a series of automatically         generated longitudes will be drawn (and optionally labeled). Automatically generated         longitudes have values that extend over the map. If LATS is a single value, that         value is taken to be the starting point for labelling (See the LABEL keyword).  MAP_STRUCTURE        This keyword is normally used to pass in a map structure of the type         created by Map_Proj_Init. In this version of the program, it can also         be used to pass in a cgMap object, from which the map structure and other         pertinent information for creating map grid lines can be obtained.  NOCLIP        Normally, output is clipped to the map projection boundaries. Set this keyword         to be able to draw outside the map boundaries.  NO_GRID        Set this keyword if you only want labels but not grid lines.  ORIENTATION        Set this keyword equal to an angle in degrees from horizontal (in the clockwise         direction) to rotate the labels. This keyword is ignored if the Box_Axes keyword is set.  T3D        Set this keyword if you are labeling in 3D space.  THICK        Sets the thickness of the grid lines.  ZVALUE        Draw the grid lines at this Z-value. Implies the use of T3D.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgmap_gshhs.html", "cgmap_gshhs.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmap_gshhs.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmap_gshhs.html#cgMap_GSHHS", "cgMap_GSHHS", 'routine in <a href="coyote/cgmap_gshhs.html">cgmap_gshhs.pro</a>', "cgmap_gshhs.pro", "    FANNING SOFTWARE CONSULTING:     David W. Fanning     1645 Sheely Drive     Fort Collins, CO 80526 USA     Phone: 970-221-0438 &lt;     E-mail: david@idlcoyote.com     Coyote's Guide to IDL Programming: http://www.idlcoyote.com   ", "cgMap_GSHHS", " The program uses files from the Globally Self-consistent Hierarchical High-resolution Shoreline  (GSHHS) data base to draw shorelines in the manner of MAP_CONTINENTS. In other words,  it is assumed that a map coordinate data space has been established prior to calling  this routine. See the example below. The GSHHS data files are  available for downloading.  An article describing how to use this program  is also available.   Note, the authors of the GSHHS software *continually* change the header  structure, which you MUST know to read the data file. There are are now  at least four different structures in common use. Please find the one  you need from the commented list in the code itself. The current code uses the structure  for the 2.2 version of the GSHHS software.   I have noticed that the polygon areas in the 2.2 version of the GSHHS software seem  to contain completely bogus information. For example, the Great Lakes polygon is 1.7e7  square kilometers, while a tiny lake near-by is listed as 3.5e7 square kilometers. I have  no explanation for why these values seem to be so wrong. I haven't tested this on other  GSHHS versions of the data.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. Note that a map projection command must be         added to the window before this command is added to be effective.  COLOR        The name of the drawing color.  FILL        Set this keyword to draw filled outlines.  LAND_COLOR        The name of the land color (for FILL).  LEVEL        The polygon LEVEL. All polygons less than or equal to this value         are drawn. 1-land, 2-lakes, 3-island in lake, 4-pond in island.         By default, 2 (land and lake outlines).  MAP_STRUCTURE        A map projection structure (as created from MAP_PROJ_INIT) or a map coordinate         object (i.e., cgMap). If using a map projection structure, a map coordinate system         must be set up for the entire display window.  MINAREA        The minimum feature area in square kilometers. Features with area below         the minimum area will not be drawn on the map.  NOCLIP        Normally the polygons and outlines are clipped to the plot boundaries.         Set this keyword to turn this feature off.  OUTLINE        Set this keyword to draw outlines on filled polygons. Set to 1, by default,         if FILL=0. Set to zero to not draw outlines on filled polygons.  THICK        Set this keyword to the thickness of the lines that are drawn.  WATER_COLOR        The name of color to draw water features in.   filename       The name of the GSHHS file to open. If not provided, the user will        be asked to select the file with a file selection tool.   ", "Graphics Map Projections", "    Modification History: <span class= code-output >   Written by David W. Fanning, from Map_GSHHS_Shoreline program, 12 November 2011.</span> <span class= code-output >   Added THICK keyword. 28 Dec 2011. DWF.</span> <span class= code-output >   Modified so you can pass a map object with the MAP_STRUCTURE keyword and not</span> <span class= code-output >      have it change the object to a structure. 5 April 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.       Example using cgMAP_SET to set up the map coordinate space: <span class= code-output >   datafile = 'gshhs_h.b'</span> <span class= code-output >   cgDisplay, 500, 350</span> <span class= code-output >   pos = [0.1,0.1, 0.9, 0.8]</span> <span class= code-output >   cgMap_Set, -25.0, 135.0, Position=pos, /Mercator, Scale=64e6, Color='black'</span> <span class= code-output >   cgColorfill, [pos[0], pos[0], pos[2], pos[2], pos[0]], $</span> <span class= code-output >                [pos[1], pos[3], pos[3], pos[1], pos[1]], $</span> <span class= code-output >                /Normal, Color='sky blue'</span> <span class= code-output >   cgMap_GSHHS, datafile, Fill=1, Level=3, Color='black', /Outline</span> <span class= code-output >   cgText, 0.5, 0.85, 'Australia', Font=0, Color='black', /Normal, Alignment=0.5</span> <span class= code-output >   cgPlotS, [pos[0], pos[0], pos[2], pos[2], pos[0]], $</span> <span class= code-output >            [pos[1], pos[3], pos[3], pos[1], pos[1]], $</span> <span class= code-output >            /Normal, Color='black', Thick=2</span>      Example using MAP_PROJ_INIT to set up the map coordinate space: <span class= code-output >   datafile = 'gshhs_h.b'</span> <span class= code-output >   cgDisplay</span> <span class= code-output >   map = Obj_New('cgMap',  Lambert Azimuthal , Limit=[40, -95, 50, -75], $</span> <span class= code-output >       Center_Lat=45, Center_Lon=-85)</span> <span class= code-output >   map -&gt; SetProperty, Position=[0.1, 0.1, 0.90, 0.75], /Draw</span> <span class= code-output >   cgMap_GSHHS, datafile, /Fill, Level=3, Map_Structure=map, $</span> <span class= code-output >       Water='DODGER BLUE'</span> <span class= code-output >   cgMap_Grid, /Label, /Box, Color='charcoal', Map_Structure=map</span> <span class= code-output >   cgMap_Continents, /USA, Map_Structure=map</span> <span class= code-output >   cgText, 0.5, 0.85, 'Great Lakes Region', Font=0, Color='charcoal', $</span> <span class= code-output >       /Normal, Alignment=0.5</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgmap_set.html", "cgmap_set.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmap_set.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmap_set.html#cgMap_Set", "cgMap_Set", 'routine in <a href="coyote/cgmap_set.html">cgmap_set.pro</a>', "cgmap_set.pro", "   FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgMap_Set", "   Provides a modified MAP_SET command that can work together with other Coyote Graphics    commands and be used in resizeable graphics windows. Any keyword appropriate for MAP_SET,    MAP_CONTINENTS, or MAP_GRID can be used with this routine. Additional or modified    keywords are documented.   ", "ADDCMD        If this keyword is set, the command is added to the resizeable graphics         window, cgWindow.  ADVANCEAITOFFALBERSAZIMUTHALBACKGROUND        The name of the background color. Using this keyword automatically sets         the ERASE keyword to 1.  BOX_AXESCENTRAL_AZIMUTHCHARSIZECLIPCOASTSCOLOR        The name of the drawing color for the program.         erase: in, optional, type=boolean, default=0         Set this keyword if you wish to the current graphics content of the window         before drawing the map projection. The graphics display will be erased         in the background color. This is a more intuitive way to set this behavior         than to set NOERASE to 0, which does the same thing.  CON_COLORCONICCONTINENTS         Set this keyword to display continental outlines on the map projection.          Any keyword appropriate to the IDL command Map_Continents can be used to          modify the look of the continental outlines.  COUNTRIESCYLINDRICALE_CONTINENTSE_HORIZONE_GRIDELLIPSOIDERASE         A more intuitive way to set NOERASE=0. If ERASE is set, the display window          is erased in the BACKGROUND color.  FILL_CONTINENTSGLINESTYLEGLINETHICKGRID         Set this keyword to display a map grid on the map projection. And keyword          appropriate to the IDL command Map_Grid can be used to modify the look of the          map grid.  GOODESHOMOLOSINEGNOMICHAMMERHIRESHORIZONISOTROPICLAMBERTLABELLATALIGNLATDELLATLABLIMITLONALIGNLONDELLONLABMERCATORMILLER_CYLINDRICALMLINESTYLEMLINETHICKMOLLWEIDENAMENOBORDERNOERASEONIMAGE        If this keyword is set, the position of the map projection in the graphics window         is obtained from the last image displayed with cgImage. This makes it extremely         easy to display an image and immediately set up a map projection space that will         allow you to annotate the image using map locations. This keyword is ignored if         the 'Position keyword is used.  ORTHOGRAPHICPOSITION        The normalized position of the map projection space in the graphics window.         The default is [0.075, 0.075, 0.925, 0.925]  PROJECTIONRIVERSREVERSEROBINSONSAT_PSATELLITESCALESTANDARD_PARALLELSSTEREOGRAPHICSINUSOIDALT3DTITLETRANSVERSE_MERCATORUSAWHOLE_MAPWINDOW         If this keyword is set, the command replaces any commands in a current          cgWindow or it opens a new cgWindow and adds itself to it.   XMARGINYMARGINZVALUEp0lat         The center latitude of the map projection.  p0lon         The center longitude of the map projection.  rot         The angle through which the map projection should be rotated. Positve          values are in a clockwise direction.   ", "Graphics Map Projections", "     Written by David W. Fanning, 7 November 2011.      Added ONIMAGE keyword to allow the position to be specified at the last         image position from cgImage. 3 March 2012. DWF.      Several MAP_CONTINENTS keywords seem to have gone missing. Added COASTS,         COUNTRIES, FILL_CONTINENTS, and RIVERS. 4 Dec 2012. DWF.      Forgot to pass the  extra  information in (e.g., E_HORIZON keyword) to Map_Set. 18 Jan 2013. DWF.      HORIZON keyword not being passed along to Map_Set. 28 Feb 2013. DWF.      Forgot to look at !P.Multi before setting a POSITION. Fixed. 11 March 2013. DWF.      Modified the E_GRID and E_HORIZON structure code to allow color names. 29 April 2013. Joe Sapp.      In some situations, the  extra  continents structure was not being passed along. 29 May 2013. DWF.      Now, when  extra  structures are passed along, they can have duplicate fields. Put check in place. 22 June 2013. DWF.        Copyright (c) 2011-2012, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgmapcontinents__define.html", "cgmapcontinents__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmapcontinents__define.pro", "    FANNING SOFTWARE CONSULTING:     David W. Fanning     1645 Sheely Drive     Fort Collins, CO 80526 USA     Phone: 970-221-0438 &lt;     E-mail: david@idlcoyote.com     Coyote's Guide to IDL Programming: http://www.idlcoyote.com   ", "", "   Provides an object wrapper to the cgMAP_CONTINENTS or the cgMap_GSHHS commands.    Coyote Library routines are required.   ", "", "Graphics Map Projections", "    Written by David W. Fanning, 7 November 2011.     Added a BACKGROUND keyword. 31 Aug 2012. DWF.        Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmapcontinents__define.html#cgMapContinents::INIT", "cgMapContinents::INIT", 'routine in <a href="coyote/cgmapcontinents__define.html">cgmapcontinents__define.pro</a>', "cgmapcontinents__define.pro", "", "cgMapContinents::INIT", "   The initialization routine for the cgMapContinents object.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. Note that a map projection command must be         added to the window before this command is added to be effective.  BACKGROUND        The name of the background color. A polygon of this color is drawn         in the map space set up by the map projection before continents and         other items are drawn.  COASTS        Set this keyword if you want coasts to be drawn. This keyword is ignored if using FILENAME.  COLOR        The name of the drawing color for the program.  CONTINENTS        Set this keyword if you want continental outlines to be drawn. This will be         set automatically if COASTS, COUNTRIES, RIVERS, AND USA keywords are all set         to zero. This keyword is ignored if using FILENAME.  COUNTRIESFILENAME        The name of the GSHHS file to open. If a fully qualified file name is not provided,         the program will look for the GSHHS file using Find_Resource_File() function. Only if         this fails and a file is not found, will an error be issued. This keyword applies only         to GSHHS data files currently. If the GSHHS keyword is set, and this keyword is undefined,         then the filename will be set to  gshhs_i.b , unless the HIRES keyword is set, in which         case it will be set to  gshhs_h.b.   FILL        Set this keyword to draw filled polygons rather than outlines.  GSHHS        Set this keyword to indicate you want to draw continents with the GSHHS data set.         Using the FILENAME keyword automatically sets this keyword.  HIRES        Set this keyword to use the high-resolution data supplied with IDL for MAP_CONTINENTS.         This keyword is ignored if using FILENAME.  LAND_COLOR        The name of a color to be used for  land . Used when the FILL keyword is set.  LEVEL        The polygon LEVEL. All polygons less than or equal to this value         are drawn. 1-land, 2-lakes, 3-island in lake, 4-pond in island.         This keyword applies only to GSHHS data sets.  LINESTYLE        Set to the type of linestyle in drawing outlines. Set solid lines by default.  MAP_OBJECTMINAREA        The minimum feature area. By default, 500 km^2. Polygons with areas less         than this are not drawn. This keyword applies only to GSHHS data sets.  OUTLINE        Set this keyword to draw shorelines. Set by default if FILL=0. This keyword applies         only to GSHHS data sets.  RIVERS        Set this keyword if you wish to draw rivers. This keyword is ignored if using FILENAME.  T3D        Set this graphics keyword if you wish to draw outlines use the T3D transformation matrix.         This keyword is ignored if using FILENAME.  THICK        Set this keyword to the thickness of the lines that are drawn.  USA        Set this keyword if you wish do draw United States state boundaries. This keyword is         ignored if using FILENAME.  WATER_COLOR        The name of the water color. This keyword applies only to GSHHS data sets.  ZVALUE        Set this keyword to the ZVALUE where the outlines should be drawn. Set to 0 by default.         This keyword is ignored if using FILENAME.  _EXTRAmapCoord       A map coordinate object that will set up a map coordinate data space.        Required to convert lat/lon values to projected meter space. A cgMap object.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapcontinents__define.html#cgMapContinents::AddCmd", "cgMapContinents::AddCmd", 'routine in <a href="coyote/cgmapcontinents__define.html">cgmapcontinents__define.pro</a>', "cgmapcontinents__define.pro", "", "cgMapContinents::AddCmd", "   Adds the object as a command (the DRAW method is called) in a cgWindow    resizeable graphics window.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapcontinents__define.html#cgMapContinents::Confirm_Filename", "cgMapContinents::Confirm_Filename", 'routine in <a href="coyote/cgmapcontinents__define.html">cgmapcontinents__define.pro</a>', "cgmapcontinents__define.pro", "", "cgMapContinents::Confirm_Filename", "   Makes sure the filename exists. If it doesn't it will search for the    file using FIND_RESOURSE_FILE.   ", "filename       The name of the file to confirm.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapcontinents__define.html#cgMapContinents::Draw", "cgMapContinents::Draw", 'routine in <a href="coyote/cgmapcontinents__define.html">cgmapcontinents__define.pro</a>', "cgmapcontinents__define.pro", "", "cgMapContinents::Draw", "   Draw the continental outlines in a graphics window.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapcontinents__define.html#cgMapContinents::GetProperty", "cgMapContinents::GetProperty", 'routine in <a href="coyote/cgmapcontinents__define.html">cgmapcontinents__define.pro</a>', "cgmapcontinents__define.pro", "", "cgMapContinents::GetProperty", "   This method allows the user to get various properties of the object.   ", "BACKGROUND        The name of the background color.  COASTS        Set this keyword if you want coasts to be drawn. This keyword is ignored if using FILENAME.  COLOR        The name of the drawing color for the program.  CONTINENTS        Set this keyword if you want continental outlines to be drawn. This will be         set automatically if COASTS, COUNTRIES, RIVERS, AND USA keywords are all set         to zero. This keyword is ignored if using FILENAME.  COUNTRIESFILENAME        The name of the GSHHS file to open. If a fully qualified file name is not provided,         the program will look for the GSHHS file using Find_Resource_File() function. Only if         this fails and a file is not found, will an error be issued. This keyword applies only         to GSHHS data files currently. If the GSHHS keyword is set, and this keyword is undefined,         then the filename will be set to  gshhs_i.b , unless the HIRES keyword is set, in which         case it will be set to  gshhs_h.b.   FILL        Set this keyword to draw filled polygons rather than outlines.  GSHHS        Set this keyword to indicate you want to draw continents with the GSHHS data set.         Using the FILENAME keyword automatically sets this keyword.  HIRES        Set this keyword to use the high-resolution data supplied with IDL for MAP_CONTINENTS.         This keyword is ignored if using FILENAME.  LAND_COLOR        The name of a color to be used for  land . Used when the FILL keyword is set.  LEVEL        The polygon LEVEL. All polygons less than or equal to this value         are drawn. 1-land, 2-lakes, 3-island in lake, 4-pond in island.         This keyword applies only to GSHHS data sets.  LINESTYLE        Set to the type of linestyle in drawing outlines. Set solid lines by default.  MAP_OBJECTMAP_STRUCTUREMINAREA        The minimum feature area. By default, 500 km^2. Polygons with areas less         than this are not drawn. This keyword applies only to GSHHS data sets.  OUTLINE        Set this keyword to draw shorelines. Set by default if FILL=0. This keyword applies         only to GSHHS data sets.  RIVERS        Set this keyword if you wish to draw rivers. This keyword is ignored if using FILENAME.  T3D        Set this graphics keyword if you wish to draw outlines use the T3D transformation matrix.         This keyword is ignored if using FILENAME.  THICK        Set this keyword to the thickness of the lines that are drawn.  USA        Set this keyword if you wish do draw United States state boundaries. This keyword is         ignored if using FILENAME.  WATER_COLOR        The name of the water color. This keyword applies only to GSHHS data sets.  ZVALUE        Set this keyword to the ZVALUE where the outlines should be drawn. Set to 0 by default.         This keyword is ignored if using FILENAME.  _REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapcontinents__define.html#cgMapContinents::SetProperty", "cgMapContinents::SetProperty", 'routine in <a href="coyote/cgmapcontinents__define.html">cgmapcontinents__define.pro</a>', "cgmapcontinents__define.pro", "", "cgMapContinents::SetProperty", "   This method allows the user to set various properties of the object. In general,   ", "BACKGROUND        The name of the background color. A polygon of this color is drawn         in the map space set up by the map projection before continents and         other items are drawn.  COASTS        Set this keyword if you want coasts to be drawn. This keyword is ignored if using FILENAME.  COLOR        The name of the drawing color for the program.  CONTINENTS        Set this keyword if you want continental outlines to be drawn. This will be         set automatically if COASTS, COUNTRIES, RIVERS, AND USA keywords are all set         to zero. This keyword is ignored if using FILENAME.  COUNTRIESDRAWFILENAME        The name of the GSHHS file to open. If a fully qualified file name is not provided,         the program will look for the GSHHS file using Find_Resource_File() function. Only if         this fails and a file is not found, will an error be issued. This keyword applies only         to GSHHS data files currently. If the GSHHS keyword is set, and this keyword is undefined,         then the filename will be set to  gshhs_i.b , unless the HIRES keyword is set, in which         case it will be set to  gshhs_h.b.   FILL        Set this keyword to draw filled polygons rather than outlines.  GSHHS        Set this keyword to indicate you want to draw continents with the GSHHS data set.         Using the FILENAME keyword automatically sets this keyword.  HIRES        Set this keyword to use the high-resolution data supplied with IDL for MAP_CONTINENTS.         This keyword is ignored if using FILENAME.  LAND_COLOR        The name of a color to be used for  land . Used when the FILL keyword is set.  LEVEL        The polygon LEVEL. All polygons less than or equal to this value         are drawn. 1-land, 2-lakes, 3-island in lake, 4-pond in island.         This keyword applies only to GSHHS data sets.  LINESTYLE        Set to the type of linestyle in drawing outlines. Set solid lines by default.  MAP_OBJECTMINAREA        The minimum feature area. By default, 500 km^2. Polygons with areas less         than this are not drawn. This keyword applies only to GSHHS data sets.  OUTLINE        Set this keyword to draw shorelines. Set by default if FILL=0. This keyword applies         only to GSHHS data sets.  RIVERS        Set this keyword if you wish to draw rivers. This keyword is ignored if using FILENAME.  T3D        Set this graphics keyword if you wish to draw outlines use the T3D transformation matrix.         This keyword is ignored if using FILENAME.  THICK        Set this keyword to the thickness of the lines that are drawn.  USA        Set this keyword if you wish do draw United States state boundaries. This keyword is         ignored if using FILENAME.  WATER_COLOR        The name of the water color. This keyword applies only to GSHHS data sets.  ZVALUE        Set this keyword to the ZVALUE where the outlines should be drawn. Set to 0 by default.         This keyword is ignored if using FILENAME.  _EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapcontinents__define.html#cgMapContinents::CLEANUP", "cgMapContinents::CLEANUP", 'routine in <a href="coyote/cgmapcontinents__define.html">cgmapcontinents__define.pro</a>', "cgmapcontinents__define.pro", "", "cgMapContinents::CLEANUP", "   This method is the clean-up method for the object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapcontinents__define.html#cgMapContinents__DEFINE", "cgMapContinents__DEFINE", 'routine in <a href="coyote/cgmapcontinents__define.html">cgmapcontinents__define.pro</a>', "cgmapcontinents__define.pro", "", "cgMapContinents__DEFINE", "   This is the class definition module. Structures used to manipulate    map projection information are also created here.   ", "class       Occasionally, it is useful to have an object class definition as        a structure variable. Using this output keyword will allow that.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgmapgrid__define.html", "cgmapgrid__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmapgrid__define.pro", "   FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This object is a wrapper for the cgMap_Grid routine in IDL. It provides a simple    way to allow map grids on images which use a cgMAP object to set up the map    projection space. A map coordinate space must be in effect at the time the    Draw method of this object is used.   ", "", "Graphics Map Projections", "     Change History: <span class= code-output >  Written by David W. Fanning, 7 November 2011.</span> <span class= code-output >  Modified AutoDrawGrid method to update, better-working method in cgMap_Grid. 28 Dec 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmapgrid__define.html#cgMapGrid::INIT", "cgMapGrid::INIT", 'routine in <a href="coyote/cgmapgrid__define.html">cgmapgrid__define.pro</a>', "cgmapgrid__define.pro", "", "cgMapGrid::INIT", "   The initialization method for the object.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. The DRAW method of the object is called in cgWindow.  AUTODRAWGRID        If this keyword is set, the grid latitude and longitude values         are automatically calculated from the mapCoord object ranges and drawn         appropriately. Most keywords are ignored when auto drawing the grid.  BCOLOR        The name of the color to draw box axes with.  BOX_AXES        Set this keyword to draw a box-style axes around the map.  CLIP_TEXT        Set this keyword to a zero value to turn off clipping of text labels.         By default, text labels are clipped. This keyword is ignored if the         BOX_AXES keyword is set.  CHARSIZE        Set this keyword to the size of characters used for the labels.  COLOR        The name of the color to draw the grid lines in.  FILL_HORIZON        Set this keyword to fill the current map horizon.  FORMAT        Set this keyword to a string format for formatting the grid         labels (e.g., '(F0.2)')  FUZZY        This keyword applies only if the MAP_STRUCTURE keyword is used. Set the         keyword to a value that is a percentage of the current data range.         This percentage of the range is added to or subtracted from the         values used to determine if the label is  inside  the boundary.         It allows you to be a little less exact when selecting inside         points. There are occasional aesthetic reasons for allowing fuzzy         boundaries. A reasonable value for fuzziness might be 0.0125.  LINESTYLE        Set this keyword to the type of linestyle desired. See Graphics Keywords in         the on-line help for additional information.  HORIZON        Set this keyword to draw the current map horizon.  INCREMENT        Set this keyword to the spacing between the graticle points.  LABEL        Set this keyword to an integer, n, that labels every n parallels and meridians.         For example, LABEL=3 will label every 3rd line. Default is 1.  LATALIGN        This keyword controls the alignment of the text baseline for latitude         labels. A value of 0.0 left justifies the label, 1.0 right justifies         it, and 0.5 centers it. This keyword is ignored if the BOX_AXES keyword is set.  LATDEL        Set this keyword equal to the spacing (in degrees) between parallels of         latitude in the grid. If this keyword is not set, a default value of 5 is used.  LATLAB        The longitude at which to place latitude labels. The default is the center         longitude on the map. This keyword is ignored if the BOX_AXES keyword is set.  LATNAMES        Set this keyword equal to an array specifying the names to be used for the         latitude labels. By default, this array is automatically generated in units         of degrees. The LATNAMES array can be either type string or any single numeric         type, but should not be of mixed type.When LATNAMES is specified, the LATS         keyword must also be specified.  LATS        Set this keyword equal to a one or more element vector of latitudes for which         lines will be drawn (and optionally labeled). If LATS is omitted, appropriate         latitudes will be generated based on the value of the (optional) LATDEL keyword.         If LATS is set to a single value, that latitude and a series of automatically         generated latitudes will be drawn (and optionally labeled).  LCOLOR        Set this to the name of the label color to use in labeling grid lines.         By default, the same as COLOR, or if BOX_AXIS is set, then same as BCOLOR.  LONALIGN        This keyword controls the alignment of the text baseline for longitude         labels. A value of 0.0 left justifies the label, 1.0 right justifies         it, and 0.5 centers it. This keyword is ignored if the BOX_AXES keyword is set.  LONDEL        Set this keyword equal to the spacing (in degrees) between parallels of         longitude in the grid. If this keyword is not set, a default value of 10 is used.  LONLAB       The latitude at which to place longitude labels. The default is the center        latitude on the map. This keyword is ignored if the BOX_AXES keyword is set.  LONNAMES        Set this keyword equal to an array specifying the names to be used for the         longitude labels. By default, this array is automatically generated in units         of degrees. The LONNAMES array can be either type string or any single numeric         type, but should not be of mixed type.When LONNAMES is specified, the LONS         keyword must also be specified.  LONS        Set this keyword equal to a one or more element vector of longitudes for which         lines will be drawn (and optionally labeled). If LONS is omitted, appropriate         longitudes will be generated based on the value of the (optional) LONDEL keyword.         If LONS is set to a single value, that longitudes and a series of automatically         generated longitudes will be drawn (and optionally labeled).  THICK        Set this keyword to the thickness of the line used to draw the grid.   _EXTRAmapCoord       A map coordinate object that will set up a map coordinate data space.        Required to convert lat/lon values to projected meter space. A cgMap object.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapgrid__define.html#cgMapGrid::AddCmd", "cgMapGrid::AddCmd", 'routine in <a href="coyote/cgmapgrid__define.html">cgmapgrid__define.pro</a>', "cgmapgrid__define.pro", "", "cgMapGrid::AddCmd", "   Adds the object as a command (the DRAW method is called) in a cgWindow    resizeable graphics window.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapgrid__define.html#cgMapGrid::AutoDrawGrid", "cgMapGrid::AutoDrawGrid", 'routine in <a href="coyote/cgmapgrid__define.html">cgmapgrid__define.pro</a>', "cgmapgrid__define.pro", "", "cgMapGrid::AutoDrawGrid", "   Calculates suitable latitude and longitude lines that run through the    map range and suggests a default position for labeling such lines.   ", "SUCCESS        Will be set to 1 on return, if the operation was successful. Otherwise,         this value is set to 0.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapgrid__define.html#cgMapGrid::Draw", "cgMapGrid::Draw", 'routine in <a href="coyote/cgmapgrid__define.html">cgmapgrid__define.pro</a>', "cgmapgrid__define.pro", "", "cgMapGrid::Draw", "   Draws the map grid by calling cgMap_Grid.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapgrid__define.html#cgMapGrid::GetProperty", "cgMapGrid::GetProperty", 'routine in <a href="coyote/cgmapgrid__define.html">cgmapgrid__define.pro</a>', "cgmapgrid__define.pro", "", "cgMapGrid::GetProperty", "   This method allows the user to get various properties of the object. In general,    the same keywords that are used for the INIT method can be used here.  ", "AUTODRAWGRIDBOX_AXESCLIP_TEXTCHARSIZECOLORFILL_HORIZONFIXED_cgMapGridFORMATLCOLORLINESTYLETHICKHORIZONINCREMENTLABELLATALIGNLATDELLATLABLATNAMESLATSLONALIGNLONDELLONLABLONNAMESLONSMAP_OBJECTMAP_STRUCTURE_REF_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapgrid__define.html#cgMapGrid::SetProperty", "cgMapGrid::SetProperty", 'routine in <a href="coyote/cgmapgrid__define.html">cgmapgrid__define.pro</a>', "cgmapgrid__define.pro", "", "cgMapGrid::SetProperty", "   This method allows the user to set various properties of the object. In general,    the same keywords that are used for the INIT method can be used here.  ", "AUTODRAWGRIDBOX_AXESCLIP_TEXTCHARSIZECOLORDRAWFILL_HORIZONFIXED_cgMapGridFORMATLINESTYLEHORIZONINCREMENTLABELLATALIGNLATDELLATLABLATNAMESLATSLCOLORLONALIGNLONDELLONLABLONNAMESLONSTHICK_EXTRA", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapgrid__define.html#cgMapGrid::CLEANUP", "cgMapGrid::CLEANUP", 'routine in <a href="coyote/cgmapgrid__define.html">cgmapgrid__define.pro</a>', "cgmapgrid__define.pro", "", "cgMapGrid::CLEANUP", "   This is the clean-up routine for the object.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapgrid__define.html#cgMapGrid__DEFINE", "cgMapGrid__DEFINE", 'routine in <a href="coyote/cgmapgrid__define.html">cgmapgrid__define.pro</a>', "cgmapgrid__define.pro", "", "cgMapGrid__DEFINE", "   This is the class definition module. Structures used to manipulate    map projection and map datum information are also created here.   ", "class       Occasionally, it is useful to have an object class definition as        a structure variable. Using this output keyword will allow that.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgmapplots__define.html", "cgmapplots__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmapplots__define.pro", "   FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   This object is a wrapper for the cgPlotS routine in IDL. It provides a simple    way to allow lines and symbols to be placed as annotations on map projections    created with the cgMap coordinate object. Note that it may be easier and more    convenient to use cgPlotS, if you don't need a complete object solution.   ", "", "Graphics Map Projections", "     Change History: <span class= code-output >  Written by David W. Fanning, 21 November 2011.</span> <span class= code-output >  Never tested, for some reason. Now, several bugs have been fixed and the</span> <span class= code-output >     program works as advertised. 17 Sept 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmapplots__define.html#cgMapPlotS::INIT", "cgMapPlotS::INIT", 'routine in <a href="coyote/cgmapplots__define.html">cgmapplots__define.pro</a>', "cgmapplots__define.pro", "", "cgMapPlotS::INIT", "   The initialization method for the object.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. The DRAW method of the object is called in cgWindow.  CLIP        The coordinates of a rectangle used to clip the graphics output.         The rectangle is specified as a vector of the form [X0, Y0, X1, Y1],         giving coordinates of the lower left and upper right corners,         respectively. The default clipping rectangle is the plot window set         up by the cgMap object.  COLOR        The name of the color to draw the grid lines in.  LATS        The latitude values to draw.  LINESTYLE        Set this keyword to the type of linestyle desired. See Graphics Keywords in         the on-line help for additional information.  LONS        The longitude values to draw.  NOCLIP        Set this keyword to supress clipping of the plot.  PSYM        The plotting symbol to use for the plot. Can use any symbol available in         the Coyote Library routine SYMCAT.  SYMSIZE        Set this keyword to the size of symbols.  T3D        Set this graphics keyword if you wish to draw using the T3D transformation matrix.  THICK        Set this keyword to the thickness of the line used to draw the grid.  UVCOORDS        Set this keyword if the LONS and LATS are specified in UV (XY) coordinates, rather than         longitude and latitude coordinates.  ZVALUE        Set this keyword to the ZVALUE where the output should be drawn.  _EXTRA        Any keywords appropriate for superclass objects are also permitted.  mapCoord       A map coordinate object that will set up a map coordinate data space.        Required to convert lat/lon values to projected meter space. A cgMap object.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapplots__define.html#cgMapPlotS::AddCmd", "cgMapPlotS::AddCmd", 'routine in <a href="coyote/cgmapplots__define.html">cgmapplots__define.pro</a>', "cgmapplots__define.pro", "", "cgMapPlotS::AddCmd", "   Adds the object as a command (the DRAW method is called) in a cgWindow    resizeable graphics window.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapplots__define.html#cgMapPlotS::Draw", "cgMapPlotS::Draw", 'routine in <a href="coyote/cgmapplots__define.html">cgmapplots__define.pro</a>', "cgmapplots__define.pro", "", "cgMapPlotS::Draw", "   Draws the line or symbol on the map projection.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapplots__define.html#cgMapPlotS::GetProperty", "cgMapPlotS::GetProperty", 'routine in <a href="coyote/cgmapplots__define.html">cgmapplots__define.pro</a>', "cgmapplots__define.pro", "", "cgMapPlotS::GetProperty", "   This method allows the user to get various properties of the object.    The same keywords that are used for the INIT method can be used here.   ", "CLIP        The coordinates of a rectangle used to clip the graphics output.         The rectangle is specified as a vector of the form [X0, Y0, X1, Y1],         giving coordinates of the lower left and upper right corners,         respectively. The default clipping rectangle is the plot window set         up by the cgMap object.  COLOR        The name of the color to draw the grid lines in.  LATS        The latitude values to draw.  LINESTYLE        Set this keyword to the type of linestyle desired. See Graphics Keywords in         the on-line help for additional information.  LONS        The longitude values to draw.  NOCLIP        Set this keyword to supress clipping of the plot.  MAPCOORD        Get the map coordinate object.  PSYM        The plotting symbol to use for the plot. Can use any symbol available in         the Coyote Library routine SYMCAT.  SYMSIZE        Set this keyword to the size of symbols.  T3D        Set this graphics keyword if you wish to draw using the T3D transformation matrix.  THICK        Set this keyword to the thickness of the line used to draw the grid.  UVCOORDS        Set this keyword if the LONS and LATS are specified in UV (XY) coordinates, rather than         longitude and latitude coordinates.  ZVALUE        Set this keyword to the ZVALUE where the output should be drawn.  _REF_EXTRA        Any keywords appropriate for superclass objects are also permitted.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapplots__define.html#cgMapPlotS::SetProperty", "cgMapPlotS::SetProperty", 'routine in <a href="coyote/cgmapplots__define.html">cgmapplots__define.pro</a>', "cgmapplots__define.pro", "", "cgMapPlotS::SetProperty", "   This method allows the user to set various properties of the object.    The same keywords that are used for the INIT method can be used here.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. The DRAW method of the object is called in cgWindow.  CLIP        The coordinates of a rectangle used to clip the graphics output.         The rectangle is specified as a vector of the form [X0, Y0, X1, Y1],         giving coordinates of the lower left and upper right corners,         respectively. The default clipping rectangle is the plot window set         up by the cgMap object.  COLOR        The name of the color to draw the grid lines in.  LATS        The latitude values to draw.  LINESTYLE        Set this keyword to the type of linestyle desired. See Graphics Keywords in         the on-line help for additional information.  LONS        The longitude values to draw.  NOCLIP        Set this keyword to supress clipping of the plot.  PSYM        The plotting symbol to use for the plot. Can use any symbol available in         the Coyote Library routine SYMCAT.  SYMSIZE        Set this keyword to the size of symbols.  T3D        Set this graphics keyword if you wish to draw using the T3D transformation matrix.  THICK        Set this keyword to the thickness of the line used to draw the grid.  UVCOORDS        Set this keyword if the LONS and LATS are specified in UV (XY) coordinates, rather than         longitude and latitude coordinates.  ZVALUE        Set this keyword to the ZVALUE where the output should be drawn.  _EXTRA        Any keywords appropriate for superclass objects are also permitted.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapplots__define.html#cgMapPlotS::CLEANUP", "cgMapPlotS::CLEANUP", 'routine in <a href="coyote/cgmapplots__define.html">cgmapplots__define.pro</a>', "cgmapplots__define.pro", "", "cgMapPlotS::CLEANUP", "   This is the clean-up routine for the object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapplots__define.html#cgMapPlotS__DEFINE", "cgMapPlotS__DEFINE", 'routine in <a href="coyote/cgmapplots__define.html">cgmapplots__define.pro</a>', "cgmapplots__define.pro", "", "cgMapPlotS__DEFINE", "   This is the class definition module.   ", "class       Occasionally, it is useful to have an object class definition as        a structure variable. Using this output keyword will allow that.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgmapvector__define.html", "cgmapvector__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmapvector__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmapvector__define.html#cgMapVector::INIT", "cgMapVector::INIT", 'routine in <a href="coyote/cgmapvector__define.html">cgmapvector__define.pro</a>', "cgmapvector__define.pro", "   FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgMapVector::INIT", "   This object allows vectors (arrows) to be placed as annotations on map    projections created with the cgMap coordinate object.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. The DRAW method of the object is called in cgWindow.  CLIP        The coordinates of a rectangle used to clip the graphics output.         The rectangle is specified as a vector of the form [X0, Y0, X1, Y1],         giving coordinates of the lower left and upper right corners,         respectively. The default clipping rectangle is the plot window set         up by the cgMap object.  COLOR        The name of the color to draw the arrows lines in.  HSIZE        The value of this keyword sets the length of the arrowhead. See the documenation         for the ARROW command in IDL for further explanation.  LATS        The latitude values where the vector is to be drawn.  LENGTH        The length of the UV vectors. The default value calculates a maximum length,         which is the larger of either the latitude or longitude range. This value is         then divided by 100. To scale the UV values, the values are divided by the         maximum magnitude of the UV vectors and then multiplied by the length. The code         looks like this for the default case: <span class= code-output >   maxlength = Max( [Max(lons)-Min(lons), Max(lats)-Min(lats)] )</span> <span class= code-output >   length = maxlength / 100.0</span> <span class= code-output >   maxMagnitude = Max(Sqrt(u^2 + v^2))</span> <span class= code-output >   uscaled = (u/maxMagnitude) * length</span> <span class= code-output >   vscaled = (v/maxMagnitude) * length</span>        The default length value is likely to be too large for polar plots, but seems         adequate for other map projections. If you need to adjust the length, get the         current length with the GetProperty method and the LENGTH keyword, and adjust         accordingly. The length is not set finally, until the vectors are first drawn.  LINESTYLE        Set this keyword to the type of linestyle desired. See Graphics Keywords in         the on-line help for additional information.  LONS        The longitude values where the vector is to be drawn.  NOCLIP        Set this keyword to supress clipping of the plot.  PALETTE        A (256x3) color palette containing the RGB color vectors to use for coloring the vectors         according to the magitude of the vectors. If the color palette is not 256 colors in length         then the magitude is scaled into the number of colors available. If a color palette is         used, then the Color keyword is ignored.  SOLID        Set this keyword to draw solid arrow heads.  T3d        Set this graphics keyword if you wish to draw using the T3D transformation matrix.  THICK        Set this keyword to the thickness of the line used to draw the grid.  UMAGNITUDE        The magnitude of the vector in the U direction.  UVCOORDS        Set this keyword if the LONS and LATS are specified in UV (XY) coordinates, rather than         longitude and latitude coordinates.  VMAGNITUDE        The magnitude of the vector in the V direction.  ZVALUE        Set this keyword to the ZVALUE where the output should be drawn.  _EXTRA        Any keywords appropriate for superclass objects are also permitted.   mapCoord       A map coordinate object that will set up a map coordinate data space.        Required to convert lat/lon values to projected meter space. A cgMap object.   ", "Graphics Map Projections", "     Change History: <span class= code-output >  Written by David W. Fanning, 21 November 2011.</span> <span class= code-output >  Tested and bugs fixed. 17 Sept 2012. DWF.</span> <span class= code-output >  Bug fix in draw method when passing lat/lon vectors. 6 Jan 2013. DWF.</span> <span class= code-output >  Added PALETTE keyword to allow the vectors to be drawn in colors scaled</span> <span class= code-output >     to vector magnitude. 6 Jan 2012. DWF.</span> <span class= code-output >  The CLIP keyword was not working correctly and was fixed 29 April 2013. DWF.</span>        Copyright (c) 2011, Fanning Software Consulting, Inc.    The initialization method for the object.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgmapvector__define.html#cgMapVector::DrawArrow", "cgMapVector::DrawArrow", 'routine in <a href="coyote/cgmapvector__define.html">cgmapvector__define.pro</a>', "cgmapvector__define.pro", "", "cgMapVector::DrawArrow", "   This is a heavily modified IDL ARROW procedure, with extra keywords added    and the COLOR keyword modified to accept color names. It assumes drawing    in the device coordinate space, unless the DATA or NORMALIZED keywords    are set.     Copyright (c) 1993-2004, Research Systems, Inc.  All rights reserved.   ", "CLIPCOLOR        The name of the color to draw the grid lines in.  DATA        Set this keyword to draw in the data coordinate space.  HSIZEHTHICKLINESTYLE        The graphics linestyle to draw the vector in.  NORMALIZED        Set this keyword to draw in the normalized data coordinate space.  THICK        Set this keyword to the thickness of the line used to draw the grid.  SOLID        Set this keyword to fill the arrow head with a solid color. Otherwise,         draw the arrow head as an outline.  _EXTRA        Any keywords appropriate PlotS or PolyFill.  x0         The X value at the butt end of the arrow.  y0         The Y value at the butt end of the arrow.  x1         The X value at the tip end of the arrow.  y1         The Y value at the tip end of the arrow.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapvector__define.html#cgMapVector::Draw", "cgMapVector::Draw", 'routine in <a href="coyote/cgmapvector__define.html">cgmapvector__define.pro</a>', "cgmapvector__define.pro", "", "cgMapVector::Draw", "   Draws the vectors on the map projection.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapvector__define.html#cgMapVector::GetProperty", "cgMapVector::GetProperty", 'routine in <a href="coyote/cgmapvector__define.html">cgmapvector__define.pro</a>', "cgmapvector__define.pro", "", "cgMapVector::GetProperty", " This method allows the user to get various properties of the object.  The same keywords that are used for the INIT method can be used here.   ", "CLIP        The coordinates of a rectangle used to clip the graphics output.         The rectangle is specified as a vector of the form [X0, Y0, X1, Y1],         giving coordinates of the lower left and upper right corners,         respectively. The default clipping rectangle is the plot window set         up by the cgMap object.  COLOR        The name of the color to draw the grid lines in.  HSIZE        The value of this keyword sets the length of the arrowhead. See the documenation         for the ARROW command ind IDL for further explanation.  LATS        The latitude values where the vector is to be drawn.  LENGTH        The U and V vectors are mutiplied by LENGTH before they are used         to calculate the (x1,y1) endpoint of the vector. By default, the length is set         to 1/100th of the XRANGE of the MapCoord object. This means that the maximum         length of a vector will be approximately LENGTH * SQRT(2).  LINESTYLE        Set this keyword to the type of linestyle desired. See Graphics Keywords in         the on-line help for additional information.  LONS        The longitude values where the vector is to be drawn.  MAPCOORD        The map coordinate for the object.  NOCLIP        Set this keyword to supress clipping of the plot.  SOLID        This keyword is set if solid arrow heads are currently being drawn.  T3D        Set this graphics keyword if you wish to draw using the T3D transformation matrix.  THICK        Set this keyword to the thickness of the line used to draw the grid.  UMAGNITUDE        The magnitude of the vector in the U direction.  UVCOORDS        Set this keyword if the LONS and LATS are specified in UV (XY) coordinates, rather than         longitude and latitude coordinates.  VMAGNITUDE        The magnitude of the vector in the V direction.  ZVALUE        Set this keyword to the ZVALUE where the output should be drawn.  _REF_EXTRA        Any keywords appropriate for superclass objects are also permitted.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapvector__define.html#cgMapVector::SetProperty", "cgMapVector::SetProperty", 'routine in <a href="coyote/cgmapvector__define.html">cgmapvector__define.pro</a>', "cgmapvector__define.pro", "", "cgMapVector::SetProperty", "   This method allows the user to set various properties of the object.    The same keywords that are used for the INIT method can be used here.   ", "ADDCMD        If this keyword is set, the object is added to the resizeable graphics         window, cgWindow. The DRAW method of the object is called in cgWindow.  CLIP        The coordinates of a rectangle used to clip the graphics output.         The rectangle is specified as a vector of the form [X0, Y0, X1, Y1],         giving coordinates of the lower left and upper right corners,         respectively. The default clipping rectangle is the plot window set         up by the cgMap object.  COLOR        The name of the color to draw the grid lines in.  HSIZE        The value of this keyword sets the length of the arrowhead. See the documenation         for the ARROW command ind IDL for further explanation.  LATS        The latitude values where the vector is to be drawn.  LENGTH        The U and V vectors are mutiplied by LENGTH before they are used         to calculate the (x1,y1) endpoint of the vector. By default, the length is set         to 1/100th of the XRANGE of the MapCoord object. This means that the maximum         length of a vector will be approximately LENGTH * SQRT(2).  LINESTYLE        Set this keyword to the type of linestyle desired. See Graphics Keywords in         the on-line help for additional information.  LONS        The longitude values where the vector is to be drawn.  MAPCOORD        The map coordinate for the object.  NOCLIP        Set this keyword to supress clipping of the plot.  PALETTE        A (256x3) color palette containing the RGB color vectors to use for coloring the vectors         according to the magitude of the vectors. If the color palette is not 256 colors in length         then the magitude is scaled into the number of colors available. If a color palette is         used, then the Color keyword is ignored.  SOLID        Set this keyword to draw solid arrow heads.  T3D        Set this graphics keyword if you wish to draw using the T3D transformation matrix.  THICK        Set this keyword to the thickness of the line used to draw the grid.  UMAGNITUDE        The magnitude of the vector in the U direction.  UVCOORDS        Set this keyword if the LONS and LATS are specified in UV (XY) coordinates, rather than         longitude and latitude coordinates.  VMAGNITUDE        The magnitude of the vector in the V direction.  ZVALUE        Set this keyword to the ZVALUE where the output should be drawn.  _EXTRA        Any keywords appropriate for superclass objects are also permitted.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapvector__define.html#cgMapVector::CLEANUP", "cgMapVector::CLEANUP", 'routine in <a href="coyote/cgmapvector__define.html">cgmapvector__define.pro</a>', "cgmapvector__define.pro", "", "cgMapVector::CLEANUP", "   This is the clean-up routine for the object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgmapvector__define.html#cgMapVector__DEFINE", "cgMapVector__DEFINE", 'routine in <a href="coyote/cgmapvector__define.html">cgmapvector__define.pro</a>', "cgmapvector__define.pro", "", "cgMapVector__DEFINE", "   This is the class definition module.   ", "class       Occasionally, it is useful to have an object class definition as        a structure variable. Using this output keyword will allow that.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgminmax.html", "cgminmax.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgminmax.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgminmax.html#cgMinMax", "cgMinMax", 'routine in <a href="coyote/cgminmax.html">cgminmax.pro</a>', "cgminmax.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgMinMax", "    Prints the minimum and maximum of an IDL variable.   ", "NAN       Set this keyword to ignore NANs in the variable. Default: 0.  TEXT       Prepend this string to the output of MinMax. Default:  MinMax:  .   variable       The variable whose minimum and maximum you wish to know.   ", "Utility", "     Written, 6 August 2012.        Copyright (c) 2012, Fanning Software Consulting, Inc.     The MinMax routine gives the range of the variable:  <span class= code-prompt >IDL&gt;</span> a = Findgen(11)  <span class= code-prompt >IDL&gt;</span> MinMax, a, TEXT='Variable A:' <span class= code-output > Variable A:   0    11</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgmonths.html", "cgmonths.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgmonths.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgmonths.html#cgMonths", "cgMonths", 'routine in <a href="coyote/cgmonths.html">cgmonths.pro</a>', "cgmonths.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgMonths", " This is a utility program for obtaining the months of the year in various string formats.  It is primarily used for labeling axes on graphics plots.   ", "FIRSTLETTER          Set this keyword if you wish to return the month as with its first letter capitalized,           for example,  August . Keywords may be used in conjunction with other keywords.  ALLCAPS          Set this keyword if you wish to return the month in all capital letters,           for example,  AUGUST . Keywords may be used in conjunction with other keywords.  ABBREVIATION          Set this keyword if you wish to return the month as a three letter abbreviation,           for example,  aug . Keywords may be used in conjunction with other keywords.  LOWCASE          Set this keyword if you wish to return the month in all lower case letters,           for example,  august . Keywords may be used in conjunction with other keywords.   index         The index of the month you are interested in returning. An integer or          integer array from 1 to 12.   ", "Utilities", "     Change History: <span class= code-output >  Written, 8 Nov 2007 by David W. Fanning.</span>       Copyright (c) 2007-2013, Fanning Software Consulting, Inc.      Here is how to use this program:   <span class= code-prompt >IDL&gt;</span> Print, cgMonths([2,4,6], /FirstLetter, /Abbreviation) <span class= code-output >       Feb Apr Jun</span>      The program returns a list of months as a string or string array, depending upon     which keywords are set.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgncdfmap.html", "cgncdfmap.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgncdfmap.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com/</span>  ", "", "   The purpose of this function is to translate map projection information    found in a netCDF file into a map coordinate object (cgMap) that can be    used to georeference images with a map data coordinate system. The Coyote    Library is required.       It is not possible to have a one-to-one mapping between every netCDF file and a map projection     in IDL, since IDL has a limited number of map projections and datums available. And, even at that,     I have not implemented all of IDL's map projections or datums, only those that I thought were most     likely to be encountered in my own work. If you run into a netCDF file that does not work in this     code (either because of an error in the code or because it is not supported), please contact me.     I am interested in supporting as many netCDF files as possible and I will take pains to do so if     I know they are needed.  ", "", "Graphics Map Projections", "     Converted from old ncdf_Coord program in Catalyst Library to run with Coyote Graphics routines.         9 November 2011. David W. Fanning.        Copyright (c) 2011, Fanning Software Consulting, Inc.      To create a map coordinate from a netCDF file from NSIDC: <span class= code-output >  file = 'C:\IDL\data\netCDF\jun_2004_amsr_e_bt.nc'</span> <span class= code-output >  mapCoord = cgNCDFMap(file, /Continents, /Grid)</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgncdfmap.html#cgNCDFMap_GetMapUnit", "cgNCDFMap_GetMapUnit", 'routine in <a href="coyote/cgncdfmap.html">cgncdfmap.pro</a>', "cgncdfmap.pro", "", "cgNCDFMap_GetMapUnit", "   Finds the correct projected map unit from the file. Assumes meters.   ", "SILENT        If set, do not report errors.  varWithMap       The name of the variable in the netCDF file that contains map        projection information.  fileObj       The netCDF file object (ncdf_file) which can parse the netCDF file.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgncdfmap.html#cgNCDFMap_FindBoundary", "cgNCDFMap_FindBoundary", 'routine in <a href="coyote/cgncdfmap.html">cgncdfmap.pro</a>', "cgncdfmap.pro", "", "cgNCDFMap_FindBoundary", "   Finds the boundary (XRANGE and YRANGE) of the map coordinate space    and assigns these to the map object.   ", "SILENT        If set, do not report errors.  XRANGE        The discovered X projected meter range of the map projection.  YRANGE        The discovered Y projected meter range of the map projection.  USE_LATLON        If this keyword is set, the boundary ranges will be forced to be determined         from the latitude and longitude arrays in the file.  varWithMap       The name of the variable in the netCDF file that contains map        projection information.  thisMapVar       The name of the map projection variable identified by the        grid_mapping attribute of the varWithMap variable.  fileObj       The netCDF file object (ncdf_file) which can parse the netCDF file.  mapCoord       The map coordinate object we are creating. The XRange and YRange        of the discovered boundaries are assigned to this object.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgncdfmap.html#cgNCDFMap_EllipseAxes", "cgNCDFMap_EllipseAxes", 'routine in <a href="coyote/cgncdfmap.html">cgncdfmap.pro</a>', "cgncdfmap.pro", "", "cgNCDFMap_EllipseAxes", "   Finds the length of the semi-major and semi-minor axes of the    ellipsoid used in the netCDF file.   ", "SILENT        If set, do not report errors.  SEMIMAJOR_AXIS        The length of the semi-major axis.  SEMIMINOR_AXIS        The length of the semi-minor axis.  varWithMap       The name of the variable in the netCDF file that contains map        projection information.  thisMapVar       The name of the map projection variable identified by the        grid_mapping attribute of the varWithMap variable.  fileObj       The netCDF file object (ncdf_file) which can parse the netCDF file.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgncdfmap.html#cgNCDFMap", "cgNCDFMap", 'routine in <a href="coyote/cgncdfmap.html">cgncdfmap.pro</a>', "cgncdfmap.pro", "", "cgNCDFMap", "   The purpose of this function is to translate map projection information    found in a netCDF file into a map coordinate object (cgMap) that can be    used to georeference images with a map data coordinate system. The Coyote    Library is required.   ", "GCOLOR         The name of a color the map grid should be displayed with. The default          is  gray . Color names are those supported by cgColor.  GRID         If a cgMap object is made successfully, then setting this keyword          will add a cgMapGrid object to the cgMap object.  CONTINENTS         If a cgMap object is made successfully, then setting this keyword          will add a cgMapContinents object to the cgMap object.  CCOLOR         The name of a color the map continents should be displayed with. The default          is  charcoal . Color names are those supported by cgColor.  MCOLOR          The name of a color the map should be displayed in. (Normally the map           border and map title are displayed in this color.)  ONIMAGE          Set this keword if the map object is to get its position from the last           cgImage command issued.  SILENT          IDL cannot map every GeoTiff image to a supported map projection or datum.           Normally, if the GeoTIFF image is unsupported, an error message is issued.           Setting this keyword will suppress such error messages. If you do this, you           MUST check the SUCCESS keyword to see if the program ran successfully. (Of           course, it is a good idea to check it in any case!)  SUCCESS          An output variable that will contain a 1 if the map coordinate object was           created successfully. Or to a 0 if it was not created successfully.  TITLE          The title of the map projection.  USE_LATLON          If this keyword is set, the boundary ranges will be forced to be determined           from the latitude and longitude arrays in the file.  XRANGE          The discovered X projected meter range of the map projection.  YRANGE          The discovered Y projected meter range of the map projection.  ncdf_filename       The name of a netCDF file containing map projection information from        which a cgMap object can be created.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgnormalize.html", "cgnormalize.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgnormalize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgnormalize.html#cgNormalize", "cgNormalize", 'routine in <a href="coyote/cgnormalize.html">cgnormalize.pro</a>', "cgnormalize.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgNormalize", " This is a utility routine to calculate the scaling vector required to position a  graphics primitive of specified range at a specific position in an arbitray coordinate  system. The scaling vector is given as a two-element array like this: <span class= code-output >  scalingVector = [translationFactor, scalingFactor]</span>  The scaling vector should be used with the [XYZ]COORD_CONV keywords of a graphics object  or model. For example, if you wanted to scale an X axis into the coordinate range of  -0.5 to 0.5, you might type something like this: <span class= code-output >  xAxis-&gt;GetProperty, Range=xRange</span> <span class= code-output >  xScale = FSC_Normalize(xRange, Position=[-0.5, 0.5])</span> <span class= code-output >  xAxis, XCoord_Conv=xScale</span>  ", "Position       A two-element vector specifying the location in the coordinate system you        are scaling into. The vector [0.0,1.0] is used by default if Position is not        specified.   range       A two-element vector specifying the data range.   ", "Graphics Utility", "     Change History: <span class= code-output > Written by:  David W. Fanning, OCT 1997.</span> <span class= code-output > Fixed a problem with illegal divide by zero. 21 April 2005. DWF.</span> <span class= code-output > Fixed a problem when range[0] is greater than range[1]. 11 July 2006. DWF.</span> <span class= code-output > Renamed to FSC_Normalize to avoid conflicts with 10,000 other programs named NORMALIZE. 17 October 2008. DWF.</span> <span class= code-output > Renamed to cgNormalize 6 February 2013. DWF.</span>       Copyright (c)1997-2013, Fanning Software Consulting, Inc.      Here is how to use this program: <span class= code-output >  xAxis-&gt;GetProperty, Range=xRange</span> <span class= code-output >  xScale = FSC_Normalize(xRange, Position=[-0.5, 0.5])</span> <span class= code-output >  xAxis, XCoord_Conv=xScale</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgnumber_formatter.html", "cgnumber_formatter.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgnumber_formatter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgnumber_formatter.html#cgNumber_Formatter", "cgNumber_Formatter", 'routine in <a href="coyote/cgnumber_formatter.html">cgnumber_formatter.pro</a>', "cgnumber_formatter.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgNumber_Formatter", " This is a utility routine format a number into a string. It is used primarily for  formatting numbers that will appear in text widgets in widget programs.   ", "DECIMALS        Set this keyword to the number of decimal places to be included to the right of         the decimal point in floats and doubles. Set to 2 by default. In numbers with         absolute values between 0 and 1, the number of decimals is equivalent to the         number of significant digits. See the example below.   number       The number to be turned into a string. May be any data type except complex,        double complex, pointer or object. May be an array of numbers.   ", "Utilities", "     Change History: <span class= code-output >  Written, 8 November 2012 by David W. Fanning from the retired Number_Formatter program.</span> <span class= code-output >  The algorithm I was using for numbers between 0 and 1 used a LT in the Where function to</span> <span class= code-output >      find an index. It appears this should have been a LE, instead. 11 Jan 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Here is how to use this program:    <span class= code-prompt >IDL&gt;</span> array = [45.123456, -30.123456, !Values.F_Nan, !Values.F_Infinity, $ <span class= code-output >                 0.00123456, -0.00123456, 0.0123456, 0.123456, 1.234567]</span>    <span class= code-prompt >IDL&gt;</span> FOR j=0,N_Elements(array)-1 DO Print, Number_Formatter(array[j], Decimals=4) <span class= code-output >   45.1235</span> <span class= code-output >   -30.1235</span> <span class= code-output >   NaN</span> <span class= code-output >   Inf</span> <span class= code-output >   0.001235</span> <span class= code-output >   -0.001235</span> <span class= code-output >   0.01235</span> <span class= code-output >   0.1235</span> <span class= code-output >   1.2346</span>      A string with the formatted number or numbers is returned.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgobj_isa.html", "cgobj_isa.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgobj_isa.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgobj_isa.html#cgOBJ_ISA", "cgOBJ_ISA", 'routine in <a href="coyote/cgobj_isa.html">cgobj_isa.pro</a>', "cgobj_isa.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgOBJ_ISA", " The purpose of this utility routine is to check to be sure the object argument is  valid and belongs to the specified object class. It is more useful than the built-in  Obj_Isa function, because it can handle undefined variable arguments.   ", "object       The object reference to check. It may be undefined. This variable may        also be an array.  classname       The object class name. If undefined, the function always returns false.   ", "Utilities", "     Change History: <span class= code-output >  Written, 4 Novemeber 2012 by David W. Fanning.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Here is how to use this program:   <span class= code-prompt >IDL&gt;</span> IF cgObj_ISA(object, 'cgKML_Feature') THEN object -&gt; SetProperty, PLACENAME='Boulder'      The function returns a 0 to indicate FALSE or a 1 to indicate TRUE. If passed     an array of objects, it will return an array of 0s and 1s for each object.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgoplot.html", "cgoplot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgoplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgoplot.html#cgOPlot", "cgOPlot", 'routine in <a href="coyote/cgoplot.html">cgoplot.pro</a>', "cgoplot.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgOPlot", " The purpose of cgOPlot is to create a drop-in replacement for the traditional  IDL command, OPlot. It simply calls cgPlot with the OVERPLOT keyword set.   The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD        Set this keyword to add the command to the resizeable graphics window cgWindow.  CHARSIZE        The character size for axes annotations. Uses cgDefCharSize to select default         character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR        If this keyword is a string, the name of the data color. By default, 'black'.         Color names are those used with cgColor. Otherwise, the keyword is assumed         to be a color index into the current color table.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46.  SYMCOLOR        If this keyword is a string, the name of the symbol color. By default, 'black'.         Otherwise, the keyword is assumed to be a color index into the current color table.  SYMSIZE        The symbol size.  _REF_EXTRA        Any keyword appropriate for the IDL OPlot command is allowed in the program.   x         If X is provided without Y, a vector representing the dependent values to be          plotted If both X and Y are provided, X is the independent parameter and          Y is the dependent parameter to be plotted.  y         A vector representing the dependent values to be plotted.   ", "Graphics", "     Change History: <span class= code-output >  Written, 28 February 2012.</span> <span class= code-output >  Modified to make sure both input arguments are defined before call to cgPlot. 25 May 2012. DWF.</span> <span class= code-output >  Typo in the keyword inheritance code cause keywords to be ignorned. Fixed. 5 June 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Use as you would use the IDL OPLOT command: <span class= code-output >  cgPlot, cgDemoData(17), Color='olive'</span> <span class= code-output >  cgPlot, cgDemoData(17), Color='blue', SymColor='red', PSym=-16, /Overplot</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgotsu_threshold.html", "cgotsu_threshold.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgotsu_threshold.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgotsu_threshold.html#cgOTSU_THRESHOLD", "cgOTSU_THRESHOLD", 'routine in <a href="coyote/cgotsu_threshold.html">cgotsu_threshold.pro</a>', "cgotsu_threshold.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgOTSU_THRESHOLD", " The purpose of this function is to find an optimal threshold for separating  a bimodal distribution of pixels in an image histogram. The algorithm used is the   faster approach  algorithm explained  on this web page.      ", "BINSIZE       The binsize of the histogram. By default, Scott's Choice of bin size for histograms is used: <span class= code-output >   binsize = (3.5 * StdDev(data)) / N_Elements(data)^(0.3333)</span>        unless the data is byte type. Then a BINSIZE of 1 is used by default         If BINSIZE in not defined, and NBINS is defined, the BINSIZE is calcuated as: <span class= code-output >    binsize = (Max(dataToHistogram) - Min(dataToHistogram)) / (NBINS -1)</span>        While it is pointed out in the HISTOGRAM documentation, it is extremely        important that the BINSIZE be of the same data type as the data you are going to        calculate the histogram of. If it is not VERY strange things can happen. I've        tried to protect you from most of the bad things, but I don't have a high confidence        level that I have done it for every situation. If you see something that  just don't        look right , I would check first to see if your data types match. That might solve        all your problems.  EXAMPLE       Set this keyword if you wish to use the example data from the        reference documentation.  HISTDATA       The output value of the internal HISTOGRAM command.  L64       If set, the return value of HISTOGRAM are 64-bit integers, rather than        the default 32-bit integers. Set by default for data types greater than or        equal to 12.  LOCATIONS       Starting locations of each bin. (See the HISTOGRAM documentation for details.)  MAX       The maximum value to use in calculating input histogram. Equivalent to the MAX keyword        in the HISTOGRAM documentation.  MIN       The minimum value to use in calculating input histogram. Equivalent to the MIN keyword        in the HISTOGRAM documentation.  MISSING       The value that should be represented as  missing  and not used in the histogram.        Be aware that if the input data is not of type  float  or  double  that the input        data will be converted to floating point prior to calculating the histogram.  NAN       If set, ignore NAN values in calculating and plotting histogram.  NBINS       The number of output bins in the histogram. Meaning is slightly different from        meaning in the HISTOGRAM command. Used only to calculate BINSIZE when BINSIZE is        not specified. In this case, binsize = rangeofData/(nbins-1).  OMAX       The maximum output value used to construct the histogram. (See HISTOGRAM documentation.)  OMIN       The minimum output value used to construct the histogram. (See HISTOGRAM documentation.)  PLOTIT       If this keyword is set, a histogram of the data is plotted along with a plot of the        between class variance to show the selected threshold.  REVERSE_INDICES       The list of reverse indices returned from the HISTOGRAM command. (See HISTOGRAM documentation.)   data       The data from which the histogram is created.   ", "Utility", "    Change History: <span class= code-output >  Written by:  David W. Fanning, 13 November 2012, from a program named OTSU_THRESHOLD by Carl Salvaggio and</span> <span class= code-output >      modified by Gianguido Cianci.</span> <span class= code-output >  The OTSU_THRESHOLD algorithm used previously made many assumptions about the data. The algorithm used here</span> <span class= code-output >      has been completely rewritten to comply with the values in the reference page and to avoid making</span> <span class= code-output >      assumptions about the data used to create the histogram. 21 November 2012. DWF.</span> <span class= code-output >  Modified to set L64 keyword if data type GE 14 (suggested by user). 22 November 2012. DWF.</span> <span class= code-output >  Modified the threshold value to use DIndGen instead of IndGen, which was causing incorrect</span> <span class= code-output >      results with integer data. 24 November 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Set the Example keyword to use the data from the reference page.        The optimal threshold that separates two populations of pixels is returned.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgoverplot__define.html", "cgoverplot__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgoverplot__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " The purpose of this program is to create a data object that can be plotted or drawn on  a set of axes set up by another plotting command.   ", "", "Graphics", "     Change History: <span class= code-output >  Written, 18 July  2012. DWF.</span> <span class= code-output >  The THICK keyword was not being set in the INIT method. Fixed. 2 Nov 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Use, for example, with the cgPlot command: <span class= code-output >  oplotObj1 = Obj_New('cgOverPlot', cgDemoData(17), Color='red', PSYM=-1, LINESTYLE=2)</span> <span class= code-output >  oplotObj2 = Obj_New('cgOverPlot', cgDemoData(17), Color='blue', PSYM=-2, LINESTYLE=4)</span> <span class= code-output >  cgPlot, cgDemoData(17), Color='purple', PSYM=-4, OPLOTS=[oplotObj1, oplotObj2]</span> <span class= code-output >  Obj_Destroy, [oplotObj1, oplotObj2]</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgoverplot__define.html#cgOverPlot::INIT", "cgOverPlot::INIT", 'routine in <a href="coyote/cgoverplot__define.html">cgoverplot__define.pro</a>', "cgoverplot__define.pro", "", "cgOverPlot::INIT", " The initialization method of the object. Called automatically when the object  is created.   ", "ADDCMD        Set this keyword to add the command to the resizeable graphics window cgWindow.  COLOR        The name of the data color. This is the color of the data line.  DRAW        If this keyword is set, the data is drawn as soon as the object is created.  LINESTYLE        The line style for drawing the line.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46.  SKIP        The number of data points to skip when the line is drawn. The default is to         not skip any data points, but to plot them all.  SYMCOLOR        The name of the symbol color. By default, the same as the COLOR keyword.  SYMSIZE        The symbol size.  SYMTHICK        The thickness of the symbol.  THICK        The thickness of the line.  VISIBLE        Set this keyword to determine in the line should be drawn (visible=1), or         if the line should not be drawn (visible=0).  x         If X is provided without Y, a vector representing the dependent values to be          plotted If both X and Y are provided, X is the independent parameter and          Y is the dependent parameter to be plotted.  y         A vector representing the dependent values to be plotted.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgoverplot__define.html#cgOverPlot::CLEANUP", "cgOverPlot::CLEANUP", 'routine in <a href="coyote/cgoverplot__define.html">cgoverplot__define.pro</a>', "cgoverplot__define.pro", "", "cgOverPlot::CLEANUP", " The clean-up routine for the object. Destroy pointers, etc.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgoverplot__define.html#cgOverPlot::Draw", "cgOverPlot::Draw", 'routine in <a href="coyote/cgoverplot__define.html">cgoverplot__define.pro</a>', "cgoverplot__define.pro", "", "cgOverPlot::Draw", " This method draws the overplot object. It assumes a set of axes has been  established by some other graphics command.   ", "SKIP         Set this keyword to the number of data points to skip when drawing the          data vectors. Similar to the SKIP parameter, but this keyword gives you          the opportunity to temporarily over-ride the value of the SKIP parameter.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgoverplot__define.html#cgOverPlot::GetProperty", "cgOverPlot::GetProperty", 'routine in <a href="coyote/cgoverplot__define.html">cgoverplot__define.pro</a>', "cgoverplot__define.pro", "", "cgOverPlot::GetProperty", " This method obtains the current properties of the object.   ", "COLOR        The name of the data color. This is the color of the data line.  DEP        The current dependent data of the object.  DRAW        If this keyword is set, the data is drawn as soon as the object is created.  INDEP        The current independent data of the object.  LINESTYLE        The line style for drawing the line.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46.  SKIP        The number of data points to skip when the line is drawn.  SYMCOLOR        The name of the symbol color.  SYMSIZE        The symbol size.  SYMTHICK        The thickness of the symbol.  THICK        The thickness of the line.  XRANGE        The range of the dependent data.  YRANGE        The range of the independent data.  VISIBLE        The visibility of the objects plot line.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgoverplot__define.html#cgOverPlot::SetProperty", "cgOverPlot::SetProperty", 'routine in <a href="coyote/cgoverplot__define.html">cgoverplot__define.pro</a>', "cgoverplot__define.pro", "", "cgOverPlot::SetProperty", " This method sets the properties of the object.   ", "COLOR        The name of the data color. This is the color of the data line.  DEP        A vector of dependent data.  DRAW        If this keyword is set, the data is drawn as soon as the properties are set.  INDEP        A vector of independent data.  LINESTYLE        The line style for drawing the line.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46.  SKIP        The number of data points to skip when the line is drawn. The default is to         not skip any data points, but to plot them all.  SYMCOLOR        The name of the symbol color. By default, the same as the COLOR keyword.  SYMSIZE        The symbol size.  SYMTHICK        The thickness of the symbol.  THICK        The thickness of the line.  VISIBLE        Set this keyword to determine in the line should be drawn (visible=1), or         if the line should not be drawn (visible=0).  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgoverplot__define.html#cgOverPlot__Define", "cgOverPlot__Define", 'routine in <a href="coyote/cgoverplot__define.html">cgoverplot__define.pro</a>', "cgoverplot__define.pro", "", "cgOverPlot__Define", " The class definition module for the object.   ", "class        The class definition as a structure variable. Occasionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgpercentiles.html", "cgpercentiles.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgpercentiles.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgpercentiles.html#cgPercentiles", "cgPercentiles", 'routine in <a href="coyote/cgpercentiles.html">cgpercentiles.pro</a>', "cgpercentiles.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPercentiles", " This program calculates user-specified percentiles of a data set.  A percentile is the value of a variable below which a certain percent  of observations fall. In other words, 75% of the values in a data set  fall below the 75th percentile of the data. Computing percentiles is  really nothing more than counting in a sorted input array. A box-and-whisker  plot usually will display the 25th, 50th, and 75th percentiles.   ", "Percentiles         Set this keyword to a scalar or vector of values between 0.0 and 1.0          to indicate the percentile desired. A value of 0.5 indicates the 50th          percentile. Default value is [0.25, 0.50, 0.75].   data         The data from which percentiles are desired. A vector or an array.   ", "Math", "     Change History: <span class= code-output >  Written, 3 June 2013 by David W. Fanning.</span>       Copyright (c) 2013, Fanning Software Consulting, Inc.      To return percentile values for 0.25, 0.50, and 0.75 of a data set:   <span class= code-prompt >IDL&gt;</span> data = Randomu(3L, 100) * 100   <span class= code-prompt >IDL&gt;</span> Print, cgPercentiles(data, Percentiles=[0.25, 0.5, 0.75]) <span class= code-output >           27.4920      45.3172      69.3138</span>      The return value is either a scalar or vector of data values corresponding to     the number of percentiles asked for with the Percentiles keyword, or a -1 if     there is an error in the program.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgpickcolorname.html", "cgpickcolorname.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgpickcolorname.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " Provides an interactive method of selecting a draw color name. The program is useful  for learning the color names available in the Coyote Graphics System.       The program requires the Coyote Library  to be installed on your machine.   ", "", "Graphics Utilities Color", "    Change History: <span class= code-output >  Written by: David W. Fanning, 31 August 2000.</span> <span class= code-output >  Modified program to read colors from a file and to use more</span> <span class= code-output >    colors on 24-bit platforms. 16 October 2000. DWF.</span> <span class= code-output >  Added the COLUMNS keyword. 16 October 2000. DWF.</span> <span class= code-output >  Fixed a small problem with mapping a modal widget. 2 Jan 2001. DWF</span> <span class= code-output >  Now drawing small box around each color. 13 March 2003. DWF.</span> <span class= code-output >  Added eight new colors. Total now of 104 colors. 11 August 2005. DWF.</span> <span class= code-output >  Modified GUI to display system colors. 13 Dec 2005. DWF.</span> <span class= code-output >  Added BREWER keyword to allow Brewer Colors. 15 May 2008. DWF.</span> <span class= code-output >  Added all BREWER names to the default naming scheme. 3 July 2008. DWF.</span> <span class= code-output >  Set a size for the color name label widget. Otherwise, the widget always</span> <span class= code-output >     jumps back to the center of the display when I select a color on UNIX</span> <span class= code-output >     machines. Also had to remove TLB updating with UPDATE keyword to avoid</span> <span class= code-output >     tickling the same IDL bug. Sigh... 13 March (Friday) 2009.</span> <span class= code-output >  Removed system color names, since these are no longer available in cgColor.</span> <span class= code-output >     27 Nov 2010. DWF</span> <span class= code-output >  Renamed cgPickColorName. 20 Oct 2012. DWF.</span>       Copyright (c) 2000-2012, Fanning Software Consulting, Inc.         To call the program from the IDL comamnd line:   <span class= code-prompt >IDL&gt;</span> color = cgPickColorName() & Print, color        To call the program from within a widget program: <span class= code-output >  color = cgPickColorName( red , Group_Leader=event.top) & Print, color</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgpickcolorname.html#cgPickColorName_Select_Color", "cgPickColorName_Select_Color", 'routine in <a href="coyote/cgpickcolorname.html">cgpickcolorname.pro</a>', "cgpickcolorname.pro", "", "cgPickColorName_Select_Color", " This event handler responds to users selecting a color patch for display.   ", "event        The event structure passed to the event handler.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgpickcolorname.html#cgPickColorName_Buttons", "cgPickColorName_Buttons", 'routine in <a href="coyote/cgpickcolorname.html">cgpickcolorname.pro</a>', "cgpickcolorname.pro", "", "cgPickColorName_Buttons", " This event handler responds to users selecting buttons on the GUI.   ", "event        The event structure passed to the event handler.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgpickcolorname.html#cgPickColorName", "cgPickColorName", 'routine in <a href="coyote/cgpickcolorname.html">cgpickcolorname.pro</a>', "cgpickcolorname.pro", "", "cgPickColorName", " This function creates the widgets that implements the color name selection widget.   ", "BrewerBottom        The colors used in the program are loaded in the color table. This keyword indicates         the index in which the colors start loading. By default Bottom is set equal to         256-NCOLORS-1.       brewer: in, optional          Previously used to select Brewer colors. No longer in use, as the Brewer colors          are loaded automatically.       cancel: out, optional, type=integer           On exit, this keyword value is set to 0 if the user selected           the ACCEPT button. IF the user selected the CANCEL button, or           closed the window in any other way, this keyword value is set to 1.       columns: in, optional, type=integer, default=12           Set this keyword to the number of columns to use in the color display.       filename: in, optional, type=string           The name of an ASCII file that can be opened to read in           color values and color names. There should be one color per row           in the file. Please be sure there are no blank lines in the file.           The format of each row should be: <span class= code-output >   redValue  greenValue  blueValue  colorName</span>           Color values should be between 0 and 255. Any kind of white-space           separation (blank characters, commas, or tabs) are allowed. The color           name should be a string, but it should NOT be in quotes. A typical           entry into the file would look like this: <span class= code-output >    255   255   0   Yellow</span>       group_leader: in, optional, type=long           This keyword identifies a group leader if the program is called           from within a widget program. Note that this keyword *must* be provided           if you want to guarantee modal widget functionality. (If you don't know           what this means, believe me, you WANT to use this keyword, always.)        index: in, optional           This keyword identifies a color table index where the selected color           is to be loaded when the program exits. The default behavior is to restore           the input color table and NOT load a color.        title: in, optional, type=string, default= Select a Color            This keyword accepts a string value for the window title.  CancelColumnsFilenameGroup_LeaderIndexTitletheName        A string with the name of the initial  display  color. Colors available are these: <span class= code-output >   Almond         Antique White   Aquamarine      Beige            Bisque        Black</span> <span class= code-output >   Blue           Blue Violet     Brown           Burlywood        Cadet Blue    Charcoal</span> <span class= code-output >   Chartreuse     Chocolate       Coral           Cornflower Blue  Cornsilk      Crimson</span> <span class= code-output >   Cyan           Dark Goldenrod  Dark Gray        Dark Green      Dark Khaki    Dark Orchid</span> <span class= code-output >   Dark Red       Dark Salmon     Dark Slate Blue  Deep Pink       Dodger Blue   Firebrick</span> <span class= code-output >   Forest Green   Gold            Goldenrod        Gray            Green         Green Yellow</span> <span class= code-output >   Honeydew       Hot Pink        Indian Red       Ivory           Khaki         Lavender</span> <span class= code-output >   Lawn Green     Light Coral     Light Cyan       Light Gray      Light Salmon  Light Sea Green</span> <span class= code-output >   Light Yellow   Lime Green      Linen            Magenta         Maroon        Medium Gray</span> <span class= code-output >   Medium Orchid  Moccasin        Navy             Olive           Olive Drab    Orange</span> <span class= code-output >   Orange Red     Orchid          Pale Goldenrod   Pale Green      Papaya        Peru</span> <span class= code-output >   Pink           Plum            Powder Blue      Purple          Red           Rose</span> <span class= code-output >   Rosy Brown     Royal Blue      Saddle Brown     Salmon          Sandy Brown   Sea Green</span> <span class= code-output >   Seashell       Sienna          Sky Blue         Slate Blue      Slate Gray    Snow</span> <span class= code-output >   Spring Green   Steel Blue      Tan              Teal            Thistle       Tomato</span> <span class= code-output >   Turquoise      Violet          Violet Red       Wheat           White         Yellow</span>        The color WHITE is used if this parameter is absent.         These Brewer Color names are also available: <span class= code-output >    WT1       WT2       WT3       WT4       WT5       WT6       WT7       WT8</span> <span class= code-output >    TAN1      TAN2      TAN3      TAN4      TAN5      TAN6      TAN7      TAN8</span> <span class= code-output >    BLK1      BLK2      BLK3      BLK4      BLK5      BLK6      BLK7      BLK8</span> <span class= code-output >    GRN1      GRN2      GRN3      GRN4      GRN5      GRN6      GRN7      GRN8</span> <span class= code-output >    BLU1      BLU2      BLU3      BLU4      BLU5      BLU6      BLU7      BLU8</span> <span class= code-output >    ORG1      ORG2      ORG3      ORG4      ORG5      ORG6      ORG7      ORG8</span> <span class= code-output >    RED1      RED2      RED3      RED4      RED5      RED6      RED7      RED8</span> <span class= code-output >    PUR1      PUR2      PUR3      PUR4      PUR5      PUR6      PUR7      PUR8</span> <span class= code-output >    PBG1      PBG2      PBG3      PBG4      PBG5      PBG6      PBG7      PBG8</span> <span class= code-output >    YGB1      YGB2      YGB3      YGB4      YGB5      YGB6      YGB7      YGB8</span> <span class= code-output >    RYB1      RYB2      RYB3      RYB4      RYB5      RYB6      RYB7      RYB8</span> <span class= code-output >    TG1       TG2       TG3       TG4       TG5       TG6       TG7       TG8</span>  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgpickfile.html", "cgpickfile.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgpickfile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgpickfile.html#cgPickfile", "cgPickfile", 'routine in <a href="idlastro/coyote/cgpickfile.html">cgpickfile.pro</a>', "cgpickfile.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPickfile", "   This is a utility program for selecting data files. It is a wrapper for DIALOG_PICKFILE,    with the additional functionality of being able to  remember  the name and directory of    the last file selected by the program. It basically allows you to start the next file    selection from the location of the previous file selection.   ", "DATADIR         Set this keyword to the name of the data directory. If not set, the program          assumes the data directory is rooted in the directory that holds this program          file, or the directory directly above it. If it can't find a  data  directory          in either of these two locations, the current directory is used as the  data           directory. The data directory is ONLY used if there is no  current  last          directory. In other words, it is only used if cgPickfile has not been called          in the current IDL session.  DEMO         If set, starts in the !DIR/examples/data directory.  JPEG         If set, starts in the  jpeg  directory. It assumes the jpeg directory is rooted          in the  data  directory.  HDF         If set, starts in the  hdf  directory. It assumes the hdf directory is rooted          in the  data  directory.  LAST_FILE         If set, the name of the last file opened is placed in the filename widget.  LIDAR         If set, starts in the  lidar  directory. It assumes the lidar directory is          rooted in the  data  directory.  NCDF         If set, starts in the  ncdf  directory. It assumes the ncdf directory is          rooted in the  data  directory.  PNG         If set, starts in the  png  directory. It assumes the png directory is          rooted in the  data  directory.  TIFF         If set, starts in the  tiff  directory. It assumes the tiff directory is          rooted in the  data  directory.  TITLE         The title for the selection dialog window. If the Write keyword is set,          the default title becomes  Please Select a File for Writing .     write: in, optional, type=boolean, default=0          Set this keyword to change the default title to  Please Select a File for Writing .  WRITE_REF_EXTRA          Accepts any input keywords to DIALOG_PICKFILE (e.g., FILTER).   ", "Utility", "     Change History: <span class= code-output >  Adapted from FSC_PICKFILE to be a Coyote Graphics routine by David W. Fanning, 4 Aug 2011.</span> <span class= code-output >  Added keywords TITLE and WRITE to work around a bug in Dialog_Pickfile that clips the</span> <span class= code-output >     input filenames. 25 Feb 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      The fully-qualified name of the selected file or a null string if the CANCEL     button was selected.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgpickfile.html", "cgpickfile.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgpickfile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgpickfile.html#cgPickfile", "cgPickfile", 'routine in <a href="coyote/cgpickfile.html">cgpickfile.pro</a>', "cgpickfile.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPickfile", "   This is a utility program for selecting data files. It is a wrapper for DIALOG_PICKFILE,    with the additional functionality of being able to  remember  the name and directory of    the last file selected by the program. It basically allows you to start the next file    selection from the location of the previous file selection.   ", "DATADIR         Set this keyword to the name of the data directory. If not set, the program          assumes the data directory is rooted in the directory that holds this program          file, or the directory directly above it. If it can't find a  data  directory          in either of these two locations, the current directory is used as the  data           directory. The data directory is ONLY used if there is no  current  last          directory. In other words, it is only used if cgPickfile has not been called          in the current IDL session.  DEMO         If set, starts in the !DIR/examples/data directory.  JPEG         If set, starts in the  jpeg  directory. It assumes the jpeg directory is rooted          in the  data  directory.  HDF         If set, starts in the  hdf  directory. It assumes the hdf directory is rooted          in the  data  directory.  LAST_FILE         If set, the name of the last file opened is placed in the filename widget.  LIDAR         If set, starts in the  lidar  directory. It assumes the lidar directory is          rooted in the  data  directory.  NCDF         If set, starts in the  ncdf  directory. It assumes the ncdf directory is          rooted in the  data  directory.  PNG         If set, starts in the  png  directory. It assumes the png directory is          rooted in the  data  directory.  TIFF         If set, starts in the  tiff  directory. It assumes the tiff directory is          rooted in the  data  directory.  TITLE         The title for the selection dialog window. If the Write keyword is set,          the default title becomes  Please Select a File for Writing .     write: in, optional, type=boolean, default=0          Set this keyword to change the default title to  Please Select a File for Writing .  WRITE_REF_EXTRA          Accepts any input keywords to DIALOG_PICKFILE (e.g., FILTER).   ", "Utility", "     Change History: <span class= code-output >  Adapted from FSC_PICKFILE to be a Coyote Graphics routine by David W. Fanning, 4 Aug 2011.</span> <span class= code-output >  Added keywords TITLE and WRITE to work around a bug in Dialog_Pickfile that clips the</span> <span class= code-output >     input filenames. 25 Feb 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      The fully-qualified name of the selected file or a null string if the CANCEL     button was selected.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgpixmap.html", "cgpixmap.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgpixmap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgpixmap.html#cgPixmap", "cgPixmap", 'routine in <a href="coyote/cgpixmap.html">cgpixmap.pro</a>', "cgpixmap.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPixmap", "  Creates an invisible graphics window for IDL traditional commands (Plot, Contour,   Surface, etc. or for Coyote Graphics routines, cgPlot, cgContour, cgSurf, etc.).   In addition, the window contents can be saved as PostScript files or as raster image   files. If ImageMagick is installed on your machine, the raster image files can be   created in very high quality from PostScript files. This window is identical to   cgWindow, except that it doesn't appear on the display unless you want it to.    The program is designed to work with any IDL traditional graphics routine   that is a procedure and includes no more than three positional parameters.   Any number of keywords can be used to specify properties of the graphical   output. Any number of graphics commands can be  added  the the cgWindow.   Simply use the AddCmd keyword to add commands.    If your program does not load its own color tables, the color tables in   effect when cgWindow is first called are used to display the graphics   commands.    To create PostScript output from within cgWindow, your graphics program   has to be written in such a way that it can work properly in the PostScript   device. This means there are no Window commands, WSet commands, and the like   that are not allowed in the PostScript device. Such commands are allowed in   programs, of course, if they are  protected . Usually such protection looks   like this: <span class= code-output >  IF (!D.Flags AND 256) NE 0 THEN Window, ...</span>   The Coyote Graphics program cgDisplay is a good program for opening graphics    windows , because such PostScript protection is built into the program. In a PostScript   device, cgDisplay produces a  window  with the same aspect ratio as the current   display graphics window, which is an aid in producing PostScript output that   looks like the same output in the display window.    Much better looking raster files can be created from the cgWindow contents,   if the raster files are created by converting PostScript files to the raster   file. If the ImageMagick  convert  command can be found on your machine, you   will have the option to create raster files using this method. I *highly*   recommend doing so, as fonts and other plot annotation will be of much higher   quality using this method.    cgWindow has been designed to work with other Coyote Graphics routines: cgPlot,   cgContour, cgSurf, and so on, although I expect it to work with any IDL   traditional graphics routine, if the routine is well written.    Default properties of the object can be controled with cgWindow_SetDefs and cgControl,   as with cgWindow. Be sure to delete the pixmap object when you are done with it, by   using (for example) cgDelete.   ", "AddCmd       Set this keyword to add an additional graphics command to an cgWindow.        The command is added to the last created cgWindow, unless the WinID        keyword is used to select another cgWindow. Adding a command causes        all the commands in the window to be immediately executed. If this is        not behavior you desire, use the LOADCMD keyword instead. If CMDINDEX        is used to select a command index, the new command is added before        the command currently occuping that index in the command list.  AltPS_Keywords       A structure containing alternative keyword names (as tags) and values for        those keywords to be used when the current device is the PostScript device.        See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the examples        below for details on how to use this keyword.  AltPS_Params       A structure containing alternative parameter values to be used when        the current device is the PostScript device. Structure names are restricted        to the names  P1 ,  P2 ,  P3  and  P4  to correspond to the equivalent positional        parameter. See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the        examples below for details on how to use this keyword.  CmdDelay       Ignored. Used only for compatibility with cgWindow.  CmdIndex       This keyword is used to select which command in an cgWindow to act on        when the AllCmd, DeleteCmd, LoadCmd and ReplaceCmd keywords are used.        See the descriptions of these keywords for details on what happens when        CmdIndex is missing.  DeleteCmd       Set this keyword to delete a graphics command from an cgWindow.        If CmdIndex is undefined the last command entered into the window is        deleted. It is not possible to delete the last command in the window.        Use WinID to identify the cgWindow you are interested in. If WinID        is undefined, the last cgWindow created is used.  ExecuteCmd       Set this keyword to immediate execute all the commands in an cgWindow.        Normally, this is used after commands have been loaded with LOADCMD.  Group_Leader       The identifier of a widget to serve as a group leader for this program.        If the group leader is destroyed, this program is also destroyed. Used        when calling this program from another widget program.  ListCmd       If this keyword is set, the commands currently in the cgWindow are        listed. Use WinID to identify the cgWindow you are interested in.        If WinID is undefined, the last cgWindow created is used.  LoadCmd       Set this keyword to add an additional graphics command to an cgWindow.        The command is added to the last created cgWindow, unless the WinID        keyword is used to select another cgWindow. Loaded commands are not        automatically executed. Set the EXECUTECMD keyword at the end of loading        to execute the loaded commands. If CMDINDEX is used to select a command        index, the new command is loaded before the command currently occuping        that index in the command list.  Method       Set this keyword if the command is an object method call rather than a        procedure call. If this keyword is set, the first positional parameter, p1,        must be present and must be a valid object reference.  ReplaceCmd       Set this keyword to replace a graphics command from an cgWindow.        If CmdIndex is undefined, *all* commands in the window are replaced. Use        WinID to identify the cgWindow you are interested in. If WinID is        undefined, the last cgWindow created is used for the replacement.  WAspect       Set this keyword to the aspect ratio you would like the window to have.        The aspect ratio is calculated as (ysize/xsize). Must be a float value.        If this keyword is set, the window will maintain this aspect ratio,        even when it is resized.  WBackground       The background color of the window. Specifying a background color        automatically sets the WErase keyword.  WDestroyObjects       If this keyword is set, and any of the input parameters p1-p4 is an object,        the object parameter will be destroyed when the window is destroyed.  WErase       Set this keyword to cause the window to be erased before graphics commands        are drawn. This may need to be set, for example, to display images.  WinID       Use this keyword to select the window cgWindow identifier (the number between        the parentheses in the title bar of cgWindow). The AddCmd, ReplaceCmd, ListCmd,        and DeleteCmd keywords will all apply to the commands in the last cgWindow        created unless this keyword is used to select another cgWindow to apply the        commands to.  WMulti        Set this keyword in exactly the same way you would set the !P.Multi keyword.         It will allow you to display multi-plots in the cgWindow graphics window.  WObject       cgWindow creates a FSC_CmdWindow object. This object reference is returned        if this keyword is present.  WOXMargin       A two-element array indicating the left and right X outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  WOYMargin       A two-element array indicating the bottom and top Y outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  WXPos       Ignored. Used only for compatibility with cgWindow.  WXSize       The x size in device coordinates of the graphics window.  WYPos       Ignored. Used only for compatibility with cgWindow.  WYSize       The y size in device coordinates of the the graphics window.  WTitle       Ignored. Used only for compatibility with cgWindow.   _Extracommand       The graphics procedure command to be executed. This parameter        must be a string and the the command must be a procedure. Examples        are 'Surface', 'Contour', 'Plot', 'cgPlot', cgContour, etc.  p1       The first positional parameter appropriate for the graphics command.  p2       The second positional parameter appropriate for the graphics command.  p3       The third positional parameter appropriate for the graphics command.  p4       The fourth positional parameter appropriate for the graphics command.   ", "Graphics", "     Change History: <span class= code-output >  Written, 7 February 2012, based on cgWindow, by David W. Fanning.</span> <span class= code-output >  Added WDESTROYOBJECTS keyword. 11 Nov 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.       Test code: <span class= code-output >  data = cgDemoData(17)</span> <span class= code-output >  pixmap = cgPixmap()</span> <span class= code-output >  cgPlot, data, COLOR='red', /Window</span> <span class= code-output >  cgPlot, data, PSYM=2, /Overplot, COLOR='dodger blue', /AddCmd</span> <span class= code-output >  cgPlot, cgDemoData(17), color='olive', linestyle = 2, /Overplot, /AddCmd</span> <span class= code-output >  pixmap = cgPixmap(/ListCmd)</span> <span class= code-output >  pixmap = cgPixmap('cgPlot', data, COLOR='purple', /ReplaceCMD, CMDINDEX=0)</span> <span class= code-output >  pixmap -&gt; Output, 'myplot.png'</span>     Example using different keyword parameters for the display and PostScript output: <span class= code-output >  pixmap = cgPixmap('cgPlot', cgDemoData(1), $</span> <span class= code-output >        THICK=1.0, XTITLE='Distance (' + cgGreek('mu') + 'm)', $</span> <span class= code-output >        ALTPS_KEYWORDS={THICK:4.0, XTITLE:'Distance (' + cgGreek('mu', /PS) + 'm)'})</span>     Example using different positional parameters: <span class= code-output >  pixmap = cgPixmap('cgText', 0.20, 0.85, /Normal, 'Line of Text', ALIGNMENT=0.0, $</span> <span class= code-output >        ALTPS_KEYWORDS={ALIGNMENT:1.0}, ALTPS_PARAMS={P1:0.88})</span>     Example copying pixmap contents to a normal IDL graphics window: <span class= code-output >  Window</span> <span class= code-output >  pixmap -&gt; Copy</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgpixmapwindow__define.html", "cgpixmapwindow__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgpixmapwindow__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " This is the  object  behind cgPixmap. It is a subclassed cgCmdWindow object  and behaves almost identically, except that normally the draw widget at the  heart of the window is invisible. That is, it is a pixmap.   Default properties of the object can be controled with cgWindow_SetDefs and cgControl,  as with cgWindow. Be sure to delete the pixmap object when you are done with it, by  using (for example) cgDelete.   ", "", "Graphics", "     Change History: <span class= code-output >  Created from cgCmdWindow, 7 February 2012. DWF.</span> <span class= code-output >  Problem with the ASPECT keyword, which should have been named WASPECT. 7 Oct 2012. DWF.</span> <span class= code-output >  Added WDestroyObjects keyword to destroy objects parameters, if needed. 11 November 2012. DWF.</span> <span class= code-output >  Confusion trying to change WBackground keyword to Background. Changed it back. Identical to ASPECT</span> <span class= code-output >     problem described above. 18 Jan 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.   ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgpixmapwindow__define.html#cgPixmapWindow::INIT", "cgPixmapWindow::INIT", 'routine in <a href="coyote/cgpixmapwindow__define.html">cgpixmapwindow__define.pro</a>', "cgpixmapwindow__define.pro", "", "cgPixmapWindow::INIT", " This method initializes the pixmap object.   ", "AltPS_Keywords       A structure containing alternative keyword names (as tags) and values for        those keywords to be used when the current device is the PostScript device.        See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the examples        below for details on how to use this keyword.  AltPS_Params       A structure containing alternative parameter values to be used when        the current device is the PostScript device. Structure names are restricted        to the names  P1 ,  P2 ,  P3  and  P4 to correspond to the equivalent positional        parameter. See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the        examples below for details on how to use this keyword.  Command       The graphics procedure command to be executed. This parameter        must be a string and the the command must be a procedure. Examples        are 'Surface', 'Contour', 'Plot', 'cgPlot', cgContour, etc.  EraseIt       Set this keyword to cause the window to be erased before graphics commands        are drawn. This may need to be set, for example, to display images.  Group_Leader       The identifier of a widget to serve as a group leader for this program.        If the group leader is destroyed, this program is also destroyed. Used        when calling this program from another widget program.  Method       Set this keyword if the command is an object method call rather than a        procedure call. If this keyword is set, the first positional parameter, p1,        must be present and must be a valid object reference.  Multi        Set this keyword in exactly the same way you would set the !P.Multi keyword.         It will allow you to display multi-plots in the cgWindow graphics window.  OXMargin       A two-element array indicating the left and right X outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  OYMargin       A two-element array indicating the bottom and top Y outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  P1       The first positional parameter appropriate for the graphics command.  P2       The second positional parameter appropriate for the graphics command.  P3       The third positional parameter appropriate for the graphics command.  P4       The fourth positional parameter appropriate for the graphics command.  ReplaceCmd       Set this keyword to replace a graphics command from an cgWindow.        If CmdIndex is undefined, *all* commands in the window are replaced. Use        WinID to identify the cgWindow you are interested in. If WinID is        undefined, the last cgWindow created is used for the replacement.  Storage       Any user-defined IDL variable will be stored in the object storage location.        Defined here for convenience. Same as Storage keyword for the SetProperty method.  VisibleWAspect       Set this keyword to the aspect ratio you would like the window to have.        The aspect ratio is calculated as (ysize/xsize). Must be a float value.        If this keyword is set, the window will maintain this aspect ratio,        even when it is resized.  WBackground       The background color of the window. Specifying a background color        automatically sets the WErase keyword.  WDestroyObjects       If this keyword is set, and any of the input parameters p1-p4 is an object,        the object parameter will be destroyed when the window is destroyed.  WXSize       The x size in device coordinates of the graphics window.  WYSize       The y size in device coordinates of the the graphics window.  _Extra       The  extra  keywords for the command that is being added to the window.  parent       The parent base widget for this draw widget object. If not defined,        the program will create its own top-level base widget.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgpixmapwindow__define.html#cgPixmapWindow::SetProperty", "cgPixmapWindow::SetProperty", 'routine in <a href="coyote/cgpixmapwindow__define.html">cgpixmapwindow__define.pro</a>', "cgpixmapwindow__define.pro", "", "cgPixmapWindow::SetProperty", " This method allows you to set the properties of the object. Most properties are  passed along to the superclass method.   ", "VISIBLE        Set this keyword to make the pixmap visible.  _EXTRA        Any keywords appropriate for the SetProperty method of the superclass object.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgpixmapwindow__define.html#cgPixmapWindow__Define", "cgPixmapWindow__Define", 'routine in <a href="coyote/cgpixmapwindow__define.html">cgpixmapwindow__define.pro</a>', "cgpixmapwindow__define.pro", "", "cgPixmapWindow__Define", " The definition module for the cgPixmapWindow object   ", "class        The object class structure definition. Occasionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgplot.html", "cgplot.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgplot.html#cgPlot", "cgPlot", 'routine in <a href="idlastro/coyote/cgplot.html">cgplot.pro</a>', "cgplot.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPlot", " The purpose of cgPlot is to create a wrapper for the traditional IDL graphics  command, Plot. The primary purpose of this is to create plot commands that work  and look identically both on the display and in PostScript files.   Program default colors will depend on the IDL graphics window. If no windows are currently  open when the program is called, cgDisplay is used to create a window.   The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD        Set this keyword to add the command to the resizeable graphics window cgWindow.  ASPECT        Set this keyword to a floating point ratio that represents the aspect ratio         (ysize/xsize) of the resulting plot. The plot position may change as a result         of setting this keyword. Note that Aspect cannot be used when plotting with         !P.MULTI.  AXISCOLOR        If this keyword is a string, the name of the axis color.         Otherwise, the keyword is assumed to be a color index into the current color table.  AXESCOLOR        Provisions for bad spellers.  BACKGROUND        If this keyword is a string, the name of the background color.         Otherwise, the keyword is assumed to be a color index into the current color table.  CHARSIZE        The character size for axes annotations. Uses cgDefCharSize to select default         character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR        If this keyword is a string, the name of the data color. By default, 'black'.         Color names are those used with cgColor. Otherwise, the keyword is assumed         to be a color index into the current color table.  FONT        The type of font desired for axis annotation.  ISOTROPIC        A short-hand way of setting the Aspect keyword to 1.  LABEL        A label is similar to a plot title, but it is aligned to the left edge         of the plot and is written in hardware fonts. Use of the label keyword         will suppress the plot title.  LAYOUT        This keyword specifies a grid with a graphics window and determines where the         graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].         The grid is determined by the number of columns (ncolumns) by the number of         rows (nrows). The location of the graphic is determined by the third number. The         grid numbering starts in the upper left (1) and goes sequentually by column and then         by row.  LEGENDS        One or more cgLegendItem objects that are to be drawn on the plot.  NODATA        Set this keyword to draw axes, but no data.  NOERASE        Set this keyword to draw the plot without erasing the display first.  OPLOTS        A single cgOverPlot object, or an array of cgOverPlot objects that will be         overplot on the axes set up by the original data. The user will be responsible         for destroying the objects. The cgPlot program will simply draw the objects.  OUTFILENAME        If the Output keyword is set, the user will be asked to supply an output         filename, unless this keyword is set to a non-null string. In that case, the         value of this keyword will be used as the filename and there will be no dialog         presented to the user.  OUTPUT        Set this keyword to the type of output desired. Possible values are these: <span class= code-output >   'PS'   - PostScript file</span> <span class= code-output >   'EPS'  - Encapsulated PostScript file</span> <span class= code-output >   'PDF'  - PDF file</span> <span class= code-output >   'BMP'  - BMP raster file</span> <span class= code-output >   'GIF'  - GIF raster file</span> <span class= code-output >   'JPEG' - JPEG raster file</span> <span class= code-output >   'PNG'  - PNG raster file</span> <span class= code-output >   'TIFF' - TIFF raster file</span>         Or, you can simply set this keyword to the name of the output file, and the type of         file desired will be determined by the file extension. If you use this option, the         user will not be prompted to supply the name of the output file.          All raster file output is created through PostScript intermediate files (the         PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed         to produce anything other than PostScript output. (See cgPS2PDF and PS_END for         details.) And also note that you should NOT use this keyword when doing multiple         plots. The keyword is to be used as a convenient way to get PostScript or raster         output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  OVERPLOT        Set this keyword if you wish to overplot data on an already exisiting set of         axes. It is like calling the IDL OPLOT command.  POSITION        The usual four-element position vector for the Plot comamnd. Only monitored and         possibly set if the Aspect keyword is used.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46. This may also be set to the          name  of a symbol, such as returned from Print, cgSymCat(/Names).  SYMCOLOR        If this keyword is a string, the name of the symbol color. By default, 'black'.         Otherwise, the keyword is assumed to be a color index into the current color table.  SYMSIZE        The symbol size.  TITLE         The title of the plot.  TRADITIONAL        If this keyword is set, the traditional color scheme of a black background for         graphics windows on the display is used and PostScript files always use a white background.  WINDOW        Set this keyword to replace all the commands in a current cgWindow or to         create a new cgWindow for displaying this command.  XTITLE         The X title of the plot.  YTITLE         The Y title of the plot.  _REF_EXTRA        Any keyword appropriate for the IDL Plot command is allowed in the program.   x         If X is provided without Y, a vector representing the dependent values to be          plotted If both X and Y are provided, X is the independent parameter and          Y is the dependent parameter to be plotted.  y         A vector representing the dependent values to be plotted.   ", "Graphics", "     Change History: <span class= code-output >  Written, 12 November 2010. DWF.</span> <span class= code-output >  Added SYMCOLOR keyword, and allow all 46 symbols from cgSYMCAT. 15 November 2010. DWF.</span> <span class= code-output >  Added NODATA keyword. 15 November 2010. DWF.</span> <span class= code-output >  Now setting decomposition state by calling SetDecomposedState. 16 November 2010. DWF.</span> <span class= code-output >  Final color table restoration skipped in Z-graphics buffer. 17 November 2010. DWF.</span> <span class= code-output >  Fixed a problem with overplotting with symbols. 17 November 2010. DWF.</span> <span class= code-output >  Background keyword now applies in PostScript file as well. 17 November 2010. DWF.</span> <span class= code-output >  Many changes after BACKGROUND changes to get !P.MULTI working again! 18 November 2010. DWF.</span> <span class= code-output >  Fixed a small problem with the OVERPLOT keyword. 18 Nov 2010. DWF.</span> <span class= code-output >  Changes so that color inputs don't change type. 23 Nov 2010. DWF.</span> <span class= code-output >  Added WINDOW keyword to allow graphic to be displayed in a resizable graphics window. 8 Dec 2010. DWF</span> <span class= code-output >  Modifications to allow cgPlot to be drop-in replacement for old PLOT commands in</span> <span class= code-output >      indexed color mode. 24 Dec 2010. DWF.</span> <span class= code-output >  Previous changes introduced problems with OVERPLOT that have now been fixed. 28 Dec 2010. DWF.</span> <span class= code-output >  Set NOERASE keyword from !P.NoErase system variable when appropriate. 28 Dec 2010. DWF.</span> <span class= code-output >  Additional problems with NOERASE discovered and solved. 29 Dec 2010. DWF.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >   Selecting character size now with cgDefCharSize. 11 Jan 2011. DWF.</span> <span class= code-output >   Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >   Changed _EXTRA to _REF_EXTRA on procedure definition statement to be able to return</span> <span class= code-output >       plot keywords such as XGET_TICKS. 13 Jan 2011. DWF.</span> <span class= code-output >   Added SYMSIZE keyword. 16 Jan 2011. DWF.</span> <span class= code-output >   Fixed a problem in which I assumed the background color was a string. 18 Jan 2011. DWF.</span> <span class= code-output >   Added ADDCMD keyword. 26 Jan 2011. DWF.</span> <span class= code-output >   Added LAYOUT keyword. 28 Jan 2011. DWF.</span> <span class= code-output >   Made a modification that allows THICK and COLOR keywords apply to symbols, too. 24 Feb 2011. DWF.</span> <span class= code-output >   Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >   Somehow I had gotten independent and dependent data reversed in the code. Put right. 16 May 2011. DWF.</span> <span class= code-output >   Allowed ASPECT (and /ISOTROPIC) to take into account input POSITION. 15 June 2011. Jeremy Bailin.</span> <span class= code-output >   Updated the BACKGROUND color selection from lessons learned in 27 Oct 2011 cgContour</span> <span class= code-output >       corrections. 27 Oct 2011. DWF.</span> <span class= code-output >   Added the ability to send the output directly to a file via the OUTPUT keyword. 9 Dec 2011, DWF.</span> <span class= code-output >   PostScript, PDF, and Imagemagick parameters can now be tailored with cgWindow_SetDefs. 14 Dec 2011. DWF.</span> <span class= code-output >   Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >   Over-zealous use of _STRICT_EXTRA when overplotting resulted in errors. Now use _EXTRA. 1 Jan 2012. DWF.</span> <span class= code-output >   Changes to allow better default colors, based on changes to cgColor and cgDefaultColor. 1 Feb 2012. DWF.</span> <span class= code-output >   Now allowing the user to draw in the  background  color, if the COLOR or AXISCOLOR is  BACKGROUND . 19 March 2012. DWF.</span> <span class= code-output >   Scalar input parameters are changed to 1-element vectors to avoid annoying error messages from PLOT. 6 April 2012. DWF.</span> <span class= code-output >   Added a LABEL keyword. 12 July 2012. DWF.</span> <span class= code-output >   Yikes! Bad choice of variable names in LABEL work yesterday has severe consequences. Changed names. 13 July 2012. DWF.</span> <span class= code-output >   Added OPLOTS keyword to allow cgOverplot objects. 18 July 2012. DWF.</span> <span class= code-output >   Added the ability to specify a symbol name with the PSYM keyword. 19 Juyl 2012. DWF.</span> <span class= code-output >   Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >   Fixed an interaction with the LABEL keyword that prevented a Title from appearing. 2 Oct 2012. DWF.</span>       Copyright (c) 2010-2012, Fanning Software Consulting, Inc.      Use as you would use the IDL PLOT command: <span class= code-output >  cgPlot, Findgen(11)</span> <span class= code-output >  cgPlot, Findgen(11), Aspect=1.0</span> <span class= code-output >  cgPlot, Findgen(11), Color='olive', AxisColor='red', Thick=2</span> <span class= code-output >  cgPlot, Findgen(11), Color='blue', SymColor='red', PSym=-16</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgplot.html", "cgplot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgplot.html#cgPlot", "cgPlot", 'routine in <a href="coyote/cgplot.html">cgplot.pro</a>', "cgplot.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPlot", " The purpose of cgPlot is to create a wrapper for the traditional IDL graphics  command, Plot. The primary purpose of this is to create plot commands that work  and look identically both on the display and in PostScript files.   Program default colors will depend on the IDL graphics window. If no windows are currently  open when the program is called, cgDisplay is used to create a window.   The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD        Set this keyword to add the command to the resizeable graphics window cgWindow.  ASPECT        Set this keyword to a floating point ratio that represents the aspect ratio         (ysize/xsize) of the resulting plot. The plot position may change as a result         of setting this keyword. Note that Aspect cannot be used when plotting with         !P.MULTI.  AXISCOLOR        If this keyword is a string, the name of the axis color.         Otherwise, the keyword is assumed to be a color index into the current color table.  AXESCOLOR        Provisions for bad spellers.  BACKGROUND        If this keyword is a string, the name of the background color.         Otherwise, the keyword is assumed to be a color index into the current color table.  CHARSIZE        The character size for axes annotations. Uses cgDefCharSize to select default         character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR        If this keyword is a string, the name of the data color. By default, 'black'.         Color names are those used with cgColor. Otherwise, the keyword is assumed         to be a color index into the current color table.  FONT        The type of font desired for axis annotation.  ISOTROPIC        Maintain the same scale on both axes.  LABEL        A label is similar to a plot title, but it is aligned to the left edge         of the plot and is written in hardware fonts. Use of the label keyword         will suppress the plot title.  LAYOUT        This keyword specifies a grid with a graphics window and determines where the         graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].         The grid is determined by the number of columns (ncolumns) by the number of         rows (nrows). The location of the graphic is determined by the third number. The         grid numbering starts in the upper left (1) and goes sequentually by column and then         by row.  LEGENDS        One or more cgLegendItem objects that are to be drawn on the plot.  NODATA        Set this keyword to draw axes, but no data.  NOERASE        Set this keyword to draw the plot without erasing the display first.  OPLOTS        A single cgOverPlot object, or an array of cgOverPlot objects that will be         overplot on the axes set up by the original data. The user will be responsible         for destroying the objects. The cgPlot program will simply draw the objects.  OUTFILENAME        If the Output keyword is set, the user will be asked to supply an output         filename, unless this keyword is set to a non-null string. In that case, the         value of this keyword will be used as the filename and there will be no dialog         presented to the user.  OUTPUT        Set this keyword to the type of output desired. Possible values are these: <span class= code-output >   'PS'   - PostScript file</span> <span class= code-output >   'EPS'  - Encapsulated PostScript file</span> <span class= code-output >   'PDF'  - PDF file</span> <span class= code-output >   'BMP'  - BMP raster file</span> <span class= code-output >   'GIF'  - GIF raster file</span> <span class= code-output >   'JPEG' - JPEG raster file</span> <span class= code-output >   'PNG'  - PNG raster file</span> <span class= code-output >   'TIFF' - TIFF raster file</span>         Or, you can simply set this keyword to the name of the output file, and the type of         file desired will be determined by the file extension. If you use this option, the         user will not be prompted to supply the name of the output file.          All raster file output is created through PostScript intermediate files (the         PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed         to produce anything other than PostScript output. (See cgPS2PDF and PS_END for         details.) And also note that you should NOT use this keyword when doing multiple         plots. The keyword is to be used as a convenient way to get PostScript or raster         output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  OVERPLOT        Set this keyword if you wish to overplot data on an already exisiting set of         axes. It is like calling the IDL OPLOT command.  POSITION        The usual four-element position vector for the Plot comamnd. Only monitored and         possibly set if the Aspect keyword is used.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46. This may also be set to the          name  of a symbol, such as returned from Print, cgSymCat(/Names).  SYMCOLOR        If this keyword is a string, the name of the symbol color. By default, 'black'.         Otherwise, the keyword is assumed to be a color index into the current color table.  SYMSIZE        The symbol size.  TITLE         The title of the plot.  TRADITIONAL        If this keyword is set, the traditional color scheme of a black background for         graphics windows on the display is used and PostScript files always use a white background.  WINDOW        Set this keyword to replace all the commands in a current cgWindow or to         create a new cgWindow for displaying this command.  XRANGE         Set this keyword to a two-element vector setting the X axis range for the plot.          If this keyword is used, and the XStyle keyword is NOT used, then XSTYLE is set to 1.  XSTYLE         This keyword is a bit map that allows a variety of axis options, depending upon which bit          is set. Bits are set by adding the following values together when setting the value of          the keyword: <span class= code-output >  Value    Description</span> <span class= code-output >    0      Allow axis autoscaling.</span> <span class= code-output >    1      Turn axis autoscaling off, force exact axis range.</span> <span class= code-output >    2      Extend axis range.</span> <span class= code-output >    4      Suppress entire axis.</span> <span class= code-output >    8      Suppress box style axis. Draw only main axis.</span>         To suppress box axis style and force exact axis range, for example, set the keyword to 8+1=9: <span class= code-output >   cgPlot, cgDemoData(1), XRange=[15,78], XStyle=9</span>  XTITLE         The X title of the plot.  YRANGE         Set this keyword to a two-element vector setting the Y axis range for the plot.          If this keyword is used, and the YStyle keyword is NOT used, then YSTYLE is set to 1.  YSTYLE         This keyword is a bit map that allows a variety of axis options, depending upon which bit          is set. Bits are set by adding the following values together when setting the value of          the keyword: <span class= code-output >  Value    Description</span> <span class= code-output >    0      Allow axis autoscaling.</span> <span class= code-output >    1      Turn axis autoscaling off, force exact axis range.</span> <span class= code-output >    2      Extend axis range.</span> <span class= code-output >    4      Suppress entire axis.</span> <span class= code-output >    8      Suppress box style axis. Draw only main axis.</span> <span class= code-output >   16      Inhibt setting the Y axis minimum value to 0.</span>         To suppress box axis style and force exact axis range, for example, set the keyword to 8+1=9: <span class= code-output >   cgPlot, cgDemoData(1), YRange=[15,28], YStyle=9</span>  YTITLE         The Y title of the plot.  _REF_EXTRA        Any IDL Plot keyword         not defined here is allowed in the program.   x         If X is provided without Y, a vector representing the dependent values to be          plotted If both X and Y are provided, X is the independent parameter and          Y is the dependent parameter to be plotted.  y         A vector representing the dependent values to be plotted.   ", "Graphics", "     Change History: <span class= code-output >  Written, 12 November 2010. DWF.</span> <span class= code-output >  Added SYMCOLOR keyword, and allow all 46 symbols from cgSYMCAT. 15 November 2010. DWF.</span> <span class= code-output >  Added NODATA keyword. 15 November 2010. DWF.</span> <span class= code-output >  Now setting decomposition state by calling SetDecomposedState. 16 November 2010. DWF.</span> <span class= code-output >  Final color table restoration skipped in Z-graphics buffer. 17 November 2010. DWF.</span> <span class= code-output >  Fixed a problem with overplotting with symbols. 17 November 2010. DWF.</span> <span class= code-output >  Background keyword now applies in PostScript file as well. 17 November 2010. DWF.</span> <span class= code-output >  Many changes after BACKGROUND changes to get !P.MULTI working again! 18 November 2010. DWF.</span> <span class= code-output >  Fixed a small problem with the OVERPLOT keyword. 18 Nov 2010. DWF.</span> <span class= code-output >  Changes so that color inputs don't change type. 23 Nov 2010. DWF.</span> <span class= code-output >  Added WINDOW keyword to allow graphic to be displayed in a resizable graphics window. 8 Dec 2010. DWF</span> <span class= code-output >  Modifications to allow cgPlot to be drop-in replacement for old PLOT commands in</span> <span class= code-output >      indexed color mode. 24 Dec 2010. DWF.</span> <span class= code-output >  Previous changes introduced problems with OVERPLOT that have now been fixed. 28 Dec 2010. DWF.</span> <span class= code-output >  Set NOERASE keyword from !P.NoErase system variable when appropriate. 28 Dec 2010. DWF.</span> <span class= code-output >  Additional problems with NOERASE discovered and solved. 29 Dec 2010. DWF.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >   Selecting character size now with cgDefCharSize. 11 Jan 2011. DWF.</span> <span class= code-output >   Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >   Changed _EXTRA to _REF_EXTRA on procedure definition statement to be able to return</span> <span class= code-output >       plot keywords such as XGET_TICKS. 13 Jan 2011. DWF.</span> <span class= code-output >   Added SYMSIZE keyword. 16 Jan 2011. DWF.</span> <span class= code-output >   Fixed a problem in which I assumed the background color was a string. 18 Jan 2011. DWF.</span> <span class= code-output >   Added ADDCMD keyword. 26 Jan 2011. DWF.</span> <span class= code-output >   Added LAYOUT keyword. 28 Jan 2011. DWF.</span> <span class= code-output >   Made a modification that allows THICK and COLOR keywords apply to symbols, too. 24 Feb 2011. DWF.</span> <span class= code-output >   Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >   Somehow I had gotten independent and dependent data reversed in the code. Put right. 16 May 2011. DWF.</span> <span class= code-output >   Allowed ASPECT (and /ISOTROPIC) to take into account input POSITION. 15 June 2011. Jeremy Bailin.</span> <span class= code-output >   Updated the BACKGROUND color selection from lessons learned in 27 Oct 2011 cgContour</span> <span class= code-output >       corrections. 27 Oct 2011. DWF.</span> <span class= code-output >   Added the ability to send the output directly to a file via the OUTPUT keyword. 9 Dec 2011, DWF.</span> <span class= code-output >   PostScript, PDF, and Imagemagick parameters can now be tailored with cgWindow_SetDefs. 14 Dec 2011. DWF.</span> <span class= code-output >   Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >   Over-zealous use of _STRICT_EXTRA when overplotting resulted in errors. Now use _EXTRA. 1 Jan 2012. DWF.</span> <span class= code-output >   Changes to allow better default colors, based on changes to cgColor and cgDefaultColor. 1 Feb 2012. DWF.</span> <span class= code-output >   Now allowing the user to draw in the  background  color, if the COLOR or AXISCOLOR is  BACKGROUND . 19 March 2012. DWF.</span> <span class= code-output >   Scalar input parameters are changed to 1-element vectors to avoid annoying error messages from PLOT. 6 April 2012. DWF.</span> <span class= code-output >   Added a LABEL keyword. 12 July 2012. DWF.</span> <span class= code-output >   Yikes! Bad choice of variable names in LABEL work yesterday has severe consequences. Changed names. 13 July 2012. DWF.</span> <span class= code-output >   Added OPLOTS keyword to allow cgOverplot objects. 18 July 2012. DWF.</span> <span class= code-output >   Added the ability to specify a symbol name with the PSYM keyword. 19 Juyl 2012. DWF.</span> <span class= code-output >   Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >   Fixed an interaction with the LABEL keyword that prevented a Title from appearing. 2 Oct 2012. DWF.</span> <span class= code-output >   Modified the way default colors are selected when the background color is  white . 4 Dec 2012. DWF.</span> <span class= code-output >   Still trying to accommodate users who incorrectly specify LONG integers while using INDEXED color. 26 Dec 2012. DWF.</span> <span class= code-output >   Modified code that checks to see if COLOR and AXISCOLOR keywords are the same as BACKGROUND and changes them.</span> <span class= code-output >        This precludes drawing in background color on non-white backgrounds. Now only change the</span> <span class= code-output >        colors if it is possible to draw a background color. 12 Feb 2013. DWF.</span> <span class= code-output >   Problem using symbol names (e.g., 'opencircle') in cgWindows is fixed. 10 May 2013. DWF.</span> <span class= code-output >   Changed the meaning of ISOTROPIC to its true meaning of keeping the same scale on both axes. 21 June 2013. DWF.</span> <span class= code-output >   Added XRANGE, XSTYLE, YRANGE, and YSTYLE keywords. This allows exact axis scaling if the XRANGE or YRANGE</span> <span class= code-output >       keywords are used without setting the XSTYLE or YSTYLE keywords, which is more intuitive. 15 July 2013. DWF.</span>       Copyright (c) 2010-2013, Fanning Software Consulting, Inc.      Use as you would use the IDL PLOT command: <span class= code-output >  cgPlot, Findgen(11)</span> <span class= code-output >  cgPlot, Findgen(11), Aspect=1.0</span> <span class= code-output >  cgPlot, Findgen(11), Color='olive', AxisColor='red', Thick=2</span> <span class= code-output >  cgPlot, Findgen(11), Color='blue', SymColor='red', PSym=-16</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgplots.html", "cgplots.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgplots.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgplots.html#cgPlotS", "cgPlotS", 'routine in <a href="coyote/cgplots.html">cgplots.pro</a>', "cgplots.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPlotS", " The purpose of cgPlotS is to create a wrapper for the traditional IDL graphics  command, PlotS. The primary purpose of this is to create plot commands that work  and look identically both on the display and in PostScript files.   The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD        Set this keyword to add the command to an cgWindow display.  COLOR        If this keyword is a string, the name of the data color.         Color names are those used with cgColor. Otherwise, the keyword is assumed         to be a color index into the current color table. May be a vector of the same         length as X.  MAP_OBJECT        If you are drawing on a map projection set up with Map_Proj_Init         and using projected meter space, rather than lat/lon space, then you can use this         keyword to provide a cgMap object that will allow you to convert the x and y         parameters from longitude and latitude, respectively, to projected meter space         before drawing. X and Y must both be present.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46. May also be specified as a         symbol names. See cgSymCat for details.  SYMCOLOR        If this keyword is a string, the name of the symbol color. By default, same as COLOR.         Otherwise, the keyword is assumed to be a color index into the current color table.         May be a vector of the same length as X.  SYMSIZE        A scalar or vector of symbol sizes. Default is 1.0. May be a vector of the same         length as X.  WINDOW         Set this keyword to add the command to the current cgWindow application.  _EXTRA        Any IDL PlotS keyword         not defined here is allowed in the program.   x         A vector or scalar argument providing the X components of the points to be          drawn or connected. May be a 2xN or 3xN array, if Y and Z parameters are          not used.  y         A vector or scalar argument providing the Y components of the points to be          drawn or connected.  z         A vector or scalar argument providing the Z components of the points to be          drawn or connected.   ", "Graphics", "     Change History: <span class= code-output >  Written, 12 November 2010. DWF.</span> <span class= code-output >  Added SYMCOLOR keyword. PSYM accepts all values from cgSYMCAT. SYMCOLOR and SYMSIZE</span> <span class= code-output >     keywords can be vectors the size of x. 15 November 2010. DWF</span> <span class= code-output >  Added ability to support COLOR keyword as a vector the size of x. 15 November 2010. DWF</span> <span class= code-output >  Now setting decomposition state by calling SetDecomposedState. 16 November 2010. DWF.</span> <span class= code-output >  Final color table restoration skipped in Z-graphics buffer. 17 November 2010. DWF.</span> <span class= code-output >  Changes so that color variables don't change type. 23 Nov 2010. DWF.</span> <span class= code-output >  Modified to use decomposed color, if possible. 24 Dec 2010. DWF.</span> <span class= code-output >  Whoops! Programming is like herding cats! 29 Dec 2010. DWF.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >  Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >  Added WINDOW keyword. 24 Jan 2011. DWF.</span> <span class= code-output >  Made a modification that allows THICK and COLOR keywords apply to symbols, too. 24 Feb 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Fixed a problem in which the colors of the line was not accurate in some cases. 29 November 2011. DWF.</span> <span class= code-output >  Added the MAP_OBJECT keyword for plotting on map projections. 2 Jan 2012. DWF.</span> <span class= code-output >  Made sure the map coordinate system is established before drawing if a map object is passed</span> <span class= code-output >       into the program. 26 June 2012. DWF.</span> <span class= code-output >  Added the ability to specify the PSYM keyword as a string. 20 July 2012. DWF.</span> <span class= code-output >  Added a check for a window to draw into, if needed. 8 July 2012. DWF.</span> <span class= code-output >  Loop counter didn't assume someone would pass in 2D array of XY pairs. Fixed. 31 Jan 2013. DWF.</span>       Copyright (c) 2010-2013, Fanning Software Consulting, Inc.      Use like the IDL PLOTS command:   <span class= code-prompt >IDL&gt;</span> cgPlot, Findgen(11)   <span class= code-prompt >IDL&gt;</span> cgPlotS, !X.CRange, [5,5], LINESTYLE=2, THICK=2, COLOR='red'  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgplots.html", "cgplots.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgplots.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgplots.html#cgPlotS", "cgPlotS", 'routine in <a href="idlastro/coyote/cgplots.html">cgplots.pro</a>', "cgplots.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPlotS", " The purpose of cgPlotS is to create a wrapper for the traditional IDL graphics  command, PlotS. The primary purpose of this is to create plot commands that work  and look identically both on the display and in PostScript files.   The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD        Set this keyword to add the command to an cgWindow display.  COLOR        If this keyword is a string, the name of the data color.         Color names are those used with cgColor. Otherwise, the keyword is assumed         to be a color index into the current color table. May be a vector of the same         length as X.  MAP_OBJECT        If you are drawing on a map projection set up with Map_Proj_Init         and using projected meter space, rather than lat/lon space, then you can use this         keyword to provide a cgMap object that will allow you to convert the x and y         parameters from longitude and latitude, respectively, to projected meter space         before drawing. X and Y must both be present.  PSYM        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 0 and 46. May also be specified as a         symbol names. See cgSymCat for details.  SYMCOLOR        If this keyword is a string, the name of the symbol color. By default, same as COLOR.         Otherwise, the keyword is assumed to be a color index into the current color table.         May be a vector of the same length as X.  SYMSIZE        A scalar or vector of symbol sizes. Default is 1.0. May be a vector of the same         length as X.  WINDOW         Set this keyword to add the command to the current cgWindow application.  _EXTRA        Any keywords supported by the PLOTS command are allowed.   x         A vector or scalar argument providing the X components of the points to be          drawn or connected. May be a 2xN or 3xN array, if Y and Z parameters are          not used.  y         A vector or scalar argument providing the Y components of the points to be          drawn or connected.  z         A vector or scalar argument providing the Z components of the points to be          drawn or connected.   ", "Graphics", "     Change History: <span class= code-output >  Written, 12 November 2010. DWF.</span> <span class= code-output >  Added SYMCOLOR keyword. PSYM accepts all values from cgSYMCAT. SYMCOLOR and SYMSIZE</span> <span class= code-output >     keywords can be vectors the size of x. 15 November 2010. DWF</span> <span class= code-output >  Added ability to support COLOR keyword as a vector the size of x. 15 November 2010. DWF</span> <span class= code-output >  Now setting decomposition state by calling SetDecomposedState. 16 November 2010. DWF.</span> <span class= code-output >  Final color table restoration skipped in Z-graphics buffer. 17 November 2010. DWF.</span> <span class= code-output >  Changes so that color variables don't change type. 23 Nov 2010. DWF.</span> <span class= code-output >  Modified to use decomposed color, if possible. 24 Dec 2010. DWF.</span> <span class= code-output >  Whoops! Programming is like herding cats! 29 Dec 2010. DWF.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >  Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >  Added WINDOW keyword. 24 Jan 2011. DWF.</span> <span class= code-output >  Made a modification that allows THICK and COLOR keywords apply to symbols, too. 24 Feb 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Fixed a problem in which the colors of the line was not accurate in some cases. 29 November 2011. DWF.</span> <span class= code-output >  Added the MAP_OBJECT keyword for plotting on map projections. 2 Jan 2012. DWF.</span> <span class= code-output >  Made sure the map coordinate system is established before drawing if a map object is passed</span> <span class= code-output >       into the program. 26 June 2012. DWF.</span> <span class= code-output >  Added the ability to specify the PSYM keyword as a string. 20 July 2012. DWF.</span>       Copyright (c) 2010-2012, Fanning Software Consulting, Inc.      Use like the IDL PLOTS command:   <span class= code-prompt >IDL&gt;</span> cgPlot, Findgen(11)   <span class= code-prompt >IDL&gt;</span> cgPlotS, !X.CRange, [5,5], LINESTYLE=2, THICK=2, COLOR='red'  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgpolygon.html", "cgpolygon.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgpolygon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgpolygon.html#cgPolygon", "cgPolygon", 'routine in <a href="coyote/cgpolygon.html">cgpolygon.pro</a>', "cgpolygon.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPolygon", "   Provides a device-independent and color-model-independent way to draw a    filled or unfilled polygon.   The program requires the Coyote Library  to be installed on your machine.   ", "ADDCMD        Set this keyword to add the command to an cgWindow. Setting this keyword         automatically sets the WINDOW keyword, but the command does not erase the         graphics window as it would normally.  COLOR         The name of the polygon color. Color names are those used with cgColor.          This value can also be a long integer or an index into the current color          table.  FCOLOR         The name of the polygon fill color. Color names are those used with cgColor.          This value can also be a long integer or an index into the current color          table. The default is the same as Color.  FILL         Set this keyword to draw a filled polygon, rather than an open polygon.  NORMAL         Set to indicate the polygon vertices are in normalized coordinates.  DEVICE         Set to indicate the polygon vertices are in device coordinates.  POSITION         Set this keyword to a four-element position array of normalized coordinates          to fill a rectangular area on the graphics display. The normal input parameters          are ignored if this keyword is set.  WINDOW         Set this keyword to add the command to the current cgWindow application.  _REF_EXTRA         Any other keywords to the IDL POLYFILL command may be used.   x         A vector argument providing the X coordinates of the points to be connected.          The vector must contain at least three elements. If only one argument is          specified, X must be an array of either two or three vectors (i.e., (2,*)          or (3,*)). In this special case, the vector X[0,*] specifies the X values,          X[1,*] specifies Y, and X[2,*] contain the Z values.  y         A vector argument providing the Y coordinates of the points to be connected.          Y must contain at least three elements.  z         An optional vector argument providing the Z coordinates of the points to be          connected. Z must contain at least three elements.   ", "Graphics", "     Change History: <span class= code-output >  Written, 26 March 2012. David Fanning.</span> <span class= code-output >  Added Position keyword to allow a fill of a particular portion of the graphics</span> <span class= code-output >      window. 20 Apr 2012. DWF.</span> <span class= code-output >  Added AddCmd keyword. 25 Oct 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Used like the IDL Plots or Polyfill commands:   <span class= code-prompt >IDL&gt;</span> cgPolygon, [0.25, 0.25, 0.75, 0.75, 0.25], [0.25, 0.75, 0.75, 0.25, 0.25], $ <span class= code-output >            /NORMAL, COLOR='blue'</span>   <span class= code-prompt >IDL&gt;</span> cgPolygon, [0.25, 0.25, 0.75, 0.75, 0.25], [0.25, 0.75, 0.75, 0.25, 0.25], $ <span class= code-output >            /NORMAL, COLOR='blue', FCOLOR='rose', /FILL</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgpolygon.html", "cgpolygon.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgpolygon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgpolygon.html#cgPolygon", "cgPolygon", 'routine in <a href="idlastro/coyote/cgpolygon.html">cgpolygon.pro</a>', "cgpolygon.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPolygon", "   Provides a device-independent and color-model-independent way to draw a    filled or unfilled polygon.   The program requires the Coyote Library  to be installed on your machine.   ", "COLOR         The name of the polygon color. Color names are those used with cgColor.          This value can also be a long integer or an index into the current color          table.  FCOLOR         The name of the polygon fill color. Color names are those used with cgColor.          This value can also be a long integer or an index into the current color          table. The default is the same as Color.  FILL         Set this keyword to draw a filled polygon, rather than an open polygon.  NORMAL         Set to indicate the polygon vertices are in normalized coordinates.  DEVICE         Set to indicate the polygon vertices are in device coordinates.  POSITION         Set this keyword to a four-element position array of normalized coordinates          to fill a rectangular area on the graphics display. The normal input parameters          are ignored if this keyword is set.  WINDOW         Set this keyword to add the command to the current cgWindow application.  _REF_EXTRA         Any other keywords to the IDL POLYFILL command may be used.   x         A vector argument providing the X coordinates of the points to be connected.          The vector must contain at least three elements. If only one argument is          specified, X must be an array of either two or three vectors (i.e., (2,*)          or (3,*)). In this special case, the vector X[0,*] specifies the X values,          X[1,*] specifies Y, and X[2,*] contain the Z values.  y         A vector argument providing the Y coordinates of the points to be connected.          Y must contain at least three elements.  z         An optional vector argument providing the Z coordinates of the points to be          connected. Z must contain at least three elements.   ", "Graphics", "     Change History: <span class= code-output >  Written, 26 March 2012. David Fanning.</span> <span class= code-output >  Added Position keyword to allow a fill of a particular portion of the graphics</span> <span class= code-output >      window. 20 Apr 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Used like the IDL Plots or Polyfill commands:   <span class= code-prompt >IDL&gt;</span> cgPolygon, [0.25, 0.25, 0.75, 0.75, 0.25], [0.25, 0.75, 0.75, 0.25, 0.25], $ <span class= code-output >            /NORMAL, COLOR='blue'</span>   <span class= code-prompt >IDL&gt;</span> cgPolygon, [0.25, 0.25, 0.75, 0.75, 0.25], [0.25, 0.75, 0.75, 0.25, 0.25], $ <span class= code-output >            /NORMAL, COLOR='blue', FCOLOR='rose', /FILL</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html", "cgprogressbar__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgprogressbar__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " This program is used to draw a progress bar on the display.      The program requires the Coyote Library  to be installed on your machine.   ", "", "Graphics", "    Change History: <span class= code-output >  Written by:  David W. Fanning, 27 September 2012. Inspired by Ronn Kling's program krProgressBar.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      To display a progress bar in a program with a FOR loop: <span class= code-output >     cgProgressBar = Obj_New( CGPROGRESSBAR , /Cancel)</span> <span class= code-output >     cgProgressBar -&gt; Start</span> <span class= code-output >     FOR j=0,9 DO BEGIN</span> <span class= code-output >        IF cgProgressBar -&gt; CheckCancel() THEN BEGIN</span> <span class= code-output >           ok = Dialog_Message('The user cancelled operation.')</span> <span class= code-output >           RETURN</span> <span class= code-output >        ENDIF</span> <span class= code-output >        Wait, 0.5  ; Would probably be doing something ELSE here!</span> <span class= code-output >        cgProgressBar -&gt; Update, (j+1)*10</span> <span class= code-output >     ENDFOR</span> <span class= code-output >     cgProgressBar -&gt; Destroy</span>     An additional example can be found my compiling the program and typing     this command:   <span class= code-prompt >IDL&gt;</span> ProgressBar_Example  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#cgProgressBar::INIT", "cgProgressBar::INIT", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "cgProgressBar::INIT", " Checks the cancel button to see if it has been selected.   ", "CANCELBUTTON       Set this keyword if you wish to have a CANCEL button on the        progress bar. If a CANCEL button is present, the user is reponsible        for checking if the user has canceled while the progress bar is running.  GROUP_LEADER       The identifier of a group leader widget for the progress bar. If the group        leader dies, the progress bar will be destroyed.  NOCANCEL        A depreciated keyword, added for compatibility with the old Progressbar code.         If set, sets the CancelButton keyword to 0.  PERCENT        The initial percentage completion of the progress bar when it first         appears on the display. Used only if the Start keyword is also set.  STARTTEXT        The text that appears in a label widget above the progress bar. If not         supplied, no label widget is created.  TITLE        The text that appears as the window title of the progress bar. By default,          Operation in Progress... .  XOFFSET        The X offset, in pixels, from the top-left corner of the display. If         not provided, the progress bar is centered in the window.  XSIZE        The X size, in pixels, of the progress bar.  YOFFSET        The Y offset, in pixels, from the top-left corner of the display. If         not provided, the progress bar is centered in the window.  YSIZE        The Y size, in pixels, of the progress bar.  ", "          -1", "    Returns a 1 if the user clicked the Cancel button and a 0 otherwise.  +  The initialization routine for the cgPROGRESSBAR object class.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#cgProgressBar::CLEANUP", "cgProgressBar::CLEANUP", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "cgProgressBar::CLEANUP", " The clean-up routine for the object.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#cgProgressBar::CheckCancel", "cgProgressBar::CheckCancel", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "cgProgressBar::CheckCancel", " Checks to see if a Cancel button has been clicked during the on-going operation.  An optional response can be issued, if so.   ", "MESSAGE       If the RESPOND keyword is set, this is the message set in the blocking        dialog widget. By default:  Current Operation Cancelled by User .  RESPOND       If this keyword is set, the program responds to a positive cancel flag        by destroying the progress bar and setting a blocking dialog widget        for the user. The keyword is ignored if the cancel flag is zero.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#cgProgressBar::CreateImage", "cgProgressBar::CreateImage", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "cgProgressBar::CreateImage", " Create the object image for the program. Taken from Ronn Kling's   really cool  background image in krProgressBar.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#cgProgressBar::Destroy", "cgProgressBar::Destroy", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "cgProgressBar::Destroy", " Destroys the progress bar.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#cgProgressBar::Update", "cgProgressBar::Update", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "cgProgressBar::Update", " Updates the progress bar.   ", "percent         The percent the progress bar has been completed. A number between          0 and 100. Forced into this range.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#cgProgressBar::UpdateMask", "cgProgressBar::UpdateMask", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "cgProgressBar::UpdateMask", " Update the image mask to reflect the correct percentage.   ", "percent         The percent the progress bar has been completed. A number between          0 and 100. Forced into this range.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#cgProgressBar::Start", "cgProgressBar::Start", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "cgProgressBar::Start", " Starts the progress bar by realizing the progress bar on the display.   ", "percent       Starts the progress bar with this percentage completion. A number        between 0.0 and 100.0.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#Progressbar_Example_Event", "Progressbar_Example_Event", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "Progressbar_Example_Event", " The event handler for the progress bar example program.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#Progressbar_Example", "Progressbar_Example", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "Progressbar_Example", " This is an example program that illustrates how the cgProgressBar  object can be used.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgprogressbar__define.html#cgProgressBar__Define", "cgProgressBar__Define", 'routine in <a href="coyote/cgprogressbar__define.html">cgprogressbar__define.pro</a>', "cgprogressbar__define.pro", "", "cgProgressBar__Define", " The class definition module for the cgPROGRESSBAR object class.   ", "class        The object class definition as a structure. Occasionally useful.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgps2pdf.html", "cgps2pdf.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgps2pdf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgps2pdf.html#cgPS2PDF", "cgPS2PDF", 'routine in <a href="coyote/cgps2pdf.html">cgps2pdf.pro</a>', "cgps2pdf.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPS2PDF", " Converts a PostScript file to a PDF file. This program requires  the Ghostscript program  to be installed on the user's computer, unless you are using a  Macintosh computer or an alterntive UNIX command to do the conversion  for you. If you are on a Macintosh, the supplied pstopdf  program is used instead. Use the UNIX_Convert_Cmd keyword to select  an alternative UNIX command (e.g., pstopdf or epstopdf).   The program requires the Coyote Library  to be installed on your machine.   ", "DELETE_PS         If this keyword is set, the PostScript file will be deleted after conversion.  GS_PATH         This program assumes that UNIX users can access Ghostscript with the  gs           command. It assumes WINDOWS users have installed Ghostscript in either          the C:\gs or C:\Program Files\gs directories. If either of these assumptions          is incorrect, you can specify the directory where the Ghostscript executable          resides with this keyword. (The Windows 32-bit executable is named gswin32c.exe          and the 64-bit executable is named gswin64c.exe.)  PAGETYPE         Set this keyword to the  type  of page. Possible values are: <span class= code-output >   Letter  - 8.5 by 11 inches.</span> <span class= code-output >   Legal  - 8.5 by 14 inches.</span> <span class= code-output >   Ledger  - 11 by 17 inches.</span> <span class= code-output >   A4  - 21.0 by 29.7 centimeters.</span>  SHOWCMD          Set this keyword to print the command that is spawned in the command output window.  SILENT          Set this keyword to suppress output messages.  SUCCESS          Set this keyword to a named variable that on output will contain a 1 to           indicate successful completion of the command, or to 0 otherwise.  UNIX_CONVERT_CMD          There are a number of commands on UNIX machines for converting PostScript files           to PDF files. This program assumes you are using Ghostscript to do the conversion           for you. The Ghostscript command on most UNIX machines is  gs , which is used if           this keyword is undefined. However, if you would prefer to use another program to do           the conversion for you, you can specify the name of the command here. For example,            pstopdf  or  epstopdf . In creating the actual command, this command will be           separated by a space from the input file name. In other words, if the alternative           conversion command was  pstopdf , the actual command would be  pstopdf  +     + ps_file.           Any output filename is ignored. This command does not apply to Macintosh or Windows           computers.  VERSION         On exit, contains the version of Ghostscipt that was used. Not available on Macs          or if an alternative UNIX command was used.   ps_file         The name of the input PostScript file that is being converted to a PDF file.          If not provided, the user will be asked to select a file.  pdf_file         The name of the output PDF file. If not provided, the name is constructed from          the input PostScript file name.   ", "Utilities Graphics", "     Change History: <span class= code-output >  Written, 6 December 2011, from code supplied to me by Paul Krummel. DWF.</span> <span class= code-output >  I had been using the Mac command pstopdf to create PDF files on Macs. Unfortunately, these</span> <span class= code-output >     PDF files are rotated incorrectly for plots having a landscape aspect ratio (ie, most plots).</span> <span class= code-output >     In this version of the software, I have decided to have Macs use Ghostscript and ImageMagick</span> <span class= code-output >     like all other UNIX machines. However, I have left the pstopdf code in place to accommodate</span> <span class= code-output >     anyone who prefers that method. You will have to uncomment the appropriate bits of code</span> <span class= code-output >     (there are two places where this has to happen, search for  DARWIN  in the code). 14 Aug 2013. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      A typical sequence of commands to create a test.pdf file: <span class= code-output >  PS_Start, Filename='test.ps'</span> <span class= code-output >  cgHistoplot, cgDemoData(7), /Fill</span> <span class= code-output >  PS_End</span> <span class= code-output >  cgPS2PDF, 'test.ps'</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgps2pdf.html", "cgps2pdf.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgps2pdf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgps2pdf.html#cgPS2PDF", "cgPS2PDF", 'routine in <a href="idlastro/coyote/cgps2pdf.html">cgps2pdf.pro</a>', "cgps2pdf.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPS2PDF", " Converts a PostScript file to a PDF file. This program requires  the Ghostscript program  to be installed on the user's computer, unless you are using a  Macintosh computer or an alterntive UNIX command to do the conversion  for you. If you are on a Macintosh, the supplied pstopdf  program is used instead. Use the UNIX_Convert_Cmd keyword to select  an alternative UNIX command (e.g., pstopdf or epstopdf).   The program requires the Coyote Library  to be installed on your machine.   ", "DELETE_PS         If this keyword is set, the PostScript file will be deleted after conversion.  GS_PATH         This program assumes that UNIX users can access Ghostscript with the  gs           command. It assumes WINDOWS users have installed Ghostscript in either          the C:\gs or C:\Program Files\gs directories. If either of these assumptions          is incorrect, you can specify the directory where the Ghostscript executable          resides with this keyword. (The Windows 32-bit executable is named gswin32c.exe          and the 64-bit executable is named gswin64c.exe.)  PAGETYPE         Set this keyword to the  type  of page. Possible values are: <span class= code-output >   Letter  - 8.5 by 11 inches.</span> <span class= code-output >   Legal  - 8.5 by 14 inches.</span> <span class= code-output >   Ledger  - 11 by 17 inches.</span> <span class= code-output >   A4  - 21.0 by 29.7 centimeters.</span>  SHOWCMD          Set this keyword to print the command that is spawned in the command output window.  SILENT          Set this keyword to suppress output messages.  SUCCESS          Set this keyword to a named variable that on output will contain a 1 to           indicate successful completion of the command, or to 0 otherwise.  UNIX_CONVERT_CMD          There are a number of commands on UNIX machines for converting PostScript files           to PDF files. This program assumes you are using Ghostscript to do the conversion           for you. The Ghostscript command on most UNIX machines is  gs , which is used if           this keyword is undefined. However, if you would prefer to use another program to do           the conversion for you, you can specify the name of the command here. For example,            pstopdf  or  epstopdf . In creating the actual command, this command will be           separated by a space from the input file name. In other words, if the alternative           conversion command was  pstopdf , the actual command would be  pstopdf  +     + ps_file.           Any output filename is ignored. This command does not apply to Macintosh or Windows           computers.  VERSION         On exit, contains the version of Ghostscipt that was used. Not available on Macs          or if an alternative UNIX command was used.   ps_file         The name of the input PostScript file that is being converted to a PDF file.          If not provided, the user will be asked to select a file.  pdf_file         The name of the output PDF file. If not provided, the name is constructed from          the input PostScript file name.   ", "Utilities Graphics", "     Change History: <span class= code-output >  Written, 6 December 2011, from code supplied to me by Paul Krummel. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      A typical sequence of commands to create a test.pdf file: <span class= code-output >  PS_Start, Filename='test.ps'</span> <span class= code-output >  cgHistoplot, cgDemoData(7), /Fill</span> <span class= code-output >  PS_End</span> <span class= code-output >  cgPS2PDF, 'test.ps'</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgps2raster.html", "cgps2raster.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgps2raster.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgps2raster.html#cgPS2Raster", "cgPS2Raster", 'routine in <a href="coyote/cgps2raster.html">cgps2raster.pro</a>', "cgps2raster.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPS2Raster", " The purpose of this program is to convert a PostScript file to a high  resolution raster file, using the ImageMagick convert command to do the  conversion. ImageMagick  must  be installed on your computer.   Note that one restriction the ImageMagick convert command imposes is that it  cannot convert encapsulated PostScript files that are in landscape mode to  raster files. These raster files will be clipped at one end of the file. If you  wish to do the conversion properly, make sure encapsulated landscape plots are  in portrait mode.   The program requires the Coyote Library  to be installed on your machine.   ", "ALLOW_TRANSPARENT         To make the background of some image files white, rather than transparent,          you have to set the  -alpha off  string in the ImageMagick call. This          string is automatically added to the ImageMagick call unless this keyword          is set, in which case the string is not added and the image background will          be transparent.  BMP        Set this keyword to convert the PostScript output file to a BMP image. Requires ImageMagick.  DELETE_PS        Setting this keyword will delete the PostScript file that is used as the intermediate         file in the conversion to other file types.  DENSITY        The horizontal and vertical density (in dots per inch, DPI) of the image when the PostScript file         is converted to a raster format by ImageMagick.  IM_OPTIONS        A string of ImageMagick  convert  options that can be passed to the ImageMagick convert         command. No error checking occurs with this string.  FILETYPE        This keyword provides a generic way of setting the BMP, GIF, JPEG, PNG, and TIFF         keywords. Set this keyword to the type of file output desired, and the correct  output          keyword will be set.  GIF        Set this keyword to convert the PostScript output file to a GIF image. Requires ImageMagick.  JPEG        Set this keyword to convert the PostScript output file to a JPEG image. Requires ImageMagick.  OUTFILENAME        On exit, the name of the output file that was created.  PDF        Set this keyword to convert the PostScript output file to a PDF file. Requires Ghostscript.  PNG        Set this keyword to convert the PostScript output file to a PNG image. Requires ImageMagick.  PORTRAIT        Set this keyword to indicate the PostScript file is in portrait mode. Otherwise, landscape         mode is assumed.  RESIZE        If an image is being created from the PostScript file, it is often resized by some         amount. You can use this keyword to change the value (e.g, RESIZE=100).         The value is passed on to resize argument as a percentage in the ImageMagick call.  SHOWCMD        Set this command to show the command used to do any PostScript coversions.  SILENT        Set this keyword to suppress output from the file. Is this keyword is set, be         sure to check the Success keyword on exit.  SUCCESS         On exit, this keyword is set to 1 if the program successfully managed to create a          raster file. It will be set to 0 otherwise.  TIFF        Set this keyword to convert the PostScript output file to a TIFF image. Requires ImageMagick.  WIDTH        Set this keyword to set the resulting width of the raster file. The height of the         raster will be such as to preserve the aspect ratio of the starting image.   ps_filename         The name of the input PostScript file that is being converted to a raster file.          If not provided, the user will be asked to select a file.  raster_filename         The name of the output raster file that is being converted from the PostScript file.          If not provided, the output filename is created from the input PostScript file name.          Note, this is the preferred way to create the output filename, since the OUTPUTNAME          keyword has been depreciated as an input keyword.   ", "Utilities Graphics", "     Change History: <span class= code-output > Written by: David W. Fanning, 12 December 2011</span> <span class= code-output > Added the ability to check to see if 8-bit or 24-bit PNG files should be created. 3 April 2012. DWF.</span> <span class= code-output > Modified the ImageMagick commands that resizes the image to a particular width. Necessary</span> <span class= code-output >    to accommodate PNG8 file output. Using ImageMagick 6.7.2-9. 4 April 2012. DWF.</span> <span class= code-output > Added FILETYPE keyword. 13 October 2012. DWF.</span> <span class= code-output > Apparently Macs can't handle the version number, so I have removed the version number</span> <span class= code-output >     check for Macs. 13 October 2012. DWF.</span> <span class= code-output > Worked on getting the WIDTH keyword to work correctly with Portrait mode files. 19 February 2013. DWF.</span> <span class= code-output > Added the ability to set the number of bits per channel with TIFF files with the IM_TIFF_DEPTH</span> <span class= code-output >     keyword in cgWindow_SetDefs, and changed the default number of bits to 8 per channel</span> <span class= code-output >     from the previous 16. 14 May 2013. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      To create a line plot in a PostScript file named lineplot.ps and     also create a PNG file named lineplot.png for display in a browser,     type these commands: <span class= code-output >   PS_Start, FILENAME='lineplot.ps'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='navy', /NODATA, XTITLE='Time', YTITLE='Signal'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='indian red', /OVERPLOT</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='olive', PSYM=2, /OVERPLOT</span> <span class= code-output >   PS_End, /PNG</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgps2raster.html", "cgps2raster.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgps2raster.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgps2raster.html#cgPS2Raster", "cgPS2Raster", 'routine in <a href="idlastro/coyote/cgps2raster.html">cgps2raster.pro</a>', "cgps2raster.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgPS2Raster", " The purpose of this program is to convert a PostScript file to a high  resolution raster file, using the ImageMagick convert command to do the  conversion. ImageMagick  must  be installed on your computer.   Note that one restriction the ImageMagick convert command imposes is that it  cannot convert encapsulated PostScript files that are in landscape mode to  raster files. These raster files will be clipped at one end of the file. If you  wish to do the conversion properly, make sure encapsulated landscape plots are  in portrait mode.   The program requires the Coyote Library  to be installed on your machine.   ", "ALLOW_TRANSPARENT         To make the background of some image files white, rather than transparent,          you have to set the  -alpha off  string in the ImageMagick call. This          string is automatically added to the ImageMagick call unless this keyword          is set, in which case the string is not added and the image background will          be transparent.  BMP        Set this keyword to convert the PostScript output file to a BMP image. Requires ImageMagick.  DELETE_PS        Setting this keyword will delete the PostScript file that is used as the intermediate         file in the conversion to other file types.  DENSITY        The horizontal and vertical density (in dots per inch, DPI) of the image when the PostScript file         is converted to a raster format by ImageMagick.  IM_OPTIONS        A string of ImageMagick  convert  options that can be passed to the ImageMagick convert         command. No error checking occurs with this string.  FILETYPE        This keyword provides a generic way of setting the BMP, GIF, JPEG, PNG, and TIFF         keywords. Set this keyword to the type of file output desired, and the correct  output          keyword will be set.  GIF        Set this keyword to convert the PostScript output file to a GIF image. Requires ImageMagick.  JPEG        Set this keyword to convert the PostScript output file to a JPEG image. Requires ImageMagick.  OUTFILENAME        On exit, the name of the output file that was created.  PDF        Set this keyword to convert the PostScript output file to a PDF file. Requires Ghostscript.  PNG        Set this keyword to convert the PostScript output file to a PNG image. Requires ImageMagick.  PORTRAIT        Set this keyword to indicate the PostScript file is in portrait mode. Otherwise, landscape         mode is assumed.  RESIZE        If an image is being created from the PostScript file, it is often resized by some         amount. You can use this keyword to change the value (e.g, RESIZE=100).         The value is passed on to resize argument as a percentage in the ImageMagick call.  SHOWCMD        Set this command to show the command used to do any PostScript coversions.  SILENT        Set this keyword to suppress output from the file. Is this keyword is set, be         sure to check the Success keyword on exit.  SUCCESS         On exit, this keyword is set to 1 if the program successfully managed to create a          raster file. It will be set to 0 otherwise.  TIFF        Set this keyword to convert the PostScript output file to a TIFF image. Requires ImageMagick.  WIDTH        Set this keyword to set the resulting width of the raster file. The height of the         raster will be such as to preserve the aspect ratio of the starting image.   ps_filename         The name of the input PostScript file that is being converted to a raster file.          If not provided, the user will be asked to select a file.  raster_filename         The name of the output raster file that is being converted from the PostScript file.          If not provided, the output filename is created from the input PostScript file name.          Note, this is the preferred way to create the output filename, since the OUTPUTNAME          keyword has been depreciated as an input keyword.   ", "Utilities Graphics", "     Change History: <span class= code-output > Written by: David W. Fanning, 12 December 2011</span> <span class= code-output > Added the ability to check to see if 8-bit or 24-bit PNG files should be created. 3 April 2012. DWF.</span> <span class= code-output > Modified the ImageMagick commands that resizes the image to a particular width. Necessary</span> <span class= code-output >    to accommodate PNG8 file output. Using ImageMagick 6.7.2-9. 4 April 2012. DWF.</span> <span class= code-output > Added FILETYPE keyword. 13 October 2012. DWF.</span> <span class= code-output > Apparently Macs can't handle the version number, so I have removed the version number</span> <span class= code-output >     check for Macs. 13 October 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      To create a line plot in a PostScript file named lineplot.ps and     also create a PNG file named lineplot.png for display in a browser,     type these commands: <span class= code-output >   PS_Start, FILENAME='lineplot.ps'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='navy', /NODATA, XTITLE='Time', YTITLE='Signal'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='indian red', /OVERPLOT</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='olive', PSYM=2, /OVERPLOT</span> <span class= code-output >   PS_End, /PNG</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgquery.html", "cgquery.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgquery.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgquery.html#cgQuery", "cgQuery", 'routine in <a href="coyote/cgquery.html">cgquery.pro</a>', "cgquery.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgQuery", "   Provides information about any cgWindow applications currently on the display. Returns    the window index numbers of any cgWindow applications current on the display.   ", "COUNT         The number of cgWindow applications currently on the display.  CURRENT         If set, the current cgWindow application information is returned in the result          of the function and in the information keywords.  DIMENSIONS         The dimensions of the ctWindow application, [xdim, ydim, n].  OBJECTREF         A vector of FSC_CMDWINDOW object references for each cgWindow application currently          on the display.  TITLE         A vector of window titles for each cgWindow application currently on the display.  WIDGETID         A vector of widget identifiers of the top-level base widget for each cgWindow          application currently on the display.   ", "Graphics", "     Change History: <span class= code-output >  Written, 23 January 2011. DWF.</span> <span class= code-output >  Added DIMENSIONS keyword to return current dimensions of cgWindows. 24 Feb 2011. DWF.</span> <span class= code-output >  Made sure this program only returns information on devices that support windows. 20 July 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used as a query routine:   <span class= code-prompt >IDL&gt;</span> wids = cgQuery(TITLE=titles, COUNT=count)   <span class= code-prompt >IDL&gt;</span> index = Where(StrUpCase(titles) EQ 'PLOT WINDOW', tcnt)   <span class= code-prompt >IDL&gt;</span> IF tcnt GT 0 THEN cgSet, wids[index]   <span class= code-prompt >IDL&gt;</span> cgWindow, 'Oplot', thisData, /AddCmd        windowIndexID: out, type=long           An array of window index numbers for each cgWindow application currently on the display.   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgquery.html", "cgquery.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgquery.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgquery.html#cgQuery", "cgQuery", 'routine in <a href="idlastro/coyote/cgquery.html">cgquery.pro</a>', "cgquery.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgQuery", "   Provides information about any cgWindow applications currently on the display. Returns    the window index numbers of any cgWindow applications current on the display.   ", "COUNT         The number of cgWindow applications currently on the display.  CURRENT         If set, the current cgWindow application information is returned in the result          of the function and in the information keywords.  DIMENSIONS         The dimensions of the ctWindow application, [xdim, ydim, n].  OBJECTREF         A vector of FSC_CMDWINDOW object references for each cgWindow application currently          on the display.  TITLE         A vector of window titles for each cgWindow application currently on the display.  WIDGETID         A vector of widget identifiers of the top-level base widget for each cgWindow          application currently on the display.   ", "Graphics", "     Change History: <span class= code-output >  Written, 23 January 2011. DWF.</span> <span class= code-output >  Added DIMENSIONS keyword to return current dimensions of cgWindows. 24 Feb 2011. DWF.</span> <span class= code-output >  Made sure this program only returns information on devices that support windows. 20 July 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used as a query routine:   <span class= code-prompt >IDL&gt;</span> wids = cgQuery(TITLE=titles, COUNT=count)   <span class= code-prompt >IDL&gt;</span> index = Where(StrUpCase(titles) EQ 'PLOT WINDOW', tcnt)   <span class= code-prompt >IDL&gt;</span> IF tcnt GT 0 THEN cgSet, wids[index]   <span class= code-prompt >IDL&gt;</span> cgWindow, 'Oplot', thisData, /AddCmd        windowIndexID: out, type=long           An array of window index numbers for each cgWindow application currently on the display.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgrandomindices.html", "cgrandomindices.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgrandomindices.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgrandomindices.html#cgRandomIndices", "cgRandomIndices", 'routine in <a href="coyote/cgrandomindices.html">cgrandomindices.pro</a>', "cgrandomindices.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgRandomIndices", " This function returns random indices without replacement. You can, for example,  select 100 random, unique indices from a vector of 10000 random indices.   The program uses an algorithm offered by JD Smith  on the IDL newsgroup.   ", "SEED         The seed for the random number generator, RandomU. This is also an output          variable, which you should use as the input to the next cgRandomIndices call,          if you need to do several random selections very quickly in a program.   length        The number of random values to be considered in the selection process. In         other words, the length of the selection vector.  number        The number of unique, random indices you want the function to return out of         the selection vector.   ", "Utilities", "     Change History: <span class= code-output >  Written, 22 December 2011 from an algorithm by JD Smith. David W. Fanning.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      To select 10 random indices from a list of 100: <span class= code-output >  indices = cgRandomIndices(100, 10, SEED=seed)</span> <span class= code-output >  Print, indices</span> <span class= code-output >       7  13  20  21  32  44  50  66  80  93</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgrandomwald.html", "cgrandomwald.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgrandomwald.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgrandomwald.html#cgRandomWald", "cgRandomWald", 'routine in <a href="coyote/cgrandomwald.html">cgrandomwald.pro</a>', "cgrandomwald.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgRandomWald", " This function creates a vector of N random numbers using an Inverse Gaussian Distribution,  which is also known as the Wald Distribution. The reference for the code can be found at  http://en.wikipedia.org/wiki/Inverse_Gaussian_distribution.   ", "MU        The mean of the distribution.  LAMBDA        The shape parameter of the distribution. As lambda tends to infinity, the inverse         distribution becomes more like a normal distribution.   seed       The seed for the random number generator. If undefined, on output will        have the seed used by the IDL RandomU function. See the documentation        for RandomU for additional information.  dims       A scalar or integer array defining the dimensions of the result. If no dimensions        are specified, a single random number is returned. If Dims is a scalar, a 1D vector        of that number of values will be returned.   ", "Utility", "     Written, 25 Oct 2012, by David W. Fanning.        Copyright (c) 2012, Fanning Software Consulting, Inc.      For example, to create 100 random numbers, using the Wald distribution: <span class= code-output >  wald = cgRandomWald(seed, 100)</span>    To create a 20-column by 10-row array of random numbers: <span class= code-output >  wald = cgRandoWald(seed, [20,10])</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgresizeimage.html", "cgresizeimage.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgresizeimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgresizeimage.html#cgResizeImage", "cgResizeImage", 'routine in <a href="coyote/cgresizeimage.html">cgresizeimage.pro</a>', "cgresizeimage.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgResizeImage", "   Provides a CONGRID like resizing of images, although it performs this service    correctly for both 2D and 3D images. Pixel locations do not change in the output    image, since the center of the pixel is used for interpolation purposes, rather than    the lower-left corner of the pixel. Unlike CONGRID, 3D images can use nearest neighbor    interpolation as well as bilinear interpolation.   ", "INTERPOLATE         Is set, bilinear interpolation is used to resize the image. Otherwise,          nearest neighbor sampling is used instead.       minus_one: in, optional, type=boolean, default=0           Identical to CONGRID MINUS_ONE keyword.   MINUS_ONEimage         The image variable to resize. Must be a 2D or 3D image. If a 3D image,          one of the image dimensions must be a 3.   cols          The number of columns (i.e., XSIZE) in the output image.   rows          The number of rows (i.e., YSIZE) in the output image.   ", "Utilities", "     Change History: <span class= code-output >  Written, 20 November 2010. DWF.</span>     I have been convinced (conversations with Wayne Landsman) that if the          CENTER keyword is set, the MINUS_ONE keyword is not needed, since          it was created to solve the same problem. So, I have changed the          default setting of MINUS_ONE to 0. 11 Jan 2011. DWF.      Eenamed cgResizeImage from FSC_Resize_Image. 20 Oct 2012. DWF.        Copyright (c) 2010, Fanning Software Consulting, Inc.      Used in a similar fashion to the Congrid command, but for images:   <span class= code-prompt >IDL&gt;</span> bigEarth = FSC_Resize_Image(cgDemoData(7), 720, 720)   <span class= code-prompt >IDL&gt;</span> bigRose  = FSC_Resize_Image(cgDemoData(16), 681, 447)  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgreverseindices.html", "cgreverseindices.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgreverseindices.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgreverseindices.html#cgReverseIndices", "cgReverseIndices", 'routine in <a href="coyote/cgreverseindices.html">cgreverseindices.pro</a>', "cgreverseindices.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgReverseIndices", "   Provides a simple way to obtain the data indices from a Histogram REVERSE_INDICES    vector. Returns a -1 if no indices are available. Check the COUNT keyword for the    number of indices returned.   ", "COUNT         The number of indices returned by the function.   :Return Value:       indices:          The indices that were put into the indexth bin of the histogram. A -1          is returned if no indices are in that particular bin.   ri         The REVERSE_INDICES vector that is returned from the HISTOGRAM command.  index         The zero-based index into the REVERSE_INDICES vector from which to obtain          the indices. For example, and index value of 4 will return the indices in          the 5th bin (zero based counting) of the histogram.   ", "Utilities", "     Written by David W. Fanning at suggestion of Ben Tupper. 7 January 2011.        Copyright (c) 2011, Fanning Software Consulting, Inc.      Used with the HISTOGRAM command:   <span class= code-prompt >IDL&gt;</span> image = cgDemoData(7)   <span class= code-prompt >IDL&gt;</span> h = Histogram(image, REVERSE_INDICES=ri)   <span class= code-prompt >IDL&gt;</span> indices = cgReverseIndices(ri, 4, COUNT=cnt)   <span class= code-prompt >IDL&gt;</span> Help, indices, cnt, h[4] <span class= code-output >  INDICES         LONG      = Array[948]</span> <span class= code-output >  CNT             LONG      =          948</span> <span class= code-output >  &lt;Expression&gt;    LONG      =          948</span>   <span class= code-prompt >IDL&gt;</span> image[indices] = 0  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgrootname.html", "cgrootname.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgrootname.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgrootname.html#cgRootName", "cgRootName", 'routine in <a href="idlastro/coyote/cgrootname.html">cgrootname.pro</a>', "cgrootname.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgRootName", " The purpose of this routine is to extract from a long file path, the  base or root file name. That is, the name of the actual file without  the preceeding directory information or the final file extension.  The directory information and file extension can be obtained via  keywords. It is similar to File_Basename in IDL.   ", "Directory         The name of the directory preceeding the root file name. If the file name          contains no directory information, this keyword is set equal to the current          working directory at the time the program is called.  Extension         The (usually!) three character file extention of the file.  Path_Separator         The string to use as a path separator in parsing the file. If undefined          the out of Path_Sep() is used.   filename        This file name to be parsed. It may be a relative or absolute path         name to a file.   ", "Utilities", "     Change History: <span class= code-output >  Written by: David W. Fanning, 31 July 2003.</span> <span class= code-output >  Modified by KaRo, 13 Feb. 2005 to allow dots in the filename.</span> <span class= code-output >  Added PATH_SEPARATOR keyword. 25 July 2005. DWF.</span> <span class= code-output >  Added ability to recongnize directory by path separator in last character. 19 Sept 2005. DWF.</span> <span class= code-output >  If directory is blank (because a relative filename was passed), set to current directory. 6 Aug 2009. DWF.</span> <span class= code-output >  There were a couple of instances where the directory did NOT end in a path separator. Fixed. 24 Feb 2012. DWF.</span>       Copyright (c) 2003-2012, Fanning Software Consulting, Inc.      Print, the root name, directory, and extension of a file:   <span class= code-prompt >IDL&gt;</span> thePath =  C:\rsi\idl7.8\lib\jester.pro    <span class= code-prompt >IDL&gt;</span> Print, cgRootName(thePath, Directory=theDirectory, Extension=theExtension) <span class= code-output >      jester</span>   <span class= code-prompt >IDL&gt;</span> Print, theDirectory <span class= code-output >       C:\rsi\idl7.8\lib\</span>   <span class= code-prompt >IDL&gt;</span> Print, theExtension <span class= code-output >       pro</span>        The base or root file name is returned. This is the  name  of the file       without either the preceeding directory information, or the prepended       file extension.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgrootname.html", "cgrootname.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgrootname.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgrootname.html#cgRootName", "cgRootName", 'routine in <a href="coyote/cgrootname.html">cgrootname.pro</a>', "cgrootname.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgRootName", " The purpose of this routine is to extract from a long file path, the  base or root file name. That is, the name of the actual file without  the preceeding directory information or the final file extension.  The directory information and file extension can be obtained via  keywords. It is similar to File_Basename in IDL.   ", "Directory         The name of the directory preceeding the root file name. If the file name          contains no directory information, this keyword is set equal to the current          working directory at the time the program is called.  Extension         The (usually!) three character file extention of the file.  Path_Separator         The string to use as a path separator in parsing the file. If undefined          the out of Path_Sep() is used.   filename        This file name to be parsed. It may be a relative or absolute path         name to a file.   ", "Utilities", "     Change History: <span class= code-output >  Written by: David W. Fanning, 31 July 2003.</span> <span class= code-output >  Modified by KaRo, 13 Feb. 2005 to allow dots in the filename.</span> <span class= code-output >  Added PATH_SEPARATOR keyword. 25 July 2005. DWF.</span> <span class= code-output >  Added ability to recongnize directory by path separator in last character. 19 Sept 2005. DWF.</span> <span class= code-output >  If directory is blank (because a relative filename was passed), set to current directory. 6 Aug 2009. DWF.</span> <span class= code-output >  There were a couple of instances where the directory did NOT end in a path separator. Fixed. 24 Feb 2012. DWF.</span>       Copyright (c) 2003-2012, Fanning Software Consulting, Inc.      Print, the root name, directory, and extension of a file:   <span class= code-prompt >IDL&gt;</span> thePath =  C:\rsi\idl7.8\lib\jester.pro    <span class= code-prompt >IDL&gt;</span> Print, cgRootName(thePath, Directory=theDirectory, Extension=theExtension) <span class= code-output >      jester</span>   <span class= code-prompt >IDL&gt;</span> Print, theDirectory <span class= code-output >       C:\rsi\idl7.8\lib\</span>   <span class= code-prompt >IDL&gt;</span> Print, theExtension <span class= code-output >       pro</span>        The base or root file name is returned. This is the  name  of the file       without either the preceeding directory information, or the prepended       file extension.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgscalevector.html", "cgscalevector.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgscalevector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgscalevector.html#cgScaleVector", "cgScaleVector", 'routine in <a href="coyote/cgscalevector.html">cgscalevector.pro</a>', "cgscalevector.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgScaleVector", " This is a utility routine to scale the elements of a vector or an array into a  given data range.   ", "DOUBLE         Set this keyword to perform scaling in double precision. Otherwise, scaling          is done in floating point precision.      maxvalue: in, optional          Set this value to the maximum value of the vector, before scaling (vector &lt; maxvalue).          The default value is Max(vector).      minvalue: in, optional          Set this value to the mimimum value of the vector, before scaling (minvalue &lt; vector).          The default value is Min(vector).      nan: in, optional, type=boolean, default=0          Set this keyword to enable not-a-number checking. NANs in vector will be ignored.      preserve_type: in, optional, type=boolean, default=0          Set this keyword to preserve the input data type in the output.   MAXVALUEMINVALUENANPRESERVE_TYPEvector       The input vector or array to be scaled.   minRange       The minimum output value of the scaled vector. Set to 0 by default.  maxRange       The maximum output value of the scaled vector. Set to 1 by default.  ", "Utilities", "     Change History: <span class= code-output >   Written by:  David W. Fanning, 12 Dec 1998.</span> <span class= code-output >   Added MAXVALUE and MINVALUE keywords. 5 Dec 1999. DWF.</span> <span class= code-output >   Added NAN keyword. 18 Sept 2000. DWF.</span> <span class= code-output >   Removed check that made minRange less than maxRange to allow ranges to be</span> <span class= code-output >      reversed on axes, etc. 28 Dec 2003. DWF.</span> <span class= code-output >   Added PRESERVE_TYPE and DOUBLE keywords. 19 February 2006. DWF.</span> <span class= code-output >   Added FPUFIX to cut down on floating underflow errors. 11 March 2006. DWF.</span> <span class= code-output >   Renamed Scale_Vector to cgScaleVector, 16 May 2013. DWF.</span>       Copyright (c) 1998-2013, Fanning Software Consulting, Inc.         Simple example of scaling a vector:   <span class= code-prompt >IDL&gt;</span> x = [3, 5, 0, 10]   <span class= code-prompt >IDL&gt;</span> xscaled = cgScaleVector(x, -50, 50)   <span class= code-prompt >IDL&gt;</span> Print, xscaled <span class= code-output >       -20.0000     0.000000     -50.0000      50.0000</span>       Suppose your image has a minimum value of -1.7 and a maximum value = 2.5.        You wish to scale this data into the range 0 to 255, but you want to use        a diverging color table. Thus, you want to make sure value 0.0 is scaled to 128.        You proceed like this: <span class= code-output >  scaledImage = cgScaleVector(image, 0, 255, MINVALUE=-2.5, MAXVALUE=2.5)</span>       A vector or array of the same size as the input, scaled into the data range given      by minRange and maxRange'. The input vector is confined to the data range set      by MinValue and MaxValue before scaling occurs.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgscatter2d.html", "cgscatter2d.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgscatter2d.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgscatter2d.html#cgScatter2D", "cgScatter2D", 'routine in <a href="coyote/cgscatter2d.html">cgscatter2d.pro</a>', "cgscatter2d.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgScatter2D", " The purpose of cgScatter2d is to create a two-dimensional scatter plot with the  option of drawing a correlation coefficient on the plot.   The program requires the Coyote Library  to be installed on your machine.   ", "AddCmd        Set this keyword to add the command to the resizeable graphics window cgWindow.  Aspect        Set this keyword to a floating point ratio that represents the aspect ratio         (ysize/xsize) of the resulting plot. The plot position may change as a result         of setting this keyword. Note that Aspect cannot be used when plotting with         !P.MULTI.  AxisColor        The name of the axis color. May be specified as a color table index number, as well.  AxesColor        Provisions for bad spellers.  Background        The name of the background color. May be specified as a color table index number, as well.  Charsize        The character size for axes annotations. Uses cgDefCharSize to select default         character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  Color        The name of the data or symbol color. May be specified as a color table index or color triple, as well.         May be a vector of the same length as the input data vectors.  Coefficient        The Pearson correlation coefficient of the two data sets. Calculated with the IDL routine CORRELATE.  FCharsize        The character size of the fit parameters that are written on the plot. This keyword is only         in effect if the Fit keyword is set. The default is the same as Charsize.  FColor        The name of the color for the fitting line though the data  FThick        The thickness of the fitting line.  FillColor        If this keyword is set to the name of a color, that color will be used to  fill          the area of the plot enclosed by the axes. Unfortunately, at this time, the FillColor         keyword can NOT be used with multiple plots, just single plots.  Fit        If this keyword is set to 1 (the default), a straight line is fit through the data         with the IDL routine LINFIT. If this keyword is set, the Pearson correlation coeffcient         and the equation of the fitted line is displayed on the scatter plot, unless the NoDisplay         keyword is set.  Font        The type of font desired for axis annotation.  GColor        The name of the grid color. May be specified as a color table index number, as well.  GLinestyle        The grid linestyle. Dotted by default. An integer from 0 to 5. See the IDL LineStyle         graphics keyword documentation.  Grid        Set this keword to 1 to draw a grid on the plot.  Isotropic        A short-hand way of setting the Aspect keyword to 1.  Layout        This keyword specifies a grid with a graphics window and determines where the         graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].         The grid is determined by the number of columns (ncolumns) by the number of         rows (nrows). The location of the graphic is determined by the third number. The         grid numbering starts in the upper left (1) and goes sequentually by column and then         by row.  NoDisplay        If this keyword is set, then the Pearson correlation coefficient and the equation         of the fitting line is not displayed on the plot. This keyword is only considered if         the Fit keyword is set.  NoErase        Set this keyword to draw the plot without erasing the display first.  OutFilename        If the Output keyword is set, the user will be asked to supply an output         filename, unless this keyword is set to a non-null string. In that case, the         value of this keyword will be used as the filename and there will be no dialog         presented to the user.  Output        Set this keyword to the type of output desired. Possible values are these: <span class= code-output >   'PS'   - PostScript file</span> <span class= code-output >   'EPS'  - Encapsulated PostScript file</span> <span class= code-output >   'PDF'  - PDF file</span> <span class= code-output >   'BMP'  - BMP raster file</span> <span class= code-output >   'GIF'  - GIF raster file</span> <span class= code-output >   'JPEG' - JPEG raster file</span> <span class= code-output >   'PNG'  - PNG raster file</span> <span class= code-output >   'TIFF' - TIFF raster file</span>         Or, you can simply set this keyword to the name of the output file, and the type of         file desired will be determined by the file extension. If you use this option, the         user will not be prompted to supply the name of the output file.          All raster file output is created through PostScript intermediate files (the         PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed         to produce anything other than PostScript output. (See cgPS2PDF and PS_END for         details.) And also note that you should NOT use this keyword when doing multiple         plots. The keyword is to be used as a convenient way to get PostScript or raster         output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  Overplot        Set this keyword if you wish to overplot data on an already exisiting set of         axes. It is like calling the IDL OPLOT command.  Params        The output line fitting parameters [intercept, slope].  Position        The usual four-element position vector for the Plot comamnd. Only monitored and         possibly changed if the Aspect keyword is used.  PSym        Any normal IDL PSYM values, plus any value supported by the Coyote Library         routine cgSYMCAT. An integer between 1 and 46.  SymSize        The symbol size.  Title        The title of the plot.  Traditional        If this keyword is set, the traditional color scheme of a black background for         graphics windows on the display is used and PostScript files always use a white background.  Window        Set this keyword to replace all the commands in a current cgWindow or to         create a new cgWindow for displaying this command.  XRange        The X range of the plot.  XStyle        The value sent to the XStyle keyword for the Plot command.  XTickLen        The X tick length. Will be set to 1.0 if the Grid keyword is set.  XTitle        The X title of the plot.  YRange        The Y range of the plot.  YStyle        The value sent to the YStyle keyword for the Plot command.  YTicklen        THe Y tick length. Will be set to 1.0 if the Grid keyword is set.  YTitle        The Y title of the plot.  _REF_EXTRA        Any keyword appropriate for the IDL Plot command is allowed in the program.   x        The variable along the X or horizontal dimension.  y        The varaiable along the Y or vertical dimension.   ", "          -1", "     Change History: <span class= code-output >  Written, 12 January 2012. DWF.</span> <span class= code-output >  Removed an extra COLOR keyword and changed an OPLOT command to a PLOTS command</span> <span class= code-output >     to allow a vector of colors to be used for the scatter points.</span> <span class= code-output >   Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >   Bad logic when creating a GRID and setting [XY]Style keywords. 30 Aug 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Use to compare two data sets: <span class= code-output >  data_1 = cgDemoData(1)+ RandomU(seed, 101) * 10</span> <span class= code-output >  data_2 = cgDemoData(1)+ RandomU(seed, 101) * 10</span> <span class= code-output >  cgScatter2D, data_1, data_2</span>     Add a grid to the plot: <span class= code-output >  cgScatter2D, data_1, data_2, SymColor='navy', FillColor='rose', /Grid</span>     Output the plot to a PNG file: <span class= code-output >  cgScatter2D, data_1, data_2,  SymColor='navy', /Grid, FillColor='rose', Output='scatter.png'</span>     Display the plot in a resizeable graphics window: <span class= code-output >  cgScatter2D, data_1, data_2,  SymColor='navy', /Grid, FillColor='rose', /Window</span>   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgset.html", "cgset.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgset.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgset.html#cgSet", "cgSet", 'routine in <a href="idlastro/coyote/cgset.html">cgset.pro</a>', "cgset.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSet", "   Allows the user to select the cgWindow application to be the  current  application.    Selection can be made based on window index number, widget identifier, object reference,    or window title.   ", "DISPLAY         If this keyword is set, the selection is made the  current  application,          and then the graphics window of the application is made the current graphics          window. If there is no selection, then the current cgWindow graphics window          is made the current graphics window.  OBJECT         If this keyword is set, the selection is assumed to be an object reference.  WIDGETID         If this keyword is set, the selection is assumed to be a widget identifier.   TITLE         If this keyword is set, the selection is assumed to be a window title. All          matching is done in uppercase characters.  selection       Normally, a window index number of an cgWindow application. But, the selection        can be a widget identifier, an object reference, or a window title, depending on        which keywords are set. The cgWindow matching the selection is made the  current         cgWindow and the application is moved forward on the display.   ", "Graphics", "     Change History: <span class= code-output >  Written, 23 January 2011. DWF.</span> <span class= code-output >  If selection match isn't provided, as like WShow to bring the current</span> <span class= code-output >     window forward on display. 26 Jan 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used with query routine:   <span class= code-prompt >IDL&gt;</span> wids = cgQuery(TITLE=titles, COUNT=count)   <span class= code-prompt >IDL&gt;</span> index = Where(StrUpCase(titles) EQ 'PLOT WINDOW', tcnt)   <span class= code-prompt >IDL&gt;</span> IF tcnt GT 0 THEN cgSet, wids[index]   <span class= code-prompt >IDL&gt;</span> cgWindow, 'Oplot', thisData, /AddCmd   <span class= code-prompt >IDL&gt;</span> cgSet ; Bring current window forwad on display  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgset.html", "cgset.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgset.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgset.html#cgSet", "cgSet", 'routine in <a href="coyote/cgset.html">cgset.pro</a>', "cgset.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSet", "   Allows the user to select the cgWindow application to be the  current  application.    Selection can be made based on window index number, widget identifier, object reference,    or window title.   ", "DISPLAY         If this keyword is set, the selection is made the  current  application,          and then the graphics window of the application is made the current graphics          window. If there is no selection, then the current cgWindow graphics window          is made the current graphics window.  OBJECT         If this keyword is set, the selection is assumed to be an object reference.  WIDGETID         If this keyword is set, the selection is assumed to be a widget identifier.   TITLE         If this keyword is set, the selection is assumed to be a window title. All          matching is done in uppercase characters.  selection       Normally, a window index number of an cgWindow application. But, the selection        can be a widget identifier, an object reference, or a window title, depending on        which keywords are set. The cgWindow matching the selection is made the  current         cgWindow and the application is moved forward on the display.   ", "Graphics", "     Change History: <span class= code-output >  Written, 23 January 2011. DWF.</span> <span class= code-output >  If selection match isn't provided, as like WShow to bring the current</span> <span class= code-output >     window forward on display. 26 Jan 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used with query routine:   <span class= code-prompt >IDL&gt;</span> wids = cgQuery(TITLE=titles, COUNT=count)   <span class= code-prompt >IDL&gt;</span> index = Where(StrUpCase(titles) EQ 'PLOT WINDOW', tcnt)   <span class= code-prompt >IDL&gt;</span> IF tcnt GT 0 THEN cgSet, wids[index]   <span class= code-prompt >IDL&gt;</span> cgWindow, 'Oplot', thisData, /AddCmd   <span class= code-prompt >IDL&gt;</span> cgSet ; Bring current window forwad on display  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgset_ttfont.html", "cgset_ttfont.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgset_ttfont.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgset_ttfont.html#cgSet_TTFont", "cgSet_TTFont", 'routine in <a href="coyote/cgset_ttfont.html">cgset_ttfont.pro</a>', "cgset_ttfont.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSet_TTFont", " The purpose of this procedure is to allow the user to set the True-Type font in use  both at the IDL command line and in a PostScript file. Normally, True-Type fonts are  set with the Device command and the Set_Font and TT_Font keywords. However, if such a  command is issued at the IDL command line, it has no effect in the PostScript device.  The cgSet_TTFont command will set the True-Type font for both devices, thereby keeping  them in sync with each other so that the expected output can be created both on the display  and in a PostScript file.   Using this procedure also has an effect on Coyote Graphics routines by setting both the  PS_TT_FONT and PS_FONT keywords to cgWindow_SetDefs. This ensures that any Coyote Graphics  routine that creates a PostScript file will use the requested font upon producing PostScript  output. Revert to the default Helvetica font by either using the font name  Helvetica ,  or by simply calling the function without a font name parameter. If the ADDCMD keyword is  used, the font change will apply ONLY to the current cgWindow (i.e., the PS_TT_FONT and PS_FONT  keywords will be set for just the current cgWindow).   ", "ADDCMD         Set this keyword to apply this True-Type font ONLY to the current cgWindow via          the PS_TT_FONT and PS_FONT keywords of cgControl. An error will occur if there          is no current cgWindow in existance.   font_name         The name of a true-type font to use in producing graphical output.   ", "Utility", "     Change History: <span class= code-output >  Written, 21 May 2013 by David W. Fanning.</span>       Copyright (c) 2013, Fanning Software Consulting, Inc.      Here is how to use this program to use the Times True-Type font: <span class= code-output >   cgSet_TTFont, 'Times'</span> <span class= code-output >   cgPlot, cgDemoData(1), Title='This is Times Text', Output='cgplot.png'</span>     or: <span class= code-output >   cgSet_TTFont, 'Times'</span> <span class= code-output >   PS_Start, 'cgplot.ps', Font=1</span> <span class= code-output >   cgPlot, cgDemoData(1), Title='This is Times Text'</span> <span class= code-output >   PS_End, /PNG</span>     or, to set the font ONLY for the current cgWindow: <span class= code-output >   cgPlot, cgDemoData(1), Title='This is Times Text', /Window</span> <span class= code-output >   cgSet_TTFont, 'Times', /AddCmd</span>   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgsetdifference.html", "cgsetdifference.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgsetdifference.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgsetdifference.html#cgSetDifference", "cgSetDifference", 'routine in <a href="coyote/cgsetdifference.html">cgsetdifference.pro</a>', "cgsetdifference.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSetDifference", " This function is used to find the difference between two sets of integers.  In other words, the function will find the values that are in Set A but  are missing in Set B.   ", "COUNT         This keyword contains the number of elements in the difference vector.  NORESULT         Set this keyword to a value that will be returned from the function          if no difference between the two sets of numbers is found. By default, set_a.  POSITIONS         An output keyword that will return the positions or locations in A of the values          not found in B.  SUCCESS         This keyword is set to 1 if an difference was found, and to 0 otherwise.   set_a       A vector of integers.  set_b       A vector of integers.   ", "Utilities", "     Change History: <span class= code-output >  Written by: David W. Fanning, November 25, 2009, from code originally supplied to the IDL</span> <span class= code-output >     newsgroup by Research Systems software engineers.</span> <span class= code-output >  Added COUNT and POSITIONS keywords. Liam Steele, 13 Dec 2012.</span> <span class= code-output >  Defined values for COUNT and POSITIONS when there is no overlap in the vectors. 14 Dec 2012. LS.</span>       Copyright (c) 2009-2013, Fanning Software Consulting, Inc.      Here is how to use this program:  <span class= code-prompt >IDL&gt;</span> set_a = [1,2,3,4,5]  <span class= code-prompt >IDL&gt;</span> set_b = [4,5,6,7,8,9,10,11]  <span class= code-prompt >IDL&gt;</span> Print, cgSetDifference(set_a, set_b) <span class= code-output >     1  2  3</span>      A vector of values that are found in set_a but are missing in set_b.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgsetintersection.html", "cgsetintersection.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgsetintersection.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgsetintersection.html#cgSetIntersection", "cgSetIntersection", 'routine in <a href="coyote/cgsetintersection.html">cgsetintersection.pro</a>', "cgsetintersection.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSetIntersection", " This function is used to find the intersection between two sets of integers.   ", "COUNT         This keyword contains the number of elements in the intersection vector.  INDICES_A         The indices in vector A where the intersected values appear. Note, this requires          the intersected points be unique in each vector. The Positions keyword will          return ALL the positions of the match, even if there are non-unique matches.  INDICES_B         The indices in vector B where the intersected values appear. This assumes that          the intersected points are represented uniquely in the A and B vectors.  NORESULT         Set this keyword to a value that will be returned from the function          if no intersection between the two sets of numbers is found. By default, -1.  POSITIONS         This keyword returns the positions or locations in A where the values          in B appear.  SUCCESS         This keyword is set to 1 if an intersection was found, and to 0 otherwise.   set_a       A vector of integers.  set_b       A vector of integers.   ", "Utilities", "     Change History: <span class= code-output >  Written by: David W. Fanning, October 31, 2009, from code originally supplied to the IDL</span> <span class= code-output >     newsgroup by Research Systems software engineers.</span> <span class= code-output >  Yikes, bug in original code only allowed positive integers. Fixed now. 2 Nov 2009. DWF.</span> <span class= code-output >  Fixed a problem when one or both of the sets was a scalar value. 18 Nov 2009. DWF.</span> <span class= code-output >  Added a POSITIONS keyword. 30 Nov 2012. DWF.</span> <span class= code-output >  Added a COUNT keyword 3 Dec 2012. DWF.</span> <span class= code-output >  Added INDICES_A and INDICES_B keywords at R.G. Stockwell's suggestion. 13 Dec 2012. DWF.</span>       Copyright (c) 2009-2013, Fanning Software Consulting, Inc.      Here is how to use this program:  <span class= code-prompt >IDL&gt;</span> set_a = [1,2,3,4,5]  <span class= code-prompt >IDL&gt;</span> set_b = [4,5,6,7,8,9,10,11]  <span class= code-prompt >IDL&gt;</span> Print, cgSetIntersection(set_a, set_b) <span class= code-output >      4   5</span>   See http://www.idlcoyote.com/tips/set_operations.html for other types of set operations.       A vector of values that are found in both set_a and set_b.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgsetunion.html", "cgsetunion.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgsetunion.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgsetunion.html#cgSetUnion", "cgSetUnion", 'routine in <a href="coyote/cgsetunion.html">cgsetunion.pro</a>', "cgsetunion.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSetUnion", " This function is used to find the union between two sets of integers.    One alternative for the cgSetUnion algorithm, provided by Maarten Sneep, is simply this: <span class= code-output >   superset = [set_a, set_b]</span> <span class= code-output >   union = superset[Uniq(superset, Sort(superset))]</span>  ", "set_a       A vector of integers.  set_b       A vector of integers.   ", "Utilities", "     Change History: <span class= code-output >   Written by: David W. Fanning, November 25, 2009, from code originally supplied to the IDL</span> <span class= code-output >       newsgroup by Research Systems software engineers.</span>       Copyright (c) 2009-2013, Fanning Software Consulting, Inc.       IDL&gt; set_a = [1,2,3,4,5]      IDL&gt; set_b = [4,5,6,7,8,9,10,11]      IDL&gt; Print, cgSetUnion(set_a, set_b)           1  2  3  4  5  6  7  8  9  10  11       See http://www.idlcoyote.com/tips/set_operations.html for other types of set operations.       A vector of values that are found in the combined integer sets.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgshade_surf.html", "cgshade_surf.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgshade_surf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgshade_surf.html#cgShade_Surf", "cgShade_Surf", 'routine in <a href="coyote/cgshade_surf.html">cgshade_surf.pro</a>', "cgshade_surf.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgShade_Surf", "   The purpose of cgShade_Surf is simply to make it easier for people to remember    how to create a shaded surface with cgSurf. See the documentation for cgSurf to    learn more about surface rendering. All this program does is make sure the SHADED    keyword to cgSurf is set.      ", "ADDCMD        Set this keyword to add the command to an cgWindow. Setting this keyword         automatically sets the WINDOW keyword, but the command does not erase the         graphics window as it would normally.  AXISCOLOR        If this keyword is a string, the name of the axis color. By default, 'black'.         Otherwise, the keyword is assumed to be a color index into the current color table.  AXESCOLOR        Provisions for bad spellers.  BACKGROUND        If this keyword is a string, the name of the background color. By default, 'white'.         Otherwise, the keyword is assumed to be a color index into the current color table.  BOTTOM        If this keyword is a string, the name of the bottom color. By default, same as COLOR.         Otherwise, the keyword is assumed to be a color index into the current color table.  CHARSIZE        The character size for axes annotations. Uses cgDefCharSize()*1.25 to select default         character size, unless !P.Charsize is set, in which case !P.Charsize*1.25 is always used.  COLOR        If this keyword is a string, the name of the data color. By default,  BLU6 .         Otherwise, the keyword is assumed to be a color index into the current color table.  ELEVATION_SHADING        Set this keyword to put elevation shading into effect for the surface.  FONT        The type of font desired. If undefined, and the current graphics device is PostScript,         the FONT keyword will be set to 1, indicating true-type fonts. The FONT keyword must         be set to -1 (Hershey fonts) or 1 (true-type fonts) for surface annotations to be         rotated correctly in PostScript output.  LAYOUT         This keyword specifies a grid with a graphics window and determines where the          graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].          The grid is determined by the number of columns (ncolumns) by the number of          rows (nrows). The location of the graphic is determined by the third number. The          grid numbering starts in the upper left (1) and goes sequentually by column and then          by row.  NOERASE        Set this keyword to prevent the window from erasing the contents before displaying         the surface plot.  OUTFILENAME        If the Output keyword is set, the user will be asked to supply an output         filename, unless this keyword is set to a non-null string. In that case, the         value of this keyword will be used as the filename and there will be no dialog         presented to the user.  OUTPUT        Set this keyword to the type of output desired. Possible values are these: <span class= code-output >   'PS'   - PostScript file</span> <span class= code-output >   'EPS'  - Encapsulated PostScript file</span> <span class= code-output >   'PDF'  - PDF file</span> <span class= code-output >   'BMP'  - BMP raster file</span> <span class= code-output >   'GIF'  - GIF raster file</span> <span class= code-output >   'JPEG' - JPEG raster file</span> <span class= code-output >   'PNG'  - PNG raster file</span> <span class= code-output >   'TIFF' - TIFF raster file</span>         Or, you can simply set this keyword to the name of the output file, and the type of         file desired will be determined by the file extension. If you use this option, the         user will not be prompted to supply the name of the output file.          All raster file output is created through PostScript intermediate files (the         PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed         to produce anything other than PostScript output. (See cgPS2PDF and PS_END for         details.) And also note that you should NOT use this keyword when doing multiple         plots. The keyword is to be used as a convenient way to get PostScript or raster         output for a single graphics command.  PALETTE         Set this keyword to a 3 x N or N x 3 byte array containing the RGB color vectors          to be loaded before the surface is displayed. Such vectors can be obtained, for          example, from cgLoadCT with the RGB_TABLE keyword:               cgLoadCT, 33, RGB_TABLE=palette              cgSurf, cgDemoData(2), PALETTE=palette, /Elevation   ROTX        The rotation about the X axis.  ROTZ        The rotation about the Z axis.  SHADED        Set this keyword if you wish to display a shaded surface. To display shaded surfaces         in a device-independent way, the shading values are confined to indices 0 to 253 with         SET_SHADING, and the background color is placed in color index 254. The color table vectors         are reduced to 254 elements when this happens. This all happens behind the stage,         and the original color table is restore upon exit. Because I can't tell how many values         SET_SHADING is using on entering the program, I just set it back to its default 256 values         on exiting the program.  SHADES        Set this keyword to a byte scaled 2D array of the same size as data to shade the surface         with these color indices.  SKIRT        Set this keyword to a Z value where a skirt will be drawn for the surface.  TITLE        The title of the plot. It will be written  flat to the screen , rather than rotated.  TRADITIONAL         If this keyword is set, the traditional color scheme of a black background for          graphics windows on the display is used and PostScript files always use a white background.  TSIZE        The character size for the title. Normally, the title character size is 1.1 times         the character size of the surface annotation.  TSPACE        The title Y spacing. This should be a number, between 0 and 1 that is the fraction         of the distance between !Y.Window[1] and !Y.Window[0] to locate the title above         !Y.Window[1]. When Total(!P.MULTI) EQ 0, the default is 0.005, and it is 0.0025 otherwise.  WINDOW         Set this keyword if you want to display the plot in a resizable graphics window.  XSTYLE         The normal XSTYLE keyword.  XTITLE         The X title of the plot.  YSTYLE         The normal YSTYLE keyword.  YTITLE         The Y title of the plot.  ZSTYLE         The normal ZSTYLE keyword.  ZTITLE         The Z title of the plot.  _Ref_Extra        Any keyword appropriate for the IDL Surface command is allowed in the program.   data         A two-dimensional array of data to be displayed.  x         A vector or two-dimensional array specifying the X coordinates of the          surface grid.  y         A vector or two-dimensional array specifying the Y coordinates of the          surface grid.   ", "Graphics", "     Change History: <span class= code-output >  Written, 1 February 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgshapeinfo.html", "cgshapeinfo.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgshapeinfo.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   The purpose of this program is allow the user to browse a very narrow    selection of shapefiles. Namely, those containing geographical shapes    in latitude and longitude coordinates. In other words, shapefiles    containing maps. File attributes are listed in the left-hand list    widget. Clicking on a file attribute, will list all the entity    attributes for that file attribute in the right-hand list. Clicking    an entity attribute with list the type of entity, and the X and Y    bounds of that entity (shown as LON and LAT, respectively), in the    statusbar at the bottom of the display.     Knowing the attribute and entity names of a shapefile will give    you insight into how to read and display the information in the file.    For examples, see the Coyote Library programs DrawCounties and DrawStates.   ", "", "Utilities", "    Modification History: <span class= code-output >  Written by David W. Fanning, 21 October 2006.</span> <span class= code-output >  Slight modifications to the interface. 14 May 2010. DWF.</span> <span class= code-output >  Added XRANGE and YRANGE output keywords. 15 May 2010. DWF.</span> <span class= code-output >  Renamed cgShapeFile from Shapefile. 20 Aug 2012. DWF.</span>      Copyright (c) 2006-2012, Fanning Software Consulting, Inc.      To learn about and draw the states.shp file in the IDL examples directory: <span class= code-output >  filename = Filepath(SubDir=['examples','data'], 'states.shp')</span> <span class= code-output >  cgShapeInfo, filename, XRANGE=xr, YRANGE=yr</span> <span class= code-output >  cgPlot, xr, yr, /NoData, XStyle=1, YStyle=1</span> <span class= code-output >  cgDrawShapes, filename</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgshapeinfo.html#cgShapeInfo_Events", "cgShapeInfo_Events", 'routine in <a href="coyote/cgshapeinfo.html">cgshapeinfo.pro</a>', "cgshapeinfo.pro", "", "cgShapeInfo_Events", " The event handler for the program.   ", "event          The event structure passed by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgshapeinfo.html#cgShapeInfo_Cleanup", "cgShapeInfo_Cleanup", 'routine in <a href="coyote/cgshapeinfo.html">cgshapeinfo.pro</a>', "cgshapeinfo.pro", "", "cgShapeInfo_Cleanup", " The clean-up routine for the program.   ", "tlb         The identifier of the widget that just died.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgshapeinfo.html#cgShapeInfo", "cgShapeInfo", 'routine in <a href="coyote/cgshapeinfo.html">cgshapeinfo.pro</a>', "cgshapeinfo.pro", "", "cgShapeInfo", " The calling program for learning more about the contents of the shapefile.   ", "XRANGE          The X range of the shapefile contents in the native units of the shapefile.  YRANGE          The Y range of the shapefile contents in the native units of the shapefile.  filename         The name of the shapefile you wish to browse. If not provided, the user          will be asked to select a shapefile.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgshapepointfile.html", "cgshapepointfile.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgshapepointfile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgshapepointfile.html#cgShapePointFile", "cgShapePointFile", 'routine in <a href="coyote/cgshapepointfile.html">cgshapepointfile.pro</a>', "cgshapepointfile.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgShapePointFile", " The purpose of this program is to create a shapefile filled with multiple  individual points as entities.   ", "APPEND       Set this keyword to append the points to a currently existing file. Otherwise,        a new file is created.  ATTRIBUTES       An array or scalar of  attribute  structures. If an array, it must be the same length as        in input data points. If not provided is will consist of the follow structure: {point:indexValue}.        If appending to a file, it must be defined in exactly the same way as the original file attributes.  FILENAME       The name of the shapefile. If not provided, the user will be asked to select a shape        file. If the file currently exists, it will be written over.  MAPCOORD       A MapCoord object (e.g., cgMap) which will be used to convert the input points from        projected meter space to lat/lon space prior to saving the data in the shapefile.   xpts       The X location of the input points. Presumed to be longitude values unless        the MapCoord keyword is used, in which case they are assumed to be in        projected meters values that will be converted to longitude values for        storage in the shapefile.  ypts       The Y location of the input points. Presumed to be latitude values unless        the MapCoord keyword is used, in which case they are assumed to be in        projected meters values that will be converted to latitude values for        storage in the shapefile.   ", "Mapping Utilities", "    Modification History: <span class= code-output >  Written by David W. Fanning, 23 August 2012.</span>      Copyright (c) 2012, Fanning Software Consulting, Inc.      Add two cities to a shapefile: <span class= code-output >  num = 2</span> <span class= code-output >  x = FltArr(num)</span> <span class= code-output >  y = FltArr(num)</span> <span class= code-output >  attr = Replicate({namedStruct, state:  , city:  }, num)</span> <span class= code-output >  x[0] = -104.87270</span> <span class= code-output >  y[0] =   39.768040</span> <span class= code-output >  attr[0] ={namedStruct, 'CO', 'DENVER'}</span> <span class= code-output >  x[1] = -105.1</span> <span class= code-output >  y[1] =   40.6</span> <span class= code-output >  attr[1] ={nameStruct, 'CO', 'FORT COLLINS'}</span> <span class= code-output >  cgShapePointFile, x, y, ATTRIBUTES=attr, FILENAME='test.shp'</span>     Add two more cities to the same shapefile: <span class= code-output >  num = 2</span> <span class= code-output >  x = FltArr(num)</span> <span class= code-output >  y = FltArr(num)</span> <span class= code-output >  attr = Replicate({namedStruct, state:  , city:  }, num)</span> <span class= code-output >  x[0] = -122.7</span> <span class= code-output >  y[0] =   45.5</span> <span class= code-output >  attr[0] ={namedStruct, 'OR', 'Portland'}</span> <span class= code-output >  x[1] = -122.3</span> <span class= code-output >  y[1] =   47.6</span> <span class= code-output >  attr[1] ={namedStruct, 'WA', 'Seattle'}</span> <span class= code-output >  cgShapePointFile, x, y, ATTRIBUTES=attr, FILENAME='test.shp', /APPEND</span>     View the file you just created: <span class= code-output >  cgShapeInfo, 'test.shp'</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgshaperange.html", "cgshaperange.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgshaperange.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgshaperange.html#cgShapeRange", "cgShapeRange", 'routine in <a href="coyote/cgshaperange.html">cgshaperange.pro</a>', "cgshaperange.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgShapeRange", "   Determines the X (longitude) and Y (latitude) data range of the entities in a shapefile.   ", "MEAN        A two-element float or double array giving the mean or average X value         and the mean or average Y value of the entities in the shapefile, respectively  MEDIAN        A two-element float or double array giving the median X value         and the median Y value of the entities in the shapefile, respectively  XRANGE        A two-element float or double array giving the minimum and maximum         extent of the shapefile entities in the X (longitude) direction, respectively  YRANGE        A two-element float or double array giving the minimum and maximum         extent of the shapefile entities in the Y (latitude) direction, respectively   shapefile        The name of the shapefile for which you wish to know the extent.         If not provided, the user will be asked to pick a shapefile.   ", "Utilities Map Projections", "    Modification History: <span class= code-output >  Written by David W. Fanning by 29 August 2012.</span>      Copyright (c) 2012, Fanning Software Consulting, Inc.      shapeBoundary = cgShapeRange('states.shp')       A four-element array containing the extent of the entity data in the     shapefile, in the order [xrange[0], yrange[0], xrange[1], yrange[1]].   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgshow.html", "cgshow.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgshow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgshow.html#cgShow", "cgShow", 'routine in <a href="coyote/cgshow.html">cgshow.pro</a>', "cgshow.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgShow", "   Allows the user to select the cgWindow application to be the brought forward on the display.    Selection can be made based on window index number, widget identifier, object reference,    or window title. This is the equivalent of WShow for normal graphics windows.   ", "OBJECT         If this keyword is set, the selection is assumed to be an object reference.  WIDGETID         If this keyword is set, the selection is assumed to be a widget identifier.   TITLE         If this keyword is set, the selection is assumed to be a window title. All          matching is done in uppercase characters.  selection       Normally, a window index number of an cgWindow application. But, the selection        can be a widget identifier, an object reference, or a window title, depending on        which keywords are set. The cgWindow matching the selection is made the  current         cgWindow and the application is moved forward on the display.   ", "Graphics", "     Change History: <span class= code-output >  Written, 1 February 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used with query routine:   <span class= code-prompt >IDL&gt;</span> wids = cgQuery(TITLE=titles, COUNT=count)   <span class= code-prompt >IDL&gt;</span> index = Where(StrUpCase(titles) EQ 'PLOT WINDOW', tcnt)   <span class= code-prompt >IDL&gt;</span> IF tcnt GT 0 THEN cgSet, wids[index]   <span class= code-prompt >IDL&gt;</span> cgWindow, 'Oplot', thisData, /AddCmd   <span class= code-prompt >IDL&gt;</span> cgShow ; Bring current window forwad on display  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgshow.html", "cgshow.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgshow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgshow.html#cgShow", "cgShow", 'routine in <a href="idlastro/coyote/cgshow.html">cgshow.pro</a>', "cgshow.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgShow", "   Allows the user to select the cgWindow application to be the brought forward on the display.    Selection can be made based on window index number, widget identifier, object reference,    or window title. This is the equivalent of WShow for normal graphics windows.   ", "OBJECT         If this keyword is set, the selection is assumed to be an object reference.  WIDGETID         If this keyword is set, the selection is assumed to be a widget identifier.   TITLE         If this keyword is set, the selection is assumed to be a window title. All          matching is done in uppercase characters.  selection       Normally, a window index number of an cgWindow application. But, the selection        can be a widget identifier, an object reference, or a window title, depending on        which keywords are set. The cgWindow matching the selection is made the  current         cgWindow and the application is moved forward on the display.   ", "Graphics", "     Change History: <span class= code-output >  Written, 1 February 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used with query routine:   <span class= code-prompt >IDL&gt;</span> wids = cgQuery(TITLE=titles, COUNT=count)   <span class= code-prompt >IDL&gt;</span> index = Where(StrUpCase(titles) EQ 'PLOT WINDOW', tcnt)   <span class= code-prompt >IDL&gt;</span> IF tcnt GT 0 THEN cgSet, wids[index]   <span class= code-prompt >IDL&gt;</span> cgWindow, 'Oplot', thisData, /AddCmd   <span class= code-prompt >IDL&gt;</span> cgShow ; Bring current window forwad on display  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgsnapshot.html", "cgsnapshot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgsnapshot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgsnapshot.html#cgSnapshot", "cgSnapshot", 'routine in <a href="coyote/cgsnapshot.html">cgsnapshot.pro</a>', "cgsnapshot.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSnapshot", " To get accurate screen dumps with the IDL command TVRD on 24-bit  PC and Macintosh computers, you have to be sure to set color  decomposition on. This program adds that capability automatically.  In addition, the program will optionally write BMP, GIF, JPEG,  PICT, PNG, and TIFF color image files of the screen dump.   ", "BMP        Set this keyword to write the screen dump as a color BMP file.  Cancel        An output keyword set to 1 if the user cancels out of a filename dialog.         Set to 0 otherwise.  Colors        If a 24-bit image has to be quantized, this will set the number of colors in         the output image. Applies to BMP, GIF, PICT, and PNG formats written from         24-bit displays.(See the COLOR_QUAN documentation for details.)  Cube        If this keyword is set to a value between 2 and 6 the color quantization will         use a cubic method of quantization. Applies to BMP, GIF, PICT, and PNG formats         written from 24-bit displays.(See the COLOR_QUAN documentation for details.)  Dither        If this keyword is set the quantized image will be dithered. Applies to BMP,         GIF, PICT, and PNG formats written from 24-bit displays.(See the COLOR_QUAN         documentation for details.)  Filename        The name of the output file. If you specify a name with a file extension of the         type of file you want to create (e.g., *.jpg, *.png, etc), then you do not have         to use the file type keywords (e.g., JPEG, PNG, etc.). Otherwise, you can specify         the name of the the file without an extension, use the file keywords, and a file         extension will be added to the filename automatically, depending upon the type of         output file selected.  GIF        Set this keyword to write the screen dump as a color GIF file.  JPEG        Set this keyword to write the screen dump as a color JPEG file.  NoDialog        Set this keyword if you wish to avoid the DIALOG_PICKFILE dialog that asks you         to name the output file. This keyword should be set, for example, if you are         processing screens in batch mode.  Order        Set this keyword to determine the image order for reading the display. Corresponds to         !Order and set to such as the default.  Overwrite_Prompt        Set this keyword if you would like to get a prompt if you are overwriting a file.         This applies only to operations involving DIALOG_PICKFILE.  PICT        Set this keyword to write the screen dump as a color PICT file.  PNG        Set this keyword to write the screen dump as a color PNG file.  POSITION        An alternative way of setting the xstart, ystart, ncols and nrows parameters         by specifying a four-element normalized array, [x0,y0,x1,y1].  TIFF        Set this keyword to write the screen dump as a color TIFF file.  True        Set this keyword to the type of interleaving you want. 1 = Pixel interleaved,         2 = row interleaved, 3 = band interleaved.  Type        Set this keyword to the type of file to write. Use this instead of         setting BMP, GIF, JPEG, PICT, PNG, or TIFF keywords: TYPE='JPEG'. The         primary purpose of this is to make widget event handlers easier to write.  Quality        This keyword sets the amount of compression for JPEG images. It should be set to a         value between 0 and 100. (See the WRITE_JPEG documentation for details.)  WID        The index number of the window to read from. The current graphics window         (!D.Window) is selected by default. An error is issued if no windows are          currently open on a device that supports windows.  _Ref_Extra        Any keywords that are appropriate for the WRITE_*** routines are also accepted via         keyword inheritance.   xstart       The starting column index of the rectantular area that is to be copied.  ystart       The starting row index of the rectantular area that is to be copied.  ncols       The number of columns to read in the rectantular area that is to be        copied. By default, !D.X_Size - xstart.  nrows       The number of rows to read in the rectantular area that is to be        copied. By default, !D.Y_Size - ystart.   ", "Graphics", "     Change History: <span class= code-output >  Renamed TVRead to cgSnapshot and retired TVRead. 20 February 2011. DWF.</span> <span class= code-output >  Added the ability to get the file type from the file name extension. 26 Dec 2011. DWF.</span> <span class= code-output >  Added a POSITION keyword to select a position inside the window for capture. 20 October 2012. DWF.</span> <span class= code-output >  Fixed a problem with not setting back to incoming decomposed state on an error. 20 Nov 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      To obtain an image of the current graphics window:   <span class= code-prompt >IDL&gt;</span> image = cgSnapshot()     To create a PNG file, named  test.png , of the current graphics window:   <span class= code-prompt >IDL&gt;</span> void = cgSnapshot(FILENAME='test.png')     To obtain the lower quadrant of a 512-by-512 graphics window as a     band interleaved image:   <span class= code-prompt >IDL&gt;</span> image = cgSnapshot(0, 0, 256, 256, TRUE=3)      The returned image will be a 2D image on 8-bit systems and a 24-bit pixel     interleaved true-color image on 24-bit systems. A -1 will be returned if a     file output keyword is used (e.g., JPEG, TIFF, etc.).   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgsnapshot.html", "cgsnapshot.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgsnapshot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgsnapshot.html#cgSnapshot", "cgSnapshot", 'routine in <a href="idlastro/coyote/cgsnapshot.html">cgsnapshot.pro</a>', "cgsnapshot.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSnapshot", " To get accurate screen dumps with the IDL command TVRD on 24-bit  PC and Macintosh computers, you have to be sure to set color  decomposition on. This program adds that capability automatically.  In addition, the program will optionally write BMP, GIF, JPEG,  PICT, PNG, and TIFF color image files of the screen dump.   ", "BMP        Set this keyword to write the screen dump as a color BMP file.  Cancel        An output keyword set to 1 if the user cancels out of a filename dialog.         Set to 0 otherwise.  Colors        If a 24-bit image has to be quantized, this will set the number of colors in         the output image. Applies to BMP, GIF, PICT, and PNG formats written from         24-bit displays.(See the COLOR_QUAN documentation for details.)  Cube        If this keyword is set to a value between 2 and 6 the color quantization will         use a cubic method of quantization. Applies to BMP, GIF, PICT, and PNG formats         written from 24-bit displays.(See the COLOR_QUAN documentation for details.)  Dither        If this keyword is set the quantized image will be dithered. Applies to BMP,         GIF, PICT, and PNG formats written from 24-bit displays.(See the COLOR_QUAN         documentation for details.)  Filename        The name of the output file. If you specify a name with a file extension of the         type of file you want to create (e.g., *.jpg, *.png, etc), then you do not have         to use the file type keywords (e.g., JPEG, PNG, etc.). Otherwise, you can specify         the name of the the file without an extension, use the file keywords, and a file         extension will be added to the filename automatically, depending upon the type of         output file selected.  GIF        Set this keyword to write the screen dump as a color GIF file.  JPEG        Set this keyword to write the screen dump as a color JPEG file.  NoDialog        Set this keyword if you wish to avoid the DIALOG_PICKFILE dialog that asks you         to name the output file. This keyword should be set, for example, if you are         processing screens in batch mode.  Order        Set this keyword to determine the image order for reading the display. Corresponds to         !Order and set to such as the default.  Overwrite_Prompt        Set this keyword if you would like to get a prompt if you are overwriting a file.         This applies only to operations involving DIALOG_PICKFILE.  PICT        Set this keyword to write the screen dump as a color PICT file.  PNG        Set this keyword to write the screen dump as a color PNG file.  POSITION        An alternative way of setting the xstart, ystart, ncols and nrows parameters         by specifying a four-element normalized array, [x0,y0,x1,y1].  TIFF        Set this keyword to write the screen dump as a color TIFF file.  True        Set this keyword to the type of interleaving you want. 1 = Pixel interleaved,         2 = row interleaved, 3 = band interleaved.  Type        Set this keyword to the type of file to write. Use this instead of         setting BMP, GIF, JPEG, PICT, PNG, or TIFF keywords: TYPE='JPEG'. The         primary purpose of this is to make widget event handlers easier to write.  Quality        This keyword sets the amount of compression for JPEG images. It should be set to a         value between 0 and 100. (See the WRITE_JPEG documentation for details.)  WID        The index number of the window to read from. The current graphics window         (!D.Window) is selected by default. An error is issued if no windows are          currently open on a device that supports windows.  _Ref_Extra        Any keywords that are appropriate for the WRITE_*** routines are also accepted via         keyword inheritance.   xstart       The starting column index of the rectantular area that is to be copied.  ystart       The starting row index of the rectantular area that is to be copied.  ncols       The number of columns to read in the rectantular area that is to be        copied. By default, !D.X_Size - xstart.  nrows       The number of rows to read in the rectantular area that is to be        copied. By default, !D.Y_Size - ystart.   ", "Graphics", "     Change History: <span class= code-output >  Renamed TVRead to cgSnapshot and retired TVRead. 20 February 2011. DWF.</span> <span class= code-output >  Added the ability to get the file type from the file name extension. 26 Dec 2011. DWF.</span> <span class= code-output >  Added a POSITION keyword to select a position inside the window for capture. 20 October 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      To obtain an image of the current graphics window:   <span class= code-prompt >IDL&gt;</span> image = cgSnapshot()     To create a PNG file, named  test.png , of the current graphics window:   <span class= code-prompt >IDL&gt;</span> void = cgSnapshot(FILENAME='test.png')     To obtain the lower quadrant of a 512-by-512 graphics window as a     band interleaved image:   <span class= code-prompt >IDL&gt;</span> image = cgSnapshot(0, 0, 256, 256, TRUE=3)      The returned image will be a 2D image on 8-bit systems and a 24-bit pixel     interleaved true-color image on 24-bit systems. A -1 will be returned if a     file output keyword is used (e.g., JPEG, TIFF, etc.).   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgstretch.html", "cgstretch.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgstretch.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: davidf@dfanning.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.dfanning.com</span>  ", "", " The program implements an interactive way to stretch an image histogram and provide  contrast for 2D image arrays. This is commonly known as  contrast stretching.   The program supports the following stretches: <span class= code-output >     LINEAR         Linear stretch between end points.</span> <span class= code-output >     CLIP           Linear, except a 2% of pixels are clipped at either end of histogram.</span> <span class= code-output >     GAMMA          An exponential function.</span> <span class= code-output >     LOG            An S-shaped log function.</span> <span class= code-output >     ASINH          An inverse hyperbolic sine function (strong log function).</span> <span class= code-output >     SQUARE ROOT    The square-root of the image pixels is stretched linearly.</span> <span class= code-output >     EQUALIZATION   Image histogram is equalized before stretching.</span> <span class= code-output >     ADAPTIVE EQUALIZATION Image histogram is equalized with Adapt_Hist_Equal before stretching.</span> <span class= code-output >     GAUSSIAN       A gaussian normal distribution function is applied to the stretch.</span> <span class= code-output >     STDDEV         The image is stretched by multiples of its standard deviation from its mean value.</span>      ", "", "Image Processing Widgets", "     Change History: <span class= code-output >  Written by David W. Fanning, April 1996, as XStretch.</span> <span class= code-output >  XStretch retired and the program was renamed cgStretch, 21 October 2012.</span>       Copyright (c) 1996-2012, Fanning Software Consulting, Inc.     If you have a 2D image in the variable  image , you can run this program like this:    <span class= code-prompt >IDL&gt;</span> image = cgDemoData(7)    <span class= code-prompt >IDL&gt;</span> cgStretch, image    <span class= code-prompt >IDL&gt;</span> cgStretch, image, TYPE='GAMMA'    <span class= code-prompt >IDL&gt;</span> cgStretch, image, TYPE='LOG', EXPONENT=5.5    <span class= code-prompt >IDL&gt;</span> cgStretch, image, TYPE='ASINH', BETA=0.1  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_VALIDATE_THRESHOLD", "cgSTRETCH_VALIDATE_THRESHOLD", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_VALIDATE_THRESHOLD", " This procedure validates a threshold value to make sure it doesn't  get out of range.   : Returns:      A validated threshold value in the appropriate range.   ", "threshold        The input threshold to check and validate.  info        The program's information structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_SCALEIMAGE", "cgSTRETCH_SCALEIMAGE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_SCALEIMAGE", " The function stretches the image according to the current stretch parameters.   ", "info        The information structure for the program.  ", "          -1", "     The stretched image is returned.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_IMAGEWINDOWKILLED", "cgSTRETCH_IMAGEWINDOWKILLED", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_IMAGEWINDOWKILLED", " The call-back routine responds appropriately when the image window  is destroyed by the user.   ", "imageWindowID        The identifier of the image draw widget.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_SAVETOMAIN", "cgSTRETCH_SAVETOMAIN", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_SAVETOMAIN", " The event handler saves the stretched image to the main program level,  where it can be manipulated further.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_DRAWLINES", "cgSTRETCH_DRAWLINES", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_DRAWLINES", " This procedure draws the minimum and maximum threshold lines on the histogram  plot.   ", "minThresh        The minimum threshold value.  maxThresh        The maximum threshold value.  info        The information structure for the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_NOTIFYOTHERS", "cgSTRETCH_NOTIFYOTHERS", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_NOTIFYOTHERS", " This procedure will notify interested parties (who have signed up with  the NotifyObj or NotifyPro keywords) about program events.   ", "info        The info structure of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_HISTOPLOT", "cgSTRETCH_HISTOPLOT", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_HISTOPLOT", " This procedure draws the histogram plot for the image.   ", "MAXVALUE          The maximum value that the histogram plot will display.  WID          The window index number of the window the histogram plot should be drawn in.  info        The information structure for the program.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_PARAMETERS", "cgSTRETCH_PARAMETERS", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_PARAMETERS", " This event handler sets up the stretch parameters for the different stretches.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_FLIPIMAGE", "cgSTRETCH_FLIPIMAGE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_FLIPIMAGE", " This event handler will reverse the image in the Y direction.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_GAMMA", "cgSTRETCH_GAMMA", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_GAMMA", " This event handler saves the Gamma pull-down menu events.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_NEGATIVE", "cgSTRETCH_NEGATIVE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_NEGATIVE", " This event handler reverses the image to a negative image.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_OPENIMAGE", "cgSTRETCH_OPENIMAGE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_OPENIMAGE", " This event handler allows new images to be opened and displayed.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_SAVEAS", "cgSTRETCH_SAVEAS", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_SAVEAS", " This event handler saves the stretched image in various raster and PostScript formats.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_SAVEHISTOAS", "cgSTRETCH_SAVEHISTOAS", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_SAVEHISTOAS", " This event handler saves the histogram in various raster and PostScript formats.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_SETTHRESHOLD", "cgSTRETCH_SETTHRESHOLD", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_SETTHRESHOLD", " This event handler sends the threshold values for the stretch.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_PRINT", "cgSTRETCH_PRINT", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_PRINT", " This event handler sends the output to a printer.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_PROCESS_EVENTS", "cgSTRETCH_PROCESS_EVENTS", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_PROCESS_EVENTS", " This event handler ONLY responds to button down events from the  draw widget. If it gets a DOWN event, it does two things: (1) finds  out which threshold line is to be moved, and (2) changes the  event handler for the draw widget to cgSTRETCH_MOVELINE.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_MOVELINE", "cgSTRETCH_MOVELINE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_MOVELINE", " This event handler continuously draws and erases a threshold line  until it receives an UP event from the draw widget. Then it turns  draw widget motion events OFF and changes the event handler for the  draw widget back to cgSTRETCH_PROCESS_EVENTS.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_RESTORE", "cgSTRETCH_RESTORE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_RESTORE", " The event handler restores the original stretch parameters.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_STRETCHTYPE", "cgSTRETCH_STRETCHTYPE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_STRETCHTYPE", " The event handler handles events from the Stretch Type buttons.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_QUIT", "cgSTRETCH_QUIT", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_QUIT", " The event handler that deals with the QUIT button.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_COLORS", "cgSTRETCH_COLORS", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_COLORS", " The event handler that deals setting image colors   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_MAXVALUE", "cgSTRETCH_MAXVALUE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_MAXVALUE", " The event handler that deals with the setting of the Max Value widget.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_IMAGE_RESIZE", "cgSTRETCH_IMAGE_RESIZE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_IMAGE_RESIZE", " The event handler that deals with resizing the image window.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_HISTOGRAM_RESIZE", "cgSTRETCH_HISTOGRAM_RESIZE", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_HISTOGRAM_RESIZE", " The event handler that deals with resizing the histogram window.   ", "event        The event structure.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH_CLEANUP", "cgSTRETCH_CLEANUP", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH_CLEANUP", " The widget clean-up routine.   ", "tlb        The identifier of the widget that died.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgstretch.html#cgSTRETCH", "cgSTRETCH", 'routine in <a href="coyote/cgstretch.html">cgstretch.pro</a>', "cgstretch.pro", "", "cgSTRETCH", " The widget definition module for this interative contrast stretching program.   ", "Beta        The beta factor in a Hyperpolic Sine stretch.  Block        Set this keyword if you wish the program to be a blocking widget.  Brewer         Set this keyword if you wish to use the Brewer color tables.  Colors         A five element string array, listing the colors for drawing the          histogram plot. If a particular color is represented as a null string, then the          default for that color is used. The colors are used as follows: <span class= code-output >   colors[0] : Background color. Default:  white .</span> <span class= code-output >   colors[1] : Axis color. Default:  black .</span> <span class= code-output >   colors[2] : Min threshold color. Default:  firebrick .</span> <span class= code-output >   colors[3] : Max threshold  color. Default:  steel blue .</span> <span class= code-output >   colors[4] : ASinh color. Default:  grn6 .</span> <span class= code-output >   colors[5] : Histogram color. Default:  charcoal .</span>  Colortable         The color table to display the image in. By default, gray-scale colors.  Exclude         The value to exclude in a standard deviation stretch.  Exponent         The logarithm exponent in a logarithmic stretch.  Filename         If no image is supplied as a positional parameter, this keyword can be          used to specify the name of an image file to read with ImageSelect.  Gamma         The gamma factor in a gamma stretch.  Group_Leader         The identifier of the widget group leader is this program is called from within          a widget program.  MinThresh         The initial minimun threshold value for the stretch.  MaxThresh         The initial maximum threshold value for the stretch.  Max_Value         Use this keyword to assign a maximun value for the normalized Histogram Plot.          Images with lots of pixels of one color (e.g. black) skew the histogram. This          helps make a better looking plot. Set by default to the maximum value of the          histogram data.  Multiplier         The multiplication factor in a standard deviation stretch. The standard deviation          is multiplied by this factor to produce the thresholds for a linear stretch.  Mean         The mean factor in a logarithmic stretch.  Negative         Set this keyword if you want to display the image with a negative or reverse stretch.  No_Window         Set this keyword if you do no want the program to display an image window. This would          be the case, for example, if you are displaying the image in your own window and your program          is being notified of images changes via the NOTIFY_PRO or NOTIFY_OBJ keywords.  Notify_Obj         Set this keyword to a structure containing the fields OBJECT and METHOD. When the image is changed,          the object identified in the OBJECT field will have the method identified in the METHOD          field called. The method should be written to accept one positional parameter. The parameter passed          to the method is a structure defined as below: <span class= code-output > struct = { image: stretchedImage, $ ; The stretched image.</span> <span class= code-output >     r: info.r, $                    ; The R color vector associated with the image</span> <span class= code-output >     g: info.g, $                    ; The G color vector associated with the image</span> <span class= code-output >     b: info.b, $                    ; The B color vector associated with the image</span> <span class= code-output >     type: info.type, $              ; The TYPE of stretch applied to the image.</span> <span class= code-output >     minThresh: info.minThresh, $    ; The minimum threshold value.</span> <span class= code-output >     maxThresh: info.maxThresh, $    ; The maximum threshold value.</span> <span class= code-output >     beta: info.beta, $              ; The current BETA value.</span> <span class= code-output >     gamma: info.gamma, $            ; The current GAMMA value.</span> <span class= code-output >     mean: info.mean, $              ; The current MEAN value.</span> <span class= code-output >     exponent: info.exponent, $      ; The current EXPONENT value.</span> <span class= code-output >     multiplier: info.multiplier, $  ; The current MULTIPLIER value.</span> <span class= code-output >     sigma: info.sigma }             ; The current SIGMA value.</span>  Notify_Pro         Set this keyword to the name of a procedure that should be notified when the image is changed.          The procedure should be defined with one positional parameter. The parameter passed          to the procedure is a structure defined in the Notify_Obj keyword..  Sigma         The sigma scale factor in a Gaussian stretch.  Title         The title of the histogram window. By default: 'Drag Vertical Lines to STRETCH Image Contrast'.  Type         The type of stretch to be applied. May be either a string (e.g, 'GAMMA') or a number from the table below: <span class= code-output > Number   Type of Stretch</span>  <span class= code-output >   0         Linear         scaled = BytScl(image, MIN=minThresh, MAX=maxThresh)</span> <span class= code-output >   1         Gamma          scaled = GmaScl(image, MIN=minThresh, MAX=maxThresh, Gamma=gamma)</span> <span class= code-output >   2         Log            scaled = LogScl(image, MIN=minThresh, MAX=maxThresh, Mean=mean, Exponent=exponent)</span> <span class= code-output >   3         Asinh          scaled = AsinhScl(image, MIN=minThresh, MAX=maxThresh, Beta=beta)</span> <span class= code-output >   4         Linear 2%      A linear stretch, with 2 percent of pixels clipped at both the top and bottom</span> <span class= code-output >   5         Square Root    A linear stretch of the square root histogram of the image values.</span> <span class= code-output >   6         Equalization   A linear stretch of the histogram equalized image histogram.</span> <span class= code-output >   7         Gaussian       A Gaussian normal function is applied to the image histogram.</span> <span class= code-output >   8         StdDev         The image is stretched linearly based on its mean and a multiple of its standard deviation.</span>  UValue         Any IDL variable can be stored in this keyword.  XPos         The X position of the histogram window in pixels from upper-left of display.  YPos         The Y position of the histogram window in pixels from upper-left of display.   _EXTRAtheImage       The image data to be stretched. It must be 2D array or a pointer to a 2D array.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgsurf.html", "cgsurf.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgsurf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgsurf.html#cgSurf", "cgSurf", 'routine in <a href="coyote/cgsurf.html">cgsurf.pro</a>', "cgsurf.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSurf", "   The purpose of cgSurf is to create a wrapper for the traditional IDL graphics    commands, Surface and Shade_Surf. The primary purpose of this is to create surface    commands that work and look identically both on the display and in PostScript files.   ", "ADDCMD        Set this keyword to add the command to an cgWindow. Setting this keyword         automatically sets the WINDOW keyword, but the command does not erase the         graphics window as it would normally.  AXISCOLOR        If this keyword is a string, the name of the axis color.         Otherwise, the keyword is assumed to be a color index into the current color table.  AXESCOLOR        Provisions for bad spellers.  BACKGROUND        If this keyword is a string, the name of the background color.         Otherwise, the keyword is assumed to be a color index into the current color table.  BOTTOM        If this keyword is a string, the name of the bottom color. By default, same as COLOR.         Otherwise, the keyword is assumed to be a color index into the current color table.  CHARSIZE        The character size for axes annotations. Uses cgDefCharSize()*1.25 to select default         character size, unless !P.Charsize is set, in which case !P.Charsize*1.25 is always used.  COLOR        If this keyword is a string, the name of the data color. By default,  BLU6 .         Otherwise, the keyword is assumed to be a color index into the current color table.  ELEVATION_SHADING        Set this keyword to put elevation shading into effect for the surface.  FONT        The type of font desired. If undefined, and the current graphics device is PostScript,         the FONT keyword will be set to 1, indicating true-type fonts. The FONT keyword must         be set to -1 (Hershey fonts) or 1 (true-type fonts) for surface annotations to be         rotated correctly in PostScript output.  LAYOUT         This keyword specifies a grid with a graphics window and determines where the          graphic should appear. The syntax of LAYOUT is three numbers: [ncolumns, nrows, location].          The grid is determined by the number of columns (ncolumns) by the number of          rows (nrows). The location of the graphic is determined by the third number. The          grid numbering starts in the upper left (1) and goes sequentually by column and then          by row.  NOERASE        Set this keyword to prevent the window from erasing the contents before displaying         the surface plot.  OUTFILENAME        If the Output keyword is set, the user will be asked to supply an output         filename, unless this keyword is set to a non-null string. In that case, the         value of this keyword will be used as the filename and there will be no dialog         presented to the user.  OUTPUT        Set this keyword to the type of output desired. Possible values are these: <span class= code-output >   'PS'   - PostScript file</span> <span class= code-output >   'EPS'  - Encapsulated PostScript file</span> <span class= code-output >   'PDF'  - PDF file</span> <span class= code-output >   'BMP'  - BMP raster file</span> <span class= code-output >   'GIF'  - GIF raster file</span> <span class= code-output >   'JPEG' - JPEG raster file</span> <span class= code-output >   'PNG'  - PNG raster file</span> <span class= code-output >   'TIFF' - TIFF raster file</span>         Or, you can simply set this keyword to the name of the output file, and the type of         file desired will be determined by the file extension. If you use this option, the         user will not be prompted to supply the name of the output file.          All raster file output is created through PostScript intermediate files (the         PostScript files will be deleted), so ImageMagick and Ghostview MUST be installed         to produce anything other than PostScript output. (See cgPS2PDF and PS_END for         details.) And also note that you should NOT use this keyword when doing multiple         plots. The keyword is to be used as a convenient way to get PostScript or raster         output for a single graphics command. Output parameters can be set with cgWindow_SetDefs.  PALETTE         Set this keyword to a 3 x N or N x 3 byte array containing the RGB color vectors          to be loaded before the surface is displayed. Such vectors can be obtained, for          example, from cgLoadCT with the RGB_TABLE keyword:               cgLoadCT, 33, RGB_TABLE=palette              cgSurf, cgDemoData(2), PALETTE=palette, /Elevation   ROTX        The rotation about the X axis.  ROTZ        The rotation about the Z axis.  SHADED        Set this keyword if you wish to display a shaded surface. To display shaded surfaces         in a device-independent way, the shading values are confined to indices 0 to 253 with         SET_SHADING, and the background color is placed in color index 254. The color table vectors         are reduced to 254 elements when this happens. This all happens behind the stage,         and the original color table is restore upon exit. Because I can't tell how many values         SET_SHADING is using on entering the program, I just set it back to its default 256 values         on exiting the program.  SHADES        Set this keyword to a byte scaled 2D array of the same size as data to shade the surface         with these color indices.  SKIRT        Set this keyword to a Z value where a skirt will be drawn for the surface.  TITLE        The title of the plot. It will be written  flat to the screen , rather than rotated.  TRADITIONAL         If this keyword is set, the traditional color scheme of a black background for          graphics windows on the display is used and PostScript files always use a white background.  TLOCATION         A one or two element array in normalized coordinates that gives the location of the          plot title. The plot is centered on this location. If one element, the X location is taken          as 0.5 and the element is used as the Y location. Othersize, use [x,y]. Default is [0.5,0.9].  TSIZE        The character size for the title. Normally, the title character size is 1.1 times         the character size of the surface annotation.  TSPACE        The title Y spacing. This should be a number, between 0 and 1 that is the fraction         of the distance between !Y.Window[1] and !Y.Window[0] to locate the title above         !Y.Window[1]. When Total(!P.MULTI) EQ 0, the default is 0.005, and it is 0.0025 otherwise.         Now depreciated in favor of TLocation.  WINDOW        Set this keyword to replace all the commands in the current cgWindow or to         create a new cgWindow, if one doesn't currenly exist, for displaying this command.         To create a new cgWindow if one currenly exists, use the cgWindow command  XSTYLE        The normal XSTYLE keyword.  XTITLE        The X title of the plot.  YSTYLE        The normal YSTYLE keyword.  YTITLE        The Y title of the plot.  ZSTYLE        The normal ZSTYLE keyword.  ZTITLE        The Z title of the plot.  _Ref_Extra        Any keyword appropriate for the IDL Surface command         is allowed in the program.   data         A two-dimensional array of data to be displayed.  x         A vector or two-dimensional array specifying the X coordinates of the          surface grid.  y         A vector or two-dimensional array specifying the Y coordinates of the          surface grid.   ", "Graphics", "     Change History: <span class= code-output >  Written, 13 November 2010. DWF.</span> <span class= code-output >  Now setting decomposition state by calling SetDecomposedState. 16 November 2010. DWF.</span> <span class= code-output >  Added TSIZE and TSPACE keywords to treak title size and placement,</span> <span class= code-output >     as necessary. 17 November 2010. DWF.</span> <span class= code-output >  Background keyword now applies in PostScript file as well. 17 November 2010. DWF.</span> <span class= code-output >  Many changes after BACKGROUND changes to get !P.MULTI working again! 18 November 2010. DWF.</span> <span class= code-output >  Changes so that color variables don't change type. 23 Nov 2010. DWF.</span> <span class= code-output >  Added ELEVATION_SHADING keyword. 26 Nov 2010. DWF.</span> <span class= code-output >  I had keyword conflicts with the AX and AZ rotation keywords. Now perform rotation with</span> <span class= code-output >     ROTX and ROTZ keywords. 7 Dec 2010. DWF.</span> <span class= code-output >  Added WINDOW keyword to allow graphic to be displayed in a resizable graphics window. 8 Dec 2010. DWF</span> <span class= code-output >  Changed the Title size to 1.1 times the character size of the plot. 14 Dec 2010. DWF.</span> <span class= code-output >  Modifications to allow cgSurf to be drop-in replacement for old Surface commands in</span> <span class= code-output >      indexed color mode. 24 Dec 2010. DWF.</span> <span class= code-output >  Previous changes introduced problems with OVERPLOT that have now been fixed. 28 Dec 2010. DWF.</span> <span class= code-output >  Set NOERASE keyword from !P.NoErase system variable when appropriate. 28 Dec 2010. DWF.</span> <span class= code-output >  Additional problems with NOERASE discovered and solved. 29 Dec 2010. DWF.</span> <span class= code-output >  Change to DECOMPOSED color was using incorrect color tables. 29 Dec 2010. DWF.</span> <span class= code-output >  In some cases, I was turning BYTE values to strings without converting to</span> <span class= code-output >      INTEGERS first. 30 Dec 2010. DWF.</span> <span class= code-output >  Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >  Fixed a problem in which I assumed the background color was a string. 18 Jan 2011. DWF.</span> <span class= code-output >  Added ADDCMD keyword. 26 Jan 2011. DWF.</span> <span class= code-output >  Added LAYOUT keyword. 28 Jan 2011. DWF.</span> <span class= code-output >  Added PALETTE keyword. 3 Feb 2011. DWF.</span> <span class= code-output >  Color table vectors must be obtained AFTER loading the color palette. 6 March 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Modified the color decomposition state to properly handle shaded surfaces in PostScript. 20 July 2011. DWF.</span> <span class= code-output >  Updated the BACKGROUND color selection from lessons learned in 27 Oct 2011 cgContour</span> <span class= code-output >       corrections. 27 Oct 2011. DWF.</span> <span class= code-output >  Added the ability to send the output directly to a file via the OUTPUT keyword. 9 Dec 2011, DWF.</span> <span class= code-output >  PostScript, PDF, and Imagemagick parameters can now be tailored with cgWindow_SetDefs. 14 Dec 2001. DWF.</span> <span class= code-output >  Now allowing the user to draw in the  background  color, if the COLOR or AXISCOLOR is  BACKGROUND . 19 March 2012. DWF.</span> <span class= code-output >  Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >  Lost the XTitle and YTitle keywords when doing shaded surfaces. 15 December 2012. DWF.</span> <span class= code-output >  Still had some color issues with shaded surfaces having to be done in indexed color to sort out.</span> <span class= code-output >      This appears to work now both on the display and in PostScript. 25 Jan 2013. DWF.</span> <span class= code-output >  Added the TLOCATION keyword and depreciated the TSPACE keyword. 27 May 2013. DWF.</span> <span class= code-output >  Fixed a problem with shaded surfaces that set the top color to the background color. 12 June 2013. DWF.</span>       Copyright (c) 2010-2013, Fanning Software Consulting, Inc.      Use as you would use the IDL SURFACE of SHADE_SURF command: <span class= code-output >  data = Dist(200)</span> <span class= code-output >  LoadCT, 33</span> <span class= code-output >  cgSurf, data</span> <span class= code-output >  cgSurf, data, Shades=BytScl(data)</span> <span class= code-output >  cgSurf, data, /Shaded</span> <span class= code-output >  cgSurf, data, /Shaded, Shades=BytScl(data)</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgsurface.html", "cgsurface.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgsurface.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "   The purpose of cgSurface is to create a window where a surface is displayed. Surfaces    can be wire-framed, shaded surfaces, and surfaces with texture maps draped on top of    them, among other types of surfaces. LEFT mouse button rotates the surface, MIDDLE    mouse button zooms out from the surface, RIGHT mouse button zoom into the surface.    Clicking on the surface axes will allow the user to move or translate the surface, and    clicking on the plot title will allow the user to move the title.      ", "", "Graphics", "     Change History: <span class= code-output >  Completely re-written, 26 November 2010 from old cgSURFACE program. DWF.</span> <span class= code-output >  Added ability to translate the surface by clicking on an axis. 28 Nov 2010. DWF.</span> <span class= code-output >  Fixed a problem with light controls in which the light controls didn't show the</span> <span class= code-output >      current light color. 28 Nov 2010. DWF.</span> <span class= code-output >  I was ANDing [XYZ]Style keywords with 8 instead of 4 for hidded axes. Fixed. 4 Jan 2011. DWF.</span> <span class= code-output >  Added Axes ON/OFF button. 4 Jan 2011. DWF.</span> <span class= code-output >  Rotation is throwing underflow warnings, so switched to code that surpress</span> <span class= code-output >      these warnings. 26 Aug 2011. DWF</span> <span class= code-output >  Added TRANSFORM keyword to allow the initial surface to be rotated to user</span> <span class= code-output >      specifications. 26 Sept 2011. DWF.</span> <span class= code-output >  Changed FSC_Normalize to cgNormalize to reflect new name. 6 Feb 2013. DWF.</span>       Copyright (c) 2010-2011, Fanning Software Consulting, Inc.      Use as you would use the IDL SURFACE of SHADE_SURF command: <span class= code-output >  data = Dist(200)</span> <span class= code-output >  LoadCT, 33</span> <span class= code-output >  cgSurface, data</span> <span class= code-output >  cgSurface, data, /Elevation_Shading</span> <span class= code-output >  cgSurface, data, /Shaded</span> <span class= code-output >  cgSurface, data, /Shaded, Texture_Image=cgDemoData(16)</span>  <span class= code-output >  Setting up the initial surface rotation.</span>   <span class= code-prompt >IDL&gt;</span> T3D, /RESET, ROTATE=[0, 0, 30]   <span class= code-prompt >IDL&gt;</span> T3D, ROTATE=[-90, 0, 0]   <span class= code-prompt >IDL&gt;</span> T3D, ROTATE=[0, 30, 0]   <span class= code-prompt >IDL&gt;</span> T3D, ROTATE=[30, 0, 0]   <span class= code-prompt >IDL&gt;</span> cgSurface, cgDemoData(2), Transform=!P.T  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#CW_Light_Control_Intensity_Events", "CW_Light_Control_Intensity_Events", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "CW_Light_Control_Intensity_Events", " Controls light intensity by handling selection events from the Intensity Value widget.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#CW_Light_Control_Events", "CW_Light_Control_Events", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "CW_Light_Control_Events", " Controls light properties such as color, whether the light is on or off, etc.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#CW_Light_Control", "CW_Light_Control", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "CW_Light_Control", " This is a compound widget that allows the user to manipulate various  properties of a light object via a graphical user interface.   ", "Color      A color triple representing the color of the light.  Event_Pro      The name of an event handler that will handle events for this widget.  Index      A color table index number. If the Color keyword is not used, the color       will be obtained from the colors loaded in the current color table at this       color table index number.  LabelSize      The size of the label widget used in the compound widget in pixels.       If not specified, the  natural  size of the label widget is used.  Name      A name for this widget. Provided to help identify the widget in       event handlers.  SetColor_Name      This keyword sets the UNAME property of the Set Color button in the interface.       It's purpose is to help you identify that button in event handlers.  UValue       A container to store any IDL variable needed by the user of this program.  parent       The parent widget of this compound widget.  theLight       An object reference to a particular light object.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Light_Done", "cgSurface_Light_Done", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Light_Done", " An event handler that destroys the light controller in the program.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Light_Controls_Event", "cgSurface_Light_Controls_Event", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Light_Controls_Event", " An event handler that renders the light controller's graphics.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Light_Controls", "cgSurface_Light_Controls", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Light_Controls", " An event handler that creates the graphical user interface for the  light controller.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Axes_OnOff", "cgSurface_Axes_OnOff", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Axes_OnOff", " An event handler that turns the surface axes on or off.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Bottom_OnOff", "cgSurface_Bottom_OnOff", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Bottom_OnOff", " An event handler that turns the bottom color on or off.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Change_Colors", "cgSurface_Change_Colors", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Change_Colors", " An event handler that changes the color tables for elevation shading.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Draw_Events", "cgSurface_Draw_Events", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Draw_Events", " An event handler for draw events such as expose events and trackball  events. The trackball uses the IDL-supplied TRACKBALL_DEFINE.PRO.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Elevation_Colors", "cgSurface_Elevation_Colors", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Elevation_Colors", " An event handler changing the colors used in elevation shading.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Elevation_Shading", "cgSurface_Elevation_Shading", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Elevation_Shading", " An event handler to set up elevation shading for the surface.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Exit", "cgSurface_Exit", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Exit", " An event handler to destroy the GUI for this program.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Move_Surface", "cgSurface_Move_Surface", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Move_Surface", " An event handler to allow the surface to move in the graphics window.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Move_Title", "cgSurface_Move_Title", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Move_Title", " An event handler to allow the title to move in the graphics window.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Output", "cgSurface_Output", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Output", " An event handler to allow the user to save the graphics window  in a variety of output formats, including raster formats and  PostScript.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Properties", "cgSurface_Properties", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Properties", " An event handler to allow the user to change various surface properties.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Resize", "cgSurface_Resize", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Resize", " An event handler to respond to window resizing events.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Skirt_OnOff", "cgSurface_Skirt_OnOff", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Skirt_OnOff", " An event handler to turn the surface skirt on and off.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Style", "cgSurface_Style", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Style", " An event handler to respond to events from the Style menu, changing  style properties of the surface.   ", "event       The event structure from the graphical user interface of the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Cleanup", "cgSurface_Cleanup", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Cleanup", " The cleanup routine for the program. Cleans everything up when the widget dies.   ", "tlb       The identifier of the widget that just died.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface_Aspect", "cgSurface_Aspect", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface_Aspect", " A function for calculating the correct surface aspect ratio. A position  in the window with this aspect ratio is returned.   ", "MARGIN       The desired margin around the edges of the window.  WindowAspect       The aspect ratio of the window the graphics are to be displayed in.  aspectRatio       The desired aspect ratio of the surface.   ", "          -1", "    A four-element POSITION array, giving the position in the window for     a plot with this aspect ratio.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgsurface.html#cgSurface", "cgSurface", 'routine in <a href="coyote/cgsurface.html">cgsurface.pro</a>', "cgsurface.pro", "", "cgSurface", "   The purpose of cgSurface is to create a window where a surface is displayed. Surfaces    can be wire-framed, shaded surfaces, and surfaces with texture maps draped on top of    them, among other types of surfaces. LEFT mouse button rotates the surface, MIDDLE    mouse button zooms out from the surface, RIGHT mouse button zoom into the surface.    Clicking on the surface axes will allow the user to move or translate the surface, and    clicking on the plot title will allow the user to move the title.   ", "Axiscolor        The name of the axis color. By default, 'black'..  Background        The name of the background color. By default, 'white'.  Block         Set this keyword to make the program a blocking widget program.  Bottom        The name of the bottom color. By default, same as COLOR.  Brewer        Set this keyword to indicate that the colortable (CTABLE) is         to use Brewer color tables rather than IDL standard color tables.  Charsize        The character size of the surface annotation. This value is multiplied         times a 12 point character size.  Color        The name of the data color.  Constrain_Aspect        Set this keyword to maintain the aspect ratio of the Y size         of the data to the Y size of the data. The default is to let the         sizes conform to a unit square.  CTable        The color table to use with the surface. The default is to use the         current color table.  Elevation_Shading        Set this keyword to put elevation shading into effect for the surface.  Font        The name of the true-type font desired for axis annotation and the plot title.         If undefined, the default is  Helvetica .  Hidden_Lines        Set this keyword to turn hidden line removal on for the surface. Turned         ON by default.  Group_Leader         Set this keyword to the identifier of a widget that will serve as the          group leader for this widget program. When the group leader dies, this          program will die, too.  Palette        A 3x256 byte array (or 256x3) representing the colors for elevation shading. An alternative         way of specifying the color table, instead of using the CTable keyword.  Reverse        Set this keyword to reverse the color table set by CTABLE.  Shaded        Set this keyword if you wish to display a shaded surface. The is the same as setting STYLE=2.  Skirt         Set this keyword to a Z value where a skirt will be drawn for the surface.  Style         Sets the style of the surface: <span class= code-output >   0 - Dot surface</span> <span class= code-output >   1 - Wire mesh (the default)</span> <span class= code-output >   2 - Shaded surface</span> <span class= code-output >   3 - Parallel X lines</span> <span class= code-output >   4 - Parallel Y line</span> <span class= code-output >   5 - Wire mesh lego style</span> <span class= code-output >   6 - Solid lego style</span>  Texture_Image         Set this keyword to a 2D or true-color image that will be overlaid on the surface          as a texture map. If a 2D image is passed, the colortable specified with CTABLE will          be used to construct a true-color image for the texture map.  Title        The title of the plot. It will be written  flat to the screen , rather than rotated.  TCharsize         The title character size. By default 1.25 times the Charsize.  TColor         The name of the title color. By default, the same as AxisColor.  Transform         A homogeneous transformation matrix to be applied to the initial surface. Such a          transformation matrix can be obtained, for example, with the T3D procedure.  XOffset         The number of pixels the surface window should be offset in the X direction          from the upper-left corner of the display.  XRange         The X data range of the data. Normally, just chosen from the data itself.  XSize         The X size of the initial surface window. By default, 640 pixels.  XStyle         The normal XSTYLE keyword.  XTitle         The text for the X axis of the surface plot.  YOffset         The number of pixels the surface window should be offset in the Y direction          from the upper-left corner of the display.  YRange         The Y data range of the data. Normally, just chosen from the data itself.  YSize         The Y size of the initial surface window. By default, 640 pixels.  YStyle         The normal YSTYLE keyword.  YTitle         The text for the Y axis of the surface plot.  ZRange         The Z data range of the data. Normally, just chosen from the data itself.  ZScale          A number between 0.001 and 1.0 that will  scale  the Z axis height. Default is 1.0.  ZStyle         The normal ZSTYLE keyword.  ZTitle         The text for the Z axis of the surface plot.  _Extra        Any keyword appropriate for the IDLgrSurface object is allowed in the program.  data         A two-dimensional array of data to be displayed.  x         A vector or two-dimensional array specifying the X coordinates of the          surface grid.  y         A vector or two-dimensional array specifying the Y coordinates of the          surface grid.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgsymbol.html", "cgsymbol.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgsymbol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgsymbol.html#cgSymbol_Example", "cgSymbol_Example", 'routine in <a href="idlastro/coyote/cgsymbol.html">cgsymbol.pro</a>', "cgsymbol.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSymbol_Example", " This function provides a device-independent way to ask for commonly-used  symbols (e.g., less than or equal to, Angstrom, degree symbol, etc.),  including all 24 Greek symbols in upper and lower case, to display with text.   For this program to work correctly on your graphics display, you should be using  Hershey fonts (!P.Font=-1). It will work correctly in PostScript with either  hardware fonts (!P.Font=0) or True-Type fonts (!P.Font=1).   Greek Symbols are created by  calling the Coyote Library routine Greek  from this program.   ", "PS        Normally, the PostScript version of the symbol is returned automatically if         the current device is PostScript and !P.Font is 0 or 1. But, the PostScript version         of the symbol can be obtained at any time and in any device, by setting this keyword.  UNICODE        If this keyword is set, the function returns the Unicode value for the symbol.   ", "Graphics", "     Change History: <span class= code-output >  Written by: David W. Fanning, 2 September 2011.</span> <span class= code-output >  Added plus-minus symbol. 2 Nov 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  Displays the symbols and their names in a graphics window.        To create a lowercase Greek psi symbol:   <span class= code-prompt >IDL&gt;</span> cgPlot, findgen(11), XTitle='This title contains ' + $ <span class= code-output >           cgSymbol('psi') + ' as a Greek letter'</span>      To create an Angstrom sign:   <span class= code-prompt >IDL&gt;</span> cgPlot, findgen(11), XTitle='This title contains (' + $ <span class= code-output >          cgSymbol('Angstrom') +  ') an Angstrom sign.'</span>      A string variable that represents the requested symbol and can be used     in a textual context.   ");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgsymbol.html#cgSymbol", "cgSymbol", 'routine in <a href="idlastro/coyote/cgsymbol.html">cgsymbol.pro</a>', "cgsymbol.pro", "", "cgSymbol", " This function provides a device-independent way to ask for commonly-used  symbols (e.g., less than or equal to, Angstrom, degree symbol, etc.),  including all 24 Greek symbols in upper and lower case, to display with text.   ", "CAPITAL        If this keyword is set, the captial Greek letter is returned rather than the lowercase         Greek letter. An alternative way of capitalizing the letter is to make the first letter         of the name an uppercase letter.  EXAMPLE        If this keyword is set, the names of symbols and the symbols themselves are written         out in the current graphics window.  PS        Normally, the PostScript version of the symbol is returned automatically if         the current device is PostScript and !P.Font is 0 or 1. But, the PostScript version         of the symbol can be obtained at any time and in any device, by setting this keyword.  UNICODE        If this keyword is set, the function returns the Unicode value for the symbol.   symbol       The name of the symbol desired as a string. Valid string names are the 24        characters of the Greek alphabet, plus commonly used graphical symbols: <span class= code-output >  alpha        nu        leq</span> <span class= code-output >  beta         xi        geq</span> <span class= code-output >  gamma        omicron   neg</span> <span class= code-output >  delta        pi        deg</span> <span class= code-output >  epsilon      rho       equiv</span> <span class= code-output >  zeta         sigma     prime</span> <span class= code-output >  eta          tau       angstrom</span> <span class= code-output >  theta        upsilon   sun</span> <span class= code-output >  iota         phi       varphi</span> <span class= code-output >  kappa        chi       infinity</span> <span class= code-output >  lambda       psi       copyright</span> <span class= code-output >  mu           omega</span>        Note that if the first letter of the name is capitalized, this is        the equivalent of setting the Capital keyword. Only Greek characters        use this method of selecting symbols.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgsymbol.html", "cgsymbol.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgsymbol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgsymbol.html#cgSymbol_Example", "cgSymbol_Example", 'routine in <a href="coyote/cgsymbol.html">cgsymbol.pro</a>', "cgsymbol.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSymbol_Example", " This function provides a device-independent way to ask for commonly-used  symbols (e.g., less than or equal to, Angstrom, degree symbol, subscripts, superscripts, etc.),  including all 24 Greek symbols in upper and lower case, to display with text.   For this program to work correctly on your graphics display, you should be using  Hershey fonts (!P.Font=-1). It will work correctly in PostScript with either  hardware fonts (!P.Font=0) or True-Type fonts (!P.Font=1).   Greek Symbols are created by  calling the Coyote Library routine cgGreek  from this program.      Normally, rather than calling cgSymbol, the symbols are embedded in Coyote Graphics  text that are used for axis annotation and so forth. See Embedding Symbols in Coyote  Graphics Output &lt;http://www.idlcoyote.com/cg_tips/embedsymbols.php&gt;. Embedded subscripts  and superscripts are implemented like this: <span class= code-output >   $\upTEXT$ : Raise the text in TEXT to superscript level and reduce character size by 62%.</span> <span class= code-output >   $\expTEXT$ : Raise the text in TEXT to superscript level and reduce character size by 44%.</span> <span class= code-output >   $\downTEXT$ : Lower the text in TEXT to subscript level and reduce character size by 62%.</span> <span class= code-output >   $\subTEXT$ : Lower the text in TEXT to subscript level and reduce character size by 44%.</span>  ", "PS        Normally, the PostScript version of the symbol is returned automatically if         the current device is PostScript and !P.Font is 0 or 1. But, the PostScript version         of the symbol can be obtained at any time and in any device, by setting this keyword.  UNICODE        If this keyword is set, the function returns the Unicode value for the symbol.   ", "Graphics", "     Change History: <span class= code-output >  Written by: David W. Fanning, 2 September 2011.</span> <span class= code-output >  Added plus-minus symbol. 2 Nov 2011. DWF.</span> <span class= code-output >  Added  up ,  down ,  exp   sub  and  n  symbols for subscripting and superscripting. 9 Nov 2012. DWF.</span> <span class= code-output >  Added  division  and  times  signs. 24 Nov 2012. DWF.</span> <span class= code-output >  Updated UNICODE values to display capital letters correctly. 23 Dec 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  Displays the symbols and their names in a graphics window.        To create a lowercase Greek psi symbol:   <span class= code-prompt >IDL&gt;</span> cgPlot, findgen(11), XTitle='This title contains ' + $ <span class= code-output >           cgSymbol('psi') + ' as a Greek letter'</span>   <span class= code-prompt >IDL&gt;</span> cgPlot, findgen(11), XTitle='This title contains $\psi$ as a Greek letter'      To create an Angstrom sign:   <span class= code-prompt >IDL&gt;</span> cgPlot, findgen(11), XTitle='This title contains (' + $ <span class= code-output >          cgSymbol('Angstrom') +  ') an Angstrom sign.'</span>   <span class= code-prompt >IDL&gt;</span> cgPlot, findgen(11), XTitle='This title contains ($\Angstrom$) an Angstrom sign.'      To create subscripts or superscripts:   <span class= code-prompt >IDL&gt;</span> cgPlot, findgen(11), XTitle='E=mc$\up2$'   <span class= code-prompt >IDL&gt;</span> cgPlot, findgen(11), XTitle='H$\sub2$O'   <span class= code-prompt >IDL&gt;</span> cgPlot, findgen(11), XTitle='H$\upSuper$MT $\Omega$$\subSubscript$', Charsize=2.0      It is possible to use Greek characters as superscripts and subscripts. Do so by      prepending the Greek character with  \\  inside the normal superscript or subscript      notation. For example, to use lambda as an exponent to the Greek character Omega, you      can type this:   <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(1), XTitle='$\Omega$$\exp\\lambda$', Charsize=2.0      To use lambda as a subscript, type this:           IDL&gt; cgPlot, cgDemoData(1), XTitle='$\Omega$$\sub\\lambda$', Charsize=2.0       A string variable that represents the requested symbol and can be used     in a textual context.   ");
  
  libdata[libdataItem++] = new Array("coyote/cgsymbol.html#cgSymbol", "cgSymbol", 'routine in <a href="coyote/cgsymbol.html">cgsymbol.pro</a>', "cgsymbol.pro", "", "cgSymbol", " This function provides a device-independent way to ask for commonly-used  symbols (e.g., less than or equal to, Angstrom, degree symbol, etc.),  including all 24 Greek symbols in upper and lower case, to display with text.   ", "CAPITAL        If this keyword is set, the captial Greek letter is returned rather than the lowercase         Greek letter. An alternative way of capitalizing the letter is to make the first letter         of the name an uppercase letter.  EXAMPLE        If this keyword is set, the names of symbols and the symbols themselves are written         out in the current graphics window.  PS        Normally, the PostScript version of the symbol is returned automatically if         the current device is PostScript and !P.Font is 0 or 1. But, the PostScript version         of the symbol can be obtained at any time and in any device, by setting this keyword.  UNICODE        If this keyword is set, the function returns the Unicode value for the symbol.   symbol       The name of the symbol desired as a string. Valid string names are the 24        characters of the Greek alphabet, plus commonly used graphical symbols: <span class= code-output >  alpha        nu        leq</span> <span class= code-output >  beta         xi        geq</span> <span class= code-output >  gamma        omicron   neg</span> <span class= code-output >  delta        pi        deg</span> <span class= code-output >  epsilon      rho       equiv</span> <span class= code-output >  zeta         sigma     prime</span> <span class= code-output >  eta          tau       angstrom</span> <span class= code-output >  theta        upsilon   sun</span> <span class= code-output >  iota         phi       varphi</span> <span class= code-output >  kappa        chi       infinity</span> <span class= code-output >  lambda       psi       copyright</span> <span class= code-output >  mu           omega</span>        Note that if the first letter of the name is capitalized, this is        the equivalent of setting the Capital keyword. Only Greek characters        use this method of selecting symbols.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgsymcat.html", "cgsymcat.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgsymcat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgsymcat.html#cgSymCat", "cgSymCat", 'routine in <a href="idlastro/coyote/cgsymcat.html">cgsymcat.pro</a>', "cgsymcat.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSymCat", " This function provides a symbol catalog for specifying a number of plotting symbols.   ", "COLOR         Set this keyword to the color (color table index, 24-bit value, or color name)          of the color desired.  NAMES         If this keyword is set, the function returns the names of the symbols allowed.          The index number of the name is its symbol number.  THICK         Set this keyword to the thickness desired. Default is 1.   theInSymbol       The number (or name) of the symbol you wish to use. Possible values are: <span class= code-output >  0  : No symbol.                         NONE</span> <span class= code-output >  1  : Plus sign.                         PLUSSIGN</span> <span class= code-output >  2  : Asterisk.                          ASTERISK</span> <span class= code-output >  3  : Dot (period).                      DOT</span> <span class= code-output >  4  : Open diamond.                      OPENDIAMOND</span> <span class= code-output >  5  : Open upward triangle.              OPENUPTRIANGLE</span> <span class= code-output >  6  : Open square.                       OPENSQUARE</span> <span class= code-output >  7  : X.                                 X</span> <span class= code-output >  8  : Defined by the user with USERSYM.  USERSYM</span> <span class= code-output >  9  : Open circle.                       OPENCIRCLE</span> <span class= code-output > 10  : Histogram style plot.              HISTOGRAM</span> <span class= code-output > 11  : Open downward triangle.            OPENDOWNTRIANGLE</span> <span class= code-output > 12  : Open rightfacing triangle.         OPENRIGHTTRIANGLE</span> <span class= code-output > 13  : Open leftfacing triangle.          OPENLEFTTRIANGLE</span> <span class= code-output > 14  : Filled diamond.                    FILLEDDIAMOND</span> <span class= code-output > 15  : Filled square.                     FILLEDSQUARE</span> <span class= code-output > 16  : Filled circle.                     FILLEDCIRCLE</span> <span class= code-output > 17  : Filled upward triangle.            FILLEDUPTRIANGLE</span> <span class= code-output > 18  : Filled downward triangle.          FILLEDDOWNTRIANGLE</span> <span class= code-output > 19  : Filled rightfacing triangle.       FILLEDRIGHTTRIANGLE</span> <span class= code-output > 20  : Filled leftfacing triangle.        FILLEDLEFTTRIANGLE</span> <span class= code-output > 21  : Hourglass.                         HOURGLASS</span> <span class= code-output > 22  : Filled Hourglass.                  FILLEDHOURGLASS</span> <span class= code-output > 23  : Bowtie.                            BOWTIE</span> <span class= code-output > 24  : Filled bowtie.                     FILLEDBOWTIE</span> <span class= code-output > 25  : Standing Bar.                      STANDINGBAR</span> <span class= code-output > 26  : Filled Standing Bar.               FILLEDSTANDINGBAR</span> <span class= code-output > 27  : Laying Bar.                        LAYINGBAR</span> <span class= code-output > 28  : Filled Laying Bar.                 FILLEDLAYINGBAR</span> <span class= code-output > 29  : Hat up.                            HATUP</span> <span class= code-output > 30  : Hat down.                          HATDOWN</span> <span class= code-output > 31  : Hat right.                         HATRIGHT</span> <span class= code-output > 32  : Hat down.                          HATDOWN</span> <span class= code-output > 33  : Big cross.                         BIGCROSS</span> <span class= code-output > 34  : Filled big cross.                  FILLEDBIGCROSS</span> <span class= code-output > 35  : Circle with plus.                  CIRCLEWITHPLUS</span> <span class= code-output > 36  : Circle with X.                     CIRCLEWITHX</span> <span class= code-output > 37  : Upper half circle.                 UPPERHALFCIRCLE</span> <span class= code-output > 38  : Filled upper half circle.          FILLEDUPPERHALFCIRCLE</span> <span class= code-output > 39  : Lower half circle.                 LOWERHALFCIRCLE</span> <span class= code-output > 40  : Filled lower half circle.          FILLEDLOWERHALFCIRCLE</span> <span class= code-output > 41  : Left half circle.                  LEFTHALFCIRCLE</span> <span class= code-output > 42  : Filled left half circle.           FILLEDLEFTHALFCIRCLE</span> <span class= code-output > 43  : Right half circle.                 RIGHTHALFCIRCLE</span> <span class= code-output > 44  : Filled right half circle.          FILLEDRIGHTHALFCIRCLE</span> <span class= code-output > 45  : Star.                              STAR</span> <span class= code-output > 46  : Filled star.                       FILLEDSTAR</span>  ", "Graphics", "    Change History: <span class= code-output >  Written by David W. Fanning, 2 September 2006. Loosely based on the</span> <span class= code-output >     program MC_SYMBOL introduced on the IDL newsgroup 1 September 2006,</span> <span class= code-output >     and MPI_PLOTCONFIG__DEFINE from the Coyote Library.</span> <span class= code-output >  Modified to allow PSYM=8 and PSYM=10 to have their normal meanings. This shifted</span> <span class= code-output >  previous symbols by two values from their old meanings. For example, an hourglass</span> <span class= code-output >  went from symbol number 19 to 21. 2 October 2006. DWF.</span> <span class= code-output >  Whoops! Added two symbols but forgot to change limits to allow for them. 4 May 2007. DWF.</span> <span class= code-output >  Added THICK keyword. 21 Aug 2007. DWF.</span> <span class= code-output >  Added COLOR keyword and made THICK keyword apply to all symbols. 11 Nov 2008. DWF.</span> <span class= code-output >  If you are using USERSYM, the  color  can get  stuck  on the last color used to draw</span> <span class= code-output >     a symbol. To  unstick  the color,  you have to call USERSYM without a color keyword</span> <span class= code-output >     before calling it again with a color keyword. This is, without a doubt, the strangest</span> <span class= code-output >     bug I've ever seen in IDL! 20 June 2012. DWF.</span> <span class= code-output >  Changed the way I  unstick  the color from calling USERSYM to calling SYMCAT. This</span> <span class= code-output >     avoids a problem in changing the symbol when SYMCAT is used (unnecessarily) to pass</span> <span class= code-output >     a symbol into Coyote Graphics programs. 9 July 2012. DWF.</span> <span class= code-output >  Added the ability (via Jack Saba) to ask for symbols by name. 17 July 2012. DWF.</span> <span class= code-output >  Added the ability to ask for the color by name. 17 July 2012. DWF.</span> <span class= code-output >  Renamed to cgSYMCAT from SYMCAT. 17 July 2012. DWF.</span> <span class= code-output >  The previous problem with USERSYM colors  sticking  turned out to be a problem</span> <span class= code-output >      with cgGraphicsKeywords, so I removed previous  fix . 18 July 2012. DWF.</span> <span class= code-output >  Modified the program to allow a  negative  string to be used as the symbol name</span> <span class= code-output >      (e.g., PSYM= -star ). 30 July 2012. DWF.</span>       Copyright (c) 2006-2012, Fanning Software Consulting, Inc.      To use with normal IDL routines: <span class= code-output >  Plot, findgen(11), PSYM=SYMCAT(theSymbol)</span>     To connect symbols with lines, use a negative value for the PSYM keyword: <span class= code-output >  Plot, findgen(11), PSYM=-SYMCAT(theSymbol)</span>     To use with Coyote Library routines, you can call SYMCAT indirectly: <span class= code-output >  cgPlot, findgne(11), PSYM=16, SYMCOLOR='dodger blue'</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgsymcat.html", "cgsymcat.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgsymcat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgsymcat.html#cgSymCat", "cgSymCat", 'routine in <a href="coyote/cgsymcat.html">cgsymcat.pro</a>', "cgsymcat.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgSymCat", " This function provides a symbol catalog for specifying a number of plotting symbols.   ", "COLOR         Set this keyword to the color (color table index, 24-bit value, or color name)          of the color desired.  NAMES         If this keyword is set, the function returns the names of the symbols allowed.          The index number of the name is its symbol number.  THICK         Set this keyword to the thickness desired. Default is 1.   theInSymbol       The number (or name) of the symbol you wish to use. Possible values are: <span class= code-output >  0  : No symbol.                         NONE</span> <span class= code-output >  1  : Plus sign.                         PLUSSIGN</span> <span class= code-output >  2  : Asterisk.                          ASTERISK</span> <span class= code-output >  3  : Dot (period).                      DOT</span> <span class= code-output >  4  : Open diamond.                      OPENDIAMOND</span> <span class= code-output >  5  : Open upward triangle.              OPENUPTRIANGLE</span> <span class= code-output >  6  : Open square.                       OPENSQUARE</span> <span class= code-output >  7  : X.                                 X</span> <span class= code-output >  8  : Defined by the user with USERSYM.  USERSYM</span> <span class= code-output >  9  : Open circle.                       OPENCIRCLE</span> <span class= code-output > 10  : Histogram style plot.              HISTOGRAM</span> <span class= code-output > 11  : Open downward triangle.            OPENDOWNTRIANGLE</span> <span class= code-output > 12  : Open rightfacing triangle.         OPENRIGHTTRIANGLE</span> <span class= code-output > 13  : Open leftfacing triangle.          OPENLEFTTRIANGLE</span> <span class= code-output > 14  : Filled diamond.                    FILLEDDIAMOND</span> <span class= code-output > 15  : Filled square.                     FILLEDSQUARE</span> <span class= code-output > 16  : Filled circle.                     FILLEDCIRCLE</span> <span class= code-output > 17  : Filled upward triangle.            FILLEDUPTRIANGLE</span> <span class= code-output > 18  : Filled downward triangle.          FILLEDDOWNTRIANGLE</span> <span class= code-output > 19  : Filled rightfacing triangle.       FILLEDRIGHTTRIANGLE</span> <span class= code-output > 20  : Filled leftfacing triangle.        FILLEDLEFTTRIANGLE</span> <span class= code-output > 21  : Hourglass.                         HOURGLASS</span> <span class= code-output > 22  : Filled Hourglass.                  FILLEDHOURGLASS</span> <span class= code-output > 23  : Bowtie.                            BOWTIE</span> <span class= code-output > 24  : Filled bowtie.                     FILLEDBOWTIE</span> <span class= code-output > 25  : Standing Bar.                      STANDINGBAR</span> <span class= code-output > 26  : Filled Standing Bar.               FILLEDSTANDINGBAR</span> <span class= code-output > 27  : Laying Bar.                        LAYINGBAR</span> <span class= code-output > 28  : Filled Laying Bar.                 FILLEDLAYINGBAR</span> <span class= code-output > 29  : Hat up.                            HATUP</span> <span class= code-output > 30  : Hat down.                          HATDOWN</span> <span class= code-output > 31  : Hat right.                         HATRIGHT</span> <span class= code-output > 32  : Hat down.                          HATDOWN</span> <span class= code-output > 33  : Big cross.                         BIGCROSS</span> <span class= code-output > 34  : Filled big cross.                  FILLEDBIGCROSS</span> <span class= code-output > 35  : Circle with plus.                  CIRCLEWITHPLUS</span> <span class= code-output > 36  : Circle with X.                     CIRCLEWITHX</span> <span class= code-output > 37  : Upper half circle.                 UPPERHALFCIRCLE</span> <span class= code-output > 38  : Filled upper half circle.          FILLEDUPPERHALFCIRCLE</span> <span class= code-output > 39  : Lower half circle.                 LOWERHALFCIRCLE</span> <span class= code-output > 40  : Filled lower half circle.          FILLEDLOWERHALFCIRCLE</span> <span class= code-output > 41  : Left half circle.                  LEFTHALFCIRCLE</span> <span class= code-output > 42  : Filled left half circle.           FILLEDLEFTHALFCIRCLE</span> <span class= code-output > 43  : Right half circle.                 RIGHTHALFCIRCLE</span> <span class= code-output > 44  : Filled right half circle.          FILLEDRIGHTHALFCIRCLE</span> <span class= code-output > 45  : Star.                              STAR</span> <span class= code-output > 46  : Filled star.                       FILLEDSTAR</span>  ", "Graphics", "    Change History: <span class= code-output >  Written by David W. Fanning, 2 September 2006. Loosely based on the</span> <span class= code-output >     program MC_SYMBOL introduced on the IDL newsgroup 1 September 2006,</span> <span class= code-output >     and MPI_PLOTCONFIG__DEFINE from the Coyote Library.</span> <span class= code-output >  Modified to allow PSYM=8 and PSYM=10 to have their normal meanings. This shifted</span> <span class= code-output >  previous symbols by two values from their old meanings. For example, an hourglass</span> <span class= code-output >  went from symbol number 19 to 21. 2 October 2006. DWF.</span> <span class= code-output >  Whoops! Added two symbols but forgot to change limits to allow for them. 4 May 2007. DWF.</span> <span class= code-output >  Added THICK keyword. 21 Aug 2007. DWF.</span> <span class= code-output >  Added COLOR keyword and made THICK keyword apply to all symbols. 11 Nov 2008. DWF.</span> <span class= code-output >  If you are using USERSYM, the  color  can get  stuck  on the last color used to draw</span> <span class= code-output >     a symbol. To  unstick  the color,  you have to call USERSYM without a color keyword</span> <span class= code-output >     before calling it again with a color keyword. This is, without a doubt, the strangest</span> <span class= code-output >     bug I've ever seen in IDL! 20 June 2012. DWF.</span> <span class= code-output >  Changed the way I  unstick  the color from calling USERSYM to calling SYMCAT. This</span> <span class= code-output >     avoids a problem in changing the symbol when SYMCAT is used (unnecessarily) to pass</span> <span class= code-output >     a symbol into Coyote Graphics programs. 9 July 2012. DWF.</span> <span class= code-output >  Added the ability (via Jack Saba) to ask for symbols by name. 17 July 2012. DWF.</span> <span class= code-output >  Added the ability to ask for the color by name. 17 July 2012. DWF.</span> <span class= code-output >  Renamed to cgSYMCAT from SYMCAT. 17 July 2012. DWF.</span> <span class= code-output >  The previous problem with USERSYM colors  sticking  turned out to be a problem</span> <span class= code-output >      with cgGraphicsKeywords, so I removed previous  fix . 18 July 2012. DWF.</span> <span class= code-output >  Modified the program to allow a  negative  string to be used as the symbol name</span> <span class= code-output >      (e.g., PSYM= -star ). 30 July 2012. DWF.</span> <span class= code-output >  Modified to use 36 points in circle, rather than 72. 10 May 2013. DWF.</span>       Copyright (c) 2006-2012, Fanning Software Consulting, Inc.      To use with normal IDL routines: <span class= code-output >  Plot, findgen(11), PSYM=SYMCAT(theSymbol)</span>     To connect symbols with lines, use a negative value for the PSYM keyword: <span class= code-output >  Plot, findgen(11), PSYM=-SYMCAT(theSymbol)</span>     To use with Coyote Library routines, you can call SYMCAT indirectly: <span class= code-output >  cgPlot, findgne(11), PSYM=16, SYMCOLOR='dodger blue'</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgtasseledcap.html", "cgtasseledcap.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgtasseledcap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgtasseledcap.html#cgTasseledCap", "cgTasseledCap", 'routine in <a href="coyote/cgtasseledcap.html">cgtasseledcap.pro</a>', "cgtasseledcap.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgTasseledCap", "  This function returns an image transformed by tasseled cap coefficients. The number of   bands returned depends on the shape of the tasseled cap coefficients, but at least three   bands are always returned: brightness, greenness, and yellowness.   ", "DISPLAY        Set this keyword to display the brightness, greenness, and yellowness band in         a display window.  ENVI       Set this keyword to return the tasseled cap coeficients used by ENVI 4.8.        These are reported (by ITTVIS) to be for LandSat-5 TM data, although others        report these are in error for TM-5 data and really apply to TM-4 data.        Reference: http://www.exelisvis.com/language/en-US/UserCommunity/UserForums/forumid/29/threadid/12985/scope/posts.aspx.  ETM       Set this keyword to return the tasseled cap coeficients proposed by the USGS for        LandSat-7 ETM+ images. Note that these values should be applied to reflectances.        Reference: http://landcover.usgs.gov/pdf/tasseled.pdf.  IMAGINE       Set this keyword to return the tasseled cap coeficients used by the ERDAS Imagine software        for LandSat-5 data.  LS4       Set this keyword to return the tasseled cap coeficients reported by Crist, Laurin and Cicone        for LandSat-4 imagery. Reference: http://www.ciesin.org/docs/005-419/005-419.html.  LS5       Set this keyword to return the tasseled cap coeficients reported by Crist, Laurin and Cicone        for LandSat-5 imagery. Reference: http://www.ciesin.org/docs/005-419/005-419.html.  MSS       Set this keyword to return the tasseled cap coeficients originally reported by R.J Kauth and G.S. Thomas        for MSS LandSat imagery. Reference: http://web.pdx.edu/~jduh/courses/Archive/geog481w07/Students/Marcello_TasselledCap.pdf.  QUICKBIRD       Set this keyword to return the tasseled cap Graham-Schmidt coeficients reportedly used for Quickbird imagery.        Reference: http://www.asprs.org/a/publications/proceedings/pecora16/Yarbrough_L.pdf  TM       Set this keyword to return the tasseled cap coeficients originally proposed for TM imagery by Kauth and Thomas.        Reference: http://web.pdx.edu/~jduh/courses/Archive/geog481w07/Students/Marcello_TasselledCap.pdf.   input        The input may be either an image to be transformed or the name of an image         file that can be read with READ_IMAGE (e.g., a GeoTiff file).   ", "Utility", "     Written, 24 August 2012, by David W. Fanning.      Fixed a dimension problem caused by forgetting a Transpose operation. 17 October 2012. DWF.      Fixed a type problem with the ETM keyword. 19 October 2012. DWF.        Copyright (c) 2012, Fanning Software Consulting, Inc.      tasselImage = cgTasseledCap('landsatImageFile.tif', /TM, /Display)   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgtasseledcapcoeffs.html", "cgtasseledcapcoeffs.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgtasseledcapcoeffs.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgtasseledcapcoeffs.html#cgTasseledCapCoeffs", "cgTasseledCapCoeffs", 'routine in <a href="coyote/cgtasseledcapcoeffs.html">cgtasseledcapcoeffs.pro</a>', "cgtasseledcapcoeffs.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgTasseledCapCoeffs", " This function returns tasseled cap coefficients from various sources to perform  the tasseled cap transformation on appropriate (e.g. LandSat) images. The program  requires that one of the keywords be set.   ", "ENVI       Set this keyword to return the tasseled cap coeficients used by ENVI 4.8.        These are reported (by ITTVIS) to be for LandSat-5 TM data, although others        report these are in error for TM-5 data and really apply to TM-4 data.        Reference: http://www.exelisvis.com/language/en-US/UserCommunity/UserForums/forumid/29/threadid/12985/scope/posts.aspx.  ETM       Set this keyword to return the tasseled cap coeficients proposed by the USGS for        LandSat-7 ETM+ images. Note that these values should be applied to reflectances.        Reference: http://landcover.usgs.gov/pdf/tasseled.pdf.  IMAGINE       Set this keyword to return the tasseled cap coeficients used by the ERDAS Imagine software        for LandSat-5 data.  LS4       Set this keyword to return the tasseled cap coeficients reported by Crist, Laurin and Cicone        for LandSat-4 imagery. Reference: http://www.ciesin.org/docs/005-419/005-419.html.  LS5       Set this keyword to return the tasseled cap coeficients reported by Crist, Laurin and Cicone        for LandSat-5 imagery. Reference: http://www.ciesin.org/docs/005-419/005-419.html.  MSS       Set this keyword to return the tasseled cap coeficients originally reported by R.J Kauth and G.S. Thomas        for MSS LandSat imagery. Reference: http://web.pdx.edu/~jduh/courses/Archive/geog481w07/Students/Marcello_TasselledCap.pdf.        Also: http://www.sjsu.edu/faculty/watkins/tassel.htm.  QUICKBIRD       Set this keyword to return the tasseled cap Graham-Schmidt coeficients reportedly used for Quickbird imagery.        Reference: http://www.asprs.org/a/publications/proceedings/pecora16/Yarbrough_L.pdf  TM       Set this keyword to return the tasseled cap coeficients originally proposed for TM imagery by Kauth and Thomas.        Reference: http://web.pdx.edu/~jduh/courses/Archive/geog481w07/Students/Marcello_TasselledCap.pdf.        Also: http://www.sjsu.edu/faculty/watkins/tassel.htm.   ", "Utility", "     Written, 24 August 2012, by David W. Fanning.        Copyright (c) 2012, Fanning Software Consulting, Inc.      tasseledCapTransformedImage = landsat_tm_image ## cgTasselecCapCoeffs(/TM)   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgtaylordiagram.html", "cgtaylordiagram.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgtaylordiagram.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgtaylordiagram.html#cgTaylorDiagram", "cgTaylorDiagram", 'routine in <a href="coyote/cgtaylordiagram.html">cgtaylordiagram.pro</a>', "cgtaylordiagram.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgTaylorDiagram", " The program implements a Taylor Diagram in IDL direct graphics. Addtional information can be found  in this article.      From the 2001 IPCC Reoprt: <span class= code-output >      Taylor diagrams provide a way of graphically summarizing how closely</span> <span class= code-output >     a pattern (or a set of patterns) matches observations.  The similarity between two</span> <span class= code-output >     patterns is quantified in terms of their correlation, their centered root-mean-square</span> <span class= code-output >     difference and the amplitude of their variations (represented by their standard</span> <span class= code-output >     deviations).  These diagrams are especially useful in evaluating multiple aspects of</span> <span class= code-output >     complex models or in gauging the relative skill of many different models. </span>  <span class= code-output >      In general, the Taylor diagram characterizes the statistical relationship between two</span> <span class= code-output >     fields, a  test  field (often representing a field simulated by a model) and a</span> <span class= code-output >      reference  field (usually representing “truth”, based on observations). </span>  <span class= code-output >      The two-dimensional space of the Taylor diagram can represent three different statistics</span> <span class= code-output >     simultaneously:</span> <span class= code-output >  - The centered RMS difference,</span> <span class= code-output >  - The correlation,</span> <span class= code-output >  - The standard deviation</span>  ", "ADDCMD        Set this keyword to add the command to the resizeable graphics window cgWindow.  C_CORRELATION        The name of the color used for the correlation lines on the diagram.  C_STDDEV        The name of the color used for the standard deviation lines on the diagram.  C_REF        The name of the color used for the observed reference line on the diagram.  C_SYMBOL        The name of the color used for the point symbols on the diagram.  LABELS        An array of string labels for the points that will be plotted on the diagram.         This array must be the same length as the stddev array and the correlation array.  OUTPUT        The name of an output file to write the Taylor Diagram to. The type of file is taken from         the file extension. For example, OUTPUT='mydiagram.png'. It is assumed that Ghostscript and         ImageMagick have been installed properly for all raster file output. If the Output keyword is         used, nothing is drawn on the display. This keyword cannot be used with the Overplot keyword.  OVERPLOT        Set this keyword to overplot onto an already existing Taylor Diagram. Many keywords are         ignored if this keyword is set. Only the data is drawn. The Output keyword cannot be used         if overplotting.  POSITION        A four-element, normalized array giving the position of the plot in the display window: [x0,y0,x1,y1].  REF_STDDEV        The reference standard deviation. This is typically the  observed  or  model  value. A scalar.  RMS_CIRCLES_OFF        Set this keyword to prevent the drawing of the RMS circles that radiate out from the observed RMS value.  RMS_FORMAT        Set this keyword to a format string that is used for format the RMS circle labels.  RMS_INCREMENT        The RMS circles are drawn from the observed RMS value, using this value as an increment of the circle radius.  RMS_LABELS_OFF        Set this keyword to prevent the drawing of the RMS circle labels. If this keyword is set, only the RMS         circles are drawn.  STDDEV_MAX        The maximum standard deviation to plot on the graph.  SYMBOL        The symbol used for the data points on the diagram. Any symbol supported by cgSymCat.  SYMSIZE        The size of the symbol used for the data points on the diagram.  WINDOW        Set this keyword to replace all the commands in a current cgWindow or to         create a new cgWindow for displaying this command.   stddev        An array of standard deviations for the points that will be plotted on the diagram.         This array must be the same length as the correlation array and the Labels array, if it is used.   correlation        An array of correlation coefficients for the points that will be plotted on the diagram.         This array must be the same length as the stddev array and the Labels array, if it is used.  ", "Graphics", "     Change History: <span class= code-output >  Written, 10 January 2013 by David W. Fanning from a program by Fernando Santoro of</span> <span class= code-output >      ExelisVis that I found in the IDL Code Repository on the ExelisVis web page.</span> <span class= code-output >      Fernando did *all* of the hard work writing the program for the IDL 8 function</span> <span class= code-output >      graphics routine. I simply copied most of his code and adapted it for non-IDL 8</span> <span class= code-output >      users. I also added a couple of features I though were missing from the original code.</span> <span class= code-output >  Added OVERPLOT keyword. 21 May 2013. DWF.</span> <span class= code-output >  Added RMS_*** keywords to allow more control over the drawing and labeling of the RMS circles</span> <span class= code-output >      on the plot. 29 July 2013. DWF.</span>       Copyright (c) 2013, Fanning Software Consulting, Inc.      Here is how to use this program: <span class= code-output > labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']            ; Point labels.</span> <span class= code-output > stddev = [1.4, 0.9, 1.0, 1.272, 1.1, 0.95, 1.08, 0.5]        ; Standard Deviations</span> <span class= code-output > correlation = [0.8, 0.9, 0.65, 0.74, 0.91, 0.98, 0.85, 0.35] ; Correlations</span> <span class= code-output > ref_std = 1.0                                                ; Reference standard (observed)</span> <span class= code-output > stddev_max = 1.5                                             ; Standard Deviation maximum</span> <span class= code-output > cgTaylorDiagram, stddev, correlation, REF_STDDEV=ref_std, STDDEV_MAX=stddev_max, LABELS=labels</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgtext.html", "cgtext.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgtext.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgtext.html#cgText", "cgText", 'routine in <a href="idlastro/coyote/cgtext.html">cgtext.pro</a>', "cgtext.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgText", "   Provides a device-independent and color-model-independent way to write text into    a graphics window. It is a wrapper to the XYOUTS command.   ", "ADDCMD        Set this keyword to add the command to an cgWindow. Setting this keyword         automatically sets the WINDOW keyword, but the command does not erase the         graphics window as it would normally.  ALIGNMENT         Set this keyword to indicate the alignment of the text with respect to the          x and y location. 0 is left aligned, 0.5 is centered, and 1.0 is right aligned.          The alignment is set to 0.5 if PLACE is set and ALIGNMENT is unspecified.          Otherwise, the default is 0.  CHARSIZE         The character size for axes annotations. Uses cgDefCharSize to select default          character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR         The color of the text. Color names are those used with cgColor.  DATA         Set this keyword to indicate xloc and yloc are in data coordinates. Data coordinates          are the default, unless DEVICE or NORMAL is set.  DEVICE         Set this keyword to indicate xloc and yloc are in device coordinates.  FONT         The type of font desired. By default, !P.Font.  MAP_OBJECT        If you are drawing on a map projection set up with Map_Proj_Init         and using projected meter space, rather than lat/lon space, then you can use this         keyword to provide a cgMap object that will allow you to convert the x and y         parameters from longitude and latitude, respectively, to projected meter space         before drawing.  NORMAL         Set this keyword to indicate xloc and yloc are in normalized coordinates.  ORIENTATION         Use this keyword to specify the counterclockwise angle of rotation of the text          in degrees from the horizontal.  OUTLOC         Only used if PLACE is set, this is a two-element array containing the xloc and yloc          of the cursor position in the window.  PLACE          Set this keyword if you wish to click the cursor in the graphics window to place           the text. If this keyword is set, you do not need to specify the xloc and yloc           positional parameters. The first positional parameter is assumed to be the text.           The clicked location will be returned in the OutLoc variable. If the Alignment           keyword is not set, it will be set to 0.5 to set  center  as the default placement           alignment. This has been modified to allow this keyword to work in a resizeable           graphics window as well. Clicking once in the window will set the parameters so           you don't have to click every time the window is resized.  TT_FONT         The true-type font to use for the text. Only used if FONT=1.  WIDTH         Set this keyword to a named variable in which to return the width of the text string,          in normalized coordinate units. Note that output keyword values cannot be returned          from the routine if the command is being executed in a cgWindow.  WINDOW         Set this keyword to add the command to the in the current cgWindow application.  _REF_EXTRA          Any keywords appropriate for the XYOUTS command.   xloc       The X location of the text.  yloc       The Y location of the text.  text        The text to output. By default, the calling sequence of the program.   ", "Graphics", "     Change History: <span class= code-output >  Written, 19 November 2010. DWF.</span> <span class= code-output >  Corrected a problem with setting text color and added PLACE and OUTLOC</span> <span class= code-output >      keywords. 25 Nov 2010. DWF.</span> <span class= code-output >  Humm, that text color problem got reset to the old way! Sheesh! Fixed. 9 Dec 2010. DWF.</span> <span class= code-output >  Modified the way the default color is selected. Drawing with DECOMPOSED</span> <span class= code-output >       if possible. 30 Dec 2010. DWF.</span> <span class= code-output >  Keywords collected with _REF_EXTRA so WIDTH can be returned. Added WIDTH keyword. 6 Jan 2011. DWF.</span> <span class= code-output >  Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >  Added Window keyword. 24 Jan 2011. DWF.</span> <span class= code-output >  Added ability to return WIDTH from resizeable graphics windows and added ADDCMD</span> <span class= code-output >        keyword. 24 Feb 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Modified to allow the user to place the text in a resizeable graphics window. 13 Dec 2011. DWF.</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >  Modifications to the way I obtain the WIDTH when adding the command to a cgWindow. 26 Jan 2012. DWF.</span> <span class= code-output >  Added MAP_OBJECT keyword so that I can draw text on plots using a cgMap map coordinate object. 29 June 2012. DWF.</span> <span class= code-output >  Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >  Added ORIENTATION keyword to make it explicit, and improved documentation. 3 Aug 2012. DWF.</span>       Copyright (c) 2010-2012, Fanning Software Consulting, Inc.      Used like the IDL XYOUTS command:   <span class= code-prompt >IDL&gt;</span> cgText, 0.5, 0.5, 'This is sample text', ALIGNMENT=0.5, /NORMAL   <span class= code-prompt >IDL&gt;</span> cgText, /PLACE, 'Use the cursor to locate this text', COLOR='dodger blue'  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgtext.html", "cgtext.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgtext.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgtext.html#cgText", "cgText", 'routine in <a href="coyote/cgtext.html">cgtext.pro</a>', "cgtext.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgText", "   Provides a device-independent and color-model-independent way to write text into    a graphics window. It is a wrapper to the XYOUTS command.   ", "ADDCMD        Set this keyword to add the command to an cgWindow. Setting this keyword         automatically sets the WINDOW keyword, but the command does not erase the         graphics window as it would normally.  ALIGNMENT         Set this keyword to indicate the alignment of the text with respect to the          x and y location. 0 is left aligned, 0.5 is centered, and 1.0 is right aligned.          The alignment is set to 0.5 if PLACE is set and ALIGNMENT is unspecified.          Otherwise, the default is 0.  CHARSIZE         The character size for axes annotations. Uses cgDefCharSize to select default          character size, unless !P.Charsize is set, in which case !P.Charsize is always used.  COLOR         The color of the text. Color names are those used with cgColor.  DATA         Set this keyword to indicate xloc and yloc are in data coordinates. Data coordinates          are the default, unless DEVICE or NORMAL is set.  DEVICE         Set this keyword to indicate xloc and yloc are in device coordinates.  FONT         The type of font desired. By default, !P.Font.  MAP_OBJECT        If you are drawing on a map projection set up with Map_Proj_Init         and using projected meter space, rather than lat/lon space, then you can use this         keyword to provide a cgMap object that will allow you to convert the x and y         parameters from longitude and latitude, respectively, to projected meter space         before drawing.  NORMAL         Set this keyword to indicate xloc and yloc are in normalized coordinates.  ORIENTATION         Use this keyword to specify the counterclockwise angle of rotation of the text          in degrees from the horizontal.  OUTLOC         Only used if PLACE is set, this is a two-element array containing the xloc and yloc          of the cursor position in the window.  PLACE          Set this keyword if you wish to click the cursor in the graphics window to place           the text. If this keyword is set, you do not need to specify the xloc and yloc           positional parameters. The first positional parameter is assumed to be the text.           The clicked location will be returned in the OutLoc variable. If the Alignment           keyword is not set, it will be set to 0.5 to set  center  as the default placement           alignment. This has been modified to allow this keyword to work in a resizeable           graphics window as well. Clicking once in the window will set the parameters so           you don't have to click every time the window is resized.  TT_FONT         The true-type font to use for the text. Only used if FONT=1.  WIDTH         Set this keyword to a named variable in which to return the width of the text string,          in normalized coordinate units. Note that output keyword values cannot be returned          from the routine if the command is being executed in a cgWindow.  WINDOW         Set this keyword to add the command to the in the current cgWindow application.  _REF_EXTRA        Any IDL XYOutS keyword         not defined here is allowed in the program.   xloc       The X location of the text.  yloc       The Y location of the text.  text        The text to output. By default, the calling sequence of the program.   ", "Graphics", "     Change History: <span class= code-output >  Written, 19 November 2010. DWF.</span> <span class= code-output >  Corrected a problem with setting text color and added PLACE and OUTLOC</span> <span class= code-output >      keywords. 25 Nov 2010. DWF.</span> <span class= code-output >  Humm, that text color problem got reset to the old way! Sheesh! Fixed. 9 Dec 2010. DWF.</span> <span class= code-output >  Modified the way the default color is selected. Drawing with DECOMPOSED</span> <span class= code-output >       if possible. 30 Dec 2010. DWF.</span> <span class= code-output >  Keywords collected with _REF_EXTRA so WIDTH can be returned. Added WIDTH keyword. 6 Jan 2011. DWF.</span> <span class= code-output >  Moved setting to decomposed color before color selection process to avoid PostScript</span> <span class= code-output >       background problems when passed 24-bit color integers. 12 Jan 2011. DWF.</span> <span class= code-output >  Added Window keyword. 24 Jan 2011. DWF.</span> <span class= code-output >  Added ability to return WIDTH from resizeable graphics windows and added ADDCMD</span> <span class= code-output >        keyword. 24 Feb 2011. DWF.</span> <span class= code-output >  Modified error handler to restore the entry decomposition state if there is an error. 17 March 2011. DWF</span> <span class= code-output >  Modified to allow the user to place the text in a resizeable graphics window. 13 Dec 2011. DWF.</span> <span class= code-output >  Modified to use cgDefaultColor for default color selection. 24 Dec 2011. DWF.</span> <span class= code-output >  Modifications to the way I obtain the WIDTH when adding the command to a cgWindow. 26 Jan 2012. DWF.</span> <span class= code-output >  Added MAP_OBJECT keyword so that I can draw text on plots using a cgMap map coordinate object. 29 June 2012. DWF.</span> <span class= code-output >  Added the ability to use escape characters in plot titles to specify cgSymbol symbols. 27 July 2012. DWF.</span> <span class= code-output >  Added ORIENTATION keyword to make it explicit, and improved documentation. 3 Aug 2012. DWF.</span>       Copyright (c) 2010-2012, Fanning Software Consulting, Inc.      Used like the IDL XYOUTS command:   <span class= code-prompt >IDL&gt;</span> cgText, 0.5, 0.5, 'This is sample text', ALIGNMENT=0.5, /NORMAL   <span class= code-prompt >IDL&gt;</span> cgText, /PLACE, 'Use the cursor to locate this text', COLOR='dodger blue'  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgtimestamp.html", "cgtimestamp.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgtimestamp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgtimestamp.html#cgTimeStamp", "cgTimeStamp", 'routine in <a href="coyote/cgtimestamp.html">cgtimestamp.pro</a>', "cgtimestamp.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgTimeStamp", " This is a utility program to obtain a time stamp string suitable  for using in a filename or some other string.   ", "No_Prefix         Set this keyword to remove the underscore prefix normally present at the start of the time stamp.  Random_Digits         Set this keyword to the number of random digits you would like to append to the time stamp.  UTC         Set this keyword to use UTC time in the time stamp, rather than the local time.  Valid         If this keyword is set, the time stamp is passed through the IDL program IDL_VALIDNAME, and          all characters that are not allowed in IDL variable names are replaced by ones that are allowed.          In other words, a character like  : , which is not allowed, is turned into the character  _ , which          is allowed.   format       An integer value that selects the time stamp format. Default is 0. Possible values are: <span class= code-output >  0: _sun_feb_07_10:56:37_2010</span> <span class= code-output >  1: _Sun_Feb_07_10:56:37_2010</span> <span class= code-output >  2: _07_02_2010_10:56:37</span> <span class= code-output >  3: _07022010_10:56:37</span> <span class= code-output >  4: _07022010</span> <span class= code-output >  5: _07Feb2010_10:56:37</span> <span class= code-output >  6: _07feb2010_10:56:37</span> <span class= code-output >  7: _07FEB2010_10:56:37</span> <span class= code-output >  8: _02_07_2010_10:56:37</span> <span class= code-output >  9: _02072010_10:56:37</span> <span class= code-output >  10: _02072010</span> <span class= code-output >  11: _20100207@10:56:37</span>  ", "Utilities", "     Change History: <span class= code-output > Written by David W. Fanning, 7 February 2010.</span> <span class= code-output > Added format number 11: YYYYMMDD@HH:MM:SS so that when files are created they</span> <span class= code-output >    will list in descending time order. Matt Savoie suggestion. DWF. 10 Sept 2010.</span> <span class= code-output > Added NO_PREFIX keyword that, if set, will prevent an underscore character from being</span> <span class= code-output >    added to the time stamp. 10 Sept 2010. DWF.</span> <span class= code-output > Discovered that Windows and UNIX computers report the UTC time differently, resulting</span> <span class= code-output >    in the day string being a one digit integer on UNIX and a two digit integer on</span> <span class= code-output >    Windows. Fixed so the day string is always forced to be two digits. 8 October 2010.</span> <span class= code-output > Renamed from TimeStamp to cgTimeStamp to avoid conflict with IDL's own TimeStamp function</span> <span class= code-output >    introduced in IDL 8.2.2. 6 February 2013. DWF.</span>       Copyright (c) 2010-2013, Fanning Software Consulting, Inc.      Here is how to use this program:   <span class= code-prompt >IDL&gt;</span> filename = 'mydatafile' + cgTimeStamp() + '.dat'      A string variable containing the time stamp is returned from the function.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgtransparentimage.html", "cgtransparentimage.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgtransparentimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgtransparentimage.html#cgTransparentImage", "cgTransparentImage", 'routine in <a href="coyote/cgtransparentimage.html">cgtransparentimage.pro</a>', "cgtransparentimage.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgTransparentImage", " Creates a semi-transparent image for display. Optionally, a   missing   color or color index (for 2D images) can be set to a completely transparent value.  The transparent image can be saved as a transparent PNG file.   ", "BREWER         This keyword is used only if the CTIndex keyword is used to select a color table number.          Setting this keyword allows Brewer color tables to be used.   CTINDEX         The index number of a color table. The Brewer and Reverse keywords will be checked          to see how to load the color table into the Palette keyword. This keyword will take          precidence over any colors that are loaded with the Palette keyword.   MISSING_VALUE        The  color  of a pixel that will be treated as a  missing  color or value.         Any pixels in the image with this color value will be set completely         transparent. If Color is a string, use cgColor to obtain a color triple.         If Color is a non-strint scalar, this value is taken to be the missing color index         in a 2D image. Otherwise, this is assumed to be a color triple that indicates         the  missing  color or value in the output image. The alpha channel in the output image         is set to 0 for the  missing  color, which makes this value completely transparent.   FILENAME         The name of an image file that can be read with READ_IMAGE. Used to          select the input image if the image parameter is not used.   NOGUI         Set this keyword if you do not wish to have the user confirm the name of          the output PNG file selected with the PNGFile keyword.   PALETTE         Set this keyword to a 3x256 or 256x3 byte array containing the RGB color          vectors to be loaded before the transparent image is created. Such vectors can be          obtained, for example, from cgLoadCT with the RGB_TABLE keyword:       <span class= code-prompt >IDL&gt;</span> cgLoadCT, 4, /BREWER, /REVERSE, RGB_TABLE=palette       <span class= code-prompt >IDL&gt;</span> tImage = cgTransparentImage( cgDemoData(7), PALETTE=palette)          The default is to use whatever colors are loaded in the current hardware color table.          A palette applies only to 2D input images.   PNGFILE         If this keyword is set, the output image is written as a transparent          PNG file in 4xMxN format. Optionally, this keyword can be set to the          name of the output PNG file. The user will have the option of confirming          the name of the output file, unless the NoGUI keyword is set.   REVERSE         Set this keyword to reverse the color table vectors selected with the CTIndex keyword.  TRANSPARENT         The percentage of transparency desired in the output image. A number          between 0 and 100.   WSET        If image parameter is not present, make the window indicated with         this keyword the current graphics window for obtaining an image parameter.         If not passed, and no image is present, then the current graphics window is         used to create the image.   image       A 2D image or a 24-bit image with or without an alpha channel. If an alpha        channel is present, it will be modified by the program.   ", "Graphics", "     Change History: <span class= code-output >  Written, 23 October 2012 to replace Make_Transparent_Image, which was retired. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      To create and display a transparent image: <span class= code-output >  cgDisplay, WID=0</span> <span class= code-output >  cgImage, cgDemoData(5), CTIndex=0, /Interp</span> <span class= code-output >  timage = cgTransparentImage(MISSING_VALUE='black', TRANSPARENT=50)</span> <span class= code-output >  cgDisplay, WID=1</span> <span class= code-output >  cgImage, cgDemoData(7), CTIndex=22</span> <span class= code-output >  cgImage, timage</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgutmzone.html", "cgutmzone.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgutmzone.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgutmzone.html#cgUTMZone", "cgUTMZone", 'routine in <a href="coyote/cgutmzone.html">cgutmzone.pro</a>', "cgutmzone.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgUTMZone", " This function returns the correct UTM zone for UTM map projections, given a longitude  and latitude value. Southern hemisphere zones are indicated by a negative value.   ", "FORMAL       The formal UTM zone designation, with the zone number and band letter combined. For example,  32M .   longitude       The requested longitude value east of the central meridian.  latitude       The requested latitude value in the range -90 to 90.   ", "Utility", "     Written, 8 August 2012.      Modified to assure the UTM band index is always in range for polar map projections. 22 Sept 2012. DWF.        Copyright (c) 2012, Fanning Software Consulting, Inc.      For example, to find the UTM zone for London, England: <span class= code-output >  Print, cgUTMZone(-1.062, 51.5171, FORMAL=strDesignation)</span> <span class= code-output >      30</span> <span class= code-output >  Print, strDesignation</span> <span class= code-output >      30U</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgwarptomap.html", "cgwarptomap.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgwarptomap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgwarptomap.html#cgWarpToMap", "cgWarpToMap", 'routine in <a href="coyote/cgwarptomap.html">cgwarptomap.pro</a>', "cgwarptomap.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com/</span>  ", "cgWarpToMap", " The purpose of this function is to warp an image into a map projection, given  latitude and longitude values for each data point. It is the Coyote Graphics  equivalent of MAP_PATCH in IDL.   The program is absolutely dependent on HIST_ND, a program written by JD Smith and included  in the  public  folder of the Coyote Library.   ", "MAP       An input map projection object (cgMap). If provided, the data will be gridded into        this map projection. If not provided, a map object using a equirectangular map projection        with a spherical datum will be used. The XRANGE and YRANGE properties of the map object        will be set by the program in the course of doing the gridding if the SetRange keyword is        set.  MISSING       Missing data in the gridding process will be set to this value.  NOSETRANGE       If this keyword is set, the XRANGE and YRANGE parameters of the cgMap object will NOT        be set to the output X and Y ranges.  RESOLUTION       A two-element array giving the pixel resolution of the output array in X and Y.        The default is a 600x600 array.  XRANGE       The output X range in projected meter space (usually associated with the longitude).  YRANGE       The output Y range in projected meter space (usually associated with the latitude).   data        A 1D vector or 2D image (m x n). Longitude and latitude values must be present         (or easily calculated) for each element in the data array.  lons        If data is a vector, a vector of longitude values corresponding to each         data value. Values must be in the range -180 to 360. If data is 2D, either         a 1D vector or a 2D array of corresponding longitude values. If data is 2D,         and the LONS parameter is missing, a vector of appropriate length scaled into         the range -180.0 to 180.0 will be created.  lats        If data is a vector, a vector of latitude values corresponding to each         data value. Values must be in the range -90 to 90. If data is 2D, either         a 1D vector or a 2D array of corresponding latitude values. If data is 2D,         and the LONS parameter is missing, a vector of appropriate length scaled into         the range -90.0 to 90.0 will be created.   ", "Graphics Map Projections", "     Modification History: <span class= code-output >  Written by David W. Fanning, 12 Sept 2012.</span> <span class= code-output >  Modifications to accommodate lat/lon arrays that are one-dimensional to go along</span> <span class= code-output >     with 2D data. 13 Sept 2012. DWF.</span> <span class= code-output >  Algorithm completely rewritten to use HIST_ND method. 15 Aug 2013. DWF.</span>       Copyright (c) 2012-2013, Fanning Software Consulting, Inc.      To display a GOES image with map annotations: <span class= code-output >   fileURL = 'http://www.idlcoyote.com/misc/goes_example_data.sav'</span> <span class= code-output >   filename =  goes_example_data.sav </span> <span class= code-output >   netObject = Obj_New('IDLnetURL')</span> <span class= code-output >   void = netObject -&gt; Get(URL=fileURL, FILENAME=filename)</span> <span class= code-output >   Obj_Destroy, netObject</span> <span class= code-output >   Restore, filename</span> <span class= code-output >   peru_lat = Temporary(peru_lat) / 10000.</span> <span class= code-output >   peru_lon = Temporary(peru_lon) / 10000.</span> <span class= code-output >   s = Size(peruimage, /DIMENSIONS)</span> <span class= code-output >   centerLat = peru_lat[s[0]/2, s[1]/2]</span> <span class= code-output >   centerLon = peru_lon[s[0]/2, s[1]/2]</span> <span class= code-output >   map = Obj_New('cgMap', 'Albers Equal Area', Ellipsoid='sphere', /OnImage, $</span> <span class= code-output >      STANDARD_PAR1=-19, STANDARD_PAR2=20, CENTER_LAT=centerLat, CENTER_LON=centerLon)</span> <span class= code-output >   warped = cgWarpToMap(peruImage, peru_lon, peru_lat, MAP=map, MISSING=0, $</span> <span class= code-output >       Resolution=[400, 300], /SetRange)</span> <span class= code-output >   cgDisplay, /Free, Title='Warped Image with cgWarpToMap'</span> <span class= code-output >   cgImage, warped, Stretch=2, Position=[0,0,1,1]</span> <span class= code-output >   map -&gt; Draw</span> <span class= code-output >   cgMap_Grid, Map=map, /Label, Color='goldenrod'</span> <span class= code-output >   cgMap_Continents, MAP=map, Color='goldenrod'</span> <span class= code-output >   cgMap_Continents, MAP=map, Color='goldenrod', /Countries</span>     Additional examples can be found here: http://www.idlcoyote.com/map_tips/warptomap.php.        An output 2D grid in which the data points have been warped into the      particular map projection at the requested pixel resolution.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgwindow.html", "cgwindow.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgwindow.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "  Creates a resizeable graphics window for IDL traditional commands (Plot, Contour,   Surface, etc. or for Coyote Graphics routines, cgPlot, cgContour, cgSurf, etc.).   In addition, the window contents can be saved as PostScript, PDF, or raster image   files. If ImageMagick is installed on your machine, the raster image files can be   created in very high quality from PostScript files.    The program is designed to work with any IDL traditional graphics routine   that is a procedure and includes no more than three positional parameters.   Any number of keywords can be used to specify properties of the graphical   output. Any number of graphics commands can be  added  the the cgWindow.   Simply use the AddCmd keyword to add commands.    If your program does not load its own color tables, the color tables in   effect when cgWindow is first called are used to display the graphics   commands.    To create PostScript output from within cgWindow, your graphics program   has to be written in such a way that it can work properly in the PostScript   device. This means there are no Window commands, WSet commands, and the like   that are not allowed in the PostScript device. Such commands are allowed in   programs, of course, if they are  protected . Usually such protection looks   like this: <span class= code-output >  IF (!D.Flags AND 256) NE 0 THEN Window, ...</span>   The Coyote Graphics program cgDisplay is a good program for opening graphics    windows , because such PostScript protection is built into the program. In a PostScript   device, cgDisplay produces a  window  with the same aspect ratio as the current   display graphics window, which is an aid in producing PostScript output that   looks like the same output in the display window.    Much better looking raster files can be created from the cgWindow contents,   if the raster files are created by converting PostScript files to the raster   file. If the ImageMagick  convert  command can be found on your machine, you   will have the option to create raster files using this method. I *highly*   recommend doing so, as fonts and other plot annotation will be of much higher   quality using this method.    cgWindow has been designed to work with other Coyote Graphics routines: cgPlot,   cgContour, cgSurf, and so on, although I expect it to work with any IDL   traditional graphics routine, if the routine is well written.   ", "", "Graphics", "     Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgwindow.html#cgWindow", "cgWindow", 'routine in <a href="coyote/cgwindow.html">cgwindow.pro</a>', "cgwindow.pro", "", "cgWindow", "   Creates a resizeable graphics window for IDL traditional commands (Plot, Contour,    Surface, etc. or for Coyote Graphics routines, cgPlot, cgContour, cgSurf, etc.).    In addition, the window contents can be saved as PostScript files or as raster image    files. If ImageMagick is installed on your machine, the raster image files can be    created in very high quality from PostScript files.   ", "AddCmd       Set this keyword to add an additional graphics command to an cgWindow.        The command is added to the last created cgWindow, unless the WinID        keyword is used to select another cgWindow. Adding a command causes        all the commands in the window to be immediately executed. If this is        not behavior you desire, use the LOADCMD keyword instead. If CMDINDEX        is used to select a command index, the new command is added before        the command currently occuping that index in the command list.  AltPS_Keywords       A structure containing alternative keyword names (as tags) and values for        those keywords to be used when the current device is the PostScript device.        See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the examples        below for details on how to use this keyword.  AltPS_Params       A structure containing alternative parameter values to be used when        the current device is the PostScript device. Structure names are restricted        to the names  P1 ,  P2 ,  P3  and  P4  to correspond to the equivalent positional        parameter. See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the        examples below for details on how to use this keyword.  CmdDelay       If this keyword is set to a value other than zero, there will be a        delay of this many seconds between command execution. This will permit         movies  of command sequences to be displayed.  CmdIndex       This keyword is used to select which command in an cgWindow to act on        when the AllCmd, DeleteCmd, LoadCmd and ReplaceCmd keywords are used.        See the descriptions of these keywords for details on what happens when        CmdIndex is missing.  DeleteCmd       Set this keyword to delete a graphics command from an cgWindow.        If CmdIndex is undefined the last command entered into the window is        deleted. It is not possible to delete the last command in the window.        Use WinID to identify the cgWindow you are interested in. If WinID        is undefined, the last cgWindow created is used.  ExecuteCmd       Set this keyword to immediate execute all the commands in an cgWindow.        Normally, this is used after commands have been loaded with LOADCMD.  Group_Leader       The identifier of a widget to serve as a group leader for this program.        If the group leader is destroyed, this program is also destroyed. Used        when calling this program from another widget program.  ListCmd       If this keyword is set, the commands currently in the cgWindow are        listed. Use WinID to identify the cgWindow you are interested in.        If WinID is undefined, the last cgWindow created is used.  LoadCmd       Set this keyword to add an additional graphics command to an cgWindow.        The command is added to the last created cgWindow, unless the WinID        keyword is used to select another cgWindow. Loaded commands are not        automatically executed. Set the EXECUTECMD keyword at the end of loading        to execute the loaded commands. If CMDINDEX is used to select a command        index, the new command is loaded before the command currently occuping        that index in the command list.  Method       Set this keyword if the command is an object method call rather than a        procedure call. If this keyword is set, the first positional parameter, p1,        must be present and must be a valid object reference.  ReplaceCmd       Set this keyword to replace a graphics command from an cgWindow.        If CmdIndex is undefined, *all* commands in the window are replaced. Use        WinID to identify the cgWindow you are interested in. If WinID is        undefined, the last cgWindow created is used for the replacement.  WAspect       Set this keyword to the aspect ratio you would like the window to have.        The aspect ratio is calculated as (ysize/xsize). Must be a float value.        If this keyword is set, the window will maintain this aspect ratio,        even when it is resized.  WBackground       The background color of the window. Specifying a background color        automatically sets the WErase keyword.  WDestroyObjects       If this keyword is set, and any of the input parameters p1-p4 is an object,        the object parameter will be destroyed when the window is destroyed.  WErase       Set this keyword to cause the window to be erased before graphics commands        are drawn. This may need to be set, for example, to display images.  WinID       Use this keyword to select a previously open and existing cgWindow identifier        (the number between the parentheses in the title bar of cgWindow). The AddCmd,        ReplaceCmd, ListCmd, and DeleteCmd keywords all apply to the  current  cgWindow        unless this keyword is used to select another existing cgWindow to apply the        commands to.  WMulti        Set this keyword in exactly the same way you would set the !P.Multi keyword.         It will allow you to display multi-plots in the cgWindow graphics window.  WObject       cgWindow creates a cgCmdWindow object. This object reference is returned        if this keyword is present.  WOXMargin       A two-element array indicating the left and right X outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  WOYMargin       A two-element array indicating the bottom and top Y outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  WXPos       The x offset in device coordinates of the cgWindow from the upper-left corner of the display.  WXSize       The x size in device coordinates of the graphics window.  WYPos       The y offset in device coordinates of the cgWindow from the upper-left corner of the display.  WYSize       The y size in device coordinates of the the graphics window.  WTitle       The title of the graphics window. A window index number is appended to the        title so multiple cgWindow programs can be selected.   _Extracommand       The graphics procedure command to be executed. This parameter        must be a string and the the command must be a procedure. Examples        are 'Surface', 'Contour', 'Plot', 'cgPlot', cgContour, etc.  p1       The first positional parameter appropriate for the graphics command.  p2       The second positional parameter appropriate for the graphics command.  p3       The third positional parameter appropriate for the graphics command.  p4       The fourth positional parameter appropriate for the graphics command.   ", "          -1", "     Change History: <span class= code-output >  Written, 17 January 2011. DWF.</span> <span class= code-output >  Fixed a problem with the example code, and added EMPTY to end of Draw method</span> <span class= code-output >     to force UNIX machines to empty the graphics buffer after CALL_PROCEDURE. 20 Jan 2011. DWF.</span> <span class= code-output >  Improved documentation and error handling. 19 Jan 2011. DWF.</span> <span class= code-output >  More improved error handling and messages. 26 Jan 2011. DWF.</span> <span class= code-output >  Made changes to accommodate the new cgControl routine. 27 Jan 2011. DWF.</span> <span class= code-output >  Added WXOMARGIN and WYOMARGIN keywords. 28 Jan 2011. DWF.</span> <span class= code-output >  Numerous changes leading up to official release. 4 Feb 2011. DWF.</span> <span class= code-output >  Added workaround for UNIX bug for draw widget creation. 5 Feb 2011. DWF.</span> <span class= code-output >  Corrected a window aspect ratio problem with PostScript output by making the</span> <span class= code-output >     window the current window before calling PS_Start. 17 Feb 2011. DWF.</span> <span class= code-output >  Added machinery for programmatically generating raster files. 18 Feb 2011. Jeremy Bailin.</span> <span class= code-output >  Problem with restoring visualizations fixed. 6 March 2011. DWF.</span> <span class= code-output >  Fixed a problem with CALL_METHOD, which requires one positional parameter. 8 March 2011. DWF.</span> <span class= code-output >  Added the ability to set and unset adjustable text size in the window. 24 April 2011. DWF.</span> <span class= code-output >  Fixed a problem in the ReplaceCommand method that had input parameters reversed. 6 May 2011. DWF.</span> <span class= code-output >  Added the ability to set the dimensions of the draw widget programmatically. 14 June 2011.</span> <span class= code-output >  Added the keywords EvalKeywords and EvalParams to allow evaluation of command parameters and</span> <span class= code-output >      keywords at run-time. See http://www.idlcoyote.com/cg_tips/kwexpressions.php for</span> <span class= code-output >      additional details and explanations of how these keywords should be used. 2 Aug 2011.</span> <span class= code-output >  Problem dereferencing a null pointer in DRAW method fixed. 3 Aug 2011. DWF.</span> <span class= code-output >  Changes to handle inability to create raster files from PS encapsulated files in</span> <span class= code-output >     landscape mode. 26 Aug 2011. DWF.</span> <span class= code-output >  Added ability to set PostScript color mode. 30 Aug 2011. DWF.</span> <span class= code-output >  The method I was using for evaluating keyword and argument parameters at run-time</span> <span class= code-output >      was just WAY too complicated and difficult to use. I have eliminated this</span> <span class= code-output >      method (along with the EvalKeywords and EvalParams) in favor of a method that</span> <span class= code-output >      allows the user to supply alternative values to use in the PostScript device.</span> <span class= code-output >      This uses keywords AltPS_Keywords and AltPS_Params to collect these alternative</span> <span class= code-output >      arguments in structures that can be used at run-time to supply alternative values.</span> <span class= code-output >      As before, this is explained in detail at http://www.idlcoyote.com/cg_tips/kwexpressions.php.</span> <span class= code-output >      1 Sept 2011. DWF.</span> <span class= code-output >   Missed a couple of places to set decomposition color mode. 7 Sept 2011. DWF.</span> <span class= code-output >   Fixed a problem with improper filename when creating raster file vis</span> <span class= code-output >       Imagemagick via cgControl. 10 Oct 2011. DWF.</span> <span class= code-output >   Added WASPECT keyword to allow window aspect ratio to be set. 9 Nov 2011. DWF.</span> <span class= code-output >   Added PDF file to the Save As menu. Requires Ghostscript to be installed on some machines. 6 Dec 2011. DWF.</span> <span class= code-output >   Added modifications to allow PDF files to be programmatically created from cgControl. 11 Dec 2011. DWF.</span> <span class= code-output >   Added the ability to specify a fourth positional parameter. 6 Jan 2012. DWF.</span> <span class= code-output >   Separated off the cgCmdWindow part of the code to make an object-widget draw widget. 19 Jan 2012. DWF.</span> <span class= code-output >   Fixed a small type with the Outside Margin keywords that was preventing these from being used. 19 April 2012. DWF.</span> <span class= code-output >   In decompling cgWindow from cgCmdWindow, I accidentally named the WASPECT keyword ASPECT. Restored</span> <span class= code-output >       original name in this version. 13 July 2012. DWF.</span> <span class= code-output >   Added WDestroyObjects keyword to destroy objects parameters, if needed. 11 November 2012. DWF.</span> <span class= code-output >   Restored the WMULTI keyword win calling cgCmdWindow. 11 Feb 2013. DWF.</span>      Test code: <span class= code-output >  data = cgDemoData(17)</span> <span class= code-output >  cgWindow, 'cgPlot', data, COLOR='red'</span> <span class= code-output >  cgWindow, 'cgPlot', data, PSYM=2, /Overplot, COLOR='dodger blue', /AddCmd</span> <span class= code-output >  cgWIndow, 'cgPlot', cgDemoData(17), color='olive', linestyle = 2, /Overplot, /AddCmd</span> <span class= code-output >  cgWindow, /ListCmd</span> <span class= code-output >  cgWindow, 'cgPlot', data, COLOR='purple', /ReplaceCMD, CMDINDEX=0</span>     Additional examples can be found here: <span class= code-output >   http://www.idlcoyote.com/graphics_tips/cgwindow.html</span>     Example using different keyword parameters for the display and PostScript output:    <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(1), /WINDOW, $ <span class= code-output >        THICK=1.0, XTITLE='Distance (' + cgGreek('mu') + 'm)', $</span> <span class= code-output >        ALTPS_KEYWORDS={THICK:4.0, XTITLE:'Distance (' + cgGreek('mu', /PS) + 'm)'}</span>     Example using different positional parameters:    <span class= code-prompt >IDL&gt;</span> cgText, 0.20, 0.85, /Normal, 'Line of Text', ALIGNMENT=0.0, $ <span class= code-output >        ALTPS_KEYWORDS={ALIGNMENT:1.0}, ALTPS_PARAMS={P1:0.88}, /ADDCMD</span>     Additional examples can be found here: <span class= code-output >   http://www.idlcoyote.com/cg_tips/kwexpressions.php</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgwindow.html", "cgwindow.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgwindow.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "  Creates a resizeable graphics window for IDL traditional commands (Plot, Contour,   Surface, etc. or for Coyote Graphics routines, cgPlot, cgContour, cgSurf, etc.).   In addition, the window contents can be saved as PostScript, PDF, or raster image   files. If ImageMagick is installed on your machine, the raster image files can be   created in very high quality from PostScript files.    The program is designed to work with any IDL traditional graphics routine   that is a procedure and includes no more than three positional parameters.   Any number of keywords can be used to specify properties of the graphical   output. Any number of graphics commands can be  added  the the cgWindow.   Simply use the AddCmd keyword to add commands.    If your program does not load its own color tables, the color tables in   effect when cgWindow is first called are used to display the graphics   commands.    To create PostScript output from within cgWindow, your graphics program   has to be written in such a way that it can work properly in the PostScript   device. This means there are no Window commands, WSet commands, and the like   that are not allowed in the PostScript device. Such commands are allowed in   programs, of course, if they are  protected . Usually such protection looks   like this: <span class= code-output >  IF (!D.Flags AND 256) NE 0 THEN Window, ...</span>   The Coyote Graphics program cgDisplay is a good program for opening graphics    windows , because such PostScript protection is built into the program. In a PostScript   device, cgDisplay produces a  window  with the same aspect ratio as the current   display graphics window, which is an aid in producing PostScript output that   looks like the same output in the display window.    Much better looking raster files can be created from the cgWindow contents,   if the raster files are created by converting PostScript files to the raster   file. If the ImageMagick  convert  command can be found on your machine, you   will have the option to create raster files using this method. I *highly*   recommend doing so, as fonts and other plot annotation will be of much higher   quality using this method.    cgWindow has been designed to work with other Coyote Graphics routines: cgPlot,   cgContour, cgSurf, and so on, although I expect it to work with any IDL   traditional graphics routine, if the routine is well written.   ", "", "Graphics", "     Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgwindow.html#cgWindow", "cgWindow", 'routine in <a href="idlastro/coyote/cgwindow.html">cgwindow.pro</a>', "cgwindow.pro", "", "cgWindow", "   Creates a resizeable graphics window for IDL traditional commands (Plot, Contour,    Surface, etc. or for Coyote Graphics routines, cgPlot, cgContour, cgSurf, etc.).    In addition, the window contents can be saved as PostScript files or as raster image    files. If ImageMagick is installed on your machine, the raster image files can be    created in very high quality from PostScript files.   ", "AddCmd       Set this keyword to add an additional graphics command to an cgWindow.        The command is added to the last created cgWindow, unless the WinID        keyword is used to select another cgWindow. Adding a command causes        all the commands in the window to be immediately executed. If this is        not behavior you desire, use the LOADCMD keyword instead. If CMDINDEX        is used to select a command index, the new command is added before        the command currently occuping that index in the command list.  AltPS_Keywords       A structure containing alternative keyword names (as tags) and values for        those keywords to be used when the current device is the PostScript device.        See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the examples        below for details on how to use this keyword.  AltPS_Params       A structure containing alternative parameter values to be used when        the current device is the PostScript device. Structure names are restricted        to the names  P1 ,  P2 ,  P3  and  P4  to correspond to the equivalent positional        parameter. See http://www.idlcoyote.com/cg_tips/kwexpressions.php and the        examples below for details on how to use this keyword.  CmdDelay       If this keyword is set to a value other than zero, there will be a        delay of this many seconds between command execution. This will permit         movies  of command sequences to be displayed.  CmdIndex       This keyword is used to select which command in an cgWindow to act on        when the AllCmd, DeleteCmd, LoadCmd and ReplaceCmd keywords are used.        See the descriptions of these keywords for details on what happens when        CmdIndex is missing.  DeleteCmd       Set this keyword to delete a graphics command from an cgWindow.        If CmdIndex is undefined the last command entered into the window is        deleted. It is not possible to delete the last command in the window.        Use WinID to identify the cgWindow you are interested in. If WinID        is undefined, the last cgWindow created is used.  ExecuteCmd       Set this keyword to immediate execute all the commands in an cgWindow.        Normally, this is used after commands have been loaded with LOADCMD.  Group_Leader       The identifier of a widget to serve as a group leader for this program.        If the group leader is destroyed, this program is also destroyed. Used        when calling this program from another widget program.  ListCmd       If this keyword is set, the commands currently in the cgWindow are        listed. Use WinID to identify the cgWindow you are interested in.        If WinID is undefined, the last cgWindow created is used.  LoadCmd       Set this keyword to add an additional graphics command to an cgWindow.        The command is added to the last created cgWindow, unless the WinID        keyword is used to select another cgWindow. Loaded commands are not        automatically executed. Set the EXECUTECMD keyword at the end of loading        to execute the loaded commands. If CMDINDEX is used to select a command        index, the new command is loaded before the command currently occuping        that index in the command list.  Method       Set this keyword if the command is an object method call rather than a        procedure call. If this keyword is set, the first positional parameter, p1,        must be present and must be a valid object reference.  ReplaceCmd       Set this keyword to replace a graphics command from an cgWindow.        If CmdIndex is undefined, *all* commands in the window are replaced. Use        WinID to identify the cgWindow you are interested in. If WinID is        undefined, the last cgWindow created is used for the replacement.  WAspect       Set this keyword to the aspect ratio you would like the window to have.        The aspect ratio is calculated as (ysize/xsize). Must be a float value.        If this keyword is set, the window will maintain this aspect ratio,        even when it is resized.  WBackground       The background color of the window. Specifying a background color        automatically sets the WErase keyword.  WErase       Set this keyword to cause the window to be erased before graphics commands        are drawn. This may need to be set, for example, to display images.  WinID       Use this keyword to select the window cgWindow identifier (the number between        the parentheses in the title bar of cgWindow). The AddCmd, ReplaceCmd, ListCmd,        and DeleteCmd keywords will all apply to the commands in the last cgWindow        created unless this keyword is used to select another cgWindow to apply the        commands to.  WMulti        Set this keyword in exactly the same way you would set the !P.Multi keyword.         It will allow you to display multi-plots in the cgWindow graphics window.  WObject       cgWindow creates a FSC_CmdWindow object. This object reference is returned        if this keyword is present.  WOXMargin       A two-element array indicating the left and right X outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  WOYMargin       A two-element array indicating the bottom and top Y outside margins for the        graphical display. Used only when doing multiple plots with WMulti.  WXPos       The x offset in device coordinates of the cgWindow from the upper-left corner of the display.  WXSize       The x size in device coordinates of the graphics window.  WYPos       The y offset in device coordinates of the cgWindow from the upper-left corner of the display.  WYSize       The y size in device coordinates of the the graphics window.  WTitle       The title of the graphics window. A window index number is appended to the        title so multiple cgWindow programs can be selected.   _Extracommand       The graphics procedure command to be executed. This parameter        must be a string and the the command must be a procedure. Examples        are 'Surface', 'Contour', 'Plot', 'cgPlot', cgContour, etc.  p1       The first positional parameter appropriate for the graphics command.  p2       The second positional parameter appropriate for the graphics command.  p3       The third positional parameter appropriate for the graphics command.  p4       The fourth positional parameter appropriate for the graphics command.   ", "          -1", "     Change History: <span class= code-output >  Written, 17 January 2011. DWF.</span> <span class= code-output >  Fixed a problem with the example code, and added EMPTY to end of Draw method</span> <span class= code-output >     to force UNIX machines to empty the graphics buffer after CALL_PROCEDURE. 20 Jan 2011. DWF.</span> <span class= code-output >  Improved documentation and error handling. 19 Jan 2011. DWF.</span> <span class= code-output >  More improved error handling and messages. 26 Jan 2011. DWF.</span> <span class= code-output >  Made changes to accommodate the new cgControl routine. 27 Jan 2011. DWF.</span> <span class= code-output >  Added WXOMARGIN and WYOMARGIN keywords. 28 Jan 2011. DWF.</span> <span class= code-output >  Numerous changes leading up to official release. 4 Feb 2011. DWF.</span> <span class= code-output >  Added workaround for UNIX bug for draw widget creation. 5 Feb 2011. DWF.</span> <span class= code-output >  Corrected a window aspect ratio problem with PostScript output by making the</span> <span class= code-output >     window the current window before calling PS_Start. 17 Feb 2011. DWF.</span> <span class= code-output >  Added machinery for programmatically generating raster files. 18 Feb 2011. Jeremy Bailin.</span> <span class= code-output >  Problem with restoring visualizations fixed. 6 March 2011. DWF.</span> <span class= code-output >  Fixed a problem with CALL_METHOD, which requires one positional parameter. 8 March 2011. DWF.</span> <span class= code-output >  Added the ability to set and unset adjustable text size in the window. 24 April 2011. DWF.</span> <span class= code-output >  Fixed a problem in the ReplaceCommand method that had input parameters reversed. 6 May 2011. DWF.</span> <span class= code-output >  Added the ability to set the dimensions of the draw widget programmatically. 14 June 2011.</span> <span class= code-output >  Added the keywords EvalKeywords and EvalParams to allow evaluation of command parameters and</span> <span class= code-output >      keywords at run-time. See http://www.idlcoyote.com/cg_tips/kwexpressions.php for</span> <span class= code-output >      additional details and explanations of how these keywords should be used. 2 Aug 2011.</span> <span class= code-output >  Problem dereferencing a null pointer in DRAW method fixed. 3 Aug 2011. DWF.</span> <span class= code-output >  Changes to handle inability to create raster files from PS encapsulated files in</span> <span class= code-output >     landscape mode. 26 Aug 2011. DWF.</span> <span class= code-output >  Added ability to set PostScript color mode. 30 Aug 2011. DWF.</span> <span class= code-output >  The method I was using for evaluating keyword and argument parameters at run-time</span> <span class= code-output >      was just WAY too complicated and difficult to use. I have eliminated this</span> <span class= code-output >      method (along with the EvalKeywords and EvalParams) in favor of a method that</span> <span class= code-output >      allows the user to supply alternative values to use in the PostScript device.</span> <span class= code-output >      This uses keywords AltPS_Keywords and AltPS_Params to collect these alternative</span> <span class= code-output >      arguments in structures that can be used at run-time to supply alternative values.</span> <span class= code-output >      As before, this is explained in detail at http://www.idlcoyote.com/cg_tips/kwexpressions.php.</span> <span class= code-output >      1 Sept 2011. DWF.</span> <span class= code-output >   Missed a couple of places to set decomposition color mode. 7 Sept 2011. DWF.</span> <span class= code-output >   Fixed a problem with improper filename when creating raster file vis</span> <span class= code-output >       Imagemagick via cgControl. 10 Oct 2011. DWF.</span> <span class= code-output >   Added WASPECT keyword to allow window aspect ratio to be set. 9 Nov 2011. DWF.</span> <span class= code-output >   Added PDF file to the Save As menu. Requires Ghostscript to be installed on some machines. 6 Dec 2011. DWF.</span> <span class= code-output >   Added modifications to allow PDF files to be programmatically created from cgControl. 11 Dec 2011. DWF.</span> <span class= code-output >   Added the ability to specify a fourth positional parameter. 6 Jan 2012. DWF.</span> <span class= code-output >   Separated off the cgCmdWindow part of the code to make an object-widget draw widget. 19 Jan 2012. DWF.</span> <span class= code-output >   Fixed a small type with the Outside Margin keywords that was preventing these from being used. 19 April 2012. DWF.</span> <span class= code-output >   In decompling cgWindow from cgCmdWindow, I accidentally named the WASPECT keyword ASPECT. Restored</span> <span class= code-output >       original name in this version. 13 July 2012. DWF.</span>      Test code: <span class= code-output >  data = cgDemoData(17)</span> <span class= code-output >  cgWindow, 'cgPlot', data, COLOR='red'</span> <span class= code-output >  cgWindow, 'cgPlot', data, PSYM=2, /Overplot, COLOR='dodger blue', /AddCmd</span> <span class= code-output >  cgWIndow, 'cgPlot', cgDemoData(17), color='olive', linestyle = 2, /Overplot, /AddCmd</span> <span class= code-output >  cgWindow, /ListCmd</span> <span class= code-output >  cgWindow, 'cgPlot', data, COLOR='purple', /ReplaceCMD, CMDINDEX=0</span>     Additional examples can be found here: <span class= code-output >   http://www.idlcoyote.com/graphics_tips/cgwindow.html</span>     Example using different keyword parameters for the display and PostScript output:    <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(1), /WINDOW, $ <span class= code-output >        THICK=1.0, XTITLE='Distance (' + Greek('mu') + 'm)', $</span> <span class= code-output >        ALTPS_KEYWORDS={THICK:4.0, XTITLE:'Distance (' + Greek('mu', /PS) + 'm)'}</span>     Example using different positional parameters:    <span class= code-prompt >IDL&gt;</span> cgText, 0.20, 0.85, /Normal, 'Line of Text', ALIGNMENT=0.0, $ <span class= code-output >        ALTPS_KEYWORDS={ALIGNMENT:1.0}, ALTPS_PARAMS={P1:0.88}, /ADDCMD</span>     Additional examples can be found here: <span class= code-output >   http://www.idlcoyote.com/cg_tips/kwexpressions.php</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgwindow_getdefs.html", "cgwindow_getdefs.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgwindow_getdefs.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgwindow_getdefs.html#cgWindow_GetDefs", "cgWindow_GetDefs", 'routine in <a href="idlastro/coyote/cgwindow_getdefs.html">cgwindow_getdefs.pro</a>', "cgwindow_getdefs.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgWindow_GetDefs", "   Allows the user to get the global defaults for resizeable cgWindow programs.   ", "AdjustSize         If set, adjust the default text size to match the display window size.  Aspect         The aspect ratio of the window.  Background         The background color of the window.  Delay          The amount of delay between command execution.  EraseIt         The Erase status of the window.  Multi         The !P.MULTI setting for the window.  XOMargin         The !X.OMargin value for multiplots.  YOMargin         The !Y.OMargin value for multiplots.  XSize         The starting X size of the window.  YSize         The starting Y size of the window.   Title         The window title.  XPos         The X offset of the window from the upper-left corner of the display.  YPos         The Y offset of the window from the upper-left corner of the display.  Palette         The window color palette.  IM_Density         The sampling density.  IM_PNG8         If set, ImageMagick will create 8-bit PNG files, rather than 24-bit.  IM_Options         Current ImageMagick convert options.  IM_Raster         The raster via ImageMagick setting.  IM_Resize         The amount PostScript output is resized.  IM_Transparent         The transparent background setting.  IM_Width         The final width of ImageMagick raster file output.  PDF_Unix_Convert_Cmd         The name of an alternative UNIX command to convert PostScript to PDF.  PDF_Path         The name of the path to the Ghostscript command for converting PS to PDF.  PS_CHARSIZE         The PostScript character size.  PS_Decomposed         The PostScript decomposed status of the window.  PS_Delete         The delete PostScript file status of the window.  PS_Metric          The metric status of the window.  PS_Encapsulated          The PostScript encapsulated status of the window.  PS_FONT          The font being using for PostScript output.  PS_QUIET          Set to one of the QUIET keyword is set on PSConfig.  PS_SCALE_FACTOR          The PostScript scale factor.  PS_TT_FONT          The name of the PostScript true-type font in current use.  ", "Graphics", "     Change History: <span class= code-output >  Written, 29 January 2011. DWF.</span> <span class= code-output >  Added PS_QUIET keyword. 17 Feb 2011. DWF.</span> <span class= code-output >  Added Raster_IM.  18 Feb 2011. Jeremy Bailin</span> <span class= code-output >  Added the ability to set and unset adjustable text size in</span> <span class= code-output >    cgWindow with ADJUSTSIZE keyword. 24 April 2011. DWF.</span> <span class= code-output >  Added PS_DECOMPOSED keyword to allow getting/setting of PostScript decomposed</span> <span class= code-output >    value. 30 Aug 2011. DWF.</span> <span class= code-output >  Added ASPECT keyword to allow getting/setting of window aspect ratio. 18 Nov 2011. DWF.</span> <span class= code-output >  Added PDF_UNIX_CONVERT_CMD and PDF_PATH keywords. 7 Dec 2011. DWF.</span> <span class= code-output >  Added IM_WIDTH keyword. 3 April 2012. DWF.</span> <span class= code-output >  Added IM_PNG8 keyword. 3 April 2012. DWF.</span>       Copyright (c) 2011-2012, Fanning Software Consulting, Inc.      Used to get cgWindow global properties:   <span class= code-prompt >IDL&gt;</span> cgWindow_GetDefs, PALETTE=palette, PS_ENCAPSULATED=encap, PS_METRIC=metric  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgwindow_getdefs.html", "cgwindow_getdefs.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgwindow_getdefs.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgwindow_getdefs.html#cgWindow_GetDefs", "cgWindow_GetDefs", 'routine in <a href="coyote/cgwindow_getdefs.html">cgwindow_getdefs.pro</a>', "cgwindow_getdefs.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgWindow_GetDefs", "   Allows the user to get the global defaults for resizeable cgWindow programs.   ", "AdjustSize         If set, adjust the default text size to match the display window size.  Aspect         The aspect ratio of the window.  Background         The background color of the window.  Delay          The amount of delay between command execution.  EraseIt         The Erase status of the window.  Multi         The !P.MULTI setting for the window.  XOMargin         The !X.OMargin value for multiplots.  YOMargin         The !Y.OMargin value for multiplots.  XSize         The starting X size of the window.  YSize         The starting Y size of the window.   Title         The window title.  XPos         The X offset of the window from the upper-left corner of the display.  YPos         The Y offset of the window from the upper-left corner of the display.  Palette         The window color palette.  IM_Density         The sampling density.  IM_PNG8         If set, ImageMagick will create 8-bit PNG files, rather than 24-bit.  IM_Options         Current ImageMagick convert options.  IM_Raster         The raster via ImageMagick setting.  IM_Resize         The amount PostScript output is resized.  IM_TIFF_Depth         The number of bits per channel in TIFF files converted with ImageMagick.  IM_Transparent         The transparent background setting.  IM_Width         The final width of ImageMagick raster file output.  PDF_Unix_Convert_Cmd         The name of an alternative UNIX command to convert PostScript to PDF.  PDF_Path         The name of the path to the Ghostscript command for converting PS to PDF.  PS_CHARSIZE         The PostScript character size.  PS_Decomposed         The PostScript decomposed status of the window.  PS_Delete         The delete PostScript file status of the window.  PS_Metric          The metric status of the window.  PS_Encapsulated          The PostScript encapsulated status of the window.  PS_FONT          The font being using for PostScript output.  PS_QUIET          Set to one of the QUIET keyword is set on PSConfig.  PS_SCALE_FACTOR          The PostScript scale factor.  PS_TT_FONT          The name of the PostScript true-type font in current use.  ", "Graphics", "     Change History: <span class= code-output >  Written, 29 January 2011. DWF.</span> <span class= code-output >  Added PS_QUIET keyword. 17 Feb 2011. DWF.</span> <span class= code-output >  Added Raster_IM.  18 Feb 2011. Jeremy Bailin</span> <span class= code-output >  Added the ability to set and unset adjustable text size in</span> <span class= code-output >    cgWindow with ADJUSTSIZE keyword. 24 April 2011. DWF.</span> <span class= code-output >  Added PS_DECOMPOSED keyword to allow getting/setting of PostScript decomposed</span> <span class= code-output >    value. 30 Aug 2011. DWF.</span> <span class= code-output >  Added ASPECT keyword to allow getting/setting of window aspect ratio. 18 Nov 2011. DWF.</span> <span class= code-output >  Added PDF_UNIX_CONVERT_CMD and PDF_PATH keywords. 7 Dec 2011. DWF.</span> <span class= code-output >  Added IM_WIDTH keyword. 3 April 2012. DWF.</span> <span class= code-output >  Added IM_PNG8 keyword. 3 April 2012. DWF.</span> <span class= code-output >  Added IM_TIFF_DEPTH keyowrd. 14 May 2013. DWF.</span>       Copyright (c) 2011-2012, Fanning Software Consulting, Inc.      Used to get cgWindow global properties:   <span class= code-prompt >IDL&gt;</span> cgWindow_GetDefs, PALETTE=palette, PS_ENCAPSULATED=encap, PS_METRIC=metric  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/cgwindow_setdefs.html", "cgwindow_setdefs.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "cgwindow_setdefs.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/cgwindow_setdefs.html#cgWindow_SetDefs", "cgWindow_SetDefs", 'routine in <a href="idlastro/coyote/cgwindow_setdefs.html">cgwindow_setdefs.pro</a>', "cgwindow_setdefs.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgWindow_SetDefs", "   Allows the user to set global defaults for resizeable cgWindow programs.   ", "AdjustSize         Set this keyword to have the default text size adjusted to fit the size of the          display window.  Aspect         Set the aspect ratio of the window. If set to 0, the normal  default  window          aspect ratio is used and nothing special is done when the window is resize.          If aspect is not 0, then the window is confined to this aspect ratio.  Background         The background color of the window. Only use if the ERASEIT property is also set.  Delay         Set this keyword to the amount of delay desired between command execution. 0  EraseIt         If this property is set, the cgWindow erases with the background color before          displaying the commands in the window's command list.  IM_Density         Set this keyword to the sampling density when ImageMagick creates raster image          file from PostScript outout.  IM_PNG8         Set this keyword to create an 8-bit PNG file rather than the normal 24-bit PNG file.  IM_Options         Set this keyword to any ImageMagick options you would like to pass along to the          ImageMagick convert command when creating raster image files from PostScript output.  IM_Raster         When raster files are created programmatically, this keyword determines if the          raster file is created directly in IDL (value =0) or is created from a PostScript          intermediate file via ImageMagick (value =1). The default is via ImageMagick if the          convert program can be found on the machine running the program.  IM_Resize         Set this keyword to percentage that the raster image file created my ImageMagick          from PostScript output should be resized.  IM_Transparent         Set this keyword to allow ImageMagick to create transparent backgrounds when it          makes raster image files from PostScript output.  IM_Width        Set this keyword to the width of the output raster file in pixel units. The height of the raster         file is set to preserve the aspect ratio of the output image. Applies only to raster images (eg         PNG, JPEG, TIFF, etc.) created from PostScript files with ImageMagick.  Multi         Set this keyword to the !P.MULTI setting you want to use for the window.          !P.MULTI is set to this setting before command execution, and set back to          it's default value when the commands are finished executing.  Palette         Use this keyword to pass in an N-by-3 (or 3-by-N) byte array containing the          R, G, and B vectors of a color table. It is probably easier to use cgLoadCT or          XCOLORS to load color tables for the window, but this is provided as another option.  PDF_Unix_Convert_Cmd         Set this keyword to the name of an alternative UNIX command to convert PostScript to PDF.  PDF_Path         Set this keyword to the name of the path to the Ghostscript command for converting PS to PDF.  PS_Decomposed         If set, use decomposed color in the PostScript device.  PS_Delete         Set this keyword to zero if you want to keep the PostScript output ImageMagick creates          when making raster file output.  PS_Metric          Set this keyword to configure PSCONFIG to use metric values and A4 page size in its interface.  PS_Encapsulated          Set this keyword to configure PSCONFIG to produce encapsulated PostScript output by default.  PS_FONT          Set this to the !P.Font value to use for creating PostScript files.  PS_CHARSIZE         Set this value to the !P.Charsize value to use when creating PostScript output. This          value is not used if !P.Charsize is set to anything other than 0.0.  PS_QUIET          Set this keyword to suppress output messages from PS_Start and PS_End.  PS_SCALE_FACTOR          Set this keyword to the PostScript scale factor you want to use for PostScript output.  PS_TT_FONT          Set this keyword to the name of the PostScript true-type font to use for PostScript output.           Not used, unless !P.Font=1.  Reset         Set this keyword to reset all values to their default values.  XOMargin         Set this keyword to set !X.OMargin to this value for multiplots.  YOMargin         Set this keyword to set !Y.OMargin to this value for multiplots.  XSize         Set this keyword to the starting X size of the window.  YSize         Set this keyword to the starting Y size of the window.   Title         If this keyword is set, the selection is assumed to be a window title. All          matching is done in uppercase characters.  XPos         Set this keyword to the X offset of the window from the upper-left corner of the display.  YPos         Set this keyword to the Y offset of the window from the upper-left corner of the display.  ", "Graphics", "     Change History: <span class= code-output >  Written, 29 January 2011. DWF.</span> <span class= code-output >  Small bug fixes, and addition of PS_QUIET keyword. 17 Feb 2011. DWF.</span> <span class= code-output >  Added Raster_IM, 18 February 2011. Jeremy Bailin.</span> <span class= code-output >  Added the ability to set and unset adjustable text size in</span> <span class= code-output >    cgWindow with ADJUSTSIZE keyword. 24 April 2011. DWF.</span> <span class= code-output >  Added PS_DECOMPOSED keyword to set the PostScript color mode. 30 Aug 2011. DWF.</span> <span class= code-output >  Added ASPECT keyword to allow getting/setting of window aspect ratio. 18 Nov 2011. DWF.</span> <span class= code-output >  Added PDF_UNIX_CONVERT_CMD and PDF_PATH keywords. 7 Dec 2011. DWF.</span> <span class= code-output >  Added IM_WIDTH keyword. 3 April 2012. DWF.</span> <span class= code-output >  Added IM_PNG8 keyword. 3 April 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used to set cgWindow global properties:   <span class= code-prompt >IDL&gt;</span> cgLoadCT, 5, RGB_TABLE=palette   <span class= code-prompt >IDL&gt;</span> cgWindow_SetDefs, PALETTE=palette, $ <span class= code-output >          ERASEIT=1, XSIZE=800, YSIZE=400, XPOS=100, YPOS=200, $</span> <span class= code-output >          PS_ENCAPSULATED=1, PS_METRIC=1</span>   <span class= code-prompt >IDL&gt;</span> cgImage, cgDemoData(7), /WINDOW, MARGIN=0.1  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgwindow_setdefs.html", "cgwindow_setdefs.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgwindow_setdefs.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgwindow_setdefs.html#cgWindow_SetDefs", "cgWindow_SetDefs", 'routine in <a href="coyote/cgwindow_setdefs.html">cgwindow_setdefs.pro</a>', "cgwindow_setdefs.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgWindow_SetDefs", "   Allows the user to set global defaults for resizeable cgWindow programs.   ", "AdjustSize         Set this keyword to have the default text size adjusted to fit the size of the          display window.  Aspect         Set the aspect ratio of the window. If set to 0, the normal  default  window          aspect ratio is used and nothing special is done when the window is resize.          If aspect is not 0, then the window is confined to this aspect ratio.  Background         The background color of the window. Only use if the ERASEIT property is also set.  Delay         Set this keyword to the amount of delay desired between command execution. 0  EraseIt         If this property is set, the cgWindow erases with the background color before          displaying the commands in the window's command list.  IM_Density         Set this keyword to the sampling density when ImageMagick creates raster image          file from PostScript output.  IM_PNG8         Set this keyword to create an 8-bit PNG file rather than the normal 24-bit PNG file.  IM_Options         Set this keyword to any ImageMagick options you would like to pass along to the          ImageMagick convert command when creating raster image files from PostScript output.  IM_Raster         When raster files are created programmatically, this keyword determines if the          raster file is created directly in IDL (value =0) or is created from a PostScript          intermediate file via ImageMagick (value =1). The default is via ImageMagick if the          convert program can be found on the machine running the program.  IM_Resize         Set this keyword to percentage that the raster image file created my ImageMagick          from PostScript output should be resized.  IM_TIFF_Depth         Set this keyword to the number of bits per channel in TIFF file output. Allowed values          are 8, 16, and 32.  IM_Transparent         Set this keyword to allow ImageMagick to create transparent backgrounds when it          makes raster image files from PostScript output.  IM_Width        Set this keyword to the width of the output raster file in pixel units. The height of the raster         file is set to preserve the aspect ratio of the output image. Applies only to raster images (eg         PNG, JPEG, TIFF, etc.) created from PostScript files with ImageMagick.  Multi         Set this keyword to the !P.MULTI setting you want to use for the window.          !P.MULTI is set to this setting before command execution, and set back to          it's default value when the commands are finished executing.  Palette         Use this keyword to pass in an N-by-3 (or 3-by-N) byte array containing the          R, G, and B vectors of a color table. It is probably easier to use cgLoadCT or          XCOLORS to load color tables for the window, but this is provided as another option.  PDF_Unix_Convert_Cmd         Set this keyword to the name of an alternative UNIX command to convert PostScript to PDF.  PDF_Path         Set this keyword to the name of the path to the Ghostscript command for converting PS to PDF.  PS_Decomposed         If set, use decomposed color in the PostScript device.  PS_Delete         Set this keyword to zero if you want to keep the PostScript output ImageMagick creates          when making raster file output.  PS_Metric          Set this keyword to configure PSCONFIG to use metric values and A4 page size in its interface.  PS_Encapsulated          Set this keyword to configure PSCONFIG to produce encapsulated PostScript output by default.  PS_FONT          Set this to the !P.Font value to use for creating PostScript files.  PS_CHARSIZE         Set this value to the !P.Charsize value to use when creating PostScript output. This          value is not used if !P.Charsize is set to anything other than 0.0.  PS_QUIET          Set this keyword to suppress output messages from PS_Start and PS_End.  PS_SCALE_FACTOR          Set this keyword to the PostScript scale factor you want to use for PostScript output.  PS_TT_FONT          Set this keyword to the name of the PostScript true-type font to use for PostScript output.           Not used, unless !P.Font=1.  Reset         Set this keyword to reset all values to their default values.  XOMargin         Set this keyword to set !X.OMargin to this value for multiplots.  YOMargin         Set this keyword to set !Y.OMargin to this value for multiplots.  XSize         Set this keyword to the starting X size of the window.  YSize         Set this keyword to the starting Y size of the window.   Title         If this keyword is set, the selection is assumed to be a window title. All          matching is done in uppercase characters.  XPos         Set this keyword to the X offset of the window from the upper-left corner of the display.  YPos         Set this keyword to the Y offset of the window from the upper-left corner of the display.  ", "Graphics", "     Change History: <span class= code-output >  Written, 29 January 2011. DWF.</span> <span class= code-output >  Small bug fixes, and addition of PS_QUIET keyword. 17 Feb 2011. DWF.</span> <span class= code-output >  Added Raster_IM, 18 February 2011. Jeremy Bailin.</span> <span class= code-output >  Added the ability to set and unset adjustable text size in</span> <span class= code-output >    cgWindow with ADJUSTSIZE keyword. 24 April 2011. DWF.</span> <span class= code-output >  Added PS_DECOMPOSED keyword to set the PostScript color mode. 30 Aug 2011. DWF.</span> <span class= code-output >  Added ASPECT keyword to allow getting/setting of window aspect ratio. 18 Nov 2011. DWF.</span> <span class= code-output >  Added PDF_UNIX_CONVERT_CMD and PDF_PATH keywords. 7 Dec 2011. DWF.</span> <span class= code-output >  Added IM_WIDTH keyword. 3 April 2012. DWF.</span> <span class= code-output >  Added IM_PNG8 keyword. 3 April 2012. DWF.</span> <span class= code-output >  Added IM_TIFF_DEPTH keyowrd. 14 May 2013. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used to set cgWindow global properties:   <span class= code-prompt >IDL&gt;</span> cgLoadCT, 5, RGB_TABLE=palette   <span class= code-prompt >IDL&gt;</span> cgWindow_SetDefs, PALETTE=palette, $ <span class= code-output >          ERASEIT=1, XSIZE=800, YSIZE=400, XPOS=100, YPOS=200, $</span> <span class= code-output >          PS_ENCAPSULATED=1, PS_METRIC=1</span>   <span class= code-prompt >IDL&gt;</span> cgImage, cgDemoData(7), /WINDOW, MARGIN=0.1  ");
  
  

libdata[libdataItem++] = new Array("coyote/cgwindrose.html", "cgwindrose.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgwindrose.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " This program draws a wind rose diagram. A wind rose diagram shows the frequency, speed, and  direction of winds over some defined period of time. It is widely used in meteorological  applications (see here:).   Data to test the program (in SAMPSON formatted data files) can be freely downloaded from  the Meteorological Resource Center.   ", "", "Graphics", "     Change History: <span class= code-output >  Written, 7 March 2013 by David W. Fanning.</span> <span class= code-output >  Fixed error in which I was assuming some calm winds. 23 May 2013. DWF.</span>       Copyright (c) 2013, Fanning Software Consulting, Inc.      An example of how to use the program can be found in the     Coyote Plot Gallery.      ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgwindrose.html#cgWindRoseArc", "cgWindRoseArc", 'routine in <a href="coyote/cgwindrose.html">cgwindrose.pro</a>', "cgwindrose.pro", "", "cgWindRoseArc", " This function returns 100 x and y points as a 2x100 array that forms an arc between two angles  when plotted. The arc is created as if the 0 angle was to the North (top on drawings).   ", "xcenter        The X center of the arc.  ycenter        The Y center of the arc.  radius        The radius of the desired arc.  angle1        The first angle. The arc is drawn between the first angle and the second angle.  angle2        The second angle. The arc is drawn between the first angle and the second angle.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgwindrose.html#cgWindRose_PositiveLabel", "cgWindRose_PositiveLabel", 'routine in <a href="coyote/cgwindrose.html">cgwindrose.pro</a>', "cgwindrose.pro", "", "cgWindRose_PositiveLabel", " This is a tick labeling function that prevents negative tick values.  It also labels all tick values as precentages. Set this function as  the name of either the XTickFormat or YTickFormat keyword on a Plot or  Axis command. This is not called directly by a user.   ", "axis        The type of axis. 0 is X, 1 is Y, etc.  index         The index of the tick label.  value         The tick value to be transformed by the function.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgwindrose.html#cgWindRose_ReadSamFile", "cgWindRose_ReadSamFile", 'routine in <a href="coyote/cgwindrose.html">cgwindrose.pro</a>', "cgwindrose.pro", "", "cgWindRose_ReadSamFile", " Read a SAMSON format meteorological data file to obtain the wind  speed and direction arrays.   ", "SPEED         The wind speed as obtained from the file.  DIRECTION         The direction of the wind as obtained from the file.   filename           The path to a SAMSON (*.sam) format meteorological data file from which wind speed and wind            direction can be obtained.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgwindrose.html#cgWindRose", "cgWindRose", 'routine in <a href="coyote/cgwindrose.html">cgwindrose.pro</a>', "cgwindrose.pro", "", "cgWindRose", " Draw a wind rose diagram from the input wind speed and wind direction parameters.  The wind rose diagram treats a 0 angle as pointing to the North, or toward the top  of the diagram. Note this is different from normal IDL coordinate systems, which treat the  0 angle as pointing to the right of the diagram or plot.   ", "CALMSFREQ           The frequency of calms measurements in the data. (Winds less than 1 meter/second.)  SAMFILE           The path to a SAMSON (*.sam) format meteorological data file from which wind speed and wind            direction can be obtained.  SPEEDBINSIZE           The size of the bin when the speed is binned with the Histogram command.  TITLE           The plot title.  speed         The wind speed array. Note that missing values should be removed prior to passing the          speed array to the program. This vector should have the same number of elements as the          direction array. It is assumed there are no negative speed values in the array. Winds          assumed to be measured in meters/second.  direction         The direction of the wind. This should have the same number of elements as the speed array.         The wind directions are assumed to be in the range 0 to 360.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgzimage.html", "cgzimage.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgzimage.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " Allows the user to interactively zoom into an image. Program controls are available  by right-clicking in the full-sized image window. Zoom factors from 2x to 16x are  available. Use the left mouse button to draw a box on the full-sized image to locate  the region of the image to zoom.   ", "", "Graphics", "     Change History: <span class= code-output >  Written, 20 September 2012 from previous FSC_ZImage program. DWF.</span> <span class= code-output >  Modernized the info structure handling to reflect modern sensibilities. 3 Oct 2012. DWF.</span> <span class= code-output >  Changes to allow this to work with very large images. Can now zoom to actual pixel values.</span> <span class= code-output >     Also fixed a problem that left zoom windows lying around unused if scroll bars were</span> <span class= code-output >     needed. 18 October 2012. DWF.</span> <span class= code-output >  The color palette was not always being included when images were zoomed. Fixed. 17 Nov 2012. DWF.</span> <span class= code-output >  Added ZoomFactor keyword to allow the zoom factor to be set on start-up. 28 Nov 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.      Code examples:   <span class= code-prompt >IDL&gt;</span> image = cgDemoData(7)   <span class= code-prompt >IDL&gt;</span> cgZImage, image ; 2D image   <span class= code-prompt >IDL&gt;</span> image = cgDemoData(16)   <span class= code-prompt >IDL&gt;</span> cgZImage, image ; True-Color image  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgzimage.html#cgZImage_ZoomWindow_Events", "cgZImage_ZoomWindow_Events", 'routine in <a href="coyote/cgzimage.html">cgzimage.pro</a>', "cgzimage.pro", "", "cgZImage_ZoomWindow_Events", " Event handler for the motion events coming from the zoom window. Find the location  and value of the image at the cursor location and report it to the status bar in the  main image window.   ", "event        The event structure passed to the program by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzimage.html#cgZImage_ZoomDied", "cgZImage_ZoomDied", 'routine in <a href="coyote/cgzimage.html">cgzimage.pro</a>', "cgzimage.pro", "", "cgZImage_ZoomDied", " A clean-up routine for the zoom window, if the zoom window is killed.   ", "zoomID        The zoom widget identifier  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzimage.html#cgZImage_BoxColor", "cgZImage_BoxColor", 'routine in <a href="coyote/cgzimage.html">cgzimage.pro</a>', "cgzimage.pro", "", "cgZImage_BoxColor", " Event handler for changing the rubber-band box color.   ", "event        The event structure passed to the program by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzimage.html#cgZImage_LoadColors", "cgZImage_LoadColors", 'routine in <a href="coyote/cgzimage.html">cgzimage.pro</a>', "cgzimage.pro", "", "cgZImage_LoadColors", " Event handler for changing the colors the image is displayed in.   ", "event        The event structure passed to the program by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzimage.html#cgZImage_Quit", "cgZImage_Quit", 'routine in <a href="coyote/cgzimage.html">cgzimage.pro</a>', "cgzimage.pro", "", "cgZImage_Quit", " Event handler for quiting the program.   ", "event        The event structure passed to the program by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzimage.html#cgZImage_Cleanup", "cgZImage_Cleanup", 'routine in <a href="coyote/cgzimage.html">cgzimage.pro</a>', "cgzimage.pro", "", "cgZImage_Cleanup", " The clean-up routine for the program. Come here to release pointers and  memory.   ", "tlb        The identifier of the top-level base of the widget program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzimage.html#cgZImage_Factor", "cgZImage_Factor", 'routine in <a href="coyote/cgzimage.html">cgzimage.pro</a>', "cgzimage.pro", "", "cgZImage_Factor", " Event handler for changing the zoom factor.   ", "event        The event structure passed to the program by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzimage.html#cgZImage_DrawEvents", "cgZImage_DrawEvents", 'routine in <a href="coyote/cgzimage.html">cgzimage.pro</a>', "cgzimage.pro", "", "cgZImage_DrawEvents", " Event handler for handling the rubber-band box events to create  the zoom window.   ", "event        The event structure passed to the program by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzimage.html#cgZImage", "cgZImage", 'routine in <a href="coyote/cgzimage.html">cgzimage.pro</a>', "cgzimage.pro", "", "cgZImage", " Allows the user to interactively zoom into an image. Program controls are available  by right-clicking in the full-sized image window. Zoom factors from 2x to 16x are  available. Use the left mouse button to draw a box on the full-sized image to locate  the region of the image to zoom.   ", "BETA         The beta factor in a Hyperpolic Sine stretch. Available only with 2D images.  BOTTOM         If the SCALE keyword is set, the image is scaled before display so that all          displayed pixels have values greater than or equal to BOTTOM and less than          or equal to TOP. Available only with 2D images.  BOXCOLOR         The name of the color of the rubber-band selection box.  CLIP         A number between 0 and 50 that indicates the percentage of pixels to clip          off either end of the image histogram before performing a linear stretch.          Available only with 2D images.  EXCLUDE         The value to exclude in a standard deviation stretch.  EXPONENT         The logarithm exponent in a logarithmic stretch. Available only with 2D images.  FILENAME         The name of a file that IDL can read with READ_IMAGE (e.g, GEOTIFF, TIF, JPEG, PNG, etc.).  GAMMA         The gamma factor in a gamma stretch. Available only with 2D images.  GROUP_LEADER         The widget identifier of the group leader for this program. When the group leader          dies, this program will be destroyed, too.  INTERPOLATE         Set this keyword to interpolate with bilinear interpolation the display image as it          is sized to its final position in the display window. Interpolation will potentially          create image values that do not exist in the original image. The default is to do no          interpolation, so that image values to not change upon resizing. Interpolation can          result in smoother looking final images.  MAP         A cgMap object for navigating the input image.  MAXVALUE         If this value is defined, the data is linearly scaled between MINVALUE          and MAXVALUE. MAXVALUE is set to MAX(image) by default. Setting this          keyword to a value automatically sets SCALE to 1. If the maximum value of the          image is greater than 255, this keyword is defined and SCALE=1.  MEAN         The mean factor in a logarithmic stretch. Available only with 2D images.  MISSING_COLOR         The color name of the missing value. Available only with 2D images.  MISSING_INDEX         The index of the missing color in the final byte scaled image. Available only with 2D images.  MISSING_VALUE         The number that represents the missing value in the image. Available only with 2D images.  NEGATIVE         Set this keyword if you want to display the image with a negative or reverse stretch.          Available only with 2D images.  MINVALUE         If this value is defined, the data is linearly scaled between MINVALUE          and MAXVALUE. MINVALUE is set to MIN(image) by default. Setting this          keyword to a value automatically sets SCALE=1. If the minimum value of the          image is less than 0, this keyword is defined and SCALE=1.  MULTIPLIER         The multiplication factor in a standard deviation stretch. The standard deviation          is multiplied by this factor to produce the thresholds for a linear stretch.  NCOLORS         If this keyword is supplied, the TOP keyword is ignored and the TOP keyword          is set equal to  NCOLORS-1. This keyword is provided to make cgImage easier          to use with the color-loading programs such as cgLOADCT: <span class= code-output >    cgLoadCT, 5, NColors=100, Bottom=100</span> <span class= code-output >    cgImage, image, NColors=100, Bottom=100</span>          Setting this keyword to a value automatically sets SCALE=1. Available only with 2D images.  PALETTE         Set this keyword to a 3x256 or 256x3 byte array containing the RGB color          vectors to be loaded before the image is displayed. Such vectors can be          obtained, for example, from cgLoadCT with the RGB_TABLE keyword: <span class= code-output >      cgLoadCT, 4, /BREWER, /REVERSE, RGB_TABLE=palette</span> <span class= code-output >      cgImage, cgDemoData(7), PALETTE=palette</span>  SCALE         Set this keyword to byte scale the image before display. If this keyword is not set,          the image is not scaled before display. This keyword will be set automatically by using          any of the keywords normally associated with byte scaling an image. Available only with          2D images. If set, STRETCH is set to 1, unless it is set to another value.  SIGMA         The sigma scale factor in a Gaussian stretch. Available only with 2D images.  STRETCH         The type of scaling performed prior to display. May be specified as a number          or as a string (e.g, 3 or  Log ). Available only with 2D images.             Number   Type of Stretch              0         None           No scaling whatsoever is done.              1         Linear         scaled = BytScl(image, MIN=minValue, MAX=maxValue)              2         Clip           A histogram stretch, with a percentage of pixels clipped at both the top and bottom              3         Gamma          scaled = GmaScl(image, MIN=minValue, MAX=maxValue, Gamma=gamma)              4         Log            scaled = LogScl(image, MIN=minValue, MAX=maxValue, Mean=mean, Exponent=exponent)              5         Asinh          scaled = AsinhScl(image, MIN=minValue, MAX=maxValue, Beta=beta)              6         SquareRoot     A linear stretch of the square root histogram of the image values.              7         Equalization   A linear stretch of the histogram equalized image histogram.              8         Gaussian       A Gaussian normal function is applied to the image histogram.              9         MODIS          Scaling done in the differential manner of the MODIS Rapid Response Team                                       and implemented in the Coyote Library routine ScaleModis.  TITLE         Set this keyword to the title of the plot window.  TOP         If the SCALE keyword is set, the image is scaled before display so that all          displayed pixels have values greater than or equal to BOTTOM and less than          or equal to TOP. Available only with 2D images.  ZOOMFACTOR         Use this keyword to set the starting zoom factor. The values you can use are as follows: <span class= code-output >    0: 'Actual'</span> <span class= code-output >    1: '2x'</span> <span class= code-output >    2: '3x'</span> <span class= code-output >    3: '4x'</span> <span class= code-output >    4: '5x'</span> <span class= code-output >    5: '6x'</span> <span class= code-output >    6: '7x'</span> <span class= code-output >    7: '8x'</span> <span class= code-output >    8: '12x'</span> <span class= code-output >    9: '16x'</span>  image        A 2D or true-color image of any normal data type. If not a BYTE array,         cgImage keywords for proper image scaling must be used to provide image         scaling parameters.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cgzplot.html", "cgzplot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgzplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cgzplot.html#cgZPlot", "cgZPlot", 'routine in <a href="coyote/cgzplot.html">cgzplot.pro</a>', "cgzplot.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "cgZPlot", "  This program creates a  zoomable  line plot in an interactive window. The user can   zoom into or out of the plot. Once a plot is zoomed, the user can then pan the plot   in both the X and Y directions. See the operating instructions for how to interact   with the line plot.       Operating Instructions--    Use the LEFT mouse button to zoom the plot and the RIGHT mouse button to pan the plot.    If you click and drag inside the plot axes, you will create a rubber band box. Select the   portion of data you wish to zoom into. The zoom will occur in both the X and Y directions.   If you wish to zoom the plot all the way back out, simply click and release the LEFT mouse   button inside the plot axes without moving the mouse.    Once you are zoomed into a plot, you can adjust the zoom by clicking the LEFT mouse button   outside the plot axes. If you click the mouse below the plot, you will cause the X axis to   zoom out of the plot by the zoomFactor amount (normally 5% of the current range of the axis).   If you wish to zoom the X axis into the plot, simply click above in the region of the window   above the plot. Click below the plot to zoom out, above the plot to zoom in. Similarly, you   can adjust the zoom on the Y axis. Clicking to the left of the plot zooms the Y axis out,   while clicking to the right of the plot zooms the Y axis in.    If you are zoomed into the plot, you can pan to different locations in the plot by using   the RIGHT mouse button. Hold and drag the RIGHT mouse button inside the plot axes. The   entire plot will pan in both the X and Y directions.    File output requires that ImageMagick and GhostScript be installed on your machine. Note   that exact axis scaling is always in effect.   ", "LABEL         A label is similar to a plot title, but it is aligned to the left edge          of the plot and is written in hardware fonts. Use of the label keyword          will suppress the plot title.  LEGENDS         A single cgLegendItem object, or an array of cgLegendItem objects that will be          drawn on the plot as a legend.  OBJECT         The object reference to the underlying object.  OPLOTS         A single cgOverPlot object, or an array of cgOverPlot objects that will be          overplot on the axes set up by the original data.  PARENT         The identifer of the parent widget for this program's draw widget. If not          provided, the program will create it's own top-level base widget as the parent widget.  XSIZE         The X size of the program's draw widget.  YSIZE         The Y size of the program's draw widget.  ZOOMFACTOR         Set this keyword to a number between 0.01 and 0.25. This affects the amount          of zooming when the X axis and Y axis are zoomed with the LEFT mouse button.          The default value is 0.05 or five percent of the current axis range on each          end of the axis, resulting in a 10 percent change in the axis length.  _REF_EXTRA        Any keyword appropriate for the IDL Plot or Coyote Graphic cgPlot command is         allowed in the program.   x         If X is provided without Y, a vector representing the dependent values to be          plotted If both X and Y are provided, X is the independent parameter and          Y is the dependent parameter to be plotted.  y         A vector representing the dependent values to be plotted.   ", "          -1", "     Change History: <span class= code-output >  Separated the object code (cgZPlot__Define) from this driver code for easier inheritance. 14 June 2012. DWF.</span> <span class= code-output >  Added LABEL keyword. 12 July 2012. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.   ");
  
  

libdata[libdataItem++] = new Array("coyote/cgzplot__define.html", "cgzplot__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cgzplot__define.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", "  This program creates a  zoomable  line plot in an interactive, resizable window. The user   can zoom into or out of the plot. Once a plot is zoomed, the user can then pan the plot   in both the X and Y directions. See the operating instructions for how to interact   with the line plot.    Operating Instructions--    Use the LEFT mouse button to zoom the plot and the RIGHT mouse button to pan the plot.    If you click and drag inside the plot axes, you will create a rubber band box. Select the   portion of data you wish to zoom into. The zoom will occur in both the X and Y directions.   If you wish to zoom the plot all the way back out, simply click and release the LEFT mouse   button inside the plot axes without moving the mouse.    Once you are zoomed into a plot, you can adjust the zoom by clicking the LEFT mouse button   outside the plot axes. If you click the mouse below the plot, you will cause the X axis to   zoom out of the plot by the zoomFactor amount (normally 5% of the current range of the axis).   If you wish to zoom the X axis into the plot, simply click above in the region of the window   above the plot. Click below the plot to zoom out, above the plot to zoom in. Similarly, you   can adjust the zoom on the Y axis. Clicking to the left of the plot zooms the Y axis out,   while clicking to the right of the plot zooms the Y axis in.    If you are zoomed into the plot, you can pan to different locations in the plot by using   the RIGHT mouse button. Hold and drag the RIGHT mouse button inside the plot axes. The   entire plot will pan in both the X and Y directions.    File output requires that ImageMagick and GhostScript be installed on your machine. Note   that exact axis scaling is always in effect.    The program requires the Coyote Library   to be installed on your machine.   ", "", "Graphics", "     Change History: <span class= code-output >  Written 16 May 2012, by David W. Fanning.</span> <span class= code-output >  Added UNDO capability arbitrarily set to 50 items. 17 May 2012. DWF.</span> <span class= code-output >  Added a REDO capability and the ability to adjust the Y range (via a button) so that</span> <span class= code-output >     you can see the actual data Y range of all the data in the X range of a particular</span> <span class= code-output >     view of the data. 21 May 2012. DWF.</span> <span class= code-output >  Added a PARENT keyword and changed the algorithm slightly so that this</span> <span class= code-output >     interactive widget functionality can be incorporated into your own</span> <span class= code-output >     widget programs. 21 may 2012. DWF.</span> <span class= code-output >  Added compile options idl2 to all modules. Fixed a typo for REDO button. 14 June 2012. DWF.</span> <span class= code-output >  Separated the object code from the driver code for easier inheritance. 14 June 2012. DWF.</span> <span class= code-output >  Removed the POLAR keyword, which can't be used in a zoom plot. 15 June 2012. DWF.</span> <span class= code-output >  Added a persistent output save directory.  30 June 2012. DWF.</span> <span class= code-output >  Added an ERASE method to erase the current display. 10 July 2012. DWF.</span> <span class= code-output >  Added a LABEL keyword to add a label instead of a title to a plot. 13 July 2012. DWF.</span> <span class= code-output >  Added the ability to include overplot objects in the zoom window. 17 July 2012. DWF.</span> <span class= code-output >  Added a Destroy method and now remove widget GUI in CLEANUP method. 2 Oct 2012. DWF.</span> <span class= code-output >  I had the GetProperty and SetProperty keyword inheritance mechanism screwed up. Sorted</span> <span class= code-output >     now. 13 March 2013. DWF.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.       Plot examples: <span class= code-output >  cgZPlot, cgDemodata(1), PSYM=2, Color='dodger blue'</span>     To put this in your own widget program: <span class= code-output >   tlb = Widget_Base(Title='My Program')</span> <span class= code-output >   cgZPlot, cgDemodata(1), PSYM=2, Color='dodger blue', Parent=tlb</span> <span class= code-output >   Widget_Control, tlb, /Realize</span> <span class= code-output >   Widget_Control, 'myprogram', tlb, /NoBlock</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::INIT", "cgZPlot::INIT", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::INIT", " This is the initialization method of the cgZPlot object. In general, any keyword appropriate  for the cgPlot command can be used with this program.   ", "ASPECT        Set this keyword to a floating point ratio that represents the aspect ratio         (ysize/xsize) of the resulting plot. The plot position may change as a result         of setting this keyword. Note that Aspect cannot be used when plotting with         !P.MULTI.  DRAWIDLABEL        A label is similar to a plot title, but it is aligned to the left edge         of the plot and is written in hardware fonts. Use of the label keyword         will suppress the plot title.  LEGENDS         A single cgLegendItem object, or an array of cgLegendItem objects that will be          drawn on the plot as a legend.  MAX_VALUE        Set this keyword to the maximum value to plot. Any values greater than this         value are treated as missing.  MIN_VALUE        Set this keyword to the minimu value to plot. Any values smaller than this         value are treated as missing.  OPLOTS         A single cgOverPlot object, or an array of cgOverPlot objects that will be          overplot on the axes set up by the original data.  PARENT        The identifer of the parent widget for this program's draw widget. If not         provided, the program will create it's own top-level base widget as a parent.  XLOG        Set this keyword to use a logarithmic X axis  XRANGE        Set this keyword to a two-element array giving the X data range of the plot.  XSIZE        The X size of the program's draw widget.  YLOG        Set this keyword to use a logarithmic Y axis  YRANGE         Set this keyword to a two-element array giving the Y data range of the plot.  YNOZERO        Set this keyword to use allow the Y axis to start at a value other than zero.  YSIZE         The Y size of the program's draw widget.  ZOOMFACTOR         Set this keyword to a number between 0.01 and 0.25. This affects the amount          of zooming when the X axis and Y axis are zoomed with the LEFT mouse button.          The default value is 0.05 or five percent of the current axis range on each          end of the axis, resulting in a 10 percent change in the axis length.  _REF_EXTRA        Any keyword appropriate for the IDL Plot or Coyote Graphic cgPlot command is         allowed in the program. Note that this is not the same as saying it is a good         idea to use every one of the these keywords. Use good judgement.  x         If X is provided without Y, a vector representing the dependent values to be          plotted If both X and Y are provided, X is the independent parameter and          Y is the dependent parameter to be plotted.  y         A vector representing the dependent values to be plotted.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::CLEANUP", "cgZPlot::CLEANUP", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::CLEANUP", " The clean-up method for the object. When the object is destroyed,  this method will free the object's pointers.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::AddLegends", "cgZPlot::AddLegends", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::AddLegends", " This method adds a cgLegendItem object or array of objects to the plot. The  legend objects are drawn on the plot after the orginal plot is drawn.   ", "CLEAR        If this keyword is set, the overplot list is cleared before the new overplot objects         are added. Otherwise, the overplot object or objects is added to the end of the list         already present.  DRAW        If this keyword is set, the object calls its Draw method after the overplot objects are added.  INDEX         Used only if the REPLACE keyword is set. Specifies the replacement index.  REPLACE        If this keyword is set, the new object replaces a current object, in the object         array at the INDEX location.  legendObject        A cgLegendItem object, or an array of cgLegendItem objects that should be drawn         when the Draw method is called. The legend objects will be destroyed when this         object is destroyed.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::AddOverplots", "cgZPlot::AddOverplots", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::AddOverplots", " This method adds a cgOverplot object or array of objects to the plot. The  overplot objects are drawn on the plot after the orginal plot is drawn.   ", "CLEAR        If this keyword is set, the overplot list is cleared before the new overplot objects         are added. Otherwise, the overplot object or objects is added to the end of the list         already present.  DRAW        If this keyword is set, the object calls its Draw method after the overplot objects are added.  INDEX         Used only if the REPLACE keyword is set. Specifies the replacement index.  REPLACE        If this keyword is set, the new object replaces a current object, in the object         array at the INDEX location.  oplotObject        A cgOverPlot object, or an array of cgOverplot objects that should be overplot         when the Draw method is called. The overplot objects will be destroyed when this         object is destroyed.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::AdjustRange", "cgZPlot::AdjustRange", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::AdjustRange", " This event handler will adjust the data Y range of the line plot to include all  of the data in the current data X range, even if that data is currently not being  displayed.   ", "event        The event structure passed by the window manager. Not used in this event handler.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::Button_Events", "cgZPlot::Button_Events", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::Button_Events", " Button down events are processed in this event handler method. Depending  on which button is pressed and where the button is pressed in the graphics  window, this method will either handle or dispatch the event to the appropriate  event handler.   ", "event        The event structure passed by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::CopyPixmap", "cgZPlot::CopyPixmap", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::CopyPixmap", " This method copies the contents of the pixmap into the display window.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZplot::Destroy", "cgZplot::Destroy", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZplot::Destroy", " This method destroys the object and the GUI, if it still exists.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::Draw", "cgZPlot::Draw", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::Draw", " This is the standard drawing method for the object. For smooth operation,  the graphics are pixmap buffered. The plot is drawn into the pixmap, then  copied to the draw widget window.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::DrawPlot", "cgZPlot::DrawPlot", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::DrawPlot", " This method simply gets the keywords it needs and draws the line plot.  It was created primarily so the OUTPUT keyword could be used with the  cgPlot command, since all the file output infrastruction has been built  into that command.   ", "OUTPUT         The name of the output file. File type is determined by the file extension.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::Erase", "cgZPlot::Erase", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::Erase", " This method simply erases the display.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::FileOutput", "cgZPlot::FileOutput", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::FileOutput", " This event handler method allows the plot in the graphics window to be output  to a file.   ", "event        The event structure passed by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::GetProperty", "cgZPlot::GetProperty", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::GetProperty", " The properties of the object (keywords) are retrieved with this method.   ", "DATA_XDATA_YASPECT        A value that represents the aspect ratio (ysize/xsize) of the resulting plot.  LABEL         The label that is used for the zoom plot.  LEGENDS         The current legend objects, if there are any. If not, a null object.  MAX_VALUE         The maximum value to plot.  MIN_VALUE         The minimum value to plot.  OPLOTS         The current overplot objects, if there are any. If not, a null object.  UNDOLIST         The LinkedList object that maintains the undo list.  XLOG         Set if a logarithmic X axis is used in the plot.  YLOG         Set if a logarithmic Y axis is used in the plot.  YNOZERO         Set if this property of the plot is set.  ZOOMFACTOR         Set to the current zoom factor.  _REF_EXTRA        Any keyword appropriate for the IDL Plot or Coyote Graphic cgPlot command is         allowed in the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::InsidePlot", "cgZPlot::InsidePlot", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::InsidePlot", " This  method  simply determines if a button click is inside (returns 1)  or outside (returns 0) the plot boundaries, determined by the plot axes.   ", "x        The X location of the button click in device coordinates.  y        The Y location of the button click in device coordinates.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::Notify_Realize", "cgZPlot::Notify_Realize", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::Notify_Realize", " The purpose of this method is to draw the initial line plot in the draw widget.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::Pan_Events", "cgZPlot::Pan_Events", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::Pan_Events", " This event handler method responds to panning events until it gets a button UP event.   ", "event        The event structure passed by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::ResizeDrawWidget", "cgZPlot::ResizeDrawWidget", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::ResizeDrawWidget", " This method resizes the draw widget.   ", "DRAW        If this keyword is set, the DRAW method is called after the widget is resized.  xsize        The requested X size of the draw widget.  ysize        The requested Y size of the draw widget.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::SetProperty", "cgZPlot::SetProperty", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::SetProperty", " This method allow plot keywords to be set to appropriate values.   ", "ASPECT        Set this keyword to a floating point ratio that represents the aspect ratio         (ysize/xsize) of the resulting plot. The plot position may change as a result         of setting this keyword. Note that Aspect cannot be used when plotting with         !P.MULTI.  DEP         The dependent data to plot.  DRAW         Set this keyword if you would like to immediately draw the plot after properties are set.  INDEP         The independent data to plot.  LABEL         A label is similar to a plot title, but it is aligned to the left edge          of the plot and is written in hardware fonts. Use of the label keyword          will suppress the plot title.  LEGENDS         A single cgLegendItem object, or an array of cgLegendItem objects that will be          drawn on the plot as a legend.  MAX_VALUE        Set this keyword to the maximum value to plot. Any values greater than this         value are treated as missing.  MIN_VALUE        Set this keyword to the minimu value to plot. Any values smaller than this         value are treated as missing.  OPLOTS         A single cgOverPlot object, or an array of cgOverPlot objects that will be          overplot on the axes set up by the original data.  XLOG         Set this keyword to use a logarithmic X axis  YLOG         Set this keyword to use a logarithmic Y axis  YNOZERO         Set this keyword to use allow the Y axis to start at a value other than zero.  ZOOMFACTOR         Set this keyword to a number between 0.01 and 0.25. This affects the amount          of zooming when the X axis and Y axis are zoomed with the LEFT mouse button.          The default value is 0.05 or five percent of the current axis range on each          end of the axis, resulting in a 10 percent change in the axis length.  _EXTRA        Any keyword appropriate for the IDL Plot or Coyote Graphic cgPlot command is         allowed in the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::Quit", "cgZPlot::Quit", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::Quit", " This event handler method destroys the widget program.   ", "event        The event structure passed by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::Redo", "cgZPlot::Redo", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::Redo", " This method performs the REDO action and restores the plot to  it's previous condition.   ", "event        The event structure passed by the window manager. Not used in this method.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::TLB_Resize_Events", "cgZPlot::TLB_Resize_Events", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::TLB_Resize_Events", " This event handler method resizes the graphics window.   ", "event        The event structure passed by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::Undo", "cgZPlot::Undo", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::Undo", " This method performs the UNDO action and restores the plot to  it's previous condition.   ", "event        The event structure passed by the window manager. Not used in this method.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::UndoList", "cgZPlot::UndoList", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::UndoList", " This method maintains the UNDO list. The list has a maximum undo capacity of 50.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot::Zoom_Events", "cgZPlot::Zoom_Events", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot::Zoom_Events", " This event handler method allows the user to create a rubber-band box for zooming  into the line plot.   ", "event        The event structure passed by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot_Events", "cgZPlot_Events", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot_Events", " This is the main event handler for the program. All events come here  to be distributed to the appropriate event handler method according  to instructions packed into the UVALUE of any widget generating an  event.   ", "event        The event structure passed by the window manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot_Cleanup", "cgZPlot_Cleanup", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot_Cleanup", " This is the cleanup routine for the widget. Its function is to destroy  the underlying program object.   ", "tlb        The widget identifier of the top-level base widget that just died.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot_Notify_Realize", "cgZPlot_Notify_Realize", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot_Notify_Realize", " This is the realize notify routine for the widget. Its function call the  Realize_Notify method to draw the initial plot in the display window.   ", "id        The widget identifier of the widget that has been realized.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cgzplot__define.html#cgZPlot__Define", "cgZPlot__Define", 'routine in <a href="coyote/cgzplot__define.html">cgzplot__define.pro</a>', "cgzplot__define.pro", "", "cgZPlot__Define", " The object class definition.   ", "class        The class definition object. Often helpful for obtaining fields of the object structure.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/check_fits.html", "check_fits.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "check_fits.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/check_fits.html#check_FITS", "check_FITS", 'routine in <a href="idlastro/check_fits.html">check_fits.pro</a>', "check_fits.pro", "", "check_FITS", " NAME:        CHECK_FITS  PURPOSE:        Check that keywords in a FITS header array match the associated data  EXPLANATION:        Given a FITS array IM, and a associated FITS header HDR, this        procedure will check that                (1) HDR is a string array, and IM is defined and numeric                (2) The NAXISi values in HDR are appropriate to the dimensions                    of IM                (3) The BITPIX value in HDR is appropriate to the datatype of IM        If the /UPDATE keyword is present, then the FITS header will be        modified, if necessary, to force agreement with the image array   CALLING SEQUENCE:        check_FITS, im, hdr, [ dimen, idltype, /UPDATE, /NOTYPE, /SILENT                               ERRMSG = ]'   INPUT PARAMETERS:        IM -  FITS array, e.g. as read by READFITS        HDR - FITS header (string array) associated with IM   OPTIONAL OUTPUTS:        dimen - vector containing actual array dimensions        idltype- data type of the FITS array as specified in the IDL SIZE                function (1 for BYTE, 2 for INTEGER*2, 3 for INTEGER*4, etc.)   OPTIONAL KEYWORD INPUTS:        /NOTYPE - If this keyword is set, then only agreement of the array                dimensions with the FITS header are checked, and not the                data type.        /UPDATE - If this keyword is set then the BITPIX, NAXIS and NAXISi                FITS keywords will be updated to agree with the array        /FITS, /SDAS -  these are obsolete keywords that now do nothing        /SILENT - If keyword is set and nonzero, the informational messages                will not be printed  OPTIONAL KEYWORD OUTPUT:        ERRMSG  = If this keyword is present, then any error messages will be                  returned to the user in this parameter rather than                  depending on the MESSAGE routine in IDL.  If no errors are                  encountered, then a null string is returned.   PROCEDURE:        Program checks the NAXIS and NAXISi keywords in the header to        see if they match the image array dimensions, and checks whether        the BITPIX keyword agrees with the array type.   PROCEDURE CALLS:        FXADDPAR, FXPAR(), SXDELPAR  MODIFICATION HISTORY:        Written, December 1991  W. Landsman Hughes/STX to replace CHKIMHD        No error returned if NAXIS=0 and IM is a scalar   W. Landsman  Feb 93        Fixed bug for REAL*8 STSDAS data W. Landsman July 93        Make sure NAXIS agrees with NAXISi  W. Landsman  October 93         Converted to IDL V5.0   W. Landsman   September 1997        Allow unsigned data types   W. Landsman December 1999        Allow BZERO = 0 for unsigned data types   W. Landsman January 2000        Added ERRMSG keyword, W. Landsman February 2000        Use FXADDPAR to put NAXISi in proper order   W. Landsman August 2000        Improper FXADDPAR call for DATATYPE keyword  W. Landsman December 2000        Remove explicit setting of obsolete !err W. Landsman February 2004        Remove SDAS support   W. Landsman       November 2006        Fix dimension errors introduced Nov 2006        Work again for null arrays W. Landsman/E. Hivon May 2007        Use V6.0 notation  W.L.  Feb. 2011  ", "UPDATENOTYPESDASFITSSILENTERRMSGimhdrdimenidltype", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/checkerboard.html", "checkerboard.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "checkerboard.pro", "", "", " NAME:        Checkerboard   PURPOSE:        This function returns a 2D image, with boxes of alternating colors.        Checkerboard images are useful in certain types of image processing        procedures and for making blended image masks.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Image Processing   CALLING SEQUENCE:          board = Checkerboard()   RETURN VALUE:          board:      A 2D long array of alternating colored boxes.   ARGUMENTS:          boxes:      The number of boxes of alternating colors on each side                     of the resulting image. Must be an even integer greater                     than or equal to two. Optional. Default is 8 (normal                     checkerboard).   INPUT KEYWORDS:     BLACK:           The value of the  black  boxes. By default, 0.     WHITE:           The value of the  white  boxes. By default, 255.     XSIZE:           The X size of the returned image. By default, 400.     YSIZE:           The Y size of the returned image. By default, 400.   COMMON BLOCKS:     None.   EXAMPLE:          IDL&gt; cgImage, Checkerboard()   MODIFICATION HISTORY:    Written by David W. Fanning, 26 September 2007, based on suggestions   of JD Smith on IDL newsgroup 25-26 Septermber 2007.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/checkerboard.html#Checkerboard", "Checkerboard", 'routine in <a href="coyote/checkerboard.html">checkerboard.pro</a>', "checkerboard.pro", "", "Checkerboard", "", "WHITEBLACKXSIZEYSIZEboxes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/checkimage.html", "checkimage.pro", '.pro file in <a href="code_snapshots/test_version/obsolete_files/dir-overview.html">code_snapshots/test_version/obsolete_files/ directory</a>', "checkimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/checkimage.html#checkimage", "checkimage", 'routine in <a href="code_snapshots/test_version/obsolete_files/checkimage.html">checkimage.pro</a>', "checkimage.pro", "", "checkimage", "       Checks image   ", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/checkimage.html", "checkimage.pro", '.pro file in <a href="code_snapshots/sep11/obsolete_files/dir-overview.html">code_snapshots/sep11/obsolete_files/ directory</a>', "checkimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/checkimage.html#checkimage", "checkimage", 'routine in <a href="code_snapshots/sep11/obsolete_files/checkimage.html">checkimage.pro</a>', "checkimage.pro", "", "checkimage", "       Checks image   ", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/checkimage.html", "checkimage.pro", '.pro file in <a href="code_snapshots/jul25/obsolete_files/dir-overview.html">code_snapshots/jul25/obsolete_files/ directory</a>', "checkimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/checkimage.html#checkimage", "checkimage", 'routine in <a href="code_snapshots/jul25/obsolete_files/checkimage.html">checkimage.pro</a>', "checkimage.pro", "", "checkimage", "       Checks image   ", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/obsolete_files/checkimage.html", "checkimage.pro", '.pro file in <a href="sep20/obsolete_files/dir-overview.html">sep20/obsolete_files/ directory</a>', "checkimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/obsolete_files/checkimage.html#checkimage", "checkimage", 'routine in <a href="sep20/obsolete_files/checkimage.html">checkimage.pro</a>', "checkimage.pro", "", "checkimage", "       Checks image   ", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/checkimage.html", "checkimage.pro", '.pro file in <a href="code_snapshots/orig_version/obsolete_files/dir-overview.html">code_snapshots/orig_version/obsolete_files/ directory</a>', "checkimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/checkimage.html#checkimage", "checkimage", 'routine in <a href="code_snapshots/orig_version/obsolete_files/checkimage.html">checkimage.pro</a>', "checkimage.pro", "", "checkimage", "       Checks image   ", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/checkimage.html", "checkimage.pro", '.pro file in <a href="code_snapshots/albert_version/obsolete_files/dir-overview.html">code_snapshots/albert_version/obsolete_files/ directory</a>', "checkimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/checkimage.html#checkimage", "checkimage", 'routine in <a href="code_snapshots/albert_version/obsolete_files/checkimage.html">checkimage.pro</a>', "checkimage.pro", "", "checkimage", "       Checks image   ", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/checkimage.html", "checkimage.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "checkimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/checkimage.html#checkimage", "checkimage", 'routine in <a href="code_snapshots/aug22_notworking/checkimage.html">checkimage.pro</a>', "checkimage.pro", "", "checkimage", "       Checks image   ", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/checksum32.html", "checksum32.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "checksum32.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/checksum32.html#checksum32", "checksum32", 'routine in <a href="idlastro/checksum32.html">checksum32.pro</a>', "checksum32.pro", "", "checksum32", " NAME:        CHECKSUM32   PURPOSE:        To compute the 32bit checksum of an array (ones-complement arithmetic)   EXPLANATION:        The 32bit checksum is adopted in the FITS Checksum convention        http://heasarc.gsfc.nasa.gov/docs/heasarc/fits/checksum.html   CALLING SEQUENCE:        CHECKSUM32, array, checksum, [/FROM_IEEE, /NoSAVE]   INPUTS:        array - any numeric idl array.  If the number of bytes in the array is                not a multiple of four then it is padded with zeros internally                (the array is returned unchanged).   Convert a string array                (e.g. a FITS header) to bytes prior to calling CHECKSUM32.   OUTPUTS:        checksum - unsigned long scalar, giving sum of array elements using                   ones-complement arithmetic  OPTIONAL INPUT KEYWORD:        /FROM_IEEE - If this keyword is set, then the input is assumed to be in            big endian format (e.g. an untranslated FITS array).   This keyword            only has an effect on little endian machines (e.g. Linux boxes).        /NoSAVE - if set, then the input array is not saved upon exiting.   Use            the /NoSave keyword to save time if the input array is not needed            in further computations.  METHOD:        Uses TOTAL() to sum the array into a double precision variable.  The        overflow bits beyond 2^32 are then shifted back to the least significant        bits.    Due to the limited precision of a DOUBLE variable, the summing        is done in chunks determined by MACHAR(). Adapted from FORTRAN code in       heasarc.gsfc.nasa.gov/docs/heasarc/ofwg/docs/general/checksum/node30.html        Could probably be done in a cleverer way (similar to the C       implementation) but then the array-oriented TOTAL() function could not       be used.  RESTRICTIONS:        (1) Not valid for object or pointer data types  EXAMPLE:        Find the 32 bit checksum of the array x = findgen(35)         IDL&gt; checksum32, x, s    ===&gt; s =  2920022024  FUNCTION CALLED:        HOST_TO_IEEE, IS_IEEE_BIG(), N_BYTES()  MODIFICATION HISTORY:        Written    W. Landsman          June 2001        Work correctly on little endian machines, added /FROM_IEEE and /NoSave                   W. Landsman          November 2002        Pad with zeros when array size not a multiple of 4 W.Landsman Aug 2003        Always copy to new array, somewhat slower but more robust algorithm            especially for Linux boxes   W. Landsman Sep. 2004        Sep. 2004 update not implemented correctly (sigh) W. Landsman Dec 2004        No need to byteswap 4 byte datatypes on little endian W. L. May 2009        Use /INTEGER keyword to TOTAL() function W.L. June 2009   ", "FROM_IEEENOSAVEarraychecksum", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/cic.html", "cic.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "cic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/cic.html#cic", "cic", 'routine in <a href="idlastro/cic.html">cic.pro</a>', "cic.pro", "", "cic", " NAME:        CIC   PURPOSE:        Interpolate an irregularly sampled field using Cloud in Cell method   EXPLANATION:        This function interpolates an irregularly sampled field to a        regular grid using Cloud In Cell (nearest grid point gets        weight 1-dngp, point on other side gets weight dngp, where        dngp is the distance to the nearest grid point in units of the        cell size).   CATEGORY:        Mathematical functions, Interpolation   CALLING SEQUENCE:        Result = CIC, VALUE, POSX, NX[, POSY, NY, POSZ, NZ,                      AVERAGE = average, WRAPAROUND =  wraparound,                      ISOLATED = isolated, NO_MESSAGE = no_message]   INPUTS:        VALUE: Array of sample weights (field values). For e.g. a               temperature field this would be the temperature and the               keyword AVERAGE should be set. For e.g. a density field               this could be either the particle mass (AVERAGE should               not be set) or the density (AVERAGE should be set).        POSX:  Array of X coordinates of field samples, unit indices: [0,NX&gt;.        NX:    Desired number of grid points in X-direction.   OPTIONAL INPUTS:       POSY: Array of Y coordinates of field samples, unit indices: [0,NY&gt;.       NY:   Desired number of grid points in Y-direction.       POSZ: Array of Z coordinates of field samples, unit indices: [0,NZ&gt;.       NZ:   Desired number of grid points in Z-direction.   KEYWORD PARAMETERS:        AVERAGE:    Set this keyword if the nodes contain field samples                    (e.g. a temperature field). The value at each grid                    point will then be the weighted average of all the                    samples allocated to it. If this keyword is not                    set, the value at each grid point will be the                    weighted sum of all the nodes allocated to it                    (e.g. for a density field from a distribution of                    particles). (D=0).        WRAPAROUND: Set this keyword if you want the first grid point                    to contain samples of both sides of the volume                    (see below).        ISOLATED:   Set this keyword if the data is isolated, i.e. not                    periodic. In that case total mass' is not conserved.                    This keyword cannot be used in combination with the                    keyword WRAPAROUND.        NO_MESSAGE: Suppress informational messages.   Example of default allocation of nearest grid points: n0=4, *=gridpoint.       0   1   2   3     Index of gridpoints      *   *   *   *     Grid points    |---|---|---|---|   Range allocated to gridpoints ([0.0,1.0&gt; --&gt; 0, etc.)    0   1   2   3   4   posx   Example of ngp allocation for WRAPAROUND: n0=4, *=gridpoint.     0   1   2   3         Index of gridpoints    *   *   *   *         Grid points  |---|---|---|---|--     Range allocated to gridpoints ([0.5,1.5&gt; --&gt; 1, etc.)    0   1   2   3   4=0   posx   OUTPUTS:        Prints that a CIC interpolation is being performed of x        samples to y grid points, unless NO_MESSAGE is set.   RESTRICTIONS:        Field data is assumed to be periodic with the sampled volume        the basic cell, unless ISOLATED is set.        All input arrays must have the same dimensions.        Postition coordinates should be in index units' of the        desired grid: POSX=[0,NX&gt;, etc.        Keywords ISOLATED and WRAPAROUND cannot both be set.   PROCEDURE:        Nearest grid point is determined for each sample.        CIC weights are computed for each sample.        Samples are interpolated to the grid.        Grid point values are computed (sum or average of samples).  NOTES:        Use tsc.pro for a higher-order interpolation scheme, ngp.pro for a lower        order interpolation scheme.    A standard reference for these        interpolation methods is:   R.W. Hockney and J.W. Eastwood, Computer        Simulations Using Particles (New York: McGraw-Hill, 1981).  EXAMPLE:        nx=20        ny=10        posx=randomu(s,1000)        posy=randomu(s,1000)        value=posx^2+posy^2        field=cic(value,posx*nx,nx,posy*ny,ny,/average)        surface,field,/lego   MODIFICATION HISTORY:        Written by Joop Schaye, Feb 1999.        Avoid integer overflow for large dimensions P.Riley/W.Landsman Dec. 1999  ", "AVERAGEWRAPAROUNDISOLATEDNO_MESSAGEvalueposxnxposynyposznz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cindex.html", "cindex.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cindex.pro", "", "", " NAME:        CIndex   PURPOSE:        This is a program for viewing the current colors in the        colortable with their index numbers overlayed on each color.        On 24-bit systems you must click the cursor in the graphics window        to see the colors in the current color table.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY: Graphics   CALLING SEQUENCE:  CIndex   INPUTS:   None.   INPUT KEYWORDS:    BREWER:     If this keyword is set, the BREWER colors will be loaded with the               Change Colors button. (Assuming the brewer color table file, fsc_brewer.tbl,               has been installed.   OUTPUTS:  None   OPTIONAL OUTPUTS:  None   OUTPUT KEYWORDS:     NOTIFYID:   A two-element array containing the Change Colors button widget                identifier and the identifier of the top-level base widget. This                array is meant to be sent to an XCOLORS routine via its NOTIFYID                keyword. This will allow instant updating of the CINDEX interface.   COMMON BLOCKS:  None   SIDE EFFECTS:   None   RESTRICTIONS:   Reqires XCOLORS and cgImage from the Coyote Library:                       http://www.idlcoyote.com/programs/xcolors.pro                      http://www.idlcoyote.com/programs/cgImage.pro   PROCEDURE:    Draws a 31x25 set of small rectangles in 256 different colors.   Writes the color index number on top of each rectangle.   MODIFICATION HISTORY:  Written by David Fanning, May 1995    Widgetized and made it work in 24-bit color. Colors are      updated by clicking in window. 22 Oct 98. DWF   Replace POLYFILL with TV command to avoid underflow error in      Z-buffer. 8 March 99. DWF   Fixed a problem with 24-bit devices with color decomposition ON. 15 Feb 2000. DWF.   Added the NOTIFYID keyword, 15 Dec 2005. DWF.   Added BREWER keyword, 19 May 2008. DWF.   Replaced TV commands with cgImage, 12 June 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cindex.html#CIndex_Colors", "CIndex_Colors", 'routine in <a href="coyote/cindex.html">cindex.pro</a>', "cindex.pro", "", "CIndex_Colors", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cindex.html#CIndex_Event", "CIndex_Event", 'routine in <a href="coyote/cindex.html">cindex.pro</a>', "cindex.pro", "", "CIndex_Event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cindex.html#CIndex", "CIndex", 'routine in <a href="coyote/cindex.html">cindex.pro</a>', "cindex.pro", "", "CIndex", "", "NOTIFYIDBREWER", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/circscancrop.html", "circscancrop.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "circscancrop.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/circscancrop.html#circscancrop", "circscancrop", 'routine in <a href="code_snapshots/obsolete_code/circscancrop.html">circscancrop.pro</a>', "circscancrop.pro", "", "circscancrop", "       Quickly finds the center of the main sun, scans in a circle, and locates the two secondary        suns' centers. Crops either of the secondary suns based on what region specified.   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Print the elapsed time  mainxpos           X position of 100% brightness sun to scan in a circle around  mainypos           Y position of 100% brightness sun to scan in a circle around  image           Cropped area  thresh           Threshold used in finding center  xpos           Computed X position of center  ypos           Computed Y position of center  xoffset           X offset of cropped region's bottom left corner  yoffset           Y offset of cropped region's bottom left corner   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/cirrange.html", "cirrange.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "cirrange.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/cirrange.html#cirrange", "cirrange", 'routine in <a href="idlastro/cirrange.html">cirrange.pro</a>', "cirrange.pro", "", "cirrange", " NAME:        CIRRANGE  PURPOSE:        To force an angle into the range 0 &lt;= ang &lt; 360.  CALLING SEQUENCE:        CIRRANGE, ang, [/RADIANS]   INPUTS/OUTPUT:        ang     - The angle to modify, in degrees.  This parameter is                  changed by this procedure.  Can be a scalar or vector.                  The type of ANG is always converted to double precision                  on output.   OPTIONAL INPUT KEYWORDS:        /RADIANS - If present and non-zero, the angle is specified in                  radians rather than degrees.  It is forced into the range                  0 &lt;= ang &lt; 2 PI.  PROCEDURE:        The angle is transformed between -360 and 360 using the MOD operator.        Negative values (if any) are then transformed between 0 and 360  MODIFICATION HISTORY:        Written by Michael R. Greason, Hughes STX, 10 February 1994.        Get rid of WHILE loop, W. Landsman, Hughes STX, May 1996        Converted to IDL V5.0   W. Landsman   September 1997  ", "RADIANSang", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/cleanplot.html", "cleanplot.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "cleanplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/cleanplot.html#CleanPlot", "CleanPlot", 'routine in <a href="idlastro/cleanplot.html">cleanplot.pro</a>', "cleanplot.pro", "", "CleanPlot", " NAME:        CLEANPLOT  PURPOSE:        Reset all plotting system variables (!P,!X,!Y,!Z) to their default values  EXPLANATION:        Reset all system variables (!P,!X,!Y,!Z) which are set by the user        and which affect plotting to their default values.   CALLING SEQUENCE:        Cleanplot, [ /Silent, /ShowOnly]   INPUTS:        None   OPTIONAL KEYWORD INPUT:        /SHOWONLY - If set, then CLEANPLOT will display the plotting system                  variables with nondefault values, but it will not reset them.         /SILENT - If set, then CLEANPLOT will not display a message giving the                  the system variables tags being reset.    One cannot set                   both /SILENT and /SHOWONLY  OUTPUTS:        None   SIDE EFFECTS:        The system variables that concern plotting are reset to their default        values.  A message is output for each variable changed.        The !P.CLIP and CRANGE, S, WINDOW, and REGION fields of the        !X, !Y, and !Z system variables are not checked since these are        set by the graphics device and not by the user.   PROCEDURE:        This does NOT reset the plotting device.        This does not change any system variables that don't control plotting.   RESTRICTIONS:        If user default values for !P, !X, !Y and !Z are different from        the defaults adopted below, user should change P_old etc accordingly   MODIFICATION HISTORY:        Written IDL Version 2.3.0  W. Landsman & K. Venkatakrishna May '92        Handle new system variables in V3.0.0     W. Landsman   Dec 92        Assume user has at least V3.0.0           W. Landsman   August 95        V5.0 has 60 instead of 30 TICKV values    W. Landsman   Sep. 97        Change !D.N_COLORS to !D.TABLE_SIZE for 24 bit displays                W. Landsman  April 1998        Added silent keyword to supress output & modified X_old to        handle the new !X and !Y tags in IDL 5.4   S. Penton     July 2000        Test for visual depth if &gt; V5.1   W. Landsman     July 2000        Macs can report a visual depth of 32  W. Landsman  March 2001        Call device,get_visual_depth only for device which allow it                 W. Landsman  June 2001        Default !P.color is 16777215 for 16 bit systems                        W. Landsman/M. Hadfield   November 2001        Added ShowOnly keyword   W. Landsman      April 2002        Use V6.0 notation W. Landsman April 2011   ", "silentShowOnly", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/clipboard.html", "clipboard.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "clipboard.pro", "", "", " NAME:        CLIPBOARD   PURPOSE:         The purpose of this program is to copy the contents of a        graphics window to the clipboard for subsequent pasting into        applications such as Photoshop or Powerpoint.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:        Graphics.   CALLING SEQUENCE:        CLIPBOARD, window_index   OPTIONAL INPUTS:         window_index:    The window index number of the graphics window to                         copy. If absent, the current graphics window is used                         by default.   KEYWORDS:         All COLOR_QUAN keywords are allowed. In particular, if you are        taking snapshots of line plots with few colors in them, you may        get better results by calling the program with the CUBE=6 keyword        set. Otherwise, white colors can sometimes be a bit gray.   OUTPUTS:        None.   COMMON BLOCKS:        None.   DEPENDENCIES:         Uses the IDLgrClipboard object introduced in IDL 5.2(?).   PROCEDURE:         Copies the window contents to a clipboard object.   EXAMPLE:          IDL&gt; Window         IDL&gt; Plot, Findgen(11)         IDL&gt; CLIPBOARD   RESTRICTIONS:         May not work for all applications. Applications tested successfully        include: Framemaker, Powerpoint, Photoshop, Excel, Microsoft Word.        Converts 24-bit images to 2D images with color tables.   MODIFICATION HISTORY:         Written by: David W. Fanning, 24 October 2001.        Added _EXTRA keyword to pass COLOR_QUAN keywords along. 28 Oct 2002. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/clipboard.html#Clipboard", "Clipboard", 'routine in <a href="coyote/clipboard.html">clipboard.pro</a>', "clipboard.pro", "", "Clipboard", "", "_ExtrawindowIndex", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/clipscl.html", "clipscl.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "clipscl.pro", "", "", " NAME:        CLIPSCL   PURPOSE:         This is a utility routine to perform linear scaling (similar to BYTSCL)        on image arrays. If differs from BYTSCL only in that a user-specified        percentage of pixels can be clipped from the image histogram, prior to        scaling. By default, two percent of the pixels are clipped. Clipping        occurs at both ends of the image histogram.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         scaledImage = CLIPSCL(image, clipPercent)   ARGUMENTS:         image:         The image to be scaled. Written for 2D images, but arrays                       of any size are treated alike.         clipPercent:   The percent of image clipping. Optional argument is set                       to 2 by default. Must be value between 0 and 49. Clipping                       occurs from both ends of image histogram, so a clip of 2                       linearly scales approximately 96% of the image histogram.                       Clipping percents are approximations only, and depend                       entirely on the distribution of pixels in the image. For                       interactive scaling, see cgStretch.   INPUT KEYWORDS:         NEGATIVE:      If set, the  negative  of the result is returned.         OMAX:          The output image is scaled between OMIN and OMAX. The                       default value is 255.         OMIN:          The output image is scaled between OMIN and OMAX. The                       default value is 0.  OUTPUT KEYWORDS:         THRESHOLD:     A two-element array containing the image thresholds for clipping.   RETURN VALUE:         scaledImage:   The output, scaled into the range OMIN to OMAX. A byte array.   COMMON BLOCKS:        None.   EXAMPLES:         LoadCT, 0                                            ; Gray-scale colors.        image = cgDemoData(22)                                 ; Load image.        TV, ClipScl(image, 4)   RESTRICTIONS:       Requires cgScaleVector from the Coyote Library:          http://www.idlcoyote.com/programs/cgScaleVector.pro   MODIFICATION HISTORY:         Written by:  David W. Fanning, 6 September 2007.        Not sure what this program was doing, but not what I thought. I've reworked           the algorithm to scale the data appropriately. 25 Oct 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/clipscl.html#ClipScl", "ClipScl", 'routine in <a href="coyote/clipscl.html">clipscl.pro</a>', "clipscl.pro", "", "ClipScl", "", "NEGATIVEOMAXOMINTHRESHOLDimageclip", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/closest.html", "closest.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "closest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/closest.html#closest", "closest", 'routine in <a href="code_snapshots/obsolete_code/closest.html">closest.pro</a>', "closest.pro", "", "closest", " NAME:    CLOSEST   PURPOSE:    Find the element of ARRAY that is the closest in value to VALUE   CATEGORY:    utilities   CALLING SEQUENCE:    index = CLOSEST(array,value)   INPUTS:    ARRAY = the array to search    VALUE = the value we want to find the closest approach to   OUTPUTS:    INDEX = the index into ARRAY which is the element closest to VALUE     OPTIONAL PARAMETERS:    none   COMMON BLOCKS:    none.  SIDE EFFECTS:    none.  MODIFICATION HISTORY:    Written by: Trevor Harris, Physics Dept., University of Adelaide,        July, 1990.   ", "arrayvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/cntrd.html", "cntrd.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "cntrd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/cntrd.html#cntrd", "cntrd", 'routine in <a href="idlastro/cntrd.html">cntrd.pro</a>', "cntrd.pro", "", "cntrd", "  NAME:        CNTRD   PURPOSE:        Compute the centroid  of a star using a derivative search  EXPLANATION:        CNTRD uses an early DAOPHOT  FIND  centroid algorithm by locating the        position where the X and Y derivatives go to zero.   This is usually a        more  robust   determination than a  center of mass  or fitting a 2d        Gaussian  if the wings in one direction are affected by the presence        of a neighboring star.    CALLING SEQUENCE:        CNTRD, img, x, y, xcen, ycen, [ fwhm , /KEEPCENTER, /SILENT, /DEBUG                                        EXTENDBOX = ]    INPUTS:        IMG - Two dimensional image array        X,Y - Scalar or vector integers giving approximate integer stellar              center    OPTIONAL INPUT:        FWHM - floating scalar; Centroid is computed using a box of half                width equal to 1.5 sigma = 0.637* FWHM.  CNTRD will prompt                for FWHM if not supplied    OUTPUTS:        XCEN - the computed X centroid position, same number of points as X        YCEN - computed Y centroid position, same number of points as Y,               floating point         Values for XCEN and YCEN will not be computed if the computed        centroid falls outside of the box, or if the computed derivatives        are non-decreasing.   If the centroid cannot be computed, then a        message is displayed and XCEN and YCEN are set to -1.    OPTIONAL OUTPUT KEYWORDS:        /SILENT - Normally CNTRD prints an error message if it is unable                to compute the centroid.   Set /SILENT to suppress this.        /DEBUG - If this keyword is set, then CNTRD will display the subarray                it is using to compute the centroid.        EXTENDBOX = {non-negative positive integer}.   CNTRD searches a box with               a half width equal to 1.5 sigma  = 0.637* FWHM to find the               maximum pixel.    To search a larger area, set EXTENDBOX to               the number of pixels to enlarge the half-width of the box.               Default is 0; prior to June 2004, the default was EXTENDBOX= 3        /KeepCenter = By default, CNTRD finds the maximum pixel in a box               centered on the input X,Y coordinates, and then extracts a new               box about this maximum pixel.   Set the /KeepCenter keyword               to skip then step of finding the maximum pixel, and instead use               a box centered on the input X,Y coordinates.   PROCEDURE:        Maximum pixel within distance from input pixel X, Y  determined        from FHWM is found and used as the center of a square, within        which the centroid is computed as the value (XCEN,YCEN) at which        the derivatives of the partial sums of the input image over (y,x)        with respect to (x,y) = 0.    In order to minimize contamination from        neighboring stars stars, a weighting factor W is defined as unity in        center, 0.5 at end, and linear in between    RESTRICTIONS:        (1) Does not recognize (bad) pixels.   Use the procedure GCNTRD.PRO            in this situation.        (2) DAOPHOT now uses a newer algorithm (implemented in GCNTRD.PRO) in            which centroids are determined by fitting 1-d Gaussians to the            marginal distributions in the X and Y directions.        (3) The default behavior of CNTRD changed in June 2004 (from EXTENDBOX=3            to EXTENDBOX = 0).        (4) Stone (1989, AJ, 97, 1227) concludes that the derivative search            algorithm in CNTRD is not as effective (though faster) as a             Gaussian fit (used in GCNTRD.PRO).   MODIFICATION HISTORY:        Written 2/25/86, by J. K. Hill, S.A.S.C., following        algorithm used by P. Stetson in DAOPHOT.        Allowed input vectors        G. Hennessy       April,  1992        Fixed to prevent wrong answer if floating pt. X & Y supplied                W. Landsman        March, 1993        Convert byte, integer subimages to float  W. Landsman  May 1995        Converted to IDL V5.0   W. Landsman   September 1997        Better checking of edge of frame David Hogg October 2000        Avoid integer wraparound for unsigned arrays W.Landsman January 2001        Handle case where more than 1 pixel has maximum value W.L. July 2002        Added /KEEPCENTER, EXTENDBOX (with default = 0) keywords WL June 2004        Some errrors were returning X,Y = NaN rather than -1,-1  WL Aug 2010  ", "SILENTDEBUGEXTENDBOXKeepCenterimgxyxcenycenfwhm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/co_aberration.html", "co_aberration.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "co_aberration.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/co_aberration.html#co_aberration", "co_aberration", 'routine in <a href="idlastro/co_aberration.html">co_aberration.pro</a>', "co_aberration.pro", "", "co_aberration", "  NAME:      CO_ABERRATION  PURPOSE:      Calculate changes to Ra and Dec due to the effect of annual aberration  EXPLANATION:       as described in Meeus, Chap 23.  CALLING SEQUENCE:       co_aberration, jd, ra, dec, d_ra, d_dec, [EPS = ]  INPUTS        jd      : Julian Date [scalar or vector]        ra, dec : Arrays (or scalars) of the ra  and dec's in degrees    Note: if jd is a vector, then ra and dec must either be scalars, or                 vectors of the same length.   OUTPUTS        d_ra, d_dec: the corrections to ra and dec due to aberration in                     arcseconds.  (These values can be added to the true RA                     and dec to get the apparent position).   Note that d_ra                      is *not* multiplied by cos(dec), so that                      apparent_ra = ra + d_ra/3600.  OPTIONAL INPUT KEYWORD:        eps : set this to the true obliquity of the ecliptic (in radians), or          it will be set for you if you don't know it (in that case, set it to                  an empty variable).  EXAMPLE:    Compute the change in RA and Dec of Theta Persei (RA = 2h46m,11.331s, Dec =    49d20',54.54 ) due to aberration on 2028 Nov 13.19 TD        IDL&gt; jdcnv,2028,11,13,.19*24,jd      ;Get Julian date       IDL&gt; co_aberration,jd,ten(2,46,11.331)*15,ten(49,20,54.54),d_ra,d_dec        ==&gt; d_ra = 30.045  (=2.003s)    d_dec = 6.697   NOTES:   These formula are from Meeus, Chapters 23.  Accuracy is much better than 1    arcsecond.     The maximum deviation due to annual aberration is 20.49  and occurs when the    Earth velocity is perpendicular to the direction of the star.   REVISION HISTORY:    Written, June 2002,      Chris O'Dell, U. of Wisconsin    Fix error with vector input   W. Landsman   June 2009    June 2009 update fixed case where JD was scalar but RA,Dec were vectors, but      broke the case when both JD and RA,Dec were vectors Aug 2012 W. Landsman  ", "epsjdradecd_rad_dec", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/co_nutate.html", "co_nutate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "co_nutate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/co_nutate.html#co_nutate", "co_nutate", 'routine in <a href="idlastro/co_nutate.html">co_nutate.pro</a>', "co_nutate.pro", "", "co_nutate", "  NAME:      CO_NUTATE   PURPOSE:      Calculate changes in RA and Dec due to nutation of the Earth's rotation  EXPLANATION:      Calculates necessary changes to ra and dec due to      the nutation of the Earth's rotation axis, as described in Meeus, Chap 23.      Uses formulae from Astronomical Almanac, 1984, and does the calculations      in equatorial rectangular coordinates to avoid singularities at the      celestial poles.   CALLING SEQUENCE:      CO_NUTATE, jd, ra, dec, d_ra, d_dec, [EPS=, D_PSI =, D_EPS = ]  INPUTS     JD: Julian Date [scalar or vector]     RA, DEC : Arrays (or scalars) of the ra and dec's of interest     Note: if jd is a vector, ra and dec MUST be vectors of the same length.   OUTPUTS:     d_ra, d_dec: the corrections to ra and dec due to nutation (must then                                 be added to ra and dec to get corrected values).  OPTIONAL OUTPUT KEYWORDS:     EPS: set this to a named variable that will contain the obliquity of the              ecliptic.     D_PSI: set this to a named variable that will contain the nutation in the            longitude of the ecliptic     D_EPS: set this to a named variable that will contain the nutation in the                        obliquity of the ecliptic  EXAMPLE:     (1) Example 23a in Meeus: On 2028 Nov 13.19 TD the mean position of Theta         Persei is 2h 46m 11.331s 49d 20' 54.54 .    Determine the shift in         position due to the Earth's nutation.          IDL&gt; jd = JULDAY(11,13,2028,.19*24)       ;Get Julian date         IDL&gt; CO_NUTATE, jd,ten(2,46,11.331)*15.,ten(49,20,54.54),d_ra,d_dec                ====&gt; d_ra = 15.843    d_dec = 6.217   PROCEDURES USED:     NUTATE  REVISION HISTORY:     Written  Chris O'Dell, 2002     Vector call to NUTATE   W. Landsman   June 2002  ", "epsd_psid_epsjdradecd_rad_dec", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/co_refract.html", "co_refract.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "co_refract.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/co_refract.html#co_refract_forward", "co_refract_forward", 'routine in <a href="idlastro/co_refract.html">co_refract.pro</a>', "co_refract.pro", "", "co_refract_forward", " NAME:    CO_REFRACT()   PURPOSE:    Calculate correction to altitude due to atmospheric refraction.   DESCRIPTION:    CO_REFRACT can calculate both apparent altitude from observed altitude and    vice-versa.   CALLING SEQUENCE:    new_alt  = CO_REFRACT(old_alt, [ ALTITUDE= , PRESSURE= , $                                   TEMPERATURE= , /TO_OBSERVED , EPSILON= ])   INPUT:    old_alt - Observed (apparent) altitude, in DEGREES.  (apparent if keyword              /TO_OBSERVED set).    May be scalar or vector.   OUTPUT:      Function returns apparent (observed) altitude, in DEGREES. (observed if          keyword /TO_OBSERVED set).    Will be of same type as input          altitude(s).   OPTIONAL KEYWORD INPUTS:       ALTITUDE :  The height of the observing location, in meters.  This is              only used to determine an approximate temperature and pressure,              if these are not specified separately. [default=0, i.e. sea level]       PRESSURE :  The pressure at the observing location, in millibars.       TEMPERATURE:    The temperature at the observing location, in Kelvin.       EPSILON:  When keyword /TO_OBSERVED has been set, this is the accuracy                to  obtain via the iteration, in arcseconds [default = 0.25                 arcseconds].       /TO_OBSERVED:  Set this keyword to go from Apparent-&gt;Observed altitude,                  using the iterative technique.         Note, if altitude is set, but temperature or pressure are not, the        program will make an intelligent guess for the temperature and pressure.   DESCRIPTION:     Because the index of refraction of air is not precisely 1.0, the atmosphere    bends all incoming light, making a star or other celestial object appear at    a slightly different altitude (or elevation) than it really is.  It is    important to understand the following definitions:     Observed Altitude:  The altitude that a star is SEEN to BE, with a telescope.                        This is where it appears in the sky.  This is always                        GREATER than the apparent altitude.     Apparent Altitude:  The altitude that a star would be at, if *there were no                      atmosphere* (sometimes called  true  altitude). This is                      usually calculated from an object's celestial coordinates.                      Apparent altitude is always LOWER than the observed                      altitude.     Thus, for example, the Sun's apparent altitude when you see it right on the    horizon is actually -34 arcminutes.     This program uses couple simple formulae to estimate the effect for most    optical and radio wavelengths.  Typically, you know your observed altitude    (from an observation), and want the apparent altitude.  To go the other way,    this program uses an iterative approach.   EXAMPLE:     The lower limb of the Sun is observed to have altitude of 0d 30'.     Calculate the the true (=apparent) altitude of the Sun's lower limb using     mean  conditions of air pressure and temperature      IDL&gt; print, co_refract(0.5)     ===&gt;  0.025degrees (1.55')  WAVELENGTH DEPENDENCE:     This correction is 0 at zenith, about 1 arcminute at 45 degrees, and 34     arcminutes at the horizon FOR OPTICAL WAVELENGTHS.  The correction is     NON-NEGLIGIBLE at all wavelengths, but is not very easily calculable.     These formulae assume a wavelength of 550 nm, and will be accurate to     about 4 arcseconds for all visible wavelengths, for elevations of 10     degrees and higher.    Amazingly, they are also ACCURATE FOR RADIO     FREQUENCIES LESS THAN ~ 100 GHz.      It is important to understand that these formulae really can't do better     than about 30 arcseconds of accuracy very close to the horizon, as     variable atmospheric effects become very important.   REFERENCES:     1.  Meeus, Astronomical Algorithms, Chapter 15.     2.  Explanatory Supplement to the Astronomical Almanac, 1992.     3.  Methods of Experimental Physics, Vol 12 Part B, Astrophysics,         Radio Telescopes, Chapter 2.5,  Refraction Effects in the Neutral         Atmosphere , by R.K. Crane.   DEPENDENCIES:     CO_REFRACT_FORWARD (contained in this file and automatically compiled).   AUTHOR:    Chris O'Dell        Univ. of Wisconsin-Madison    Observational Cosmology Laboratory    Email: odell@cmb.physics.wisc.edu   REVISION HISTORY:     version 1 (May 31, 2002)     Update iteration formula,   W. Landsman    June 2002     Corrected slight bug associated with scalar vs. vector temperature and                pressure inputs. 6/10/2002     Fixed problem with vector input when /TO_OBSERVED set W. Landsman Dec 2005     Allow arrays with more than 32767 elements W.Landsman/C.Dickinson Feb 2010  ", "PTa", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/co_refract.html#co_refract", "co_refract", 'routine in <a href="idlastro/co_refract.html">co_refract.pro</a>', "co_refract.pro", "", "co_refract", "", "altitudepressuretemperatureTo_observedepsilona", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/color24.html", "color24.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "color24.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/color24.html#COLOR24", "COLOR24", 'routine in <a href="idlastro/coyote/color24.html">color24.pro</a>', "color24.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "COLOR24", " The purpose of this function is to convert a RGB color triple  into the equivalent 24-bit long integer. The 24-bit integer  can be decomposed into the appropriate color by interpreting  the lowest 8 bits as red, the middle 8 bits as green, and the  highest 8 bits as blue. This routine was written to be used with  device-independent color programs like cgColor.   ", "color       A three-element column or row array representing a color triple. Or an        N-by-three element array of color triples. The values of the elements        must be between 0 and 255.   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written by:  David Fanning, 3 February 96.</span> <span class= code-output >  Completely revised the algorithm to accept color arrays. 19 October 2000. DWF.</span>       Copyright (c) 1996-2012, Fanning Software Consulting, Inc.      To convert the color triple for the color YELLOW, (255, 255, 0), to the     hexadecimal value '00FFFF'x or the decimal number 65535, type: <span class= code-output >  color = COLOR24([255, 255, 0])</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/colorbuttonbitmap.html", "colorbuttonbitmap.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "colorbuttonbitmap.pro", "", "", " NAME:        ColorButtonBitmap   PURPOSE:         The purpose of this program is to create a 24-bit bitmap that can be used to        create a colored widget button.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Widget Programming   CALLING SEQUENCE:         bitmap = ColorButtonBitmap(theText)        button = Widget_Button(tlb, Value=bitmap)   REQUIRED INPUTS:         theText - The text you wish to have on the button.   OUTPUTS:         bitmap - A 3xMxN byte array, representing a 24-bit image that is used                 as a button value.   OPTIONAL KEYWORDS:         BGCOLOR - The name of the background color. For example, 'Yellow', 'Tan', etc.                  The name must be compatible with names appropriate for cgColor.         FGCOLOR - The name of the foreground color. For example, 'Navy', 'Black', etc.                  The name must be compatible with names appropriate for cgColor.   DEPENDENCIES:         Reqires cgColor from the Coyote Library:                       http://www.idlcoyote.com/programs/cgColor.pro   EXAMPLE:         tlb = Widget_Base(/Row, /Exclusive)        button1 = Widget_Button(tlb, Value=ColorButtonBitmap('Button 1')) ; Normal button.        button2 = Widget_Button(tlb, Value=ColorButtonBitmap('Button 2', FGCOLOR='YELLOW', BGCOLOR='NAVY'))        button3 = Widget_Button(tlb, Value=ColorButtonBitmap('Button 3', BGCOLOR='YELLOW', FGCOLOR='NAVY'))        Widget_Control, tlb, /Realize   MODIFICATION HISTORY:         Written by David Fanning, May 25, 2007 based on code named BitmapForButtonText supplied to the IDL        newsgroup by Dick Jackson: http://www.idlcoyote.com/tip_examples/bitmapforbuttontext.pro.        Fixed a problem with foreground and background colors that caused them to work correctly only            when color decomposition is on--as it should be :-). 6 May 2009.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/colorbuttonbitmap.html#ColorButtonBitmap", "ColorButtonBitmap", 'routine in <a href="coyote/colorbuttonbitmap.html">colorbuttonbitmap.pro</a>', "colorbuttonbitmap.pro", "", "ColorButtonBitmap", "", "BGColorFGColortheText", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/colorsareidentical.html", "colorsareidentical.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "colorsareidentical.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/colorsareidentical.html#ColorsAreIdentical", "ColorsAreIdentical", 'routine in <a href="idlastro/coyote/colorsareidentical.html">colorsareidentical.pro</a>', "colorsareidentical.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "ColorsAreIdentical", "   Returns a 1 if the two input colors refer to the same color, otherwise returns a 0.   ", "color_1         The first color to compare for  equality .  color_2         The second color to compare for  equality .   ", "Graphics Utility", "     Change History: <span class= code-output >  Written, 24 December 2010. DWF.</span> <span class= code-output >  Fixed a typo when first color is INTEGER and second color is STRING. 3 Jan 2011. DWF.</span> <span class= code-output >  Added error handling for out of bounds color values. 25 May 2011. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.      Used to compare if two different colors are the same color:   <span class= code-prompt >IDL&gt;</span> Print, ColorsAreIdentical('white', cgColor('white'))   <span class= code-prompt >IDL&gt;</span> Print, ColorsAreIdentical(252, !P.Color)   <span class= code-prompt >IDL&gt;</span> Print, ColorsAreIdentical('white', '255')  ");
  
  

libdata[libdataItem++] = new Array("coyote/colorsareidentical.html", "colorsareidentical.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "colorsareidentical.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/colorsareidentical.html#ColorsAreIdentical", "ColorsAreIdentical", 'routine in <a href="coyote/colorsareidentical.html">colorsareidentical.pro</a>', "colorsareidentical.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "ColorsAreIdentical", "   Returns a 1 if the two input colors refer to the same color, otherwise returns a 0.   ", "color_1         The first color to compare for  equality .  color_2         The second color to compare for  equality .   ", "Graphics Utility", "     Change History: <span class= code-output >  Written, 24 December 2010. DWF.</span> <span class= code-output >  Fixed a typo when first color is INTEGER and second color is STRING. 3 Jan 2011. DWF.</span> <span class= code-output >  Added error handling for out of bounds color values. 25 May 2011. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.      Used to compare if two different colors are the same color:   <span class= code-prompt >IDL&gt;</span> Print, ColorsAreIdentical('white', cgColor('white'))   <span class= code-prompt >IDL&gt;</span> Print, ColorsAreIdentical(252, !P.Color)   <span class= code-prompt >IDL&gt;</span> Print, ColorsAreIdentical('white', '255')  ");
  
  

libdata[libdataItem++] = new Array("idlastro/compare_struct.html", "compare_struct.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "compare_struct.pro", "", "", " NAME:        COMPARE_STRUCT  PURPOSE:        Compare all matching tag names and return differences   EXPLANATION:        Compare all matching Tags names (except for  except_Tags )        between two structure arrays (may have different struct.definitions),        and return a structured List of fields found different.         The Exelis contrib library has a faster but less powerful procedure        struct_equal.pro, see        http://www.exelisvis.com/Default.aspx?tabid=1540&id=1175   CALLING SEQUENCE:        diff_List = compare_struct( struct_A, struct_B [ EXCEPT=, /BRIEF,                                     /FULL, /NaN, /RECUR_A, /RECUR_B )  INPUTS:        struct_A, struct_B : the two structure arrays to compare.        Struct_Name : for internal recursion use only.  OPTIONAL INPUT KEYWORDS:                EXCEPT = string array of Tag names to ignore (NOT to compare).                /BRIEF = number of differences found for each matching field                                                of two structures is printed.                /FULL = option to print even if zero differences found.                /NaN = if set, then tag values are considered equal if they                       are both set to NaN                /RECUR_A = option to search for Tag names                                in sub-structures of struct_A,                                and then call compare_struct recursively                                for those nested sub-structures.                /RECUR_B = search for sub-structures of struct_B,                                and then call compare_struct recursively                                for those nested sub-structures.        Note:                compare_struct is automatically called recursively                for those nested sub-structures in both struct_A and struct_B                (otherwise cannot take difference)  OUTPUT:        Returns a structure array describing differences found.        which can be examined using print,diff_List or help,/st,diff_List.        The tags are        TAG_NUM_A - the tag number in structure A        TAG_NUM_B - the tag number in structure B        FIELD - the tag name        NDIFF - number of differences (always 1 for a scalar tag).  PROCEDURE:        Match Tag names and then use where function on tags.  EXAMPLE:        Find the tags in the !X system variable which are changed after a        simple plot.        IDL&gt; x = !X              ;Save original values        IDL&gt; plot, indgen(25)    ;Make a simple plot        IDL&gt; help,/str,compare_struct(x,!X)    ;See how structure has changed              and one will see that the tags  !X.crange and !X.S are changed             by the plot.  MODIFICATION HISTORY:        written 1990 Frank Varosi STX @ NASA/GSFC (using copy_struct)        modif Aug.90 by F.V. to check and compare same # of elements only.        Added /NaN keyword W. Landsman  March 2004        Don't test string for NaN values W. Landsman March 2008  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/compare_struct.html#compare_struct", "compare_struct", 'routine in <a href="idlastro/compare_struct.html">compare_struct.pro</a>', "compare_struct.pro", "", "compare_struct", "", "EXCEPTFULLBRIEFNaNRECUR_ARECUR_Bstruct_Astruct_BStruct_Name", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/comparemethods.html", "comparemethods.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "comparemethods.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/comparemethods.html#comparemethods", "comparemethods", 'routine in <a href="code_snapshots/obsolete_code/comparemethods.html">comparemethods.pro</a>', "comparemethods.pro", "", "comparemethods", "       Compare each of our 3 methods to see how different they really are   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/concat_dir.html", "concat_dir.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "concat_dir.pro", "", "", " NAME:        CONCAT_DIR()   PURPOSE:        To concatenate directory and file names for current OS.  EXPLANATION:        The given file name is appended to the given directory name with the        format appropriate to the current operating system.   CALLING SEQUENCE:        result = concat_dir( directory, file)   INPUTS:        directory  - the directory path (string)        file       - the basic file name and extension (string)                                    can be an array of filenames.   OUTPUTS:        The function returns the concatenated string.  If the file input        is a string array then the output will be a string array also.   EXAMPLES:        IDL&gt; pixfile = concat_dir('$DIR_GIS_MODEL','pixels.dat')         IDL&gt; file = ['f1.dat','f2.dat','f3.dat']        IDL&gt; dir = '$DIR_NIS_CAL'        IDL&gt;   RESTRICTIONS:         The version of CONCAT_DIR available at        http://sohowww.nascom.nasa.gov/solarsoft/gen/idl/system/concat_dir.pro        includes (mostly) additional VMS-specific keywords.   CATEGORY         Utilities, Strings   REVISION HISTORY:        Prev Hist. : Yohkoh routine by M. Morrison        Written     : CDS version by C D Pike, RAL, 19/3/93        Version     : Version 1  19/3/93        Documentation modified Nov-94   W. Landsman        Add V4.0 support for Windows    W. Landsman   Aug 95        Converted to IDL V5.0   W. Landsman   September 1997        Changed loops to long integer   W. Landsman   December 1998        Added Mac support, translate Windows environment variables,        & treat case where dirname ends in '/' W. Landsman  Feb. 2000        Assume since V5.5, remove VMS support W. Landsman  Sep. 2006  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/concat_dir.html#concat_dir", "concat_dir", 'routine in <a href="idlastro/concat_dir.html">concat_dir.pro</a>', "concat_dir.pro", "", "concat_dir", "", "dirnamefilnam", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/cons_dec.html", "cons_dec.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "cons_dec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/cons_dec.html#CONS_DEC", "CONS_DEC", 'routine in <a href="idlastro/cons_dec.html">cons_dec.pro</a>', "cons_dec.pro", "", "CONS_DEC", " NAME:        CONS_DEC  PURPOSE:        Obtain the X and Y coordinates of a line of constant declination  EXPLANATION:        Returns a set of Y pixels values, given an image with astrometry, and             either        (1)  A set of X pixel values, and a scalar declination value, or        (2)  A set of declination values, and a scalar X value         Form (1) can be used to find the (X,Y) values of a line of constant        declination.  Form (2) can be used to find the Y positions of a set        declinations, along a line of constant X.   CALLING SEQUENCE:        Y = CONS_DEC( DEC, X, ASTR, [ ALPHA ])   INPUTS:        DEC - Declination value(s) in DEGREES (-!PI/2 &lt; DEC &lt; !PI/2).                If X is a vector, then DEC must be a scalar.        X -   Specified X pixel value(s) for line of constant declination                If DEC is a vector, then X must be a scalar.        ASTR - Astrometry structure, as extracted from a FITS header by the                procedure EXTAST  OUTPUT:        Y   - Computed set of Y pixel values.  The number of Y values is the                same as either DEC or X, whichever is greater.   OPTIONAL OUTPUT:        ALPHA - the right ascensions (DEGREES) associated with the (X,Y) points   RESTRICTIONS:        Implemented only for the TANgent, SIN and CAR projections   NOTES:        The algorithm (and notation) is based on AIPS Memo 27 by Eric Greisen,        with modifications for a coordinate description (CD) matrix as        described in Paper II of Greisen & Calabretta (2002, A&A, 395, 1077).        These documents are available from        http://www.cv.nrao.edu/fits/documents/wcs/wcs.html   REVISION HISTORY:        Written, Wayne Landsman  STX Co.                          April 1988        Use new astrometry structure,     W. Landsman    HSTX     Jan. 1994        Use CD matrix, add SIN projection   W. Landsman  HSTX     April, 1996        Converted to IDL V5.0   W. Landsman   September 1997        Fix case where DEC is scalar, X is vector   W. Landsman RITSS Feb. 2000        Fix possible sign error introduced Jan. 2000   W. Landsman  May 2000        Work for the CARee' projection W. Landsman   May 2003  ", "DECXASTRALPHA", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/cons_ra.html", "cons_ra.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "cons_ra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/cons_ra.html#CONS_RA", "CONS_RA", 'routine in <a href="idlastro/cons_ra.html">cons_ra.pro</a>', "cons_ra.pro", "", "CONS_RA", " NAME:        CONS_RA  PURPOSE:        Obtain the X and Y coordinates of a line of constant right ascension  EXPLANATION:        Return a set of X pixel values given an image with astrometry,        and either        (1) a set of Y pixel values, and a scalar right ascension (or            longitude), or        (2) a set of right ascension values, and a scalar Y value.         In usage (1), CONS_RA can be used to determine the (X,Y) values        of a line of constant right ascension.  In usage (2), CONS_RA can        used to determine the X positions of specified RA values, along a        line of constant Y.   CALLING SEQUENCE:        X = CONS_RA( RA, Y, ASTR, [ DEC] )   INPUTS:        RA -  Right Ascension value in DEGREES (0 &lt; RA &lt; 360.).  If Y is a                vector, then RA must be a scalar        Y -   Specified Y pixel value(s) for line of constant right ascension                If RA is a vector, then Y must be a scalar        ASTR - Astrometry structure as extracted from a FITS header by the                procedure EXTAST  OUTPUTS        X   - Computed set of X pixel values.   The number of elements of X                is the maximum of the number of elements of RA and Y.  OPTIONAL OUTPUT:        DEC - Computed set of declinations (in DEGREES) for X,Y, coordinates  NOTES:        The algorithm (and notation) is based on AIPS Memo 27 by Eric Greisen,        with modifications for a coordinate description (CD) matrix as        described in Paper II of Calabretta & Greisen (2002, A&A, 395, 1077).        These documents are available from        http://www.cv.nrao.edu/fits/documents/wcs/wcs.html   RESTRICTIONS:        Implemented only for the TANgent, SIN and CARtesian projections   REVISION HISTORY:        Written, Wayne Landsman  STX Co.        April, 1988        Algorithm adapted from AIPS memo No. 27 by Eric Greisen        New astrometry structure        Converted to IDL V5.0   W. Landsman   September 1997        Added SIN projection    W. Landsman   January 2000        Fix possible sign error introduced Jan. 2000   W. Landsman  May 2000        Work for the CARee' projection W. Landsman   May 2003        For TAN projection ensure angles between -90 and 90 W. Landsman Jan 2008  ", "RAYASTRDELTA", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/contrastzoom.html", "contrastzoom.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "contrastzoom.pro", "", "", " NAME:        CONTRASTZOOM   PURPOSE:         The purpose of this program is to demonstrate how to        zoom an image  in place  and how to window and level        (set  contrast and brightness ) an image using object        graphics functionality. The exercise involves using        multiple views in an object graphics scene, and being        able to interact with different views in different ways.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Widgets, Object Graphics.   CALLING SEQUENCE:         ContrastZoom, image   REQUIRED INPUTS:         None. The image  mr_knee.dcm  from the examples/data directory        is used if no data is supplied in call.   OPTIONAL INPUTS         image: A 2D image array of any data type.   OPTIONAL KEYWORD PARAMETERS:         COLORTABLE: The number of a color table to use as the image palette.        Color table 0 (grayscale) is used as a default.        GROUP_LEADER: The group leader for this program. When the group leader        is destroyed, this program will be destroyed.   COMMON BLOCKS:         None.   SIDE EFFECTS:         None.   RESTRICTIONS:         None. The Coyote Library program VCOLORBAR is included.   EXAMPLE:         To use this program with your 8-bit image data and a red-temperature        color scale, type:            IDL&gt; ContrastZoom, image, Colortable=3   NOTES:         The left image is used to  zoom  into a portion of the image.        The aspect ratio of the sub-image is always preserved. To see        the entire image, click and release the mouse button in this        window.         The center image is used to adjust the contrast and brightness        (sometimes called the  window  and  level  of the image. Click and        drag the mouse vertically to set contrast. Click and drag the mouse        horizontally to set brightness. To return to original values (25%        contrast and 75% brightness), click and release in the center image.         The color bars shows the image values of the image.   MODIFICATION HISTORY:         Written by David Fanning, 18 November 2001.        Added second colorbar to show the relationship of the clamped           colors to the overall image values. 19 November 2001. DWF.        Changed FSC_Normalize to cgNormalize to reflect new name. 6 Feb 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_VColorBar::Clamp", "ContrastZoom_VColorBar::Clamp", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_VColorBar::Clamp", "", "datarange", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_VColorBar::INIT", "ContrastZoom_VColorBar::INIT", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_VColorBar::INIT", "", "PositionNColorsTitlePaletteMajorMinorRangeColor_ExtraName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_VColorBar::Cleanup", "ContrastZoom_VColorBar::Cleanup", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_VColorBar::Cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_VColorBar::GetProperty", "ContrastZoom_VColorBar::GetProperty", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_VColorBar::GetProperty", "", "PositionTextTitlePaletteMajorMinorRangeColorNameTransform_Ref_Extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_VColorBar::SetProperty", "ContrastZoom_VColorBar::SetProperty", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_VColorBar::SetProperty", "", "PositionTitlePaletteMajorMinorRangeColorNameTransform_Extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_VColorBar__Define", "ContrastZoom_VColorBar__Define", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_VColorBar__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_Aspect", "ContrastZoom_Aspect", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_Aspect", "", "MARGINWindowAspectaspectRatio", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_Resize", "ContrastZoom_Resize", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_Resize", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_DistinguishEvents", "ContrastZoom_DistinguishEvents", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_DistinguishEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom_Cleanup", "ContrastZoom_Cleanup", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom_Cleanup", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/contrastzoom.html#ContrastZoom", "ContrastZoom", 'routine in <a href="coyote/contrastzoom.html">contrastzoom.pro</a>', "contrastzoom.pro", "", "ContrastZoom", "", "ColortableGroup_Leaderimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/convert_to_type.html", "convert_to_type.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "convert_to_type.pro", "", "", " NAME:        CONVERT_TO_TYPE   PURPOSE:         Converts its input argument to a specified data type.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         result = Convert_To_Type(input, type)   INPUT_PARAMETERS:         input:          The input data to be converted.        type:           The data type. Accepts values as given by Size(var, /TNAME) or Size(var, /TYPE).                        If converting to integer types, values are truncated (similar to FLOOR keyword below),                        unless keywords are set.   OUTPUT_PARAMETERS:        result:          The input data is converted to specified data type.   KEYWORDS:       CEILING:          If set and converting to an integer type, the CEIL function is applied before conversion.       FLOOR:            If set and converting to an integer type, the FLOOR function is applied before conversion.       ROUND:            If set and converting to an integer type, the ROUND function is applied before conversion.   RESTRICTIONS:       Data types STRUCT, POINTER, and OBJREF are not allowed.   MODIFICATION HISTORY:       Written by David W. Fanning, 19 February 2006.      Typo had  UNIT  instead of  UINT . 23 February 2009. DWF.      Added CEILING, FLOOR, and ROUND keywords. 1 April 2009. DWF.      Modified so that the  type  variable is not changed by the program. 5 May 2009. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/convert_to_type.html#Convert_To_Type", "Convert_To_Type", 'routine in <a href="coyote/convert_to_type.html">convert_to_type.pro</a>', "convert_to_type.pro", "", "Convert_To_Type", "", "CEILINGFLOORROUNDinputtheType", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/convert_to_type.html", "convert_to_type.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "convert_to_type.pro", "", "", " NAME:        CONVERT_TO_TYPE   PURPOSE:         Converts its input argument to a specified data type.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         result = Convert_To_Type(input, type)   INPUT_PARAMETERS:         input:          The input data to be converted.        type:           The data type. Accepts values as given by Size(var, /TNAME) or Size(var, /TYPE).                        If converting to integer types, values are truncated (similar to FLOOR keyword below),                        unless keywords are set.   OUTPUT_PARAMETERS:        result:          The input data is converted to specified data type.   KEYWORDS:       CEILING:          If set and converting to an integer type, the CEIL function is applied before conversion.       FLOOR:            If set and converting to an integer type, the FLOOR function is applied before conversion.       ROUND:            If set and converting to an integer type, the ROUND function is applied before conversion.   RESTRICTIONS:       Data types STRUCT, POINTER, and OBJREF are not allowed.   MODIFICATION HISTORY:       Written by David W. Fanning, 19 February 2006.      Typo had  UNIT  instead of  UINT . 23 February 2009. DWF.      Added CEILING, FLOOR, and ROUND keywords. 1 April 2009. DWF.      Modified so that the  type  variable is not changed by the program. 5 May 2009. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/convert_to_type.html#Convert_To_Type", "Convert_To_Type", 'routine in <a href="idlastro/coyote/convert_to_type.html">convert_to_type.pro</a>', "convert_to_type.pro", "", "Convert_To_Type", "", "CEILINGFLOORROUNDinputtheType", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/convolve.html", "convolve.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "convolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/convolve.html#convolve", "convolve", 'routine in <a href="idlastro/convolve.html">convolve.pro</a>', "convolve.pro", "", "convolve", " NAME:        CONVOLVE  PURPOSE:        Convolution of an image with a Point Spread Function (PSF)  EXPLANATION:        The default is to compute the convolution using a product of        Fourier transforms (for speed).         The image is padded with zeros so that a large PSF does not        overlap one edge of the image with the opposite edge of the image.         This routine is now partially obsolete due to the introduction of  the        intrinsic CONVOL_FFT() function in IDL 8.1   CALLING SEQUENCE:         imconv = convolve( image1, psf, FT_PSF = psf_FT )   or:        correl = convolve( image1, image2, /CORREL )   or:        correl = convolve( image, /AUTO )   INPUTS:        image = 2-D array (matrix) to be convolved with psf        psf = the Point Spread Function, (size &lt; or = to size of image).         The PSF *must* be symmetric about the point        FLOOR((n_elements-1)/2), where n_elements is the number of        elements in each dimension.  For Gaussian PSFs, the maximum        of the PSF must occur in this pixel (otherwise the convolution        will shift everything in the image).   OPTIONAL INPUT KEYWORDS:         FT_PSF = passes out/in the Fourier transform of the PSF,                (so that it can be re-used the next time function is called).        FT_IMAGE = passes out/in the Fourier transform of image.         /CORRELATE uses the conjugate of the Fourier transform of PSF,                to compute the cross-correlation of image and PSF,                (equivalent to IDL function convol() with NO rotation of PSF)         /AUTO_CORR computes the auto-correlation function of image using FFT.         /NO_FT overrides the use of FFT, using IDL function convol() instead.                (then PSF is rotated by 180 degrees to give same result)         /NO_PAD - if set, then do not pad the image to avoid edge effects.                This will improve memory and speed of the computation at the                expense of edge effects.   This was the default method prior                to October 2009  METHOD:        When using FFT, PSF is centered & expanded to size of image.  HISTORY:        written, Frank Varosi, NASA/GSFC 1992.        Appropriate precision type for result depending on input image                                Markus Hundertmark February 2006        Fix the bug causing the recomputation of FFT(psf) and/or FFT(image)                                Sergey Koposov     December 2006        Fix the centering bug                                Kyle Penner        October 2009        Add /No_PAD keyword for better speed and memory usage when edge effects             are not important.    W. Landsman      March 2010        Add warning when kernel type does not match integer array              W. Landsman Feb 2012  ", "FT_PSFFT_IMAGENO_FTCORRELATEAUTO_CORRELATIONNO_PADimagepsf", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/copy_limb_struct.html", "copy_limb_struct.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "copy_limb_struct.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/copy_limb_struct.html#copy_limb_struct", "copy_limb_struct", 'routine in <a href="sep20/copy_limb_struct.html">copy_limb_struct.pro</a>', "copy_limb_struct.pro", "", "copy_limb_struct", "       Copy limb struct over from x/ylimbinfo struct into main struct   ", "mainstruct           inputstruct, holds main information  xlimbstruct           x limb information  ylimbstruct           y limb information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/copy_struct.html", "copy_struct.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "copy_struct.pro", "", "", " NAME: 	COPY_STRUCT  PURPOSE:  	Copy all fields with matching tag names from one structure to another  EXPLANATION:        COPY_STRUCT is similar to the intrinisc STRUCT_ASSIGN procedure but        has optional keywords to exclude or specify specific tags.  	Fields with matching tag names are copied from one structure array to 	another structure array of different type. 	This allows copying of tag values when equating the structures of 	different types is not allowed, or when not all tags are to be copied. 	Can also recursively copy from/to structures nested within structures. 	Note that the number of elements in the output structure array 	is automatically adjusted to equal the length of input structure array. 	If this not desired then use pro copy_struct_inx which allows 	specifying via subscripts which elements are copied where in the arrays.   CALLING SEQUENCE:  	copy_struct, struct_From, struct_To, NT_copied 	copy_struct, struct_From, struct_To, EXCEPT=[ image , misc ] 	copy_struct, struct_From, struct_To, /RECUR_TANDEM   INPUTS: 	struct_From = structure array to copy from. 	struct_To = structure array to copy values to.   KEYWORDS:  	EXCEPT_TAGS = string array of tag names to ignore (to NOT copy). 		Used at all levels of recursion.  	SELECT_TAGS = tag names to copy (takes priority over EXCEPT). 		This keyword is not passed to recursive calls in order 		to avoid the confusion of not copying tags in sub-structures.  	/RECUR_FROM = search for sub-structures in struct_From, and then 		call copy_struct recursively for those nested structures.  	/RECUR_TO = search for sub-structures of struct_To, and then 		call copy_struct recursively for those nested structures.  	/RECUR_TANDEM = call copy_struct recursively for the sub-structures 		with matching Tag names in struct_From and struct_To 		(for use when Tag names match but sub-structure types differ).   OUTPUTS: 	struct_To = structure array to which new tag values are copied. 	NT_copied = incremented by total # of tags copied (optional)   INTERNAL: 	Recur_Level = # of times copy_struct calls itself. 		This argument is for internal recursive execution only. 		The user call is 1, subsequent recursive calls increment it, 		and the counter is decremented before returning. 		The counter is used just to find out if argument checking 		should be performed, and to set NT_copied = 0 first call.  EXTERNAL CALLS: 	pro match	(when keyword SELECT_TAGS is specified)  PROCEDURE: 	Match Tag names and then use corresponding Tag numbers.  HISTORY: 	written 1989 Frank Varosi STX @ NASA/GSFC  	mod Jul.90 by F.V. added option to copy sub-structures RECURSIVELY. 	mod Aug.90 by F.V. adjust # elements in TO (output) to equal 			# elements in FROM (input) & count # of fields copied. 	mod Jan.91 by F.V. added Recur_Level as internal argument so that 			argument checking done just once, to avoid confusion. 			Checked against Except_Tags in RECUR_FROM option. 	mod Oct.91 by F.V. added option SELECT_TAGS= selected field names. 	mod Aug.95 by W. Landsman to fix match of a single selected tag. 	mod Mar.97 by F.V. do not pass the SELECT_TAGS keyword in recursion. 	Converted to IDL V5.0   W. Landsman   September 1997        mod May 01 by D. Schlegel use long integers  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/copy_struct.html#copy_struct", "copy_struct", 'routine in <a href="idlastro/copy_struct.html">copy_struct.pro</a>', "copy_struct.pro", "", "copy_struct", "", "EXCEPT_TAGSSELECT_TAGSRECUR_FromRECUR_TORECUR_TANDEMstruct_Fromstruct_ToNT_copiedRecur_Level", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/copy_struct_inx.html", "copy_struct_inx.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "copy_struct_inx.pro", "", "", " NAME: 	COPY_STRUCT_INX  PURPOSE: 	Copy matching tags & specified indices from one structure to another  EXPLANATION:  	Copy all fields with matching tag names (except for  except_Tags ) 	from one structure array to another structure array of different type. 	This allows copying of tag values when equating the structures of 	different types is not allowed, or when not all tags are to be copied. 	Can also recursively copy from/to structures nested within structures. 	This procedure is same as copy_struct with option to 	specify indices (subscripts) of which array elements to copy from/to.  CALLING SEQUENCE:  	copy_struct_inx, struct_From, struct_To, NT_copied, INDEX_FROM=subf  	copy_struct_inx, struct_From, struct_To, INDEX_FROM=subf, INDEX_TO=subto   INPUTS: 	struct_From = structure array to copy from. 	struct_To = structure array to copy values to.   KEYWORDS:  	INDEX_FROM = indices (subscripts) of which elements of array to copy. 		(default is all elements of input structure array)  	INDEX_TO = indices (subscripts) of which elements to copy to. 		(default is all elements of output structure array)  	EXCEPT_TAGS = string array of Tag names to ignore (to NOT copy). 		Used at all levels of recursion.  	SELECT_TAGS = Tag names to copy (takes priority over EXCEPT). 		This keyword is not passed to recursive calls in order 		to avoid the confusion of not copying tags in sub-structures.  	/RECUR_FROM = search for sub-structures in struct_From, and then 		call copy_struct recursively for those nested structures.  	/RECUR_TO = search for sub-structures of struct_To, and then 		call copy_struct recursively for those nested structures.  	/RECUR_TANDEM = call copy_struct recursively for the sub-structures 		with matching Tag names in struct_From and struct_To 		(for use when Tag names match but sub-structure types differ).   OUTPUTS: 	struct_To = structure array to which new tag values are copied. 	NT_copied = incremented by total # of tags copied (optional)   INTERNAL: 	Recur_Level = # of times copy_struct_inx calls itself. 		This argument is for internal recursive execution only. 		The user call is 1, subsequent recursive calls increment it, 		and the counter is decremented before returning. 		The counter is used just to find out if argument checking 		should be performed, and to set NT_copied = 0 first call.  EXTERNAL CALLS: 	pro match	(when keyword SELECT_TAGS is specified)  PROCEDURE: 	Match Tag names and then use corresponding Tag numbers, 	apply the sub-indices during = and recursion.  HISTORY: 	adapted from copy_struct: 1991 Frank Varosi STX @ NASA/GSFC 	mod Aug.95 by F.V. to fix match of a single selected tag. 	mod Mar.97 by F.V. do not pass the SELECT_TAGS keyword in recursion, 		and check validity of INDEX_FROM and INDEX_TO in more detail. 	Converted to IDL V5.0   W. Landsman   September 1997        Use long integers W. Landsman May 2001  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/copy_struct_inx.html#copy_struct_inx", "copy_struct_inx", 'routine in <a href="idlastro/copy_struct_inx.html">copy_struct_inx.pro</a>', "copy_struct_inx.pro", "", "copy_struct_inx", "", "EXCEPT_TAGSSELECT_TAGSINDEX_FromINDEX_ToRECUR_FromRECUR_ToRECUR_TANDEMstruct_Fromstruct_ToNT_copiedRecur_Level", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/corr_fid.html", "corr_fid.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "corr_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/corr_fid.html#corr_fid", "corr_fid", 'routine in <a href="code_snapshots/obsolete_code/corr_fid.html">corr_fid.pro</a>', "corr_fid.pro", "", "corr_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/correl_images.html", "correl_images.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "correl_images.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/correl_images.html#correl_images", "correl_images", 'routine in <a href="idlastro/correl_images.html">correl_images.pro</a>', "correl_images.pro", "", "correl_images", " NAME: 	CORREL_IMAGES  PURPOSE:        Compute the 2-D cross-correlation function of two images  EXPLANATION:        Computes the 2-D cross-correlation function of two images for        a range of (x,y) shifting by pixels of one image relative to the other.   CALLING SEQUENCE:        Result = CORREL_IMAGES( image_A, image_B,                         [XSHIFT=, YSHIFT=, XOFFSET_B=, YOFFSET_B=, REDUCTION=,                         MAGNIFICATION=, /NUMPIX, /MONITOR  )   INPUTS:        image_A, image_B = the two images of interest.   OPTIONAL INPUT KEYWORDS:        XSHIFT = the + & - shift to be applied in X direction, default=7.        YSHIFT = the Y direction + & - shifting, default=7.         XOFFSET_B = initial X pixel offset of image_B relative to image_A.        YOFFSET_B = Y pixel offset, defaults are (0,0).         REDUCTION = optional reduction factor causes computation of                        Low resolution correlation of bin averaged images,                        thus faster. Can be used to get approximate optimal                        (x,y) offset of images, and then called for successive                        lower reductions in conjunction with CorrMat_Analyze                        until REDUCTION=1, getting offset up to single pixel.         MAGNIFICATION = option causes computation of high resolution correlation                        of magnified images, thus much slower.                        Shifting distance is automatically = 2 + Magnification,                        and optimal pixel offset should be known and specified.                        Optimal offset can then be found to fractional pixels                        using CorrMat_Analyze( correl_images( ) ).         /NUMPIX - if set, causes the number of pixels for each correlation                        to be saved in a second image, concatenated to the                        correlation image, so Result is fltarr( Nx, Ny, 2 ).        /MONITOR causes the progress of computation to be briefly printed.   OUTPUTS:        Result is the cross-correlation function, given as a matrix.   PROCEDURE:        Loop over all possible (x,y) shifts, compute overlap and correlation        for each shift. Correlation set to zero when there is no overlap.   MODIFICATION HISTORY:        Written, July,1991, Frank Varosi, STX @ NASA/GSFC        Use ROUND instead of NINT, June 1995, Wayne Landsman HSTX        Avoid divide by zero errors, W. Landsman HSTX April 1996 	Remove use of !DEBUG    W. Landsman   June 1997        Subtract mean of entire image before computing correlation, not just           mean of overlap region   H. Ebeling/W. Landsman   June 1998        Always REBIN() using floating pt arithmetic W. Landsman  Nov 2007   ", "XSHIFTYSHIFTXOFFSET_BYOFFSET_BREDUCTIONMAGNIFICATIONNUMPIXMONITORimage_Aimage_B", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/correl_optimize.html", "correl_optimize.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "correl_optimize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/correl_optimize.html#correl_optimize", "correl_optimize", 'routine in <a href="idlastro/correl_optimize.html">correl_optimize.pro</a>', "correl_optimize.pro", "", "correl_optimize", " NAME: 	CORREL_OPTIMIZE   PURPOSE: 	Find the optimal (x,y) pixel offset of image_B relative to image_A  EXPLANATION  	Optimal offset is computed by means of maximizing the correlation 	function of the two images.   CALLING SEQUENCE: 	CORREL_OPTIMIZE, image_A, image_B, xoffset_optimum, yoffset_optimum 		[ XOFF_INIT=, YOFF_INIT=, MAGNIFICATION=, /PRINT, /NUMPIX, 		  /MONITOR, PLATEAU_THRESH=  ]   INPUTS: 	image_A, image_B = the two images of interest.   OPTIONAL INPUT KEYWORDS: 	XOFF_INIT = initial X pixel offset of image_B relative to image_A, 	YOFF_INIT = Y pixel offset, (default offsets are 0 and 0). 	MAGNIFICATION = option to determine offsets up to fractional pixels, 			(example: MAG=2 means 1/2 pixel accuracy, default=1). 	/NUMPIX: sqrt( sqrt( # pixels )) used as correlation weighting factor. 	/MONITOR causes the progress of computation to be briefly printed. 	/PRINT causes the results of analysis to be printed. 	PLATEAU_THRESH = threshold used for detecting plateaus in 		the cross-correlation matrix near maximum, (default=0.01), 		used only if MAGNIFICATION &gt; 1.    Decrease this value for 		high signal-to-noise data   OUTPUTS: 	xoffset_optimum = optimal X pixel offset of image_B relative to image_A. 	yoffset_optimum = optimal Y pixel offset.   CALLS: 	function  correl_images( image_A, image_B ) 	pro  corrmat_analyze   PROCEDURE: 	The combination of function correl_images( image_A, image_B ) and 	corrmat_analyze of the result is used to obtain the (x,y) offset 	yielding maximal correlation. The combination is first executed at 	large REDUCTION factors to speed up computation, then zooming in 	recursively on the optimal (x,y) offset by factors of 2. 	Finally, the MAGNIFICATION option (if specified) 	is executed to determine the (x,y) offset up to fractional pixels.   MODIFICATION HISTORY: 	Written, July,1991, Frank Varosi, STX @ NASA/GSFC 	Added PLATEAU_THRESH keyword  June 1997,  Wayne Landsman  STX 	Converted to IDL V5.0   W. Landsman   September 1997  ", "XOFF_INITYOFF_INITPRINTMONITORNUMPIXMAGNIFICATIONPLATEAU_TRESHimage_Aimage_Bxoffset_optimumyoffset_optimum", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/corrmat_analyze.html", "corrmat_analyze.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "corrmat_analyze.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/corrmat_analyze.html#corrmat_analyze", "corrmat_analyze", 'routine in <a href="idlastro/corrmat_analyze.html">corrmat_analyze.pro</a>', "corrmat_analyze.pro", "", "corrmat_analyze", " NAME: 	CORRMAT_ANALYZE  PURPOSE: 	Find the optimal (x,y) offset to maximize correlation of 2 images  EXPLANATION: 	Analyzes the 2-D cross-correlation function of two images 	and finds the optimal(x,y) pixel offsets. 	Intended for use with function CORREL_IMAGES.   CALLING SEQUENCE: 	corrmat_analyze, correl_mat, xoffset_optimum, yoffset_optimum, 		max_corr, edge, plateau, [XOFF_INIT=, YOFF_INIT=, REDUCTION=, 		MAGNIFICATION=, PLATEAU_THRESH=, /PRINT]   INPUTS: 	correl_mat = the cross-correlation matrix of 2 images. 			(as computed by function CORREL_IMAGES( imA, imB ) ).   NOTE: 	If correl_mat(*,*,1) is the number of pixels for each correlation, 	(the case when /NUMPIX was specified in call to CORREL_IMAGES) 	then sqrt( sqrt( # pixels )) is used as correlation weighting factor.   OPTIONAL INPUT KEYWORDS: 	XOFF_INIT = initial X pixel offset of image_B relative to image_A. 	YOFF_INIT = Y pixel offset, (both as specified to correl_images). 	REDUCTION = reduction factor used in call to CORREL_IMAGES. 	MAGNIFICATION = magnification factor used in call to CORREL_IMAGES, 		this allows determination of offsets up to fractions of a pixel. 	PLATEAU_THRESH = threshold used for detecting plateaus in 		the cross-correlation matrix near maximum, (default=0.01), 		used only if MAGNIFICATION &gt; 1 	/PRINT causes the result of analysis to be printed.   OUTPUTS: 	xoffset_optimum = optimal X pixel offset of image_B relative to image_A. 	yoffset_optimum = optimal Y pixel offset. 	max_corr = the maximal correlation corresponding to optimal offset. 	edge = 1 if maximum is at edge of correlation domain, otherwise=0. 	plateau = 1 if maximum is in a plateua of correlation function, else=0.   PROCEDURE: 	Find point of maximum cross-correlation and calc. corresponding offsets. 	If MAGNIFICATION &gt; 1: 	the  correl_mat is checked for plateau near maximum, and if found, 	the center of plateau is taken as point of maximum cross-correlation.   MODIFICATION HISTORY: 	Written, July-1991, Frank Varosi, STX @ NASA/GSFC 	Use ROUND instead of NINT, June 1995 Wayne Landsman HSTX 	Remove use of non-standard !DEBUG system variable   W.L. HSTX 	Converted to IDL V5.0   W. Landsman   September 1997  ", "XOFF_INITYOFF_INITREDUCTIONMAGNIFICATIONPRINTPLATEAU_THRESHcorrel_matxoffset_optimumyoffset_optimummax_corredgeplateau", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/cosmo_param.html", "cosmo_param.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "cosmo_param.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/cosmo_param.html#cosmo_param", "cosmo_param", 'routine in <a href="idlastro/cosmo_param.html">cosmo_param.pro</a>', "cosmo_param.pro", "", "cosmo_param", " NAME:      COSMO_PARAM  PURPOSE:      Derive full set of cosmological density parameters from a partial set  EXPLANATION:      This procedure is called by LUMDIST and GALAGE to allow the user a choice      in defining any two of four cosmological density parameters.       Given any two of the four input parameters -- (1) the normalized matter      density Omega_m (2) the normalized cosmological constant, Omega_lambda      (3) the normalized curvature term, Omega_k and (4) the deceleration      parameter q0 --  this  program will derive the remaining two.     Here       normalized  means divided by the closure density so that      Omega_m + Omega_lambda + Omega_k = 1.    For a more      precise definition see Carroll, Press, & Turner (1992, ArAA, 30, 499).       If less than two parameters are defined, this procedure sets default      values of Omega_k=0 (flat space), Omega_lambda = 0.7, Omega_m = 0.3      and q0 = -0.55  CALLING SEQUENCE:        COSMO_PARAM, Omega_m, Omega_lambda, Omega_k, q0   INPUT-OUTPUTS:      Omega_M - normalized matter energy density, non-negative numeric scalar      Omega_Lambda - Normalized cosmological constant, numeric scalar      Omega_k - normalized curvature parameter, numeric scalar.   This is zero                for a flat universe      q0 - Deceleration parameter, numeric scalar = -R*(R'')/(R')^2           = 0.5*Omega_m - Omega_lambda  NOTES:      If more than two parameters are defined upon input (overspecification),      then the first two defined parameters in the ordered list Omega_m,      Omega_lambda, Omega_k, q0 are used to define the cosmology.  EXAMPLE:      Suppose one has Omega_m = 0.3, and Omega_k = 0.5 then to determine      Omega_lambda and q0         IDL&gt; cosmo_param, 0.3, omega_lambda, 0.5, q0         which will return omega_lambda = 0.2 and q0 = -2.45  REVISION HISTORY:        W. Landsman         Raytheon ITSS         April 2000        Better Error checking  W. Landsman/D. Syphers   October 2010  ", "Omega_mOmega_LambdaOmega_kq0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/countsuns.html", "countsuns.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "countsuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/countsuns.html#countsuns", "countsuns", 'routine in <a href="code_snapshots/obsolete_code/countsuns.html">countsuns.pro</a>', "countsuns.pro", "", "countsuns", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/coyotegraphic.html", "coyotegraphic.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "coyotegraphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/coyotegraphic.html#CoyoteGraphic", "CoyoteGraphic", 'routine in <a href="idlastro/coyote/coyotegraphic.html">coyotegraphic.pro</a>', "coyotegraphic.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "CoyoteGraphic", "   This simple just identifies a routine as a Coyote Graphic routine. It is written    primarily so I can identify such routines before I assign a background color to    a graphics window.   ", "routine", "Graphics", "     Change History: <span class= code-output >  Written, 18 January 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used in graphics programs:   <span class= code-prompt >IDL&gt;</span> IF CoyoteGraphic() THEN background = 'white'  ");
  
  

libdata[libdataItem++] = new Array("idlastro/cr_reject.html", "cr_reject.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "cr_reject.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/cr_reject.html#cr_reject", "cr_reject", 'routine in <a href="idlastro/cr_reject.html">cr_reject.pro</a>', "cr_reject.pro", "", "cr_reject", " NAME:      CR_REJECT   PURPOSE:      General, iterative cosmic ray rejection using two or more input images.   EXPLANATION:      Uses a noise model input by the user, rather than      determining noise empirically from the images themselves.       The image returned has the combined exposure time of all the input      images, unless the bias flag is set, in which case the mean is      returned.  This image is computed by summation (or taking mean)      regardless of loop and initialization options (see below).   CALLING SEQUENCE:      cr_reject, input_cube, rd_noise_dn, dark_dn, gain, mult_noise, $         combined_image, combined_npix, combined_noise   MODIFIED ARGUMENT:      input_cube - Cube in which each plane is an input image.                   If the noise model is used (rd_noise_dn, dark_dn,                   gain), then input_cube must be in units of DN.                   If an input noise cube is supplied (rd_noise_dn                   &lt;0), then the units of input_cube and noise_cube                   merely need to be consistent.                    This array is used as a buffer and its contents                   are not guaranteed on output (although for now,                   weighting=0 with /restore_sky should give you back                   your input unaltered).   INPUT ARGUMENTS:      rd_noise_dn - Read noise per pixel.  Units are DN.                    If negative, then the user supplies an error cube                    via the keyword noise_cube.  In the latter case,                    mult_noise still applies, since it is basically a fudge.      dark_dn     - Dark rate in DN per pixel per s.  This can be a scalar,                    or it can be a dark image divided by the exposure                    time.      gain        - Electrons per DN.      mult_noise  - Coefficient for multiplicative noise term -- helps                    account for differing PSFs or subpixel image shifts.   INPUT KEYWORDS:      exptime    - If the images have different exposure times, pass                   them in a vector.  You can leave this off for                   frames with the same exposure time, but dark counts                   won't be treated correctly.      verbose    - If set, lots of output.      nsig       - Rejection limit in units of pixel-to-pixel noise                   (sigma) on each input image.  Can be specified as                   an array, in which case the dimension gives the                   maximum number of iterations to run.  (Default =                   [8, 6, 4]      dilation   - With dfactor, provides functionality similar to the                   expansion of the CR with pfactor and radius in STSDAS                   crrej.  Dilate gives the size of the border to be                   tested around each initially detected CR pixel.                   E.g., dilate=1 searches a 9 X 9 area centered on the                   original pixel.  If dfactor is set, the default is 1.      dfactor    - See dilation.  This parameter is equivalent to pfactor                   in STSDAS crrej.  The current threshold for rejection                   is multiplied by this factor when doing the search                   with the dilated mask.  If dilation is set, the default                   for this parameter is 0.5.      bias       - Set if combining biases (divides through by number                   of images at end, since exposure time is 0).      tracking_set - Subscripts of pixels to be followed through the                     computation.      noskyadjust  - Sky not to be subtracted before rejection tests.  Default                   is to do the subtraction.      xmedsky    - Flag.  If set, the sky is computed as a 1-d array                   which is a column-by-column median.  This is intended                   for STIS slitless spectra.  If sky adjustment is                   disabled, this keyword has no effect.      input_mask - Mask cube input by the user.  Should be byte data                   because it's boolean.  1 means use the pixel,                   and 0 means reject the pixel - these rejections                   are in addition to those done by the CR rejection                   algorithm as such.       The following keywords control how the current guess at a CR-free       check image  is recomputed on each iteration:       median_loop  - If set, the check image for each iteration is                     the pixel-by-pixel median. THE MEAN IS                     RETURNED in combined_image even if you set                     this option.  (Default is mean_loop.)      minimum_loop - If set, the check image for each iteration is                     the pixel-by-pixel minimum. THE MEAN IS                     RETURNED in combined_image even if you set                     this option.  (Default is mean_loop.)      mean_loop    - If set, the check image for each iteration is                     the pixel-by-pixel mean.  (Same as the default.)      noclearmask  - By default, the mask of CR flags is reset before                     every iteration, and a pixel that has been                     rejected has a chance to get back in the game                     if the average migrates toward its value.  If this                     keyword is set, then any rejected pixel stays                     rejected in subsequent iterations.  Note that what                     stsdas.hst_calib.wfpc.crrej does is the same                     as the default.  For this procedure, the default                     was NOT to clear the flags, until 20 Oct. 1997.      restore_sky  - Flag.  If set, the routine adds the sky back into                     input_cube before returning.  Works only if                     weighting=0.      null_value   - Value to be used for output pixels to which no                     input pixels contribute.  Default=0      weighting    - Selects weighting scheme in final image                     combination:                      0 (default) - Poissonian weighting - co-add                          detected DN from non-CR pixels.  (Pixel-by-                          pixel scaling up to total exposure time,                          for pixels in stack where some rejected.)                          Equivalent to exptime weighting of rates.                      1 or more - Sky and read noise weighting of rates.                          Computed as weighted average of DN rates,                          with total exp time multiplied back in                          afterward.                      In all cases, the image is returned as a sum in                     DN with the total exposure time of the image                     stack, and with total sky added back in.       The following keywords allow the initial guess at a CR-free  check      image  to be of a different kind from the iterative guesses:       init_med  - If set, the initial check image is                  the pixel-by-pixel median.  (Not permitted if                  input_cube has fewer than 3 planes; default is minimum.)      init_mean - If set, the initial check image is                  the pixel-by-pixel mean.  (Default is minimum.)      init_min  - If set, the initial check image is                  the pixel-by-pixel minimum.  (Same as the default.)   OUTPUT ARGUMENTS: <span class= code-output >   combined_image - Mean image with CRs removed.</span> <span class= code-output >   combined_npix  - Byte (or integer) image of same dimensions as</span> <span class= code-output >                    combined_image, with each element containing</span> <span class= code-output >                    the number of non-CR stacked pixels that</span> <span class= code-output >                    went into the  result.</span> <span class= code-output >   combined_noise - Noise in combined image according to noise model</span> <span class= code-output >                    or supplied noise cube.</span>  OUTPUT KEYWORDS:      mask_cube      - CR masks for each input image.  1 means                       good pixel; 0 means CR pixel.      skyvals        - Sky value array.  For an image cube with N planes,                       this array is fltarr(N) if the sky is a scalar per                       image plane, and fltarr(XDIM, N), is the XMEDSKY                       is set.   INPUT/OUTPUT KEYWORD:      noise_cube     - Estimated noise in each pixel of input_cube as                       returned (if rd_noise_dn ge 0), or input noise                       per pixel of image_cube (if rd_noise_dn lt 0).      skybox         - X0, X1, Y0, Y1 bounds of image section used                       to compute sky.  If supplied by user, this                       region is used.  If not supplied, the                       image bounds are returned.  This parameter might                       be used (for instance) if the imaging area                       doesn't include the whole chip.   COMMON BLOCKS:  none   SIDE EFFECTS:  none   METHOD:       COMPARISON WITH STSDAS       Cr_reject emulates the crrej routine in stsdas.hst_calib.wfpc.      The two routines have been verified to give identical results      (except for some pixels along the edge of the image) under the      following conditions:            no sky adjustment           no dilation of CRs           initialization of trial image with minimum           taking mean for each trial image after first (no choice              in crrej)       Dilation introduces a difference between crrej and this routine      around the very edge of the image, because the IDL mask      manipulation routines don't handle the edge the same way as crrej      does.  Away from the edge, crrej and cr_reject are the same with      respect to dilation.       The main difference between crrej and cr_reject is in the sky      computation.  Cr_reject does a DAOPHOT I sky computation on a      subset of pixels grabbed from the image, whereas crrej searches      for a histogram mode.       REMARKS ON USAGE       The default is that the initial guess at a CR-free image is the      pixel-by-pixel minimum of all the input images.  The pixels      cut from each component image are the ones more than nsig(0) sigma      from this minimum image.  The next iteration is based on the      mean of the cleaned-up component images, and the cut is taken      at nsig(1) sigma.  The next iteration is also based on the mean with      the cut taken at nsig(2) sigma.       The user can specify an arbitrary sequence of sigma cuts, e.g.,      nsig=[6,2] or nsig=[10,9,8,7].  The user can also specify that      the initial guess is the median (/init_med) rather than the      minimum, or even the mean.  The iterated cleaned_up images after      the first guess can be computed as the mean or the median      (/mean_loop or /median_loop).  The minimum_loop option is also      specified, but this is a trivial case, and you wouldn't want      to use it except perhaps for testing.       The routine takes into account exposure time if you want it to,      i.e., if the pieces of the CR-split aren't exactly the same.      For bias frames (exposure time 0), set /bias to return the mean      rather than the total of the cleaned-up component images.       The crrej pfactor and radius to propagate the detected CRs      outward from their initial locations have been implemented      in slightly different form using the IDL DILATE function.       It is possible to end up with output pixels to which no valid      input pixels contribute.  These end up with the value      NULL_VALUE, and the corresponding pixels of combined_npix are      also returned as 0.  This result can occur when the pixel is      very noisy across the whole image stack, i.e., if all the      values are, at any step of the process, far from the stack      average at that position even after rejecting the real      outliers.  Because  pixels are flagged symmetrically N sigma      above and below the  current combined image (see code), all      the pixels at a given  position can end up getting flagged.      (At least, that's how I think it happens.)   MODIFICATION HISTORY:       5 Mar. 1997 - Written.  R. S. Hill      14 Mar. 1997 - Changed to masking approach to keep better                     statistics and return CR-affected pixels to user.                     Option to track subset of pixels added.                     Dilation of initially detected CRs added.                     Other small changes.  RSH      17 Mar. 1997 - Arglist and treatment of exposure times fiddled                     to mesh better with stis_cr.  RSH      25 Mar. 1997 - Fixed bug if dilation finds nothing.  RSH       4 Apr. 1997 - Changed name to cr_reject.  RSH      15 Apr. 1997 - Restyled with emacs, nothing else done.  RSH      18 Jun. 1997 - Input noise cube allowed.  RSH      19 Jun. 1997 - Multiplicative noise deleted from final error.  RSH      20 Jun. 1997 - Fixed error in using input noise cube.  RSH      12 July 1997 - Sky adjustment option.  RSH      27 Aug. 1997 - Dilation kernel made round, not square, and                     floating-point radius allowed.  RSH      16 Sep. 1997 - Clearmask added.  Intermediate as well as final                     mean is exptime weighted.  RSH      17 Sep. 1997 - Redundant zeroes around dilation kernel trimmed.  RSH       1 Oct. 1997 - Bugfix in preceding.  RSH      21 Oct. 1997 - Clearmask changed to noclearmask.  Bug in robust                     array division fixed (misplaced parens).  Sky as                     a function of X (option).  RSH      30 Jan. 1998 - Restore_sky keyword added.  RSH       5 Feb. 1998 - Quick help corrected and updated.  RSH       6 Feb. 1998 - Fixed bug in execution sequence for tracking_set                     option.  RSH      18 Mar. 1998 - Eliminated confusing maxiter spec.  Added                     null_value keyword.  RSH      15 May  1998 - Input_mask keyword.  RSH      27 May  1998 - Initialization of minimum image corrected. NRC, RSH       9 June 1998 - Input mask cube processing corrected.  RSH      21 Sep. 1998 - Weighting keyword added.  RSH       7 Oct. 1998 - Fixed bug in input_mask processing (introduced                     in preceding update).  Input_mask passed to                     skyadj_cube.  RSH       5 Mar. 1999 - Force init_min for 2 planes.  RSH       1 Oct. 1999 - Make sure weighting=1 not given with noise cube.  RSH       1 Dec. 1999 - Corrections to doc; restore_sky needs weighting=0.  RSH      17 Mar. 2000 - SKYBOX added.  RSH  ", "MASK_CUBENOISE_CUBENSIGMEDIAN_LOOPMEAN_LOOPMINIMUM_LOOPINIT_MEDINIT_MININIT_MEANEXPTIMEBIASVERBOSETRACKING_SETDILATIONDFACTORNOSKYADJUSTNOCLEARMASKXMEDSKYRESTORE_SKYSKYVALSNULL_VALUEINPUT_MASKWEIGHTINGSKYBOXinput_cuberd_noise_dndark_dngainmult_noisecombined_imagecombined_noisecombined_npix", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/create_struct.html", "create_struct.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "create_struct.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/create_struct.html#create_struct", "create_struct", 'routine in <a href="idlastro/create_struct.html">create_struct.pro</a>', "create_struct.pro", "", "create_struct", " NAME:        CREATE_STRUCT  PURPOSE:        Create an IDL structure from a list of tag names and dimensions  EXPLANATION:        Dynamically create an IDL structure variable from list of tag names        and data types of arbitrary dimensions.   Useful when the type of        structure needed is not known until run time.         Unlike the intrinsic function CREATE_STRUCT(), this procedure does not        require the user to know the number of tags before run time.   (Note        there is no name conflict since the intrinsic CREATE_STRUCT is a        function, and this file contains a procedure.)  CALLING SEQUENCE:        CREATE_STRUCT, STRUCT, strname, tagnames, tag_descript,                              [ DIMEN = , /CHATTER, /NODELETE ]   INPUTS:        STRNAME -   name to be associated with structure (string)                Must be unique for each structure created.   Set                STRNAME = '' to create an anonymous structure         TAGNAMES -  tag names for structure elements (string or string array)                 Any strings that are not valid IDL tag names (e.g. 'a\2')                 will be converted by IDL_VALIDNAME to a valid tagname by                 replacing with underscores as necessary (e.g. 'a_2')         TAG_DESCRIPT -  String descriptor for the structure, containing the                tag type and dimensions.  For example, 'A(2),F(3),I', would                be the descriptor for a structure with 3 tags, strarr(2),                fltarr(3) and Integer scalar, respectively.                Allowed types are 'A' for strings, 'B' or 'L' for unsigned byte                integers, 'I' for integers, 'J' for longword integers,                'K' for 64bit integers, 'F' or 'E' for floating point,                'D' for double precision  'C' for complex, and 'M' for double                complex.   Uninterpretable characters in a format field are                ignored.                 For vectors, the tag description can also be specified by                a repeat count.  For example, '16E,2J' would specify a                structure with two tags, fltarr(16), and lonarr(2)   OPTIONAL KEYWORD INPUTS:        DIMEN -    number of dimensions of structure array (default is 1)         CHATTER -  If set, then CREATE_STRUCT() will display                   the dimensions of the structure to be created, and prompt                   the user whether to continue.  Default is no prompt.         /NODELETE - If set, then the temporary file created                   CREATE_STRUCT will not be deleted upon exiting.   See below   OUTPUTS:        STRUCT -   IDL structure, created according to specifications   EXAMPLES:         IDL&gt; create_struct, new, 'name',['tag1','tag2','tag3'], 'D(2),F,A(1)'         will create a structure variable new, with structure name NAME         To see the structure of new:         IDL&gt; help,new,/struc        ** Structure NAME, 3 tags, 20 length:           TAG1            DOUBLE         Array(2)           TAG2            FLOAT          0.0           TAG3            STRING         Array(1)   PROCEDURE:        Generates a temporary procedure file using input information with        the desired structure data types and dimensions hard-coded.        This file is then executed with CALL_PROCEDURE.   NOTES:        If CREATE_STRUCT cannot write a temporary .pro file in the current        directory, then it will write the temporary file in the getenv('HOME')        directory.         Note that 'L' now specifies a LOGICAL (byte) data type and not a        a LONG data type for consistency with FITS binary tables   RESTRICTIONS:        The name of the structure must be unique, for each structure created.        Otherwise, the new variable will have the same structure as the        previous definition (because the temporary procedure will not be        recompiled).  ** No error message will be generated  ***   SUBROUTINES CALLED:        REPCHR()   MODIFICATION HISTORY:        Version 1.0 RAS January 1992        Modified 26 Feb 1992 for Rosat IDL Library (GAR)        Modified Jun 1992 to accept arrays for tag elements -- KLV, Hughes STX        Accept anonymous structures W. Landsman  HSTX    Sep. 92        Accept 'E' and 'J' format specifications   W. Landsman Jan 93        'L' format now stands for logical and not long array        Accept repeat format for vectors        W. Landsman Feb 93        Accept complex and double complex (for V4.0)   W. Landsman Jul 95        Work for long structure definitions  W. Landsman Aug 97        Write temporary file in HOME directory if necessary  W. Landsman Jul 98        Use OPENR,/DELETE for OS-independent file removal W. Landsman Jan 99        Use STRSPLIT() instead of GETTOK() W. Landsman  July 2002        Assume since V5.3 W. Landsman  Feb 2004        Added RESOLVE_ROUTINE to ensure recompilation W. Landsman Sep. 2004        Delete temporary with FILE_DELETE   W. Landsman Sep 2006        Assume since V5.5, delete VMS reference  W.Landsman Sep 2006        Added 'K' format for 64 bit integers, IDL_VALIDNAME check on tags                        W. Landsman  Feb 2007        Use vector form of IDL_VALIDNAME() if V6.4 or later W.L. Dec 2007        Suppress compilation mesage of temporary file A. Conley/W.L. May 2009        Remove FDECOMP, some cleaner coding  W.L. July 2009        Do not limit string length to 1000 chars   P. Broos,  Feb 2011  ", "DIMENCHATTERNODELETEstructstrnametagnamestag_descript", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/cropit.html", "cropit.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "cropit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/cropit.html#cropit", "cropit", 'routine in <a href="code_snapshots/obsolete_code/cropit.html">cropit.pro</a>', "cropit.pro", "", "cropit", "       Loads a triple-sun image and crops out selected regions one-by-one.   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time         Print the elapsed time   inputarr           Starting image to crop  location           Structure containing the cropped image along with the X and Y distances from origin  scan_width           How apart the scans are for minicrop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "       cropped = cropit(inputarr,scan_width,sigmavalue,sundiam,region=1)   ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/cropme.html", "cropme.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "cropme.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/cropme.html#cropme", "cropme", 'routine in <a href="code_snapshots/obsolete_code/cropme.html">cropme.pro</a>', "cropme.pro", "", "cropme", "", "inputpix", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/crosstest.html", "crosstest.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "crosstest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/crosstest.html#crosstest", "crosstest", 'routine in <a href="code_snapshots/obsolete_code/crosstest.html">crosstest.pro</a>', "crosstest.pro", "", "crosstest", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/cspline.html", "cspline.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "cspline.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/cspline.html#cspline", "cspline", 'routine in <a href="idlastro/cspline.html">cspline.pro</a>', "cspline.pro", "", "cspline", " NAME:       CSPLINE   PURPOSE:       Function to evaluate a natural cubic spline at specified data points  EXPLANATION:       Combines the Numerical Recipes functions SPL_INIT and SPL_INTERP   CALLING SEQUENCE:       result = cspline( x, y, t, [ DERIV = ])   INPUTS:       x - vector of spline node positions, must be monotonic increasing or           decreasing       y - vector of node values       t - x-positions at which to evaluate the spline, scalar or vector   INPUT-OUTPUT KEYWORD:       DERIV - values of the second derivatives of the interpolating function                at the node points.   This is an intermediate step in the                computation of the natural spline that requires only the X and                Y vectors.    If repeated interpolation is to be applied to                the same (X,Y) pair, then some computation time can be saved                by supplying the DERIV keyword on each call.   On the first call                DERIV will be computed and returned on output.   OUTPUT:        the values for positions t are returned as the function value        If any of the input variables are double precision, then the output will        also be double precision; otherwise the output is floating point.   EXAMPLE:        The following uses the example vectors from the SPL_INTERP documentation         IDL&gt; x = (findgen(21)/20.0)*2.0*!PI ;X vector        IDL&gt; y = sin(x)                     ;Y vector        IDL&gt; t = (findgen(11)/11.0)*!PI     ;Values at which to interpolate        IDL&gt; cgplot,x,y,psym=1                ;Plot original grid        IDL&gt; cgplot, /over, t,cspline(x,y,t),psym=2 ;Overplot interpolated values   METHOD:       The  Numerical Recipes  implementation of the natural cubic spline is       used, by calling the intrinsic IDL functions SPL_INIT and SPL_INTERP.   HISTORY:       version 1  D. Lindler  May, 1989       version 2  W. Landsman April, 1997       Rewrite using the intrinsic SPL_INIT & SPL_INTERP functions       Converted to IDL V5.0   W. Landsman   September 1997       Work for monotonic decreasing X vector    W. Landsman   February 1999  ", "Derivxxyytt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ct2lst.html", "ct2lst.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ct2lst.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ct2lst.html#CT2LST", "CT2LST", 'routine in <a href="idlastro/ct2lst.html">ct2lst.pro</a>', "ct2lst.pro", "", "CT2LST", " NAME:      CT2LST  PURPOSE:      To convert from Local Civil Time to Local Mean Sidereal Time.   CALLING SEQUENCE:      CT2LST, Lst, Lng, Tz, Time, [Day, Mon, Year]                        or      CT2LST, Lst, Lng, dummy, JD   INPUTS:      Lng  - The longitude in degrees (east of Greenwich) of the place for             which the local sidereal time is desired, scalar.   The Greenwich             mean sidereal time (GMST) can be found by setting Lng = 0.      Tz  - The time zone of the site in hours, positive East  of the Greenwich            meridian (ahead of GMT).  Use this parameter to easily account            for Daylight Savings time (e.g. -4=EDT, -5 = EST/CDT), scalar            This parameter is not needed (and ignored) if Julian date is            supplied.    ***Note that the sign of TZ was changed in July 2008            to match the standard definition.***      Time or JD  - If more than four parameters are specified, then this is                the time of day of the specified date in decimal hours.  If                exactly four parameters are specified, then this is the                Julian date of time in question, scalar or vector   OPTIONAL INPUTS:       Day -  The day of the month (1-31),integer scalar or vector       Mon -  The month, in numerical format (1-12), integer scalar or vector       Year - The 4 digit year (e.g. 2008), integer scalar or vector   OUTPUTS:        Lst   The Local Sidereal Time for the date/time specified in hours.   RESTRICTIONS:        If specified, the date should be in numerical form.  The year should        appear as yyyy.   PROCEDURE:        The Julian date of the day and time is question is used to determine        the number of days to have passed since 0 Jan 2000.  This is used        in conjunction with the GST of that date to extrapolate to the current        GST; this is then used to get the LST.    See Astronomical Algorithms        by Jean Meeus, p. 84 (Eq. 11-4) for the constants used.   EXAMPLE:        Find the Greenwich mean sidereal time (GMST) on 2008 Jul 30 at 15:53 pm        in Baltimore, Maryland (longitude=-76.72 degrees).   The timezone is        EDT or tz=-4         IDL&gt; CT2LST, lst, -76.72, -4,ten(15,53), 30, 07, 2008                 ==&gt; lst =  11.356505  hours  (= 11h 21m 23.418s)         The Web site  http://tycho.usno.navy.mil/sidereal.html contains more        info on sidereal time, as well as an interactive calculator.  PROCEDURES USED:        jdcnv - Convert from year, month, day, hour to julian date   MODIFICATION HISTORY:      Adapted from the FORTRAN program GETSD by Michael R. Greason, STX,                27 October 1988.      Use IAU 1984 constants Wayne Landsman, HSTX, April 1995, results                differ by about 0.1 seconds      Longitudes measured *east* of Greenwich   W. Landsman    December 1998      Time zone now measure positive East of Greenwich W. Landsman July 2008      Remove debugging print statement  W. Landsman April 2009  ", "lstlngtztmedaymonyear", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/public/cubehelix.html", "cubehelix.pro", '.pro file in <a href="coyote/public/dir-overview.html">coyote/public/ directory</a>', "cubehelix.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/public/cubehelix.html#cubehelix", "cubehelix", 'routine in <a href="coyote/public/cubehelix.html">cubehelix.pro</a>', "cubehelix.pro", "", "cubehelix", " NAME: CUBEHELIX   PURPOSE: Calculate a  cube helix  color table           Based on the FORTRAN 77 code provided in           D.A. Green, 2011, BASI, 39, 289            http://adsabs.harvard.edu/abs/2011arXiv1108.5083G   CALLING SEQUENCE:  CUBEHELIX,[start=start,rots=rots,hue=hue,gamma=gamma,                                get=get,/plot,/white]   OPTIONAL INPUTS:  [this wording is taken from the paper]           START: color (1=red, 2=green, 3=blue)                  e.g.  0.5=purple                  DEFAULT = 0.5            ROTS:  rotations in colour (typically -1.5 to 1.5)                  DEFAULT = -1.5            HUE:   hue intensity scaling (in the range 0 (B+W) to 1                  to be strictly correct, larger values may be OK with                  particular star/end colours)                  DEFAULT = 1.2            GAMMA: set the gamma correction for intensity                  DEFAULT = 1.0   KEYWORD PARAMETERS:           PLOT:  Have the program plot a color-bar to the screen,                  with colors 0-&gt;255 going left-&gt;right            WHITE: let the last color be white   OPTIONAL OUTPUTS:           GET:   Set this to a named vector which will have                  dimensions [256,3] to hold the RGB color vectors   EXAMPLE:     Create a color table of only greens and plot to the screen           IDL&gt; cubehelix,/plot,gamma=1.5,rot=0,start=2   MODIFICATION HISTORY:           August 2011: Created by J.R.A. Davenport           June 2012: Updated plot, fixed setting optional inputs = 0,                      removed the unsightly FOR loop           November 2012: Modified plot to use Coyote Graphics. DWF.           November 2012: Added CubeHelix color table to cgLoadCT and XColors programs. DWF.  I would appreciate a simple acknowledgement for published works using my code:     This publication has made use of code written by James R. A. Davenport.    ", "startrotshuegammagetplotwhite", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/curr.html", "curr.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "curr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/curr.html#curr", "curr", 'routine in <a href="code_snapshots/obsolete_code/curr.html">curr.pro</a>', "curr.pro", "", "curr", "       This version uses limb fitting opposed to masking (tricenter).   ", "time           Outputs how much time the program takes   ", "          -1", "       Find and ISOLATE fiducials, not just mask them out         Ignore center if sun is too close to edge (or if when cropping, we cro outside wholeimage)         Use 25% of median(image)        Um, let's not (Apr24)         Make sure program doesn't freak out when sun isn't in POV   ");
  
  

libdata[libdataItem++] = new Array("idlastro/curs.html", "curs.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "curs.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/curs.html#curs", "curs", 'routine in <a href="idlastro/curs.html">curs.pro</a>', "curs.pro", "", "curs", " NAME:        CURS  PURPOSE:        Selects an X windows cursor shape  CALLING SEQUENCE:        curs            ;Interactively select a cursor shape.        curs, sel       ;Make the given CURSOR_STANDARD value the cursor                         shape.  OPTIONAL INPUT:        sel  -  Either an integer giving the CURSOR_STANDARD value (usually an                even value between 0 and 152) indicating the cursor shape, or                a string from the following menu        a -- Up arrow        b -- Left-angled arrow        c -- Right-angled arrow        d -- Crosshair        e -- Finger pointing left        f -- Finger pointing right        g -- Narrow crosshair        h -- Cycle through all possible standard cursor shapes         The full list of available cursor values is given in       /usr/include/X11/cursorfont.h  OUTPUTS:        None.  RESTRICTIONS:        Uses the CURSOR_STANDARD keyword of the DEVICE procedure.  Although        this keyword is available in Windows IDL, the values        used by this procedure are specific to the X windows device.   PROCEDURE:        If the user supplies a valid cursor shape value, it is set.  Otherwise,        an interactive command loop is entered; it will continue until a valid        value is given.  MODIFICATION HISTORY:        Converted to VAX 3100 workstations / IDL V2.  M. Greason, STX, May 1990.        Avoid bad cursor parameter values  W. Landsman   February, 1991        Don't change value of input param        W. Landsman   August 1995        Use SIZE(/TNAME) instead of DATATYPE()   W. Landsman  October 2001  ", "sel", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/curval.html", "curval.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "curval.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/curval.html#curval", "curval", 'routine in <a href="idlastro/curval.html">curval.pro</a>', "curval.pro", "", "curval", " NAME:        CURVAL  PURPOSE:        Cursor controlled display of image intensities and astronomical coords  EXPLANATION        CURVAL displays different information depending whether the user        supplied an image array, and/or a FITS header array         Note that in the usual truecolor mode, the byte intensity returned by        CURVAL does not correspond to the byte scaled image value but rather        returns the maximum value in each color gun.  CALLING SEQUENCE(S):        curval          ;Display x,y and byte intensity (inten)         curval, im   ;Display x,y,inten, and also pixel value (from image array)         curval, hdr, [ im, OFFSET= , ZOOM=, FILENAME=, ALT=]   OPTIONAL INPUTS:        Hdr  = FITS Header array        Im  = Array containing values that are displayed.  Any type.   OPTIONAL KEYWORD INPUTS:       ALT - single character 'A' through 'Z' or ' ' specifying an alternate             astrometry system present in the FITS header.    The default is             to use the primary astrometry or ALT = ' '.   If /ALT is set,             then this is equivalent to ALT = 'A'.   See Section 3.3 of             Greisen & Calabretta (2002, A&A, 395, 1061) for information about             alternate astrometry keywords.       OFFSET - 2 element vector giving the location of the image pixel (0,0)                on the window display.   OFFSET can be positive (e.g if the                image is centered in a larger window) or negative (e.g. if the                only the central region of an image much larger than the window                is being displayed.                Default value is [0,0], or no offset.        ZOOM - Scalar specifying the magnification of the window with respect                to the image variable.    Use, for example, if image has been                REBINed before display.        FILENAME  = name of file to where CURVAL data can be saved.                Data will only be saved if left or center mouse button                are pressed.   OUTPUTS:        None.   SIDE EFFECTS:        X and Y values, etc., of the pixel under the cursor are constantly        displayed.        Pressing left or center mouse button prints a line of output, and        starts a new line.        Pressing right mouse button exits the procedure.        If the keyword FILENAME is defined, the date and time, and a heading        will be printed in the file before the data.   PROCEDURES CALLED:        ADSTRING(), EXTAST, GSSSXYAD, RADEC, SXPAR(), UNZOOM_XY, XY2AD  REVISION HISTORY:        Written,  K. Rhode,  STX  May 1990        Added keyword FILENAME  D. Alexander  June 1991        Don't write to Journal file   W. Landsman    March 1993        Use astrometry structure  W. Landsman      Feb 1994        Modified for Mac IDL          I.   Freedman     April 1994        Allow for zoomed or offset image  W. Landsman      Mar 1996        Proper rounding of zoomed pixel values   W. Landsman/R. Hurt  Dec. 1997        Remove unneeded calls to obsolete !ERR   W. Landsman   December 2000        Replace remaining !ERR calls with !MOUSE.BUTTON W. Landsman Jan 2001        Allow for non-celestial (e.g. Galactic) coordinates W. Landsman Apr 2003        Work if RA/Dec reversed in CTYPE keyword  W. Landsman Feb. 2004        Always call UNZOOM_XY for MOUSSE compatibility W. Landsman Sep. 2004        Added ALT keyword  W. Landsman October 2004        Always test if offset/zoom supplied  W. Landsman  Feb 2008  ", "OFFSETZOOMFilenameALThdim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/cutofftest.html", "cutofftest.pro", '.pro file in <a href="code_snapshots/sep11/obsolete_files/dir-overview.html">code_snapshots/sep11/obsolete_files/ directory</a>', "cutofftest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/cutofftest.html#cutofftest", "cutofftest", 'routine in <a href="code_snapshots/sep11/obsolete_files/cutofftest.html">cutofftest.pro</a>', "cutofftest.pro", "", "cutofftest", "", "inputimageinputstructfidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/cutofftest.html", "cutofftest.pro", '.pro file in <a href="code_snapshots/orig_version/obsolete_files/dir-overview.html">code_snapshots/orig_version/obsolete_files/ directory</a>', "cutofftest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/cutofftest.html#cutofftest", "cutofftest", 'routine in <a href="code_snapshots/orig_version/obsolete_files/cutofftest.html">cutofftest.pro</a>', "cutofftest.pro", "", "cutofftest", "", "inputimageinputstructfidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/cutofftest.html", "cutofftest.pro", '.pro file in <a href="code_snapshots/test_version/obsolete_files/dir-overview.html">code_snapshots/test_version/obsolete_files/ directory</a>', "cutofftest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/cutofftest.html#cutofftest", "cutofftest", 'routine in <a href="code_snapshots/test_version/obsolete_files/cutofftest.html">cutofftest.pro</a>', "cutofftest.pro", "", "cutofftest", "", "inputimageinputstructfidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/cutofftest.html", "cutofftest.pro", '.pro file in <a href="code_snapshots/albert_version/obsolete_files/dir-overview.html">code_snapshots/albert_version/obsolete_files/ directory</a>', "cutofftest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/cutofftest.html#cutofftest", "cutofftest", 'routine in <a href="code_snapshots/albert_version/obsolete_files/cutofftest.html">cutofftest.pro</a>', "cutofftest.pro", "", "cutofftest", "", "inputimageinputstructfidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/obsolete_files/cutofftest.html", "cutofftest.pro", '.pro file in <a href="sep20/obsolete_files/dir-overview.html">sep20/obsolete_files/ directory</a>', "cutofftest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/obsolete_files/cutofftest.html#cutofftest", "cutofftest", 'routine in <a href="sep20/obsolete_files/cutofftest.html">cutofftest.pro</a>', "cutofftest.pro", "", "cutofftest", "", "inputimageinputstructfidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/cutofftest.html", "cutofftest.pro", '.pro file in <a href="code_snapshots/jul25/obsolete_files/dir-overview.html">code_snapshots/jul25/obsolete_files/ directory</a>', "cutofftest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/cutofftest.html#cutofftest", "cutofftest", 'routine in <a href="code_snapshots/jul25/obsolete_files/cutofftest.html">cutofftest.pro</a>', "cutofftest.pro", "", "cutofftest", "", "inputimageinputstructfidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html", "cw_drawcolor.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cw_drawcolor.pro", "", "", " NAME:        CW_DRAWCOLOR   PURPOSE:         This compound widget is used to place a label or color name next        to a color patch. Clicking on the color patch allows the user        to select another color   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Graphics   CALLING SEQUENCE:         colorpatchID = CW_DrawColor(parent)   REQUIRED INPUTS:         parent - The identifier of a parent base widget.   OUTPUTS:         colorpatchID - The widget identifier of the top-level base of this compound widget   INPUT KEYWORDS:     COLOR - The name of the color to be displayed. Color names come from cgPickColorName.    COLUMN - Set this keyword to stack widgets in a column. Default is in a row.    EVENT_FUNC - The name of an event handler function for this compound widget.    EVENT_PRO -The name of an event handler procedure for this compound widget.    INDEX - An index number where the color should be loaded. !D.Table_Size-2, by default.    FILENAME - An optional input to cgPickColorName specifying different               colors.  See the cgPickColorName documenation for the file format.    LABEL_LEFT - Set this keyword to have the label text aligned on the left of the label. Default is to center.    LABEL_RIGHT - Set this keyword to have the label text aligned on the right of the label. Default is to center.    LABELSIZE - This is the X size of the label widget (containing the label) in device coordinates. Default is natural size.    LABELTEXT - This is the text on the label. Example,  Background Color , etc.    TITLE - This is the title on the cgPickColorName program that allows the user to select another color.    UVALUE - A user value for the widget.    XSIZE - The xsize (in pixel units) of the color patch. By default, 20.    YSIZE - The xsize (in pixel units) of the color patch. By default, 20.   OUTPUT KEYWORDS:     OBJECT - The object reference. Use this to call methods, etc.   OBJECT PROCEDURE METHODS:     Set_Value -- this method takes one argument, the new color name.                It will change the color of the widget if it has                already been realized.     Get_Value -- this method returns the color name the widget is displaying   DEPENDENCIES:         Reqires cgColor and cgPickColorName from the Coyote Library:                       http://www.idlcoyote.com/programs/cgColor.pro                      http://www.idlcoyote.com/programs/cgPickColorName.pro   MODIFICATION HISTORY:         Written by David W. Fanning, March 2001.        Fixed a problem with self object cleanup. 7 March 2006. DWF.        Allow addition to already realized widget hierarchies, October 2007. L. Anderson.        Added set_value and get_value methods to the widget can be             updated after being realized. October 2007. L. Anderson.        Added option to pass filename on to cgPickColorName. October             2007. L. Anderson  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_Drawcolor_FindTLB", "CW_Drawcolor_FindTLB", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_Drawcolor_FindTLB", "", "startID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_Drawcolor_Error_Message", "CW_Drawcolor_Error_Message", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_Drawcolor_Error_Message", "", "TracebackNoName_ExtratheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DrawColor::GetTLB", "CW_DrawColor::GetTLB", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DrawColor::GetTLB", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DrawColor::Realize", "CW_DrawColor::Realize", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DrawColor::Realize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DrawColor_Realize", "CW_DrawColor_Realize", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DrawColor_Realize", "", "drawID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DrawColor_Pickcolor", "CW_DrawColor_Pickcolor", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DrawColor_Pickcolor", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DrawColor::Pickcolor", "CW_DrawColor::Pickcolor", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DrawColor::Pickcolor", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DrawColor_Set_Value", "CW_DrawColor_Set_Value", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DrawColor_Set_Value", "", "idnewcolor", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DrawColor::Set_Value", "CW_DrawColor::Set_Value", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DrawColor::Set_Value", "", "newcolor", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DrawColor_Get_Value", "CW_DrawColor_Get_Value", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DrawColor_Get_Value", "", "id", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DrawColor::Get_Value", "CW_DrawColor::Get_Value", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DrawColor::Get_Value", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DRAWCOLOR::Init", "CW_DRAWCOLOR::Init", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DRAWCOLOR::Init", "", "ColorColumnEvent_FuncEvent_ProFilenameIndexLabel_LeftLabel_RightLabelSizeLabelTextTitleUValueXSizeYSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DRAWCOLOR_Kill_Notify", "CW_DRAWCOLOR_Kill_Notify", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DRAWCOLOR_Kill_Notify", "", "drawID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DRAWCOLOR::Cleanup", "CW_DRAWCOLOR::Cleanup", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DRAWCOLOR::Cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DRAWCOLOR__DEFINE", "CW_DRAWCOLOR__DEFINE", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DRAWCOLOR__DEFINE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/cw_drawcolor.html#CW_DRAWCOLOR", "CW_DRAWCOLOR", 'routine in <a href="coyote/cw_drawcolor.html">cw_drawcolor.pro</a>', "cw_drawcolor.pro", "", "CW_DRAWCOLOR", "", "ColorColumnEvent_FuncEvent_ProIndexFilenameLabel_LeftLabel_RightLabelSizeLabelTextObjectTitleUValueXSizeYSizeparent", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/cw_spacer.html", "cw_spacer.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "cw_spacer.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/cw_spacer.html#CW_Spacer", "CW_Spacer", 'routine in <a href="coyote/cw_spacer.html">cw_spacer.pro</a>', "cw_spacer.pro", "", "CW_Spacer", "", "parentspacer", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/cyoalimbstrips.html", "cyoalimbstrips.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "cyoalimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/cyoalimbstrips.html#cyoalimbstrips", "cyoalimbstrips", 'routine in <a href="code_snapshots/jul25/cyoalimbstrips.html">cyoalimbstrips.pro</a>', "cyoalimbstrips.pro", "", "cyoalimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image     Fun trivia, the name is an acronym for  Choose Your Own Adventure , meaning this program scales to whatever limb width you want.  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/cyoalimbstrips.html", "cyoalimbstrips.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "cyoalimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/cyoalimbstrips.html#cyoalimbstrips", "cyoalimbstrips", 'routine in <a href="code_snapshots/sep11/cyoalimbstrips.html">cyoalimbstrips.pro</a>', "cyoalimbstrips.pro", "", "cyoalimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   fixfid           If set, marks the second run of centroidwholesuns and attempts to fix any chord slicing if the chord edge crosses a fiducial.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/cyoalimbstrips.html", "cyoalimbstrips.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "cyoalimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/cyoalimbstrips.html#cyoalimbstrips", "cyoalimbstrips", 'routine in <a href="sep20/cyoalimbstrips.html">cyoalimbstrips.pro</a>', "cyoalimbstrips.pro", "", "cyoalimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   fixfid           Strucutre comtaining the fiducial positions to be used for chord checking.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dao_value.html", "dao_value.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dao_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dao_value.html#DAO_VALUE", "DAO_VALUE", 'routine in <a href="idlastro/dao_value.html">dao_value.pro</a>', "dao_value.pro", "", "DAO_VALUE", " NAME: 	DAO_VALUE  PURPOSE: 	Returns the value of a DAOPHOT point-spread function at a set of points.  EXPLANATION: 	The value of the point-spread function is the sum of a 	two-dimensional integral under a bivariate Gaussian function, and 	a value obtained by interpolation in a look-up table.  DAO_VALUE will 	optionally compute the derivatives wrt X and Y   CALLING SEQUENCE: 	Result = DAO_VALUE( xx, yy, gauss, psf, [ dvdx, dvdy ] )   INPUTS: 	XX,YY   - the real coordinates of the desired point relative 		to the centroid of the point-spread function. 	GAUSS  -  5 element vector describing the bivariate Gaussian 	GAUSS(0)- the peak height of the best-fitting Gaussian profile. 	GAUSS(1,2) - x and y offsets from the centroid of the point-spread 		function to the center of the best-fitting Gaussian. 	GAUSS(3,4) - the x and y sigmas of the best-fitting Gaussian. 	PSF  -  a NPSF by NPSF array containing the look-up table.   OUTPUTS:     RESULT - the computed value of the point-spread function at              a position XX, YY relative to its centroid (which              coincides with the center of the central pixel of the              look-up table).   OPTIONAL OUTPUTS:        DVDX,DVDY - the first derivatives of the composite point-spread              function with respect to x and y.   NOTES  	although the arguments XX,YY of the function DAO_VALUE 	are relative to the centroid of the PSF, the function RINTER which 	DAO_VALUE calls requires coordinates relative to the corner of the 	array (see code).   PROCEDURES CALLED: 	DAOERF, RINTER()  REVISON HISTORY: 	Adapted to IDL by B. Pfarr, STX, 11/17/87 from 1986 STSDAS version 	of DAOPHOT 	Converted to IDL V5.0   W. Landsman   September 1997  ", "XXYYGAUSSPSFDVDXDVDY", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/daoerf.html", "daoerf.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "daoerf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/daoerf.html#daoerf", "daoerf", 'routine in <a href="idlastro/daoerf.html">daoerf.pro</a>', "daoerf.pro", "", "daoerf", " NAME: 	DAOERF  PURPOSE: 	Calulates the intensity, and derivatives, of a 2-d Gaussian PSF  EXPLANATION: 	Corrects for the finite size of a pixel by integrating the Gaussian 	over the size of the pixel.    Used in the IDL-DAOPHOT sequence.   CALLING SEQUENCE: 	DAOERF, XIN, YIN, A, F, [ PDER ]   INPUTS: 	XIN - input scalar, vector or array, giving X coordinate values 	YIN - input scalar, vector or array, giving Y coordinate values, must 		have same number of elements as XIN. 	A - 5 element parameter array describing the Gaussian 		A(0) - peak intensity 		A(1) - X position of peak intensity (centroid) 		A(2) - Y position of peak intensity (centroid) 		A(3) - X sigma of the gaussian (=FWHM/2.345) 		A(4) - Y sigma of gaussian   OUTPUTS: 	F - array containing value of the function at each (XIN,YIN) 	    The number of output elements in F and PDER is identical with 		the number of elements in X and Y   OPTIONAL OUTPUTS: 	PDER - 2 dimensional array of size (NPTS,5) giving the analytic 		derivative at each value of F with respect to each parameter A.   REVISION HISTORY: 	Written: W. Landsman                October, 1987 	Converted to IDL V5.0   W. Landsman   September 1997  ", "xyafpder", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__center.html", "data__center.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "data__center.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__center.html#data::center", "data::center", 'routine in <a href="code_snapshots/obsolete_code/data__center.html">data__center.pro</a>', "data__center.pro", "", "data::center", "       Had to make a new version of comp3 because the old one called scanbox() by default   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Print the elapsed time  file           What file to find 3 centers for  scan_width           How apart the scans are for minicrop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__combine.html", "data__combine.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "data__combine.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__combine.html#data::combine", "data::combine", 'routine in <a href="code_snapshots/obsolete_code/data__combine.html">data__combine.pro</a>', "data__combine.pro", "", "data::combine", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "time           Outputs how much time the program takes   file           What file to find 3 centers for  scan_width           How apart the scans are for minicrop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__crop.html", "data__crop.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "data__crop.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__crop.html#data::crop", "data::crop", 'routine in <a href="code_snapshots/obsolete_code/data__crop.html">data__crop.pro</a>', "data__crop.pro", "", "data::crop", "       Loads a triple-sun image and crops out selected regions one-by-one.   ", "timeregion           Which sun out of the three to find the center of. Defaults to the brightest sun   file           What file to find 3 centers for  scan_width           How apart the scans are for minicrop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__define.html", "data__define.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "data__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__define.html#data::init", "data::init", 'routine in <a href="code_snapshots/obsolete_code/data__define.html">data__define.pro</a>', "data__define.pro", "", "data::init", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__define.html#data::set", "data::set", 'routine in <a href="code_snapshots/obsolete_code/data__define.html">data__define.pro</a>', "data__define.pro", "", "data::set", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__define.html#data::get", "data::get", 'routine in <a href="code_snapshots/obsolete_code/data__define.html">data__define.pro</a>', "data__define.pro", "", "data::get", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__define.html#data::read", "data::read", 'routine in <a href="code_snapshots/obsolete_code/data__define.html">data__define.pro</a>', "data__define.pro", "", "data::read", "", "file", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__define.html#data__define", "data__define", 'routine in <a href="code_snapshots/obsolete_code/data__define.html">data__define.pro</a>', "data__define.pro", "", "data__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__minicrop.html", "data__minicrop.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "data__minicrop.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/data__minicrop.html#data::minicrop", "data::minicrop", 'routine in <a href="code_snapshots/obsolete_code/data__minicrop.html">data__minicrop.pro</a>', "data__minicrop.pro", "", "data::minicrop", "       Figures out where the boundaries are depending solely on the threshold.   ", "time           Print the elapsed time  scan_width           How apart the scans are for minicrop().  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  temparr           2D array to check boundary limits of 		thresh : in, required, type=float 			What the minimum threshold will be for scanning  thresh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/date.html", "date.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "date.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/date.html#DATE", "DATE", 'routine in <a href="idlastro/date.html">date.pro</a>', "date.pro", "", "DATE", " NAME: 	DATE  PURPOSE: 	Convert day-of-year to a DD-MMM-YYYY string   CALLING SEQUENCE: 	D_String = DATE(Year, day )   INPUTS: 	Year - Integer scalar specifying the year.   If the year contains only 		two digits, then it is assumed to indicate the number of 		years after 1900.  	Day - Integer scalar giving number of days after Jan 0 of the 		specified year.    Can be larger than 366   OUTPUTS: 	D_String - String giving date in format '13-MAR-1986'   RESTRICTIONS: 	Will not work for years before 100 AD  EXAMPLE: 	IDL&gt; print, date(1997,279) 		'6-Oct-1997'   MODIFICATION HISTORY:        D.M. fecit  24 October,1983 	Work for years outside of the 19th century  W. Landsman  September 1997 	Converted to IDL V5.0   W. Landsman   September 1997  ", "YEARDAY", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/date_conv.html", "date_conv.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "date_conv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/date_conv.html#date_conv", "date_conv", 'routine in <a href="idlastro/date_conv.html">date_conv.pro</a>', "date_conv.pro", "", "date_conv", " NAME:      DATE_CONV  PURPOSE:      Procedure to perform conversion of dates to one of three possible formats.   EXPLANATION:      The following date formats are allowed         format 1: real*8 scalar encoded as:                year*1000 + day + hour/24. + min/24./60 + sec/24./60/60                where day is the day of year (1 to 366)        format 2: Vector encoded as:                date[0] = year (eg. 2005)                date[1] = day of year (1 to 366)                date[2] = hour                date[3] = minute                date[4] = second        format 3: string (ascii text) encoded as                DD-MON-YEAR HH:MM:SS.SS                (eg.  14-JUL-2005 15:25:44.23)             OR                YYYY-MM-DD HH:MM:SS.SS  (ISO standard)                (eg.  1987-07-14 15:25:44.23 or 1987-07-14T15:25:44.23)         format 4: three element vector giving spacecraft time words        from a Hubble Space Telescope (HST) telemetry packet.   Based on        total number of secs since midnight, JAN. 1, 1979         format 5: Julian day. As this is also a scalar, like format 1,        	the distinction between the two on input is made based on their        	value. Numbers &gt; 2300000 are interpreted as Julian days.   CALLING SEQUENCE        results = DATE_CONV( DATE, TYPE )   INPUTS:        DATE - input date in one of the possible formats. Must be scalar.        TYPE - type of output format desired.  If not supplied then                format 3 (real*8 scalar) is used.                        valid values:                        'REAL'  - format 1                        'VECTOR' - format 2                        'STRING' - format 3                        'FITS' - YYYY-MM-DDTHH:MM:SS.SS'                        'JULIAN' - Julian date                        'MODIFIED' - Modified Julian date (JD-2400000.5)                TYPE can be abbreviated to the single character strings 'R',                'V', 'S', 'F', 'J', and 'M'.                Nobody wants to convert TO spacecraft time (I hope!)  OUTPUTS:        The converted date is returned as the function value.   EXAMPLES:        IDL&gt; print,date_conv('2006-03-13 19:58:00.00'),f='(f15.5)'              2006072.83194        IDL&gt; print,date_conv( 2006072.8319444d,'F')              2006-03-13T19:58:00.00        IDL&gt; print,date_conv( 2006072.8319444d,'V')              2006.00      72.0000      19.0000      57.0000      59.9962        IDL&gt; print,date_conv( 2006072.8319444d,'J'), f='(f15.5)'              2453808.33194   HISTORY:       version 1  D. Lindler  July, 1987       adapted for IDL version 2  J. Isensee  May, 1990       Made year 2000 compliant; allow ISO format input  jls/acc Oct 1998       DJL/ACC Jan 1998, Modified to work with dates such as 6-JAN-1996 where                day of month has only one digit.       DJL, Nov. 2000, Added input/output format YYYY-MM-DDTHH:MM:SS.SS       Replace spaces with '0' in output FITS format  W.Landsman April 2006       Added Julian date capabilities on input and output.  M.Perrin, July 2007       Removed spurious /WARN keyword to MESSAGE W.L. Feb 2012  ", "datetype", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/daycnv.html", "daycnv.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "daycnv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/daycnv.html#DAYCNV", "DAYCNV", 'routine in <a href="idlastro/daycnv.html">daycnv.pro</a>', "daycnv.pro", "", "DAYCNV", " NAME:        DAYCNV  PURPOSE:        Converts Julian dates to Gregorian calendar dates   CALLING SEQUENCE:        DAYCNV, XJD, YR, MN, DAY, HR   INPUTS:        XJD = Julian date, positive double precision scalar or vector   OUTPUTS:        YR = Year (Integer)        MN = Month (Integer)        DAY = Day (Integer)        HR = Hours and fractional hours (Real).   If XJD is a vector,                then YR,MN,DAY and HR will be vectors of the same length.   EXAMPLE:        IDL&gt; DAYCNV, 2440000.D, yr, mn, day, hr         yields yr = 1968, mn =5, day = 23, hr =12.   WARNING:        Be sure that the Julian date is specified as double precision to        maintain accuracy at the fractional hour level.   METHOD:        Uses the algorithm of Fliegel and Van Flandern (1968) as reported in        the  Explanatory Supplement to the Astronomical Almanac  (1992), p. 604        Works for all Gregorian calendar dates with XJD &gt; 0, i.e., dates after        -4713 November 23.  REVISION HISTORY:        Converted to IDL from Yeoman's Comet Ephemeris Generator,        B. Pfarr, STX, 6/16/88        Converted to IDL V5.0   W. Landsman   September 1997  ", "XJDYRMNDAYHR", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/db_ent2ext.html", "db_ent2ext.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "db_ent2ext.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/db_ent2ext.html#DB_ENT2EXT", "DB_ENT2EXT", 'routine in <a href="idlastro/db_ent2ext.html">db_ent2ext.pro</a>', "db_ent2ext.pro", "", "DB_ENT2EXT", " NAME: 	DB_ENT2EXT  PURPOSE: 	Convert a database entry to external (IEEE) data format  EXPLANATION: 	Converts a database entry to external (IEEE) data format prior to 	writing it.  Called from DBWRT.   CALLING SEQUENCE: 	DB_ENT2EXT, ENTRY   INPUTS: 	ENTRY	= Byte array containing a single record to be written to the 		  database file.   OUTPUTS: 	ENTRY	= The converted array is returned in place of the input array.   COMMON BLOCKS: 	DB_COM   HISTORY: 	Version 1, William Thompson, GSFC/CDS (ARC), 1 June 1994 	Version 2, William Thompson, GSFC/CDS (ARC), 15 September 1995 			Fixed bug where only the first element in a 			multidimensional array was converted.        Version 2.1 W. Landsman August 2010 Fix for multidimensional strings        Version 2.2 W. Landsman Sep 2011 Work with new DB format  ", "ENTRY", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/db_ent2host.html", "db_ent2host.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "db_ent2host.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/db_ent2host.html#DB_ENT2HOST", "DB_ENT2HOST", 'routine in <a href="idlastro/db_ent2host.html">db_ent2host.pro</a>', "db_ent2host.pro", "", "DB_ENT2HOST", " NAME: 	DB_ENT2HOST  PURPOSE: 	Converts a database entry from external data format to host format.  EXPLANATION: 	All items are extracted from the entry, and then converted to host 	format, and placed back into the entry.  Called from DBRD and DBEXT_DBF.   CALLING SEQUENCE: 	DB_ENT2HOST, ENTRY, DBNO   INPUTS: 	ENTRY	= Byte array containing a single record read from the 		  database file. 	DBNO	= Number of the opened database file.   OUTPUTS: 	ENTRY	= The converted array is returned in place of the input array.   COMMON BLOCKS: 	DB_COM   HISTORY: 	Version 1, William Thompson, GSFC/CDS (ARC), 1 June 1994 	Version 2, William Thompson, GSFC/CDS (ARC), 15 September 1995 			Fixed bug where only the first element in a 			multidimensional array was converted. 	Version 3, Richard Schwartz, GSFC/SDAC, 23 August 1996 		Allow 2 dimensional byte arrays for entries to facilitate 		multiple entry processing.    Pass IDLTYPE onto IEEE_TO_HOST        Version 4, 2 May 2003, W. Thompson                Use BSWAP keyword to DBXVAL instead of calling IEEE_TO_HOST.        Version 4.1 W. Landsman August 2010 Fix for multidimensional strings        Version 4.2 W. Landsman Sep 2011 Work with new DB format  ", "ENTRYDBNO", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/db_info.html", "db_info.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "db_info.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/db_info.html#db_info", "db_info", 'routine in <a href="idlastro/db_info.html">db_info.pro</a>', "db_info.pro", "", "db_info", " NAME:        DB_INFO  PURPOSE:        Function to obtain information on opened data base file(s)   CALLING SEQUENCES:        1)  result = db_info(request)        2)  result = db_info(request,dbname)  INPUTS (calling sequence 1):         request - string specifying requested value(s)                value of request          value returned in result                        'open'          Flag set to 1 if data base(s) are opened                        'number'        Number of data base files opened                        'items'         Total number of items (all db's opened)                        'update'        update flag (1 if opened for update)                        'unit_dbf'      Unit number of the .dbf files                        'unit_dbx'      Unit number of the .dbx files                        'entries'       Number of entries in the db's                        'length'        Record lengths for the db's                        'external'      True if the db's are in external format   INPUTS (calling sequence 2):         request - string specifying requested value(s)                   value of request       value returned in result                        'name'          Name of the data base                        'number'        Sequential number of the db                        'items'         Number of items for this db                        'item1'         Position of item1 for this db                                        in item list for all db's                        'item2'         Position of last item for this db.                        'pointer'       Number of the item which points                                        to this db. 0 for first or primary                                        db.  -1 if link file pointers.                        'length'        Record length for this db.                        'title'         Title of the data base                        'unit_dbf'      Unit number of the .dbf file                        'unit_dbx'      Unit number of the .dbx file                        'entries'       Number of entries in the db                        'seqnum'        Last sequence number used                        'alloc'         Allocated space (# entries)                        'update'        1 if data base opened for update                        'external'      True if data base in external format                        'newdb'         True if new (post Oct 2010) format                                        that allows entries &gt; 32767 bytes         dbname - data base name or number  OUTPUTS:        Requested value(s) are returned as the function value.   HISTORY:        version 1  D. Lindler    Oct. 1987        changed type from 1 to 7 for IDLV2, J. Isensee, Nov., 1990        William Thompson, GSFC/CDS (ARC), 30 May 1994                Added EXTERNAL request type.        Support new DB format, add NEWDB request type W. Landsman Oct 2010  ", "requestdbname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/db_item.html", "db_item.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "db_item.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/db_item.html#db_item", "db_item", 'routine in <a href="idlastro/db_item.html">db_item.pro</a>', "db_item.pro", "", "db_item", " NAME:        DB_ITEM  PURPOSE:        Returns the item numbers and other info. for an item name.  EXPLANATION:        Procedure to return the item numbers and other information        of a specified item name   CALLING SEQUENCE:        db_item, items, itnum, ivalnum, idltype, sbyte, numvals, nbytes   INPUTS:        items - item name or number                form 1  scalar string giving item(s) as list of names                        separated by commas                form 2  string array giving list of item names                form 3  string of form '$filename' giving name                        of text file containing items (one item per                        line)                form 4  integer scalar giving single item number or                          integer vector list of item numbers                form 5  Null string specifying interactive selection                        Upon return items will contain selected items                        in form 1                form 6  '*'     select all items   OUTPUTS:        itnum - item number        ivalnum - value(s) number from multiple valued item        idltype - data type(s) (1=string,2=byte,4=i*4,...)        sbyte - starting byte(s) in entry        numvals - number of data values for item(s)                It is the full length of a vector item unless                a subscript was supplied        nbytes - number of bytes for each value     All outputs are vectors even if a single item is requested   OPTIONAL INPUT KEYWORDS:        ERRMSG   = If defined and passed, then any error messages will                be returned to the user in this parameter rather than depending                on the MESSAGE routine in IDL.  If no errors are encountered,                then a null string is returned.  In order to use this feature,                ERRMSG must be defined first, e.g.                                 ERRMSG = ''                                DB_ITEM, ERRMSG=ERRMSG, ...                                IF ERRMSG NE '' THEN ...   PROCEDURE CALLS:        DB_INFO, GETTOK, SELECT_W   REVISION HISTORY:        Written:   D. Lindler, GSFC/HRS, October 1987        Version 2, William Thompson, GSFC, 17-Mar-1997                        Added keyword ERRMSG        Use STRSPLIT instead of GETTOK to parse form 1, W. Landsman July 2002        Assume since V5.4 use FILE_EXPAND_PATH() instead of SPEC_DIR()                W. Landsman April 2006        Support new DB format allowing entry lengths &gt; 32767 bytes WL Oct 2010        Ignore blank lines in .items file WL February 2011  ", "errmsgitemsitnumivalnumidltypesbytenumvalsnbytes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/db_item_info.html", "db_item_info.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "db_item_info.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/db_item_info.html#db_item_info", "db_item_info", 'routine in <a href="idlastro/db_item_info.html">db_item_info.pro</a>', "db_item_info.pro", "", "db_item_info", " NAME: 	DB_ITEM_INFO  PURPOSE: 	routine to return information on selected item(s) in the opened 	data bases.   CALLING SEQUENCE: 	result = db_item_info( request, itnums)  INPUTS: 	request - string giving the requested information. 		'name'		- item names 		'idltype'	- IDL data type (integers) 				  see documentation of intrinsic SIZE funtion 		'nvalues'	- vector item length (1 for scalar) 		'sbyte'		- starting byte in .dbf record (use bytepos 				  to get starting byte in record returned by 				  dbrd) 		'nbytes'	- bytes per data value 		'index'		- index types 		'description'	- description of the item 		'pflag'		- pointer item flags 		'pointer'	- data bases the items point to 		'format'	- print formats 		'flen'		- print field length 		'headers'	- print headers 		'bytepos'	- starting byte in dbrd record for the items 		'dbnumber'	- number of the opened data base 		'pnumber'	- number of db it points to (if the db is 					opened) 		'itemnumber'	- item number in the file  	itnums -(optional) Item numbers.  If not supplied info on all items 		are returned.  OUTPUT: 	Requested information is returned as a vector.  Its type depends 	on the item requested.  HISTORY: 	version 1  D. Lindler  Nov. 1987 	Converted to IDL V5.0   W. Landsman   September 1997        Support new DB format which allows &gt; 32767 bytes W.L. Oct 2010  ", "requestitnums", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/db_or.html", "db_or.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "db_or.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/db_or.html#db_or", "db_or", 'routine in <a href="idlastro/db_or.html">db_or.pro</a>', "db_or.pro", "", "db_or", " NAME: 	DB_OR  PURPOSE: 	Combine two vectors of entry numbers, removing duplicate values.  EXPLANATION: 	DB_OR can also be used to remove duplicate values from any longword 	vector   CALLING SEQUENCE: 	LIST = DB_OR( LIST1 )          ;Remove duplicate values from LIST1 		or 	LIST = DB_OR( LIST1, LIST2 )   ;Concatenate LIST1 and LIST2, remove dups   INPUTS: 	LIST1, LIST2 - Vectors containing entry numbers, must be non-negative 			integers or longwords.  OUTPUT: 	LIST - Vector containing entry numbers in either LIST1 or LIST2   METHOD 	DB_OR returns where the histogram of the entry vectors is non-zero   PROCEDURE CALLS 	ZPARCHECK - checks parameters  REVISION HISTORY: 	Written,     W. Landsman             February, 1989 	Check for degenerate values  W.L.    February, 1993 	Converted to IDL V5.0   W. Landsman   September 1997  ", "list1list2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/db_titles.html", "db_titles.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "db_titles.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/db_titles.html#db_titles", "db_titles", 'routine in <a href="idlastro/db_titles.html">db_titles.pro</a>', "db_titles.pro", "", "db_titles", " NAME: 	DB_TITLES   PURPOSE: 	Print database name and title.  Called by DBHELP   CALLING SEQUENCE: 	db_titles, fnames, titles   INPUT: 	fnames - string array of data base names   SIDE EFFECT: 	Database name is printed along with the description in the .dbh file   HISTORY: 	version 2  W. Landsman May, 1989 	modified to work under Unix, D. Neill, ACC, Feb 1991. 	William Thompson, GSFC/CDS (ARC), 1 June 1994 		Added support for external (IEEE) representation. 	William Thompson, GSFC, 3 November 1994 			Modified to allow ZDBASE to be a path string. 	Converted to IDL V5.0   W. Landsman   September 1997        Assume since V5.5,      W. Landsman   September 2006  ", "fnamestitles", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbbuild.html", "dbbuild.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbbuild.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbbuild.html#dbbuild", "dbbuild", 'routine in <a href="idlastro/dbbuild.html">dbbuild.pro</a>', "dbbuild.pro", "", "dbbuild", " NAME: 	DBBUILD  PURPOSE: 	Build a database by appending new values for every item.  EXPLANATION: 	The database must be opened for update (with DBOPEN) before calling 	DBBUILD.     This version for IDL V6.1 or later.   CALLING SEQUENCE: 	DBBUILD, [ v1, v2, v3, v4......v50, /NOINDEX, /SILENT, STATUS =  ]   INPUTS: 	v1,v2....v50 - vectors containing values for all items in the database.          V1 contains values for the first item, V2 for the second, etc.          The number of vectors supplied must equal the number of items          (excluding entry number) in the database.  The number of elements          in each vector should be the same.   A multiple valued item          should be dimensioned NVALUE by NENTRY, where NVALUE is the number          of values, and NENTRY is the number of entries.   OPTIONAL INPUT KEYWORDS: 	/NOINDEX - If this keyword is supplied and non-zero then DBBUILD will              *not* create an indexed file.    Useful to save time if              DBBUILD is to be called several times and the indexed file need              only be created on the last call  	/SILENT  - If the keyword SILENT is set and non-zero, then DBBUILD 	      will not print a message when the index files are generated   OPTIONAL OUTPUT KEYWORD: 	STATUS - Returns a status code denoting whether the operation was 	      successful (1) or unsuccessful (0).  Useful when DBBUILD is 	      called from within other applications.   EXAMPLE: 	Suppose a database named STARS contains the four items NAME,RA,DEC, and 	FLUX.   Assume that one already has the four vectors containing the 	values, and that the database definition (.DBD) file already exists.  	IDL&gt; !PRIV=2                  ;Writing to database requires !PRIV=2 	IDL&gt; dbcreate,'stars',1,1   ;Create database (.DBF) & index (.DBX) file 	IDL&gt; dbopen,'stars',1         ;Open database for update 	IDL&gt; dbbuild,name,ra,dec,flux ;Write 4 vectors into the database   NOTES: 	Do not call DBCREATE before DBBUILD if you want to append entries to 	an existing database  	DBBUILD checks that each value vector matches the idl type given in the 	database definition (..dbd) file, and that character strings are the 	proper length.  PROCEDURE CALLS:        DBCLOSE, DBINDEX, DBXPUT, DBWRT, IS_IEEE_BIG()  REVISION HISTORY: 	Written          W. Landsman           March, 1989 	Added /NOINDEX keyword           W. Landsman        November, 1992 	User no longer need supply all items   W. Landsman  December, 1992 	Added STATUS keyword, William Thompson, GSFC, 1 April 1994 	Added /SILENT keyword, William Thompson, GSFC, October 1995 	Allow up to 30 items, fix problem if first item was multiple value 				  W. Landsman    GSFC, July 1996 	Faster build of external databases on big endian machines 				  W. Landsman    GSFC, November 1997        Use SIZE(/TNAME) for error mesage display  W.Landsman   July 2001        Fix message display error introduced July 2001  W. Landsman   Oct. 2001        Make sure error message appears even if !QUIET is set W.L November 2006        Major rewrite to use SCOPE_VARFETCH, accept 50 input items                    W. Landsman    November 2006       Fix warning if parameters have different # of elements W.L.  May 2010       Fix warning if scalar parameter supplied W.L.  June 2010       Fix for when first parameter is multi-dimensioned W.L. July 2010       Check data type of first parameter W.L. Jan 2012  ", "NOINDEXSTATUSSILENTv1v2v3v4v5v6v7v8v9v10v11v12v13v14v15v16v17v18v19v20v21v22v23v24v25v26v27v28v29v30v31v32v33v34v35v36v37v38v39v40v41v42v43v44v45v46v47v48v49v50", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbcircle.html", "dbcircle.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbcircle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbcircle.html#dbcircle", "dbcircle", 'routine in <a href="idlastro/dbcircle.html">dbcircle.pro</a>', "dbcircle.pro", "", "dbcircle", " NAME:       DBCIRCLE  PURPOSE:       Find sources in a database within specified radius of specified center  EXPLANATION:       Database must include items named 'RA' (in hours) and 'DEC' (in degrees)       and must have previously been opened with DBOPEN   CALLING SEQUENCE:      list = DBCIRCLE( ra_cen, dec_cen, [radius, dis, sublist, /SILENT,                                 /GALACTIC, TO_B1950, /TO_J2000, COUNT= ] )   INPUTS:        RA_CEN - Right ascension of the search center in decimal HOURS, scalar        DEC_CEN - Declination of the search center in decimal DEGREES, scalar                RA_CEN and DEC_CEN should be in the same equinox as the                currently opened catalog.   OPTIONAL INPUT:        RADIUS - Radius of the search field in arc minutes, scalar.                DBCIRCLE prompts for RADIUS if not supplied.        SUBLIST - Vector giving entry numbers in currently opened database                to be searched.  Default is to search all entries   OUTPUTS:      LIST - Vector giving entry numbers in the currently opened catalog             which have positions within the specified search circle             LIST is set to -1 if no sources fall within the search circle   OPTIONAL OUTPUT        DIS -  The distance in arcminutes of each entry specified by LIST                to the search center (given by RA_CEN and DEC_CEN)   OPTIONAL KEYWORD INPUT:        /GALACTIC - if set, then the first two parameters are interpreted as                  Galactic coordinates in degrees, and is converted internally                  to J2000 celestial to search the database.        /SILENT - If this keyword is set, then DBCIRCLE will not print the                number of entries found at the terminal        /TO_J2000 - If this keyword is set, then the entered coordinates are                assumed to be in equinox B1950, and will be converted to                J2000 before searching the database        /TO_B1950 - If this keyword is set, then the entered coordinates are                assumed to be in equinox J2000, and will be converted to                B1950 before searching the database                NOTE: The user must determine on his own whether the database                is in B1950 or J2000 coordinates.  OPTIONAL KEYWORD OUTPUT:        COUNT - - Integer scalar giving the number of valid matches  METHOD:        A DBFIND search is first performed on a square area of given radius.        The list is the restricted to a circular area by using GCIRC to        compute the distance of each object to the field center.   RESTRICTIONS;        The database must have items 'RA' (in hours) and 'DEC' (in degrees).        Alternatively, the database could have items RA_OBJ and DEC_OBJ       (both in degrees)  EXAMPLE:        Find all Hipparcos stars within 40' of the nucleus of M33        (at J2000 1h 33m 50.9s 30d 39' 36.7'')         IDL&gt; dbopen,'hipparcos'        IDL&gt; list = dbcircle( ten(1,33,50.9), ten(3,39,36.7), 40)   PROCEDURE CALLS:        BPRECESS, DBFIND(), DBEXT, DB_INFO(), GCIRC, GLACTC, JPRECESS  REVISION HISTORY:       Written W. Landsman     STX           January 1990       Fixed search when crossing 0h         July 1990       Spiffed up code a bit     October, 1991       Leave DIS vector unchanged if no entries found W. Landsman July 1999       Use maximum declination, rather than declination at field center to       correct RA for latitude effect    W. Landsman   September 1999       Added COUNT, GALACTIC keywords  W. Landsman   December 2008       Fix problem when RA range exceeds 24h  W. Landsman   April 2009       Work as advertised for RA_OBJ field  W. Landsman June 2010  ", "SILENTTO_J2000TO_B1950GALACTICCOUNTra_cendec_cenradiusdissublist", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbclose.html", "dbclose.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbclose.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbclose.html#dbclose", "dbclose", 'routine in <a href="idlastro/dbclose.html">dbclose.pro</a>', "dbclose.pro", "", "dbclose", " NAME:        DBCLOSE  PURPOSE:        procedure to close a data base file   CALLING SEQUENCE:        dbclose   INPUTS:        None   OUTPUTS        None   SIDE EFFECTS:        the data base files currently opened are closed   PROCEDURE CALLS:        DB_INFO(), HOST_TO_IEEE  HISTORY:        version 2  D. Lindler  Oct. 1987        For IDL version 2      August 1990        William Thompson, GSFC/CDS (ARC), 30 May 1994                 Added support for external (IEEE) data format        Converted to IDL V5.0   W. Landsman   September 1997  ", "dummy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbcompare.html", "dbcompare.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbcompare.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbcompare.html#dbcompare", "dbcompare", 'routine in <a href="idlastro/dbcompare.html">dbcompare.pro</a>', "dbcompare.pro", "", "dbcompare", " NAME:      DBCOMPARE  PURPOSE:      Display two entries in an IDL database side by side in a column format   CALLING SEQUENCE:      dbcompare, list1, list2, [items, TEXTOUT= , /DIFF]   INPUTS:      list1 - Integer scalar giving first entry number to be compared.      list2 - Integer scalar giving second entry number to be compared.   OPTIONAL INPUT-OUTPUT:      items - items to be compared, if not supplied then all items will be           compared.    The items can be specified in any of the following ways:               form 1  scalar string giving item(s) as list of names                      separated by commas              form 2  string array giving list of item names              form 3  string of form '$filename' giving name                      of text file containing items (one item per line)                      line)              form 4  integer scalar giving single item number or                      integer vector list of item numbers              form 5  Null string specifying interactive selection.   This                      is the default if 'items' is not supplied              form 6  '*'     select all items (= default)              If items was undefined or a null string on input, then             on output it will contain the items interactively selected.   OPTIONAL INPUT KEYWORDS:      /DIFF - If this keyword is set and non-zero, then only the items              in the database that differ will be printed       TEXTOUT -  Scalar Integer (1-7) Used to determine output device.   See                TEXTOPEN for more info.   SYSTEM VARIABLES:      Output device controlled by non-standard system variable !TEXTOUT, if      TEXTOUT keyword is not used.   EXAMPLE:      Display entries 3624 and 3625 in column form showing only the items      that differ.                IDL&gt; dbcompare,3624,3625,/diff   PROCEDURES USED:      DB_INFO(), DB_ITEM, DB_ITEM_INFO(), DBRD, DBXVAL()      TEXTOPEN, TEXTCLOSE  HISTORY:      Written,  W. Landsman            July 1996      Fix documentation, add Syntax display    W. Landsman   November 1998      Replace DATATYPE() with size(/TNAME)   W. Landsman    November 2001      Assume since V5.5, remove VMS call  W. Landsman       September 2006      Fix problem with multiple values when /DIFF set W. Landsman April 2007  ", "TEXTOUTDIFFlist1list2items", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbcreate.html", "dbcreate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbcreate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbcreate.html#dbcreate", "dbcreate", 'routine in <a href="idlastro/dbcreate.html">dbcreate.pro</a>', "dbcreate.pro", "", "dbcreate", " NAME:        DBCREATE  PURPOSE:        Create a new data base (.dbf), index (.dbx) or description (.dbh) file  EXPLANATION:        A database definition (.dbd) file must already exist in the current        directory or in a ZDBASE directory.    The new .dbf, .dbx and/or .dbh        files will be written to the same directory.   So if the .dbd file is        in a ZDBASE directory, then the user must have write privilege to that        directory         This version allows record length to be larger than 32767 bytes  CALLING SEQUENCE:        dbcreate, name,[ newindex, newdb, maxitems]  [,/EXTERNAL, MAXENTRY=]   INPUTS:        name- name of the data base (with no qualifier), scalar string.                The description will be read from the file  NAME .dbd                Maximum length of name is 19 characters.   OPTIONAL INPUTS:        newindex - if non-zero then a new index file is created,                otherwise it is assumed that changes do not affect the                index file. (default=0)        newdb - if non-zero then a new data base file (.dbf) will                be created. Otherwise changes are assumed not to affect                the file's present format.        maxitems - maximum number of items in data base.                If not supplied then the number of items is                limited to 200.   OUTPUTS:        NONE.   OPTIONAL INPUT KEYWORDS:         external - If set, then the database is written with an external data                representation.  This allows the database files to be used on                any computer platform, e.g. through NFS mounts, but some                overhead is added to reading the files.  The default is to                write the data in the native format of the computer being used.                 This keyword is only paid attention to if NEWDB or NEWINDEX                are nonzero.  Otherwise, the database is opened to find                out if it uses external representation or not.                 Extreme caution should be used if this keyword is used with                only NEWINDEX set to a nonzero value.  This mode is allowed so                that databases written on machines which already use the                external data representation format, e.g. Sun workstations, to                be marked external so that other machines can read them.         MAXENTRY - positive integer giving the maximum number of entries in the                database (needed to adjust the size of the index file).   This                keyword can be used to supercede the  #maxentries line in the                .dbd file (the larger of the two numbers will be used).  PROCEDURE CALLS:        GETTOK(), FIND_WITH_DEF(), ZPARCHECK   RESTRICTIONS:        If newdb=0 is not specified, the changes to the .dbd file can        not alter the length of the records in the data base file.        and may not alter positions of current fields in the file.        permissible changes are:                1) utilization of spares to create a item or field                2) change in field name(s)                3) respecification of index items                4) changes in default print formats                5) change in data base title                6) changes in pointer specification to other data                        data bases         !priv must be 2 or greater to execute this routine.   SIDE EFFECTS:        data base description file ZDBASE:name.dbh is created        and optionally ZDBASE:name.dbf (data file) and        ZDBASE.dbx (index file) if it is a new data base.   REVISION HISTORY:        D. Lindler, GSFC/HRS, October 1987        Modified:  Version 1, William Thompson, GSFC, 29 March 1994                   Version 2, William Thompson, GSFC/CDS (ARC), 28 May 1994                   Added EXTERNAL keyword.        Version 4, William Thompson, GSFC, 3 November 1994                        Modified to allow ZDBASE to be a path string.        8/14/95  JKF/ACC - allow EXTERNAL data for newindex OR newdb modes.        Make sure all databases closed before starting W. Landsman June 1997        Added new unsigned and 64 bit integer datatypes W. Landsman July 2001        Make sure to use lowercase filenames on Unix W. Landsman May 2006        Added MAXENTRY keyword   W. Landsman July 2006        Assume since V5.5, remove obsolete keywords to OPEN W. Landsman Sep2006        No longer required to be a ZDBASE directory  W. Landsman Feb 2008        Fix Feb 2008 bug when files are in current dir W. L.  May 2008        Fix May 2008 bug when files are not in current dir (sigh) W. L. May 2008        Warn if database length exceeds 32767 bytes  W.L. Dec 2009        Remove spurious warning that database name is too long W.L. April 2010        Support entry lengths larger than 32767 bytes W.L. Oct. 2010        Better testing for valid print formats W.L. Nov 2010  ", "EXTERNALMaxentrynamenewindexnewdbmaxitems", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbdelete.html", "dbdelete.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbdelete.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbdelete.html#dbdelete", "dbdelete", 'routine in <a href="idlastro/dbdelete.html">dbdelete.pro</a>', "dbdelete.pro", "", "dbdelete", " NAME:        DBDELETE  PURPOSE:        Deletes specified entries from data base   CALLING SEQUENCE:        DBDELETE, list, [ name, /DEBUG ]   INPUTS:        list - list of entries to be deleted, scalar or vector        name - optional name of data base, scalar string.  If not specified                then the data base file must be previously opened for update                by DBOPEN.   OPERATIONAL NOTES:        !PRIV must be at least 3 to execute.   SIDE EFFECTS:        The data base file (ZDBASE:name.dbf) is modified by removing the        specified entries and reordering the remaining entry numbers        accordingly (ie. if you delete entry 100, it will be replaced        by entry 101 and the database will contain 1 less entry.   EXAMPLE:         Delete entries in a database STARS where RA=DEC = 0.0          IDL&gt; !PRIV= 3                           ;Set privileges         IDL&gt; dbopen,'STARS',1                   ;Open for update         IDL&gt; list = dbfind('ra=0.0,dec=0.0')    ;Obtain LIST vector         IDL&gt; dbdelete, list             ;Delete specified entries from db   NOTES:        The procedure is rather slow because the entire database is re-        created with the specified entries deleted.  OPTIONAL KEYWORD INPUT:         DEBUG - if this keyword is set and non-zero, then additional                diagnostics will be printed as each entry is deleted.  COMMON BLOCKS:        DBCOM  PROCEDURE CALLS:        DBINDEX, DB_INFO(), DBOPEN, DBPUT, ZPARCHECK  HISTORY        Version 2  D. Lindler  July, 1989        Updated documentation   W. Landsman    December 1992        William Thompson, GSFC, 28 February 1995                        Fixed bug when external representation used.        Fixed for case where second parameter supplied W. Landsman April 1996        Use keyword DEBUG rather than !DEBUG   W. Landsman    May 1997        Don't call DBINDEX if no indexed items  W. Landsman May 2006        Use TRUNCATE_LUN if V5.6 or later W. Landsman   Sep 2006        Fix problem when deleting last entry   W. Landsman Mar 2007        Assume since V5.6 so TRUNCATE_LUN is available   W. Landsman   ", "DEBUGlistname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbedit.html", "dbedit.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbedit.pro", "", "", " NAME:       DBEDIT   PURPOSE:        Interactively edit specified fields in an IDL database.  EXPLANATION:        The value of each field is displayed, and the user has the option        of changing or keeping the value.  Widgets will be used if they        are available.   CALLING SEQUENCE:        dbedit, list, [ items ]   INPUTS:        list - scalar or vector of database entry numbers.  Set list = 0 to        interactively add a new entry to a database.  Set list = -1 to edit        all entries.   OPTIONAL INPUTS:        items - list of items to be edited.  If omitted, all fields can be                edited.   KEYWORDS:        BYTENUM = If set, treat byte variables as numbers instead of                  characters.   COMMON BLOCKS:        DB_COM -- contains information about the opened database.        DBW_C -- contains information intrinsic to this program.   SIDE EFFECTS:        Will update the database files.   RESTRICTIIONS:        Database must be opened for update prior to running        this program.  User must be running DBEDIT from an        account that has write privileges to the databases.         If one is editing an indexed item, then after all edits are complete,        DBINDEX will be called to reindex the entire item.    This may        be time consuming.         Cannot be used to edit items with multiple values   EXAMPLE:        Suppose one had new parallaxes for all stars fainter than 5th magnitude        in the Yale Bright Star Catalog and wanted to update the PRLAX and        PRLAX_CODE fields with these new numbers         IDL&gt; !priv=2        IDL&gt; dbopen, 'yale_bs', 1            ;Open catalog for update        IDL&gt; list = dbfind( 'v&gt;5')     ;Find fainter than 5th magnitude        IDL&gt; dbedit, list, 'prlax, prlax_code'   ;Manual entry of new values   PROCEDURE:        (1) Use the cursor and point to the value you want to edit.        (2) Type the new field value over the old field value.        (3) When you are done changing all of the field values for each entry        save the entry to the databases by pressing 'SAVE ENTRY TO DATABASES'.        Here all of the values will be checked to see if they are the correct        data type.  If a field value is not of the correct data type, it will        not be saved.         Use the buttons  PREV ENTRY  and  NEXT ENTRY  to move between entry        numbers.  You must save each entry before going on to another entry in        order for your changes to be saved.         Pressing  RESET THIS ENTRY  will remove any unsaved changes to the        current entry.  REVISION HISTORY:        Adapted from Landsman's DBEDIT        added widgets,  Melissa Marsh, HSTX, August 1993        do not need to press return after entering each entry,                        fixed layout problem on SUN,                        Melissa Marsh, HSTX, January 1994        Only updates the fields which are changed. Joel Offenberg, HSTX, Mar 94        Corrected test for changed fields  Wayne Landsman  HSTX, Mar 94        Removed a couple of redundant statements W. Landsman HSTX Jan 96        Converted to IDL V5.0   W. Landsman   September 1997        Replace DATAYPE() with size(/TNAME)   W. Landsman   November 2001        Work for entry numbers &gt; 32767     W. Landsman   December 2001        Added /BYTENUM  William Thompson        13-Mar-2006        Use DIALOG_MESSAGE for error messages  W. Landsman  April 2006        Assume since V5.5, remove VMS support  W. Landsman  Sep 2006  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbedit.html#widgetedit_event", "widgetedit_event", 'routine in <a href="idlastro/dbedit.html">dbedit.pro</a>', "dbedit.pro", "", "widgetedit_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/dbedit.html#widedit", "widedit", 'routine in <a href="idlastro/dbedit.html">dbedit.pro</a>', "dbedit.pro", "", "widedit", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/dbedit.html#dbedit", "dbedit", 'routine in <a href="idlastro/dbedit.html">dbedit.pro</a>', "dbedit.pro", "", "dbedit", "", "bytenumlistitems", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbedit_basic.html", "dbedit_basic.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbedit_basic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbedit_basic.html#dbedit_basic", "dbedit_basic", 'routine in <a href="idlastro/dbedit_basic.html">dbedit_basic.pro</a>', "dbedit_basic.pro", "", "dbedit_basic", " NAME:        DBEDIT_BASIC  PURPOSE:        Subroutine of DBEDIT_BASIC to edit a database on a dumb terminal.  EXPLANATION:        Interactively edit specified fields in a database.  The        value of each field is displayed, and the user has the option        of changing or keeping the value.   CALLING SEQUENCE:        dbedit_basic, list, [ items ]   INPUTS:        list - scalar or vector of database entry numbers.  Set LIST=0                to interactively add a new entry to a database.   OPTIONAL INPUTS        items - list of items to be edited.  If not supplied, then the                value of every field will be displayed.   NOTES:        (1) Database must be opened for update (dbopen,&lt;dbname&gt;,1) before        calling DBEDIT_BASIC.  User must have write privileges on the database        files.        (2) User gets a second chance to look at edited values, before        they are actually written to the database   PROMPTS:        The item values for each entry to be edited are first displayed        User is the asked  EDIT VALUES IN THIS ENTRY (Y(es), N(o), or Q(uit))?        If user answers 'Y' or hits RETURN, then each item is displayed        with its current value, which the user can update.  If user answered        'N' then DBEDIT_BASIC skips to the next  entry.   If user answers 'Q'        then DBEDIT will exit, saving all previous changes.   EXAMPLE:        Suppose V magnitudes (V_MAG) in a database STARS with unknown values        were assigned a value of 99.9.  Once the true values become known, the        database can be edited         IDL&gt; !PRIV=2 & dbopen,'STARS',1         ;Open database for update        IDL&gt; list =  dbfind('V_MAG=99.9')       ;Get list of bad V_MAG values        IDL&gt; dbedit,list,'V_MAG'       ;Interactively insert good V_MAG values   REVISION HISTORY:        Written  W. Landsman     STX        April, 1989        Rename DBEDIT_BASIC from DBEDIT            July, 1993        Converted to IDL V5.0   W. Landsman   September 1997        Change DATATYPE() to size(/TNAME)  W. Landsman   November 2001  ", "listitems", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbext.html", "dbext.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbext.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbext.html#dbext", "dbext", 'routine in <a href="idlastro/dbext.html">dbext.pro</a>', "dbext.pro", "", "dbext", " NAME:        DBEXT  PURPOSE:        Extract values of up to 12 items from an IDL database  EXPLANATION:        Procedure to extract values of up to 12 items from        data base file, and place into IDL variables   CALLING SEQUENCE:        dbext,list,items,v1,[v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12]   INPUTS:        list - list of entry numbers to be printed, vector or scalar                If list = -1, then all entries will be extracted.                list may be converted to a vector by DBEXT        items - standard item list specification.  See DBPRINT for                the 6 different ways that items may be specified.   OUTPUTS:        v1...v12 - the vectors of values for up to 12 items.   EXAMPLE:        Extract all RA and DEC values from the currently opened database, and        place into the IDL vectors, IDLRA and IDLDEC.                 IDL&gt; DBEXT,-1,'RA,DEC',idlra,idldec   HISTORY        version 2  D. Lindler  NOV. 1987        check for INDEXED items   W. Landsman   Feb. 1989        Converted to IDL V5.0   W. Landsman   September 1997        Avoid EXECUTE() call for V6.1 or later  W. Landsman   December 2006        Assume since V6.1   W. Landsman June 2009  ", "listitemsv1v2v3v4v5v6v7v8v9v10v11v12", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbext_dbf.html", "dbext_dbf.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbext_dbf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbext_dbf.html#dbext_dbf", "dbext_dbf", 'routine in <a href="idlastro/dbext_dbf.html">dbext_dbf.pro</a>', "dbext_dbf.pro", "", "dbext_dbf", " NAME:        DBEXT_DBF  PURPOSE:        Subroutine of DBEXT to extract values of up to 18 items from a database  EXPLANATION:        This is a subroutine of DBEXT, which is the routine a user should        normally use.   CALLING SEQUENCE:        dbext_dbf,list,dbno,sbyte,nbytes,idltype,nval,v1,[ v2,v3,v4,v5,v6,v7,                   v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18 ITEM_DBNO = ]   INPUTS:        list - list of entry numbers to extract desired items.   It is the                entry numbers in the primary data base unless dbno is greater                than or equal to -1.  In that case it is the entry number in                the specified data base.        dbno - number of the opened db file                if set to -1 then all data bases are included        sbyte - starting byte in the entry.  If single data base then it must                be the starting byte for that data base only and not the                concatenation of db records        nbytes - number of bytes in the entry        idltype - idl data type of each item to be extracted        nval - number of values per entry of each item to be extracted   OUTPUTS:        v1...v18 - the vectors of values for up to 18 items   OPTIONAL INPUT KEYWORD:        item_dbno - A vector of the individual database numbers for each item.                Simplifies the code for linked databases  PROCEDURE CALLS:        DB_INFO(), DB_ITEM_INFO(), DBRD, DBXVAL(), IS_IEEE_BIG(), IEEE_TO_HOST  HISTORY        version 1  D. Lindler  Nov. 1987        Extract multiple valued entries    W. Landsman   May 1989        William Thompson, GSFC/CDS (ARC), 1 June 1994                Added support for external (IEEE) representation.        Work with multiple element string items  W. Landsman  August 1995        Increase speed for external databases on IEEE machines WBL August 1996        IEEE conversion implemented on blocks of entries using BIG        Added keyword ITEM_DBNO     R. Schwartz, GSFC/SDAC, August 1996        Return a vector even if only 1 value W. Thompson  October 1996        Change variable name of BYTESWAP to BSWAP  W. Thompson Mar 1997        Use /OVERWRITE with reform   W. Landsman   May 1997        Increase maximum number of items to 18  W. Landsman  November 1999        2 May 2003, W. Thompson, Use DBXVAL with BSWAP instead of IEEE_TO_HOST.        Avoid EXECUTE() for V6.1 or later  W. Landsman Jan 2007        Assume since V6.1  W. Landsman June 2009        Change arrays to LONG to support entries &gt;32767 bytes WL Oct 2010  ", "item_dbnolistdbnosbytenbytesidltypenvalv1v2v3v4v5v6v7v8v9v10v11v12v13v14v15v16v17v18", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbext_ind.html", "dbext_ind.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbext_ind.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbext_ind.html#dbext_ind", "dbext_ind", 'routine in <a href="idlastro/dbext_ind.html">dbext_ind.pro</a>', "dbext_ind.pro", "", "dbext_ind", " NAME:        DBEXT_IND  PURPOSE:        routine to read a indexed item values from index file   CALLING SEQUENCE:        dbext_ind,list,item,dbno,values   INPUTS:        list - list of entry numbers to extract values for                (if it is a scalar, values for all entries are extracted)        item - item to extract        dbno - number of the opened data base   OUTPUT:        values - vector of values returned as function value  HISTORY:        version 1  D. Lindler  Feb 88        Faster processing of string values    W. Landsman   April, 1992        William Thompson, GSFC/CDS (ARC), 30 May 1994                Added support for external (IEEE) data format        Allow multiple valued (nonstring) index items W. Landsman  November 2000        Use 64bit integer index for large databases W. Landsman  February 2001        Fix sublisting of multiple valued index items W. Landsman  March 2001        Check whether any supplied entries are valid W. Landsman Jan 2009  ", "listitemdbnovalues", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbfind.html", "dbfind.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbfind.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbfind.html#dbfind", "dbfind", 'routine in <a href="idlastro/dbfind.html">dbfind.pro</a>', "dbfind.pro", "", "dbfind", " NAME:     DBFIND()  PURPOSE:      Search data base for entries with specified characteristics  EXPLANATION:      Function to search data base for entries with specified      search characteristics.   CALLING SEQUENCE:      result = dbfind(spar,[ listin, /SILENT, /FULLSTRING, ERRMSG=, Count = ])   INPUTS:      spar - search_parameters (string)...each search parameter                is of the form:                 option 1) min_val &lt; item_name &lt; max_val                option 2) item_name = value                option 3) item_name = [value_1, value_10]                        Note: option 3 is also the slowest.                option 4) item_name &gt; value                option 5) item_name &lt; value                option 6) item_name = value(tolerance) ;eg. temp=25.0(5.2)                option 7) item_name                     ;must be non-zero                 Multiple search parameters are separated by a comma.                eg.     'cam_no=2,14&lt;ra&lt;20'                 Note: &lt; is interpreted as less than or equal.                      &gt; is interpreted as greater than or equal.                 RA and DEC keyfields are stored as floating point numbers                in the data base may be entered as HH:MM:SEC and                DEG:MIN:SEC. Where:                         HH:MM:SEC   equals  HH + MM/60.0  + SEC/3600.                        DEG:MIN:SEC equals DEG + MIN/60.0 + SEC/3600.                 For example:                        40:34:10.5 &lt; dec &lt; 43:25:19 , 8:22:1.0 &lt; ra &lt; 8:23:23.0                 Specially encoded date/time in the data base may                be entered by  CCYY/DAY:hr:min:sec which is                interpreted as                        CCYY*1000+DAY+hr/24.0+min/24.0/60.+sec/24.0/3600.                If a two digit year is supplied and YY GE 40 then it is                understood to refer to year 1900 +YY;  if YY LT 40 then it is                understood to refer to year 2000 +YY                For example                        1985/201:10:35:30&lt;date_time&lt;1985/302:10:33:33.4                would specify all entries between:                        year 1985 day 201 at 10:35:30 to                        day 302 at 10:33:33.4                The date/time may also be encoded as:                        DD-MMM-YEAR HH::MM:SS.SS                        eg.  12-JUL-86 10:23:33.45                (this is the format of system variable !stime)                 Multiple search parameters may be stored in a string                array (one parameter per array element) instead of                concatenating them with commas in a single string.                Example:                        input_array = strarr(2)                        input_array[0] = '14&lt;ra&lt;16'   ; 14-16 hrs of ra.                        input_array[1] = '8&lt;dec&lt;20'   ; + 8-20 deg. decl.   OPTIONAL INPUT:        listin - gives list of entries to be searched.  If not supplied or                set to -1 then all entries are searched.   OUTPUT:        List of ENTRY numbers satisfying search characteristics                is returned as the function value.   OPTIONAL INPUT KEYWORDS:        /SILENT  - If the keyword SILENT is set and non-zero, then DBFIND                will not print the number of entries found.         /FULLSTRING - By default, one has a match if a search string is                included in any part of a database value (substring match).                But if /FULLSTRING is set, then all characters in the database                value must match the search string (excluding leading and                trailing blanks).    Both types of string searches are case                insensitive.         ERRMSG   = If defined and passed, then any error messages will                   be returned to the user in this parameter rather                   than depending on the MESSAGE routine in IDL.  If no                   errors are encountered, then a null string is                   returned.  In order to use this feature, ERRMSG must                   be defined first, e.g.                         ERRMSG = ''                        DB_ITEM, ERRMSG=ERRMSG, ...                        IF ERRMSG NE '' THEN ...;   OPTIONAL OUTPUT KEYWORD:        COUNT - Integer scalar giving the number of valid matches  PROCEDURE CALLS:        DB_INFO, DB_ITEM, DB_ITEM_INFO, DBEXT, DBEXT_IND, DBFIND_ENTRY,        DBFIND_SORT, DBFPARSE, DBRD, DBSEARCH, ZPARCHECK,IS_IEEE_BIG   RESTRICTIONS:        The data base must be previously opened with DBOPEN.   SIDE EFFECTS:        The obsolete system variable !ERR is set to number of entries found   REVISION HISTORY:        Written     :   D. Lindler, GSFC/HRS, November 1987        Version 2, Wayne Landsman, GSFC/UIT (STX), 1 April 1994                        Added FULLSTRING keyword.        Version 3, William Thompson, GSFC, 1 April 1994                        Added check for empty database        Version 4, William Thompson, GSFC, 5 April 1994                        Changed so that !ERR is zero when database is empty,                        and LISTIN is returned, based on discussion with Wayne                        Landsman.        Version 5, Wayne Landsman, GSFC/UIT (STX), 26 May 1994                        Added error message when database is empty.        Version 6, William Thompson, GSFC, 14 March 1995                        Added FULLSTRING keyword to DBFIND_SORT call        Version 7, Richard Schwartz, GSFC/SDAC 23 August 1996                        Move external to host conversion from DBRD to                        operation on extracted values only.        Version 8, William Thompson, GSFC, 3 December 1996                        Renamed BYTESWAP variable to BSWAP--appeared to be                        conflicting with function of same name.        Version 9, William Thompson, GSFC, 17-Mar-1997                        Added keyword ERRMSG        Version 10, July, 1997  W. Landsman, added CATCH errors        Converted to IDL V5.0   W. Landsman   October 1997        Update documentation for new Y2K compliant DBFPARSE W. Landsman Nov 1998        Suppress empty database message with /SILENT, W. Landsman Jan 1999        Added COUNT keyword, deprecate !ERR        W. Landsman March 2000        Added new unsigned & 64bit datatypes       W. Landsman July 2001        Fix possible floating illegand operand error W. Landsman July 2009        Change arrays to LONG to support entries &gt;32767 bytes W.L. Oct. 2010  ", "SILENTfullstringerrmsgCountsparlistin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbfind_entry.html", "dbfind_entry.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbfind_entry.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbfind_entry.html#dbfind_entry", "dbfind_entry", 'routine in <a href="idlastro/dbfind_entry.html">dbfind_entry.pro</a>', "dbfind_entry.pro", "", "dbfind_entry", " NAME:        DBFIND_ENTRY  PURPOSE:        Subroutine of DBFIND to perform an entry number search  EXPLANATION:        This is a subroutine of dbfind and is not a standalone procedure        It performs a entry number search.   CALLING SEQUENCE:        dbfind_entry, type, svals, nentries, values, [COUNT = ]   INPUTS:        type - type of search (output from dbfparse)        svals - search values (output from dbfparse)        values - array of values to search  OUTPUT:        good - indices of good values  OPTIONAL OUTPUT KEYWORD:        Count - integer scalar giving the number of valid matches  SIDE EFFECTS         The obsolete system variable !err is set to number of good values   REVISION HISTORY:        D. Lindler  July,1987        Fixed test for final entry number  W. Landsman    Sept. 95        Converted to IDL V5.0   W. Landsman   September 1997        Added COUNT keyword, deprecate !ERR  W. Landsman   March 2000        Better checking of out of range values  W. Landsman February 2002  ", "Counttypesvalsnentriesvalues", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbfind_sort.html", "dbfind_sort.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbfind_sort.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbfind_sort.html#dbfind_sort", "dbfind_sort", 'routine in <a href="idlastro/dbfind_sort.html">dbfind_sort.pro</a>', "dbfind_sort.pro", "", "dbfind_sort", " NAME:        DBFIND_SORT  PURPOSE:        Subroutine of DBFIND to perform a search using sorted values  EXPLANATION:        This is a subroutine of dbfind and is not a standalone procedure        It is used to limit the search using sorted values   CALLING SEQUENCE:        dbfind_sort, it, type, svals, list, [/FULLSTRING, COUNT = ]   INPUT:        it - item number, scalar        type - type of search (output from dbfparse)        svals - search values (output from dbfparse)   INPUT/OUTPUT:        list - found entries   OPTIONAL INPUT KEYWORD:        /FULLSTRING - By default, one has a match if a search string is                included in any part of a database value (substring match).                But if /FULLSTRING is set, then all characters in the database                value must match the search string (excluding leading and                trailing blanks).    Both types of string searches are case                insensitive.  OPTIONAL OUTPUT KEYWORD        Count - Integer scalar giving the number of matches found  SYSTEM VARIABLES:        The obsolete system variable !err is set to number of good values        !ERR = -2 for an invalid search  PROCEDURES CALLED:        DB_INFO(), DB_ITEM_INFO(), DBSEARCH()  REVISION HISTORY:        D. Lindler  July,1987        William Thompson, GSFC/CDS (ARC), 30 May 1994                Added support for external (IEEE) data format        William Thompson, GSFC, 14 March 1995 Added keyword FULLSTRING        Minimize use of obsolete !ERR variable   W. Landsman  February 2000        Added COUNT keyword, deprecate !ERR W. Landsman  March 2000        Use 64 bit integers V5.2 or later        Include new IDL unsigned & 64 bit integer datatypes W.Landsman July 2001        Make sure returned list vector is LONG  W. Landsman August 2001        Work on string items   W. Landsman November 2009        Don't use VALUE_LOCATE on a single value  W. Landsman November 2009        Use VALUE_LOCATE even for equal values W. Landsman December 2009        Fix bug allowing negative FIRST values, William Thompson, 10 May 2010  ", "FULLSTRINGCOUNTittypesvalslist", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbfparse.html", "dbfparse.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbfparse.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbfparse.html#dbfparse", "dbfparse", 'routine in <a href="idlastro/dbfparse.html">dbfparse.pro</a>', "dbfparse.pro", "", "dbfparse", " NAME:      DBFPARSE  PURPOSE:      Parse the search string supplied to DBFIND.   Not a standalone routine   CALLING SEQUENCE:      DBFPARSE, [ spar, items, stype, values ]   INPUTS:      spar - search parameter specification, scalar string   OUTPUTS:      items - list of items to search on      stype - search type, numeric scalar                0    item=values(j,0)                -1   item&gt;values(j,0)                -2   item&lt;values(j,1)                -3   values(j,0)&lt;item&lt;values(j,1)                -4   item is non zero                -5   item=values(j,0) within tolerance values(j,1)                0&lt;   items in list values(j,i) for i=0,stype-1      values - search values, 20 x 10 string array, can parse a string                with up to 20 items specifications, each item can have 10                values   REVISION HISTORY:      D. Lindler NOV, 1987      Check for valid numeric values before assuming a date string      W. Landsman                    July, 1993      Accept four digit years when in ccyy/doy format W. Landsman   October 1998      Don't do DATE/Time test for string items  W. Landsman   July 2006  ", "sparitemsstypevalues", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbget.html", "dbget.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbget.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbget.html#dbget", "dbget", 'routine in <a href="idlastro/dbget.html">dbget.pro</a>', "dbget.pro", "", "dbget", " NAME:        DBGET  PURPOSE:        Find entry numbers which contain specified values of a given item.  EXPLANATION:        DBGET() is useful as an alternative to DBFIND() when the desired        search values are not easily expressed as a string.   CALLING SEQUENCE:        list = dbget( item, values, [ listin ], /SILENT, /FULLSTRING )   INPUTS:        item - Item name or number        values -  scalar or vector containing item values to search for.   OPTIONAL INPUTS:        listin - list of entries to be searched.  If not supplied, or                set to -1, then all entries are searched   OUTPUT:        list - vector giving the entry number of entries containing desired                item values.  The number of elements in  LIST may be different                from that of VALUE, since a value might be located zero, once,                or many times in the database.  Use the function DBMATCH if a                one to one correspondence is desired between VALUES and LIST.  OPTIONAL INPUT KEYWORDS:        /SILENT - If this keyword is set, then DBGET will not display                the number of entries found        /FULLSTRING - By default, one has a match if a search string is                included in any part of a database value (substring match).                But if /FULLSTRING is set, then all characters in the database                value must match the search string (excluding leading and                trailing blanks).    Both types of string searches are case                insensitive.  OPTIONAL OUTPUT KEYWORD:        COUNT - Integer scalar giving the number of valid matches   RESTRICTIONS:        When linked databases are opened together, DBGET can only be used to        search on items in the primary database.  EXAMPLE:        Get info on selected HD stars in Bright Star catalogue         IDL&gt; dbopen, 'YALE_BS'        IDL&gt; hdno = [1141,2363,3574,4128,6192,6314,6668]    ;Desired HD numbers        IDL&gt; list = dbget( 'HD', hdno )        ;Get corresponding entry numbers   SYSTEM VARIABLES:        The obsolete system variable !ERR is set to number of entries found  REVISION HISTORY:        Written,    W. Landsman      STX     February, 1989        William Thompson, GSFC, 14 March 1995 Added keyword FULLSTRING        Converted to IDL V5.0   W. Landsman   September 1997        Added COUNT keyword, deprecate !ERR        W. Landsman March 2000        Fix bug introduced March 2000              W. Landsman November 2000        Fix possible bug when sublist supplied    W. Landsman August 2008  ", "SILENTFULLSTRINGCountitemvalueslistin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbhelp.html", "dbhelp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbhelp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbhelp.html#dbhelp", "dbhelp", 'routine in <a href="idlastro/dbhelp.html">dbhelp.pro</a>', "dbhelp.pro", "", "dbhelp", " NAME:      DBHELP  PURPOSE:      List available databases or items in the currently open database  EXPLANATION:      Procedure to either list available databases (if no database is      currently open) or the items in the currently open database.   CALLING SEQUENCE:      dbhelp, [ flag , TEXTOUT=, /SORT ]   INPUT:      flag - (optional) if set to nonzero then item or database              descriptions are also printed              default=0              If flag is a string, then it is interpreted as the              name of a data base (if no data base is opened) or a name              of an item in the opened data base.   In this case, help              is displayed only for the particular item or database   OUTPUTS:       None  OPTIONAL INPUT KEYWORDS:       TEXTOUT  - Used to determine output device.  If not present, the                 value of !TEXTOUT system variable is used (see TEXTOPEN )                 textout=0       Nowhere                textout=1       if a TTY then TERMINAL using /more option                                    otherwise standard (Unit=-1) output                textout=2       if a TTY then TERMINAL without /more option                                    otherwise standard (Unit=-1) output                textout=3       &lt;program&gt;.prt                textout=4       laser.tmp                textout=5      user must open file                textout=7      same as 3 but text is appended to &lt;program&gt;.prt                                file if it already exists.                textout = filename (default extension of .prt)          /SORT - If set and non-zero, then the help items will be displayed                sorted alphabetically.    If more than one database is open,                then this keyword does nothing.  METHOD:        If no data base is opened then a list of data bases are        printed, otherwise the items in the open data base are printed.         If a string is supplied for flag and a data base is opened        flag is assumed to be an item name.  The information for that        item is printed along with contents in a optional file        zdbase:dbname_itemname.hlp        if a string is supplied for flag and no data base is opened,        then string is assumed to be the name of a data base file.        only information for that file is printed along with an        optional file zdbase:dbname.hlp.  PROCEDURES USED:        DB_INFO(),DB_ITEM_INFO(),FIND_WITH_DEF(), TEXTOPEN, TEXTCLOSE, UNIQ()  IDL VERSION:        V5.3 or later (uses vectorized FDECOMP)  HISTORY:        Version 2  D. Lindler  Nov 1987 (new db format)        Faster printing of title desc. W. Landsman  May 1989        Keyword textout added, J. Isensee, July, 1990        Modified to work on Unix, D. Neill, ACC, Feb 1991.        William Thompson, GSFC/CDS (ARC), 1 June 1994                Added support for external (IEEE) representation.        William Thompson, GSFC, 3 November 1994                Modified to allow ZDBASE to be a path string.        Remove duplicate database names  Wayne Landsman    December 1994        8/17/95 jkf/acc - force lowercase filenames for .hlp files.        Added /SORT keyword  J. Sandoval/W. Landsman     October 1998        V5.3 version use vectorized FDECOMP   W. Landsman   February 2001        Recognize 64 bit, unsigned integer datatypes W. Landsman September 2001        Fix display of number of bytes with /SORT W. Landsman February 2002        Assume since V5.2                 W. Landsman February 2002        Assume since V5.5                 W. Landsman  ", "TEXTOUTsortflag", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbindex.html", "dbindex.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbindex.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbindex.html#dbindex", "dbindex", 'routine in <a href="idlastro/dbindex.html">dbindex.pro</a>', "dbindex.pro", "", "dbindex", " NAME:        DBINDEX  PURPOSE:        Procedure to create index file for data base   CALLING SEQUENCE:        dbindex, [ items ]   OPTIONAL INPUT:        items - names or numbers of items to be index -- if not supplied,                then all indexed fields will be processed.   OUTPUT:        Index file &lt;name&gt;.dbx is created on disk location ZDBASE:   OPERATIONAL NOTES:        (1) Data base must have been previously opened for update        by DBOPEN         (2) Only 18 items can be indexed at one time.   If the database has        more than 18 items, then two separate calls to DBINDEX are needed.  PROCEDURES CALLED:        DBINDEX_BLK, DB_INFO(), DB_ITEM, DB_ITEM_INFO(), IEEE_TO_HOST,        IS_IEEE_BIG()  HISTORY:        version 2  D. Lindler  Nov 1987 (new db format)        W. Landsman    added optional items parameter Feb 1989        William Thompson, GSFC/CDS (ARC), 30 May 1994                Added support for external (IEEE) data format        Test if machine is bigendian  W. Landsman     May, 1996        Change variable name of BYTESWAP to BSWAP  W. Thompson  Mar, 1997        Increased number of fields to 15   W. Landsman   June, 1997        Increase number of items to 18     W. Landsman  November 1999        Allow multiple valued (nonstring) index items W. Landsman November 2000        Use 64 bit integers for V5.2 or later  W. Landsman February 2001        Do not use EXECUTE() for V6.1 or later, improve efficiency                 W. Landsman   December 2006        Automatically enlarge .dbx file if needed, fix major bug in last              update    W. Landsman Dec 2006        Assume since V6.1    W. Landsman   June 2009        Allow sorted string items   W. Landsman   October 2009  ", "items", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbindex_blk.html", "dbindex_blk.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbindex_blk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbindex_blk.html#dbindex_blk", "dbindex_blk", 'routine in <a href="idlastro/dbindex_blk.html">dbindex_blk.pro</a>', "dbindex_blk.pro", "", "dbindex_blk", " NAME:        DBINDEX_BLK  PURPOSE:        Subroutine of DBINDEX to create associated variable of correct datatype  EXPLANATION:        DBINDEX_BLK will offset into the file by a specified amount in        preparation for writing to the file.   V5.2 or later   CALLING SEQUENCE:        res = dbindex_blk(unit, nb, bsz, ofb, dtype)   INPUTS:        unit   The unit number assigned to the file.        nb     The number of blocks to offset into the file.        bsz    The size of each block, in bytes, to offset into the file.        ofb    The offset into the block, in bytes.        dtype  The IDL datatype as defined in the SIZE function   OUTPUTS:        res    The returned variable.  This is an associated variable.   RESTRICTIONS:        The file must have been previously opened.   MODIFICATION HISTORY:        Written by Michael R. Greason, STX, 14 June 1990.        Converted to IDL V5.0   W. Landsman   September 1997        Use 64 bit integer for very large databases  W. Landsman February 2001        Added new unsigned & 64bit integer datatypes    W. Landsman July 2001  ", "unitnbbszofbdtype", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbmatch.html", "dbmatch.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbmatch.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbmatch.html#dbmatch", "dbmatch", 'routine in <a href="idlastro/dbmatch.html">dbmatch.pro</a>', "dbmatch.pro", "", "dbmatch", " NAME:        DBMATCH  PURPOSE:        Find the entry number in a database for each element of item values  EXPLANATION:        DBMATCH() is especially useful for finding a one-to-one        correspondence between entries in different databases, and thus to        create the vector needed for database pointers.   CALLING SEQUENCE:        list = DBMATCH( item, values, [ listin, /FULLSTRING ] )   INPUTS:        ITEM - Item name or number, scalar        VALUES -  scalar or vector containing item values to search for.   OPTIONAL INPUTS:        LISTIN - list of entries to be searched.  If not supplied, or                set to -1, then all entries are searched  OUTPUT:        LIST - vector of entry numbers with the same number of elements as                VALUES.  Contains a value of 0 wherever the corresponding item                value was not found.   OPTIONAL INPUT:        /FULLSTRING - By default, one has a match if a search string is                included in any part of a database value (substring match).                But if /FULLSTRING is set, then all characters in the database                value must match the search string (excluding leading and                trailing blanks).    Both types of string searches are case                insensitive.   NOTES:        DBMATCH is meant to be used for items which do not have duplicate values        in a database (e.g. catalog numbers).  If more than one entry is found        for a particular item value, then only the first one is stored in LIST.         When linked databases are opened together, DBMATCH can only be        used to search on items in the primary database.   EXAMPLE:        Make a vector which points from entries in the Yale Bright Star catalog        to those in the Hipparcos catalog, using the HD number         IDL&gt; dbopen, 'yale_bs'            ;Open the Yale Bright star catalog        IDL&gt; dbext, -1, 'HD', hd          ;Get the HD numbers        IDL&gt; dbopen, 'hipparcos'          ;Open the Hipparcos catalog        IDL&gt; list = dbmatch( 'HD', HD)    ;Get entries in Hipparcos catalog                                          ;corresponding to each HD number.  PROCEDURE CALLS:        DB_ITEM, DB_ITEM_INFO(), DBEXT, DBFIND_SORT()  REVISION HISTORY:        Written,    W. Landsman      STX     February, 1990        Fixed error when list in parameter used May, 1992        Faster algorithm with sorted item when listin parameter supplied        Added keyword FULLSTRING,check for empty database, William Thompson,                GSFC, 15 March 1995        Work for more than 32767 values, added CATCH W. Landsman   July 1997        Change some loop variables to type LONG,  W. Landsman  July 1999        Remove loop for substring searches (faster)  W. landsman August 1999        Replace DATATYPE() with size(/TNAME)  W. Landsman  November 2001        Fixed typo when search on sorted items W. Landsman February 2002        Fixed bug from Nov 2001 where /FULLSTRING was always set.  W.L Feb 2007  ", "FULLSTRINGitemvalueslistin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbopen.html", "dbopen.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbopen.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbopen.html#dbopen", "dbopen", 'routine in <a href="idlastro/dbopen.html">dbopen.pro</a>', "dbopen.pro", "", "dbopen", " NAME:        DBOPEN  PURPOSE:        Routine to open an IDL database   CALLING SEQUENCE:        dbopen, name, update   INPUTS:        name - (Optional) name or names of the data base files to open.                It has one of the following forms:                 'name'          -open single data base file                'name1,name2,...,nameN' - open N files which are                                connected via pointers.                'name,*'        -Open the data base with all data                                bases connected via pointers                ''              -Interactively allow selection of                                the data base files.                 If not supplied then '' is assumed.                name may optionally be a string array with one name                per element.         update - (Optional) Integer flag specifing openning for update.                0       - Open for read only                1       - Open for update                2       - Open index file for update only                !PRIV must be 2 or greater to open a file for update.                If a file is opened for update only a single data base                can be specified.   OUTPUTS:        none   INPUT-OUTPUT KEYWORD:        UNAVAIL - If present, a  database doesn't exit  flag is returned                  through it.  0 = the database exists and was opened (if                  no other errors arose).  1 = the database doesn't exist.                  Also if present, the error message for non-existent databases                  is suppressed.  The action, however, remains the same.  SIDE EFFECTS:        The .DBF and .dbx files are opened using unit numbers obtained by        GET_LUN.  Descriptions of the files are placed in the common block        DB_COM.   PROCEDURES CALLED:        DBCLOSE, DB_INFO(), SELECT_W, ZPARCHECK  HISTORY:        For IDL Version 2  W. Landsman May 1990 -- Will require further            modfication once SCREEN_SELECT is working        Modified to work under Unix, D. Neill, ACC, Feb 1991.        UNAVAIL keyword added.  M. Greason, Hughes STX, Feb 1993.        William Thompson, GSFC/CDS (ARC), 1 June 1994                Added support for external (IEEE) representation.        William Thompson, GSFC, 3 November 1994                        Modified to allow ZDBASE to be a path string.        8/29/95 JKF/ACC - forces lowercase for input database names.        W. Landsman, Use CATCH to catch errors    July, 1997        W. Landsman Use vector call to FDECOMP, STRSPLIT()    Sep 2006        W. Landsman Remove obsolete keywords to OPEN   Sep 2006        Replace SCREEN_SELECT with SELECT_W, remove IEEE_TO_HOST  WL  Jan 2009        Fix typos in BYTEORDER introduced Jan 2009 G. Scandariato/W.L.Feb. 2009        Support new DB format which allows entry lengths &gt; 32767 bytes               W.L. October 2010        William Thompson, fixed bug opening multiple databases Dec 2010        Fix problem with external databases WL Sep 2011   ", "UNAVAILnameupdate", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbprint.html", "dbprint.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbprint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbprint.html#dbprint", "dbprint", 'routine in <a href="idlastro/dbprint.html">dbprint.pro</a>', "dbprint.pro", "", "dbprint", " NAME:      DBPRINT  PURPOSE:      Procedure to print specified items from a list of database entries   CALLING SEQUENCE:      dbprint, list, [items, FORMS= , TEXTOUT= , /AdjustFormat, /NoHeader]   INPUTS:      list  - list of entry numbers to be printed, vector or scalar                if list = -1, then all entries will be printed.                An error message is returned if any entry number is larger                than the number of entries in the database   OPTIONAL INPUT-OUTPUT:      items - items to be printed, specified in any of the following ways:                 form 1  scalar string giving item(s) as list of names                        separated by commas                form 2  string array giving list of item names                form 3  string of form '$filename' giving name                        of text file containing items (one item per                        line)                form 4  integer scalar giving single item number or                          integer vector list of item numbers                form 5  Null string specifying interactive selection.   This                        is the default if 'items' is not supplied                form 6  '*'     select all items, printout will be in                        table format.              If items was undefined or a null string on input, then             on output it will contain the items interactively selected.   OPTIONAL INPUT KEYWORDS:        /ADJUSTFORMAT -  If set, then the format length for string items will                be adjusted to the maximum length for the entries to be printed.                This option will slow down DBPRINT because it requires the                string items be extracted and their maximum length determined                prior to any printing.   However, it enables the display of                string items without any truncation or wasted space.         FORMS - The number of printed lines per page. If forms is not                present, output assumed to be in PORTRAIT form, and                a heading and 47 lines are printed on each page, with                a page eject between each page.  For LANDSCAPE form with                headings on each page, and a page eject between pages, set                forms = 34.  For a heading only on the first page, and no                page eject, set forms = 0.   This is the default for output                to the terminal.         TEXTOUT - Integer (0-7) or string used to determine output device (see                TEXTOPEN for more info).  If not present, the !TEXTOUT system                variable is used.                textout=0       Nowhere                textout=1       if a TTY then TERMINAL using /more option                                    otherwise standard (Unit=-1) output                textout=2       if a TTY then TERMINAL without /more option                                    otherwise standard (Unit=-1) output                textout=3       dbprint.prt (file)                textout=4       laser.tmp                textout=5       user must open file                textout=7      same as 3 but text is appended to &lt;program&gt;.prt                textout = filename   (default extension of .prt)         /NOHEADER - If this keyword is set, then the column headers will not                be printed   EXAMPLE:        The following example shows how a multiple valued item DATAMAX can be        printed as separate columns.   In the WFPC2 target database, DATAMAX        is an item with 4 values, one for each of the 4 chips         IDL&gt; dbopen,'wflog'        IDL&gt; dbprint,list,'entry,datamax(0),datamax(1),datamax(2),datamax(3)'   SYSTEM VARIABLES:        Output device controlled by non-standard system varaible !TEXTOUT, if        TEXTOUT keyword is not used.   NOTES:        Users may want to adjust the default lines_per_page value given at        the beginning of the program for their own particular printer.  PROCEDURE CALLS:        db_info(), db_item_info(), dbtitle(), dbxval(), textopen, textclose        zparcheck  HISTORY:        version 2  D. Lindler  Nov. 1987 (new db format)        Test if user pressed 'Q' in response to /MORE W. Landsman  Sep 1991        Apply STRTRIM to free form (table) output    W. Landsman   Dec 1992        Test for string value of TEXTOUT         W. Landsman   Feb 1994        William Thompson, GSFC, 3 November 1994                        Modified to allow ZDBASE to be a path string.        W. Landsman, GSFC, July, 1997, Use CATCH to catch errors        Removed STRTRIM in table format output to handle byte values April 1999        Fixed occasional problem when /NOHEADER is supplied   Sep. 1999        Only byteswap when necessary for improved performance  Feb. 2000        Change loop index for table listing to type LONG  W. Landsman Aug 2000        Entry vector can be any integer type   W. Landsman Aug. 2001        Replace DATATYPE() with size(/TNAME)   W. Landsman  Nov. 2001        No page eject for TEXTOUT =5           W. Landsman  Nov. 2001        No initial page eject                  W. Landsman  Jan. 2002        Added AdjustFormat keyword             W. Landsman  Sep. 2002        Assume since V5.3 (STRJOIN)            W. Landsman Feb. 2004        Fix display on GUI terminals           W. Landsman March 2006        Remove VMS statements                  W. Landsman Sep 2006        Remove EXECUTE statement               W. Landsman Jan 2007        Fix display of multi element items     W. Landsman  Aug 2010        Fix problem with linked databases      W. Landsman Dec 2011  ", "FORMSTEXTOUTNoHeaderAdjustformatlistitems", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbput.html", "dbput.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbput.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbput.html#dbput", "dbput", 'routine in <a href="idlastro/dbput.html">dbput.pro</a>', "dbput.pro", "", "dbput", " NAME: 	DBPUT  PURPOSE: 	Procedure to place a new value for a specified item into 	a data base file entry.   CALLING SEQUENCE: 	dbput, item, val, entry   INPUTS: 	item - item name or number 	val - item value(s)   INPUT/OUTPUT: 	entry - entry (byte array) or scalar entry number. 	        if entry is a scalar entry number then the data 	        base file will be updated.  Otherwise the change 	        will be only made to the entry array which must 	        be written latter using DBWRT.   OPERATIONAL NOTES: 	If entry is a scalar entry number or the input file name 	is supplied, the entry in the data base will be updated 	instead of a supplied entry variable.  In this case, !priv 	must be greater than 1.  EXAMPLE:        IDL&gt; dbput,'WAVELEN',1215.6,entry  PROCEDURES USED:        DB_ITEM, DBRD, DBXPUT, DBWRT  HISTORY: 	version 2  D. Lindler  Feb 1988 (new db formats) 	modified to convert blanks into zeros correctly D. Neill Jan 1991 	Converted to IDL V5.0   W. Landsman   September 1997        V5.2 version support unsigned, 64bit integers W. Landsman  Sep. 2001  ", "itemvalentry", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbrd.html", "dbrd.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbrd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbrd.html#dbrd", "dbrd", 'routine in <a href="idlastro/dbrd.html">dbrd.pro</a>', "dbrd.pro", "", "dbrd", " NAME: 	DBRD  PURPOSE: 	procedure to read an entry from a data base file or from 	linked multiple databases.   CALLING SEQUENCE: 	dbrd, enum, entry, [available, dbno, /NoConvert]   INPUTS: 	enum - entry number to read, integer scalar   OUTPUT: 	entry - byte array containing the entry   OPTIONAL OUTPUT: 	available - byte array with length equal to number of data 		bases opened.  available(i) eq 1 if an entry (pointed 		to) is available.  It always equals 1 for the first 		data base, otherwise it is an error condition.   OPTIONAL  INPUT: 	dbno - specification of the data base number to return.  If 		supplied, only the record for the requested data base 		number is returned in entry.  Normally this input should 		not be supplied.  dbno is numbered for 0 to n-1 and gives 		the number of the data base opened.  The data bases are 		numbered in the order supplied to dbopen.  If dbno is supplied 		then the entry number refers to that data base and not the 		primary or first data base. If set to -1, then it means all 		data bases opened (same as not supplying it)  OPTIONAL INPUT KEYWORD: 	noconvert - if set then don't convert external to host format. 		Assumes that calling program will take care of this 		requirement.  OPERATIONAL NOTES: 	If multiple data base files are opened, the records are 	concatenated with each other  HISTORY 	version 2  D. Lindler  Nov. 1987 	William Thompson, GSFC/CDS (ARC), 1 June 1994 		Added support for external (IEEE) representation. 	Version 3, Richard Schwartz, GSFC/SDAC, 23-Aug-1996 			Add noconvert keyword  	Converted to IDL V5.0   W. Landsman   September 1997        Version 4, 2 May 2003, W. Thompson                Use BSWAP keyword to DBXVAL instead of calling IEEE_TO_HOST.  ", "noconvertenumentryavailabledbno", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbsearch.html", "dbsearch.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbsearch.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbsearch.html#dbsearch", "dbsearch", 'routine in <a href="idlastro/dbsearch.html">dbsearch.pro</a>', "dbsearch.pro", "", "dbsearch", " NAME: 	DBSEARCH  PURPOSE: 	Subroutine of DBFIND() to search a vector for specified values   CALLING SEQUENCE: 	dbsearch, type, svals, values, good, [ /FULLSTRING, COUNT = ]   INPUT: 	type - type of search (output from dbfparse) 	svals - search values (output from dbfparse) 	values - array of values to search   OUTPUT: 	good - indices of good values   OPTIONAL INPUT KEYWORD: 	/FULLSTRING - By default, one has a match if a search string is 		included in any part of a database value (substring match). 		But if /FULLSTRING is set, then all characters in the database 		value must match the search string (excluding leading and 		trailing blanks).    Both types of string searches are case 		insensitive.  OPTIONAL OUTPUT KEYWORD:        COUNT  - Integer scalar giving the number of valid matches   SIDE EFFECTS: 	The obsolete system variable !ERR is set to number of good values  REVISION HISTORY: 	D. Lindler  July,1987        Added COUNT keyword, deprecate !ERR   W. Landsman   March 2000       Some speed improvements W.L. August 2008        Add compound operators, slightly faster WL November 2009  ", "FULLSTRINGCOUNTtypesvalsvaluesgood", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbsort.html", "dbsort.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbsort.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbsort.html#dbsort", "dbsort", 'routine in <a href="idlastro/dbsort.html">dbsort.pro</a>', "dbsort.pro", "", "dbsort", " NAME:        DBSORT  PURPOSE:        Routine to sort list of entries in data base   CALLING SEQUENCE:        result = dbsort( list, items , [ REVERSE = ])   INPUTS:        list - list of entry numbers to sort                -1 to sort all entries        items - list of items to sort (up to 9 items)   OUTPUT:        result - numeric vector giving input list sorted by items   OPTIONAL KEYWORD INPUT:        REVERSE - scalar or vector with the same number of elements as the          the number of items to sort.  If the corresponding element of REVERSE          is non-zero then that item is sorted in descending rather than          ascending order.   EXAMPLE:        Sort an astronomical catalog with RA as primary sort, and declination        as secondary sort (used when RA values are equal)            IDL&gt; NEWLIST = DBSORT( -1, 'RA,DEC' )         If for some reason, one wanted the DEC sorted in descending order, but        the RA in ascending order            IDL&gt; NEWLIST = DBSORT( -1, 'RA,DEC', REV = [ 0, 1 ] )   METHOD:        The list is sorted such that each item is sorted into        asscending order starting with the last item.  COMMON BLOCKS:        DBCOM  PROCEDURES USED:        ZPARCHECK, BSORT, DBEXT, DB_ITEM  HISTORY        VERSION 1  D. Lindler  Oct. 86        Added REVERSE keyword   W. Landsman        August, 1991        Avoid use of EXECUTE() for V6.1 or later   W. Landsman Dec 2006        Assume since V6.1   W. Landsman   June 2009        Add TEMPORARY call  W. Lnadsman  July 2009  ", "REVERSElistitems", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbtarget.html", "dbtarget.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbtarget.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbtarget.html#dbtarget", "dbtarget", 'routine in <a href="idlastro/dbtarget.html">dbtarget.pro</a>', "dbtarget.pro", "", "dbtarget", " NAME:       DBTARGET  PURPOSE:       Find sources in a database within specified radius of specified target  EXPLANATION:       Uses QuerySimbad to translate target name to RA and Dec, and then uses       DBCIRCLE() to find any entries within specified radius.   Database must       include items named 'RA' (in hours) and 'DEC' (in degrees) and must       have previously been opened with DBOPEN   CALLING SEQUENCE:      list = DBTARGET(target, [radius, sublist, /SILENT, DIS= ,/TO_B1950 ] )   INPUTS:       TARGET - A scalar string giving an astronomical target name, which           will be  translated into J2000 celestial coordinates by QuerySimbad   OPTIONAL INPUT:        RADIUS - Radius of the search field in arc minutes, scalar.                 Default is 5 arc minutes        SUBLIST - Vector giving entry numbers in currently opened database                to be searched.  Default is to search all entries   OUTPUTS:      LIST - Vector giving entry numbers in the currently opened catalog             which have positions within the specified search circle             LIST is set to -1 if no sources fall within the search circle             !ERR is set to the number sources found.   OPTIONAL OUTPUT        DIS -  The distance in arcminutes of each entry specified by LIST                to the search center specified by the target.   OPTIONAL KEYWORD INPUT:        /SILENT - If this keyword is set, then DBTARGET will not print the                number of entries found at the terminal        /TO_B1950 - If this keyword is set, then the SIMBAD J2000 coordinates                are converted to B1950 before searching the database                NOTE: The user must determine on his own whether the database                is in B1950 or J2000 coordinates.   RESTRICTIONS;        The database must have items 'RA' (in hours) and 'DEC' (in degrees).        Alternatively, the database could have items RA_OBJ and DEC_OBJ       (both in degrees)  EXAMPLE:        (1) Use the HST_CATALOG database to find all  HST observations within            5' (the default) of M33         IDL&gt; dbopen,'hst_catalog'        IDL&gt; list = dbtarget('M33')        (2) As above but restrict targets within 2' of the nucleus using the           WFPC2 camara         IDL&gt; dbopen,'hst_catalog'        IDL&gt; sublist = dbfind('config=WFPC2')        IDL&gt; list = dbtarget('M33',2,sublist)   PROCEDURE CALLS:        QuerySimbad, DBCIRCLE()  REVISION HISTORY:       Written W. Landsman     SSAI          September 2002       Propagate /SILENT keyword to QuerySimbad    W. Landsman Oct 2009       Make sure a database is open  W.L. Oct 2010  ", "SILENTTO_B1950DIStargetradiussublist", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbtitle.html", "dbtitle.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbtitle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbtitle.html#dbtitle", "dbtitle", 'routine in <a href="idlastro/dbtitle.html">dbtitle.pro</a>', "dbtitle.pro", "", "dbtitle", " NAME: 	DBTITLE  PURPOSE: 	function to create title line for routine dbprint   CALLING SEQUENCE: 	result = dbtitle( c, f )   INPUTS: 	c = string array of titles for each item 	f = field length of each item   OUTPUT: 	header string returned as function value   OPERATIONAL NOTES: 	this is a subroutine of DBPRINT.   HISTORY: 	version 1  D. Lindler  Sept 86 	Converted to IDL V5.0   W. Landsman   September 1997  ", "cf", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbupdate.html", "dbupdate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbupdate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbupdate.html#dbupdate", "dbupdate", 'routine in <a href="idlastro/dbupdate.html">dbupdate.pro</a>', "dbupdate.pro", "", "dbupdate", " NAME: 	DBUPDATE  PURPOSE: 	Update columns of data in a database  -- inverse of DBEXT  EXPLANATION: 	Database must be open for update before calling DBUPDATE   CALLING SEQUENCE: 	dbupdate, list, items, v1, [ v2, v3, v4......v14 ]   INPUTS: 	list - entries in database to be updated, scalar or vector 		If list=-1 then all entries will be updated 	items -standard list of items that will be updated. 	v1,v2....v14 - vectors containing values for specified items.  The 		number of vectors supplied must equal the number of items 		specified.   The number of elements in each vector should be 		the same.   OPTIONAL KEYWORD INPUT:        /NOINDEX - If set, then DBUPDATE will not update the index file.   This                keyword is useful to save if additional updates will occur,                and the index file need only be updated on the last call.   EXAMPLES: 	A database STAR contains RA and DEC in radians, convert to degrees  	IDL&gt; !PRIV=2 & dbopen,'STAR',1          ;Open database for update 	IDL&gt; dbext,-1,'RA,DEC',ra,dec          ;Extract RA and DEC, all entries 	IDL&gt; ra = ra*!RADEG & dec=dec*!RADEG    ;Convert to degrees 	IDL&gt; dbupdate,-1,'RA,DEC',ra,dec        ;Update database with new values   NOTES: 	It is quicker to update several items simultaneously rather than use 	repeated calls to DBUPDATE.  	It is possible to update multiple valued items.  In this case, the 	input vector should be of dimension (NVAL,NLIST) where NVAL is the 	number of values per item, and NLIST is the number of entries to be 	updated.  This vector will be temporarily transposed by DBUPDATE but 	will be restored before DBUPDATE exits.   REVISION HISTORY 	Written W. Landsman      STX       March, 1989 	Work for multiple valued items     May, 1991 	String arrays no longer need to be fixed length      December 1992 	Transpose multiple array items back on output        December 1993 	Faster update of external databases on big endian machines November 1997 	Converted to IDL V5.0   W. Landsman 24-Nov-1997        Added /NOINDEX keyword  W. Landsman  July 2001  ", "NOINDEXlistitemsv1v2v3v4v5v6v7v8v9v10v11v12v13v14", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbval.html", "dbval.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbval.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbval.html#dbval", "dbval", 'routine in <a href="idlastro/dbval.html">dbval.pro</a>', "dbval.pro", "", "dbval", " NAME: 	DBVAL  PURPOSE: 	procedure to extract value(s) of the specified item from 	a data base file entry.   CALLING SEQUENCE: 	result = dbval( entry, item )   INPUTS: 	entry - byte array containing the entry, or a scalar entry number 	item - name (string) or number (integer) of the item   OUTPUT: 	the value(s) will be returned as the function value   EXAMPLE: 	Extract a flux vector from entry 28 of the database FARUV 	==&gt; flux = dbval(28,'FLUX')   HISTORY:    version 2  D. Lindler Nov, 1987	(new db format) 	Converted to IDL V5.0   W. Landsman   September 1997  ", "entryitem", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbwrt.html", "dbwrt.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbwrt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbwrt.html#dbwrt", "dbwrt", 'routine in <a href="idlastro/dbwrt.html">dbwrt.pro</a>', "dbwrt.pro", "", "dbwrt", " NAME: 	DBWRT  PURPOSE: 	procedure to update or add a new entry to a data base   CALLING SEQUENCE: 	dbwrt, entry, [ index, append, /NoConvert ]   INPUTS: 	entry - entry record to be updated or added if first 		item (entry number=0)   OPTIONAL INPUTS: 	index - optional integer flag,  if set to non zero then index 		file is  updated. (default=0, do not update index file) 		(Updating the index file is time-consuming, and should 		normally be done after all changes have been made. 	append - optional integer flag, if set to non-zero the record 		is appended as a new entry, regardless of what the 		entry number in the record is.  The entry number will 		be reset to the next entry number in the file.  OUTPUTS: 	data base file is updated. 	If index is non-zero then the index file is updated.  OPTIONAL INPUT KEYWORD: 	NoConvert - If set then don't convert to host format with an external 		database.    Useful when the calling program decides that 		conversion isn't needed (i.e. on a big-endian machine), or 		takes care of the conversion itself.  OPERATIONAL NOTES: 	!PRIV must be greater than 1 to execute  HISTORY: 	version 2  D. Lindler  Feb. 1988 (new db format) 	converted to IDL Version 2.  M. Greason, STX, June 1990. 	William Thompson, GSFC/CDS (ARC), 28 May 1994 		Added support for external (IEEE) representation. 	Faster handling of byte swapping  W. L.  August 2010  ", "noconvertentryindexappend", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbxput.html", "dbxput.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbxput.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbxput.html#dbxput", "dbxput", 'routine in <a href="idlastro/dbxput.html">dbxput.pro</a>', "dbxput.pro", "", "dbxput", " NAME: 	DBXPUT  PURPOSE: 	routine to replace value of an item in a data base entry   CALLING SEQUENCE: 	dbxput, val, entry, idltype, sbyte, nbytes   INPUT: 	val - value(s) to be placed into entry, string values might be 		truncated to fit number of allowed bytes in item 	entry - entry or entries to be updated 	idltype - idl data type for item (1-7) 	sbyte - starting byte in record 	nbytes - total number of bytes in value added   OUTPUT: 	entry - (updated)   OPERATIONAL NOTES: 	This routine assumes that the calling procedure or user knows what he 	or she is doing.  String items are truncated or padded to the fixed 	size specified by the database but otherwise no validity checks are 	made.   HISTORY: 	version 1, D. Lindler   Aug, 1986 	converted to IDL Version 2.  M. Greason, STX, June 1990. 	Work with multiple element string items   W. Landsman  August 1995 	Really work with multiple element string items 			R. Bergman/W. Landsman  July 1996 	Work with multiple entries, R. Schwartz, GSFC/SDAC August 1996 	Use /overwrite with REFORM() W. Landsman May 1997 	Converted to IDL V5.0   W. Landsman   September 1997  ", "valentryidltypesbytenbytes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dbxval.html", "dbxval.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dbxval.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dbxval.html#dbxval", "dbxval", 'routine in <a href="idlastro/dbxval.html">dbxval.pro</a>', "dbxval.pro", "", "dbxval", " NAME:        DBXVAL   PURPOSE:        Quickly return a value of the specified item number  EXPLANATION:        Procedure to quickly return a value of the specified item number        from the entry.   CALLING SEQUENCE:        result = dbxval( entry, idltype, nvalues, sbyte, nbytes )   INPUTS        entry - entry or entries from data base (bytarr)        idltype - idl data type (obtained with db_item_info)        nvalues - number of values to return (obtained with db_item)        sbyte - starting byte in the entry (obtained with db_item)        nbytes - number of bytes (needed only for string type)                        (obtained with db_item)   OUTPUTS:        function value is value of the specified item in entry   KEYWORDS:        bswap - If set, then IEEE_TO_HOST is called.   RESTRICTIONS:        To increase speed the routine assumes that entry and item are        valid and that the data base is already opened using dbopen.   REVISION HISTORY:        version 0  D. Lindler Nov. 1987  (for new db format)        Version 1, William Thompson, GSFC, 28 March 1994.                        Incorporated into CDS library.        Version 2, Richard Schwartz, GSFC/SDAC, 23 August 1996                        Allowed Entry to have 2 dimensions        Version 2.1, 22 Feb 1997, JK Feggans,                                avoid reform for strings arrays.        Version 2.2     Use overwrite with REFORM(),  W. Landsman,  May 1997        Converted to IDL V5.0   W. Landsman   September 1997        Work for multiple-valued strings   W. Landsman   October 2000        Add new 64bit & unsigned integer datatypes W.Landsman   July 2001        Version 3, 2-May-2003, JK Feggans/Sigma, W.T. Thompson            Added BSWAP keyword to avoid floating errors on some platforms.  ", "bswapentryidltypenvaluessbytenbytes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/decomposedcolor.html", "decomposedcolor.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "decomposedcolor.pro", "", "", " NAME:   DECOMPOSEDCOLOR   PURPOSE:     This function is used to determine, in a device independent way, if the    current graphics device is using color decomposition. The function returns    a 1 if color decomposition is turned on, and a 0 if it is turned off. When    color decomposition is turned on, we say the device is using a true-color    display. If color decomposition is turned off, we say the device is using    an indexed color display.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Utilities   CALLING SEQUENCE:     result = DecomposedColor()   RETURN VALUE:     result:       A 1 if color decomposition is turned on. A 0 if color decomposition is turned off.   ARGUMENTS:    device:        The IDL graphics device whose color decomposition state you wish to know the                  current value of. If undefined, the current graphics device is used.   KEYWORDRS:    DEPTH:          An output keyword that returns the depth of the graphics device. Normally,                   either 8 for index color devices, with color decomposition turned off, or 24                   for true-color devices with color decomposition turned on.   EXAMPLE:    IDL&gt; Print, DecomposedColor()     ; Color decomposition state of current graphics device.        1   IDL&gt; Print, DecomposedColor('PS') ; Color decomposition state of PostScript graphics device.        0   MODIFICATION HISTORY:    Written by: David W. Fanning, May 24, 2009.   Modified the way decomposition was obtained for PostScript devices IDL 7.1 and higher. 12 Dec 2010. DWF.   Fixed a problem in the CASE statement with ELSE clause and added a NULL device segment. 4 Jan 2011. DWF.   It now appears 24-bit PostScript support was added in IDL 7.1, although the Get_Decomposed keyword       didn't work until IDL 7.1.1. 13 January 2011. DWF   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/decomposedcolor.html#DecomposedColor", "DecomposedColor", 'routine in <a href="idlastro/coyote/decomposedcolor.html">decomposedcolor.pro</a>', "decomposedcolor.pro", "", "DecomposedColor", "", "DEPTHdevice", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/decomposedcolor.html", "decomposedcolor.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "decomposedcolor.pro", "", "", " NAME:   DECOMPOSEDCOLOR   PURPOSE:     This function is used to determine, in a device independent way, if the    current graphics device is using color decomposition. The function returns    a 1 if color decomposition is turned on, and a 0 if it is turned off. When    color decomposition is turned on, we say the device is using a true-color    display. If color decomposition is turned off, we say the device is using    an indexed color display.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Utilities   CALLING SEQUENCE:     result = DecomposedColor()   RETURN VALUE:     result:       A 1 if color decomposition is turned on. A 0 if color decomposition is turned off.   ARGUMENTS:    device:        The IDL graphics device whose color decomposition state you wish to know the                  current value of. If undefined, the current graphics device is used.   KEYWORDRS:    DEPTH:          An output keyword that returns the depth of the graphics device. Normally,                   either 8 for index color devices, with color decomposition turned off, or 24                   for true-color devices with color decomposition turned on.   EXAMPLE:    IDL&gt; Print, DecomposedColor()     ; Color decomposition state of current graphics device.        1   IDL&gt; Print, DecomposedColor('PS') ; Color decomposition state of PostScript graphics device.        0   MODIFICATION HISTORY:    Written by: David W. Fanning, May 24, 2009.   Modified the way decomposition was obtained for PostScript devices IDL 7.1 and higher. 12 Dec 2010. DWF.   Fixed a problem in the CASE statement with ELSE clause and added a NULL device segment. 4 Jan 2011. DWF.   It now appears 24-bit PostScript support was added in IDL 7.1, although the Get_Decomposed keyword       didn't work until IDL 7.1.1. 13 January 2011. DWF   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/decomposedcolor.html#DecomposedColor", "DecomposedColor", 'routine in <a href="coyote/decomposedcolor.html">decomposedcolor.pro</a>', "decomposedcolor.pro", "", "DecomposedColor", "", "DEPTHdevice", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/defparams.html", "defparams.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "defparams.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/defparams.html#defparams", "defparams", 'routine in <a href="sep20/defparams.html">defparams.pro</a>', "defparams.pro", "", "defparams", "       Defines global parameters   ", "file           Text file used to define parameters   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/defparams.html", "defparams.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "defparams.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/defparams.html#defparams", "defparams", 'routine in <a href="code_snapshots/jul25/defparams.html">defparams.pro</a>', "defparams.pro", "", "defparams", "       Defines global parameters   ", "file           Text file used to define parameters   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/defparams.html", "defparams.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "defparams.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/defparams.html#defparams", "defparams", 'routine in <a href="code_snapshots/albert_version/defparams.html">defparams.pro</a>', "defparams.pro", "", "defparams", "", "file", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/defparams.html", "defparams.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "defparams.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/defparams.html#defparams", "defparams", 'routine in <a href="code_snapshots/test_version/defparams.html">defparams.pro</a>', "defparams.pro", "", "defparams", "", "file", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/defparams.html", "defparams.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "defparams.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/defparams.html#defparams", "defparams", 'routine in <a href="code_snapshots/aug22_notworking/defparams.html">defparams.pro</a>', "defparams.pro", "", "defparams", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/defparams.html", "defparams.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "defparams.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/defparams.html#defparams", "defparams", 'routine in <a href="code_snapshots/orig_version/defparams.html">defparams.pro</a>', "defparams.pro", "", "defparams", "", "file", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/defparams.html", "defparams.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "defparams.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/defparams.html#defparams", "defparams", 'routine in <a href="code_snapshots/sep11/defparams.html">defparams.pro</a>', "defparams.pro", "", "defparams", "       Defines global parameters   ", "file           Text file used to define parameters   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/defsysvarthresh.html", "defsysvarthresh.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "defsysvarthresh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/defsysvarthresh.html#defsysvarthresh", "defsysvarthresh", 'routine in <a href="sep20/defsysvarthresh.html">defsysvarthresh.pro</a>', "defsysvarthresh.pro", "", "defsysvarthresh", "       Defines solar thresholds   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/defsysvarthresh.html", "defsysvarthresh.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "defsysvarthresh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/defsysvarthresh.html#defsysvarthresh", "defsysvarthresh", 'routine in <a href="code_snapshots/test_version/defsysvarthresh.html">defsysvarthresh.pro</a>', "defsysvarthresh.pro", "", "defsysvarthresh", "       Defines solar thresholds   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/defsysvarthresh.html", "defsysvarthresh.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "defsysvarthresh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/defsysvarthresh.html#defsysvarthresh", "defsysvarthresh", 'routine in <a href="code_snapshots/sep11/defsysvarthresh.html">defsysvarthresh.pro</a>', "defsysvarthresh.pro", "", "defsysvarthresh", "       Defines solar thresholds   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/defsysvarthresh.html", "defsysvarthresh.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "defsysvarthresh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/defsysvarthresh.html#defsysvarthresh", "defsysvarthresh", 'routine in <a href="code_snapshots/orig_version/defsysvarthresh.html">defsysvarthresh.pro</a>', "defsysvarthresh.pro", "", "defsysvarthresh", "       Defines solar thresholds   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/defsysvarthresh.html", "defsysvarthresh.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "defsysvarthresh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/defsysvarthresh.html#defsysvarthresh", "defsysvarthresh", 'routine in <a href="code_snapshots/jul25/defsysvarthresh.html">defsysvarthresh.pro</a>', "defsysvarthresh.pro", "", "defsysvarthresh", "       Defines solar thresholds   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/defsysvarthresh.html", "defsysvarthresh.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "defsysvarthresh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/defsysvarthresh.html#defsysvarthresh", "defsysvarthresh", 'routine in <a href="code_snapshots/aug22_notworking/defsysvarthresh.html">defsysvarthresh.pro</a>', "defsysvarthresh.pro", "", "defsysvarthresh", "       Defines solar thresholds   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/defsysvarthresh.html", "defsysvarthresh.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "defsysvarthresh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/defsysvarthresh.html#defsysvarthresh", "defsysvarthresh", 'routine in <a href="code_snapshots/albert_version/defsysvarthresh.html">defsysvarthresh.pro</a>', "defsysvarthresh.pro", "", "defsysvarthresh", "       Defines solar thresholds   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/delvarx.html", "delvarx.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "delvarx.pro", "", "", " NAME: 	DELVARX  PURPOSE:  	Delete up to 10 variables for memory management (can call from routines)  EXPLANATION: 	Like intrinsic DELVAR function, but can be used from any calling level         Modified in January 2012 to always free memory associated with        pointers/objects and remove the use EXECUTE()        Also look at  CALLING SEQUENCE:  	DELVARX,  p0, [p1, p2......p9]   INPUTS: 	p0, p1...p9 - variables to delete   OBSOLETE KEYWORD:        /FREE_MEM -  formerly freed memory associated with pointers                    and objects.  Since this is now the DELVARX default this                    keyword does nothing.   METHOD: 	Uses HEAP_FREE and PTR_NEW(/NO_COPY) to delete variables and free        memory   REVISION HISTORY: 	Copied from the Solar library, written by slf, 25-Feb-1993 	Added to Astronomy Library,  September 1995        Modified, 26-Mar-2003, Zarro (EER/GSFC) 26-Mar-2003        - added FREE_MEM to free pointer/objects        Modified, 28-Jan-2012, E. Rykoff (SLAC), W. Landsman -                replace EXECUTE calls with SCOPE_VARFETCH.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/delvarx.html#delvarx", "delvarx", 'routine in <a href="idlastro/delvarx.html">delvarx.pro</a>', "delvarx.pro", "", "delvarx", "", "free_memp0p1p2p3p4p5p6p7p8p9", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/deredd.html", "deredd.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "deredd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/deredd.html#deredd", "deredd", 'routine in <a href="idlastro/deredd.html">deredd.pro</a>', "deredd.pro", "", "deredd", " NAME:      DEREDD   PURPOSE:      Deredden stellar Stromgren parameters given for a value of E(b-y)  EXPLANATION:      See the procedure UVBYBETA for more info.    CALLING SEQUENCE:      deredd, eby, by, m1, c1, ub, by0, m0, c0, ub0, /UPDATE    INPUTS:      Eby - color index E(b-y),scalar  (E(b-y) = 0.73*E(B-V) )      by - b-y color (observed)      m1 - Stromgren line blanketing parameter (observed)      c1 - Stromgren Balmer discontinuity parameter (observed)      ub - u-b color (observed)       These input values are unaltered unless the /UPDATE keyword is set   OUTPUTS:      by0 - b-y color (dereddened)      m0 - Line blanketing index (dereddened)      c0 - Balmer discontinuity parameter (dereddened)      ub0 - u-b color (dereddened)    OPTIONAL INPUT KEYWORDS:      /UPDATE - If set, then input parameters are updated with the dereddened            values (and output parameters are not used).   REVISION HISTORY:      Adapted from FORTRAN routine DEREDD by T.T. Moon      W. Landsman          STX Co.        April, 1988      Converted to IDL V5.0   W. Landsman   September 1997  ", "updateEbybym1c1ubby0m0c0ub0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/detabify.html", "detabify.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "detabify.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/detabify.html#DETABIFY", "DETABIFY", 'routine in <a href="idlastro/detabify.html">detabify.pro</a>', "detabify.pro", "", "DETABIFY", " NAME: 	DETABIFY  PURPOSE: 	Replaces tabs in character strings with appropriate number of spaces  EXPLANATION: 	The number of space characters inserted is calculated to space 	out to the next effective tab stop, each of which is eight characters 	apart.   CALLING SEQUENCE: 	Result = DETABIFY( CHAR_STR )   INPUT PARAMETERS: 	CHAR_STR = Character string variable (or array) to remove tabs from.   OUTPUT: 	Result of function is CHAR_STR with tabs replaced by spaces.   RESTRICTIONS: 	CHAR_STR must be a character string variable.   MODIFICATION HISTORY: 	William Thompson, Feb. 1992. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "CHAR_STR", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/dirpath.html", "dirpath.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "dirpath.pro", "", "", " NAME:     DIRPATH   PURPOSE:      The purpose of this function is to return a device-independent     name of a directory. It is similar to the IDL-supplied FILEPATH     routine, except that a file name is not required.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:      Utility.   CALLING SEQUENCE:      IDL&gt; theDirectory = DIRPATH('examples')     IDL&gt; Print, theDirectory              C:\IDL\IDL56\examples   INPUTS:      subDirectory:    This is a string argument containing the name of the                      sub-directory you wish to use. It can be a string                      array of sub-directory names. By default, the subDirectory                      is set to ['examples', 'data']. To only return the Root_Directory,                      set the subDirectory to a null string (  ).   KEYWORDS:      ROOT_DIRECTORY: The name of the root directory to use. By default,                     the root directory is set to !DIR.   OUTPUTS:      The machine-independent directory path.   MODIFICATION HISTORY:      Written by: David W. Fanning, 28 April 2003.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/dirpath.html#DirPath", "DirPath", 'routine in <a href="coyote/dirpath.html">dirpath.pro</a>', "dirpath.pro", "", "DirPath", "", "RootDirectorysubdirectory", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dist_circle.html", "dist_circle.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dist_circle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dist_circle.html#dist_circle", "dist_circle", 'routine in <a href="idlastro/dist_circle.html">dist_circle.pro</a>', "dist_circle.pro", "", "dist_circle", " NAME:       DIST_CIRCLE  PURPOSE:       Form a square array where each value is its distance to a given center.  EXPLANATION:       Returns a square array in which the value of each element is its       distance to a specified center. Useful for circular aperture photometry.   CALLING SEQUENCE:       DIST_CIRCLE, IM, N, [ XCEN, YCEN,  /DOUBLE ]   INPUTS:       N = either  a scalar specifying the size of the N x N square output                array, or a 2 element vector specifying the size of the                N x M rectangular output array.   OPTIONAL INPUTS:       XCEN,YCEN = Scalars designating the X,Y pixel center.  These need                not be integers, and need not be located within the                output image.   If not supplied then the center of the output                image is used (XCEN = YCEN = (N-1)/2.).   OUTPUTS:        IM  - N by N (or M x N) floating array in which the value of each                pixel is equal to its distance to XCEN,YCEN   OPTIONAL INPUT KEYWORD:        /DOUBLE - If this keyword is set and nonzero, the output array will                be of type DOUBLE rather than floating point.   EXAMPLE:        Total the flux in a circular aperture within 3' of a specified RA        and DEC on an 512 x 512 image IM, with a header H.         IDL&gt; adxy, H, RA, DEC, x, y       ;Convert RA and DEC to X,Y        IDL&gt; getrot, H, rot, cdelt        ;CDELT gives plate scale deg/pixel        IDL&gt; cdelt = cdelt*3600.          ;Convert to arc sec/pixel        IDL&gt; dist_circle, circle, 512, x, y  ;Create a distance circle image        IDL&gt; circle = circle*abs(cdelt[0])   ;Distances now given in arcseconds        IDL&gt; good = where(circle LT 180)  ;Within 3 arc minutes        IDL&gt; print,total( IM[good] )      ;Total pixel values within 3'   RESTRICTIONS:        The speed of DIST_CIRCLE decreases and the the demands on virtual        increase as the square of the output dimensions.   Users should        dimension the output array as small as possible, and re-use the        array rather than re-calling DIST_CIRCLE   MODIFICATION HISTORY:        Adapted from DIST    W. Landsman            March 1991        Allow a rectangular output array   W. Landsman     June 1994        Converted to IDL V5.0   W. Landsman   September 1997        Add /DOUBLE keyword, make XCEN,YCEN optional  W. Landsman Jun 1998  ", "DOUBLEimnxcenycen", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/dist_ellipse.html", "dist_ellipse.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "dist_ellipse.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/dist_ellipse.html#dist_ellipse", "dist_ellipse", 'routine in <a href="idlastro/dist_ellipse.html">dist_ellipse.pro</a>', "dist_ellipse.pro", "", "dist_ellipse", " NAME:        DIST_ELLIPSE  PURPOSE:        Create a mask array useful for elliptical aperture photemetry  EXPLANATION:        Form an array in which the value of each element is equal to the        semi-major axis of the ellipse of specified center, axial ratio, and        position  angle, which passes through that element.  Useful for        elliptical aperture photometry.   CALLING SEQUENCE:        DIST_ELLIPSE, IM, N, XC, YC, RATIO, POS_ANG, /DOUBLE   INPUTS:        N = either  a scalar specifying the size of the N x N square output                array, or a 2 element vector specifying the size of the                M x N rectangular output array.        XC,YC - Scalars giving the position of the ellipse center.   This does                not necessarily have to be within the image        RATIO - Scalar giving the ratio of the major to minor axis.   This                should be greater than 1 for postion angle to have its                standard meaning.   OPTIONAL INPUTS:        POS_ANG - Position angle of the major axis, measured counter-clockwise                from the Y axis.  For an image in standard orientation                (North up, East left) this is the astronomical position angle.   OPTIONAL INPUT KEYWORD:        /DOUBLE - If this keyword is set and nonzero, the output array will                be of type DOUBLE rather than floating point.   OUTPUT:        IM - REAL*4 elliptical mask array, of size M x N.  THe value of each                pixel is equal to the semi-major axis of the ellipse of center                 XC,YC, axial ratio RATIO, and position angle POS_ANG, which                passes through the pixel.   EXAMPLE:        Total the flux in a elliptical aperture with a major axis of 3', an        axial ratio of 2.3, and a position angle of 25 degrees centered on        a specified RA and DEC.   The image array, IM is 200 x 200, and has        an associated FITS header H.         ADXY, H, ra, dec, x, y       ;Get X and Y corresponding to RA and Dec        GETROT, H, rot, cdelt        ;CDELT gives plate scale degrees/pixel        cdelt = abs( cdelt)*3600.    ;CDELT now in arc seconds/pixel        DIST_ELLIPSE, ell, 200, x, y, 2.3, 25  ;Create a elliptical image mask        ell = ell*cdelt(0)           ;Distances now given in arcseconds        good = where( ell lt 180 )   ;Within 3 arc minutes        print,total( im(good) )      ;Total pixel values within 3'   RESTRICTIONS:        The speed of DIST_ELLIPSE decreases and the the demands on virtual        increase as the square of the output dimensions.   Users should        dimension the output array as small as possible, and re-use the        array rather than re-calling DIST_ELLIPSE   REVISION HISTORY:        Written    W. Landsman             April, 1991        Somewhat faster algorithm          August, 1992        Allow rectangular output array     June, 1994        Converted to IDL V5.0   W. Landsman   September 1997        Added /DOUBLE keyword   W. Landsman   July 2000  ", "DOUBLEimnxcycratiopos_ang", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/doesntfindanything.html", "doesntfindanything.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "doesntfindanything.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/doesntfindanything.html#doesntfindanything", "doesntfindanything", 'routine in <a href="code_snapshots/obsolete_code/doesntfindanything.html">doesntfindanything.pro</a>', "doesntfindanything.pro", "", "doesntfindanything", "			Finds the centroid by looking at strips of data   ", "filexposypos", "          -1", "			comp4,xpos,ypos   			xpos - x center 			ypos - y center   ");
  
  

libdata[libdataItem++] = new Array("idlastro/eci2geo.html", "eci2geo.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "eci2geo.pro", "", "", " NAME:      ECI2GEO   PURPOSE:      Convert Earth-centered inertial coordinates to geographic spherical coords  EXPLANATION:      Converts from ECI (Earth-Centered Inertial) (X,Y,Z) rectangular      coordinates to geographic spherical coordinates (latitude, longitude,      altitude).    JD time is also needed as input.       ECI coordinates are in km from Earth center.      Geographic coordinates are in degrees/degrees/km      Geographic coordinates assume the Earth is a perfect sphere, with radius      equal to its equatorial radius.   CALLING SEQUENCE:      gcoord=eci2geo(ECI_XYZ,JDtime)   INPUT:        ECI_XYZ : the ECI [X,Y,Z] coordinates (in km), can be an array [3,n]                  of n such coordinates.        JDtime: the Julian Day time, double precision. Can be a 1-D array of n                  such times.   KEYWORD INPUTS:        None   OUTPUT:        a 3-element array of geographic [latitude,longitude,altitude], or an          array [3,n] of n such coordinates, double precision   COMMON BLOCKS:        None   PROCEDURES USED:        CT2LST - Convert Local Civil Time to Local Mean Sidereal Time   EXAMPLE:        IDL&gt; gcoord=eci2geo([6378.137+600,0,0], 2452343.38982663D)        IDL&gt; print,gcoord        0.0000000       232.27096       600.00000         (The above is the geographic direction of the vernal point on        2002/03/09 21:21:21.021, in geographic coordinates. The chosen        altitude was 600 km.)         gcoord can be further transformed into geodetic coordinates (using        geo2geodetic.pro) or into geomagnetic coordinates (using geo2mag.pro)   MODIFICATION HISTORY:        Written by Pascal Saint-Hilaire (Saint-Hilaire@astro.phys.ethz.ch) on               2001/05/13        Modified on 2002/05/13, PSH : vectorization + use of JD times  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/eci2geo.html#eci2geo", "eci2geo", 'routine in <a href="idlastro/eci2geo.html">eci2geo.pro</a>', "eci2geo.pro", "", "eci2geo", "", "ECI_XYZJDtim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/edgefidcheck.html", "edgefidcheck.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "edgefidcheck.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/edgefidcheck.html#edgefidcheck", "edgefidcheck", 'routine in <a href="code_snapshots/obsolete_code/edgefidcheck.html">edgefidcheck.pro</a>', "edgefidcheck.pro", "", "edgefidcheck", "", "inputthresh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/eq2hor.html", "eq2hor.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "eq2hor.pro", "", "", " NAME:    EQ2HOR   PURPOSE:     Convert celestial  (ra-dec) coords to local horizon coords (alt-az).   CALLING SEQUENCE:      eq2hor, ra, dec, jd, alt, az, [ha, LAT= , LON= , /WS, OBSNAME= , $                        /B1950 , PRECESS_= 0, NUTATE_= 0, REFRACT_= 0, $                        ABERRATION_= 0, ALTITUDE= , /VERBOSE, _EXTRA= ]   DESCRIPTION:   This  code calculates horizon (alt,az) coordinates from equatorial   (ra,dec) coords.   It is typically accurate to about 1 arcsecond or better (I   have checked the output against the publicly available XEPHEM software). It   performs precession, nutation, aberration, and refraction corrections.  The   perhaps best thing about it is that it can take arrays as inputs, in all   variables and keywords EXCEPT Lat, lon, and Altitude (the code assumes these   aren't changing), and uses vector arithmetic in every calculation except   when calculating the precession matrices.   INPUT VARIABLES:        RA   : Right Ascension of object  (J2000) in degrees (FK5); scalar or               vector.        Dec  : Declination of object (J2000) in degrees (FK5), scalar or vector.        JD   : Julian Date [scalar or vector]         Note: if RA and DEC are arrays, then alt and az will also be arrays.              If RA and DEC are arrays, JD may be a scalar OR an array of the              same dimensionality.   OPTIONAL INPUT KEYWORDS:        lat   : north geodetic latitude of location in degrees        lon   : EAST longitude of location in degrees (Specify west longitude                with a negative sign.)        /WS    : Set this to get the azimuth measured westward from south (not                East of North).        obsname: Set this to a valid observatory name to be used by the               astrolib OBSERVATORY procedure, which will return the latitude               and longitude to be used by this program.        /B1950 : Set this if your ra and dec are specified in B1950, FK4               coordinates (instead of J2000, FK5)        precess_ : Set this to 1 to force precession [default], 0 for no                precession correction        nutate_  : Set this to 1 to force nutation [default], 0 for no nutation.        aberration_ : Set this to 1 to force aberration correction [default],                      0 for no correction.        refract_ : Set to 1 to force refraction correction [default], 0 for no                      correction.        altitude: The altitude of the observing location, in meters. [default=0].        verbose: Set this for verbose output.  The default is verbose=0.        _extra: This is for setting TEMPERATURE or PRESSURE explicitly, which are                used by CO_REFRACT to calculate the refraction effect of the                atmosphere. If you don't set these, the program will make an                intelligent guess as to what they are (taking into account your                altitude).  See CO_REFRACT for more details.   OUTPUT VARIABLES: (all double precision)        alt    : altitude (in degrees)        az     : azimuth angle (in degrees, measured EAST from NORTH, but see                 keyword WS above.)        ha     : hour angle (in degrees) (optional)   DEPENDENCIES:        NUTATE, PRECESS, OBSERVATORY, SUNPOS, ADSTRING()        CO_NUTATE, CO_ABERRATION, CO_REFRACT, ALTAZ2HADEC, SETDEFAULTVALUE   BASIC STEPS    Apply refraction correction to find apparent Alt.    Calculate Local Mean Sidereal Time    Calculate Local Apparent Sidereal Time    Do Spherical Trig to find apparent hour angle, declination.    Calculate Right Ascension from hour angle and local sidereal time.    Nutation Correction to Ra-Dec    Aberration correction to Ra-Dec        Precess Ra-Dec to current equinox.  CORRECTIONS I DO NOT MAKE:    *  Deflection of Light by the sun due to GR. (typically milliarcseconds,         can be arseconds within one degree of the sun)    *  The Effect of Annual Parallax (typically &lt; 1 arcsecond)    *  and more (see below)   TO DO     * Better Refraction Correction.  Need to put in wavelength dependence,     and integrate through the atmosphere.         * Topocentric Parallax Correction (will take into account elevation of           the observatory)     * Proper Motion (but this will require crazy lookup tables or something).         * Difference between UTC and UT1 in determining LAST -- is this           important?         * Effect of Annual Parallax (is this the same as topocentric Parallax?)     * Polar Motion         * Better connection to Julian Date Calculator.   EXAMPLE    Find the position of the open cluster NGC 2264 at the Effelsburg Radio   Telescope in Germany, on June 11, 2023, at local time 22:00 (METDST).   The inputs will then be:         Julian Date = 2460107.250        Latitude = 50d 31m 36s        Longitude = 06h 51m 18s        Altitude = 369 meters        RA (J2000) = 06h 40m 58.2s        Dec(J2000) = 09d 53m 44.0s    IDL&gt; eq2hor, ten(6,40,58.2)*15., ten(9,53,44), 2460107.250d, alt, az, $                lat=ten(50,31,36), lon=ten(6,51,18), altitude=369.0, /verb, $                 pres=980.0, temp=283.0   The program produces this output (because the VERBOSE keyword was set)   Latitude = +50 31 36.0   Longitude = +06 51 18.0  Julian Date =  2460107.250000  Ra, Dec:  06 40 58.2  +09 53 44.0   (J2000)  Ra, Dec:  06 42 15.7  +09 52 19.2   (J2023.4422)  Ra, Dec:  06 42 13.8  +09 52 26.9   (fully corrected)  LMST = +11 46 42.0  LAST = +11 46 41.4  Hour Angle = +05 04 27.6  (hh:mm:ss)  Az, El =  17 42 25.6  +16 25 10.3   (Apparent Coords)  Az, El =  17 42 25.6  +16 28 22.8   (Observer Coords)   Compare this with the result from XEPHEM:  Az, El =  17h 42m 25.6s +16d 28m 21s   This 1.8 arcsecond discrepancy in elevation arises primarily from slight  differences in the way I calculate the refraction correction from XEPHEM, and  is pretty typical.   AUTHOR:    Chris O'Dell        Univ. of Wisconsin-Madison    Observational Cosmology Laboratory    Email: odell@cmb.physics.wisc.edu   Revision History:     August 2012  Use Strict_Extra to flag spurious keywords W. Landsman  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/eq2hor.html#eq2hor", "eq2hor", 'routine in <a href="idlastro/eq2hor.html">eq2hor.pro</a>', "eq2hor.pro", "", "eq2hor", "", "latlonWSobsnameB1950verboseprecess_nutate_refract_aberration_altitude_extraradecjdaltazha", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/eqpole.html", "eqpole.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "eqpole.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/eqpole.html#eqpole", "eqpole", 'routine in <a href="idlastro/eqpole.html">eqpole.pro</a>', "eqpole.pro", "", "eqpole", " NAME:        EQPOLE  PURPOSE:        Convert RA and Dec to X,Y using an equal-area polar projection.  EXPLANATION:        The output X and Y coordinates are scaled to be between        -90 and +90 to go from equator to pole to equator. Output map points        can be centered on the north pole or south pole.   CALLING SEQUENCE:        EQPOLE, L, B, X, Y, [ /SOUTHPOLE ]   INPUTS:        L - longitude - scalar or vector, in degrees        B - latitude - same number of elements as RA, in degrees   OUTPUTS:        X - X coordinate, same number of elements as RA.   X is normalized to                be between -90 and 90.        Y - Y coordinate, same number of elements as DEC.  Y is normalized to                be between -90 and 90.   KEYWORDS:         /SOUTHPOLE      - Keyword to indicate that the plot is to be centered                on the south pole instead of the north pole.   REVISION HISTORY:        J. Bloch        LANL, SST-9     1.1     5/16/91        Converted to IDL V5.0   W. Landsman   September 1997  ", "southpolelbxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/eqpole_grid.html", "eqpole_grid.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "eqpole_grid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/eqpole_grid.html#EQPOLE_GRID", "EQPOLE_GRID", 'routine in <a href="idlastro/eqpole_grid.html">eqpole_grid.pro</a>', "eqpole_grid.pro", "", "EQPOLE_GRID", " NAME:        EQPOLE_GRID   PURPOSE:        Produce an equal area polar projection grid overlay  EXPLANATION:        Grid is written on the current graphics device using the equal area        polar projection.   EQPOLE_GRID assumes that the output plot        coordinates span the x and y ranges of -90 to 90 for a region that        covers the equator to the chosen pole. The grid is assumed to go from        the equator to the chosen pole.   CALLING SEQUENCE:         EQPOLE_GRID[,DLONG,DLAT,[/SOUTHPOLE, LABEL = , /NEW, _EXTRA=]   INPUTS:         DLONG   = Optional input longitude line spacing in degrees. If left                  out, defaults to 30.        DLAT    = Optional input lattitude line spacing in degrees. If left                  out, defaults to 30.   INPUT KEYWORDS:         /SOUTHPOLE       = Optional flag indicating that the output plot is                          to be centered on the south rather than the north                          pole.        LABEL           = Optional flag for creating labels on the output                          grid on the prime meridian and the equator for                          lattitude and longitude lines. If set =2, then                          the longitude lines are labeled in hours and minutes.        CHARSIZE       = If /LABEL is set, then CHARSIZE specifies the size                          of the label characters (passed to XYOUTS)        CHARTHICK     =  If /LABEL is set, then CHARTHICK specifies the                          thickness of the label characters (passed to XYOUTS)        /NEW          =   If this keyword is set, then EQPOLE_GRID will create                          a new plot, rather than overlay an existing plot.         Any valid keyword to OPLOT such as COLOR, LINESTYLE, THICK can be        passed to AITOFF_GRID (though the _EXTRA facility) to to specify the        color, style, or thickness of the grid lines.  OUTPUTS:        Draws grid lines on current graphics device.   EXAMPLE:        Create a labeled equal area projection grid of the Galaxy, centered on        the South pole, and overlay stars at specified Galactic longitudes,        glong and latitudes, glat         IDL&gt; eqpole_grid,/label,/new,/south       ;Create labeled grid        IDL&gt; eqpole, glong, glat, x,y      ;Convert to X,Y coordinates        IDL&gt; plots,x,y,psym=2              ;Overplot  star  positions.   COPYRIGHT NOTICE:         Copyright 1992, The Regents of the University of California. This        software was produced under U.S. Government contract (W-7405-ENG-36)        by Los Alamos National Laboratory, which is operated by the        University of California for the U.S. Department of Energy.        The U.S. Government is licensed to use, reproduce, and distribute        this software. Neither the Government nor the University makes        any warranty, express or implied, or assumes any liability or        responsibility for the use of this software.   AUTHOR AND MODIFICATIONS:         J. Bloch        1.4     10/28/92        Converted to IDL V5.0   W. Landsman   September 1997        Create default plotting coords, if needed   W. Landsman  August 2000        Added _EXTRA, CHARTHICK, CHARSIZE keywords  W. Landsman  March 2001  ", "_EXTRALABELSSOUTHPOLENEWCHARSIZECHARTHICKDLONGDLAT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/error_message.html", "error_message.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "error_message.pro", "", "", " NAME:     ERROR_MESSAGE   PURPOSE:      The purpose of this function  is to have a device-independent     error messaging function. The error message is reported     to the user by using DIALOG_MESSAGE if widgets are     supported and MESSAGE otherwise.      In general, the ERROR_MESSAGE function is not called directly.     Rather, it is used in a CATCH error handler. Errors are thrown     to ERROR_MESSAGE with the MESSAGE command. A typical CATCH error     handler is shown below.         Catch, theError        IF theError NE 0 THEN BEGIN           Catch, /Cancel           void = Error_Message()           RETURN        ENDIF      Error messages would get into the ERROR_MESSAGE function by     throwing an error with the MESSAGE command, like this:         IF test NE 1 THEN Message, 'The test failed.'   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:      Utility.   CALLING SEQUENCE:      ok = Error_Message(the_Error_Message)   INPUTS:      the_Error_Message: This is a string argument containing the error        message you want reported. If undefined, this variable is set        to the string in the !Error_State.Msg system variable.   KEYWORDS:      ERROR: Set this keyword to cause Dialog_Message to use the ERROR        reporting dialog. Note that a bug in IDL causes the ERROR dialog        to be used whether this keyword is set to 0 or 1!      INFORMATIONAL: Set this keyword to cause Dialog_Message to use the        INFORMATION dialog instead of the WARNING dialog. Note that a bug        in IDL causes the ERROR dialog to be used if this keyword is set to 0!      NONAME: Normally, the name of the routine in which the error occurs is        added to the error message. Setting this keyword will suppress this        behavior.      TITLE: Set this keyword to the title of the DIALOG_MESSAGE window. By        default the keyword is set to 'System Error' unless !ERROR_STATE.NAME        equals  IDL_M_USER_ERR , in which case it is set to  Trapped Error'.      TRACEBACK: Setting this keyword results in an error traceback        being printed to standard output with the PRINT command. Set to        1 (ON) by default. Use TRACEBACK=0 to turn this functionality off.      QUIET: Set this keyword to suppress the DIALOG_MESSAGE pop-up dialog.   OUTPUTS:      Currently the only output from the function is the string  OK .   RESTRICTIONS:      The WARNING Dialog_Message dialog is used by default.   EXAMPLE:      To handle an undefined variable error:      IF N_Elements(variable) EQ 0 THEN $        ok = Error_Message('Variable is undefined')   MODIFICATION HISTORY:      Written by: David W. Fanning, 27 April 1999.     Added the calling routine's name in the message and NoName keyword. 31 Jan 2000. DWF.     Added _Extra keyword. 10 February 2000. DWF.     Forgot to add _Extra everywhere. Fixed for MAIN errors. 8 AUG 2000. DWF.     Adding call routine's name to Traceback Report. 8 AUG 2000. DWF.     Added ERROR, INFORMATIONAL, and TITLE keywords. 19 SEP 2002. DWF.     Removed the requirement that you use the NONAME keyword with the MESSAGE       command when generating user-trapped errors. 19 SEP 2002. DWF.     Added distinctions between trapped errors (errors generated with the       MESSAGE command) and IDL system errors. Note that if you call ERROR_MESSAGE       directly, then the state of the !ERROR_STATE.NAME variable is set       to the *last* error generated. It is better to access ERROR_MESSAGE       indirectly in a Catch error handler from the MESSAGE command. 19 SEP 2002. DWF.     Change on 19 SEP 2002 to eliminate NONAME requirement did not apply to object methods.       Fixed program to also handle messages from object methods. 30 JULY 2003. DWF.     Removed obsolete STR_SEP and replaced with STRSPLIT. 27 Oct 2004. DWF.     Made a traceback the default case without setting TRACEBACK keyword. 19 Nov 2004. DWF.     Added check for window connection specifically for CRON jobs. 6 May 2008. DWF.     Added QUIET keyword. 18 October 2008. DWF.     The traceback information was bypassed when in the PostScript device. Not what I       had in mind. Fixed. 6 July 2009. DWF.     The QUIET keyword was clearing traceback information. Fixed with help from Phillip Bitzer. 2 Oct 2012. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/error_message.html#ERROR_MESSAGE", "ERROR_MESSAGE", 'routine in <a href="coyote/error_message.html">error_message.pro</a>', "error_message.pro", "", "ERROR_MESSAGE", "", "ErrorInformationalTracebackNoNameTitleQuiet_ExtratheMessage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/error_message.html", "error_message.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "error_message.pro", "", "", " NAME:     ERROR_MESSAGE   PURPOSE:      The purpose of this function  is to have a device-independent     error messaging function. The error message is reported     to the user by using DIALOG_MESSAGE if widgets are     supported and MESSAGE otherwise.      In general, the ERROR_MESSAGE function is not called directly.     Rather, it is used in a CATCH error handler. Errors are thrown     to ERROR_MESSAGE with the MESSAGE command. A typical CATCH error     handler is shown below.         Catch, theError        IF theError NE 0 THEN BEGIN           Catch, /Cancel           void = Error_Message()           RETURN        ENDIF      Error messages would get into the ERROR_MESSAGE function by     throwing an error with the MESSAGE command, like this:         IF test NE 1 THEN Message, 'The test failed.'   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:      Utility.   CALLING SEQUENCE:      ok = Error_Message(the_Error_Message)   INPUTS:      the_Error_Message: This is a string argument containing the error        message you want reported. If undefined, this variable is set        to the string in the !Error_State.Msg system variable.   KEYWORDS:      ERROR: Set this keyword to cause Dialog_Message to use the ERROR        reporting dialog. Note that a bug in IDL causes the ERROR dialog        to be used whether this keyword is set to 0 or 1!      INFORMATIONAL: Set this keyword to cause Dialog_Message to use the        INFORMATION dialog instead of the WARNING dialog. Note that a bug        in IDL causes the ERROR dialog to be used if this keyword is set to 0!      NONAME: Normally, the name of the routine in which the error occurs is        added to the error message. Setting this keyword will suppress this        behavior.      TITLE: Set this keyword to the title of the DIALOG_MESSAGE window. By        default the keyword is set to 'System Error' unless !ERROR_STATE.NAME        equals  IDL_M_USER_ERR , in which case it is set to  Trapped Error'.      TRACEBACK: Setting this keyword results in an error traceback        being printed to standard output with the PRINT command. Set to        1 (ON) by default. Use TRACEBACK=0 to turn this functionality off.      QUIET: Set this keyword to suppress the DIALOG_MESSAGE pop-up dialog.   OUTPUTS:      Currently the only output from the function is the string  OK .   RESTRICTIONS:      The WARNING Dialog_Message dialog is used by default.   EXAMPLE:      To handle an undefined variable error:      IF N_Elements(variable) EQ 0 THEN $        ok = Error_Message('Variable is undefined')   MODIFICATION HISTORY:      Written by: David W. Fanning, 27 April 1999.     Added the calling routine's name in the message and NoName keyword. 31 Jan 2000. DWF.     Added _Extra keyword. 10 February 2000. DWF.     Forgot to add _Extra everywhere. Fixed for MAIN errors. 8 AUG 2000. DWF.     Adding call routine's name to Traceback Report. 8 AUG 2000. DWF.     Added ERROR, INFORMATIONAL, and TITLE keywords. 19 SEP 2002. DWF.     Removed the requirement that you use the NONAME keyword with the MESSAGE       command when generating user-trapped errors. 19 SEP 2002. DWF.     Added distinctions between trapped errors (errors generated with the       MESSAGE command) and IDL system errors. Note that if you call ERROR_MESSAGE       directly, then the state of the !ERROR_STATE.NAME variable is set       to the *last* error generated. It is better to access ERROR_MESSAGE       indirectly in a Catch error handler from the MESSAGE command. 19 SEP 2002. DWF.     Change on 19 SEP 2002 to eliminate NONAME requirement did not apply to object methods.       Fixed program to also handle messages from object methods. 30 JULY 2003. DWF.     Removed obsolete STR_SEP and replaced with STRSPLIT. 27 Oct 2004. DWF.     Made a traceback the default case without setting TRACEBACK keyword. 19 Nov 2004. DWF.     Added check for window connection specifically for CRON jobs. 6 May 2008. DWF.     Added QUIET keyword. 18 October 2008. DWF.     The traceback information was bypassed when in the PostScript device. Not what I       had in mind. Fixed. 6 July 2009. DWF.     The QUIET keyword was clearing traceback information. Fixed with help from Phillip Bitzer. 2 Oct 2012. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/error_message.html#ERROR_MESSAGE", "ERROR_MESSAGE", 'routine in <a href="idlastro/coyote/error_message.html">error_message.pro</a>', "error_message.pro", "", "ERROR_MESSAGE", "", "ErrorInformationalTracebackNoNameTitleQuiet_ExtratheMessage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/errorlogger__define.html", "errorlogger__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "errorlogger__define.pro", "", "", " NAME:        ErrorLogger__Define   PURPOSE:         The purpose of this program is to log program errors or text messages during        program execution as an aid to debugging such a program at a later date. The        ErrorLogger program is written as an object so that it will persist in the IDL        session until it is destroyed.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         errorLogger = Obj_New( ErrorLogger )   ARGUMENTS:         filename:    The name of the error log file. If not provided, a default name                     will be created, based on the current system time. (Optional)   KEYWORDS:         ALERT:       The default behavior of the error logger is simply to write text to a file.                     But if the ALERT keyword is set, the program will alert the user via a                     message dialog that an error has occurred when using the AddError method.                     Default is 0. (Input)        DELETE_ON_DESTROY: If this keyword is set, the error log file will be deleted when the                     ErrorLogger object is destroyed, but only if the ErrorLogger object is not                     in an error state at that time (error status = 2). Default is 0. (Input)         NOCLUTTER:   Believe it or not, some people who use an ErrorLogger prefer that an error log                     file is never left behind. (They prefer that the program act like ERROR_MESSAGE.)                     For those people, the NOCLUTTER keyword provides a way for them to automatically                     set the ALERT and DESTROY_ON_DELETE keywords to 1. It also prevents the error                     logger from ever setting the error status to 2. Thus, when the ErrorLogger is                     destroyed, the file is always deleted. Default is 0. When set, overrides ALERT                     and DELETE_ON_DESTROY settings. (Input)         NOTRACEBACK: Set this keyword to suppress traceback information in the error log output                     and in any alerts issued by the program. Default is 0. (Input)         TIMESTAMP:   Set this keyword if you wish a time stamp to be appended to the provided                     filename. Otherwise, the filename is used as defined. Default filenames                     always have a timestamp appended to the file name. (Input)   METHODS:          AddError:   Adds an error text string or array to the error log file. By default,                     it will add the HELP, LAST_MESSAGE=1, /TRACEBACE traceback                     information to the file. (Procedure)          AddText:    Adds a text string or array to the error log file. (Procedure)          ClearLog:   Erases all the text currently in the error log file. (Procedure)          CloseFile:  Closes the currently open error log file. (Procedure)          Flush:      Forces a write of any current information to the disk (Procedure)          GetProperty: Gets properties of the object. (Procedure)          LastMessage: Returns the last message text written into the error log file. (Function)          OpenFile:   Opens the error log file for writing. (Function)          PrintLastMessage: Writes the last message text written into the error log file to                     standard output. (Procedure)          Status:     Returns the current status of the error logger. (0 - waiting for input,                     1 - normal operation, 2 - error operation.) (Function)          SetProperty: Sets properties of the object. (Procedure)          SetStatus:  Sets the current status of the error logger. Normally not used by the                     user, but used internally. (Procedure)   MODIFICATION HISTORY:         Written by David W. Fanning, November 2009.        Modified and expanded the way errors are written into the log file and displayed.           Also made it possible to automatically delete the log file when the object is           destroyed, if the error logger is not in an error state at the time. Added           DELETE_ON_DESTROY and NOTRACEBACK keywords to the INIT and SetProperty           methods. 28 Jan 2010. DWF.         Modified default filenames so that I am now guaranteed to get unique file names            by using cgTimestamp program from the Coyote Library. 8 Feb 2010. DWF.         Added NOCLUTTER keyword. 15 February 2010. DWF.         Added PRINT keyword to AddText method to allow users to log statements that should            also be printed easily to a file. 17 February 2010. DWF.         Small documentation changes to the program. 22 June 2010. DWF.         Made a change so that the file is not opened until something needs to be written             to it. 22 June 2010. DWF.         Added FLUSH method and keyword IMMEDIATE to the INIT method (defaults to 1) which             will immediately flush the log information to disk when log information is             added to the object. This will prevent missing information that is buffered             when a program crashes. Matt Savoie suggestion. DWF, 10 Sept 2010.         Now calling cgTimeStamp rather than TimeStamp to avoid problems with IDL code. 6 Feb 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::AddError", "ErrorLogger::AddError", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::AddError", "", "theText", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::AddText", "ErrorLogger::AddText", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::AddText", "", "PRINTADD_CALLERtheText", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::ClearLog", "ErrorLogger::ClearLog", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::ClearLog", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::Flush", "ErrorLogger::Flush", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::Flush", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::CloseFile", "ErrorLogger::CloseFile", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::CloseFile", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::GetFileName", "ErrorLogger::GetFileName", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::GetFileName", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::Status", "ErrorLogger::Status", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::Status", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::SetStatus", "ErrorLogger::SetStatus", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::SetStatus", "", "status", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::OpenFile", "ErrorLogger::OpenFile", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::OpenFile", "", "DELETE_CURRENT_FILEnewLogFilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::LastMessage", "ErrorLogger::LastMessage", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::LastMessage", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::PrintLastMessage", "ErrorLogger::PrintLastMessage", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::PrintLastMessage", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::GetProperty", "ErrorLogger::GetProperty", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::GetProperty", "", "ALERTDELETE_ON_DESTROYFILENAMELAST_MESSAGELUNNOCLUTTERNOTRACEBACKSTATUS", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::SetProperty", "ErrorLogger::SetProperty", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::SetProperty", "", "ALERTDELETE_ON_DESTROYNOCLUTTERNOTRACEBACKSTATUS", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::CLEANUP", "ErrorLogger::CLEANUP", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger::INIT", "ErrorLogger::INIT", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger::INIT", "", "ALERTDELETE_ON_DESTROYIMMEDIATENOCLUTTERNOTRACEBACKTIMESTAMPfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/errorlogger__define.html#ErrorLogger__Define", "ErrorLogger__Define", 'routine in <a href="coyote/errorlogger__define.html">errorlogger__define.pro</a>', "errorlogger__define.pro", "", "ErrorLogger__Define", "", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/euler.html", "euler.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "euler.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/euler.html#EULER", "EULER", 'routine in <a href="idlastro/euler.html">euler.pro</a>', "euler.pro", "", "EULER", " NAME:      EULER  PURPOSE:      Transform between Galactic, celestial, and ecliptic coordinates.  EXPLANATION:      Use the procedure ASTRO to use this routine interactively   CALLING SEQUENCE:       EULER, AI, BI, AO, BO, [ SELECT, /FK4, /RADIAN, SELECT = ]   INPUTS:        AI - Input Longitude, scalar or vector.  In DEGREES unless /RADIAN             is set.  If only two parameters are supplied, then  AI and BI              will be modified to contain the output longitude and latitude.        BI - Input Latitude in DEGREES   OPTIONAL INPUT:        SELECT - Integer (1-6) specifying type of coordinate transformation.        SELECT   From          To        |   SELECT      From            To        1     RA-Dec (2000)  Galactic   |     4       Ecliptic      RA-Dec        2     Galactic       RA-DEC     |     5       Ecliptic      Galactic        3     RA-Dec         Ecliptic   |     6       Galactic      Ecliptic        If not supplied as a parameter or keyword, then EULER will prompt for       the value of SELECT       Celestial coordinates (RA, Dec) should be given in equinox J2000       unless the /FK4 keyword is set.  OUTPUTS:        AO - Output Longitude in DEGREES, always double precision        BO - Output Latitude in DEGREES, always double precision   OPTIONAL INPUT KEYWORD:        /FK4 - If this keyword is set and non-zero, then input and output              celestial and ecliptic coordinates should be given in equinox              B1950.        /RADIAN - if set, then all input and output angles are in radians rather              than degrees.        SELECT  - The coordinate conversion integer (1-6) may alternatively be               specified as a keyword  EXAMPLE:        Find the Galactic coordinates of Cyg X-1 (ra=299.590315, dec=35.201604)        IDL&gt; ra = 299.590315d        IDL&gt; dec = 35.201604d        IDL&gt; euler,ra,dec,glong,glat,1 & print,glong,glat             71.334990, 3.0668335  REVISION HISTORY:        Written W. Landsman,  February 1987        Adapted from Fortran by Daryl Yentis NRL        Made J2000 the default, added /FK4 keyword  W. Landsman December 1998        Add option to specify SELECT as a keyword W. Landsman March 2003        Use less virtual memory for large input arrays W. Landsman June 2008        Added /RADIAN input keyword  W. Landsman   Sep 2008  ", "FK4SELECTRADIANAIBIAOBOSELECT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/evenfastercenter.html", "evenfastercenter.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "evenfastercenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/evenfastercenter.html#evenfastercenter", "evenfastercenter", 'routine in <a href="code_snapshots/obsolete_code/evenfastercenter.html">evenfastercenter.pro</a>', "evenfastercenter.pro", "", "evenfastercenter", "", "inputidedsuns", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/everysun.html", "everysun.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "everysun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/everysun.html#everysun", "everysun", 'routine in <a href="code_snapshots/aug22_notworking/everysun.html">everysun.pro</a>', "everysun.pro", "", "everysun", "       Finds the rough centroiding centers of any and all suns   ", "input           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/everysun.html", "everysun.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "everysun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/everysun.html#everysun", "everysun", 'routine in <a href="code_snapshots/albert_version/everysun.html">everysun.pro</a>', "everysun.pro", "", "everysun", "       Finds the rough centroiding centers of any and all suns   ", "input           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/everysun.html", "everysun.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "everysun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/everysun.html#everysun", "everysun", 'routine in <a href="code_snapshots/jul25/everysun.html">everysun.pro</a>', "everysun.pro", "", "everysun", "       Finds the rough centroiding centers of any and all suns   ", "input           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/everysun.html", "everysun.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "everysun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/everysun.html#everysun", "everysun", 'routine in <a href="code_snapshots/orig_version/everysun.html">everysun.pro</a>', "everysun.pro", "", "everysun", "       Finds the rough centroiding centers of any and all suns   ", "input           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/everysun.html", "everysun.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "everysun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/everysun.html#everysun", "everysun", 'routine in <a href="sep20/everysun.html">everysun.pro</a>', "everysun.pro", "", "everysun", "       Finds the rough centroiding centers of any and all suns   ", "input           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/everysun.html", "everysun.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "everysun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/everysun.html#everysun", "everysun", 'routine in <a href="code_snapshots/sep11/everysun.html">everysun.pro</a>', "everysun.pro", "", "everysun", "       Finds the rough centroiding centers of any and all suns   ", "input           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/everysun.html", "everysun.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "everysun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/everysun.html#everysun", "everysun", 'routine in <a href="code_snapshots/test_version/everysun.html">everysun.pro</a>', "everysun.pro", "", "everysun", "       Finds the rough centroiding centers of any and all suns   ", "input           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/expand_tilde.html", "expand_tilde.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "expand_tilde.pro", "", "", " NAME:       EXPAND_TILDE()   PURPOSE:        Expand tilde in UNIX directory names   CALLING SEQUENCE:        IDL&gt; output=expand_tilde(input)   INPUTS:        INPUT = input file or directory name, scalar string   OUTPUT:        Returns expanded filename, scalar string   EXAMPLES:        output=expand_tilde('~zarro/test.doc')                ---&gt; output='/usr/users/zarro'   NOTES:        This version of EXPAND_TILDE differs from the version in the Solar        Library in that it does not call the functions EXIST and IDL_RELEASE.        However, it should work identically.  PROCEDURE CALLS:        None.  REVISION HISTORY:        Version 1,  17-Feb-1997,  D M Zarro.  Written        Transfered from Solar Library   W. Landsman   Sep. 1997        Made more robust  D. Zarro/W. Landsman  Sep. 2000        Made even more robust (since things like ~zarro weren't being expanded)        Zarro (EITI/GSFC, Mar 2001)  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/expand_tilde.html#expand_tilde", "expand_tilde", 'routine in <a href="idlastro/expand_tilde.html">expand_tilde.pro</a>', "expand_tilde.pro", "", "expand_tilde", "", "name", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/extast.html", "extast.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "extast.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/extast.html#extast", "extast", 'routine in <a href="idlastro/extast.html">extast.pro</a>', "extast.pro", "", "extast", " NAME:      EXTAST  PURPOSE:      Extract ASTrometry parameters from a FITS image header.  EXPLANATION:      Extract World Coordinate System information      ( http://fits.gsfc.nasa.gov/fits_wcs.html ) from a FITS header and      place it into an IDL structure.   CALLING SEQUENCE:      EXTAST, hdr, [ astr, noparams, ALT= ]   INPUT:      HDR - variable containing the FITS header (string array)   OUTPUTS:      ASTR - Anonymous structure containing astrometry info from the FITS              header ASTR always contains the following tags (even though              some projections do not require all the parameters)        .NAXIS - 2 element array giving image size       .CD   -  2 x 2 array containing the astrometry parameters CD1_1 CD1_2                in DEGREES/PIXEL                                 CD2_1 CD2_2       .CDELT - 2 element double vector giving physical increment at the                  reference pixel       .CRPIX - 2 element double vector giving X and Y coordinates of reference                pixel (def = NAXIS/2) in FITS convention (first pixel is 1,1)       .CRVAL - 2 element double precision vector giving R.A. and DEC of              reference pixel in DEGREES       .CTYPE - 2 element string vector giving projection types, default              ['RA---TAN','DEC--TAN']       .LONGPOLE - scalar giving native longitude of the celestial pole              (default = 180 for zenithal projections)       .LATPOLE - scalar giving native latitude of the celestial pole default=0)       .PV2 - Vector of projection parameter associated with latitude axis              PV2 will have up to 21 elements for the ZPN projection, up to 3              for the SIN projection and no more than 2 for any other              projection       .DISTORT - optional substructure specifying any distortion parameters                  currently implemented only for  SIP  (Spitzer Imaging                  Polynomial) distortion parameters         NOPARAMS -  Scalar indicating the results of EXTAST              -1 = Failure - Header missing astrometry parameters              1 = Success - Header contains CROTA + CDELT (AIPS-type) astrometry              2 = Success - Header contains CDn_m astrometry, rec.              3 = Success - Header contains PCn_m + CDELT astrometry.              4 = Success - Header contains ST  Guide Star Survey astrometry                            (see gsssextast.pro )  OPTIONAL INPUT/OUTPUT KEYWORDS:        ALT -  single character 'A' through 'Z' or ' ' specifying an alternate               astrometry system present in the FITS header.    The default is               to use the primary astrometry or ALT = ' '.   If /ALT is set,               then this is equivalent to ALT = 'A'.   See Section 3.3 of               Greisen & Calabretta (2002, A&A, 395, 1061) for information about               alternate astrometry keywords.    If not set on input, then               ALT is set to ' ' on output.  PROCEDURE:        EXTAST checks for astrometry parameters in the following order:         (1) the CD matrix PC1_1,PC1_2...plus CDELT*, CRPIX and CRVAL        (2) the CD matrix CD1_1,CD1_2... plus CRPIX and CRVAL.        (3) CROTA2 (or CROTA1) and CDELT plus CRPIX and CRVAL.         All three forms are valid FITS according to the paper  Representations        of World Coordinates in FITS by Greisen and Calabretta (2002, A&A, 395,        1061 http://fits.gsfc.nasa.gov/fits_wcs.html ) although form (1) is        preferred.   NOTES:        1.  An anonymous structure is created to avoid structure definition        conflicts.    This is needed because some projection systems        require additional dimensions (i.e. spherical cube        projections require a specification of the cube face).         2,   Some FITS headers (e.g.from HST/ACS) include SIP forward distortion        coefficients but do not include the reverse coefficients.   Currently,        EXTAST only gives a warning that the reverse coefficients (RA,Dec to        X,Y) are not present.   EXTAST should actually compute        the inverse coefficients, but this is not yet implemented..  PROCEDURES CALLED:       GSSSEXTAST, ZPARCHECK  REVISION HISTORY       Written by B. Boothman 4/15/86       Accept CD001001 keywords               1-3-88       Accept CD1_1, CD2_1... keywords    W. Landsman    Nov. 92       Recognize GSSS FITS header         W. Landsman    June 94       Get correct sign, when converting CDELT* to CD matrix for right-handed       coordinate system                  W. Landsman   November 1998       Consistent conversion between CROTA and CD matrix  October 2000       CTYPE = 'PIXEL' means no astrometry params  W. Landsman January 2001       Don't choke if only 1 CTYPE value given W. Landsman  August 2001       Recognize PC00n00m keywords again (sigh...)  W. Landsman December 2001       Recognize GSSS in ctype also       D. Finkbeiner Jan 2002       Introduce ALT keyword              W. Landsman June 2003       Fix error introduced June 2003 where free-format values would be       truncated if more than 20 characters.  W. Landsman Aug 2003       Further fix to free-format values -- slash need not be present Sep 2003       Default value of LATPOLE is 90.0  W. Landsman February 2004       Allow for distortion substructure, currently implemented only for           SIP (Spitzer Imaging Polynomial)   W. Landsman February 2004       Correct LONGPOLE computation if CTYPE = ['*DEC','*RA'] W. L. Feb. 2004       Assume since V5.3 (vector STRMID)  W. Landsman Feb 2004       Yet another fix to free-format values   W. Landsman April 2004       Introduce PV2 tag to replace PROJP1, PROJP2.. etc.  W. Landsman May 2004       Convert NCP projection to generalized SIN   W. Landsman Aug 2004       Add NAXIS tag to output structure  W. Landsman Jan 2007       .CRPIX tag now Double instead of Float   W. Landsman  Apr 2007       If duplicate keywords use the *last* value W. Landsman Aug 2008       Fix typo for AZP projection, nonzero longpole N. Cunningham Feb 2009       Give warning if reverse SIP coefficient not present  W. Landsman Nov 2011       Allow obsolete CD matrix representations W. Landsman May 2012  ", "althdrastrnoparams", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/extgrp.html", "extgrp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "extgrp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/extgrp.html#extgrp", "extgrp", 'routine in <a href="idlastro/extgrp.html">extgrp.pro</a>', "extgrp.pro", "", "extgrp", " NAME: 	EXTGRP  PURPOSE: 	Extract the group parameter information out of SXREAD output  EXPLANATION: 	This procedure extracts the group parameter information out of a 	header and parameter variable obtained from SXREAD.  This allows 	astrometry, photometry and other parameters to be easily SXPARed by 	conventional methods and allows the image and header to be saved in 	a SIMPLE format.   CALLING SEQUENCE: 	ExtGrp, hdr, par   INPUT: 	HDR - The header which is to be converted (input and output) 	PAR - The Parameter string returned from a call to SXREAD   OUTPUT: 	HDR -  The converted header, string array   OTHER PROCEDURES CALLED: 	SXPAR(), SXADDPAR, SXGPAR(), STRN()   HISTORY: 	25-JUN-90 Version 1 written 	13-JUL-92 Header finally added to this ancient procedure, code spiffed up 	a bit.  Now 3 times faster.  Added PTYPE comment inclusion.  E. Deutsch 	Converted to IDL V5.0   W. Landsman   September 1997  ", "hdrpar", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/f_format.html", "f_format.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "f_format.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/f_format.html#f_format", "f_format", 'routine in <a href="idlastro/f_format.html">f_format.pro</a>', "f_format.pro", "", "f_format", " NAME: 	F_FORMAT  PURPOSE: 	Choose a nice floating format for displaying an array of REAL data.  EXPLANATION: 	Called by TVLIST, IMLIST.   CALLING SEQUENCE: 	fmt = F_FORMAT( minval, maxval, factor, [ length ] )   INPUTS: 	MINVAL - REAL scalar giving the minimum value of an array of numbers 		for which one desires a nice format. 	MAXVAL - REAL scalar giving maximum value in array of numbers   OPTIONAL INPUT: 	LENGTH - length of the output F format (default = 5) 		must be an integer scalar &gt; 2   OUTPUT: 	FMT - an F or I format string, e.g. 'F5.1' 	FACTOR - factor of 10 by which to multiply array of numbers to achieve 		a pretty display using format FMT.   EXAMPLE: 	Find a nice format to print an array of numbers with a minimum of 5.2e-3 	and a maximum  of 4.2e-2.  		IDL&gt; fmt = F_FORMAT( 5.2e-3, 4.2e-2, factor )  	yields fmt = '(F5.2)' and factor = .01, i.e. the array can be displayed 	with a F5.2 format after multiplication by 100.   REVISION HISTORY: 	Written W. Landsman              December 1988 	Deal with factors &lt; 1.           August 1991 	Deal with factors &lt; 1. *and* a large range    October 1992 	Now returns In format rather than Fn.0    February, 1994 	Converted to IDL V5.0   W. Landsman   September 1997  ", "minvalmaxvalfactorlength", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jhuapl/factor.html", "factor.pro", '.pro file in <a href="idlastro/jhuapl/dir-overview.html">idlastro/jhuapl/ directory</a>', "factor.pro", "", "", " NAME:        FACTOR  PURPOSE:        Find prime factors of a given number.  CATEGORY:  CALLING SEQUENCE:        factor, x, p, n  INPUTS:        x = Number to factor (&gt;1).       in  KEYWORD PARAMETERS:        Keywords:          /QUIET  means do not print factors.          /DEBUG  Means list steps as they happen.          /TRY    Go beyond 20000 primes.  OUTPUTS:        p = Array of prime numbers.      out        n = Count of each element of p.  out  COMMON BLOCKS:  NOTES:        Note: see also prime, numfactors, print_fact.  MODIFICATION HISTORY:        R. Sterner.  4 Oct, 1988.        RES 25 Oct, 1990 --- converted to IDL V2.        R. Sterner, 1999 Jun 30 --- Improved (faster, bigger).        R. Sterner, 1999 Jul  7 --- Bigger values (used unsigned).        R. Sterner, 1999 Jul  9 --- Tried to make backward compatable.        R. Sterner, 2000 Jan 06 --- Fixed to ignore non-positive numbers.        Johns Hopkins University Applied Physics Laboratory.   Copyright (C) 1988, Johns Hopkins University/Applied Physics Laboratory  This software may be used, copied, or redistributed as long as it is not  sold and this copyright notice is reproduced on each copy made.  This  routine is provided as is without any express or implied warranties  whatsoever.  Other limitations apply as described in the file disclaimer.txt.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/factor.html#spc", "spc", 'routine in <a href="idlastro/jhuapl/factor.html">factor.pro</a>', "factor.pro", "", "spc", "", "characternotrimhelpntext", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/factor.html#print_fact", "print_fact", 'routine in <a href="idlastro/jhuapl/factor.html">factor.pro</a>', "factor.pro", "", "print_fact", "", "helppn", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/factor.html#factor", "factor", 'routine in <a href="idlastro/jhuapl/factor.html">factor.pro</a>', "factor.pro", "", "factor", "", "quietdebugtryhelpxpn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/fastcenter.html", "fastcenter.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "fastcenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/fastcenter.html#fastcenter", "fastcenter", 'routine in <a href="code_snapshots/obsolete_code/fastcenter.html">fastcenter.pro</a>', "fastcenter.pro", "", "fastcenter", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/fastercenter.html", "fastercenter.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "fastercenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/fastercenter.html#fastercenter", "fastercenter", 'routine in <a href="code_snapshots/obsolete_code/fastercenter.html">fastercenter.pro</a>', "fastercenter.pro", "", "fastercenter", "", "inputidedsuns", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fdecomp.html", "fdecomp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fdecomp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fdecomp.html#fdecomp", "fdecomp", 'routine in <a href="idlastro/fdecomp.html">fdecomp.pro</a>', "fdecomp.pro", "", "fdecomp", " NAME:      FDECOMP  PURPOSE:      Routine to decompose file name(s) for any operating system.   CALLING SEQUENCE:      FDECOMP, filename, disk, dir, name, qual, [OSFamily = ]   INPUT:      filename - string file name(s), scalar or vector   OUTPUTS:      All the output parameters will have the same number of elements as        input filename         disk - disk name, always '' on a Unix machine, scalar or vector string        dir - directory name, scalar or vector string        name - file name, scalar or vector string        qual - qualifier, set equal to the characters beyond the last  .    OPTIONAL INPUT KEYWORD:      OSFamily -  scalar string specifying the operating system, must be either              'Windows' or 'unix'.    If not supplied,              then !VERSION.OS_FAMILY is used to determine the OS.  EXAMPLES:      Consider the following file names       unix:    file = '/itt/idl71/avg.pro'      Windows: file =  'd:\itt\idl71\avg.pro'       then IDL&gt; FDECOMP,  file, disk, dir, name, qual        will return the following                   Disk             Dir          Name        Qual        Unix:      ''            '/itt/idl71/'  'avg'       'pro'        Windows:    'd:'         \itt\idl71\    'avg'       'pro'   NOTES:      (1) The period is removed between the name and qualifier      (2) Unlike the intrinsic FILE_BASENAME() and FILE_DIRNAME() functions,          one can use FDECOMP to decompose a Windows file name on a Unix machine          or a Unix filename on a Windows machine.   ROUTINES CALLED:      None.  HISTORY      version 1  D. Lindler  Oct 1986      Include VMS DECNET machine name in disk    W. Landsman  HSTX  Feb. 94      Converted to Mac IDL, I. Freedman HSTX March 1994      Major rewrite to accept vector filenames V5.3   W. Landsman June 2000      Fix cases where disk name not always present  W. Landsman  Sep. 2000      Make sure version defined for Windows  W. Landsman April 2004      Include final delimiter in directory under Windows as advertised                 W. Landsman   May 2006      Remove VMS support, W. Landsman    September 2006      Remove MacOS branch (same as Unix) W. Landsman  August 2009  ", "OSfamilyfilenamediskdirnamequalversion", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/ff.html", "ff.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "ff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/ff.html#ff", "ff", 'routine in <a href="code_snapshots/obsolete_code/ff.html">ff.pro</a>', "ff.pro", "", "ff", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/ff.html#dim3", "dim3", 'routine in <a href="code_snapshots/obsolete_code/ff.html">ff.pro</a>', "ff.pro", "", "dim3", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/fid_faster.html", "fid_faster.pro", '.pro file in <a href="code_snapshots/sep11/obsolete_files/dir-overview.html">code_snapshots/sep11/obsolete_files/ directory</a>', "fid_faster.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/fid_faster.html#fid_faster", "fid_faster", 'routine in <a href="code_snapshots/sep11/obsolete_files/fid_faster.html">fid_faster.pro</a>', "fid_faster.pro", "", "fid_faster", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/fid_faster.html", "fid_faster.pro", '.pro file in <a href="code_snapshots/orig_version/obsolete_files/dir-overview.html">code_snapshots/orig_version/obsolete_files/ directory</a>', "fid_faster.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/fid_faster.html#fid_faster", "fid_faster", 'routine in <a href="code_snapshots/orig_version/obsolete_files/fid_faster.html">fid_faster.pro</a>', "fid_faster.pro", "", "fid_faster", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/fid_faster.html", "fid_faster.pro", '.pro file in <a href="code_snapshots/jul25/obsolete_files/dir-overview.html">code_snapshots/jul25/obsolete_files/ directory</a>', "fid_faster.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/fid_faster.html#fid_faster", "fid_faster", 'routine in <a href="code_snapshots/jul25/obsolete_files/fid_faster.html">fid_faster.pro</a>', "fid_faster.pro", "", "fid_faster", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/obsolete_files/fid_faster.html", "fid_faster.pro", '.pro file in <a href="sep20/obsolete_files/dir-overview.html">sep20/obsolete_files/ directory</a>', "fid_faster.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/obsolete_files/fid_faster.html#fid_faster", "fid_faster", 'routine in <a href="sep20/obsolete_files/fid_faster.html">fid_faster.pro</a>', "fid_faster.pro", "", "fid_faster", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/fid_faster.html", "fid_faster.pro", '.pro file in <a href="code_snapshots/test_version/obsolete_files/dir-overview.html">code_snapshots/test_version/obsolete_files/ directory</a>', "fid_faster.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/fid_faster.html#fid_faster", "fid_faster", 'routine in <a href="code_snapshots/test_version/obsolete_files/fid_faster.html">fid_faster.pro</a>', "fid_faster.pro", "", "fid_faster", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/fid_faster.html", "fid_faster.pro", '.pro file in <a href="code_snapshots/albert_version/obsolete_files/dir-overview.html">code_snapshots/albert_version/obsolete_files/ directory</a>', "fid_faster.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/fid_faster.html#fid_faster", "fid_faster", 'routine in <a href="code_snapshots/albert_version/obsolete_files/fid_faster.html">fid_faster.pro</a>', "fid_faster.pro", "", "fid_faster", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/fid_locate.html", "fid_locate.pro", '.pro file in <a href="code_snapshots/orig_version/obsolete_files/dir-overview.html">code_snapshots/orig_version/obsolete_files/ directory</a>', "fid_locate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/fid_locate.html#fid_locate", "fid_locate", 'routine in <a href="code_snapshots/orig_version/obsolete_files/fid_locate.html">fid_locate.pro</a>', "fid_locate.pro", "", "fid_locate", "       Locates the whole and sub-pixel positions of fiducials in a cropped solar image   ", "mcenter           Finds the center of the local maxima using a binary mask instead of parabolic peak fitting.   inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/fid_locate.html", "fid_locate.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "fid_locate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/fid_locate.html#fid_locate", "fid_locate", 'routine in <a href="code_snapshots/aug22_notworking/fid_locate.html">fid_locate.pro</a>', "fid_locate.pro", "", "fid_locate", "       Locates the whole and sub-pixel positions of fiducials in a cropped solar image   ", "mcenter           Finds the center of the local maxima using a binary mask instead of parabolic peak fitting.   inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/fid_locate.html", "fid_locate.pro", '.pro file in <a href="code_snapshots/albert_version/obsolete_files/dir-overview.html">code_snapshots/albert_version/obsolete_files/ directory</a>', "fid_locate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/fid_locate.html#fid_locate", "fid_locate", 'routine in <a href="code_snapshots/albert_version/obsolete_files/fid_locate.html">fid_locate.pro</a>', "fid_locate.pro", "", "fid_locate", "       Locates the whole and sub-pixel positions of fiducials in a cropped solar image   ", "mcenter           Finds the center of the local maxima using a binary mask instead of parabolic peak fitting.   inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/obsolete_files/fid_locate.html", "fid_locate.pro", '.pro file in <a href="sep20/obsolete_files/dir-overview.html">sep20/obsolete_files/ directory</a>', "fid_locate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/obsolete_files/fid_locate.html#fid_locate", "fid_locate", 'routine in <a href="sep20/obsolete_files/fid_locate.html">fid_locate.pro</a>', "fid_locate.pro", "", "fid_locate", "       Locates the whole and sub-pixel positions of fiducials in a cropped solar image   ", "mcenter           Finds the center of the local maxima using a binary mask instead of parabolic peak fitting.   inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/fid_locate.html", "fid_locate.pro", '.pro file in <a href="code_snapshots/test_version/obsolete_files/dir-overview.html">code_snapshots/test_version/obsolete_files/ directory</a>', "fid_locate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/fid_locate.html#fid_locate", "fid_locate", 'routine in <a href="code_snapshots/test_version/obsolete_files/fid_locate.html">fid_locate.pro</a>', "fid_locate.pro", "", "fid_locate", "       Locates the whole and sub-pixel positions of fiducials in a cropped solar image   ", "mcenter           Finds the center of the local maxima using a binary mask instead of parabolic peak fitting.   inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/fid_locate.html", "fid_locate.pro", '.pro file in <a href="code_snapshots/jul25/obsolete_files/dir-overview.html">code_snapshots/jul25/obsolete_files/ directory</a>', "fid_locate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/fid_locate.html#fid_locate", "fid_locate", 'routine in <a href="code_snapshots/jul25/obsolete_files/fid_locate.html">fid_locate.pro</a>', "fid_locate.pro", "", "fid_locate", "       Locates the whole and sub-pixel positions of fiducials in a cropped solar image   ", "mcenter           Finds the center of the local maxima using a binary mask instead of parabolic peak fitting.   inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/fid_locate.html", "fid_locate.pro", '.pro file in <a href="code_snapshots/sep11/obsolete_files/dir-overview.html">code_snapshots/sep11/obsolete_files/ directory</a>', "fid_locate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/fid_locate.html#fid_locate", "fid_locate", 'routine in <a href="code_snapshots/sep11/obsolete_files/fid_locate.html">fid_locate.pro</a>', "fid_locate.pro", "", "fid_locate", "       Locates the whole and sub-pixel positions of fiducials in a cropped solar image   ", "mcenter           Finds the center of the local maxima using a binary mask instead of parabolic peak fitting.   inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("plots_tables_images/fidcomp.html", "fidcomp.pro", '.pro file in <a href="plots_tables_images/dir-overview.html">plots_tables_images/ directory</a>', "fidcomp.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("idlastro/filter_image.html", "filter_image.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "filter_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/filter_image.html#filter_image", "filter_image", 'routine in <a href="idlastro/filter_image.html">filter_image.pro</a>', "filter_image.pro", "", "filter_image", " NAME:        FILTER_IMAGE   PURPOSE:        Identical to MEDIAN or SMOOTH but handle edges and allow iterations.  EXPLANATION:        Computes the average and/or median of pixels in moving box,        replacing center pixel with the computed average and/or median,        (using the IDL SMOOTH() or MEDIAN() functions).        The main reason for using this function is the options to        also process the pixels at edges and corners of image, and,        to apply iterative smoothing simulating convolution with Gaussian,        and/or to convolve image with a Gaussian kernel.    Users might also        look at the function ESTIMATOR_FILTER() introduced in IDL 7.1.   CALLING SEQUENCE:        Result = filter_image( image, SMOOTH=width, MEDIAN = width, /ALL_PIXELS                                /ITERATE, FWHM =,  /NO_FT_CONVOL)   INPUT:        image = 2-D array (matrix)   OPTIONAL INPUT KEYWORDS:        SMOOTH = scalar (odd) integer specifying the width of a square box                for moving average, in # pixels.  /SMOOTH  means use box                width = 3 pixels for smoothing.          MEDIAN = scalar (usually odd) integer specifying the width of square                moving box for median filter, in # pixels.   /MEDIAN  means use                box width = 3 pixels for median filter.         /ALL_PIXELS causes the edges of image to be filtered as well.   This                is accomplished by reflecting pixels adjacent to edges outward                (similar to the /EDGE_WRAP keyword in CONVOL).                Note that this is a different algorithm from the /EDGE_TRUNCATE                keyword to SMOOTH or CONVOL, which duplicates the nearest pixel.         /ITERATE means apply smooth(image,3) iteratively for a count of                (box_width-1)/2 times (=radius), when box_width &gt;= 5.                This is equivalent to convolution with a Gaussian PSF                of FWHM = 2 * sqrt( radius ) as radius gets large.                Note that /ALL_PIXELS is automatically applied,                giving better results in the iteration limit.                (also, MEDIAN keyword is ignored when /ITER is specified).         FWHM_GAUSSIAN = Full-width half-max of Gaussian to convolve with image.                        FWHM can be a single number (circular beam),                        or 2 numbers giving axes of elliptical beam.         /NO_FT_CONVOL causes the convolution to be computed directly,                with intrinsic IDL CONVOL function.   The default is to use                FFT when factors of size are all LE 13.   Note that                external function convolve.pro handles both cases)   OPTIONAL INPUT/OUTPUT KEYWORD:      PSF = Array containing the PSF used during the convolution.   This            keyword is only active if the FWHM_GAUSSIAN keyword is also            specified.     If PSF is undefined on input, then upon output it            contains the Gaussian convolution specified by the FWHM_GAUSSIAN            keyword.    If the PSF array is defined on input then it is used            as the convolution kernel,  the value of the  FWHM_GAUSSIAN keyword            is ignored.      Typically, on a first call set PSF to an undefined            variable, which can be reused for subsequent calls to prevent            recalculation of the Gaussian PSF.  RESULT:        Function returns the smoothed, median filtered, or convolved image.        If both SMOOTH and MEDIAN are specified, median filter is applied first.        If only SMOOTH is applied, then output is of same type as input.  If        either MEDIAN or FWHM_GAUSSIAN is supplied than the output is at least        floating (double if the input image is double).   EXAMPLES:        To apply 3x3 moving median filter and        then 3x3 moving average, both applied to all pixels:                 Result = filter_image( image, /SMOOTH, /MEDIAN, /ALL )         To iteratively apply 3x3 moving average filter for 4 = (9-1)/2 times,        thus approximating convolution with Gaussian of FWHM = 2*sqrt(4) = 4 :                 Result = filter_image( image, SMOOTH=9, /ITER )         To convolve all pixels with Gaussian of FWHM = 3.7 x 5.2 pixels:                 Result = filter_image( image, FWHM=[3.7,5.2], /ALL )   EXTERNAL CALLS:        function psf_gaussian        function convolve        pro factor        function prime          ;all these called only if FWHM is specified   PROCEDURE:        If both /ALL_PIXELS (or /ITERATE)  keywords are set then        create a larger image by reflecting the edges outward, then call the        IDL MEDIAN() or SMOOTH() function on the larger image, and just return        the central part (the original size image).         NAN values are recognized during calls to MEDIAN() or SMOOTH(), but        not for convolution with a Gaussian (FWHM keyword supplied).  HISTORY:        Written, 1991, Frank Varosi, NASA/GSFC.        FV, 1992, added /ITERATE option.        FV, 1993, added FWHM_GAUSSIAN= option.        Use /EVEN call to median, recognize NAN values in SMOOTH                   W. Landsman   June 2001        Added PSF keyword,   Bjorn Heijligers/WL, September 2001        Keep same output data type if /ALL_PIXELS supplied A. Steffl Mar 2011  ", "SMOOTHITERATE_SMOOTHMEDIANALL_PIXELSFWHM_GAUSSIANNO_FT_CONVOLPSFimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/find.html", "find.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "find.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/find.html#find", "find", 'routine in <a href="idlastro/find.html">find.pro</a>', "find.pro", "", "find", " NAME: 	FIND  PURPOSE: 	Find positive brightness perturbations (i.e stars) in an image  EXPLANATION: 	Also returns centroids and shape parameters (roundness & sharpness). 	Adapted from 1991 version of DAOPHOT, but does not allow for bad pixels        and uses a slightly different centroid algorithm.         Modified in March 2008 to use marginal Gaussian fits to find centroids  CALLING SEQUENCE: 	FIND, image, [ x, y, flux, sharp, round, hmin, fwhm, roundlim, sharplim 		PRINT= , /SILENT, /MONITOR]   INPUTS: 	image - 2 dimensional image array (integer or real) for which one 		wishes to identify the stars present   OPTIONAL INPUTS: 	FIND will prompt for these parameters if not supplied  	hmin -  Threshold intensity for a point source - should generally 		be 3 or 4 sigma above background RMS 	fwhm  - FWHM (in pixels) to be used in the convolve filter 	sharplim - 2 element vector giving low and high cutoff for the 		sharpness statistic (Default: [0.2,1.0] ).   Change this 		default only if the stars have significantly larger or 		or smaller concentration than a Gaussian 	roundlim - 2 element vector giving low and high cutoff for the 		roundness statistic (Default: [-1.0,1.0] ).   Change this 		default only if the stars are significantly elongated.   OPTIONAL INPUT KEYWORDS:        /MONITOR - Normally, FIND will display the results for each star                 only if no output variables are supplied.   Set /MONITOR                 to always see the result of each individual star. 	/SILENT - set /SILENT keyword to suppress all output display 	PRINT - if set and non-zero then FIND will also write its results to 		a file find.prt.   Also one can specify a different output file 		name by setting PRINT = 'filename'.   OPTIONAL OUTPUTS: 	x - vector containing x position of all stars identified by FIND 	y-  vector containing y position of all stars identified by FIND 	flux - vector containing flux of identified stars as determined 		by a Gaussian fit.  Fluxes are NOT converted to magnitudes. 	sharp - vector containing sharpness statistic for identified stars 	round - vector containing roundness statistic for identified stars   NOTES: 	(1) The sharpness statistic compares the central pixel to the mean of        the surrounding pixels.   If this difference is greater than the        originally estimated height of the Gaussian or less than 0.2 the height of the 	Gaussian (for the default values of SHARPLIM) then the star will be 	rejected.         (2) More recent versions of FIND in DAOPHOT allow the possibility of        ignoring bad pixels.    Unfortunately, to implement this in IDL        would preclude the vectorization made possible with the CONVOL function        and would run extremely slowly.         (3) Modified in March 2008 to use marginal Gaussian distributions to        compute centroid.   (Formerly, find.pro determined centroids by locating        where derivatives went to zero -- see cntrd.pro for this algorithm.        This was the method used in very old (~1984) versions of DAOPHOT. )        As discussed in more  detail in the comments to the code, the  centroid        computation here is  the same as in IRAF DAOFIND but differs slightly        from the current DAOPHOT.  PROCEDURE CALLS: 	GETOPT()  REVISION HISTORY: 	Written W. Landsman, STX  February, 1987 	ROUND now an internal function in V3.1   W. Landsman July 1993 	Change variable name DERIV to DERIVAT    W. Landsman Feb. 1996 	Use /PRINT keyword instead of TEXTOUT    W. Landsman May  1996 	Changed loop indices to type LONG       W. Landsman Aug. 1997        Replace DATATYPE() with size(/TNAME)   W. Landsman Nov. 2001        Fix problem when PRINT= filename   W. Landsman   October 2002        Fix problems with &gt;32767 stars   D. Schlegel/W. Landsman Sep. 2004        Fix error message when no stars found  S. Carey/W. Landsman Sep 2007        Rewrite centroid computation to use marginal Gaussians W. Landsman                  Mar 2008        Added Monitor keyword, /SILENT now suppresses all output                    W. Landsman    Nov 2008        Work when threshold is negative (difference images) W. Landsman May 2010  ", "PRINTSILENTMONITORimagexyfluxsharproundnesshminfwhmroundlimsharplim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/find_all_dir.html", "find_all_dir.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "find_all_dir.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/find_all_dir.html#FIND_ALL_DIR", "FIND_ALL_DIR", 'routine in <a href="idlastro/find_all_dir.html">find_all_dir.pro</a>', "find_all_dir.pro", "", "FIND_ALL_DIR", " NAME:        FIND_ALL_DIR()  PURPOSE:        Finds all directories under a specified directory.  EXPLANATION:        This routine finds all the directories in a directory tree when the        root of the tree is specified.  This provides the same functionality as        having a directory with a plus in front of it in the environment        variable IDL_PATH.   CALLING SEQUENCE:        Result = FIND_ALL_DIR( PATH )                 PATHS = FIND_ALL_DIR('+mypath', /PATH_FORMAT)                PATHS = FIND_ALL_DIR('+mypath1:+mypath2')   INPUTS:        PATH    = The path specification for the top directory in the tree.                Optionally this may begin with the '+' character but the action                is the same unless the PLUS_REQUIRED keyword is set.                 One can also path a series of directories separated                by the correct character ( ,  for VMS,  :  for Unix)   OUTPUTS:        The result of the function is a list of directories starting from the        top directory passed and working downward from there.   Normally, this        will be a string array with one directory per array element, but if        the PATH_FORMAT keyword is set, then a single string will be returned,        in the correct format to be incorporated into !PATH.   OPTIONAL INPUT KEYWORDS:        PATH_FORMAT     = If set, then a single string is returned, in                                  the format of !PATH.         PLUS_REQUIRED   = If set, then a leading plus sign is required                        in order to expand out a directory tree.                        This is especially useful if the input is a                        series of directories, where some components                        should be expanded, but others shouldn't.         RESET   = Often FIND_ALL_DIR is used with logical names.  It                can be rather slow to search through these subdirectories.                The /RESET keyword can be used to redefine an environment                variable so that subsequent calls don't need to look for the                subdirectories.                 To use /RESET, the PATH parameter must contain the name of a                *single* environment variable.  For example                                 setenv,'FITS_DATA=+/datadisk/fits'                                dir = find_all_dir('FITS_DATA',/reset,/plus)                 The /RESET keyword is usually combined with /PLUS_REQUIRED.   PROCEDURE CALLS:        DEF_DIRLIST, FIND_WITH_DEF(), BREAK_PATH()   RESTRICTIONS:        PATH must point to a directory that actually exists.   REVISION HISTORY:                Version 11, Zarro (SM&A/GSFC), 23-March-00                        Removed all calls to IS_DIR                Version 12, William Thompson, GSFC, 02-Feb-2001                        In Windows, use built-in expand_path if able.                Version 13, William Thompson, GSFC, 23-Apr-2002                        Follow logical links in Unix                        (Suggested by Pascal Saint-Hilaire)                Version 14, Zarro (EER/GSFC), 26-Oct-2002                        Saved/restored current directory to protect against                        often mysterious directory changes caused by                        spawning FIND in Unix                Version 15, William Thompson, GSFC, 9-Feb-2004                        Resolve environment variables in Windows.   Version     : Version 16 W. Landsman GSFC Sep 2006                         Remove VMS support  ", "PATH_FORMATPLUS_REQUIREDRESETPATH", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/find_boundary.html", "find_boundary.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "find_boundary.pro", "", "", " NAME:        FIND_BOUNDARY   PURPOSE:         This program finds the boundary points about a region of interest (ROI)        represented by pixel indices. It uses a  chain-code  algorithm for finding        the boundary pixels.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Graphics, math.   CALLING SEQUENCE:         boundaryPts = Find_Boundary(indices, XSize=xsize, YSize=ysize)   OPTIONAL INPUTS:         indices - A 1D vector of pixel indices that describe the ROI. For example,             the indices may be returned as a result of the WHERE function.   OUTPUTS:         boundaryPts - A 2-by-n points array of the X and Y points that describe the             boundary. The points are scaled if the SCALE keyword is used.   INPUT KEYWORDS:         SCALE - A one-element or two-element array of the pixel scale factors, [xscale, yscale],             used to calculate the perimeter length or area of the ROI. The SCALE keyword is             NOT applied to the boundary points. By default, SCALE=[1,1].         XSIZE - The X size of the window or array from which the ROI indices are taken.             Set to !D.X_Size by default.         YSIZE - The Y size of the window or array from which the ROI indices are taken.             Set to !D.Y_Size by default.   OUTPUT KEYWORDS:         AREA - A named variable that contains the pixel area represented by the input pixel indices,             scaled by the SCALE factors.         CENTER - A named variable that contains a two-element array containing the center point or             centroid of the ROI. The centroid is the position in the ROI that the ROI would             balance on if all the index pixels were equally weighted. The output is a two-element             floating-point array in device coordinate system, unless the SCALE keyword is used,             in which case the values will be in the scaled coordinate system.         PERIM_AREA - A named variable that contains the (scaled) area represented by the perimeter             points, as indicated by John Russ in _The Image Processing Handbook, 2nd Edition_ on             page 490. This is the same  perimeter  that is returned by IDLanROI in its             ComputeGeometry method, for example. In general, the perimeter area will be             smaller than the pixel area.         PERIMETER - A named variable that will contain the perimeter length of the boundary             upon returning from the function, scaled by the SCALE factors.    EXAMPLE:         LoadCT, 0, /Silent        image = BytArr(400, 300)+125        image[125:175, 180:245] = 255B        indices = Where(image EQ 255)        Window, XSize=400, YSize=300        TV, image        PLOTS, Find_Boundary(indices, XSize=400, YSize=300, Perimeter=length), $            /Device, Color=cgColor('red')        Print, length            230.0   DEPENDENCIES:         Requires ERROR_MESSAGE from the Coyote Library.             http://www.idlcoyote.com/programs/error_message.pro   MODIFICATION HISTORY:         Written by David W. Fanning, April 2002. Based on an algorithm written by Guy        Blanchard and provided by Richard Adams.        Fixed a problem with distinction between solitary points and           isolated points (a single point connected on a diagonal to           the rest of the mask) in which the program can't get back to           the starting pixel. 2 Nov 2002. DWF        Added the ability to return the perimeter length with PERIMETER and            SCALE keywords. 2 Nov 2002. DWF.        Added AREA keyword to return area enclosed by boundary. 2 Nov 2002. DWF.        Fixed a problem with POLYFILLV under-reporting the area by removing            POLYFILLV and using a pixel counting method. 10 Dec 2002. DWF.        Added the PERIM_AREA and CENTER keywords. 15 December 2002. DWF.        Replaced the ERROR_MESSAGE routine with the latest version. 15 December 2002. DWF.        Fixed a problem in which XSIZE and YSIZE have to be specified as integers to work. 6 March 2006. DWF.        Fixed a small problem with very small ROIs that caused the program to crash. 1 October 2008. DWF.        Modified the algorithm that determines the number of boundary points for small ROIs. 28 Sept 2010. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/find_boundary.html#Find_Boundary_Outline", "Find_Boundary_Outline", 'routine in <a href="coyote/find_boundary.html">find_boundary.pro</a>', "find_boundary.pro", "", "Find_Boundary_Outline", "", "maskdarrayboundaryPtsptIndexxsizeysizefrom_direction", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/find_boundary.html#Find_Boundary", "Find_Boundary", 'routine in <a href="coyote/find_boundary.html">find_boundary.pro</a>', "find_boundary.pro", "", "Find_Boundary", "", "AREACENTERPERIM_AREAPERIMETERSCALEXSIZEYSIZEindices", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/find_resource_file.html", "find_resource_file.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "find_resource_file.pro", "", "", " NAME:   FIND_RESOURCE_FILE   PURPOSE:    This function is designed to search for and return the fully qualified   path to a resource file. The order of search is as follows:      1. In the current directory.     2. In the same directory as this file is found in.     3. In the directories rooted at the IDL resource directory (IDL_DIR/resource).     4. In the directories rooted at a resource directory found in the same directory this file is in.     5. In the directories rooted at a resource directory found in the a directory one above the directory this file is in.     6. Anywhere in the IDL PATH. Note that a *.pro file *must* be in a directory for the directory to be on        the IDL PATH.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:    Utilities   CALLING SEQUENCE:    fullPath = Find_Resource_File(resourceFilename)   INPUTS:    resourceFilename:   The root name of a resource file. For example, 'arc.bmp'.   KEYWORD PARAMETERS:    SUCCESS:            An output keyword whose value is set to 1 if the program                       successfully finds the resource file. Otherwise, set to 0.    VERBOSE:            Set this keyword to enable output that prints the full path                       to the resource file, or tells you that the file cannot be found.   RETURN_VALUE:    fullpath:           A fully-qualified file path to the resource file.   EXAMPLE:    IDL&gt; print, find_resource_file('gshhs_i.b', success=s) & print, 'success: ', s        /home/fanning/IDL/incubator/gshhs_i.b        success:            1   IDL&gt; print, find_resource_file('dataviewer_splash.jpg', success=s) & print, 'success: ', s        /home/fanning/IDL/dataviewer/resources/dataviewer_splash.jpg        success:            1   IDL&gt; print, find_resource_file('arc.bmp', success=s) & print, 'success: ', s        /usr/local/rsi/idl70/resource/bitmaps/arc.bmp        success:            1   IDL&gt; print, find_resource_file('toast_and_jam.txt', success=s) & print, 'success: ', s        success:            0  MODIFICATION HISTORY:    Written by: David W Fanning, December 12, 2008.   It seems all my resource files are in  resources  directories, not   resource  directories.      So now the program looks in both places. 6 January 2009.   The file did not seem to be looking in the IDL path. It does now. 21 April 2010. DWF.   The file will also look in the directory of the caller of this program. 21 April 2010. DWF.   Fixed a problem when File_Search finds several files with the same name. Always takes the       first file found now. 4 June 2010. DWF.   Modified to look in the current directory first. 5 March 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/find_resource_file.html#Find_Resource_File", "Find_Resource_File", 'routine in <a href="coyote/find_resource_file.html">find_resource_file.pro</a>', "find_resource_file.pro", "", "Find_Resource_File", "", "SUCCESSVERBOSEfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/find_with_def.html", "find_with_def.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "find_with_def.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/find_with_def.html#FIND_WITH_DEF", "FIND_WITH_DEF", 'routine in <a href="idlastro/find_with_def.html">find_with_def.pro</a>', "find_with_def.pro", "", "FIND_WITH_DEF", " NAME:      FIND_WITH_DEF()  PURPOSE:      Searches for files with a default path and extension.  EXPLANATION:      Finds files using default paths and extensions,   Using this routine      together with environment variables allows an OS-independent approach      to finding files.  CALLING SEQUENCE:      Result = FIND_WITH_DEF( FILENAME, PATHS  [, EXTENSIONS ] )   INPUTS:      FILENAME   = Name of file to be searched for.  It may either be a                     complete filename, or the path or extension could be left                     off, in which case the routine will attempt to find the                     file using the default paths and extensions.       PATHS      = One or more default paths to use in the search in case                     FILENAME does not contain a path itself.  The individual                     paths are separated by commas, although in UNIX, colons                     can also be used.  In other words, PATHS has the same                     format as !PATH, except that commas can be used as a                     separator regardless of operating system.  The current                     directory is always searched first, unless the keyword                     NOCURRENT is set.                      A leading $ can be used in any path to signal that what                     follows is an environmental variable, but the $ is not                     necessary.  Environmental variables can themselves contain                     multiple paths.   OPTIONAL INPUTS:      EXTENSIONS = Scalar string giving one or more extensions to append to                   end of filename if the filename does not contain one (e.g.                     .dat ).  The period is optional.  Multiple extensions can                    be separated by commas or colons.  OUTPUTS:      The result of the function is the name of the file if successful, or      the null string if unsuccessful.  OPTIONAL INPUT KEYWORDS:      NOCURRENT = If set, then the current directory is not searched.        RESET      = The FIND_WITH_DEF routine supports paths which are                     preceeded with the plus sign to signal that all                     subdirectories should also be searched.  Often this is                     used with logical names.  It can be rather slow to search                     through these subdirectories.  The /RESET keyword can be                     used to redefine an environment variable so that                     subsequent calls don't need to look for the                     subdirectories.                      To use /RESET, the PATHS parameter must contain the name                     of a *single* environment variable.  For example                       setenv,'FITS_DATA=+/datadisk/fits'                      file = find_with_def('test.fits','FITS_DATA',/reset)   EXAMPLE:         FILENAME = ''        READ, 'File to open: ', FILENAME        FILE = FIND_WITH_DEF( FILENAME, 'SERTS_DATA', '.fix' )        IF FILE NE '' THEN ...   PROCEDURE CALLS:        BREAK_PATH(), FIND_ALL_DIR(), STR_SEP()  REVISION HISTORY:        Version 1, William Thompson, GSFC, 3 May 1993.                Removed trailing / and : characters.                Fixed bugs                Allow for commas within values of logical names.                Added keyword NOCURRENT.                Changed to call BREAK_PATH        Version 2, William Thompson, GSFC, 3 November 1994                Made EXTENSIONS optional.        Version 3, William Thompson, GSFC, 30 April 1996                Call FIND_ALL_DIR to resolve any plus signs.        Version 4, S.V. Haugan, UiO, 5 June 1996                Using OPENR,..,ERROR=ERROR to avoid an IDL 3.6                internal nesting error.        Version 5, R.A. Schwartz, GSFC, 11 July 1996                Use SPEC_DIR to interpret PATH under VMS        Version 6, William Thompson, GSFC, 5 August 1996                Took out call to SPEC_DIR (i.e., reverted to version 4).  The                use of SPEC_DIR was required to support logical names defined                via SETLOG,/CONFINE.  However, it conflicted with the ability                to use logical names with multiple values.  Removing the                /CONFINE made it unnecessary to call SPEC_DIR in this routine.        Version 7, William Thompson, GSFC, 6 August 1996                Added keyword RESET        Converted to IDL V5.0   W. Landsman   October 1997        Use STRTRIM instead of TRIM,   W. Landsman   November 1998        Use STRSPLIT instead of STR_SEP  W. Landsman  July 2002  ", "NOCURRENTRESETFILENAMEPATHSEXTENSIONS", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/findf.html", "findf.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "findf.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("idlastro/findpro.html", "findpro.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "findpro.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/findpro.html#FindPro", "FindPro", 'routine in <a href="idlastro/findpro.html">findpro.pro</a>', "findpro.pro", "", "FindPro", " NAME:      FINDPRO  PURPOSE:      Find all locations of a procedure in the IDL !PATH  EXPLANATION:      FINDPRO searces for the procedure name (as a .pro or a .sav file) in all      IDL libraries or directories given in the !PATH system variable.    This      differs from the intrinsic FILE_WHICH() function which only finds the      first occurence of the procedure name.   CALLING SEQUENCE:     FINDPRO, [ Proc_Name, /NoPrint, DirList = , ProList = ]   OPTIONAL INPUT:      Proc_Name - Character string giving the name of the IDL procedure or              function. Do not include the  .pro  extension. If Proc_Name is              omitted, the program will prompt for PROC_NAME.   *  wildcards              are permitted.   OPTIONAL KEYWORD INPUT:      /NoPrint - if set, then the file's path is not printed on the screen and              absolutely no error messages are printed on the screen.  If not              set, then - since the MESSAGE routine is used - error messages              will be printed but the printing of informational messages              depends on the value of the !Quiet variable.   OPTIONAL KEYWORD OUTPUTS:      DirList - The directories in which the file is located are returned in              the keyword as a string array.              If the procedure is an intrinsic IDL procedure, then the              value of DirList = ['INTRINSIC'].              If the procedure is not found, the value of DirList = [''].      ProList - The list (full pathnames) of procedures found.  Useful if you              are looking for the name of a procedure using wildcards.       The order of the names in DirList and ProList is identical to the order      in which the procedure name appears in the !PATH  PROCEDURE:      The system variable !PATH is parsed using EXPAND_PATH into individual      directories.  FILE_SEARCH() is used to search the directories for      the procedure name.  If not found in !PATH, then the name is compared      with the list of intrinsic IDL procedures given by the ROUTINE_INFO()      function.   EXAMPLE:      (1) Find the procedure CURVEFIT.  Assume for this example that the user      also has a copy of the curvefit.pro procedure in her home directory      on a Unix machine.         IDL&gt; findpro, 'curvefit', DIRLIST=DirList        Procedure curvefit.pro found in directory  /home/user/.        Procedure curvefit.pro found in directory  /home/idl/lib/userlib        IDL&gt; help, DirList        DIRLIST         STRING    = Array(2)        IDL&gt; help, DirList[0], DirList[1]        &lt;Expression&gt;    STRING    = '/home/user'        &lt;Expression&gt;    STRING    = '/home/idl/lib/userlib'       (2) Find all procedures in one's !path containing the characters  zoom          IDL&gt; findpro,'*zoom*'  RESTRICTIONS:        User will be unable to find a path for a native IDL function        or procedure, or for a FORTRAN or C routine added with CALL_EXTERNAL.        Remember that Unix is case sensitive, and most procedures will be in        lower case.   PROCEDURES USED:        FDECOMP   -- Decompose file name  REVISION HISTORY:        Based on code extracted from the GETPRO procedure, J. Parker 1994        Use the intrinsic EXPAND_PATH function    W. Landsman Nov. 1994        Use ROUTINE_NAMES() to check for intrinsic procs   W. Landsman Jul 95        Added Macintosh, WINDOWS compatibility    W. Landsman   Sep. 95        Removed spurious first element in PROLIST  W. Landsman  March 1997        Don't include duplicate directories  in !PATH  WL   May 1997        Use ROUTINE_INFO instead of undocumented ROUTINE_NAMES W.L. October 1998        Also check for save sets   W. Landsman  October 1999        Force lower case check for VMS  W. Landsman January 2000        Only return .pro or .sav files in PROLIST   W. Landsman  January 2002        Force lower case check for .pro and .sav    D. Swain  September 2002        Use FILE_SEARCH() if V5.5 or later   W. Landsman June 2006        Assume since V55, remove VMS support W. Landsman Sep. 2006        Assume since V6.0, use file_basename() W.Landsman Feb 2009   ", "NoPrintDirListProListProc_Name", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fit_ellipse.html", "fit_ellipse.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fit_ellipse.pro", "", "", " NAME:        Fit_Ellipse   PURPOSE:         This program fits an ellipse to an ROI given by a vector of ROI indices.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Graphics, math.   CALLING SEQUENCE:         ellipsePts = Fit_Ellipse(indices)   OPTIONAL INPUTS:         indices - A 1D vector of pixel indices that describe the ROI. For example,             the indices may be returned as a result of the WHERE function.   OUTPUTS:         ellipsePts - A 2-by-npoints array of the X and Y points that describe the             fitted ellipse. The points are in the device coodinate system.   INPUT KEYWORDS:         NPOINTS - The number of points in the fitted ellipse. Set to 120 by default.         SCALE - A two-element array that gives the scaling parameters for each X and Y pixel, respectively.             Set to [1.0,1.0] by default.         XSIZE - The X size of the window or array from which the ROI indices are taken.             Set to !D.X_Size by default.         YSIZE - The Y size of the window or array from which the ROI indices are taken.             Set to !D.Y_Size by default.   OUTPUT KEYWORDS:         CENTER -- Set to a named variable that contains the X and Y location of the center             of the fitted ellipse in device coordinates.         ORIENTATION - Set to a named variable that contains the orientation of the major             axis of the fitted ellipse. The direction is calculated in degrees             counter-clockwise from the X axis.         AXES - A two element array that contains the length of the major and minor             axes of the fitted ellipse, respectively.         SEMIAXES - A two element array that contains the length of the semi-major and semi-minor             axes of the fitted ellipse, respectively. (This is simple AXES/2.)    EXAMPLE:         LoadCT, 0, /Silent        image = BytArr(400, 300)+125        image[180:245, 125:175] = 255B        indices = Where(image EQ 255)        Window, XSize=400, YSize=300        TV, image        PLOTS, Fit_Ellipse(indices, XSize=400, YSize=300), /Device, Color=cgColor('red')   MODIFICATION HISTORY:         Written by David W. Fanning, April 2002. Based on algorithms provided by Craig Markwardt             and Wayne Landsman in his TVEllipse program.        Added SCALE keyword and modified the algorithm to use memory more efficiently.             I no longer have to make huge arrays. The arrays are only as big as the blob             being fitted. 17 AUG 2008. DWF.        Fixed small typo that caused blobs of indices with a longer X axis than Y axis             to misrepresent the center of the ellipse. 23 February 2009.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fit_ellipse.html#Fit_Ellipse", "Fit_Ellipse", 'routine in <a href="coyote/fit_ellipse.html">fit_ellipse.pro</a>', "fit_ellipse.pro", "", "Fit_Ellipse", "", "AXESCENTERNPOINTSORIENTATIONSEMIAXESSCALEXSIZEYSIZEindices", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fitexy.html", "fitexy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fitexy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fitexy.html#chisq_fitexy", "chisq_fitexy", 'routine in <a href="idlastro/fitexy.html">fitexy.pro</a>', "fitexy.pro", "", "chisq_fitexy", " NAME:        FITEXY  PURPOSE:        Best straight-line fit to data with errors in both coordinates  EXPLANATION:        Linear Least-squares approximation in one-dimension (y = a + b*x),                when both x and y data have errors   CALLING EXAMPLE:        FITEXY, x, y, A, B, X_SIG= , Y_SIG= , [sigma_A_B, chi_sq, q, TOL=]   INPUTS:        x = array of values for independent variable.        y = array of data values assumed to be linearly dependent on x.   REQUIRED INPUT KEYWORDS:        X_SIGMA = scalar or array specifying the standard deviation of x data.        Y_SIGMA = scalar or array specifying the standard deviation of y data.   OPTIONAL INPUT KEYWORD:        TOLERANCE = desired accuracy of minimum & zero location, default=1.e-3.   OUTPUTS:        A_intercept = constant parameter result of linear fit,        B_slope = slope parameter, so that:                        ( A_intercept + B_slope * x ) approximates the y data.  OPTIONAL OUTPUT:        sigma_A_B = two element array giving standard deviation of                 A_intercept and B_slope parameters, respectively.                 The standard deviations are not meaningful if (i) the                 fit is poor (see parameter q), or (ii) b is so large that                 the data are consistent with a vertical (infinite b) line.                 If the data are consistent with *all* values of b, then                 sigma_A_B = [1e33,e33]        chi_sq = resulting minimum Chi-Square of Linear fit, scalar        q - chi-sq probability, scalar (0-1) giving the probability that               a correct model would give a value equal or larger than the               observed chi squared.   A small value of q indicates a poor               fit, perhaps because the errors are underestimated.   As               discussed by Tremaine et al. (2002, ApJ, 574, 740) an               underestimate of the errors (e.g. due to an intrinsic dispersion)               can lead to a bias in the derived slope, and it may be worth               enlarging the error bars to get a reduced chi_sq ~ 1   COMMON:        common fitexy, communicates the data for computation of chi-square.   PROCEDURE CALLS:        CHISQ_FITEXY()            ;Included in this file        MINF_BRACKET, MINF_PARABOLIC, ZBRENT    ;In IDL Astronomy Library        MOMENT(), CHISQR_PDF()     ;In standard IDL distribution   PROCEDURE:        From  Numerical Recipes  column by Press and Teukolsky:        in  Computer in Physics ,  May, 1992 Vol.6 No.3        Also see the 2nd edition of the book  Numerical Recipes  by Press et al.         In order to avoid  problems with data sets where X and Y are of very        different order of magnitude the data are normalized before the fitting        process is started.     The following normalization is used:        xx = (x - xm) / xs    and    sigx = x_sigma / xs                              where xm = MEAN(x) and xs = STDDEV(x)        yy = (y - ym) / ys    and    sigy = y_sigma / ys                              where ym = MEAN(y) and ys = STDDEV(y)   MODIFICATION HISTORY:        Written, Frank Varosi NASA/GSFC  September 1992.        Now returns q rather than 1-q   W. Landsman  December 1992        Use CHISQR_PDF, MOMENT instead of STDEV,CHI_SQR1 W. Landsman April 1998        Fixed typo for initial guess of slope, this error was nearly              always insignificant          W. Landsman   March 2000        Normalize X,Y before calculation (from F. Holland) W. Landsman Nov 2006  ", "B_angle", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/fitexy.html#fitexy", "fitexy", 'routine in <a href="idlastro/fitexy.html">fitexy.pro</a>', "fitexy.pro", "", "fitexy", "", "TOLERANCEX_SIGMAY_SIGMAxyA_interceptB_slopesigma_A_Bchi_sqq", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_add_checksum.html", "fits_add_checksum.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_add_checksum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_add_checksum.html#fits_add_checksum", "fits_add_checksum", 'routine in <a href="idlastro/fits_add_checksum.html">fits_add_checksum.pro</a>', "fits_add_checksum.pro", "", "fits_add_checksum", " NAME:     FITS_ADD_CHECKSUM  PURPOSE:     Add or update the CHECKSUM and DATASUM keywords in a FITS header  EXPLANATION:      Follows the 23 May 2002 version of the FITS checksum proposal at      http://heasarc.gsfc.nasa.gov/docs/heasarc/fits/checksum.html  CALLING SEQUENCE:      FITS_ADD_CHECKSUM, Hdr, [ Data, /No_TIMESTAMP, /FROM_IEEE ]  INPUT-OUTPUT:      Hdr - FITS header (string array), it will be updated with new            (or modfied) CHECKSUM and DATASUM keywords  OPTIONAL INPUT:      Data - data array associated with the FITS header.   If not supplied, or            set to a scalar, then the program checks whether there is a            DATASUM keyword already in the FITS header containing the 32bit            checksum for the data.   if there is no such keyword then there            assumed to be no data array associated with the FITS header.  OPTIONAL INPUT KEYWORDS:     /FROM_IEEE - If this keyword is set, then the input is assumed to be in              big endian format (e.g. an untranslated FITS array).    This              keyword only has an effect on little endian machines (e.g.              a Linux box).     /No_TIMESTAMP - If set, then a time stamp is not included in the comment              field of the CHECKSUM and DATASUM keywords.   Unless the              /No_TIMESTAMP keyword is set, repeated calls to FITS_ADD_CHECKSUM              with the same header and data will yield different values of              CHECKSUM (as the date stamp always changes).   However, use of the              date stamp is recommended in the checksum proposal.  PROCEDURES USED:      CHECKSUM32, FITS_ASCII_ENCODE(), GET_DATE, SXADDPAR, SXPAR()  REVISION HISTORY:      W. Landsman    SSAI    December 2002      Fix problem with images with a multiple of 2880 bytes.  W.L. May 2008      Avoid conversion error when DATASUM is an empty string  W.L.  June 2008      Don't update DATASUM if not already present and no data array supplied                        W.L. July 2008      Make sure input header array has 80 chars/line  W.L. Aug 2009  ", "no_timestampFROM_IEEEhdrim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_ascii_encode.html", "fits_ascii_encode.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_ascii_encode.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_ascii_encode.html#fits_ascii_encode", "fits_ascii_encode", 'routine in <a href="idlastro/fits_ascii_encode.html">fits_ascii_encode.pro</a>', "fits_ascii_encode.pro", "", "fits_ascii_encode", " NAME:     FITS_ASCII_ENCODE()  PURPOSE:     Encode an unsigned longword as an ASCII string to insert in a FITS header  EXPLANATION:      Follows the 23 May 2002 version of the FITS checksum proposal at      http://heasarc.gsfc.nasa.gov/docs/heasarc/fits/checksum.html  CALLING SEQUENCE:      result = FITS_ASCII_ENCODE( sum32)  INPUTS:      sum32 - 32bit *unsigned longword* (e.g. as returned by CHECKSUM32)  RESULT:      A 16 character scalar string suitable for the CHECKSUM keyword  EXAMPLE:       A FITS header/data unit has a checksum of 868229149.  Encode the       complement of this value (3426738146) into an ASCII string        IDL&gt; print,FITS_ASCII_ENCODE(3426738146U)            ===&gt;  hcHjjc9ghcEghc9g    METHOD:       The 32bit value is interpreted as a sequence of 4 unsigned 8 bit       integers, and divided by 4.    Add an offset of 48b (ASCII '0').       Remove non-alphanumeric ASCII characters (byte values 58-64 and 91-96)       by simultaneously incrementing and decrementing the values in pairs.       Cyclicly shift the string one place to the right.   REVISION HISTORY:      Written  W. Landsman  SSAI              December 2002  ", "sum32", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_cd_fix.html", "fits_cd_fix.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_cd_fix.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_cd_fix.html#fits_cd_fix", "fits_cd_fix", 'routine in <a href="idlastro/fits_cd_fix.html">fits_cd_fix.pro</a>', "fits_cd_fix.pro", "", "fits_cd_fix", " NAME:     FITS_CD_FIX   PURPOSE:     Update obsolete representations of the CD matrix in a FITS header   EXPLANATION:     According the paper,  Representations of Celestial Coordinates in FITS      by Calabretta & Greisen (2002, A&A, 395, 1077, available at     http://fits.gsfc.nasa.gov/fits_wcs.html) the rotation of an image from     standard coordinates is represented by a coordinate description (CD)     matrix.    The standard representation of the CD matrix are PCn_m     keywords, but CDn_m keywords (which include the scale factors) are     also allowed.    However, earliers drafts of the standard allowed the     keywords forms CD00n00m and PC00n00m.      This procedure will convert     FITS CD matrix keywords containing zeros into the standard forms     CDn_m and PCn_m containing only underscores.   CALLING SEQUENCE:     FITS_CD_FIX, Hdr   INPUT-OUTPUT:        HDR - FITS header, 80 x N string array.   If the header does not            contain 'CD00n00m' or 'PC00n00m' keywords then it is left            unmodified.  Otherwise, the keywords containing integers are            replaced with those containing underscores.   OPTIONAL KEYWORD INPUT       /REVERSE - this keyword does nothing, but is kept for compatibility with             earlier versions.  PROCEDURES USED:     SXADDPAR, SXDELPAR, SXPAR()  REVISION HISTORY:     Written   W. Landsman             Feb 1990     Major rewrite                     Feb 1994     Converted to IDL V5.0   W. Landsman   September 1997     Use double precision formatting of CD matrix   W. Landsman  April 2000     Major rewrite to convert only to forms recognized by the Greisen        & Calabretta standard   W. Landsman   July 2003  ", "REVERSEhdr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_close.html", "fits_close.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_close.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_close.html#fits_close", "fits_close", 'routine in <a href="idlastro/fits_close.html">fits_close.pro</a>', "fits_close.pro", "", "fits_close", " NAME:       FITS_CLOSE  *PURPOSE:        Close a FITS data file  *CATEGORY:        INPUT/OUTPUT  *CALLING SEQUENCE:        FITS_CLOSE,fcb  *INPUTS:        FCB: FITS control block returned by FITS_OPEN.  *KEYWORD PARAMETERS:        /NO_ABORT: Set to return to calling program instead of a RETALL                when an I/O error is encountered.  If set, the routine will                return  a non-null string (containing the error message) in the                keyword MESSAGE.   If /NO_ABORT not set, then FITS_CLOSE will                print the message and issue a RETALL        MESSAGE = value: Output error message  *EXAMPLES:        Open a FITS file, read some data, and close it with FITS_CLOSE                 FITS_OPEN,'infile',fcb                FITS_READ,fcb,data                FITS_READ,fcb,moredata                FITS_CLOSE,fcb  *HISTORY:        Written by:     D. Lindler      August, 1995        Converted to IDL V5.0   W. Landsman   September 1997        Do nothing if fcb an invalid structure D. Schlegel/W. Landsman Oct. 2000        Return Message='' for to signal normal operation W. Landsman Nov. 2000  ", "no_abortmessagefcb", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_help.html", "fits_help.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_help.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_help.html#fits_help", "fits_help", 'routine in <a href="idlastro/fits_help.html">fits_help.pro</a>', "fits_help.pro", "", "fits_help", " NAME:        FITS_HELP   PURPOSE:        To print a summary of the primary data units and extensions in a        FITS file. ;  CALLING SEQUENCE:        FITS_HELP,filename_or_fcb   INPUTS:        FILENAME_OR_FCB - name of the fits file or the FITS Control Block (FCB)                structure returned by FITS_OPEN.     The  file name is allowed                to be gzip compressed (with a .gz  extension)   OUTPUTS:        A summary of the FITS file is printed.   For each extension, the values        of the XTENSION, EXTNAME EXTVER EXTLEVEL BITPIX GCOUNT, PCOUNT NAXIS        and NAXIS* keywords are displayed.   EXAMPLES:        FITS_HELP,'myfile.fits'         FITS_OPEN,'anotherfile.fits',fcb        FITS_HELP,fcb   PROCEDURES USED:        FITS_OPEN, FITS_CLOSE  HISTORY:        Written by:     D. Lindler      August, 1995        Converted to IDL V5.0   W. Landsman   September 1997        Don't truncate EXTNAME values at 10 chars  W. Landsman Feb. 2005        Use V6.0 notation W. Landsman Jan 2012  ", "file_or_fcb", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_info.html", "fits_info.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_info.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_info.html#fits_info", "fits_info", 'routine in <a href="idlastro/fits_info.html">fits_info.pro</a>', "fits_info.pro", "", "fits_info", " NAME:      FITS_INFO  PURPOSE:      Provide information about the contents of a FITS file  EXPLANATION:      Information includes number of header records and size of data array.      Applies to primary header and all extensions.    Information can be      printed at the terminal and/or stored in a common block       This routine is mostly obsolete, and better results can be usually be      performed with FITS_HELP (for display) or FITS_OPEN (to read FITS      information into a structure)   CALLING SEQUENCE:      FITS_INFO, Filename, [ /SILENT , TEXTOUT = , N_ext =, EXTNAME= ]   INPUT:      Filename - Scalar string giving the name of the FITS file(s)                Can include wildcards such as '*.fits', or regular expressions                allowed by the FILE_SEARCH() function.     One can also search                gzip compressed  FITS files, but their extension must                end in .gz or .ftz.  OPTIONAL INPUT KEYWORDS:      /SILENT - If set, then the display of the file description on the                 terminal will be suppressed        TEXTOUT - specifies output device.                textout=1        TERMINAL using /more option                textout=2        TERMINAL without /more option                textout=3        &lt;program&gt;.prt                textout=4        laser.tmp                textout=5        user must open file, see TEXTOPEN                textout=7       append to existing &lt;program.prt&gt; file                textout = filename (default extension of .prt)                 If TEXTOUT is not supplied, then !TEXTOUT is used  OPTIONAL OUTPUT KEYWORDS:        The following keyowrds are for use when only one file is processed         N_ext - Returns an integer scalar giving the number of extensions in                the FITS file        extname - returns a list containing the EXTNAME keywords for each        		extension.   COMMON BLOCKS        DESCRIPTOR =  File descriptor string of the form N_hdrrec Naxis IDL_type                Naxis1 Naxis2 ... Naxisn [N_hdrrec table_type Naxis                IDL_type Naxis1 ... Naxisn] (repeated for each extension)                For example, the following descriptor                     167 2 4 3839 4 55 BINTABLE 2 1 89 5                 indicates that the  primary header containing 167 lines, and                the primary (2D) floating point image (IDL type 4)                is of size 3839 x 4.    The first extension header contains                55 lines, and the  byte (IDL type 1) table array is of size                89 x 5.                 The DESCRIPTOR is *only* computed if /SILENT is set.  EXAMPLE:        Display info about all FITS files of the form '*.fit' in the current                directory                 IDL&gt; fits_info, '*.fit'         Any time a *.fit file is found which is *not* in FITS format, an error        message is displayed at the terminal and the program continues   PROCEDURES USED:        GETTOK(), MRD_SKIP, STRN(), SXPAR(), TEXTOPEN, TEXTCLOSE   SYSTEM VARIABLES:        The non-standard system variables !TEXTOUT and !TEXTUNIT will be        created by FITS_INFO if they are not previously defined.         DEFSYSV,'!TEXTOUT',1        DEFSYSV,'!TEXTUNIT',0         See TEXTOPEN.PRO for more info  MODIFICATION HISTORY:        Written, K. Venkatakrishna, Hughes STX, May 1992        Added N_ext keyword, and table_name info, G. Reichert        Work on *very* large FITS files   October 92        More checks to recognize corrupted FITS files     February, 1993        Proper check for END keyword    December 1994        Correctly size variable length binary tables  WBL December 1994        EXTNAME keyword can be anywhere in extension header WBL  January 1998        Correctly skip past extensions with no data   WBL   April 1998        Converted to IDL V5.0, W. Landsman, April 1998        No need for !TEXTOUT if /SILENT D.Finkbeiner   February 2002        Define !TEXTOUT if needed.  R. Sterner, 2002 Aug 27        Work on gzip compressed files for V5.3 or later  W. Landsman 2003 Jan        Improve speed by only reading first 36 lines of header        Count headers with more than 32767 lines         W. Landsman Feb. 2003        Assume since V5.3 (OPENR,/COMPRESS)   W. Landsman Feb 2004        EXTNAME keyword can be anywhere in extension header again                          WBL/S. Bansal Dec 2004        Read more than 200 extensions  WBL   March 2005        Work for FITS files with SIMPLE=F   WBL July 2005        Assume since V5.4, fstat.compress available WBL April 2006        Added EXTNAME as an IDL keyword to return values. M. Perrin Dec 2007        make Ndata a long64 to deal with large files. E. Hivon Mar 2008        For GDL compatibility, first check if file is compressed  before using           OPENR,/COMPRESS  B. Roukema/WL    Apr 2010        Increased nmax (max number of extensions) from 400 to 2000   Sept 2012  ", "SILENTTEXTOUTN_extextnamefilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_open.html", "fits_open.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_open.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_open.html#fits_open", "fits_open", 'routine in <a href="idlastro/fits_open.html">fits_open.pro</a>', "fits_open.pro", "", "fits_open", " NAME:        FITS_OPEN   PURPOSE:        Opens a FITS (Flexible Image Transport System) data file.   EXPLANATION:        Used by FITS_READ and FITS_WRITE   CALLING SEQUENCE:        FITS_OPEN, filename, fcb   INPUTS:        filename : name of the FITS file to open, scalar string                   FITS_OPEN can also open gzip compressed (.gz) file *for                   reading only*, although there is a performance penalty                   FPACK ( http://heasarc.gsfc.nasa.gov/fitsio/fpack/ )                   compressed FITS files can be read provided that the FPACK                   software is installed. *OUTPUTS:        fcb : (FITS Control Block) a IDL structure containing information                concerning the file.  It is an input to FITS_READ, FITS_WRITE                FITS_CLOSE and MODFITS.  INPUT KEYWORD PARAMETERS:        /APPEND: Set to append to an existing file.        /FPACK - Signal that the file is compressed with the FPACK software.                http://heasarc.gsfc.nasa.gov/fitsio/fpack/ ) By default,                FITS_OPEN assumes that if the file name extension ends in                .fz that it is fpack compressed.     The FPACK software must                be installed on the system        /HPRINT - print headers with routine HPRINT as they are read.                (useful for debugging a strange file)        /NO_ABORT: Set to quietly return to calling program when an I/O error                is encountered, and return  a non-null string                (containing the error message) in the keyword MESSAGE.                If /NO_ABORT not set, then FITS_OPEN will display the error                message and return to the calling program.        /UPDATE Set this keyword to open an existing file for update        /WRITE: Set this keyword to open a new file for writing.   OUTPUT KEYWORD PARAMETERS:        MESSAGE = value: Output error message.    If the FITS file was opened                successfully, then message = ''.   NOTES:        The output FCB should be passed to the other FITS routines (FITS_OPEN,        FITS_READ, FITS_HELP, and FITS_WRITE).  It has the following structure        when FITS_OPEN is called without /WRITE or /APPEND keywords set.             FCB.FILENAME - name of the input file                .UNIT - unit number the file is opened to                .FCOMPRESS - 1 if unit is a FPACK compressed file opened with                     a pipe to SPAWN                .NEXTEND - number of extensions in the file.                .XTENSION - string array giving the extension type for each                        extension.                .EXTNAME - string array giving the extension name for each                        extension. (null string if not defined the extension)                .EXTVER - vector of extension version numbers (0 if not                        defined)                .EXTLEVEL - vector of extension levels (0 if not defined)                .GCOUNT - vector with the number of groups in each extension.                .PCOUNT - vector with parameter count for each group                .BITPIX - BITPIX for each extension with values                                   8    byte data                                 16     short word integers                                 32     long word integers                                -32     IEEE floating point                                -64     IEEE double precision floating point                .NAXIS - number of axes for each extension.  (0 for null data                        units)                .AXIS - 2-D array where axis(*,N) gives the size of each axes                        for extension N                .START_HEADER - vector giving the starting byte in the file                                where each extension header begins                .START_DATA - vector giving the starting byte in the file                                where the data for each extension begins                 .HMAIN - keyword parameters (less standard required FITS                                keywords) for the primary data unit.                .OPEN_FOR_WRITE - flag (0= open for read, 1=open for write,                                                 2=open for update)                .LAST_EXTENSION - last extension number read.                .RANDOM_GROUPS - 1 if the PDU is random groups format,                                0 otherwise                .NBYTES - total number of (uncompressed) bytes in the FITS file         When FITS open is called with the /WRITE or /APPEND option, FCB        contains:             FCB.FILENAME - name of the input file                .UNIT - unit number the file is opened to                .NEXTEND - number of extensions in the file.                .OPEN_FOR_WRITE - flag (1=open for write, 2=open for append                                        3=open for update)   EXAMPLES:        Open a FITS file for reading:                FITS_OPEN,'myfile.fits',fcb         Open a new FITS file for output:                FITS_OPEN,'newfile.fits',fcb,/write  PROCEDURES USED:        GET_PIPE_FILESIZE (for Fcompress'ed files) HPRINT, SXDELPAR, SXPAR()  HISTORY:        Written by:     D. Lindler      August, 1995        July, 1996      NICMOS  Modified to allow open for overwrite                                to allow primary header to be modified        DJL Oct. 15, 1996   corrected to properly extend AXIS when more                        than 100 extensions present        Converted to IDL V5.0   W. Landsman   September 1997        Use Message = '' rather than !ERR =1 as preferred signal of normal            operation   W. Landsman  November 2000        Lindler, Dec, 2001, Modified to use 64 bit words for storing byte              positions within the file to allow support for very large              files        Work with gzip compressed files W. Landsman    January 2003        Fix gzip compress for V5.4 and earlier  W.Landsman/M.Fitzgerald Dec 2003        Assume since V5.3 (STRSPLIT, OPENR,/COMPRESS) W. Landsman Feb 2004        Treat FTZ extension as gzip compressed W. Landsman Sep 2004        Assume since V5.4 fstat.compress available W. Landsman Apr 2006        FCB.Filename  now expands any wildcards W. Landsman July 2006        Make ndata 64bit for very large files B. Garwood/W. Landsman Sep 2006        Open with /SWAP_IF_LITTLE_ENDIAN, remove obsolete keywords to OPEN                 W. Landsman  Sep 2006        Warn that one cannot open a compressed file for update W.L. April 2007        Use post-V6.0 notation W.L. October 2010        Support FPACK compressed files, new .FCOMPRESS tag to FCB structure                W.L.  December 2010        Read gzip'ed files even if gzip is not installed W.L. October 2012  ", "writeappendupdateno_abortmessagehprintfpackfilenamefcb", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_read.html", "fits_read.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_read.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_read.html#fits_read", "fits_read", 'routine in <a href="idlastro/fits_read.html">fits_read.pro</a>', "fits_read.pro", "", "fits_read", " NAME:        FITS_READ  PURPOSE:        To read a FITS file.   CALLING SEQUENCE:        FITS_READ, filename_or_fcb, data [,header, group_par]   INPUTS:        FILENAME_OR_FCB - this parameter can be the FITS Control Block (FCB)                returned by FITS_OPEN or the file name of the FITS file.  If                a file name is supplied, FITS_READ will open the file with                FITS_OPEN and close the file with FITS_CLOSE before exiting.                When multiple extensions are to be read from the file, it is                more efficient for the user to call FITS_OPEN and leave the                file open until all extensions are read. FPACK                ( http://heasarc.gsfc.nasa.gov/fitsio/fpack/ ) compressed FITS                files can be read provided that the FPACK software is installed.   OUTPUTS:        DATA - data array.  If /NOSCALE is specified, BSCALE and BZERO                (if present in the header) will not be used to scale the data.                If Keywords FIRST and LAST are used to read a portion of the                data or the heap portion of an extension, no scaling is done                and data is returned as a 1-D vector. The user can use the IDL                function REFORM to convert the data to the correct dimensions                if desired.  If /DATA_ONLY is specified, no scaling is done.        HEADER - FITS Header.  The STScI inheritance convention is recognized                http://fits.gsfc.nasa.gov/registry/inherit/fits_inheritance.txt                If an extension is read, and the INHERIT keyword exists with a                value of T, and the /NO_PDU keyword keyword is not supplied,                then the primary data unit header and the extension header will                 be combined.  The header will have the form:                         &lt;required keywords for the extension: XTENSION, BITPIX,                                NAXIS, ...&gt;                        BEGIN MAIN HEADER --------------------------------                        &lt;PDU header keyword and history less required keywords:                                SIMPLE, BITPIX, NAXIS, ...&gt;                        BEGIN EXTENSION HEADER ---------------------------                        &lt;extension header less required keywords that were                                placed at the beginning of the header.                        END                 The structure of the header is such that if a keyword is                duplicated in both the PDU and extension headers, routine                SXPAR will print a warning and return the extension value of                the keyword.         GROUP_PAR - Group parameter block for FITS random groups format files                or the heap area for variable length binary tables.                Any scale factors in the header (PSCALn and PZEROn) are not                applied to the group parameters.   INPUT KEYWORD PARAMETERS:         /NOSCALE: Set to return the FITS data without applying the scale                factors BZERO and BSCALE.        /HEADER_ONLY: set to read the header only.        /DATA_ONLY: set to read the data only.  If set, if any scale factors                are present (BSCALE or BZERO), they will not be applied.        /NO_PDU: By default, FITS_READ will add the primary data unit header                keywords to the output header, *if* the header includes                INHERIT = T.   Set /NO_PDU to never append the primary header.        /NO_ABORT: Set to return to calling program instead of a RETALL                when an I/O error is encountered.  If set, the routine will                return  a non-null string (containing the error message) in the                keyword MESSAGE.    (For backward compatibility, the obsolete                system variable !ERR is also set to -1 in case of an error.)                If /NO_ABORT not set, then FITS_READ will print the message and                issue a RETALL        /NO_UNSIGNED - By default, if  the header indicates an unsigned integer               (BITPIX = 16, BZERO=2^15, BSCALE=1) then FITS_READ will output                an IDL unsigned integer data type (UINT).   But if /NO_UNSIGNED                is set, then the data is converted to type LONG.        /PDU - If set, then always add the primary data unit header keywords               to the output header, even if the INHERIT=T keyword is not found               This was the default behavior of FITS_READ prior to April 2007        EXTEN_NO - extension number to read.  If not set, the next extension                in the file is read.  Set to 0 to read the primary data unit.        XTENSION - string name of the xtension to read        EXTNAME - string name of the extname to read        EXTVER - integer version number to read        EXTLEVEL - integer extension level to read        FIRST - set this keyword to only read a portion of the data.  It gives                the first word of the data to read        LAST - set this keyword to only read a portion of the data.  It gives                the last word number of the data to read        GROUP - group number to read for GCOUNT&gt;1.  (Default=0, the first group)   OUTPUT KEYWORD PARAMETERS:        ENUM - Output extension number that was read.        MESSAGE = value: Output error message   NOTES:        Determination or which extension to read.                case 1: EXTEN_NO specified. EXTEN_NO will give the number of the                        extension to read.  The primary data unit is refered                        to as extension 0. If EXTEN_NO is specified, XTENSION,                        EXTNAME, EXTVER, and EXTLEVEL parameters are ignored.                case 2: if EXTEN_NO is not specified, the first extension                        with the specified XTENSION, EXTNAME, EXTVER, and                        EXTLEVEL will be read.  If any of the 4 parameters                        are not specified, they will not be used in the search.                        Setting EXTLEVEL=0, EXTVER=0, EXTNAME='', or                        XTENSION='' is the same as not supplying them.                case 3: if none of the keyword parameters, EXTEN_NO, XTENSION,                        EXTNAME, EXTVER, or EXTLEVEL are supplied.  FITS_READ                        will read the next extension in the file.  If the                        primary data unit (PDU), extension 0, is null, the                        first call to FITS_READ will read the first extension                        of the file.                 The only way to read a null PDU is to use EXTEN_NO = 0.         If FIRST and LAST are specified, the data is returned without applying        any scale factors (BSCALE and BZERO) and the data is returned in a        1-D vector.  This will allow you to read any portion of a multiple        dimension data set.  Once returned, the IDL function REFORM can be        used to place the correct dimensions on the data.         IMPLICIT IMAGES: FITS_READ will construct an implicit image                for cases where NAXIS=0 and the NPIX1, NPIX2, and PIXVALUE                keywords are present.  The output image will be:                        image = replicate(PIXVALUE,NPIX1,NPIX2)        FPACK compressed files are always closed and reopened when exiting       FITS_READ so that the pointer is set to the beginning of the file. (Since       FPACK files are opened with a bidirectional pipe rather than OPEN, one       cannot use POINT_LUN to move to a specified position in the file.)   EXAMPLES:        Read the primary data unit of a FITS file, if it is null read the        first extension:                FITS_READ, 'myfile.fits', data, header         Read the first two extensions of a FITS file and the extension with        EXTNAME = 'FLUX' and EXTVER = 4                FITS_OPEN, 'myfile.fits', fcb                FITS_READ, fcb,data1, header2, exten_no = 1                FITS_READ, fcb,data1, header2, exten_no = 2                FITS_READ, fcb,data3, header3, extname='flux', extver=4                FITS_CLOSE, fcb         Read the sixth image in a data cube for the fourth extension.                 FITS_OPEN, 'myfile.fits', fcb                image_number = 6                ns = fcb.axis(0,4)                nl = fcb.axis(1,4)                i1 = (ns*nl)*(image_number-1)                i2 = i2 + ns*nl-1                FITS_READ,fcb,image,header,first=i1,last=i2                image = reform(image,ns,nl,/overwrite)                FITS_CLOSE   PROCEDURES USED:        FITS_CLOSE, FITS_OPEN        SXADDPAR, SXDELPAR, SXPAR()  WARNINGS:        In Sep 2006, FITS_OPEN was modified to open FITS files using the        /SWAP_IF_LITTLE_ENDIAN keyword to OPEN, so that subsequent routines        (FITS_READ, FITS_WRITE) did not require any byte swapping.    An error        may result if an pre-Sep 2006 version of FITS_OPEN is used with a        post Sep 2006 version of FITS_READ, FITS_WRITE or MODFITS.  HISTORY:        Written by:     D. Lindler, August 1995        Avoid use of !ERR       W. Landsman   August 1999        Read unsigned datatypes, added /no_unsigned   W. Landsman December 1999        Don't call FITS_CLOSE unless fcb is defined   W. Landsman January 2000        Set BZERO = 0 for unsigned integer data   W. Landsman  January 2000        Only call IEEE_TO_HOST if needed          W. Landsman February 2000        Ensure EXTEND keyword in primary header   W. Landsman April 2001        Don't erase ERROR message when closing file  W. Landsman April 2002        Assume at least V5.1 remove NANValue keyword  W. Landsman November 2002        Work with compress files (read file size from fcb),        requires updated (Jan 2003) version of FITS_OPEN W. Landsman Jan 2003        Do not modify BSCALE/BZERO for  unsigned integers W. Landsman April 2006        Asuume FITS_OPEN has opened the file with /SWAP_IF_LITTLE_ENDIAN                          W. Landsman   September 2006        Fix problem with /DATA_ONLY keyword  M.Buie/W.Landsman  October 2006        Only append primary header if INHERIT=T  W. Landsman  April 2007        Make ndata 64bit for very large files E. Hivon/W. Landsman May 2007        Added /PDU keyword to always append primary header W. Landsman June 2007        Use PRODUCT to compute # of data points   W. Landsman  May 2009        Make sure FIRST is long64 when computing position W.L. October 2009        Read FPACK compressed files, W.L.  December 2010        Don't assume FCB has a FCOMPRESS tag  W.L./Satori UeNO   September 2012  ", "noscaleexten_noextnameextverextlevelxtensionno_abortmessagefirstlastgroupheader_onlydata_onlyno_pduenumno_unsignedpdufile_or_fcbdataheadergroup_par", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_test_checksum.html", "fits_test_checksum.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_test_checksum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_test_checksum.html#fits_test_checksum", "fits_test_checksum", 'routine in <a href="idlastro/fits_test_checksum.html">fits_test_checksum.pro</a>', "fits_test_checksum.pro", "", "fits_test_checksum", " NAME:     FITS_TEST_CHECKSUM()  PURPOSE:     Verify the values of the CHECKSUM and DATASUM keywords in a FITS header  EXPLANATION:      Follows the 2007 version of the FITS checksum proposal at      http://fits.gsfc.nasa.gov/registry/checksum.html   CALLING SEQUENCE:     result = FITS_TEST_CHECKSUM(HDR, [ DATA, ERRMSG=, /FROM_IEEE ])  INPUTS:     HDR - FITS header (vector string)  OPTIONAL DATA:     DATA - data array associated with the FITS header.   If not supplied, or            set to a scalar, then there is assumed to be no data array            associated with the FITS header.  RESULT:      An integer -1, 0 or 1 indicating the following conditions:            1 - CHECKSUM (and DATASUM) keywords are present with correct values            0 - CHECKSUM keyword is not present           -1 - CHECKSUM or DATASUM keyword does not have the correct value                indicating possible data corruption.  OPTIONAL INPUT KEYWORD:     /FROM_IEEE - If this keyword is set, then the input is assumed to be in              big endian format (e.g. an untranslated FITS array).    This              keyword only has an effect on little endian machines (e.g.              a Linux box).  OPTIONAL OUTPUT KEYWORD:      ERRMSG - will contain a scalar string giving the error condition.   If               RESULT = 1 then ERRMSG will be an empty string.   If this               output keyword is not supplied, then the error message will be               printed at the terminal.  NOTES:      The header and data must be *exactly* as originally written in the FITS      file.  By default, some FITS readers may alter keyword values (e.g.      BSCALE) or append information (e.g. HISTORY or an inherited primary      header) and this will alter the checksum value.  PROCEDURES USED:     CHECKSUM32, FITS_ASCII_ENCODE(), SXPAR()  EXAMPLE:      Verify the CHECKSUM keywords in the primary header/data unit of a FITS      file 'test.fits'       FITS_READ,'test.fits',data,hdr,/no_PDU,/NoSCALE      print,FITS_TEST_CHECKSUM(hdr,data)       Note the use of the /No_PDU and /NoSCALE keywords to avoid any alteration      of the FITS header  REVISION HISTORY:      W. Landsman  SSAI               December 2002      Return quietly if CHECKSUM keywords not found W. Landsman May 2003      Add /NOSAVE to CHECKSUM32 calls when possible W. Landsman Sep 2004  ", "ERRMSGFROM_IEEEhdrdata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fits_write.html", "fits_write.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fits_write.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fits_write.html#fits_write", "fits_write", 'routine in <a href="idlastro/fits_write.html">fits_write.pro</a>', "fits_write.pro", "", "fits_write", " NAME: 	FITS_WRITE   PURPOSE: 	To write a FITS primary data unit or extension.   EXPLANATION:        ***NOTE** This version of FITS_READ must be used with a post Sep 2006           version of FITS_OPEN.   CALLING SEQUENCE: 	FITS_WRITE, filename_or_fcb, data, [header_in]   INPUTS: 	FILENAME_OR_FCB: name of the output data file or the FITS control 		block returned by FITS_OPEN (called with the /WRITE or 		/APPEND) parameters.   OPTIONAL INPUTS: 	DATA: data array to write.  If not supplied or set to a scalar, a 		null image is written. 	HEADER_IN: FITS header keyword.  If not supplied, a minimal basic 		header will be created.  Required FITS keywords, SIMPLE, 		BITPIX, XTENSION, NAXIS, ... are added by FITS_WRITE and 		do not need to be supplied with the header.  If supplied, 		their values will be updated as necessary to reflect DATA.   INPUT KEYWORD PARAMETERS:  	XTENSION: type of extension to write (Default= IMAGE ). If not 		supplied, it will be taken from HEADER_IN.  If not in either 		place, the default is  IMAGE .  This parameter is ignored 		when writing the primary data unit.     Note that binary and                and ASCII table extensions already have a properly formatted                header (e.g. with TTYPE* keywords) and byte array data. 	EXTNAME: EXTNAME for the extension.  If not supplied, it will be taken 		from HEADER_IN.  If not supplied and not in HEADER_IN, no 		EXTNAME will be written into the output extension. 	EXTVER: EXTVER for the extension.  If not supplied, it will be taken                from HEADER_IN.  If not supplied and not in HEADER_IN, no                EXTVER will be written into the output extension. 	EXTLEVEL: EXTLEVEL for the extension.  If not supplied, it will be taken                from HEADER_IN.  If not supplied and not in HEADER_IN, no                EXTLEVEL will be written into the output extension.        /NO_ABORT: Set to return to calling program instead of a RETALL                when an I/O error is encountered.  If set, the routine will                return  a non-null string (containing the error message) in the                keyword MESSAGE.   If /NO_ABORT not set, then FITS_WRITE will                print the message and issue a RETALL 	/NO_DATA: Set if you only want FITS_WRITE to write a header.  The 		header supplied will be written without modification and 		the user is expected to write the data using WRITEU to unit 		FCB.UNIT. When FITS_WRITE is called with /NO_DATA, the user is 		responsible for the validity of the header, and must write 		the correct amount and format of the data.  When FITS_WRITE 		is used in this fashion, it will pad the data from a previously 		written extension to 2880 blocks before writting the header.   OUTPUT KEYWORD PARAMETERS:        MESSAGE: value of the error message for use with /NO_ABORT 	HEADER: actual output header written to the FITS file.   NOTES: 	If the first call to FITS_WRITE is an extension, FITS_WRITE will 	automatically write a null image as the primary data unit.  	Keywords and history in the input header will be properly separated 	into the primary data unit and extension portions when constructing 	the output header (See FITS_READ for information on the internal 	Header format which separates the extension and PDU header portions).   EXAMPLES: 	Write an IDL variable to a FITS file with the minimal required header. 		FITS_WRITE,'newfile.fits',ARRAY  	Write the same array as an image extension, with a null Primary data 	unit. 		FITS_WRITE,'newfile.fits',ARRAY,xtension='IMAGE'  	Write 4 additional image extensions to the same file. 		FITS_OPEN,'newfile.fits',fcb 		FITS_WRITE,fcb,data1,extname='FLUX',extver=1 		FITS_WRITE,fcb,err1,extname'ERR',extver=1 		FITS_WRITE,fcb,data2,extname='FLUX',extver=2 		FITS_WRITE,fcb,err2,extname='ERR',extver=2 		FITS_CLOSE,FCB   WARNING:        FITS_WRITE currently does not completely update the file control block.        When mixing FITS_READ and FITS_WRITE commands it is safer to use        file names, rather than passing the file control block.  PROCEDURES USED: 	FITS_OPEN, SXADDPAR, SXDELPAR, SXPAR()  HISTORY: 	Written by:	D. Lindler	August, 1995 	Work for variable length extensions  W. Landsman   August 1997 	Converted to IDL V5.0   W. Landsman   September 1997 	PCOUNT and GCOUNT added for IMAGE extensions   J. Graham  October 1999        Write unsigned data types      W. Landsman   December 1999        Pad data area with zeros not blanks  W. McCann/W. Landsman October 2000        Return Message='' to signal normal operation W. Landsman Nov. 2000        Ensure that required extension table keywords are in proper order              W.V. Dixon/W. Landsman          March 2001        Assume since V5.1, remove NaNValue keyword   W. Landsman Nov. 2002        Removed obsolete !ERR system variable  W. Landsman Feb 2004        Check that byte array supplied with table extension W. Landsman Mar 2004        Make number of bytes 64bit to avoid possible overflow W.L  Apr 2006        Asuume FITS_OPEN has opened the file with /SWAP_IF_LITTLE_ENDIAN                          W. Landsman   September 2006        Removes BZERO and BSCALE for floating point output, D. Lindler, Sep 2008  ", "extnameextverxtensionextlevelno_abortmessageheaderno_datafile_or_fcbdataheader_in", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fitsdir.html", "fitsdir.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fitsdir.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fitsdir.html#fitsdir", "fitsdir", 'routine in <a href="idlastro/fitsdir.html">fitsdir.pro</a>', "fitsdir.pro", "", "fitsdir", " NAME:      FITSDIR  PURPOSE:      Display selected FITS keywords from the headers of FITS files.  EXPLANATION:       The values of either user-specified or default FITS keywords are      displayed in either the primary header and/or the first extension header.      Unless the /NOSIZE keyword is set, the data size is also displayed.      The default keywords are as follows (with keywords in 2nd row used if      those in the first row not found, and the 3rd row if neither the keywords      in the first or second rows found:)       DATE-OBS     TELESCOP   OBJECT    EXPTIME      TDATEOBS     TELNAME    TARGNAME  INTEG        ;First Alternative      DATE         OBSERVAT             EXPOSURE     ;Second Alternative                   INSTRUME             EXPTIM       ;Third Alternative        FITSDIR will also recognize gzip compressed files (must have a .gz       or FTZ extension).  CALLING SEQUENCE:      FITSDIR , [ directory, TEXTOUT =, EXTEN=, KEYWORDS=, /NOSIZE, /NoTELESCOPE                             ALT1_KEYWORDS= ,ALT2_KEYWORDS = ,ALT3_KEYWORDS =   OPTIONAL INPUT PARAMETERS:      DIRECTORY - Scalar string giving file name, disk or directory to be              searched.   Wildcard file names are allowed.    Examples of              valid names include 'iraf/*.fits' (Unix), d:\myfiles\f*.fits',              (Windows) or 'Macintosh HD:Files:*c0f.fits' (Macintosh).   OPTIONAL KEYWORD INPUT PARAMETER       KEYWORDS - FITS keywords to display, as either a vector of strings or as                  a comma delimited scalar string, e.g.'testname,dewar,filter'                  If not supplied, then the default keywords are 'DATE-OBS',                  'TELESCOP','OBJECT','EXPTIME'       ALT1_KEYWORDS - A list (either a vector of strings or a comma delimited                  strings of alternative keywords to use if the default                  KEYWORDS cannot be found.   By default, 'TDATEOBS', is the                  alternative to DATE-OBS, 'TELNAME' for 'TELESCOP','TARGNAME'                  for 'OBJECT', and 'INTEG' for EXPTIME       ALT2_KEYWORDS - A list (either a vector of strings or a comma delimited                  strings of alternative keywords to use if neither KEYWORDS                  nor ALT1_KEYWORDS can be found.       ALT3_KEYWORDS - A list (either a vector of strings or a comma delimited                  strings of alternative keywords to use if neither KEYWORDS                  nor ALT1_KEYWORDS nor ALT2_KEYWORDS can be found.       /NOSIZE - if set then information about the image size is not displayed       TEXTOUT - Controls output device as described in TEXTOPEN procedure                textout=1       TERMINAL using /more option                textout=2       TERMINAL without /more option                textout=3       &lt;program&gt;.prt                textout=4       laser.tmp                textout=5       user must open file                textout=7       Append to existing &lt;program&gt;.prt file                textout = filename (default extension of .prt)        EXTEN - Specifies an extension number (/EXTEN works for first extension)                which is  checked for the  desired keywords.        /NOTELESCOPE - If set, then if the default keywords are used, then the                 TELESCOPE (or TELNAME, OBSERVAT, INSTRUME) keywords are omitted                 to give more room for display other keywords.   The /NOTELESCOP                  keyword has no effect if the default keywords are not used.  OUTPUT PARAMETERS:        None.   EXAMPLES:   (1) Print info on all'*.fits' files in the current  directory using default           keywords.   Include information from the extension header        IDL&gt; fitsdir,/exten    (2) Write a driver program to display selected keywords in HST/ACS drizzled        (*drz) images          pro acsdir         keywords = 'date-obs,targname,detector,filter1,filter2,exptime'         fitsdir,'*drz.fits',key=keywords,/exten         return & end     (3)  Write info on all *.fits files in the Unix directory /usr2/smith, to a        file 'smith.txt' using the default keywords, but don't display the value         of the TELESCOPE keyword         IDL&gt; fitsdir ,'/usr2/smith/*.fits',t='smith.txt', /NoTel   PROCEDURE:        FILE_SEARCH()  is used to find the specified FITS files.   The        header of each file is read, and the selected keywords are extracted.        The formatting is adjusted so that no value is truncated on display.   SYSTEM VARIABLES:        TEXTOPEN (called by FITSDIR) will automatically define the following        non-standard system variables if they are not previously defined:         DEFSYSV,'!TEXTOUT',1        DEFSYSV,'!TEXTUNIT',0   PROCEDURES USED:        FDECOMP, FXMOVE, MRD_HREAD, REMCHAR        TEXTOPEN, TEXTCLOSE  MODIFICATION HISTORY:        Written, W. Landsman,  HSTX    February, 1993        Search alternate keyword names    W.Landsman    October 1998        Avoid integer truncation for NAXISi &gt;32767  W. Landsman  July 2000        Don't leave open unit    W. Landsman  July 2000        Added EXTEN keyword, work with compressed files, additional alternate        keywords W. Landsman     December 2000        Don't assume floating pt. exposure time W. Landsman   September 2001        Major rewrite, KEYWORD & ALT*_KEYWORDS keywords, no truncation,              /NOSIZE keyword     W. Landsman,  SSAI   August 2002        Assume V5.3 or later W. Landsman November 2002        Fix case where no keywords supplied  W. Landsman January 2003        NAXIS* values must be integers W. Landsman SSAI  June 2003        Trim spaces off of input KEYWORD values W. Landsman March 2004        Treat .FTZ extension as gzip compressed  W. Landsman September 2004        Assume since V5.5, file_search() available W. Landsman Aug 2006        Don't assume all images compressed or uncompressed W. L. Apr 2010        Use V6.0 notation W.L. Feb 2011  ", "TEXTOUTKeywordsnosizealt1_keywordsalt2_keywordsalt3_keywordsNoTelescopeextendirectory", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fitsrgb_to_tiff.html", "fitsrgb_to_tiff.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fitsrgb_to_tiff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fitsrgb_to_tiff.html#FITSRGB_to_TIFF", "FITSRGB_to_TIFF", 'routine in <a href="idlastro/fitsrgb_to_tiff.html">fitsrgb_to_tiff.pro</a>', "fitsrgb_to_tiff.pro", "", "FITSRGB_to_TIFF", " NAME:        FITSRGB_to_TIFF  PURPOSE:        Combine separate red, green, and blue FITS images into TIFF format  EXPLANATION:        The output TIFF (class R) file can have colors interleaved either        by pixel or image.  The colour mix is also adjustable.   CALLING SEQUENCE:        FITSRGB_to_TIFF, path, rgb_files, tiff_name [,/BY_PIXEL, /PREVIEW,                          RED= , GREEN =, BLUE =]   INPUTS:        path = file system directory path to the RGB files required.        rgb_files = string array with three components - the red FITS file                    filename, the blue FITS file filename and the green FITS                    file filename   OUTPUTS:        tiff_name = string containing name of tiff file to be produced   OPTIONAL OUTPUT:        Header = String array containing the header from the FITS file.   OPTIONAL INPUT KEYWORDS:        BY_PIXEL = This causes TIFF file RGB to be interleaved by pixel                   rather than the default of by image.        PREVIEW  = Allows a 24 bit image to be displayed on the screen                   to check the colour mix.        RED = Real number containing the fractional mix of red        GREEN = Real number containing the fractional mix of green        BLUE = Real number containing the fractional mix of blue   EXAMPLE:        Read three FITS files, 'red.fits', 'blue.fits' and 'green.fits' from        the directory '/data/images/space' and output a TIFF file named        'colour.tiff'                 IDL&gt; FITSRGB_to_TIFF, '/data/images/space', ['red.fits', $                     'blue.fits', 'green.fits'], 'colour.tiff'         Read three FITS files, 'red.fits', 'blue.fits' and 'green.fits' from        the current directory and output a TIFF file named '/images/out.tiff'        In this case, the red image is twice as strong as the green and the        blue is a third more intense.  A preview on screen is also wanted.                 IDL&gt; FITSRGB_to_TIFF, '.', ['red.fits', $                     'blue.fits', 'green.fits'], '/images/out.tiff', $                     /PREVIEW, RED=0.5, GREEN=1.0, BLUE=0.666   RESTRICTIONS:        (1) Limited to the ability of the routine READFITS   NOTES:        None   PROCEDURES USED:      Functions:   READFITS, CONCAT_DIR      Procedures:  WRITE_TIFF   MODIFICATION HISTORY:      16th January 1995 - Written by Carl Shaw, Queen's University Belfast 	27 Jan 1995 - W. Landsman, Add CONCAT_DIR for VMS, Windows compatibility 	Converted to IDL V5.0   W. Landsman   September 1997     Use WRITE_TIFF instead of obsolete TIFF_WRITE  W. Landsman  December 1998     Cosmetic changes  W. Landsman    February 2000  ", "BY_PIXELPREVIEWREDGREENBLUEpathrgb_filestiff_name", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fixed_map_grid.html", "fixed_map_grid.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fixed_map_grid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fixed_map_grid.html#map_grid_check_range", "map_grid_check_range", 'routine in <a href="coyote/fixed_map_grid.html">fixed_map_grid.pro</a>', "fixed_map_grid.pro", "", "map_grid_check_range", " NAME:    FIXED_MAP_GRID   PURPOSE:        The MAP_GRID procedure draws the graticule of parallels and meridians,  according to the specifications established by MAP_SET. MAP_SET must be called  before MAP_GRID to establish the projection type, the center of the  projection, polar rotation and geographical limits.   CATEGORY:    Mapping.   CALLING SEQUENCE:        MAP_GRID   INPUTS:    NONE   OPTIONAL INPUTS:    NONE   KEYWORD PARAMETERS:   BOX_AXES: Surround the map window with a  box  style axes with          annotations, outside the box, where the parallels intersect the          sides, and the meridians intersect the bottom and top edges of the          box.  The border of the box is drawn in alternating foreground and          background colors, with color changes at each intersection with          a parallel or meridian.  This keyword determines the thickness of          the box's border, in millimeters.  If LABEL is not explicitly          specified, it defaults to 1 when this keyword is present.  If this          feature is selected, be sure to leave enough room around the map          window for the annotation, usually by specifying the XMARGIN and          YMARGIN keywords to MAP_SET.  See the example below.    CHARSIZE: The size of the characters used for the labels. The default is 1.       COLOR: The color index for the grid lines. FILL_HORIZON: Fills the current map_horizon.     HORIZON: Draws the current map horizon.   INCREMENT: Determines the spacing between graticle points.  GLINESTYLE: If set, the line style used to draw the grid of parallels and              meridians. See the IDL User's Guide for options. The default is              dotted.  GLINETHICK: The thickness of the grid lines. Default is 1.       LABEL: Set this keyword to label the parallels and meridians with their              corresponding latitudes and longitudes. Setting this keyword to              an integer will cause every LABEL gridline to be labeled (i.e,              if LABEL=3 then every third gridline will be labeled). The              starting point for determining which gridlines are labeled is the              minimum latitude or longitude (-180 to 180), unless the LATS or              LONS keyword is set to a single value. In this case, the starting              point is the value of LATS or LONS.    LATALIGN: This keyword controls the alignment of the text baseline for              latitude labels. A value of 0.0 left justifies the label,              1.0 right justifies it, and 0.5 centers it.      LATDEL: The spacing in degrees between parallels of latitude in the grid.              If not set, a suitable value is determined from the current map              projection.        LATS: The desired latitudes to be drawn (and optionally labeled). If              this keyword is omitted, appropriate latitudes will be generated              with consideration of the optional LATDEL keyword. If this              keyword is set to a single value, drawn (and optionally labeled)              latitudes will be automatically generated  as              [...,LATS-LATDEL,LATS,LATS+LATDEL,...] over the extent of the              map.  The single valued LATS is taken to be the starting point              for labelling (See the LABEL keyword).      LATLAB: The longitude at which to place latitude labels. The default is              the center longitude on the map.    LATNAMES: An array specifing the names to be used for the latitude labels.              By default, this array is automatically generated in units of              degrees. This array can be a string array or numeric, but should              not be of mixed type. When LATNAMES is specified, LATS must also              be specified, but the number of elments in the two arrays need not              be equal. Extra LATNAMES are ignored, while LATNAMES not supplied              are automatically reported in degrees. LATNAMES can be used when              LATS is set to a single value. It this case, the LATS used will              start at the specified latitude and progress northward, wrapping              around the globe if appropriate. Caution should be used when              using LATNAMES in conjunction with a single LATS, since the              number of visible latitude gridlines is dependent on many factors.    LONALIGN: This keyword controls the alignment of the text baseline for              longitude labels. A value of 0.0 left justifies the label,              1.0 right justifies it, and 0.5 centers it.      LONDEL: The spacing in degrees between meridians of longitude in the grid.              If not set, a suitable value is determined from the current map              projection.      LONLAB: The latitude at which to place longitude labels. The default is              the center latitude on the map.        LONS: The desired longitudes to be drawn (and optionally labeled). If              this keyword is omitted, appropriate longitudes will be generated              with consideration of the optional LONDEL keyword. If this              keyword is set to a single value, drawn (and optionally labeled)              longitudes will be automatically generated as              [...,LONS-LONDEL,LONS,LONS+LONDEL,...] over the extent of the map.              The single valued LONS is taken to be the starting point for              labeling (See the LABEL keyword).    LONNAMES: An array specifing the names to be used for the longitude labels.              By default, this array is automatically generated in units of              degrees. This array can be a string array or numeric, but should              not be of mixed type. When LONNAMES is specified, LATS must also              be specified, but the number of elments in the two arrays need not              be equal. Extra LONNAMES are ignored, while LATNAMES not supplied              are automatically reported in degrees. LONNAMES can be used when              LONS is set to a single value. It this case, the LONS used will              start at the specified longitude and progress eastward, wrapping              around the globe if appropriate. Caution should be used when              using LONNAMES in conjunction with a single LONS, since the number              of visible longitude gridlines is dependent on many factors.   MAP_STRUCTURE: Set this keyword to a !MAP structure, as returned from        MAP_PROJ_INIT. If this keyword is set then the gridlines are passed        through MAP_PROJ_FORWARD and the resulting lines are drawn using        Cartesian coordinates. If this keyword is not set then it is assumed        that MAP_SET has been called to set up a map projection.   NO_GRID: Set this keyword if you only want labels but not gridlines.  ORIENTATION: Specifies the clockwise angle in degrees from horizontal              of the text baseline that the labels should be rotated. Note,              that the rotation used in MAP_SET is also clockwise, but XYOUTS              is normally counterclockwise.   T3D: Set this keyword to indicate that the generalized transformation       matrix in !P.T is to be used. If not present, the user-supplied       coordinates are simply scaled to screen coordinates.   ZVALUE: Sets the Z coordinate, in normalized coordinates in the          range of 0 to 1, at which to output the continents.        Note - This keyword has effect only if keyword T3D is set and the          transformation is stored in !P.T  OUTPUTS:          Draws gridlines and labels on the current map.   EXAMPLE:      map_set,10,20,23.5,/cont,/ortho,/horizon     ; establish a projection          lats=[-65,-52,-35,-20,-2.59,15,27.6,35,45,55,75,89]                      ; choose the parallels to draw          map_grid,lats=lats,londel=20,lons=-13,label=2,lonlab=-2.5,latlab=7                      ;draw the grid    Make a map with a grid surrounded by a box style axis:    map_set, /STEREO, 40, -90,scale=50e6,/CONTINENTS, XMARGIN=3, YMARGIN=3    map_grid, /BOX_AXES, COLOR=3, CHARSIZE=1.5  ;   MODIFICATION HISTORY:    Written by: SVP, May, 23 1996.    DMS, Feb, 1996 Note that this version plots all gridlines            unless a 4 element LIMIT was specified to MAP_SET.        SVP, Nov 1996   Changed over !map1 (new IDL5 maps)    SVP, May 1996   Map_Grid used to live inside of map_set.pro, now                        it lives here.        SVP, May 1996   Changed LABEL to determine the skip between labelled                        gridlines.                        Also, added the LATS and LONS keywords to give complete                        control over where the labels go.        SVP, Sept 1996  Added LATNAMS,LONAMES, and ORIENTATION keywords    DMS, Nov, 1996  Rev 2 of maps.    DMS, Jul, 1997  Added Box Axes    CT, Jan 2004: Added MAP_STRUCTURE keyword.    Renamed the function FIXED_MAP_GRID with fixed at lines 555-556 and       664-665 as described here: http://www.dfanning.com/map_tips/missinggrid.html.       This is required to get proper grid output in some applications, but       it breaks other code.  ", "xy", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fixed_map_grid.html#fixed_map_grid_incr", "fixed_map_grid_incr", 'routine in <a href="coyote/fixed_map_grid.html">fixed_map_grid.pro</a>', "fixed_map_grid.pro", "", "fixed_map_grid_incr", "", "span", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fixed_map_grid.html#fixed_map_grid_SOLVE", "fixed_map_grid_SOLVE", 'routine in <a href="coyote/fixed_map_grid.html">fixed_map_grid.pro</a>', "fixed_map_grid.pro", "", "fixed_map_grid_SOLVE", "", "MAP_STRUCTURERECURSIVEc0c1IcoordGwant", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fixed_map_grid.html#fixed_map_grid", "fixed_map_grid", 'routine in <a href="coyote/fixed_map_grid.html">fixed_map_grid.pro</a>', "fixed_map_grid.pro", "", "fixed_map_grid", "", "LABELLATDELNO_GRIDLONDELGLINESTYLEGLINETHICKLONLABLATLABLONALIGNLATALIGNLONNAMESLATNAMESLATSLONSZVALUECOLORT3DCHARSIZEORIENTATIONHORIZONFILL_HORIZON_EXTRAINCREMENTCLIP_TEXTBOX_AXESMAP_STRUCTUREFORMATWHOLE_MAP", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fixps.html", "fixps.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fixps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fixps.html#FIXPS", "FIXPS", 'routine in <a href="idlastro/coyote/fixps.html">fixps.pro</a>', "fixps.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "FIXPS", " This program modifies an IDL-produced PostScript landscape mode file so that the output  is right side up rather than upside down. In other words, it turns a so-called seascape  file into an actual landscape file. Files that are not currently in landscape mode will  be ignored. Tested with single and multiple page PostScript output from IDL 7.0.1 and 7.1.   The program requires the Coyote Library  to be installed on your machine.   ", "A4        Set this keyword if the PostScript file is using a A4 Europeran sized page.  LEDGER        Set this keyword if the PostScript file is using a US ledger size (11 x 17 inch) page.  LEGAL        Set this keyword if the PostScript file is using a US legal size (8.5 x 14 inch) page.  LETTER        Set this keyword if the PostScript file is using a US letter size (8.5 x 11 inch) page.  PAGETYPE        A generic way to set the page size. A string of  LETTER ,  LEDGER ,  LEGAL , or  A4 .  QUIET        Set this keyword to suppress error messages from the program.  SUCCESS        If this keyword is set to a named variable, then on output the variable will         return a 1 if the operation was successful, and a 0 otherwise. Using this         keyword also supresses the program's ability to  throw  an error. Informational         messages are issued about program developments, but this program will allow the         program caller to decide what to do with unsuccessful program completion.   in_filename        The name of an IDL-produced PostScript file in landscape mode.  out_filename        The name of the fixed output PostScript file. If not provided, the input         file is overwritten. Overwritting assumes proper read/write permission in         TEMP directory and in the directory where the input file is located.   ", "Graphics Utilities", "     Change History: <span class= code-output > Written by: David W. Fanning, 6 August 2009.</span> <span class= code-output > Change to overwrite input file if output filename is not provided. 6 August 2009. DWF.</span> <span class= code-output > Incorporated checks for non-landscape mode files and files that have already been fixed. 6 August 2009. DWF.</span> <span class= code-output > Modified to fix multiple-page PostScript files and to work seamlessly with PS_START output. 8 August 2009. DWF.</span> <span class= code-output > Ran into a problem in which the PostScript file is stored in the directory pointed</span> <span class= code-output >    to by the IDL_TMPDIR environment variable. Now check to see if the input filename</span> <span class= code-output >    is the same as the output filename and make a change, if necessary. 22 July 2010. DWF.</span> <span class= code-output >  Retreated to standard error handling with ERROR_MESSAGE as there are inevitable errors. 2 August 2010. DWF.</span> <span class= code-output >  Output file was created, even if not used. Now deleting file and issuing messages to</span> <span class= code-output >     explain why output file was not created. 1 November 2010. DWF.</span> <span class= code-output >  Added SUCCESS and QUIET keywords. 15 Novemember 2010. DWF.</span> <span class= code-output >  PostScript file structure changed in IDL 8. Made adjustment to find the</span> <span class= code-output >      PageBoundingBox line. 19 Dec 2010. DWF.</span>       Copyright (c) 2009-2012, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("idlastro/flegendre.html", "flegendre.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "flegendre.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/flegendre.html#flegendre", "flegendre", 'routine in <a href="idlastro/flegendre.html">flegendre.pro</a>', "flegendre.pro", "", "flegendre", " NAME:         FLEGENDRE  PURPOSE:        Compute the first M terms in a Legendre polynomial expansion.  EXPLANATION:        Meant to be used as a supplied function to SVDFIT.         This procedure became partially obsolete in IDL V5.0 with the        introduction of the /LEGENDRE keyword to SVDFIT and the associated        SVDLEG function.    However, note that, unlike SVDLEG, FLEGENDRE works        on vector values of X.  CALLING SEQUENCE:        result = FLEGENDRE( X, M)   INPUTS:        X - the value of the independent variable, scalar or vector        M - number of term of the Legendre expansion to compute, integer scalar   OUTPUTS:        result - (N,M) array, where N is the number of elements in X and M                is the order.   Contains the value of each Legendre term for                each value of X  EXAMPLE:        (1) If x = 2.88 and M = 3 then        IDL&gt; print, flegendre(x,3)   ==&gt;   [1.00, 2.88, 11.9416]         This result can be checked by explicitly computing the first 3 Legendre        terms, 1.0, x, 0.5*( 3*x^2 -1)         (2) Find the coefficients to an M term Legendre polynomial that gives                the best least-squares fit to a dataset (x,y)                IDL&gt; coeff = SVDFIT( x,y,M,func='flegendre')             The coefficients can then be supplied to the function POLYLEG to                compute the best YFIT values for any X.  METHOD:        The recurrence relation for the Legendre polynomials is used to compute        each term.   Compare with the function FLEG in  Numerical Recipes         by Press et al. (1992), p. 674   REVISION HISTORY:        Written     Wayne Landsman    Hughes STX      April 1995        Converted to IDL V5.0   W. Landsman   September 1997  ", "xm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/floats_equal.html", "floats_equal.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "floats_equal.pro", "", "", " NAME:        FLOATS_EQUAL   PURPOSE:         The purpose of this function is to compare two floating-point values or        arrays to determine if the values or arrays are equal. Arrays are equal        if they have the same number of elements, and each element is equal.         To learn why determing if floats are equal is hard (and probably not done        correctly in this program), please read the following article: <span class= code-output >  http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm</span>  AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         result = FLOATS_EQUAL(array_1, array_2)   ARGUMENTS:         array_1        Any single or double precision value or array. Required parameter.         array_2        Any single or double precision value or array. Required parameter.   KEYWORDS:         ULP            UNIT in the LAST PLACE. It is the gap or difference between two                       floating point numbers in the last digit that can distinguish the                       two numbers. Must be a positive integer. Set to 1 by default. Set                       to a larger value if you suspect accumulative round-off errors                       in your arrays.   RETURN VALUE:         result         Set to 1 if the arrays are equal, which means that the arrays have                       the same number of elements and each element is equal to the same                       element in the other array. Set to 0 if the arrays are not equal.  COMMON BLOCKS:        None.   EXAMPLE:         IDL&gt; a = Findgen(11)        IDL&gt; b = Findgen(11)        IDL&gt; Print, Floats_Equal(a,b)              1        IDL&gt; b[4] = b[4] + 0.0001        IDL&gt; Print, Floats_Equal(a,b)              0   RESTRICTIONS:         None.   MODIFICATION HISTORY:         Written by:  David W. Fanning, 29 August 2007.        Fixed a problem when using large numbers with the TOTAL command           by setting the INTEGER keyword. 22 June 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/floats_equal.html#FLOATS_EQUAL", "FLOATS_EQUAL", 'routine in <a href="coyote/floats_equal.html">floats_equal.pro</a>', "floats_equal.pro", "", "FLOATS_EQUAL", "", "ULParray_1array_2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/flux2mag.html", "flux2mag.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "flux2mag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/flux2mag.html#flux2mag", "flux2mag", 'routine in <a href="idlastro/flux2mag.html">flux2mag.pro</a>', "flux2mag.pro", "", "flux2mag", " NAME:      FLUX2MAG  PURPOSE:      Convert from flux (ergs/s/cm^2/A) to magnitudes.  EXPLANATION:      Use MAG2FLUX() for the opposite direction.   CALLING SEQUENCE:      mag = flux2mag( flux, [ zero_pt, ABwave=  ] )   INPUTS:      flux - scalar or vector flux vector, in erg cm-2 s-1 A-1   OPTIONAL INPUT:      zero_pt - scalar giving the zero point level of the magnitude.                If not supplied then zero_pt = 21.1 (Code et al 1976)                Ignored if the ABwave keyword is supplied   OPTIONAL KEYWORD INPUT:      ABwave - wavelength scalar or vector in Angstroms.   If supplied, then            FLUX2MAG() returns Oke AB magnitudes (Oke & Gunn 1983, ApJ, 266,            713).   OUTPUT:      mag - magnitude vector.   If the ABwave keyword is set then mag            is given by the expression            ABMAG = -2.5*alog10(f) - 5*alog10(ABwave) - 2.406             Otherwise, mag is given by the expression            mag = -2.5*alog10(flux) - zero_pt  EXAMPLE:        Suppose one is given wavelength and flux vectors, w (in Angstroms) and        f (in erg cm-2 s-1 A-1).   Plot the spectrum in AB magnitudes         IDL&gt; plot, w, flux2mag(f,ABwave = w), /nozero   REVISION HISTORY:        Written    J. Hill        STX Co.       1988        Converted to IDL V5.0   W. Landsman   September 1997        Added ABwave keyword    W. Landsman   September 1998  ", "ABwavefluxzero_pt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fm_unred.html", "fm_unred.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fm_unred.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fm_unred.html#fm_unred", "fm_unred", 'routine in <a href="idlastro/fm_unred.html">fm_unred.pro</a>', "fm_unred.pro", "", "fm_unred", " NAME:      FM_UNRED  PURPOSE:      Deredden a flux vector using the Fitzpatrick (1999) parameterization  EXPLANATION:      The R-dependent Galactic extinction curve is that of Fitzpatrick & Massa      (Fitzpatrick, 1999, PASP, 111, 63; astro-ph/9809387 ).      Parameterization is valid from the IR to the far-UV (3.5 microns to 0.1      microns).    UV extinction curve is extrapolated down to 912 Angstroms.   CALLING SEQUENCE:      FM_UNRED, wave, flux, ebv, [ funred, R_V = , /LMC2, /AVGLMC, ExtCurve=                        gamma =, x0=, c1=, c2=, c3=, c4= ]  INPUT:       WAVE - wavelength vector (Angstroms)       FLUX - calibrated flux vector, same number of elements as WAVE                If only 3 parameters are supplied, then this vector will                updated on output to contain the dereddened flux.       EBV  - color excess E(B-V), scalar.  If a negative EBV is supplied,                then fluxes will be reddened rather than dereddened.   OUTPUT:       FUNRED - unreddened flux vector, same units and number of elements                as FLUX   OPTIONAL INPUT KEYWORDS       R_V - scalar specifying the ratio of total to selective extinction                R(V) = A(V) / E(B - V).    If not specified, then R = 3.1                Extreme values of R(V) range from 2.3 to 5.3        /AVGLMC - if set, then the default fit parameters c1,c2,c3,c4,gamma,x0              are set to the average values determined for reddening in the              general Large Magellanic Cloud (LMC) field by Misselt et al.             (1999, ApJ, 515, 128)       /LMC2 - if set, then the fit parameters are set to the values determined              for the LMC2 field (including 30 Dor) by Misselt et al.              Note that neither /AVGLMC or /LMC2 will alter the default value              of R_V which is poorly known for the LMC.        The following five input keyword parameters allow the user to customize       the adopted extinction curve.    For example, see Clayton et al. (2003,       ApJ, 588, 871) for examples of these parameters in different interstellar       environments.        x0 - Centroid of 2200 A bump in microns (default = 4.596)       gamma - Width of 2200 A bump in microns (default  =0.99)       c3 - Strength of the 2200 A bump (default = 3.23)       c4 - FUV curvature (default = 0.41)       c2 - Slope of the linear UV extinction component            (default = -0.824 + 4.717/R)       c1 - Intercept of the linear UV extinction component            (default = 2.030 - 3.007*c2   OPTIONAL OUTPUT KEYWORD:       ExtCurve - Returns the E(wave-V)/E(B-V) extinction curve, interpolated                  onto the input wavelength vector   EXAMPLE:        Determine how a flat spectrum (in wavelength) between 1200 A and 3200 A        is altered by a reddening of E(B-V) = 0.1.   Assume an  average         reddening for the diffuse interstellar medium (R(V) = 3.1)         IDL&gt; w = 1200 + findgen(40)*50      ;Create a wavelength vector        IDL&gt; f = w*0 + 1                    ;Create a  flat  flux vector        IDL&gt; fm_unred, w, f, -0.1, fnew  ;Redden (negative E(B-V)) flux vector        IDL&gt; plot,w,fnew   NOTES:        (1) The following comparisons between the FM curve and that of Cardelli,            Clayton, & Mathis (1989), (see ccm_unred.pro):            (a) - In the UV, the FM and CCM curves are similar for R &lt; 4.0, but                  diverge for larger R            (b) - In the optical region, the FM more closely matches the                  monochromatic extinction, especially near the R band.        (2)  Many sightlines with peculiar ultraviolet interstellar extinction                can be represented with the FM curve, if the proper value of                R(V) is supplied.        (3) Use the 4 parameter calling sequence if you wish to save the                original flux vector.  PROCEDURE CALLS:        CSPLINE(), POLY()  REVISION HISTORY:        Written   W. Landsman        Raytheon  STX   October, 1998        Based on FMRCurve by E. Fitzpatrick (Villanova)        Added /LMC2 and /AVGLMC keywords,  W. Landsman   August 2000        Added ExtCurve keyword, J. Wm. Parker   August 2000        Assume since V5.4 use COMPLEMENT to WHERE  W. Landsman April 2006   ", "R_Vgammax0c1c2c3c4avglmclmc2ExtCurvewavefluxebvfunred", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/forprint.html", "forprint.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "forprint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/forprint.html#forprint", "forprint", 'routine in <a href="idlastro/forprint.html">forprint.pro</a>', "forprint.pro", "", "forprint", " NAME:        FORPRINT  PURPOSE:        Print a set of vectors by looping over each index value.   EXPLANATION:        If W and F are equal length vectors, then the statement                IDL&gt; forprint, w, f        is equivalent to                IDL&gt; for i = 0L, N_elements(w)-1 do print,w[i],f[i]   CALLING SEQUENCE:        forprint, v1,[ v2, v3, v4,....v18, FORMAT = , TEXTOUT = ,STARTLINE =,                                   SUBSET=, NUMLINE =, /SILENT, COMMENT= ]   INPUTS:        V1,V2,...V18 - Arbitary IDL vectors.  If the vectors are not of                equal length then the number of rows printed will be equal                to the length of the smallest vector.   Up to 18 vectors                can be supplied.   OPTIONAL KEYWORD INPUTS:         TEXTOUT - Controls print output device, defaults to !TEXTOUT                 textout=1       TERMINAL using /more option if available                textout=2       TERMINAL without /more option                textout=3       file 'forprint.prt'                textout=4       file 'laser.tmp'                textout=5      user must open file                textout =      filename (default extension of .prt)                textout=7       Append to &lt;program&gt;.prt file if it exists         COMMENT - String scalar or vector to write to the first line of output                 file if  TEXTOUT &gt; 2.    By default, FORPRINT will write a time                 stamp on the first line.   Use /NOCOMMENT if you don't want                 FORPRINT to write anything in the output file.    If COMMENT                 is a vector then one line will be written for each element.        FORMAT - Scalar format string as in the PRINT procedure.  The use                of outer parenthesis is optional.   Ex. - format= (F10.3,I7)                 This program will automatically remove a leading  $  from                incoming format statements. Ex. -  $(I4)  would become  (I4) .                If omitted, then IDL default formats are used.        /NOCOMMENT  - Set this keyword if you don't want any comment line                line written as the first line in a harcopy output file.        /SILENT - Normally, with a hardcopy output (TEXTOUT &gt; 2), FORPRINT will                 print an informational message.    If the SILENT keyword                is set and non-zero, then this message is suppressed.        SUBSET - Index vector specifying elements to print.   No error checking                is done to make sure the indicies are valid.  The statement                IDL&gt; forprint,x,y,z,subset=s                        is equivalent to               IDL&gt; for i=0,n-1 do print, x[s[i]], y[s[i]], z[s[i]]         STARTLINE - Integer scalar specifying the first line in the arrays                to print.   Default is STARTLINE = 1, i.e. start at the                beginning of the arrays.    (If a SUBSET keyword is supplied                then STARTLINE refers to first element in the subscript vector.)       /STDOUT - If set, the force standard output unit (=-1) if not writing                to a file.   This allows the FORPINT output to be captured                in a journal file.    Only needed for non-GUI terminals        WIDTH - Line width for wrapping, passed onto OPENW when using hardcopy.   OUTPUTS:        None  SYSTEM VARIABLES:        If keyword TEXTOUT is not used, the default is the nonstandard        keyword !TEXTOUT.    If you want to use FORPRINT to write more than        once to the same file, or use a different file name then set        TEXTOUT=5, and open and close then file yourself (see documentation        of TEXTOPEN for more info).         One way to add the non-standard system variables !TEXTOUT and !TEXTUNIT        is to use the procedure ASTROLIB  EXAMPLE:        Suppose W,F, and E are the wavelength, flux, and epsilon vectors for        a spectrum.   Print these values to a file 'output.dat' in a nice        format.         IDL&gt; fmt = '(F10.3,1PE12.2,I7)'        IDL&gt; forprint, F = fmt, w, f, e, TEXT = 'output.dat'   PROCEDURES CALLED:        TEXTOPEN, TEXTCLOSE  REVISION HISTORY:        Written    W. Landsman             April, 1989        Keywords textout and format added, J. Isensee, July, 1990        Made use of parenthesis in FORMAT optional  W. Landsman  May 1992        Added STARTLINE keyword W. Landsman    November 1992        Set up so can handle 18 input vectors. J. Isensee, HSTX Corp. July 1993        Handle string value of TEXTOUT   W. Landsman, HSTX September 1993        Added NUMLINE keyword            W. Landsman, HSTX February 1996        Added SILENT keyword             W. Landsman, RSTX, April 1998        Much faster printing to a file   W. Landsman, RITSS, August, 2001        Use SIZE(/TNAME) instead of DATATYPE() W. Landsman SSAI October 2001        Fix skipping of first line bug introduced Aug 2001  W. Landsman Nov2001        Added /NOCOMMENT keyword, the SILENT keyword now controls only        the display of informational messages.  W. Landsman June 2002        Skip PRINTF if IDL in demo mode  W. Landsman  October 2004        Assume since V5.4 use BREAK instead of GOTO W. Landsman April 2006        Add SUBSET keyword, warning if different size vectors passed.                                      P.Broos,W.Landsman. Aug 2006        Change keyword_set() to N_elements W. Landsman  Oct 2006        Added /STDOUT keyword  W. Landsman Oct 2006        Fix error message for undefined variable W. Landsman  April 2007        Added WIDTH keyword    J. Bailin  Nov 2010        Allow multiple (vector) comment lines  W. Landsman April 2011  ", "TEXTOUTFORMATSILENTSTARTLINENUMLINECOMMENTSUBSETNoCOMMENTSTDOUTWIDTHv1v2v3v4v5v6v7v8v9v10v11v12v13v14v15v16v17v18", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/fourpixfit.html", "fourpixfit.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "fourpixfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/fourpixfit.html#fourpixfit", "fourpixfit", 'routine in <a href="code_snapshots/orig_version/fourpixfit.html">fourpixfit.pro</a>', "fourpixfit.pro", "", "fourpixfit", "       Linear fit to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/fourpixfit.html", "fourpixfit.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "fourpixfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/fourpixfit.html#fourpixfit", "fourpixfit", 'routine in <a href="code_snapshots/albert_version/fourpixfit.html">fourpixfit.pro</a>', "fourpixfit.pro", "", "fourpixfit", "       Linear fit to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/fourpixfit.html", "fourpixfit.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "fourpixfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/fourpixfit.html#fourpixfit", "fourpixfit", 'routine in <a href="code_snapshots/jul25/fourpixfit.html">fourpixfit.pro</a>', "fourpixfit.pro", "", "fourpixfit", "       Linear fit to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/fourpixfit.html", "fourpixfit.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "fourpixfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/fourpixfit.html#fourpixfit", "fourpixfit", 'routine in <a href="code_snapshots/test_version/fourpixfit.html">fourpixfit.pro</a>', "fourpixfit.pro", "", "fourpixfit", "       Linear fit to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fpufix.html", "fpufix.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fpufix.pro", "", "", " NAME:        FPUFIX   PURPOSE:         This is a utility routine to examine a variable and fix problems        that will create floating point underflow errors.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         fixedData = FPUFIX(data)   ARGUMENTS:         data :         A numerical variable to be checked for values that will cause                       floating point underflow errors. Suspect values are set to 0.   KEYWORDS:         None.  RETURN VALUE:         fixedData:    The output is the same as the input, except that any values that                      will cause subsequent floating point underflow errors are set to 0.   COMMON BLOCKS:        None.   EXAMPLES:         data = FPTFIX(data)   RESTRICTIONS:       None.   MODIFICATION HISTORY:         Written by David W. Fanning, from Mati Meron's example FPU_FIX. Mati's           program is more robust that this (ftp://cars3.uchicago.edu/midl/),           but this serves my needs and doesn't require other programs from           Mati's library.  24 February 2006.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fpufix.html#FPUFIX", "FPUFIX", 'routine in <a href="coyote/fpufix.html">fpufix.pro</a>', "fpufix.pro", "", "FPUFIX", "", "data", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fpufix.html", "fpufix.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fpufix.pro", "", "", " NAME:        FPUFIX   PURPOSE:         This is a utility routine to examine a variable and fix problems        that will create floating point underflow errors.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         fixedData = FPUFIX(data)   ARGUMENTS:         data :         A numerical variable to be checked for values that will cause                       floating point underflow errors. Suspect values are set to 0.   KEYWORDS:         None.  RETURN VALUE:         fixedData:    The output is the same as the input, except that any values that                      will cause subsequent floating point underflow errors are set to 0.   COMMON BLOCKS:        None.   EXAMPLES:         data = FPTFIX(data)   RESTRICTIONS:       None.   MODIFICATION HISTORY:         Written by David W. Fanning, from Mati Meron's example FPU_FIX. Mati's           program is more robust that this (ftp://cars3.uchicago.edu/midl/),           but this serves my needs and doesn't require other programs from           Mati's library.  24 February 2006.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fpufix.html#FPUFIX", "FPUFIX", 'routine in <a href="idlastro/coyote/fpufix.html">fpufix.pro</a>', "fpufix.pro", "", "FPUFIX", "", "data", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/frebin.html", "frebin.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "frebin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/frebin.html#frebin", "frebin", 'routine in <a href="idlastro/frebin.html">frebin.pro</a>', "frebin.pro", "", "frebin", " NAME:    FREBIN   PURPOSE:    Shrink or expand the size of an array an arbitary amount using interpolation   EXPLANATION:    FREBIN is an alternative to CONGRID or REBIN.    Like CONGRID it    allows expansion or contraction by an arbitary amount. ( REBIN requires    integral factors of the original image size.)    Like REBIN it conserves    flux by ensuring that each input pixel is equally represented in the output    array.   CALLING SEQUENCE:    result = FREBIN( image, nsout, nlout, [ /TOTAL] )   INPUTS:     image - input image, 1-d or 2-d numeric array     nsout - number of samples in the output image, numeric scalar   OPTIONAL INPUT:     nlout - number of lines in the output image, numeric scalar             If not supplied, then set equal to 1   OPTIONAL KEYWORD INPUTS:    /total - if set, the output pixels will be the sum of pixels within           the appropriate box of the input image.  Otherwise they will           be the average.    Use of the /TOTAL keyword conserves surface flux.   OUTPUTS:     The resized image is returned as the function result.    If the input     image is of type DOUBLE or FLOAT then the resized image is of the same     type.     If the input image is BYTE, INTEGER or LONG then the output     image is usually of type FLOAT.   The one exception is expansion by     integral amount (pixel duplication), when the output image is the same     type as the input image.   EXAMPLE:      Suppose one has an 800 x 800 image array, im, that must be expanded to      a size 850 x 900 while conserving surface flux:       IDL&gt; im1 = frebin(im,850,900,/total)       im1 will be a 850 x 900 array, and total(im1) = total(im)  NOTES:     If the input image sizes are a multiple of the output image sizes     then FREBIN is equivalent to the IDL REBIN function for compression,     and simple pixel duplication on expansion.      If the number of output pixels are not integers, the output image     size will be truncated to an integer.  The platescale, however, will     reflect the non-integer number of pixels.  For example, if you want to     bin a 100 x 100 integer image such that each output pixel is 3.1     input pixels in each direction use:            n = 100/3.1   ; 32.2581           image_out = frebin(image,n,n)       The output image will be 32 x 32 and a small portion at the trailing      edges of the input image will be ignored.   PROCEDURE CALLS:     None.  HISTORY:     Adapted from May 1998 STIS  version, written D. Lindler, ACC     Added /NOZERO, use INTERPOLATE instead of CONGRID, June 98 W. Landsman     Fixed for nsout non-integral but a multiple of image size  Aug 98 D.Lindler     DJL, Oct 20, 1998, Modified to work for floating point image sizes when 		expanding the image.     Improve speed by addressing arrays in memory order W.Landsman Dec/Jan 2001  ", "totalimagensoutnlout", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fsc_base_filename.html", "fsc_base_filename.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fsc_base_filename.pro", "", "", " NAME:     FSC_BASE_FILENAME   PURPOSE:      The purpose of this is to extract from a long file path, the     base file name. That is, the name of the actual file without     the preceeding directory information or the final file extension.     The directory information and file extension can be obtained via     keywords. The file is named so as not to interfere with FILE_BASENAME,     which was introduced in IDL 6.0 and performs a similar function.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:      Utility.   CALLING SEQUENCE:      baseFilename = FSC_Base_Filename(thePath)   INPUTS:      thePath:      This is the file path you wish to extract a base file name from.                   It is a string variable of the sort returned from Dialog_Pickfile.   KEYWORDS:      DIRECTORY:      The directory information obtained from the input file path.                     The directory always ends in a directory separator character.      EXTENSION:      The file extension associated with the input file path.      PATH_SEPARATOR: The string to use as a path separator. If undefined, the output                     of PATH_SEP() will be used.   RETURN_VALUE:      baseFilename:   The base filename, stripped of directory and file extension information.   RESTRICTIONS:      This is a quick and dirty program. It has been tested on Windows machines and *lightly*     tested on UNIX machines. Please contact me at the e-mail address above if you discover     problems.   EXAMPLE:      IDL&gt; thePath =  C:\rsi\idl7.8\lib\jester.pro      IDL&gt; Print, FSC_Base_Filename(thePath, Directory=theDirectory, Extension=theExtension)          jester     IDL&gt; Print, theDirectory          C:\rsi\idl7.8\lib\     IDL&gt; Print, theExtension          pro   MODIFICATION HISTORY:      Written by: David W. Fanning, 31 July 2003.     Modified by KaRo, 13 Feb. 2005 to allow dots in the filename.     Added PATH_SEPARATOR keyword. 25 July 2005. DWF.     Added ability to recongnize directory by path separator in last character. 19 Sept 2005. DWF.     If directory is blank (because a relative filename was passed), set to current directory. 6 Aug 2009. DWF.     There were a couple of instances where the directory did NOT end in a path separator. Fixed. 24 Feb 2012. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_base_filename.html#FSC_Base_Filename", "FSC_Base_Filename", 'routine in <a href="idlastro/coyote/fsc_base_filename.html">fsc_base_filename.pro</a>', "fsc_base_filename.pro", "", "FSC_Base_Filename", "", "DirectoryExtensionPath_Separatorfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html", "fsc_colorbar__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsc_colorbar__define.pro", "", "", " NAME:        FSC_COLORBAR__DEFINE        Note: The name of the routine has been changed from COLORBAR__DEFINE        on 25 Sept 2010 to avoid conflicts with an IDL 8.0 routine of the        same name. See the article  IDL 8 Name Conflicts  here:             http://www.idlcoyote.com/ng_tips/idl8_name_conflicts.html   PURPOSE:        The purpose of this routine is to implement a FSC_COLORBAR object        class. The ColorBar is rendered in the direct graphics system.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Graphics.   CALLING SEQUENCE:        colorbar = Obj_New( FSC_COLORBAR )   INPUTS:        All inputs to the program are via keyword parameters.   KEYWORD PARAMETERS:     Background: Background color. This is the color with which the colorbar is                erased. The default color is !P.Background.    Bottom: Bottom color index of colors allocated to colorbar.    Charsize: Character size of annotation. Default is 1.0.    Color: Color of annotation and outline. Default is !P.Color.    Font: Font to use for annotation. Default is -1, Hershey fonts.    Format: Format of annotation. Default is  (F8.2) .    Major: The number of major tick intervals. Default is 5.    Minor: The number of minor tick intervals. Default is 2.    MinusOne: Set this keyword to choose MinusOne keyword on the Congrid command                that resizes the colorbar into the window.    NColors: The number of colors allocated to colorbar. Default is (256 &lt;             !D.N_Colors).    Neighbor: Set to indicate Nearest Neighbor sampling for Congrid. Default is              0 (Bilinear).    Position: The position of colorbar in normalized coordinates. Default for a              horizontal colorbar is [0.15, 0.88, 0.85, 0.95]. Default for a              vertical colorbar is [0.88, 0.15, 0.95, 0.85]. These defaults are              designed for a 400 by 400 window.    Range: The data range on colorbar. Default is [0, 255].    TickLen: The length of tick marks. Default is -0.1    TickV:   Locations for the tick marks in data units. This is the same as             the [XY]TickV keyword. Default is to do what IDL would do             normally.    Vertical: Set this keyword if you want a vertical colorbar. Default is              horizontal.    XEraseBox: A five-element vector of X points (normalized) for erasing the               colorbar plot. Normally this keyword will not have to be used.               The program uses the plot REGION for erasing. But larger               character sizes can result in annotation going outside the               region enclosed by the plot. If that is the case, then use this               keyword along with YEraseBox to specify a larger-than-normal               erasure area. The points are sent to the POLYFILL command for               erasing.                   POLYFILL, xEraseBox, yEraseBox, /Normal, Color=background     YEraseBox: A five-element vector of Y points (normalized) for erasing the               colorbar plot.   OBJECT METHODS:     Clamp: This procedure method allows the color bar range to be  clamped            to a particular data range.     Draw: This procedure method draws the colorbar in the display window. The          ERASE keyword to this method will erase the current colorbar (by          calling the ERASE method) before drawing the colorbar in the display          window.                 colorbar-&gt;Draw     Erase: This procedure method erases the colorbar object in the window. It           accomplishes this by performing a POLYFILL in the background color.           This method is primarily useful for interactive graphics display           devices.                colorbar-&gt;Erase     GetProperty: This procedure method allows one to obtain the current state                 of the object via the keyword parameters listed above.                 colorbar-&gt;GetProperty, Range=currentRange, Title=currentTitle                Print, currentRange, currentTitle     SetProperty: This procedure method allows one to set the properties of the                 colorbar object via the keywords described above. In addition,                 a DRAW and ERASE keyword are provided so that the colorbar can                 be immediately drawn when the new property is set.                 colorbar-&gt;SetProperty, Range=[500, 15000], /Erase, /Draw   COMMON BLOCKS:        None.   SIDE EFFECTS:        The display window is not erased first.   RESTRICTIONS:        None.   EXAMPLE:        To create a colorbar, use it, then destroy it, type:         colorbar = Obj_New( FSC_COLORBAR , Title='Colorbar Values', Range=[0,1000],$                   Format='(I4)')        Window        LoadCT, 5        colorbar-&gt;Draw        colorbar-&gt;SetProperty, Range=[0,500], /Erase, /Draw        Obj_Destroy, colorbar   MODIFICATION HISTORY:        Written by: David Fanning, Fanning Software Consulting,                    26 November 1998.        Added Horizontal keyword to SetProperty method and fixed problem in        going from Vertical to Horizontal color bars. 29 Nov 1998. DWF.        Added LoadCT method and current color table index to object.              6 December 1998.        Fixed a bug dealing with nearest neighbor resampling. 30 Mar 1999. DWF.        Fixed a bug with how NCOLORS and BOTTOM keywords interacted.              29 Aug 1999. DWF.        10 Oct 99. Modified the program so that current plot and map coordinates                 are saved and restored after the colorbar is drawn. DWF.        26 May 2000 Added {XY}TICKV capability to the draw method. This                 required adding TickV to the object data structure, and to the                 INIT, GetProperty and SetProperty methods.                 Changed default tick length to -0.1. DWF (and Jack Saba)        18 Nov 2001. Added Clamp method. DWF.        25 September 2010. Renamed to FSC_Colorbar__Define to avoid conflict with a                 Colorbar__Define program introduced with IDL 8.0. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html#FSC_Colorbar::Clamp", "FSC_Colorbar::Clamp", 'routine in <a href="coyote/fsc_colorbar__define.html">fsc_colorbar__define.pro</a>', "fsc_colorbar__define.pro", "", "FSC_Colorbar::Clamp", "", "Drawdatarange", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html#FSC_Colorbar::GetProperty", "FSC_Colorbar::GetProperty", 'routine in <a href="coyote/fsc_colorbar__define.html">fsc_colorbar__define.pro</a>', "fsc_colorbar__define.pro", "", "FSC_Colorbar::GetProperty", "", "BackgroundBottomCharsizeColorFontFormatIndexMajorMinorMinusOneNColorsNeighborPositionRangeTickLenTickVTitleVerticalXEraseBoxYEraseBox", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html#FSC_Colorbar::SetProperty", "FSC_Colorbar::SetProperty", 'routine in <a href="coyote/fsc_colorbar__define.html">fsc_colorbar__define.pro</a>', "fsc_colorbar__define.pro", "", "FSC_Colorbar::SetProperty", "", "BackgroundBottomCharsizeColorDrawEraseFontFormatHorizontalIndexMajorMinorMinusOneNColorsNeighborPositionRangeTickLenTickVTitleVerticalXEraseBoxYEraseBox", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html#FSC_Colorbar::LoadCT", "FSC_Colorbar::LoadCT", 'routine in <a href="coyote/fsc_colorbar__define.html">fsc_colorbar__define.pro</a>', "fsc_colorbar__define.pro", "", "FSC_Colorbar::LoadCT", "", "DrawEraseindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html#FSC_Colorbar::Erase", "FSC_Colorbar::Erase", 'routine in <a href="coyote/fsc_colorbar__define.html">fsc_colorbar__define.pro</a>', "fsc_colorbar__define.pro", "", "FSC_Colorbar::Erase", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html#FSC_Colorbar::Draw", "FSC_Colorbar::Draw", 'routine in <a href="coyote/fsc_colorbar__define.html">fsc_colorbar__define.pro</a>', "fsc_colorbar__define.pro", "", "FSC_Colorbar::Draw", "", "Erase", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html#FSC_Colorbar::CleanUp", "FSC_Colorbar::CleanUp", 'routine in <a href="coyote/fsc_colorbar__define.html">fsc_colorbar__define.pro</a>', "fsc_colorbar__define.pro", "", "FSC_Colorbar::CleanUp", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html#FSC_Colorbar::Init", "FSC_Colorbar::Init", 'routine in <a href="coyote/fsc_colorbar__define.html">fsc_colorbar__define.pro</a>', "fsc_colorbar__define.pro", "", "FSC_Colorbar::Init", "", "BackgroundBottomCharsizeColorFontFormatIndexMajorMinorMinusOneNColorsNeighborPositionRangeTickLenTickVTitleVerticalXEraseBoxYEraseBox", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorbar__define.html#FSC_Colorbar__Define", "FSC_Colorbar__Define", 'routine in <a href="coyote/fsc_colorbar__define.html">fsc_colorbar__define.pro</a>', "fsc_colorbar__define.pro", "", "FSC_Colorbar__Define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html", "fsc_colorselect.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsc_colorselect.pro", "", "", " NAME:    FSC_COLORSELECT   PURPOSE:     The purpose of this compound widget is to provide a means for selecting    a new color or color table in a widget program. The program consists of    a label, a non-editable text widget, and a button to make a color or    color table selection interactively. (See the example program.)   AUTHOR:    FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   CALLING SEQUENCE:     objectRef = FSC_COLORSELECT(parent, Title='Annotate Color  , Color='red')   INPUT PARAMETERS:     parent -- The parent widget ID of the compound widget. Required.   INPUT KEYWORDS:     BREWER:        Set if you want Brewer color tables, rather than the normal IDL color tables.                   This requires the file fsc_brewer.tbl to be in your IDL path.     CFONT:         Set to the name of a font to display the color name in.     COLOR:         The name of the color to be displayed in the widget. If color                   is not used, or if it is set to a null string, then the widget                   will allow selection of a color table, instead of a color name.     CT_INDEX:      The color table index number you wish to use. The actual name of the                   color table will be displayed in the widget.     EVENT_FUNC:   Set this keyword to the name of an Event Function. If this                  keyword is undefined and the Event_Pro keyword is undefined,                  all compound widget events are handled internally and not                  passed on to the parent widget.     EVENT_PRO:    Set this keyword to the name of an Event Procedure. If this                  keyword is undefined and the Event_Func keyword is undefined,                  all compound widget events are handled internally and not                  passed on to the parent widget.     FRAME:        Set this keyword to put a frame around the compound widget.     LABELALIGN:  Set this keyword to align label text. [0-center (default), 1-left, 2-right].     LABELFONT:   The font name for the text in the Label Widget.     LABELSIZE:   The X screen size of the Label Widget.     NAME:        A scalar string name of the object. (Default = ''.)     SCR_XSIZE:   The X screen size of the compound widget.     SCR_YSIZE:   The Y screen size of the compound widget.     STYLE:       The  style  of the text in the Text Widget. A value of 0 (the default)                 capitalizes the first letter in the name. A style of 1 uses all lowercase.                 A style of 2 uses all uppercase.     TITLE:       The text to go on the Label Widget.     UVALUE:      A user value for any purpose.     XSIZE:       The X size of the Text Widget.     In addition, any keyword defined for WIDGET_TEXT, but not defined here (e.g., SENSITIVE), is    passed along without inspection to the text widget. Use of  extra  keywords is discouraged.   COMMON BLOCKS:     None.   RESTRICTIONS:     None.   EVENT STRUCTURE:     All events are handled internally unless either the Event_Pro or Event_Func    keywords are used to assign an event handler to the compound widget.     event = { FSC_ColorSelect_Event, $; The name of the event structure.              ID: 0L, $              ; The ID of the compound widget's top-level base.              TOP: 0L, $             ; The widget ID of the top-level base of the hierarchy.              HANDLER: 0L, $         ; The event handler ID. Filled out by IDL.              Color:   , $           ; The name of the current color or color table.              Index: 0L, $           ; The color table index selected if color tables are used.              Brewer: 0L, $          ; A flag that indicated Brewer color tables are being used.              NColors: 0L, $         ; The number of colors used for the color table.              ObjRef:Obj_New()}      ; The  self  object.   GETTING and SETTING VALUES:     Almost all the properties of the widget can be obtained or set via    the object's GetProperty and SetProperty methods (described below).    But since traditional compound widgets have the ability to get and    set the value of the compound widget, this capability is implemented    as special methods: Get_Color/Set_Color and Get_Color_Index/Set_Color_Index.     To get the color of the widget, do this: color = objectRef-&gt;Get_Color()    To set the color of the widget, do this: objectRef-&gt;Set_Color, 'blue'.    Valid colors are those returned by FSC_Color. Getting and setting the    color table index number works similarly.   EXAMPLE:     An example program is provided at the end of the FSC_COLORSELECT code. To run it,    type these commands:        IDL&gt; .Compile FSC_COLORSELECT       IDL&gt; Example   DEPENDENCIES:     Requires the Coyote Library:      http://www.idlcoyote.com/programs/coyoteprograms.zip   MODIFICATION HISTORY:     Written by: David W. Fanning, 26 JULY 2010.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_COLORSELECT_WidgetFont", "FSC_COLORSELECT_WidgetFont", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_COLORSELECT_WidgetFont", "", "DEFAULT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_COLORSELECT::GetTextID", "FSC_COLORSELECT::GetTextID", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_COLORSELECT::GetTextID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_COLORSELECT::Resize", "FSC_COLORSELECT::Resize", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_COLORSELECT::Resize", "", "newsize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_COLORSELECT::GetID", "FSC_COLORSELECT::GetID", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_COLORSELECT::GetID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_COLORSELECT::GetLabelSize", "FSC_COLORSELECT::GetLabelSize", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_COLORSELECT::GetLabelSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_COLORSELECT::GetTextSize", "FSC_COLORSELECT::GetTextSize", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_COLORSELECT::GetTextSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::Geometry", "FSC_ColorSelect::Geometry", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::Geometry", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::Get_Color", "FSC_ColorSelect::Get_Color", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::Get_Color", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::Get_Color_Index", "FSC_ColorSelect::Get_Color_Index", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::Get_Color_Index", "", "BREWER", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::Set_Color", "FSC_ColorSelect::Set_Color", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::Set_Color", "", "color", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::Set_Color_Index", "FSC_ColorSelect::Set_Color_Index", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::Set_Color_Index", "", "BREWERTABLENAMEcolorIndex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect_Event__Define", "FSC_ColorSelect_Event__Define", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect_Event__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::PickColorEvents", "FSC_ColorSelect::PickColorEvents", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::PickColorEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect_Event_Handler", "FSC_ColorSelect_Event_Handler", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect_Event_Handler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::GetProperty", "FSC_ColorSelect::GetProperty", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::GetProperty", "", "BREWERCOLORCT_INDEXEVENT_FUNCEVENT_PROIDNAMETEXTIDUVALUE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::SetProperty", "FSC_ColorSelect::SetProperty", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::SetProperty", "", "BREWERCOLORCT_INDEXEVENT_FUNCEVENT_PROLABELSIZENAMESCR_XSIZESCR_YSIZESENSITIVESTYLETITLEUVALUEXSIZE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::INIT", "FSC_ColorSelect::INIT", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::INIT", "", "BrewerButton_TextCFontColorCT_IndexCT_NColorsEvent_FuncEvent_Pro_ExtraFrameLabelAlignLabelFontLabelSizeNameScr_XSizeScr_YSizeStyleTitleUValueXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect_Kill_Notify", "FSC_ColorSelect_Kill_Notify", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect_Kill_Notify", "", "textID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect::CLEANUP", "FSC_ColorSelect::CLEANUP", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect__Define", "FSC_ColorSelect__Define", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#FSC_ColorSelect", "FSC_ColorSelect", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "FSC_ColorSelect", "", "BrewerButton_TextCFontColorCT_IndexCT_NColorsEvent_FuncEvent_Pro_ExtraFrameLabelAlignLabelFontLabelSizeNameScr_XSizeScr_YSizeStyleTitleUValueXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#Example_Event", "Example_Event", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "Example_Event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_colorselect.html#Example", "Example", 'routine in <a href="coyote/fsc_colorselect.html">fsc_colorselect.pro</a>', "fsc_colorselect.pro", "", "Example", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsc_droplist.html", "fsc_droplist.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsc_droplist.pro", "", "", " NAME:    FSC_DROPLIST   PURPOSE:     The purpose of this compound widget is to provide an alternative    to the DROPLIST widget offered in the IDL distribution. What has    always annoyed me about a droplist is that you can't get the current     value  of a droplist easily. This compound widget makes this and    other tasks much easier.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   CALLING SEQUENCE:     droplistObj = FSC_Droplist(parent, Title='Animals:  , Value=['Dog'. 'Cat', 'Coyote'], Index=2)     The return value of the FSC_Droplist (droplistObj in this example) is    an object reference. Interaction with the droplist will occur through    object methods.   INPUT PARAMETERS:     parent -- The parent widget ID of the compound widget. Required.   INPUT KEYWORDS:   Any keyword that is appropriate for the Widget_Droplist function can be used.  In addition, these keywords are explicitly defined.     EVENT_FUNC -- Set this keyword to the name of an Event Handler Function.    EVENT_PRO -- Set this keyword to the name of an Event Handler Procedure.    FORMAT -- A format specifier for the  format  of the values in the droplist.    INDEX -- The index number of the current selection.    SPACES -- A two-element array that indicates the number of blank spaces to be added              to the the beginning and end of the formatted values. If a single number              is provided, this number of blank spaces is added to both the beginning              and the end of the value.    TITLE -- The title of the droplist widget.    UNAME -- The user name of the droplist widget. (Only available in IDL 5.2 and higher.)    UVALUE -- The normal  user value  of the droplist.    VALUE -- An array of the droplist  selections . May be any data type.   COMMON BLOCKS:     None.   DEPENDENCIES:     Requires ERROR_MESSAGE from the Coyote Library..   EVENT STRUCTURE:     An event is returned each time the droplist value is changed. The event structure    is defined like this:     event = { FSC_DROPLIST_EVENT, $ ; The name of the event structure.              ID: 0L, $             ; The ID of the compound widget's top-level base.              TOP: 0L, $            ; The widget ID of the top-level base of the hierarchy.              HANDLER: 0L, $        ; The event handler ID. Filled out by IDL.              INDEX: 0L, $          ; The index number of the current selection.              SELECTION:Ptr_New() $ ; A pointer to the current selection  value .              SELF:Obj_New() }      ; The object reference of the compound widget.   PUBLIC OBJECT METHODS:     GetID -- A function with no arguments that returns the widget identifier       of the droplist widget.        droplistID = droplistObj-&gt;GetID()     GetIndex -- A function with no arguments that returns the index       number of the current droplist selection.        currentIndex = droplistObj-&gt;GetIndex()     GetSelection -- A function with no arguments that returns the current       droplist selection.        currentSelection = droplistObj-&gt;GetSelection()     GetUValue -- A function with no arguments that returns the  user value        of the compound widget i.e., the value set with the UVALUE keyword).        myUValue = droplistObj-&gt;GetUValue()     GetValues -- A function with no arguments that returns the  values  or        selections  for the droplist.        possibleSelections = droplistObj-&gt;GetValues()     Resize -- A procedure that sets the X screen size of the droplist. It is       defined like this:        PRO Resize, newSize, ParentSize=parentSize        The  newSize  keyword is the new X screen size. If this argument is       missing, the screen X size of the compound widget's parent is used.       The parentSize keyword is an output keyword that returns the X screen       size of the compound widget's parent.        droplistObj-&gt;Resize, 400        Note that not all devices (e.g., X Windows devices) support droplist resizing.     SetIndex -- A procedure that sets the current droplist selection based on       the given index. This is equivalent to Widget_Control, droplistID, Set_Droplist_Select=newIndex        droplistObj-&gt;SetIndex, newIndex     SetSelection -- Whereas a regular droplist widget can only be set by index       number, this compound widget can also be set by a  selection . The new selection       can be any data type and corresponds to one of the  values  of the droplist.        droplistObj-&gt;SetSelection, newSelection     SetValues -- Sets the possible selections of the droplist widget. The CurrentIndex keyword       will allow the current index of the selection to be changed to:        newChoices = ['dog', 'cat', 'coyote']       droplistObj-&gt;SetValues, newChoices, CurrentIndex=2   EXAMPLE:     An example program is provided at the end of the FSC_DROPLIST code. To run it,    type these commands:        IDL&gt; .Compile FSC_DROPLIST       IDL&gt; Example   MODIFICATION HISTORY:     Written by: David W Fanning, 17 Jan 2000. DWF.    Added FORMAT and SPACES keywords 28 April 2000. DWF.    Fixed a small problem with event processing when the EVENT_FUNC keyword       was used. 29 Dec 2000. DWF.    Attached the UNAME value to the TLB of the compound widget instead       of to the droplist widget itself. 11 Jan 2001. DWF.    Fixed a problem when the droplist was part of a modal widget and used the       EVENT_PRO keyword. 27 Oct 2003. DWF.    Added a SetValue method for setting all the values in the droplist at once. 12 Nov 2004. DWF.    Fixed type on line 346/ 6 Feb 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist_Kill_Notify", "FSC_Droplist_Kill_Notify", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist_Kill_Notify", "", "droplistID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::EventHandler", "FSC_Droplist::EventHandler", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::EventHandler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist_Events", "FSC_Droplist_Events", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::Sensitive", "FSC_Droplist::Sensitive", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::Sensitive", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::Resize", "FSC_Droplist::Resize", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::Resize", "", "ParentSizenewSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::SetSelection", "FSC_Droplist::SetSelection", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::SetSelection", "", "selection", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::SetIndex", "FSC_Droplist::SetIndex", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::SetIndex", "", "index", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::SetValues", "FSC_Droplist::SetValues", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::SetValues", "", "CurrentIndextheValues", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::GetIndex", "FSC_Droplist::GetIndex", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetIndex", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::GetSelection", "FSC_Droplist::GetSelection", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetSelection", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::GetValues", "FSC_Droplist::GetValues", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetValues", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::GetUValue", "FSC_Droplist::GetUValue", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetUValue", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::GetID", "FSC_Droplist::GetID", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::CLEANUP", "FSC_Droplist::CLEANUP", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist::INIT", "FSC_Droplist::INIT", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::INIT", "", "debugEvent_FuncEvent_Pro_ExtraFormatIndexSpacesTitleUNameUValueValueparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist__DEFINE", "FSC_Droplist__DEFINE", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist__DEFINE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#FSC_Droplist", "FSC_Droplist", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist", "", "TitleValue_Extraparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#Example_Events", "Example_Events", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "Example_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_droplist.html#Example", "Example", 'routine in <a href="coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "Example", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html", "fsc_droplist.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fsc_droplist.pro", "", "", " NAME:    FSC_DROPLIST   PURPOSE:     The purpose of this compound widget is to provide an alternative    to the DROPLIST widget offered in the IDL distribution. What has    always annoyed me about a droplist is that you can't get the current     value  of a droplist easily. This compound widget makes this and    other tasks much easier.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   CALLING SEQUENCE:     droplistObj = FSC_Droplist(parent, Title='Animals:  , Value=['Dog'. 'Cat', 'Coyote'], Index=2)     The return value of the FSC_Droplist (droplistObj in this example) is    an object reference. Interaction with the droplist will occur through    object methods.   INPUT PARAMETERS:     parent -- The parent widget ID of the compound widget. Required.   INPUT KEYWORDS:   Any keyword that is appropriate for the Widget_Droplist function can be used.  In addition, these keywords are explicitly defined.     EVENT_FUNC -- Set this keyword to the name of an Event Handler Function.    EVENT_PRO -- Set this keyword to the name of an Event Handler Procedure.    FORMAT -- A format specifier for the  format  of the values in the droplist.    INDEX -- The index number of the current selection.    SPACES -- A two-element array that indicates the number of blank spaces to be added              to the the beginning and end of the formatted values. If a single number              is provided, this number of blank spaces is added to both the beginning              and the end of the value.    TITLE -- The title of the droplist widget.    UNAME -- The user name of the droplist widget. (Only available in IDL 5.2 and higher.)    UVALUE -- The normal  user value  of the droplist.    VALUE -- An array of the droplist  selections . May be any data type.   COMMON BLOCKS:     None.   DEPENDENCIES:     Requires ERROR_MESSAGE from the Coyote Library..   EVENT STRUCTURE:     An event is returned each time the droplist value is changed. The event structure    is defined like this:     event = { FSC_DROPLIST_EVENT, $ ; The name of the event structure.              ID: 0L, $             ; The ID of the compound widget's top-level base.              TOP: 0L, $            ; The widget ID of the top-level base of the hierarchy.              HANDLER: 0L, $        ; The event handler ID. Filled out by IDL.              INDEX: 0L, $          ; The index number of the current selection.              SELECTION:Ptr_New() $ ; A pointer to the current selection  value .              SELF:Obj_New() }      ; The object reference of the compound widget.   PUBLIC OBJECT METHODS:     GetID -- A function with no arguments that returns the widget identifier       of the droplist widget.        droplistID = droplistObj-&gt;GetID()     GetIndex -- A function with no arguments that returns the index       number of the current droplist selection.        currentIndex = droplistObj-&gt;GetIndex()     GetSelection -- A function with no arguments that returns the current       droplist selection.        currentSelection = droplistObj-&gt;GetSelection()     GetUValue -- A function with no arguments that returns the  user value        of the compound widget i.e., the value set with the UVALUE keyword).        myUValue = droplistObj-&gt;GetUValue()     GetValues -- A function with no arguments that returns the  values  or        selections  for the droplist.        possibleSelections = droplistObj-&gt;GetValues()     Resize -- A procedure that sets the X screen size of the droplist. It is       defined like this:        PRO Resize, newSize, ParentSize=parentSize        The  newSize  keyword is the new X screen size. If this argument is       missing, the screen X size of the compound widget's parent is used.       The parentSize keyword is an output keyword that returns the X screen       size of the compound widget's parent.        droplistObj-&gt;Resize, 400        Note that not all devices (e.g., X Windows devices) support droplist resizing.     SetIndex -- A procedure that sets the current droplist selection based on       the given index. This is equivalent to Widget_Control, droplistID, Set_Droplist_Select=newIndex        droplistObj-&gt;SetIndex, newIndex     SetSelection -- Whereas a regular droplist widget can only be set by index       number, this compound widget can also be set by a  selection . The new selection       can be any data type and corresponds to one of the  values  of the droplist.        droplistObj-&gt;SetSelection, newSelection     SetValues -- Sets the possible selections of the droplist widget. The CurrentIndex keyword       will allow the current index of the selection to be changed to:        newChoices = ['dog', 'cat', 'coyote']       droplistObj-&gt;SetValues, newChoices, CurrentIndex=2   EXAMPLE:     An example program is provided at the end of the FSC_DROPLIST code. To run it,    type these commands:        IDL&gt; .Compile FSC_DROPLIST       IDL&gt; Example   MODIFICATION HISTORY:     Written by: David W Fanning, 17 Jan 2000. DWF.    Added FORMAT and SPACES keywords 28 April 2000. DWF.    Fixed a small problem with event processing when the EVENT_FUNC keyword       was used. 29 Dec 2000. DWF.    Attached the UNAME value to the TLB of the compound widget instead       of to the droplist widget itself. 11 Jan 2001. DWF.    Fixed a problem when the droplist was part of a modal widget and used the       EVENT_PRO keyword. 27 Oct 2003. DWF.    Added a SetValue method for setting all the values in the droplist at once. 12 Nov 2004. DWF.    Fixed type on line 346/ 6 Feb 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist_Kill_Notify", "FSC_Droplist_Kill_Notify", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist_Kill_Notify", "", "droplistID", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::EventHandler", "FSC_Droplist::EventHandler", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::EventHandler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist_Events", "FSC_Droplist_Events", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::Sensitive", "FSC_Droplist::Sensitive", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::Sensitive", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::Resize", "FSC_Droplist::Resize", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::Resize", "", "ParentSizenewSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::SetSelection", "FSC_Droplist::SetSelection", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::SetSelection", "", "selection", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::SetIndex", "FSC_Droplist::SetIndex", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::SetIndex", "", "index", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::SetValues", "FSC_Droplist::SetValues", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::SetValues", "", "CurrentIndextheValues", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::GetIndex", "FSC_Droplist::GetIndex", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetIndex", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::GetSelection", "FSC_Droplist::GetSelection", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetSelection", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::GetValues", "FSC_Droplist::GetValues", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetValues", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::GetUValue", "FSC_Droplist::GetUValue", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetUValue", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::GetID", "FSC_Droplist::GetID", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::GetID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::CLEANUP", "FSC_Droplist::CLEANUP", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist::INIT", "FSC_Droplist::INIT", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist::INIT", "", "debugEvent_FuncEvent_Pro_ExtraFormatIndexSpacesTitleUNameUValueValueparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist__DEFINE", "FSC_Droplist__DEFINE", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist__DEFINE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#FSC_Droplist", "FSC_Droplist", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "FSC_Droplist", "", "TitleValue_Extraparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#Example_Events", "Example_Events", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "Example_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_droplist.html#Example", "Example", 'routine in <a href="idlastro/coyote/fsc_droplist.html">fsc_droplist.pro</a>', "fsc_droplist.pro", "", "Example", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html", "fsc_field.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fsc_field.pro", "", "", " NAME:    FSC_FIELD   PURPOSE:     The purpose of this compound widget is to provide an alternative    to the CW_FIELD widget offered in the IDL distribution. One weakness    of the CW_FIELD compound widget is that the text widgets do not    look editable to the users on Windows platforms. This program    corrects that deficiency and adds some features that I think    will be helpful. For example, you can now assign an event handler    to the compound widget, ask for positive numbers only, and limit    the number of digits in a number, or the number of digits to the    right of a decimal point. The program is written as a widget object,    which allows the user to call object methods directly, affording    even more flexibility in use. This program replaces the earlier    programs FSC_INPUTFIELD and COYOTE_FIELD.     The program consists of a label widget next to a one-line text widget.    The  value  of the compound widget is shown in the text widget. If the    value is a number, it will not be possible (generally) to type    alphanumeric values in the text widget. String values behave like    strings in any one-line text widget.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   TYPICAL CALLING SEQUENCE:     fieldID = FSC_FIELD(parent, Title= X Size: , Value=256, Object=fieldObject, Digits=3)   INPUT PARAMETERS:     parent -- The parent widget ID of the compound widget. Required.   INPUT KEYWORDS:     COLUMN        Set this keyword to have the Label widget above the Text widget.                  The default is to have the Label widget in a row with the Text widget.     CR_ONLY       Set this keyword if you only want Carriage Return events returned to                  your event handler. If this keyword is not set, all events are returned.                  Setting this keyword has no effect unless either the EVENT_PRO or                  EVENT_FUNC keyword is used.     DECIMAL       Set this keyword to the number of digits to the right of the decimal                  point in floating point or double precision numbers. Ignored for STRING values.     DIGITS        Set this keyword to the number of digits permitted in integer numbers.     EVENT_FUNC    Set this keyword to the name of an event handler function. If this                  keyword is undefined and the Event_Pro keyword is undefined,                  all compound widget events are handled internally and not                  passed on to the parent widget.     EVENT_PRO     Set this keyword to the name of an event handler procedure. If this                  keyword is undefined and the Event_Func keyword is undefined,                  all compound widget events are handled internally and not                  passed on to the parent widget.     FIELDFONT     The font name for the text in the text widget.     FRAME         Set this keyword to put a frame around the compound widget.     FOCUS_EVENTS  Set this keyword to enable event generation for keyboard focus                  events. Ignored unless EVENT_FUNC or EVENT_PRO keywords are specified.     HIGHLIGHT     Set this keyword to highlight the existing text if the widget gain                  the keyboard focus. This keyword MUST be set for tabbing to work naturally                  in IDL 6.2 and higher.     LABEL_LEFT    Set this keyword to align the text on the label to the left.     LABEL_RIGHT   Set this keyword to align the text on the label to the right.     LABELFONT     The font name for the text in the label widget.     LABELSIZE     The X screen size of the label widget.     NAME          A string containing the name of the object. The default is ''.     NOEDIT        Set this keyword to allow no user editing of the input text widget.     NONSENSITIVE  Set this keyword to make the input text widget non-sensitive.     POSITIVE      Set this keyword if you want only positive numbers allowed.     SCR_XSIZE     The X screen size of the compound widget.     SCR_YSIZE     The Y screen size of the compound widget.     TITLE         The string text placed on the label widget.     UNDEFINED     Set this keyword to the value to use for  undefined  values. If                  not set, then !Value.F_NAN is used for numerical fields and a                  NULL string is used for string fields. This applies to values                  obtained with the GET_VALUE method or the GET_VALUE function.     UVALUE        A user value for any purpose.     VALUE         The  value  of the compound widget. Any type of integer, floating, or string                  variable is allowed. The data  type  is determined automatically from the                  value supplied with this keyword. Be sure you set the type appropriately for                  your intended use of the value.     XSIZE         The X size of the text widget in the usual character units.   OUTPUT KEYWORDS:     OBJECT        Set this keyword to a named variable to receive the compound widget's                  object reference. This is required if you wish to call methods on the object.                  Note that the object reference is also available in the event structure                  generated by the widget object. Note that the object reference will be                  necessary if you want to get or set values in the compound widget.   COMMON BLOCKS:     None.   RESTRICTIONS:     Requires DBLTOSTR from the Coyote Library:       http://www.idlcoyote.com/programs/dbltostr.pro   EVENT STRUCTURE:     All events are handled internally unless either the Event_Pro or Event_Func    keywords are used to assign an event handler to the compound widget. By    default all events generated by the text widget are passed to the assigned    event handler. If you wish to receive only Carriage Return events, set the    CR_Only keyword.     event = { FSC_FIELD_EVENT, $   ; The name of the event structure.              ID: 0L, $            ; The ID of the compound widget's top-level base.              TOP: 0L, $           ; The widget ID of the top-level base of the hierarchy.              HANDLER: 0L, $       ; The event handler ID. Filled out by IDL.              OBJECT: Obj_New(), $ ; The  self  object reference. Provided so you can call methods.              VALUE: Ptr_New(), $  ; A pointer to the widget value.              TYPE:                ; A string indicating the type of data in the VALUE field.            }     Note that if the field is  empty , the VALUE will be a pointer    to an undefined variable. You should check this value before you    use it. You code will look something like this:       IF N_Elements(*event.value) EQ 0 THEN $          Print, 'Current Value UNDEFINED.' ELSE $          Print, 'Current Value: ', *event.value   GETTING and SETTING VALUES:     Almost all the properties of the widget can be obtained or set via    the object's GetProperty and SetProperty methods (described below).    Traditional compound widgets have the ability to get and set the  value     of the compound widget identifier (e.g., fieldID in the calling    sequence above). Unfortunately, it is impossible to retreive a variable    in this way when the variable is undefined. In practical terms, this    means that the undefined variable must be set to *something*. You can    determine what that something is with the UNDEFINED keyword, or I will set    it to !VALUES.F_NAN for numerical fields and to the null string for string    fields. In any case, you will have to check for undefined variables before    you try to do something with the value. For a numerical field, the code    might look something like this:        fieldID = FSC_FIELD(parent, Title= X Size: , Value=256, Object=fieldObject, Digits=3)       currentValue = fieldObject-&gt;Get_Value()       IF Finite(currentValue) EQ 0 THEN Print, 'Value is Undefined' ELSE Print, currentValue     Additional examples are provided in the numerical example fields in Example Program below.     Setting the value of the compound widget is the same as calling the Set_Value    method on the object reference. In other words, these two statements are equivalent.          fieldObject-&gt;Set_Value, 45.4         Widget_Control, fieldID, Set_Value=45.4     The data type of the value is determined from the value itself. Be sure you set it appropriately.   OBJECT PROCEDURE METHODS:     GetProperty -- This method allows various properties of the widget to be        returned via output keywords. The keywords that are available are:         CR_Only -- A flag, if set, means only report carriage return events.        DataType -- The data type of the field variable.        Decimal -- Set this keyword to the number of digits to the right of the decimal               point in FLOATVALUE and DOUBLEVALUE numbers.        Digits -- Set this keyword to the number of digits permitted in INTERGERVALUE and LONGVALUE numbers.        Event_Func -- The name of the event handler function.        Event_Pro -- The name of the event handler function.        Has_Focus -- Set to 1 if the text widget currently has the keyboard focus.        Highlight -- The highlight flag.        NoEdit -- The NoEdit flag.        NonSensitive -- The NonSensitive flag.        Undefined -- The  value  of any undefined value.        UValue -- The user value assigned to the compound widget.        Value -- The  value  of the compound widget.      Name -- A scalar string name of the object.     Resize -- This method allows you to resize the compound widget's text field.         The value parameter is an X screen size for the entire widget. The text         widget is sized by using the value obtained from this value minus the         X screen size of the label widget.            objectRef-&gt;Resize, screen_xsize_value     Set_Value -- This method allows you to set the  value  of the field. It takes        one positional parameter, which is the value.            objectRef-&gt;Set_Value, 5     SetProperty -- This method allows various properties of the widget to be        set via input keywords. The keywords that are available are:         CR_Only -- Set this keyword if you only want Carriage Return events.        Decimal -- Set this keyword to the number of digits to the right of the decimal               point in FLOAT and DOUBLE numbers.        Digits -- Set this keyword to the number of digits permitted in INTERGER and LONG numbers.        Event_Func -- Set this keyword to the name of an Event Function.        Event_Pro -- Set this keyword to the name of an Event Procedure.        Highlight -- Set this keyword to highlight the existing text                     when the widget gets the keyboard focus        LabelSize --  The X screen size of the Label Widget.        Name -- A scalar string name of the object. (default = '')        NoEdit -- Set this keyword to make the text widget uneditable        NonSensitive -- Set this keyword to make the widget nonsensitive        Scr_XSize -- The X screen size of the text widget.        Scr_YSize -- The Y screen size of the text widget.        Title -- The text to go on the Label Widget.        UValue -- A user value for any purpose.        Value -- The  value  of the compound widget.        XSize -- The X size of the Text Widget.     SetTabNext -- This method allows you to specify which field to go to when a TAB character       is typed in the text widget. See the Example program below for an example of how to       use this method.   OBJECT FUNCTIONS METHODS:        Get_Value -- Returns the  value  of the field. No parameters. Will be undefined           if a  number  field is blank. Should be checked before using:            IF N_Elements(objectRef-&gt;Get_Value()) NE 0 THEN Print, Value is: ', objectRef-&gt;Get_Value()        GetID -- Returns the widget identifier of the compound widget's top-level base.          (The first child of the parent widget.) No parameters.        GetLabelSize -- Returns the X screen size of the label widget. No parameters.        GetTextID -- Returns the widget identifier of the compound widget's text widget.          No parameters.        GetTextSize -- Returns the X screen size of the text widget. No parameters.   PRIVATE OBJECT METHODS:     Although there is really no such thing as a  private  method in IDL's    object implementation, some methods are used internally and not meant to    be acessed publicly. Here are a few of those methods. I list them because    it may be these private methods are ones you wish to override in subclassed    objects.        MoveTab -- This method moves the focus to the widget identified in the  next  field,         which must be set with the SetTabNext method. No parameters. Called automatically         when a TAB character is typed in the text widget.        Text_Events -- The main event handler method for the compound widget. All         text widget events are processed here.        ReturnValue -- This function method accepts a string input value and converts         it to the type of data requested by the user.        Validate -- This function method examines all text input and removes unwanted         characters, depending upon the requested data type for the field. It makes it         impossible, for example, to type alphanumeric characters in an INTEGER field.   EXAMPLE:     An example program is provided at the end of the FSC_FIELD code. To run it,    type these commands:        IDL&gt; .Compile FSC_Field       IDL&gt; Example   MODIFICATION HISTORY:     Written by: David W. Fanning, 18 October 2000. Based heavily on an earlier       FSC_INPUTFIELD program and new ideas about the best way to write       widget objects.    Added LABEL_LEFT, LABEL_RIGHT, and UNDEFINED keywords. 29 Dec 2000. DWF.    Modified the way the value is returned in the GET_VALUE method and the       GET_VALUE function. Modified Example program to demonstrate. 30 Dec 2000. DWF.    Added NOEDIT and NONSENSITIVE keywords, with corresponding SETEDIT and SETSENNSITIVE       methods. 19 Jan 2001. DWF.    Actually followed through with the changes I _said_  I made 29 Dec 2000. (Don't ask....) 13 June 2001. DWF.    Added GetTextSize and GetLabelSize methods for obtaining the X screen       size of the text and label widgets, respectively. 21 July 2001. DWF.    Fixed a problem in SetProperty method where I was setting self.xsize, which doesn't exist. 24 April 2002. DWF.    Small modification to the SetEdit method. 6 August 2003. DWF.    Added Highlight keyword. Ported Focus_Events keyword from       fsc_inputfield.pro. Updated documentation. 17 November       2004. DWF and Benjamin Hornberger    Added Has_Focus keyword to the GetProperty method. 18 November       2004. Benjamin Hornberger    Fixed bug in GetProperty method (set value to *self.undefined if       *self.value is undefined. 24 Feb 2004. Benjamin Hornberger    Modified FOCUS_EVENTS keyword handling so that *all* focus events are now       passed to specified event handlers. Check event.select to see if the       widget is gaining or losing focus. 10 August 2005. DWF.    Added new tabbing functionality, introduced in IDL 6.2. To use tabbing       functionality natually, the HIGHTLIGHT keywords must be set.       See included EXAMPLE program for details. 10 August 2005. DWF.    Added functionality to covert double precision values to strings properly. 30 Nov 2005. DWF.    Set the default fonts to be the current widget font, rather than the default widget font. 4 Oct 2008. DWF.    Fixed a problem with validating a float or double value when it was written with       exponential notation. 2 April 2010. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field_WidgetFont", "FSC_Field_WidgetFont", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_WidgetFont", "", "DEFAULT", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field_Error_Message", "FSC_Field_Error_Message", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Error_Message", "", "TracebackNoName_ExtratheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::GetLabelSize", "FSC_Field::GetLabelSize", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetLabelSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::GetTextSize", "FSC_Field::GetTextSize", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetTextSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::MoveTab", "FSC_Field::MoveTab", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::MoveTab", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::SetTabNext", "FSC_Field::SetTabNext", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::SetTabNext", "", "nextID", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::GetTextID", "FSC_Field::GetTextID", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetTextID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::Resize", "FSC_Field::Resize", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Resize", "", "newsize", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::GetID", "FSC_Field::GetID", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::Geometry", "FSC_Field::Geometry", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Geometry", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::Get_Value", "FSC_Field::Get_Value", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Get_Value", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::Set_Value", "FSC_Field::Set_Value", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Set_Value", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::Validate", "FSC_Field::Validate", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Validate", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::ReturnValue", "FSC_Field::ReturnValue", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::ReturnValue", "", "inputValue", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::TextEvents", "FSC_Field::TextEvents", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::TextEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::GetProperty", "FSC_Field::GetProperty", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetProperty", "", "CR_OnlyDataTypeDecimalDigitsEvent_FuncEvent_ProFocus_EventsHas_FocusHighlightNameNoEditNonSensitiveUndefinedUValueValue", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::SetProperty", "FSC_Field::SetProperty", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::SetProperty", "", "CR_OnlyDecimalDigitsEvent_FuncEvent_ProFocus_EventsHighlightLabelSizeNameNoEditNonSensitiveScr_XSizeScr_YSizeTitleUndefinedUValueValueXSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::SetEdit", "FSC_Field::SetEdit", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::SetEdit", "", "editvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::SetSensitive", "FSC_Field::SetSensitive", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::SetSensitive", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::INIT", "FSC_Field::INIT", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::INIT", "", "ColumnCR_OnlyDecimalDigitsEvent_FuncEvent_Pro_ExtraFieldFontFocus_EventsFrameHighlightLabel_LeftLabel_RightLabelFontLabelSizeNameNoEditNonSensitivePositiveScr_XSizeScr_YSizeTitleUndefinedUValueValueXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field::CLEANUP", "FSC_Field::CLEANUP", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field_Event_Handler", "FSC_Field_Event_Handler", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Event_Handler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field_Event__Define", "FSC_Field_Event__Define", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Event__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field_Set_Compound_Widget_Value", "FSC_Field_Set_Compound_Widget_Value", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Set_Compound_Widget_Value", "", "tlbvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field_Get_Compound_Widget_Value", "FSC_Field_Get_Compound_Widget_Value", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Get_Compound_Widget_Value", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field_Kill_Notify", "FSC_Field_Kill_Notify", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Kill_Notify", "", "textID", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_Field__Define", "FSC_Field__Define", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#FSC_FIELD", "FSC_FIELD", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_FIELD", "", "ColumnCR_OnlyDecimalDigitsEvent_FuncEvent_Pro_ExtraFieldFontFocus_EventsFrameHighlightLabel_LeftLabel_RightLabelFontLabelSizeNameNoEditNonSensitiveObjectPositiveScr_XSizeScr_YSizeTitleUndefinedUValueValueXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#Example_Event", "Example_Event", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "Example_Event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_field.html#Example", "Example", 'routine in <a href="idlastro/coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "Example", "", "field1field2field3", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsc_field.html", "fsc_field.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsc_field.pro", "", "", " NAME:    FSC_FIELD   PURPOSE:     The purpose of this compound widget is to provide an alternative    to the CW_FIELD widget offered in the IDL distribution. One weakness    of the CW_FIELD compound widget is that the text widgets do not    look editable to the users on Windows platforms. This program    corrects that deficiency and adds some features that I think    will be helpful. For example, you can now assign an event handler    to the compound widget, ask for positive numbers only, and limit    the number of digits in a number, or the number of digits to the    right of a decimal point. The program is written as a widget object,    which allows the user to call object methods directly, affording    even more flexibility in use. This program replaces the earlier    programs FSC_INPUTFIELD and COYOTE_FIELD.     The program consists of a label widget next to a one-line text widget.    The  value  of the compound widget is shown in the text widget. If the    value is a number, it will not be possible (generally) to type    alphanumeric values in the text widget. String values behave like    strings in any one-line text widget.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   TYPICAL CALLING SEQUENCE:     fieldID = FSC_FIELD(parent, Title= X Size: , Value=256, Object=fieldObject, Digits=3)   INPUT PARAMETERS:     parent -- The parent widget ID of the compound widget. Required.   INPUT KEYWORDS:     COLUMN        Set this keyword to have the Label widget above the Text widget.                  The default is to have the Label widget in a row with the Text widget.     CR_ONLY       Set this keyword if you only want Carriage Return events returned to                  your event handler. If this keyword is not set, all events are returned.                  Setting this keyword has no effect unless either the EVENT_PRO or                  EVENT_FUNC keyword is used.     DECIMAL       Set this keyword to the number of digits to the right of the decimal                  point in floating point or double precision numbers. Ignored for STRING values.     DIGITS        Set this keyword to the number of digits permitted in integer numbers.     EVENT_FUNC    Set this keyword to the name of an event handler function. If this                  keyword is undefined and the Event_Pro keyword is undefined,                  all compound widget events are handled internally and not                  passed on to the parent widget.     EVENT_PRO     Set this keyword to the name of an event handler procedure. If this                  keyword is undefined and the Event_Func keyword is undefined,                  all compound widget events are handled internally and not                  passed on to the parent widget.     FIELDFONT     The font name for the text in the text widget.     FRAME         Set this keyword to put a frame around the compound widget.     FOCUS_EVENTS  Set this keyword to enable event generation for keyboard focus                  events. Ignored unless EVENT_FUNC or EVENT_PRO keywords are specified.     HIGHLIGHT     Set this keyword to highlight the existing text if the widget gain                  the keyboard focus. This keyword MUST be set for tabbing to work naturally                  in IDL 6.2 and higher.     LABEL_LEFT    Set this keyword to align the text on the label to the left.     LABEL_RIGHT   Set this keyword to align the text on the label to the right.     LABELFONT     The font name for the text in the label widget.     LABELSIZE     The X screen size of the label widget.     NAME          A string containing the name of the object. The default is ''.     NOEDIT        Set this keyword to allow no user editing of the input text widget.     NONSENSITIVE  Set this keyword to make the input text widget non-sensitive.     POSITIVE      Set this keyword if you want only positive numbers allowed.     SCR_XSIZE     The X screen size of the compound widget.     SCR_YSIZE     The Y screen size of the compound widget.     TITLE         The string text placed on the label widget.     UNDEFINED     Set this keyword to the value to use for  undefined  values. If                  not set, then !Value.F_NAN is used for numerical fields and a                  NULL string is used for string fields. This applies to values                  obtained with the GET_VALUE method or the GET_VALUE function.     UVALUE        A user value for any purpose.     VALUE         The  value  of the compound widget. Any type of integer, floating, or string                  variable is allowed. The data  type  is determined automatically from the                  value supplied with this keyword. Be sure you set the type appropriately for                  your intended use of the value.     XSIZE         The X size of the text widget in the usual character units.   OUTPUT KEYWORDS:     OBJECT        Set this keyword to a named variable to receive the compound widget's                  object reference. This is required if you wish to call methods on the object.                  Note that the object reference is also available in the event structure                  generated by the widget object. Note that the object reference will be                  necessary if you want to get or set values in the compound widget.   COMMON BLOCKS:     None.   RESTRICTIONS:     Requires cgDblToStr from the Coyote Library:       http://www.idlcoyote.com/programs/cgdbltostr.pro   EVENT STRUCTURE:     All events are handled internally unless either the Event_Pro or Event_Func    keywords are used to assign an event handler to the compound widget. By    default all events generated by the text widget are passed to the assigned    event handler. If you wish to receive only Carriage Return events, set the    CR_Only keyword.     event = { FSC_FIELD_EVENT, $   ; The name of the event structure.              ID: 0L, $            ; The ID of the compound widget's top-level base.              TOP: 0L, $           ; The widget ID of the top-level base of the hierarchy.              HANDLER: 0L, $       ; The event handler ID. Filled out by IDL.              OBJECT: Obj_New(), $ ; The  self  object reference. Provided so you can call methods.              VALUE: Ptr_New(), $  ; A pointer to the widget value.              TYPE:                ; A string indicating the type of data in the VALUE field.            }     Note that if the field is  empty , the VALUE will be a pointer    to an undefined variable. You should check this value before you    use it. You code will look something like this:       IF N_Elements(*event.value) EQ 0 THEN $          Print, 'Current Value UNDEFINED.' ELSE $          Print, 'Current Value: ', *event.value   GETTING and SETTING VALUES:     Almost all the properties of the widget can be obtained or set via    the object's GetProperty and SetProperty methods (described below).    Traditional compound widgets have the ability to get and set the  value     of the compound widget identifier (e.g., fieldID in the calling    sequence above). Unfortunately, it is impossible to retreive a variable    in this way when the variable is undefined. In practical terms, this    means that the undefined variable must be set to *something*. You can    determine what that something is with the UNDEFINED keyword, or I will set    it to !VALUES.F_NAN for numerical fields and to the null string for string    fields. In any case, you will have to check for undefined variables before    you try to do something with the value. For a numerical field, the code    might look something like this:        fieldID = FSC_FIELD(parent, Title= X Size: , Value=256, Object=fieldObject, Digits=3)       currentValue = fieldObject-&gt;Get_Value()       IF Finite(currentValue) EQ 0 THEN Print, 'Value is Undefined' ELSE Print, currentValue     Additional examples are provided in the numerical example fields in Example Program below.     Setting the value of the compound widget is the same as calling the Set_Value    method on the object reference. In other words, these two statements are equivalent.          fieldObject-&gt;Set_Value, 45.4         Widget_Control, fieldID, Set_Value=45.4     The data type of the value is determined from the value itself. Be sure you set it appropriately.   OBJECT PROCEDURE METHODS:     GetProperty -- This method allows various properties of the widget to be        returned via output keywords. The keywords that are available are:         CR_Only -- A flag, if set, means only report carriage return events.        DataType -- The data type of the field variable.        Decimal -- Set this keyword to the number of digits to the right of the decimal               point in FLOATVALUE and DOUBLEVALUE numbers.        Digits -- Set this keyword to the number of digits permitted in INTERGERVALUE and LONGVALUE numbers.        Event_Func -- The name of the event handler function.        Event_Pro -- The name of the event handler function.        Has_Focus -- Set to 1 if the text widget currently has the keyboard focus.        Highlight -- The highlight flag.        NoEdit -- The NoEdit flag.        NonSensitive -- The NonSensitive flag.        Undefined -- The  value  of any undefined value.        UValue -- The user value assigned to the compound widget.        Value -- The  value  of the compound widget.      Name -- A scalar string name of the object.     Resize -- This method allows you to resize the compound widget's text field.         The value parameter is an X screen size for the entire widget. The text         widget is sized by using the value obtained from this value minus the         X screen size of the label widget.            objectRef-&gt;Resize, screen_xsize_value     Set_Value -- This method allows you to set the  value  of the field. It takes        one positional parameter, which is the value.            objectRef-&gt;Set_Value, 5     SetProperty -- This method allows various properties of the widget to be        set via input keywords. The keywords that are available are:         CR_Only -- Set this keyword if you only want Carriage Return events.        Decimal -- Set this keyword to the number of digits to the right of the decimal               point in FLOAT and DOUBLE numbers.        Digits -- Set this keyword to the number of digits permitted in INTERGER and LONG numbers.        Event_Func -- Set this keyword to the name of an Event Function.        Event_Pro -- Set this keyword to the name of an Event Procedure.        Highlight -- Set this keyword to highlight the existing text                     when the widget gets the keyboard focus        LabelSize --  The X screen size of the Label Widget.        Name -- A scalar string name of the object. (default = '')        NoEdit -- Set this keyword to make the text widget uneditable        NonSensitive -- Set this keyword to make the widget nonsensitive        Scr_XSize -- The X screen size of the text widget.        Scr_YSize -- The Y screen size of the text widget.        Title -- The text to go on the Label Widget.        UValue -- A user value for any purpose.        Value -- The  value  of the compound widget.        XSize -- The X size of the Text Widget.     SetTabNext -- This method allows you to specify which field to go to when a TAB character       is typed in the text widget. See the Example program below for an example of how to       use this method.   OBJECT FUNCTIONS METHODS:        Get_Value -- Returns the  value  of the field. No parameters. Will be undefined           if a  number  field is blank. Should be checked before using:            IF N_Elements(objectRef-&gt;Get_Value()) NE 0 THEN Print, Value is: ', objectRef-&gt;Get_Value()        GetID -- Returns the widget identifier of the compound widget's top-level base.          (The first child of the parent widget.) No parameters.        GetLabelSize -- Returns the X screen size of the label widget. No parameters.        GetTextID -- Returns the widget identifier of the compound widget's text widget.          No parameters.        GetTextSize -- Returns the X screen size of the text widget. No parameters.   PRIVATE OBJECT METHODS:     Although there is really no such thing as a  private  method in IDL's    object implementation, some methods are used internally and not meant to    be acessed publicly. Here are a few of those methods. I list them because    it may be these private methods are ones you wish to override in subclassed    objects.        MoveTab -- This method moves the focus to the widget identified in the  next  field,         which must be set with the SetTabNext method. No parameters. Called automatically         when a TAB character is typed in the text widget.        Text_Events -- The main event handler method for the compound widget. All         text widget events are processed here.        ReturnValue -- This function method accepts a string input value and converts         it to the type of data requested by the user.        Validate -- This function method examines all text input and removes unwanted         characters, depending upon the requested data type for the field. It makes it         impossible, for example, to type alphanumeric characters in an INTEGER field.   EXAMPLE:     An example program is provided at the end of the FSC_FIELD code. To run it,    type these commands:        IDL&gt; .Compile FSC_Field       IDL&gt; Example   MODIFICATION HISTORY:     Written by: David W. Fanning, 18 October 2000. Based heavily on an earlier       FSC_INPUTFIELD program and new ideas about the best way to write       widget objects.    Added LABEL_LEFT, LABEL_RIGHT, and UNDEFINED keywords. 29 Dec 2000. DWF.    Modified the way the value is returned in the GET_VALUE method and the       GET_VALUE function. Modified Example program to demonstrate. 30 Dec 2000. DWF.    Added NOEDIT and NONSENSITIVE keywords, with corresponding SETEDIT and SETSENNSITIVE       methods. 19 Jan 2001. DWF.    Actually followed through with the changes I _said_  I made 29 Dec 2000. (Don't ask....) 13 June 2001. DWF.    Added GetTextSize and GetLabelSize methods for obtaining the X screen       size of the text and label widgets, respectively. 21 July 2001. DWF.    Fixed a problem in SetProperty method where I was setting self.xsize, which doesn't exist. 24 April 2002. DWF.    Small modification to the SetEdit method. 6 August 2003. DWF.    Added Highlight keyword. Ported Focus_Events keyword from       fsc_inputfield.pro. Updated documentation. 17 November       2004. DWF and Benjamin Hornberger    Added Has_Focus keyword to the GetProperty method. 18 November       2004. Benjamin Hornberger    Fixed bug in GetProperty method (set value to *self.undefined if       *self.value is undefined. 24 Feb 2004. Benjamin Hornberger    Modified FOCUS_EVENTS keyword handling so that *all* focus events are now       passed to specified event handlers. Check event.select to see if the       widget is gaining or losing focus. 10 August 2005. DWF.    Added new tabbing functionality, introduced in IDL 6.2. To use tabbing       functionality natually, the HIGHTLIGHT keywords must be set.       See included EXAMPLE program for details. 10 August 2005. DWF.    Added functionality to covert double precision values to strings properly. 30 Nov 2005. DWF.    Set the default fonts to be the current widget font, rather than the default widget font. 4 Oct 2008. DWF.    Fixed a problem with validating a float or double value when it was written with       exponential notation. 2 April 2010. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field_WidgetFont", "FSC_Field_WidgetFont", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_WidgetFont", "", "DEFAULT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field_Error_Message", "FSC_Field_Error_Message", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Error_Message", "", "TracebackNoName_ExtratheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::GetLabelSize", "FSC_Field::GetLabelSize", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetLabelSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::GetTextSize", "FSC_Field::GetTextSize", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetTextSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::MoveTab", "FSC_Field::MoveTab", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::MoveTab", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::SetTabNext", "FSC_Field::SetTabNext", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::SetTabNext", "", "nextID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::GetTextID", "FSC_Field::GetTextID", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetTextID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::Resize", "FSC_Field::Resize", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Resize", "", "newsize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::GetID", "FSC_Field::GetID", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::Geometry", "FSC_Field::Geometry", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Geometry", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::Get_Value", "FSC_Field::Get_Value", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Get_Value", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::Set_Value", "FSC_Field::Set_Value", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Set_Value", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::Validate", "FSC_Field::Validate", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::Validate", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::ReturnValue", "FSC_Field::ReturnValue", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::ReturnValue", "", "inputValue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::TextEvents", "FSC_Field::TextEvents", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::TextEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::GetProperty", "FSC_Field::GetProperty", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::GetProperty", "", "CR_OnlyDataTypeDecimalDigitsEvent_FuncEvent_ProFocus_EventsHas_FocusHighlightNameNoEditNonSensitiveUndefinedUValueValue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::SetProperty", "FSC_Field::SetProperty", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::SetProperty", "", "CR_OnlyDecimalDigitsEvent_FuncEvent_ProFocus_EventsHighlightLabelSizeNameNoEditNonSensitiveScr_XSizeScr_YSizeTitleUndefinedUValueValueXSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::SetEdit", "FSC_Field::SetEdit", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::SetEdit", "", "editvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::SetSensitive", "FSC_Field::SetSensitive", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::SetSensitive", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::INIT", "FSC_Field::INIT", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::INIT", "", "ColumnCR_OnlyDecimalDigitsEvent_FuncEvent_Pro_ExtraFieldFontFocus_EventsFrameHighlightLabel_LeftLabel_RightLabelFontLabelSizeNameNoEditNonSensitivePositiveScr_XSizeScr_YSizeTitleUndefinedUValueValueXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field::CLEANUP", "FSC_Field::CLEANUP", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field_Event_Handler", "FSC_Field_Event_Handler", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Event_Handler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field_Event__Define", "FSC_Field_Event__Define", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Event__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field_Set_Compound_Widget_Value", "FSC_Field_Set_Compound_Widget_Value", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Set_Compound_Widget_Value", "", "tlbvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field_Get_Compound_Widget_Value", "FSC_Field_Get_Compound_Widget_Value", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Get_Compound_Widget_Value", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field_Kill_Notify", "FSC_Field_Kill_Notify", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field_Kill_Notify", "", "textID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_Field__Define", "FSC_Field__Define", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_Field__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#FSC_FIELD", "FSC_FIELD", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "FSC_FIELD", "", "ColumnCR_OnlyDecimalDigitsEvent_FuncEvent_Pro_ExtraFieldFontFocus_EventsFrameHighlightLabel_LeftLabel_RightLabelFontLabelSizeNameNoEditNonSensitiveObjectPositiveScr_XSizeScr_YSizeTitleUndefinedUValueValueXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#Example_Event", "Example_Event", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "Example_Event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_field.html#Example", "Example", 'routine in <a href="coyote/fsc_field.html">fsc_field.pro</a>', "fsc_field.pro", "", "Example", "", "field1field2field3", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html", "fsc_fileselect.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsc_fileselect.pro", "", "", " NAME:    FSC_FILESELECT   PURPOSE:     The purpose of this compound widget is to provide a means    by which the user can type or select a file name. The    program is written as an  object widget , meaning that    the guts of the program is an object of class FSC_FILESELECT.    This is meant to be an example of the obvious advantages of    writing compound widget programs as objects.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   CALLING SEQUENCE:     filenameID = FSC_FileSelect(parent)   INPUT PARAMETERS:     parent -- The parent widget ID of the compound widget. Required.   INPUT KEYWORDS:     Event_Pro -- The event handler procedure for this compound widget.By default:   .    Event_Func -- The event handler function for this compound widget. By default:   .        If neither EVENT_PRO or EVENT_FUNC is defined, program events are handled internally by the compound widget.     DirectoryName -- The initial name of the directory. By defaut: current directory.    Filename -- The initial file name in the filename text widget.    Filter -- The file filter. By default:  * .    Frame -- Set this keyword for a frame around the compound widget.    LabelFont -- The font for the label widget. By default:   .    LabelName -- The text on the label widgt. By default:  Filename:  .    LabelSize -- The X screen size of the label widget. By default: 0.    MustExist -- A flag that indicates selected files must exist. By default: 0.    NoMaxSize -- A flag to prohibit automatic text widget sizing. By default: 0.       If this keyword is not set, the compound widget will automatically resize itself to      the largest widget in its parent base widget. It will do this by changing the size of      the text widgets holding the file and directory names.     Read -- Set this keyword to have file selection for reading a file. By default: 1.    SelectDirectory -- The default directory for file selection. In other words, this is the      default directory for DIALOG_PICKFILE, which is accessed via the BROWSE buttons.    SelectFont -- The font for the  Browse  button. By default:   .    SelectTitle -- The title bar text on the file selection dialog. By default:  Select a File... .    TextFont -- The font for the filename text widget. By default:   .    UValue -- User value for any purpose.    Write -- Set this keyword to open a file for writing. By default: 0.    XSize -- The X size of the text widget holding the filename. By default: StrLen(filename) * 1.5 &gt; 40.   OUTPUT KEYWORDS:     ObjectRef -- Assign this keyword to an output variable that will hold the internal object reference.                 With the object reference you can call object methods to easily change many properties of                 the compound widget.   COMMON BLOCKS:     None.   RESTRICTIONS:     Requires the folling files from the Coyote Library:        http://www.idlcoyote.com/programs/error_message.pro   EVENT STRUCTURE:     All events are handled internally unless either the Event_Pro or Event_Func    keywords are used to assign an event handler to the compound widget. All events    generated by the text widgets are passed to the assigned event handler.     event = { CW_FILESELECT, $     ; The name of the event structure.              ID: 0L, $            ; The ID of the compound widget's top-level base.              TOP: 0L, $           ; The widget ID of the top-level base of the hierarchy.              HANDLER: 0L, $       ; The event handler ID. Filled out by IDL.              Basename:   , $      ; The base filename without directory specifiers.              Filename:   , $      ; The fully qualified filename.              Directory:   , $     ; The name of the current file directory.            }   EXAMPLE:     An example program is provided at the end of the FSC_FILESELECT code. To run it,    type these commands:        IDL&gt; .Compile fsc_fileselect       IDL&gt; Example     Or, if you want to obtain the object reference, type this:        IDL&gt; Example, theObject     Now you can call the object's methods. For example:        IDL theObject-&gt;SetProperty, XSize=150   GETTING and SETTING VALUES:     So as not to disrupt the accepted paradigm in using compound widgets, you    can use the return value of the FSC_FILESELECT function with WIDGET_CONTROL to    get and set the  value  of the widget.         Widget_Control, filenameID, Set_Value='C:\RSI\IDL52\DATA\cyclone.dat'     The program will automatically separate the file name portion of the value    from the directory portion and put things in the correct text widgets.     Similarly, you can get the  value  of the widget:         Widget_Control, filenameID, Get_Value=theValue        Print, theValue             C:\RSI\IDL52\DATA\cyclone.dat     The return value is the fully qualified file path to the file.   USING OBJECT METHODS to CHANGE PROGRAM PROPERTIES:     If you obtain the object reference, you have a great deal more control    over the properties of the compound widget. You obtain the object reference    by calling the function like this:        filenameID = FSC_FILESELECT(parent, ObjectRef=theObject)   OBJECT PROCEDURE METHODS:     GetProperty -- This method allows various properties of the widget to be        returned via output keywords. The keywords that are available are:        DirectoryName -- The current directory.       Event_Func -- The name of the event handler function for this compound widget.       Event_Pro -- The name of the event handler procedure for this compound widget.       Filename -- The current base filename.       Filter -- The current file filter.       LabelName -- The text on the label widget.       LabelSize -- The X screen size of the label widget.       MustExist -- A flag that indicates selected files must exist to be selected.       Parent -- The parent widget of the compound widget.       Read=read -- The file selection for reading flag.       SelectTitle -- The title bar text on the file selection dialog.       TLB -- The top-level base of the compound widget.       UValue -- The user value of the compound widget.       Write -- The file selection for writing flag.       XSize -- The X size of the text widget holding the filename.     LabelSize -- This method makes sure that the directory name and file name labels       are the same size. Normally, this procedure is called internally. No parameters.     MatchSize -- This method resizes the compound widget so that it is as long as the       the longest widget in the parent base widget. This is done automatically upon       realization unless the NOMAXSIZE keyword is set. The method aids in writing       resizeable widget programs.     SetProperty -- This method allows various properties of the widget to be        set via input keywords. The keywords that are available are:        DirectoryName -- The current directory.       Event_Func -- The name of the event handler function for this compound widget.       Event_Pro -- The name of the event handler procedure for this compound widget.       Filename -- The current base filename.       Filter -- The current file filter.       LabelName -- The text on the label widget.       LabelSize -- The X screen size of the label widget.       MustExist -- A flag that indicates selected files must exist to be selected.       Read -- The file selection for reading flag.       SelectTitle -- The title bar text on the file selection dialog.       UValue -- The user value of the compound widget.       Write -- The file selection for writing flag.       XSize -- The X size of the text widget holding the filename.     TextSelect - Allows you to create a selection in filename text widget. See the                 documentation for the SET_TEXT_SELECT keyword to Widget_Control.        selection -- A two-element array containing the starting position and selection length.   OBJECT FUNCTION METHODS:        GetFileName -- Returns the fully qualified filename. No parameters.        GetTLB -- Returns the top-level base ID of the compound widget. No Parameters.        Inspect_DirectoryName -- Inspects the directory name for correctness. Requires one positional parameter.          directoryName -- The name of the directory from the directory text widget.         textSelection -- The current text selection position.          At the moment all this does is remove any blank characters from either         end of the directory name and makes sure the last character of the directory         name does not end in a subdirectory specifier (except for VMS).       Inspect_Filename -- Inspects the file name for correctness. Requires one positional parameter.          filename -- The name of the file from the filename text widget.         textSelection -- The current text selection position.          At the moment all this does is remove any blank characters from either         end of the file name   MODIFICATION HISTORY:     Written by: David W. Fanning, 21 NOV 1999.    Fixed bug in File Name selection button. 18 MAR 2000. DWF.    Fixed an error in which directory the Browse buttons should start        searching. 29 SEP 2000. DWF.    Previously returned events only for typing in text widgets. Now        Browse button events are also returned. 29 SEP 2000. DWF.    Fixed a bug in setting the file filter. 29 SEP 2000. DWF.    Removed the Directory Browse button 10 AUG 2002. DWF.    Added ERROR_MESSAGE to error handling. 10 AUG 2002. DWF.    Changed the ability to specify a file filter as a string array, instead        of just as a scalar string. This required the use of a pointer, which        meant that I had to remove the FILTER field from the CW_FILESELECT        event structure to avoid likely memory leakage. This is a dangerous        change because it means programs that relied on this (I expect there        are very, very few) will break and it goes against my philosopy of        keeping my programs backward compatible. Let me know if you have        problems. In testing, I discoved no problems in my own code. 31 OCT 2002. DWF.    Fixed a problem with DIALOG_PICKFILE that sometimes allowed users to change        directories without selecting a file. 3 Nov 2002. DWF.    Fixed a problem with widget resizing with the help of Bob Portman that had plagued        me from the beginning. Thanks, Bob! 5 August 2003. DWF    Added TEXTSELECT method. 5 Aug 2003. DWF.    Had to add FORWARD_FUNCTION statement to get error handler compiled when using        DIRECTORY keyword. 24 Nov 2003. DWF.    Fixed a problem with too many events going to an event handler specified with        the EVENT_PRO or EVENT_FUNC keyword from the text widget. Now only Carriage        Return events are passed on to the user-specified event handler. 8 July 2004. DWF.    Replace all  \  characters with  /  characters in directory names. 8 Januay 2006. DWF.    Set the default fonts to be the current widget font, rather than the default widget font. 4 Oct 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_Fileselect_WidgetFont", "FSC_Fileselect_WidgetFont", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_Fileselect_WidgetFont", "", "DEFAULT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::Directory_Events", "FSC_FileSelect::Directory_Events", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Directory_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::Filename_Events", "FSC_FileSelect::Filename_Events", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Filename_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::GetFilename", "FSC_FileSelect::GetFilename", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::GetFilename", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::GetNoMaxSize", "FSC_FileSelect::GetNoMaxSize", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::GetNoMaxSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::GetProperty", "FSC_FileSelect::GetProperty", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::GetProperty", "", "DirectoryNameEvent_FuncEvent_ProFilenameFilterLabelNameLabelSizeMustExistParentReadSelectTitleTLBUValueWriteXSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::GetTLB", "FSC_FileSelect::GetTLB", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::GetTLB", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::Inspect_DirectoryName", "FSC_FileSelect::Inspect_DirectoryName", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Inspect_DirectoryName", "", "dirnametextSelection", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::Inspect_Filename", "FSC_FileSelect::Inspect_Filename", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Inspect_Filename", "", "filenametextSelection", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::LabelSize", "FSC_FileSelect::LabelSize", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::LabelSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::MatchSize", "FSC_FileSelect::MatchSize", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::MatchSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect_RStrPos", "FSC_FileSelect_RStrPos", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_RStrPos", "", "ExprSubStrPos", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::Select_File", "FSC_FileSelect::Select_File", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Select_File", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::SetFilename", "FSC_FileSelect::SetFilename", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::SetFilename", "", "theName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::SetProperty", "FSC_FileSelect::SetProperty", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::SetProperty", "", "DirectoryNameEvent_FuncEvent_ProFilenameFilterLabelNameLabelSizeMustExistReadSelectTitleUValueWriteXSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::TextSelect", "FSC_FileSelect::TextSelect", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::TextSelect", "", "selection", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::CLEANUP", "FSC_FileSelect::CLEANUP", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect::INIT", "FSC_FileSelect::INIT", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::INIT", "", "DirectoryNameEvent_ProEvent_FuncFilenameFilterFrameLabelFontLabelNameLabelSizeMustExistNoMaxSizeReadScr_XSizeSelectFontSelectdirSelectTitleTextFontUValueWriteXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect__Define", "FSC_FileSelect__Define", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect_Set_Value", "FSC_FileSelect_Set_Value", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Set_Value", "", "idfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect_Get_Value", "FSC_FileSelect_Get_Value", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Get_Value", "", "id", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#CW_FileSelect__Define", "CW_FileSelect__Define", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "CW_FileSelect__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect_Event_Handler", "FSC_FileSelect_Event_Handler", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Event_Handler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect_Notify_Realize", "FSC_FileSelect_Notify_Realize", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Notify_Realize", "", "labelID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect_Kill_Notify", "FSC_FileSelect_Kill_Notify", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Kill_Notify", "", "labelID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#FSC_FileSelect", "FSC_FileSelect", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect", "", "Event_ProEvent_FuncDirectoryNameFilenameFilterFrameLabelFontLabelNameLabelSizeMustExistNoMaxSizeObjectRefReadSelectDirectorySelectFontSelectTitleTextFontUValueWriteXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#Example_Set_Size", "Example_Set_Size", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Set_Size", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#Example_Set_Filter", "Example_Set_Filter", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Set_Filter", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#Example_Set_Filename", "Example_Set_Filename", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Set_Filename", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#Example_Shrink", "Example_Shrink", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Shrink", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#Example_Print_Filename", "Example_Print_Filename", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Print_Filename", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#Example_Quit", "Example_Quit", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Quit", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_fileselect.html#Example", "Example", 'routine in <a href="coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example", "", "theObject", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html", "fsc_fileselect.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fsc_fileselect.pro", "", "", " NAME:    FSC_FILESELECT   PURPOSE:     The purpose of this compound widget is to provide a means    by which the user can type or select a file name. The    program is written as an  object widget , meaning that    the guts of the program is an object of class FSC_FILESELECT.    This is meant to be an example of the obvious advantages of    writing compound widget programs as objects.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   CALLING SEQUENCE:     filenameID = FSC_FileSelect(parent)   INPUT PARAMETERS:     parent -- The parent widget ID of the compound widget. Required.   INPUT KEYWORDS:     Event_Pro -- The event handler procedure for this compound widget.By default:   .    Event_Func -- The event handler function for this compound widget. By default:   .        If neither EVENT_PRO or EVENT_FUNC is defined, program events are handled internally by the compound widget.     DirectoryName -- The initial name of the directory. By defaut: current directory.    Filename -- The initial file name in the filename text widget.    Filter -- The file filter. By default:  * .    Frame -- Set this keyword for a frame around the compound widget.    LabelFont -- The font for the label widget. By default:   .    LabelName -- The text on the label widgt. By default:  Filename:  .    LabelSize -- The X screen size of the label widget. By default: 0.    MustExist -- A flag that indicates selected files must exist. By default: 0.    NoMaxSize -- A flag to prohibit automatic text widget sizing. By default: 0.       If this keyword is not set, the compound widget will automatically resize itself to      the largest widget in its parent base widget. It will do this by changing the size of      the text widgets holding the file and directory names.     Read -- Set this keyword to have file selection for reading a file. By default: 1.    SelectDirectory -- The default directory for file selection. In other words, this is the      default directory for DIALOG_PICKFILE, which is accessed via the BROWSE buttons.    SelectFont -- The font for the  Browse  button. By default:   .    SelectTitle -- The title bar text on the file selection dialog. By default:  Select a File... .    TextFont -- The font for the filename text widget. By default:   .    UValue -- User value for any purpose.    Write -- Set this keyword to open a file for writing. By default: 0.    XSize -- The X size of the text widget holding the filename. By default: StrLen(filename) * 1.5 &gt; 40.   OUTPUT KEYWORDS:     ObjectRef -- Assign this keyword to an output variable that will hold the internal object reference.                 With the object reference you can call object methods to easily change many properties of                 the compound widget.   COMMON BLOCKS:     None.   RESTRICTIONS:     Requires the folling files from the Coyote Library:        http://www.idlcoyote.com/programs/error_message.pro   EVENT STRUCTURE:     All events are handled internally unless either the Event_Pro or Event_Func    keywords are used to assign an event handler to the compound widget. All events    generated by the text widgets are passed to the assigned event handler.     event = { CW_FILESELECT, $     ; The name of the event structure.              ID: 0L, $            ; The ID of the compound widget's top-level base.              TOP: 0L, $           ; The widget ID of the top-level base of the hierarchy.              HANDLER: 0L, $       ; The event handler ID. Filled out by IDL.              Basename:   , $      ; The base filename without directory specifiers.              Filename:   , $      ; The fully qualified filename.              Directory:   , $     ; The name of the current file directory.            }   EXAMPLE:     An example program is provided at the end of the FSC_FILESELECT code. To run it,    type these commands:        IDL&gt; .Compile fsc_fileselect       IDL&gt; Example     Or, if you want to obtain the object reference, type this:        IDL&gt; Example, theObject     Now you can call the object's methods. For example:        IDL theObject-&gt;SetProperty, XSize=150   GETTING and SETTING VALUES:     So as not to disrupt the accepted paradigm in using compound widgets, you    can use the return value of the FSC_FILESELECT function with WIDGET_CONTROL to    get and set the  value  of the widget.         Widget_Control, filenameID, Set_Value='C:\RSI\IDL52\DATA\cyclone.dat'     The program will automatically separate the file name portion of the value    from the directory portion and put things in the correct text widgets.     Similarly, you can get the  value  of the widget:         Widget_Control, filenameID, Get_Value=theValue        Print, theValue             C:\RSI\IDL52\DATA\cyclone.dat     The return value is the fully qualified file path to the file.   USING OBJECT METHODS to CHANGE PROGRAM PROPERTIES:     If you obtain the object reference, you have a great deal more control    over the properties of the compound widget. You obtain the object reference    by calling the function like this:        filenameID = FSC_FILESELECT(parent, ObjectRef=theObject)   OBJECT PROCEDURE METHODS:     GetProperty -- This method allows various properties of the widget to be        returned via output keywords. The keywords that are available are:        DirectoryName -- The current directory.       Event_Func -- The name of the event handler function for this compound widget.       Event_Pro -- The name of the event handler procedure for this compound widget.       Filename -- The current base filename.       Filter -- The current file filter.       LabelName -- The text on the label widget.       LabelSize -- The X screen size of the label widget.       MustExist -- A flag that indicates selected files must exist to be selected.       Parent -- The parent widget of the compound widget.       Read=read -- The file selection for reading flag.       SelectTitle -- The title bar text on the file selection dialog.       TLB -- The top-level base of the compound widget.       UValue -- The user value of the compound widget.       Write -- The file selection for writing flag.       XSize -- The X size of the text widget holding the filename.     LabelSize -- This method makes sure that the directory name and file name labels       are the same size. Normally, this procedure is called internally. No parameters.     MatchSize -- This method resizes the compound widget so that it is as long as the       the longest widget in the parent base widget. This is done automatically upon       realization unless the NOMAXSIZE keyword is set. The method aids in writing       resizeable widget programs.     SetProperty -- This method allows various properties of the widget to be        set via input keywords. The keywords that are available are:        DirectoryName -- The current directory.       Event_Func -- The name of the event handler function for this compound widget.       Event_Pro -- The name of the event handler procedure for this compound widget.       Filename -- The current base filename.       Filter -- The current file filter.       LabelName -- The text on the label widget.       LabelSize -- The X screen size of the label widget.       MustExist -- A flag that indicates selected files must exist to be selected.       Read -- The file selection for reading flag.       SelectTitle -- The title bar text on the file selection dialog.       UValue -- The user value of the compound widget.       Write -- The file selection for writing flag.       XSize -- The X size of the text widget holding the filename.     TextSelect - Allows you to create a selection in filename text widget. See the                 documentation for the SET_TEXT_SELECT keyword to Widget_Control.        selection -- A two-element array containing the starting position and selection length.   OBJECT FUNCTION METHODS:        GetFileName -- Returns the fully qualified filename. No parameters.        GetTLB -- Returns the top-level base ID of the compound widget. No Parameters.        Inspect_DirectoryName -- Inspects the directory name for correctness. Requires one positional parameter.          directoryName -- The name of the directory from the directory text widget.         textSelection -- The current text selection position.          At the moment all this does is remove any blank characters from either         end of the directory name and makes sure the last character of the directory         name does not end in a subdirectory specifier (except for VMS).       Inspect_Filename -- Inspects the file name for correctness. Requires one positional parameter.          filename -- The name of the file from the filename text widget.         textSelection -- The current text selection position.          At the moment all this does is remove any blank characters from either         end of the file name   MODIFICATION HISTORY:     Written by: David W. Fanning, 21 NOV 1999.    Fixed bug in File Name selection button. 18 MAR 2000. DWF.    Fixed an error in which directory the Browse buttons should start        searching. 29 SEP 2000. DWF.    Previously returned events only for typing in text widgets. Now        Browse button events are also returned. 29 SEP 2000. DWF.    Fixed a bug in setting the file filter. 29 SEP 2000. DWF.    Removed the Directory Browse button 10 AUG 2002. DWF.    Added ERROR_MESSAGE to error handling. 10 AUG 2002. DWF.    Changed the ability to specify a file filter as a string array, instead        of just as a scalar string. This required the use of a pointer, which        meant that I had to remove the FILTER field from the CW_FILESELECT        event structure to avoid likely memory leakage. This is a dangerous        change because it means programs that relied on this (I expect there        are very, very few) will break and it goes against my philosopy of        keeping my programs backward compatible. Let me know if you have        problems. In testing, I discoved no problems in my own code. 31 OCT 2002. DWF.    Fixed a problem with DIALOG_PICKFILE that sometimes allowed users to change        directories without selecting a file. 3 Nov 2002. DWF.    Fixed a problem with widget resizing with the help of Bob Portman that had plagued        me from the beginning. Thanks, Bob! 5 August 2003. DWF    Added TEXTSELECT method. 5 Aug 2003. DWF.    Had to add FORWARD_FUNCTION statement to get error handler compiled when using        DIRECTORY keyword. 24 Nov 2003. DWF.    Fixed a problem with too many events going to an event handler specified with        the EVENT_PRO or EVENT_FUNC keyword from the text widget. Now only Carriage        Return events are passed on to the user-specified event handler. 8 July 2004. DWF.    Replace all  \  characters with  /  characters in directory names. 8 Januay 2006. DWF.    Set the default fonts to be the current widget font, rather than the default widget font. 4 Oct 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_Fileselect_WidgetFont", "FSC_Fileselect_WidgetFont", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_Fileselect_WidgetFont", "", "DEFAULT", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::Directory_Events", "FSC_FileSelect::Directory_Events", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Directory_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::Filename_Events", "FSC_FileSelect::Filename_Events", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Filename_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::GetFilename", "FSC_FileSelect::GetFilename", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::GetFilename", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::GetNoMaxSize", "FSC_FileSelect::GetNoMaxSize", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::GetNoMaxSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::GetProperty", "FSC_FileSelect::GetProperty", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::GetProperty", "", "DirectoryNameEvent_FuncEvent_ProFilenameFilterLabelNameLabelSizeMustExistParentReadSelectTitleTLBUValueWriteXSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::GetTLB", "FSC_FileSelect::GetTLB", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::GetTLB", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::Inspect_DirectoryName", "FSC_FileSelect::Inspect_DirectoryName", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Inspect_DirectoryName", "", "dirnametextSelection", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::Inspect_Filename", "FSC_FileSelect::Inspect_Filename", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Inspect_Filename", "", "filenametextSelection", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::LabelSize", "FSC_FileSelect::LabelSize", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::LabelSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::MatchSize", "FSC_FileSelect::MatchSize", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::MatchSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect_RStrPos", "FSC_FileSelect_RStrPos", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_RStrPos", "", "ExprSubStrPos", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::Select_File", "FSC_FileSelect::Select_File", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::Select_File", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::SetFilename", "FSC_FileSelect::SetFilename", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::SetFilename", "", "theName", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::SetProperty", "FSC_FileSelect::SetProperty", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::SetProperty", "", "DirectoryNameEvent_FuncEvent_ProFilenameFilterLabelNameLabelSizeMustExistReadSelectTitleUValueWriteXSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::TextSelect", "FSC_FileSelect::TextSelect", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::TextSelect", "", "selection", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::CLEANUP", "FSC_FileSelect::CLEANUP", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect::INIT", "FSC_FileSelect::INIT", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect::INIT", "", "DirectoryNameEvent_ProEvent_FuncFilenameFilterFrameLabelFontLabelNameLabelSizeMustExistNoMaxSizeReadScr_XSizeSelectFontSelectdirSelectTitleTextFontUValueWriteXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect__Define", "FSC_FileSelect__Define", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect_Set_Value", "FSC_FileSelect_Set_Value", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Set_Value", "", "idfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect_Get_Value", "FSC_FileSelect_Get_Value", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Get_Value", "", "id", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#CW_FileSelect__Define", "CW_FileSelect__Define", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "CW_FileSelect__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect_Event_Handler", "FSC_FileSelect_Event_Handler", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Event_Handler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect_Notify_Realize", "FSC_FileSelect_Notify_Realize", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Notify_Realize", "", "labelID", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect_Kill_Notify", "FSC_FileSelect_Kill_Notify", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect_Kill_Notify", "", "labelID", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#FSC_FileSelect", "FSC_FileSelect", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "FSC_FileSelect", "", "Event_ProEvent_FuncDirectoryNameFilenameFilterFrameLabelFontLabelNameLabelSizeMustExistNoMaxSizeObjectRefReadSelectDirectorySelectFontSelectTitleTextFontUValueWriteXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#Example_Set_Size", "Example_Set_Size", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Set_Size", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#Example_Set_Filter", "Example_Set_Filter", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Set_Filter", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#Example_Set_Filename", "Example_Set_Filename", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Set_Filename", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#Example_Shrink", "Example_Shrink", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Shrink", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#Example_Print_Filename", "Example_Print_Filename", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Print_Filename", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#Example_Quit", "Example_Quit", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example_Quit", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_fileselect.html#Example", "Example", 'routine in <a href="idlastro/coyote/fsc_fileselect.html">fsc_fileselect.pro</a>', "fsc_fileselect.pro", "", "Example", "", "theObject", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html", "fsc_inputfield.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsc_inputfield.pro", "", "", " NAME:    FSC_INPUTFIELD   PURPOSE:     The purpose of this compound widget is to provide an alternative    to the CW_FIELD widget offered in the IDL distribution. What has    always bothered me about CW_FIELD is that the text widgets do not    look editable to the users on Windows platforms. This program    corrects that deficiency and adds some features that I think    would be helpful. For example, you can now assign an event handler    to the compound widget. The program is written entirely as an object.    A companion program, COYOTE_FIELD, has much the same functionality,    but is written as a traditional compound widget. The point of writing    the same program in two different ways is to give you the opportunity    to compare and contrast the two methods. I personally think there    is no substitute for the power of object programs. :-)   AUTHOR:    FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   CALLING SEQUENCE:     objectRef = FSC_INPUTFIELD(parent, Title='X Size:  , Value=256, /IntegerValue)   INPUT PARAMETERS:     parent -- The parent widget ID of the compound widget. Required.   INPUT KEYWORDS:     Column -- Set this keyword to have the Label Widget above the Text Widget.    CR_Only -- Set this keyword if you only want Carriage Return events. Note that no               events are returned unless the EVENT_PRO or EVENT_FUNC keywords are also used.    Decimal -- Set this keyword to the number of digits to the right of the decimal               point in FLOATVALUE and DOUBLEVALUE numbers.    Digits -- Set this keyword to the number of digits permitted in INTERGERVALUE and LONGVALUE numbers.    DoubleValue -- Set this keyword if you want DOUBLE values returned.    Event_Func -- Set this keyword to the name of an Event Function. If this                 keyword is undefined and the Event_Pro keyword is undefined,                 all compound widget events are handled internally and not                 passed on to the parent widget.    Event_Pro -- Set this keyword to the name of an Event Procedure. If this                 keyword is undefined and the Event_Func keyword is undefined,                 all compound widget events are handled internally and not                 passed on to the parent widget.    FieldFont -- The font name for the text in the Text Widget.    FloatValue -- Set this keyword for FLOAT values.    Focus_Events -- Set this keyword if you only want text events when the keyboard focus is                 moved out of the text widget. Note that no events are returned unless the                 EVENT_PRO or EVENT_FUNC keywords are also used.    Frame -- Set this keyword to put a frame around the compound widget.    IntegerValue -- Set this keyword for INTEGER values.    LabelAlign -- Set this keyword to align label text. [0-center (default), 1-left, 2-right].    LabelFont -- The font name for the text in the Label Widget.    LabelSize -- The X screen size of the Label Widget.    LongValue -- Set this keyword for LONG values.    Name -- A scalar string name of the object. (default = '')    Positive -- Set this keyword if you want only positive numbers allowed.    Row=row -- Set this keyword to have the Label beside the Text Widget. (The default.)    Scr_XSize -- The X screen size of the compound widget.    Scr_YSize -- The Y screen size of the compound widget.    StringValue -- Set this keyword for STRING values. (The default.)    Title -- The text to go on the Label Widget.    UValue -- A user value for any purpose.    Value -- The  value  of the compound widget.    XSize -- The X size of the Text Widget.     In addition, any keyword defined for WIDGET_TEXT, but not defined here (e.g., SENSITIVE), is    passed along without inspection to the text widget. Use of  extra  keywords is discouraged.   COMMON BLOCKS:     None.   RESTRICTIONS:     None.   EVENT STRUCTURE:     All events are handled internally unless either the Event_Pro or Event_Func    keywords are used to assign an event handler to the compound widget. By    default all events generated by the text widget are passed to the assigned    event handler. If you wish to receive only Carriage Return events, set the    CR_Only keyword.     event = { FSC_INPUTFIELD_EVENTS, $  ; The name of the event structure.              ID: 0L, $                 ; The ID of the compound widget's top-level base.              TOP: 0L, $                ; The widget ID of the top-level base of the hierarchy.              HANDLER: 0L, $            ; The event handler ID. Filled out by IDL.              ObjRef: Obj_New(), $      ; The  self  object reference. Provided so you can call methods.              Value: Ptr_New(), $       ; A pointer to the widget value.              Type:                     ; A string indicating the type of data in the VALUE field.            }                           ; Values are  INT ,  LONG ,  FLOAT ,  DOUBLE , or  STRING .   GETTING and SETTING VALUES:     Almost all the properties of the widget can be obtained or set via    the object's GetProperty and SetProperty methods (described below).    But since traditional compound widgets have the ability to get and    set the value of the compound widget, this capability is implemented    as special methods.     To get the value of the field, do this: value = objectRef-&gt;Get_Value()    To set the value of the field, so this: objectRef-&gt;Set_Value, value, /IntegerValue     The proper keyword should be used to set the data type of the value. If a keyword    is not used, the data type is determined from the value itself.   OBJECT PROCEDURE METHODS:     GetProperty -- This method allows various properties of the widget to be        returned via output keywords. The keywords that are available are:         CR_Only -- A flag, if set, means only report carriage return events.        DataType -- The data type of the field variable.        Decimal -- Set this keyword to the number of digits to the right of the decimal               point in FLOATVALUE and DOUBLEVALUE numbers.        Digits -- Set this keyword to the number of digits permitted in INTERGERVALUE and LONGVALUE numbers.        Event_Func -- The name of the event handler function.        Event_Pro -- The name of the event handler function.        Positive -- Indicates if the Positive number flag is set (1) or not (0).        UValue -- The user value assigned to the compound widget.        Value -- The  value  of the compound widget.      Name -- A scalar string name of the object.     Resize -- This method allows you to resize the compound widget's text field.         The value parameter is an X screen size for the entire widget. The text         widget is sized by using the value obtained from this value minus the         X screen size of the label widget.            objectRef-&gt;Resize, screen_xsize_value     Set_Value -- This method allows you to set the  value  of the field. It takes        one positional parameter, which is the value.            objectRef-&gt;Set_Value, 5         Keywords available are these to set the type of the data. If keywords        are not used, the data type is determined from the value.         DoubleValue -- Set this keyword if you want DOUBLE values returned.        FloatValue -- Set this keyword for FLOAT values.        IntegerValue --  Set this keyword for INTEGER values.        LongValue -- Set this keyword for LONG values.        StringValue -- Set this keyword for STRING values. (The default.)     SetProperty -- This method allows various properties of the widget to be        set via input keywords. The keywords that are available are:         CR_Only -- Set this keyword if you only want Carriage Return events.        Decimal -- Set this keyword to the number of digits to the right of the decimal               point in FLOATVALUE and DOUBLEVALUE numbers.        Digits -- Set this keyword to the number of digits permitted in INTERGERVALUE and LONGVALUE numbers.        DoubleValue -- Set this keyword if you want DOUBLE values returned.        Event_Func -- Set this keyword to the name of an Event Function.        Event_Pro -- Set this keyword to the name of an Event Procedure.        FloatValue -- Set this keyword for FLOAT values.        IntegerValue --  Set this keyword for INTEGER values.        LabelSize --  The X screen size of the Label Widget.        LongValue -- Set this keyword for LONG values.        Name -- A scalar string name of the object. (default = '')        Positive -- Set this keyword to indicate only positive numbers are allowed.        Scr_XSize -- The X screen size of the text widget.        Scr_YSize -- The Y screen size of the text widget.        Sensitive -- Set to 1 to make the widget sensitive, and to 0 to make it insensitive.        StringValue -- Set this keyword for STRING values. (The default.)        Title -- The text to go on the Label Widget.        UValue -- A user value for any purpose.        Value -- The  value  of the compound widget.        XSize -- The X size of the Text Widget.     SetTabNext -- This method allows you to specify which field to go to when a TAB character       is typed in the text widget. See the Example program below for an example of how to       use this method.   OBJECT FUNCTIONS METHODS:        Get_Value -- Returns the  value  of the field. No parameters. Will be undefined           if a  number  field is blank. Should be checked before using:            IF N_Elements(objectRef-&gt;Get_Value()) NE 0 THEN Print, Value is: ', objectRef-&gt;Get_Value()        GetID -- Returns the widget identifier of the compound widget's top-level base.          (The first child of the parent widget.) No parameters.        GetLabelSize -- Returns the X screen size of the label widget. No parameters.        GetTextID -- Returns the widget identifier of the compound widget's text widget.          No parameters.        GetTextSize -- Returns the X screen size of the text widget. No parameters.   PRIVATE OBJECT METHODS:     Although there is really no such thing as a  private  method in IDL's    object implementation, some methods are used internally and not meant to    be acessed publicly. Here are a few of those methods. I list them because    it may be these private methods are ones you wish to override in subclassed    objects.        MoveTab -- This method moves the focus to the widget identified in the  next  field,         which must be set with the SetTabNext method. No parameters. Called automatically         when a TAB character is typed in the text widget.        Text_Events -- The main event handler method for the compound widget. All         text widget events are processed here.        ReturnValue -- This function method accepts a string input value and converts         it to the type of data requested by the user.        Validate -- This function method examines all text input and removes unwanted         characters, depending upon the requested data type for the field. It makes it         impossible, for example, to type alphanumeric characters in an INTEGER field.   EXAMPLE:     An example program is provided at the end of the FSC_INPUTFIELD code. To run it,    type these commands:        IDL&gt; .Compile FSC_InputField       IDL&gt; Example   NOTES:     IDL 6.2 introduced new TAB behavior, which broke the previous TAB behavior. New TAB behavior    is now supported, but FOCUS_EVENTS *must* be set on the widget for the new TAB events to    behave properly. See the EXAMPLE program for examples.   DEPENDENCIES:     Requires cgDblToStr from the Coyote Library:      http://www.idlcoyote.com/programs/cgdbltostr.pro   MODIFICATION HISTORY:     Written by: David W. Fanning, 23 NOV 1999.    Added DECIMAL and DIGITS keywords, 2 Jan 2000, DWF.    Changed the calling sequence to that of a function rather than an object       creation call. This is more familiar to users of compound widgets. 4 Jan 00. DWF.    Added GetID and Resize methods. 7 Jan 00. DWF.    Added the Positive keyword and functionality. 12 Jan 00. DWF    Modified (slightly) the behavior on deleting characters. 12 Jan 00. DWF.    If a number field is blank, the Get_Value method will now return an undefined variable.       Be sure you check this value before you use it for something! 17 Jan 00. DWF.    Fixed a small typo:  aveDecimal  to  haveDecimal . 10 March 2000. DWF.    Added the ability to tab between FSC_INPUTFIELD widgets with the SetTabNext,       MoveTab, and GetTextID methods. 31 July 2000. DWF.    Added NAME field property, a scalar string name for the object 2 AUG 2000 BT    Added ObjRef field to the FSC_FIELD event structure and added field selection       for the TAB events added 31 July. 7 AUG 2000. DWF    Added GetTextSize and GetLabelSize methods for obtaining the X screen       size of the text and label widgets, respectively. 30 Jan 2001. DWF.    Added FOCUS_EVENTS keyword and fixed a problem with the event structure.       Also added better error handling. 5 January 2003. DWF.    Fixed a small problem in which input values were cast to strings inadvertently. 9 January 2004. DWF.    Fixed a small problem with error messages and using EVENT_FUNC. 14 January 2004. DWF.    Fixed a problem when setting ROW keyword. 23 February 2004. DWF.    IDL 6.2 introduced new TAB behavior, which broke the previous TAB behavior. New TAB behavior       is now supported, but FOCUS_EVENTS *must* be set for the new TAB events to behave properly.       10 August 2005. DWF.    Modified to covert double precision values to strings properly. 30 November 2005. DWF.    Added POSITIVE keyword to SETPROPERTY and GETPROPERTY methods. 25 February 2006. DWF.    Set the DYNAMIC_RESIZE keyword on the label widget. 25 February 2006. DWF.    Added SENSITIVE keyword to SetProperty documentation. 10 November 2006. DWF.    Fixed a small problem in which doubles were not being initialized correctly due       to an inadvertant extra line of code. 3 July 2007. DWF.    Fixed a small problem with input validation when the input is of BYTE type. 1 Oct 2008. DWF.    Set the default fonts to be the current widget font, rather than the default widget font. 4 Oct 2008. DWF.    Fixed a problem with validating a float or double value when it was written with       exponential notation. 2 April 2010. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField_WidgetFont", "FSC_InputField_WidgetFont", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField_WidgetFont", "", "DEFAULT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField_ERROR_MESSAGE", "FSC_InputField_ERROR_MESSAGE", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField_ERROR_MESSAGE", "", "ErrorInformationalTracebackNoNameTitle_ExtratheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::MoveTab", "FSC_InputField::MoveTab", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::MoveTab", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::SetTabNext", "FSC_InputField::SetTabNext", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::SetTabNext", "", "nextID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::GetTextID", "FSC_InputField::GetTextID", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::GetTextID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::Resize", "FSC_InputField::Resize", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::Resize", "", "newsize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::GetID", "FSC_InputField::GetID", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::GetID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::GetLabelSize", "FSC_InputField::GetLabelSize", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::GetLabelSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::GetTextSize", "FSC_InputField::GetTextSize", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::GetTextSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::Geometry", "FSC_InputField::Geometry", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::Geometry", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::Get_Value", "FSC_InputField::Get_Value", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::Get_Value", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::Set_Value", "FSC_InputField::Set_Value", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::Set_Value", "", "IntegerValueFloatValueLongValueDoubleValueStringValuevalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::Validate", "FSC_InputField::Validate", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::Validate", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField_Event__Define", "FSC_InputField_Event__Define", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField_Event__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::ReturnValue", "FSC_InputField::ReturnValue", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::ReturnValue", "", "inputValue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::TextEvents", "FSC_InputField::TextEvents", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::TextEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField_Event_Handler", "FSC_InputField_Event_Handler", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField_Event_Handler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::GetProperty", "FSC_InputField::GetProperty", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::GetProperty", "", "CR_OnlyDataTypeDecimalDigitsEvent_FuncEvent_ProFocus_EventsNamePositiveUValueValue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::SetProperty", "FSC_InputField::SetProperty", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::SetProperty", "", "CR_OnlyDecimalDigitsDoubleValueEvent_FuncEvent_ProFloatValueFocus_EventsIntegerValueLabelSizeLongValueNamePositiveScr_XSizeScr_YSizeSensitiveStringValueTitleUValueValueXSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::INIT", "FSC_InputField::INIT", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::INIT", "", "ColumnCR_OnlyDecimalDigitsDoubleValueEvent_FuncEvent_Pro_ExtraFieldFontFloatValueFocus_EventsFrameIntegerValueLabelAlignLabelFontLabelSizeLongValueNamePositiveRowScr_XSizeScr_YSizeStringValueTitleUValueValueXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField_Kill_Notify", "FSC_InputField_Kill_Notify", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField_Kill_Notify", "", "textID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField::CLEANUP", "FSC_InputField::CLEANUP", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_InputField__Define", "FSC_InputField__Define", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_InputField__Define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#FSC_INPUTFIELD", "FSC_INPUTFIELD", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "FSC_INPUTFIELD", "", "ColumnCR_OnlyDecimalDigitsDoubleValueEvent_FuncEvent_Pro_ExtraFieldFontFloatValueFocus_EventsFrameIntegerValueLabelAlignLabelFontLabelSizeLongValuePositiveNameRowScr_XSizeScr_YSizeStringValueTitleUValueValueXSizeparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#Example_Event", "Example_Event", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "Example_Event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_inputfield.html#Example", "Example", 'routine in <a href="coyote/fsc_inputfield.html">fsc_inputfield.pro</a>', "fsc_inputfield.pro", "", "Example", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fsc_pickfile.html", "fsc_pickfile.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fsc_pickfile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_pickfile.html#FSC_Pickfile", "FSC_Pickfile", 'routine in <a href="idlastro/coyote/fsc_pickfile.html">fsc_pickfile.pro</a>', "fsc_pickfile.pro", "", "FSC_Pickfile", " NAME:        FSC_Pickfile   PURPOSE:         This is a utility program for selecting data files. It is a wrapper        for DIALOG_PICKFILE, with special keywords to go to the specified        data directories in my IDL file system. The advantage of using        FSC_Pickfile is that it remembers the directory in which you selected the        last data file and returns there for the next file selection. The        last directory selection made is stored in the system variable        !Coyote_LastDir. The last file selected in stored in the systm variable        !Coyote_LastFile. Normally, Dialog_Pickfile starts in the last directory        where you selected a file. If you set the LAST_FILE keyword, the name        of the last file selected will be loaded into the Dialog_Pickfile        interface when it appears.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilites   CALLING SEQUENCE:         filename = FSC_Pickfile()   RETURN VALUE:         filename:     The fully-qualified name of the selected file or a                      null string if the CANCEL button was selected.    KEYWORDS:         DATA:         If set, starts in the  data  directory. That is,  .../IDL/data.                      If assumes this file resides in a directory rooted in  .../IDL , too,                      for example,  .../IDL/coyote.          DEMO:         If set, starts in the !DIR/examples/data directory.         JPEG:         If set, starts in the  jpeg  directory at  .../IDL/data/jpeg .         HDF:          If set, starts in the  hdf  directory at  .../IDL/data/hdf .         LAST_FILE:    If set, the name of the last file opened is placed in the                      filename widget.         LIDAR:        If set, starts in the  lidar  directory at  .../IDL/data/lidar .         NCDF:         If set, starts in the  netCDF  directory at  .../IDL/data/ncdf .         PNG:          If set, starts in the  png  directory at  .../IDL/data/png .         TIFF:         If set, starts in the  tiff  directory at  .../IDL/data/tiff .         EXTRA:        Accepts any input keywords to DIALOG_PICKFILE (e.g., FILTER).   MODIFICATION HISTORY:         Written by David W. Fanning, 22 February 2010.        Name changed from Pickfile to FSC_Pickfile on 14 October 2010. DWF.        Modifications to make it work with multiple file selection. 9 March 2011. DWF.        Added LAST_FILE keyword. 23 April 2011. DWF.  ******************************************************************************************;   Copyright (c) 2010, by Fanning Software Consulting, Inc.                                ;   All rights reserved.                                                                    ;                                                                                           ;   Redistribution and use in source and binary forms, with or without                      ;   modification, are permitted provided that the following conditions are met:             ;                                                                                           ;       * Redistributions of source code must retain the above copyright                    ;         notice, this list of conditions and the following disclaimer.                     ;       * Redistributions in binary form must reproduce the above copyright                 ;         notice, this list of conditions and the following disclaimer in the               ;         documentation and/or other materials provided with the distribution.              ;       * Neither the name of Fanning Software Consulting, Inc. nor the names of its        ;         contributors may be used to endorse or promote products derived from this         ;         software without specific prior written permission.                               ;                                                                                           ;   THIS SOFTWARE IS PROVIDED BY FANNING SOFTWARE CONSULTING, INC. ''AS IS'' AND ANY        ;   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES    ;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT     ;   SHALL FANNING SOFTWARE CONSULTING, INC. BE LIABLE FOR ANY DIRECT, INDIRECT,             ;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED    ;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;         ;   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND             ;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT              ;   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS           ;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            ; ******************************************************************************************;  ", "DATADEMOJPEGHDFLAST_FILELIDARNCDFPNGTIFF_REF_EXTRA", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html", "fsc_plotwindow.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fsc_plotwindow.pro", "", "", " NAME:    FSC_PLOTWINDOW   PURPOSE:     The purpose of this compound widget is to create a resizeable     plot window  inside a larger  page window . I'm not sure it    has any value except as a utility routine for the PostScript    configuration object FSC_PSCONFIG__DEFINE, but it's a neat    program anyway. :-)   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Utility routine for FSC_PSCONFIG__DEFINE.   CALLING SEQUENCE:     plotwindowObject = CW_PlotWindow(parent)   REQUIRED INPUT PARAMETERS:     parent - The parent base widget of this compound widget.   RETURN VALUE:     plotwindowObject - The object reference of the compound widget.   KEYWORDS:     COLOR - If set, display the window in  color . This is the default on 24-bit devices.    DEBUG - Set this keyword to turn traceback error handling on in the error handling code.    EVENT_PRO - The event procedure for the widget. Required for events to be generated. Otherwise, all events are handled internally.    LANDSCAPE - If set, display the page in landscape mode. Otherwise the page is display in portrait mode.    PAGESIZE - The  pagesize  of the widget. Possible values are:  LETTER ,  LEDGER ,  LEGAL ,  A4 , and  DISPLAY .    UNITS - A string indicating INCHES or CENTIMETER units. DEVICE units represented by a null string,   .    UVALUE - A user value for the caller of this program.    WINDOWCOLOR - A three-element array specifying the background window color (RGB).    WINDOWSIZE - The size of the  window  on the page. A four-element array of normalized coordinates in the form [x0, y0, x1, y1].   EVENT STRUCTURE:     The event structure that is returned from this compound widget is defined like this,    where the sizes and offsets locate the target  window  on the page in normalized units:        event = {ID:0L, TOP:0L, HANDLER:0L, XSize:0.0, YSize:0.0, XOffset:0.0, YOffset:0.0}   MODIFICATIONS:     Written by David Fanning, 31 January 2000.    Fixed a small bug that prevented it working on Macintosh computers. 26 Sept 2000. DWF.    Added a  DISPLAY  page size, so the program can be used to position       plots and other graphics in a display window. The  page area  will       have the same aspect ratio is the current graphics window. 17 March 2001. DWF.    Changed some of the tolerances for  closeness  from 0.1 to 0.025 to allow smaller       sizing for colorbars and other small objects. 6 July 2005. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Error_Message", "FSC_PLOTWINDOW_Error_Message", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Error_Message", "", "TracebackNoNametheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Normalize", "FSC_PLOTWINDOW_Normalize", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Normalize", "", "Positionrange", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::Refresh", "FSC_PLOTWINDOW::Refresh", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::Refresh", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetWindowColor", "FSC_PLOTWINDOW::SetWindowColor", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetWindowColor", "", "theColor", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::GetUValue", "FSC_PLOTWINDOW::GetUValue", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::GetUValue", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetColor", "FSC_PLOTWINDOW::SetColor", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetColor", "", "on_off", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetUnits", "FSC_PLOTWINDOW::SetUnits", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetUnits", "", "units", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::GetWindowLocation", "FSC_PLOTWINDOW::GetWindowLocation", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::GetWindowLocation", "", "xsizeysizexoffsetyoffset", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetWindowLocation", "FSC_PLOTWINDOW::SetWindowLocation", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetWindowLocation", "", "xsizeysizexoffsetyoffset", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetWindowSize", "FSC_PLOTWINDOW::SetWindowSize", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetWindowSize", "", "position", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetPageSize", "FSC_PLOTWINDOW::SetPageSize", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetPageSize", "", "LandscapeTLBpagesize", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::GetPagePixels", "FSC_PLOTWINDOW::GetPagePixels", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::GetPagePixels", "", "Landscapepagesize", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::GetPosition", "FSC_PLOTWINDOW::GetPosition", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::GetPosition", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::Resize", "FSC_PLOTWINDOW::Resize", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::Resize", "", "eventdirection", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::CenterPlot", "FSC_PLOTWINDOW::CenterPlot", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::CenterPlot", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::MovePlot", "FSC_PLOTWINDOW::MovePlot", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::MovePlot", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::WhichButtonReleased", "FSC_PLOTWINDOW::WhichButtonReleased", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::WhichButtonReleased", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::WhichButtonPressed", "FSC_PLOTWINDOW::WhichButtonPressed", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::WhichButtonPressed", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::InTarget", "FSC_PLOTWINDOW::InTarget", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::InTarget", "", "DIRECTIONxy", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::Realize", "FSC_PLOTWINDOW::Realize", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::Realize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Notify_Realize", "FSC_PLOTWINDOW_Notify_Realize", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Notify_Realize", "", "drawID", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::Process_Events", "FSC_PLOTWINDOW::Process_Events", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::Process_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Events", "FSC_PLOTWINDOW_Events", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Kill_Notify", "FSC_PLOTWINDOW_Kill_Notify", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Kill_Notify", "", "drawID", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::CLEANUP", "FSC_PLOTWINDOW::CLEANUP", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::INIT", "FSC_PLOTWINDOW::INIT", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::INIT", "", "PageSizeWindowSizeEvent_ProUnitsUValueLandscapeColorDebugWindowColorparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW__DEFINE", "FSC_PLOTWINDOW__DEFINE", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW__DEFINE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_plotwindow.html#FSC_PLOTWINDOW", "FSC_PLOTWINDOW", 'routine in <a href="idlastro/coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW", "", "PageSizeWindowSizeEvent_ProUnitsUValueLandscapeColorparent", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html", "fsc_plotwindow.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsc_plotwindow.pro", "", "", " NAME:    FSC_PLOTWINDOW   PURPOSE:     The purpose of this compound widget is to create a resizeable     plot window  inside a larger  page window . I'm not sure it    has any value except as a utility routine for the PostScript    configuration object FSC_PSCONFIG__DEFINE, but it's a neat    program anyway. :-)   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Utility routine for FSC_PSCONFIG__DEFINE.   CALLING SEQUENCE:     plotwindowObject = CW_PlotWindow(parent)   REQUIRED INPUT PARAMETERS:     parent - The parent base widget of this compound widget.   RETURN VALUE:     plotwindowObject - The object reference of the compound widget.   KEYWORDS:     COLOR - If set, display the window in  color . This is the default on 24-bit devices.    DEBUG - Set this keyword to turn traceback error handling on in the error handling code.    EVENT_PRO - The event procedure for the widget. Required for events to be generated. Otherwise, all events are handled internally.    LANDSCAPE - If set, display the page in landscape mode. Otherwise the page is display in portrait mode.    PAGESIZE - The  pagesize  of the widget. Possible values are:  LETTER ,  LEDGER ,  LEGAL ,  A4 , and  DISPLAY .    UNITS - A string indicating INCHES or CENTIMETER units. DEVICE units represented by a null string,   .    UVALUE - A user value for the caller of this program.    WINDOWCOLOR - A three-element array specifying the background window color (RGB).    WINDOWSIZE - The size of the  window  on the page. A four-element array of normalized coordinates in the form [x0, y0, x1, y1].   EVENT STRUCTURE:     The event structure that is returned from this compound widget is defined like this,    where the sizes and offsets locate the target  window  on the page in normalized units:        event = {ID:0L, TOP:0L, HANDLER:0L, XSize:0.0, YSize:0.0, XOffset:0.0, YOffset:0.0}   MODIFICATIONS:     Written by David Fanning, 31 January 2000.    Fixed a small bug that prevented it working on Macintosh computers. 26 Sept 2000. DWF.    Added a  DISPLAY  page size, so the program can be used to position       plots and other graphics in a display window. The  page area  will       have the same aspect ratio is the current graphics window. 17 March 2001. DWF.    Changed some of the tolerances for  closeness  from 0.1 to 0.025 to allow smaller       sizing for colorbars and other small objects. 6 July 2005. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Error_Message", "FSC_PLOTWINDOW_Error_Message", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Error_Message", "", "TracebackNoNametheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Normalize", "FSC_PLOTWINDOW_Normalize", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Normalize", "", "Positionrange", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::Refresh", "FSC_PLOTWINDOW::Refresh", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::Refresh", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetWindowColor", "FSC_PLOTWINDOW::SetWindowColor", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetWindowColor", "", "theColor", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::GetUValue", "FSC_PLOTWINDOW::GetUValue", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::GetUValue", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetColor", "FSC_PLOTWINDOW::SetColor", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetColor", "", "on_off", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetUnits", "FSC_PLOTWINDOW::SetUnits", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetUnits", "", "units", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::GetWindowLocation", "FSC_PLOTWINDOW::GetWindowLocation", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::GetWindowLocation", "", "xsizeysizexoffsetyoffset", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetWindowLocation", "FSC_PLOTWINDOW::SetWindowLocation", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetWindowLocation", "", "xsizeysizexoffsetyoffset", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetWindowSize", "FSC_PLOTWINDOW::SetWindowSize", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetWindowSize", "", "position", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::SetPageSize", "FSC_PLOTWINDOW::SetPageSize", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::SetPageSize", "", "LandscapeTLBpagesize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::GetPagePixels", "FSC_PLOTWINDOW::GetPagePixels", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::GetPagePixels", "", "Landscapepagesize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::GetPosition", "FSC_PLOTWINDOW::GetPosition", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::GetPosition", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::Resize", "FSC_PLOTWINDOW::Resize", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::Resize", "", "eventdirection", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::CenterPlot", "FSC_PLOTWINDOW::CenterPlot", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::CenterPlot", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::MovePlot", "FSC_PLOTWINDOW::MovePlot", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::MovePlot", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::WhichButtonReleased", "FSC_PLOTWINDOW::WhichButtonReleased", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::WhichButtonReleased", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::WhichButtonPressed", "FSC_PLOTWINDOW::WhichButtonPressed", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::WhichButtonPressed", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::InTarget", "FSC_PLOTWINDOW::InTarget", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::InTarget", "", "DIRECTIONxy", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::Realize", "FSC_PLOTWINDOW::Realize", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::Realize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Notify_Realize", "FSC_PLOTWINDOW_Notify_Realize", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Notify_Realize", "", "drawID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::Process_Events", "FSC_PLOTWINDOW::Process_Events", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::Process_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Events", "FSC_PLOTWINDOW_Events", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW_Kill_Notify", "FSC_PLOTWINDOW_Kill_Notify", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW_Kill_Notify", "", "drawID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::CLEANUP", "FSC_PLOTWINDOW::CLEANUP", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW::INIT", "FSC_PLOTWINDOW::INIT", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW::INIT", "", "PageSizeWindowSizeEvent_ProUnitsUValueLandscapeColorDebugWindowColorparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW__DEFINE", "FSC_PLOTWINDOW__DEFINE", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW__DEFINE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_plotwindow.html#FSC_PLOTWINDOW", "FSC_PLOTWINDOW", 'routine in <a href="coyote/fsc_plotwindow.html">fsc_plotwindow.pro</a>', "fsc_plotwindow.pro", "", "FSC_PLOTWINDOW", "", "PageSizeWindowSizeEvent_ProUnitsUValueLandscapeColorparent", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsc_ps_setup__define.html", "fsc_ps_setup__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsc_ps_setup__define.pro", "", "", " NAME:    FSC_PS_SETUP__DEFINE   PURPOSE:      The purpose of FSC_PS_SETUP__DEFINE is to define a structure that is     use with PS_START and PS_END, programs that make it easy to set-up     for and close a PostScript file. The programs work in close conjunction     with PSCONFIG, another program from the Coyote Library.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:         Graphics, File Output, PostScript   CALLING SEQUENCE:         Used internally in PS_START and PS_END.   COMMON BLOCKS:         _$FSC_PS_START_   Contains the PS_STRUCT structure for communication between                          PS_START and PS_END.   MODIFICATION HISTORY:         Separated from PS_START file, 7 April 2009, by David W. Fanning.        Added PAGETYPE field to structure. 8 August 2009. DWF.        Changes to handle inability to create raster files from PS encapsulated files in            landscape mode. Added  encapsulated  field to structure. 26 Aug 2011. DWF.        Modified to keep track of the  input  True-Type font for PostScript devices. 22 May 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsc_ps_setup__define.html#FSC_PS_SETUP__DEFINE", "FSC_PS_SETUP__DEFINE", 'routine in <a href="coyote/fsc_ps_setup__define.html">fsc_ps_setup__define.pro</a>', "fsc_ps_setup__define.pro", "", "FSC_PS_SETUP__DEFINE", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fsc_ps_setup__define.html", "fsc_ps_setup__define.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fsc_ps_setup__define.pro", "", "", " NAME:    FSC_PS_SETUP__DEFINE   PURPOSE:      The purpose of FSC_PS_SETUP__DEFINE is to define a structure that is     use with PS_START and PS_END, programs that make it easy to set-up     for and close a PostScript file. The programs work in close conjunction     with PSCONFIG, another program from the Coyote Library.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:         Graphics, File Output, PostScript   CALLING SEQUENCE:         Used internally in PS_START and PS_END.   COMMON BLOCKS:         _$FSC_PS_START_   Contains the PS_STRUCT structure for communication between                          PS_START and PS_END.   MODIFICATION HISTORY:         Separated from PS_START file, 7 April 2009, by David W. Fanning.        Added PAGETYPE field to structure. 8 August 2009. DWF.        Changes to handle inability to create raster files from PS encapsulated files in            landscape mode. Added  encapsulated  field to structure. 26 Aug 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_ps_setup__define.html#FSC_PS_SETUP__DEFINE", "FSC_PS_SETUP__DEFINE", 'routine in <a href="idlastro/coyote/fsc_ps_setup__define.html">fsc_ps_setup__define.pro</a>', "fsc_ps_setup__define.pro", "", "FSC_PS_SETUP__DEFINE", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html", "fsc_psconfig__define.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "fsc_psconfig__define.pro", "", "", " NAME:    FSC_PSCONFIG__DEFINE   PURPOSE:     The purpose of this program is to implement an object that    can keep track of--and allow the user to change--the current    configuration of the PostScript device.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   DOCUMENTATION:     Complete documentation for the FSC_PSCONFIG object, including    keyword and method descriptions, and example programs using the object    can be found on the Coyote's Guide to IDL Programming web page:       http://www.idlcoyote.com/programs/docs/fsc_psconfig.html     Or, if you would prefer, you can download a self-contained PDF file:       http://www.idlcoyote.com/programs/docs/fsc_psconfig.pdf   KEYWORDS:     Any keyword accepted by the FSC_PSCONFIG object can be used with    this program. Here are a few of the most popular keywords.     Bits_per_Pixel - The number of image bits saved for each image pixel: 2, 4, or 8. The default is 8.    Color - Set this keyword to select Color PostScript output. Turned on by default.    Decomposed - Set this keyword to 0 to select indexed color and to 1 to select decomposed color.    DefaultSetup - Set this keyword to the  name  of a default style. Current styles (you can easily      create and add your own to the source code) are the following:          System (Portrait)  - The normal  default  system set-up. Also,  System .         System (Landscape)  - The normal  default  landscape system set-up.         Centered (Portrait)  - The window centered on the page. Also,  Center  or  Centered .         Centered (Landscape)  - The window centered on the landscape page. Also,  Landscape .         Square (Portrait)  - A square plot, centered on the page.         Square (Landscape)  - A square plot, centered on the landscape page.         Figure (Small)  - A small encapsulated figure size, centered on page. Also,  Encapsulated  or  Encapsulate .         Figure (Large)  - A larger encapsulated figure size, centered on page. Also,  Figure .         Color (Portrait)  - A  centered  plot, with color turned on. Also,  Color .         Color (Landscape)  - A  centered  landscape plot, with color turned on.     Directory - Set this keyword to the name of the starting directory. The current directory is used by default.    Encapsulated - Set this keyword to select Encapsulated PostScript output. Turned off by default.    European - This keyword has been depreciated in favor of METRIC.    Filename - Set thie keyword to the name of the PostScript file. The default is  idl.ps .    Inches - Set this keyword to indicate sizes and offsets are in inches as opposed to centimeters. Set by Metric keyword by default.    Landscape - Set this keyword to select Landscape page output. Portrait page output is the default.    Language_Level - Set this keyword to select the Language Level interpreter. Default is 1.    Metric - Set this keyword to indicate metric mode (i.e., A4 page and centimeter units). Turned off by default.    PageType - Set this keyword to the  type  of page. Possible values are:         Letter  - 8.5 by 11 inches. (Default, unless the Metric keyword is set.)         Legal  - 8.5 by 14 inches.         Ledger  - 11 by 17 inches.         A4  - 21.0 by 29.7 centimeters. (Default, if the Metric keyword is set.)    XOffset - Set this keyword to the X Offset. Uses  System (Portrait)  defaults. (Note: offset calculated from lower-left corner of page.)    XSize - Set this keyword to the X size of the PostScript  window . Uses  System (Portrait)  defaults.    YOffset - Set this keyword to the Y Offset. Uses  System (Portrait)  defaults. (Note: offset calculated from lower-left corner of page.)    YSize - Set this keyword to the Y size of the PostScript  window . Uses  System (Portrait)  defaults.     In addition, the following keywords can be used:     CANCEL -- An output keyword that will be set to 1 if the user    chooses the Cancel button on the form. It will be 0 otherwise.     FONTINFO -- Set this keyword is you wish to have font information    appear on the form. The default is to not include font information.     FONTTYPE -- Set this keyword to a named variable that will indicate    the user's preference for font type. Values will be -1 (Hershey fonts),    0 (hardware fonts), and 1 (true-type fonts). This keyword will always    return -1 unless the FONTINFO keyword has also been set.     GROUP_LEADER -- Set this keyword to a widget identifier of the widget    you wish to be a group leader for this program.   EXAMPLE:     A simple sequence of using the object would look something like this:       psObject = Obj_New( FSC_PSCONFIG )      psObject-&gt;GUI      psKeywords = psObject-&gt;GetKeywords()      thisDevice = !D.Name      Set_Plot, 'PS'      Device, _Extra=psKeywords      cgImage, image      Device, /Close_File      Set_Plot, thisDevice      Obj_Destroy, psObject    Note that the object can also be called from the PS_CONFIG interface:       psKeywords = PSConfig()   OTHER PROGRAMS NEEDED:     The following programs are required to run this one:       fsc_droplist.pro      fsc_fileselect.pro      fsc_field.pro      fsc_plotwindow   MODIFICATIONS:     Written by David W. Fanning, 31 January 2000.    Added capability to call GUI methods when the current graphics device       doesn't support windows. Device is restored when the GUI exits. 11 May 2000. DWF.    Changed the default value for the Color keyword to 1. 16 May 2000. DWF.    Fixed a bug where filename changed when switching Setups. 8 AUG 2000. DWF.    Fixed a bug when saving setup in Landscape mode. 8 AUG 2000. DWF.    Added the ability to Get and Set the object's name via the SetProperty       and a very abbreviated GetProperty method. Also added a GetName method. 26 SEP 2000. DWF.    Fixed a problem in which the proper configuration was not restored if in Landscape mode. 20 Nov 2000. DWF.    Made a number of modifications at the request of Martin Schultz. 4 Dec 2000. DWF.    Fixed a bug when setting file  and directory names with the SetProperty method. 18 Dec 2000. DWF.    Fixed a small problem in initializing the page size properly. 3 Jan 2001. DWF.    Corrected a problem that resulted from a change to FSC_DROPLIST. 6 Jan 2001. DWF.    Added the ability to restore the font type instead of always reverting to !P.Font. 7 Jan 2001. DWF.    Increased the length of the file/directory name fields. 7 Jan 2001. DWF.    Fixed another problem with Landscape mode interacting with A4 paper size. 7 Jan 2001. DWF.    Seems I only half fixed the previous problem. :-( 26 April 2001. DWF.    Forgot to update program to reflect change in FSC_FIELD. Fixed 26 April 2001. DWF.    Changed BOOKMAN keyword to BKMAN to avoid conflict with BOOKSTYLE keyword. 26 April 2001. DWF.    Modified the System Defaults to say  None  if none is used. Improved documentation. 10 September 2001. DWF.    Added the ability to specify a filename at the same time as a Default Setup. 10 September 2001. DWF.    Fixed a small problem in not setting new page sizes appropriately. 22 May 2002. DWF.    Fixed a problem that occurred when the Accept button was not named  Accept . 6 May 2003.DWF.    Whoops! I was a bit overly agressive on that last fix. :-( 17 July 2003. DWF.    Fixed a problem with setting page types when using the DEFAULTSETUP keyword. 31 July 2003. DWF.    Fixed a problem with turning encapsulation on in the GUI. Renamed ENCAPSULATE keyword ENCAPSULATED       to avoid obvious errors. 31 July 2003. DWF.    Removed obsolete STR_SEP and replaced with STRSPLIT. 27 Oct 2004. DWF.    Now honoring EUROPEAN keyword when setting system default setups in the INIT method. 12 Nov 2004. DWF.    Added CMYK output option 24 August 2007. Assumes LANGUAGE_LEVEL=2 printer. L. Anderson.    Fixed a problem with the filename on WINDOWS computers coming back with forward slashes instead of        backward slashes. 20 May 2008. DWF.    Modified the program to return as the default, ISOLATIN1=1. 18 July 2008. DWF.    Fixed a problem with filenames when a DEFAULTSETUP was used with it. 12 Nov 2008. DWF.    Changed default window size when LANDSCAPE keyword is set. 10 April 2009. DWF.    Changed the default window size for PORTRAIT mode to be a bit larger. 10 April 2009. DWF.    Updated for IDL 7.1 and 24-bit color PostScript support. 24 May 2009. DWF.    Added PAGETYPE field to returned structure to allow PostScript page type to be determined. 8 August 2009. DWF.    Fixed a problem with 24-bit color support that allowed only IDL 7 versions to work correctly. 20 Sept 2009. DWF.    Added a LANGUAGE_LEVEL keyword. 13 Dec 2010. DWF.    Added the FONTYPE value to the keyword return structure. 14 Dec 2010. DWF.    Modified the return structure to turn landscape mode off and set offsets to zero if in         encapsulated mode. 19 Feb 2011. DWF.    Changes to handle inability to create raster files from PS encapsulated files in         landscape mode. Also removed changes of 19 Feb 2011 as no longer needed. 26 Aug 2011. DWF.    The PAGETYPE was not getting set properly in the return keywords when the Metric         option was selected on the GUI. 12 October 2011. DWF.    The program now remembers the last directory you used and will start in that        directory, unless told otherwise. 26 Oct 2011. DWF.    Parsing of full filename failing. Fixed 27 Oct 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG_RStrPos", "FSC_PSCONFIG_RStrPos", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_RStrPos", "", "ExprSubStrPos", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG_CenterTLB", "FSC_PSCONFIG_CenterTLB", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_CenterTLB", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Error_Message", "FSC_PSCONFIG_Error_Message", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Error_Message", "", "TracebackNoNametheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Events", "FSC_PSCONFIG_Events", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Normalize", "FSC_PSCONFIG_Normalize", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Normalize", "", "Positionrange", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Help_Event", "FSC_PSCONFIG_Help_Event", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Help_Event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Restore_Device", "FSC_PSCONFIG_Restore_Device", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Restore_Device", "", "id", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Accept", "FSC_PSCONFIG::Accept", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Accept", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Cancel", "FSC_PSCONFIG::Cancel", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Cancel", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::ClearStyles", "FSC_PSCONFIG::ClearStyles", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::ClearStyles", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Color", "FSC_PSCONFIG::Color", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Color", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::CMYK", "FSC_PSCONFIG::CMYK", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::CMYK", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Construct_Full_Filename", "FSC_PSCONFIG::Construct_Full_Filename", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Construct_Full_Filename", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::DefaultList", "FSC_PSCONFIG::DefaultList", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::DefaultList", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Defaults", "FSC_PSCONFIG::Defaults", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Defaults", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Encapsulate", "FSC_PSCONFIG::Encapsulate", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Encapsulate", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::FontType", "FSC_PSCONFIG::FontType", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::FontType", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::MetricStyle", "FSC_PSCONFIG::MetricStyle", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::MetricStyle", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::GetKeywords", "FSC_PSCONFIG::GetKeywords", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::GetKeywords", "", "FontType", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSConfig::GetName", "FSC_PSConfig::GetName", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSConfig::GetName", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSConfig::GetProperty", "FSC_PSConfig::GetProperty", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSConfig::GetProperty", "", "Name", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::GetSizes", "FSC_PSCONFIG::GetSizes", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::GetSizes", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::GUI", "FSC_PSCONFIG::GUI", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::GUI", "", "Group_LeaderNoBlockCancelFontInfoAccept_Button_NameFontType", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::GUIFont", "FSC_PSCONFIG::GUIFont", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::GUIFont", "", "CancelGroup_LeaderNoBlockNoFontAccept_Button_NameFontType", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Help", "FSC_PSCONFIG::Help", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Help", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::PageDimensions", "FSC_PSCONFIG::PageDimensions", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::PageDimensions", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Orientation", "FSC_PSCONFIG::Orientation", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Orientation", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::PageSize", "FSC_PSCONFIG::PageSize", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::PageSize", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::PlotWindow", "FSC_PSCONFIG::PlotWindow", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::PlotWindow", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Revert", "FSC_PSCONFIG::Revert", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Revert", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::SaveConfiguration", "FSC_PSCONFIG::SaveConfiguration", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::SaveConfiguration", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::SetDefault", "FSC_PSCONFIG::SetDefault", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::SetDefault", "", "defaultname", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::StatusLight", "FSC_PSCONFIG::StatusLight", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::StatusLight", "", "safe", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::StyleButtons", "FSC_PSCONFIG::StyleButtons", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::StyleButtons", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Units", "FSC_PSCONFIG::Units", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Units", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::UpdateDisplay", "FSC_PSCONFIG::UpdateDisplay", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::UpdateDisplay", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::UpdateFontStyle", "FSC_PSCONFIG::UpdateFontStyle", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::UpdateFontStyle", "", "Clear", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::UpdateSizes", "FSC_PSCONFIG::UpdateSizes", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::UpdateSizes", "", "xsizeysizexoffsetyoffset", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::WindowSize", "FSC_PSCONFIG::WindowSize", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::WindowSize", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::SetProperty", "FSC_PSCONFIG::SetProperty", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::SetProperty", "", "AvantGardeBits_per_PixelBoldBookStyleBkmanCMYKColorCourierDefaultSetupDemiDirectoryEncapsulatedFilenameFontSizeFontTypeHelveticaInchesItalicIsolatinLandscapeLanguageLevelLightMediumMetricNameNarrowObliquePageTypePalatinoPreviewSchoolbookSet_FontSymbolTimesTrueTypeUpDateXOffsetXSizeYOffsetYSizeZapfChanceryZapfDingbats$$", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::CLEANUP", "FSC_PSCONFIG::CLEANUP", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG::INIT", "FSC_PSCONFIG::INIT", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::INIT", "", "AvantGardeBits_per_PixelBoldBookStyleBkmanCMYKColorCourierDebugDecomposedDefaultSetupDemiDirectoryEncapsulatedFilenameFontSizeFontTypeHelveticaInchesItalicIsolatinLandscapeLanguageLevelLightMediumMetricNameNarrowObliquePageTypePalatinoPreviewSchoolbookSet_FontSymbolTimesTrueTypeXOffsetXSizeYOffsetYSizeZapfChanceryZapfDingbats$$$", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/fsc_psconfig__define.html#FSC_PSCONFIG__DEFINE", "FSC_PSCONFIG__DEFINE", 'routine in <a href="idlastro/coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG__DEFINE", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html", "fsc_psconfig__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsc_psconfig__define.pro", "", "", " NAME:    FSC_PSCONFIG__DEFINE   PURPOSE:     The purpose of this program is to implement an object that    can keep track of--and allow the user to change--the current    configuration of the PostScript device.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   DOCUMENTATION:     Complete documentation for the FSC_PSCONFIG object, including    keyword and method descriptions, and example programs using the object    can be found on the Coyote's Guide to IDL Programming web page:       http://www.idlcoyote.com/programs/docs/fsc_psconfig.html     Or, if you would prefer, you can download a self-contained PDF file:       http://www.idlcoyote.com/programs/docs/fsc_psconfig.pdf   KEYWORDS:     Any keyword accepted by the FSC_PSCONFIG object can be used with    this program. Here are a few of the most popular keywords.     Bits_per_Pixel - The number of image bits saved for each image pixel: 2, 4, or 8. The default is 8.    Color - Set this keyword to select Color PostScript output. Turned on by default.    Decomposed - Set this keyword to 0 to select indexed color and to 1 to select decomposed color.    DefaultSetup - Set this keyword to the  name  of a default style. Current styles (you can easily      create and add your own to the source code) are the following:          System (Portrait)  - The normal  default  system set-up. Also,  System .         System (Landscape)  - The normal  default  landscape system set-up.         Centered (Portrait)  - The window centered on the page. Also,  Center  or  Centered .         Centered (Landscape)  - The window centered on the landscape page. Also,  Landscape .         Square (Portrait)  - A square plot, centered on the page.         Square (Landscape)  - A square plot, centered on the landscape page.         Figure (Small)  - A small encapsulated figure size, centered on page. Also,  Encapsulated  or  Encapsulate .         Figure (Large)  - A larger encapsulated figure size, centered on page. Also,  Figure .         Color (Portrait)  - A  centered  plot, with color turned on. Also,  Color .         Color (Landscape)  - A  centered  landscape plot, with color turned on.     Directory - Set this keyword to the name of the starting directory. The current directory is used by default.    Encapsulated - Set this keyword to select Encapsulated PostScript output. Turned off by default.    European - This keyword has been depreciated in favor of METRIC.    Filename - Set thie keyword to the name of the PostScript file. The default is  idl.ps .    Inches - Set this keyword to indicate sizes and offsets are in inches as opposed to centimeters. Set by Metric keyword by default.    Landscape - Set this keyword to select Landscape page output. Portrait page output is the default.    Language_Level - Set this keyword to select the Language Level interpreter. Default is 1.    Metric - Set this keyword to indicate metric mode (i.e., A4 page and centimeter units). Turned off by default.    PageType - Set this keyword to the  type  of page. Possible values are:         Letter  - 8.5 by 11 inches. (Default, unless the Metric keyword is set.)         Legal  - 8.5 by 14 inches.         Ledger  - 11 by 17 inches.         A4  - 21.0 by 29.7 centimeters. (Default, if the Metric keyword is set.)    XOffset - Set this keyword to the X Offset. Uses  System (Portrait)  defaults. (Note: offset calculated from lower-left corner of page.)    XSize - Set this keyword to the X size of the PostScript  window . Uses  System (Portrait)  defaults.    YOffset - Set this keyword to the Y Offset. Uses  System (Portrait)  defaults. (Note: offset calculated from lower-left corner of page.)    YSize - Set this keyword to the Y size of the PostScript  window . Uses  System (Portrait)  defaults.     In addition, the following keywords can be used:     CANCEL -- An output keyword that will be set to 1 if the user    chooses the Cancel button on the form. It will be 0 otherwise.     FONTINFO -- Set this keyword is you wish to have font information    appear on the form. The default is to not include font information.     FONTTYPE -- Set this keyword to a named variable that will indicate    the user's preference for font type. Values will be -1 (Hershey fonts),    0 (hardware fonts), and 1 (true-type fonts). This keyword will always    return -1 unless the FONTINFO keyword has also been set.     GROUP_LEADER -- Set this keyword to a widget identifier of the widget    you wish to be a group leader for this program.   EXAMPLE:     A simple sequence of using the object would look something like this:       psObject = Obj_New( FSC_PSCONFIG )      psObject-&gt;GUI      psKeywords = psObject-&gt;GetKeywords()      thisDevice = !D.Name      Set_Plot, 'PS'      Device, _Extra=psKeywords      cgImage, image      Device, /Close_File      Set_Plot, thisDevice      Obj_Destroy, psObject    Note that the object can also be called from the PS_CONFIG interface:       psKeywords = PSConfig()   OTHER PROGRAMS NEEDED:     The following programs are required to run this one:       fsc_droplist.pro      fsc_fileselect.pro      fsc_field.pro      fsc_plotwindow   MODIFICATIONS:     Written by David W. Fanning, 31 January 2000.    Added capability to call GUI methods when the current graphics device       doesn't support windows. Device is restored when the GUI exits. 11 May 2000. DWF.    Changed the default value for the Color keyword to 1. 16 May 2000. DWF.    Fixed a bug where filename changed when switching Setups. 8 AUG 2000. DWF.    Fixed a bug when saving setup in Landscape mode. 8 AUG 2000. DWF.    Added the ability to Get and Set the object's name via the SetProperty       and a very abbreviated GetProperty method. Also added a GetName method. 26 SEP 2000. DWF.    Fixed a problem in which the proper configuration was not restored if in Landscape mode. 20 Nov 2000. DWF.    Made a number of modifications at the request of Martin Schultz. 4 Dec 2000. DWF.    Fixed a bug when setting file  and directory names with the SetProperty method. 18 Dec 2000. DWF.    Fixed a small problem in initializing the page size properly. 3 Jan 2001. DWF.    Corrected a problem that resulted from a change to FSC_DROPLIST. 6 Jan 2001. DWF.    Added the ability to restore the font type instead of always reverting to !P.Font. 7 Jan 2001. DWF.    Increased the length of the file/directory name fields. 7 Jan 2001. DWF.    Fixed another problem with Landscape mode interacting with A4 paper size. 7 Jan 2001. DWF.    Seems I only half fixed the previous problem. :-( 26 April 2001. DWF.    Forgot to update program to reflect change in FSC_FIELD. Fixed 26 April 2001. DWF.    Changed BOOKMAN keyword to BKMAN to avoid conflict with BOOKSTYLE keyword. 26 April 2001. DWF.    Modified the System Defaults to say  None  if none is used. Improved documentation. 10 September 2001. DWF.    Added the ability to specify a filename at the same time as a Default Setup. 10 September 2001. DWF.    Fixed a small problem in not setting new page sizes appropriately. 22 May 2002. DWF.    Fixed a problem that occurred when the Accept button was not named  Accept . 6 May 2003.DWF.    Whoops! I was a bit overly agressive on that last fix. :-( 17 July 2003. DWF.    Fixed a problem with setting page types when using the DEFAULTSETUP keyword. 31 July 2003. DWF.    Fixed a problem with turning encapsulation on in the GUI. Renamed ENCAPSULATE keyword ENCAPSULATED       to avoid obvious errors. 31 July 2003. DWF.    Removed obsolete STR_SEP and replaced with STRSPLIT. 27 Oct 2004. DWF.    Now honoring EUROPEAN keyword when setting system default setups in the INIT method. 12 Nov 2004. DWF.    Added CMYK output option 24 August 2007. Assumes LANGUAGE_LEVEL=2 printer. L. Anderson.    Fixed a problem with the filename on WINDOWS computers coming back with forward slashes instead of        backward slashes. 20 May 2008. DWF.    Modified the program to return as the default, ISOLATIN1=1. 18 July 2008. DWF.    Fixed a problem with filenames when a DEFAULTSETUP was used with it. 12 Nov 2008. DWF.    Changed default window size when LANDSCAPE keyword is set. 10 April 2009. DWF.    Changed the default window size for PORTRAIT mode to be a bit larger. 10 April 2009. DWF.    Updated for IDL 7.1 and 24-bit color PostScript support. 24 May 2009. DWF.    Added PAGETYPE field to returned structure to allow PostScript page type to be determined. 8 August 2009. DWF.    Fixed a problem with 24-bit color support that allowed only IDL 7 versions to work correctly. 20 Sept 2009. DWF.    Added a LANGUAGE_LEVEL keyword. 13 Dec 2010. DWF.    Added the FONTYPE value to the keyword return structure. 14 Dec 2010. DWF.    Modified the return structure to turn landscape mode off and set offsets to zero if in         encapsulated mode. 19 Feb 2011. DWF.    Changes to handle inability to create raster files from PS encapsulated files in         landscape mode. Also removed changes of 19 Feb 2011 as no longer needed. 26 Aug 2011. DWF.    The PAGETYPE was not getting set properly in the return keywords when the Metric         option was selected on the GUI. 12 October 2011. DWF.    The program now remembers the last directory you used and will start in that        directory, unless told otherwise. 26 Oct 2011. DWF.    Parsing of full filename failing. Fixed 27 Oct 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG_RStrPos", "FSC_PSCONFIG_RStrPos", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_RStrPos", "", "ExprSubStrPos", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Error_Message", "FSC_PSCONFIG_Error_Message", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Error_Message", "", "TracebackNoNametheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Events", "FSC_PSCONFIG_Events", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Normalize", "FSC_PSCONFIG_Normalize", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Normalize", "", "Positionrange", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Help_Event", "FSC_PSCONFIG_Help_Event", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Help_Event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG_Restore_Device", "FSC_PSCONFIG_Restore_Device", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG_Restore_Device", "", "id", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Accept", "FSC_PSCONFIG::Accept", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Accept", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Cancel", "FSC_PSCONFIG::Cancel", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Cancel", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::ClearStyles", "FSC_PSCONFIG::ClearStyles", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::ClearStyles", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Color", "FSC_PSCONFIG::Color", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Color", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::CMYK", "FSC_PSCONFIG::CMYK", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::CMYK", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Construct_Full_Filename", "FSC_PSCONFIG::Construct_Full_Filename", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Construct_Full_Filename", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::DefaultList", "FSC_PSCONFIG::DefaultList", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::DefaultList", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Defaults", "FSC_PSCONFIG::Defaults", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Defaults", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Encapsulate", "FSC_PSCONFIG::Encapsulate", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Encapsulate", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::FontType", "FSC_PSCONFIG::FontType", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::FontType", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::MetricStyle", "FSC_PSCONFIG::MetricStyle", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::MetricStyle", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::GetKeywords", "FSC_PSCONFIG::GetKeywords", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::GetKeywords", "", "FontType", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSConfig::GetName", "FSC_PSConfig::GetName", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSConfig::GetName", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSConfig::GetProperty", "FSC_PSConfig::GetProperty", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSConfig::GetProperty", "", "Name", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::GetSizes", "FSC_PSCONFIG::GetSizes", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::GetSizes", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::GUI", "FSC_PSCONFIG::GUI", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::GUI", "", "Group_LeaderNoBlockCancelFontInfoAccept_Button_NameFontType", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::GUIFont", "FSC_PSCONFIG::GUIFont", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::GUIFont", "", "CancelGroup_LeaderNoBlockNoFontAccept_Button_NameFontType", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Help", "FSC_PSCONFIG::Help", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Help", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::PageDimensions", "FSC_PSCONFIG::PageDimensions", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::PageDimensions", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Orientation", "FSC_PSCONFIG::Orientation", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Orientation", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::PageSize", "FSC_PSCONFIG::PageSize", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::PageSize", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::PlotWindow", "FSC_PSCONFIG::PlotWindow", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::PlotWindow", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Revert", "FSC_PSCONFIG::Revert", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Revert", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::SaveConfiguration", "FSC_PSCONFIG::SaveConfiguration", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::SaveConfiguration", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::SetDefault", "FSC_PSCONFIG::SetDefault", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::SetDefault", "", "defaultname", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::StatusLight", "FSC_PSCONFIG::StatusLight", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::StatusLight", "", "safe", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::StyleButtons", "FSC_PSCONFIG::StyleButtons", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::StyleButtons", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::Units", "FSC_PSCONFIG::Units", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::Units", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::UpdateDisplay", "FSC_PSCONFIG::UpdateDisplay", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::UpdateDisplay", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::UpdateFontStyle", "FSC_PSCONFIG::UpdateFontStyle", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::UpdateFontStyle", "", "Clear", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::UpdateSizes", "FSC_PSCONFIG::UpdateSizes", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::UpdateSizes", "", "xsizeysizexoffsetyoffset", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::WindowSize", "FSC_PSCONFIG::WindowSize", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::WindowSize", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::SetProperty", "FSC_PSCONFIG::SetProperty", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::SetProperty", "", "AvantGardeBits_per_PixelBoldBookStyleBkmanCMYKColorCourierDefaultSetupDemiDirectoryEncapsulatedFilenameFontSizeFontTypeHelveticaInchesItalicIsolatinLandscapeLanguageLevelLightMediumMetricNameNarrowObliquePageTypePalatinoPreviewSchoolbookSet_FontSymbolTimesTrueTypeUpDateXOffsetXSizeYOffsetYSizeZapfChanceryZapfDingbats$$", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::CLEANUP", "FSC_PSCONFIG::CLEANUP", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG::INIT", "FSC_PSCONFIG::INIT", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG::INIT", "", "AvantGardeBits_per_PixelBoldBookStyleBkmanCMYKColorCourierDebugDecomposedDefaultSetupDemiDirectoryEncapsulatedFilenameFontSizeFontTypeHelveticaInchesItalicIsolatinLandscapeLanguageLevelLightMediumMetricNameNarrowObliquePageTypePalatinoPreviewSchoolbookSet_FontSymbolTimesTrueTypeXOffsetXSizeYOffsetYSizeZapfChanceryZapfDingbats$$$", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/fsc_psconfig__define.html#FSC_PSCONFIG__DEFINE", "FSC_PSCONFIG__DEFINE", 'routine in <a href="coyote/fsc_psconfig__define.html">fsc_psconfig__define.pro</a>', "fsc_psconfig__define.pro", "", "FSC_PSCONFIG__DEFINE", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/fsccleanup7.html", "fsccleanup7.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsccleanup7.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsccleanup7.html#FSCCleanUp7", "FSCCleanUp7", 'routine in <a href="coyote/fsccleanup7.html">fsccleanup7.pro</a>', "fsccleanup7.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "FSCCleanUp7", " This procedure cleans up any open graphics windows and widget windows for  versions of IDL prior to IDL 8.   ", "ALL       Set this keyword if you wish to clean up windows of all types.  CG       Set this keyword if you wish to clean up only Coyote Graphics windows.  DG       Set this keyword if you wish to clean up only Direct Graphics windows.   ", "Utility", "     Written, 6 October 2012.        Copyright (c) 2012, Fanning Software Consulting, Inc.      For example, to destroy all windows on the display:   <span class= code-prompt >IDL&gt;</span> FSCCleanup7  ");
  
  

libdata[libdataItem++] = new Array("coyote/fsccleanup8.html", "fsccleanup8.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "fsccleanup8.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/fsccleanup8.html#FSCCleanUp8", "FSCCleanUp8", 'routine in <a href="coyote/fsccleanup8.html">fsccleanup8.pro</a>', "fsccleanup8.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "FSCCleanUp8", " This procedure cleans up any open graphics windows and widget windows for  versions of IDL from IDL 8 onward.   ", "ALL       Set this keyword if you wish to clean up windows of all types.  CG       Set this keyword if you wish to clean up only Coyote Graphics windows.  DG       Set this keyword if you wish to clean up only Direct Graphics windows.  FG       Set this keyword if you wish to clean up only Function Graphics windows.   ", "Utility", "     Written, 6 October 2012.        Copyright (c) 2012, Fanning Software Consulting, Inc.      For example, to destroy all windows on the display:   <span class= code-prompt >IDL&gt;</span> FSCCleanup8  ");
  
  

libdata[libdataItem++] = new Array("idlastro/ftab_delrow.html", "ftab_delrow.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftab_delrow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftab_delrow.html#ftab_delrow", "ftab_delrow", 'routine in <a href="idlastro/ftab_delrow.html">ftab_delrow.pro</a>', "ftab_delrow.pro", "", "ftab_delrow", " NAME:        FTAB_DELROW  PURPOSE:        Delete rows of data from a FITS ASCII or binary table extension   CALLING SEQUENCE:        ftab_delrow, filename, rows, EXTEN_NO =, NEWFILE = ]   INPUTS-OUPUTS        filename - scalar string giving name of the FITS file containing an                ASCII or binary table extension.         rows  -  scalar or vector, specifying the row numbers to delete                First row has index 0.   If a vector, it will be sorted and                duplicates will be removed   OPTIONAL KEYWORD INPUTS:        EXTEN_NO - scalar integer specifying which extension number to process                Default is to process the first extension        NEWFILE - scalar string specifying the name of the new output FITS file                FTAB_DELROW will prompt for this parameter if not supplied   EXAMPLE:        Compress the first extension of a FITS file 'test.fits' to include        only non-negative values in the 'FLUX' column         ftab_ext,'test.fits','flux',flux       ;Obtain original flux vector        bad = where(flux lt 0)                 ;Find negative fluxes        ftab_delrow,'test.fits',bad,new='test1.fits'  ;Delete specified rows   RESTRICTIONS:        Does not work for variable length binary tables   PROCEDURES USED:        FITS_CLOSE, FITS_OPEN, FITS_READ, FITS_WRITE, FTDELROW, TBDELROW   REVISION HISTORY:        Written   W. Landsman        STX Co.     August, 1997        Converted to IDL V5.0   W. Landsman   September 1997        Use COPY_LUN if V5.6 or later     W. Landsman   February 2003        Assume since V5.6, COPY_LUN available   W. Landsman   Sep 2006  ", "EXTEN_NONEWFILEfilenamerows", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftab_ext.html", "ftab_ext.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftab_ext.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftab_ext.html#ftab_ext", "ftab_ext", 'routine in <a href="idlastro/ftab_ext.html">ftab_ext.pro</a>', "ftab_ext.pro", "", "ftab_ext", " NAME:        FTAB_EXT  PURPOSE:        Routine to extract columns from a FITS (binary or ASCII) table.   CALLING SEQUENCE:        FTAB_EXT, name_or_fcb, columns, v1, [v2,..,v9, ROWS=, EXTEN_NO= ]  INPUTS:        name_or_fcb - either a scalar string giving the name of a FITS file                containing a (binary or ASCII) table, or an IDL structure                containing as file control block (FCB) returned by FITS_OPEN                If FTAB_EXT is to be called repeatedly on the same file, then                it is quicker to first open the file with FITS_OPEN, and then                pass the FCB structure to FTAB_EXT        columns - table columns to extract.  Can be either                (1) String with names separated by commas                (2) Scalar or vector of column numbers   OUTPUTS:        v1,...,v30 - values for the columns.   Up to 30 columns can be extracted   OPTIONAL INPUT KEYWORDS:        ROWS -  scalar or vector giving row number(s) to extract                Row numbers start at 0.  If not supplied or set to                -1 then values for all rows are returned        EXTEN_NO - Extension number to process.   If not set, then data is                extracted from the first extension in the file (EXTEN_NO=1)   EXAMPLES:        Read wavelength and flux vectors from the first extension of a        FITS file, 'spec.fit'.   Using FTAB_HELP,'spec.fit' we find that this        information is in columns named 'WAVELENGTH' and 'FLUX' (in columns 1        and 2).   To read the data         IDL&gt; ftab_ext,'spec.fit','wavelength,flux',w,f                or        IDL&gt; ftab_ext,'spec.fit',[1,2],w,f   PROCEDURES CALLED:        FITS_READ, FITS_CLOSE, FTINFO, FTGET(), TBINFO, TBGET()  HISTORY:        version 1        W.   Landsman         August 1997        Converted to IDL V5.0   W. Landsman   September 1997        Improve speed processing binary tables  W. Landsman   March 2000        Use new FTINFO calling sequence  W. Landsman   May 2000        Don't call fits_close if fcb supplied W. Landsman May 2001        Use STRSPLIT to parse column string  W. Landsman July 2002        Cleanup pointers in TBINFO structure  W. Landsman November 2003        Avoid EXECUTE() if V6.1 or later  W. Landsamn   December 2006        Assume since V6.1  W. Landsman   June 2009        Read up to 30 columns  W.L. Aug 2009  ", "ROWSEXTEN_NOfile_or_fcbcolumnsv1v2v3v4v5v6v7v8v9v10v11v12v13v14v15v16v17v18v19v20v21v22v23v24v25v26v27v28v29v30", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftab_help.html", "ftab_help.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftab_help.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftab_help.html#ftab_help", "ftab_help", 'routine in <a href="idlastro/ftab_help.html">ftab_help.pro</a>', "ftab_help.pro", "", "ftab_help", " NAME:        FTAB_HELP  PURPOSE:        Describe the columns of a FITS binary or ASCII table extension(s).   CALLING SEQUENCE:        FTAB_HELP, filename, [ EXTEN_No = , TEXTOUT= ]                or        FTAB_HELP, fcb, [EXTEN_No=, TEXTOUT= ]   INPUTS:        filename - scalar string giving name of the FITS file.        fcb - FITS control block returned by a previous call to FITS_OPEN   OPTIONAL KEYWORD INPUTS:        EXTEN_NO - integer scalar or vector specifying which FITS extensions                to display.    Default is to display all FITS extension.        TEXTOUT - scalar number (0-7) or string (file name) determining                output device (see TEXTOPEN).  Default is TEXTOUT=1, output                to the user's terminal   EXAMPLE:        Describe the columns in the second and fourth extensions of a FITS        file spec.fits and write the results to a file 'spec24.lis'         IDL&gt; ftab_help,'spec.fits',exten=[2,4],t='spec24.lis'   SYSTEM VARIABLES:         Uses the non-standard system variables !TEXTOUT and !TEXTUNIT        which must be defined (e.g. with ASTROLIB) before compilation  NOTES:        The behavior of FTAB_HELP was changed in August 2005 to display        all extensions by default, rather than just the first extension  PROCEDURES USED:        FITS_READ, FITS_CLOSE, FITS_OPEN, FTHELP, TBHELP, TEXTOPEN, TEXTCLOSE  HISTORY:        version 1  W. Landsman    August 1997        Corrected documentation W. Landsman   September 1997        Don't call fits_close if fcb supplied W. Landsman May 2001        Default now is to display all extensions, EXTEN keyword can now         be a vector   W. Landsman Aug 2005  ", "EXTEN_NOTEXTOUTfile_or_fcb", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftab_print.html", "ftab_print.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftab_print.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftab_print.html#ftab_print", "ftab_print", 'routine in <a href="idlastro/ftab_print.html">ftab_print.pro</a>', "ftab_print.pro", "", "ftab_print", " NAME:        FTAB_PRINT  PURPOSE:        Print the contents of a FITS (binary or ASCII) table extension.  EXPLANATION:        User can specify which rows or columns to print   CALLING SEQUENCE:        FTAB_PRINT, filename, columns, rows,                    [ TEXTOUT=, FMT=, EXTEN_NO= NUM_HEADER_LINES ]   INPUTS:        filename - scalar string giving name of a FITS file containing a                binary or ASCII table        columns - string giving column names, or vector giving                column numbers (beginning with 1).  If a string                supplied then column names should be separated by comma's.                if not supplied, then all columns are printed.                If set to '*' then all columns are printed in table format                (1 row per line, binary tables only).        rows - (optional) vector of row numbers to print (beginning with 0).                If not supplied or set to scalar, -1, then all rows                are printed.  OPTIONAL KEYWORD INPUT:        EXTEN_NO - Extension number to read.   If not set, then the first                extension is printed (EXTEN_NO=1)        FMT = Format string for print display (binary tables only).   If not                supplied, then any formats in the TDISP keyword fields will be                used, otherwise IDL default formats.    For ASCII tables, the                format used is always as stored in the FITS table.        NUM_HEADER_LINES - Number of lines to display the column headers (default                = 1).  By setting NUM_HEADER_LINES to an integer larger than 1,                one can avoid truncation of the headers.   In addition, setting                NUM_HEADER_LINES will display commented lines indicating                a FORMAT for reading the data, and a suggested call to               readfmt.pro.    Works for binary tables only        NVAL_PER_LINE - The maximum number of values displayed from a                multivalued column when printing in table format.   Default = 6        TEXTOUT - scalar number (0-7) or string (file name) determining                output device (see TEXTOPEN).  Default is TEXTOUT=1, output                to the user's terminal  EXAMPLE:        (1) Print all rows of the first 5 columns of the first extension of the        file 'wfpc.fits'                IDL&gt; ftab_print,'vizier.fits',indgen(5)+1         (2) Print all columns of the first row to a file 'vizier.dat' in        'table' format                IDL&gt; ftab_print,'vizier.fits',t='vizier.dat','*',0  SYSTEM VARIABLES:        Uses the non-standard system variables !TEXTOUT and !TEXTUNIT        which must be defined (e.g. with ASTROLIB) prior to compilation.  PROCEDURES USED:        FITS_CLOSE, FITS_OPEN, FITS_READ, FTPRINT, TBPRINT  HISTORY:        version 1  W. Landsman    August 1997        Check whether data exists   W. Landsman    Feb 2007        Check whether extension exists  W. Landsman  Mar 2010        Added NUM_HEADER_LINES, NVAL_PER_LINE keywords for binary tables                   W. Landsman Apr 2010  ", "TEXTOUTFMTEXTEN_NOnum_header_linesnval_per_linefilenamecolumnsrows", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftaddcol.html", "ftaddcol.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftaddcol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftaddcol.html#ftaddcol", "ftaddcol", 'routine in <a href="idlastro/ftaddcol.html">ftaddcol.pro</a>', "ftaddcol.pro", "", "ftaddcol", " NAME:       FTADDCOL  PURPOSE:       Routine to add a field to a FITS ASCII table   CALLING SEQUENCE:       ftaddcol, h, tab, name, idltype, [ tform, tunit, tscal, tzero, tnull ]   INPUTS:       h - FITS table header.  It will be updated as appropriate       tab - FITS table array.  Number of columns will be increased if                neccessary.       name - field name, scalar string       idltype - idl data type (as returned by SIZE function) for field,                For string data (type=7) use minus the string length.   OPTIONAL INPUTS:        tform - format specification 'qww.dd' where q = A, I, E, or D        tunit - string giving physical units for the column.        tscal - scale factor        tzero - zero point for field        tnull - null value for field         Use '' as the value of tform,tunit,tscal,tzero,tnull if you want        the default or no specification of them in the table header.   OUTPUTS:        h,tab - updated to allow new column of data   PROCEDURES USED:        FTINFO, FTSIZE, GETTOK(), SXADDPAR  HISTORY:        version 1  D. Lindler   July, 1987        Converted to IDL V5.0   W. Landsman   September 1997        Updated call to new FTINFO   W. Landsman   April 2000  ", "htabnameidltypetformtunittscaltzerotnull", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftcreate.html", "ftcreate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftcreate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftcreate.html#ftcreate", "ftcreate", 'routine in <a href="idlastro/ftcreate.html">ftcreate.pro</a>', "ftcreate.pro", "", "ftcreate", " NAME:        FTCREATE  PURPOSE:        Create a new (blank) FITS ASCII table and header with specified size.   CALLING SEQUENCE:        ftcreate, maxcols, maxrows, h, tab   INPUTS:        maxcols - number of character columns allocated, integer scalar        maxrows - maximum number of rows allocated, integer scalar   OUTPUTS:        h - minimal FITS Table extension header, string array  OPTIONAL OUTPUT:        tab - empty table, byte array  HISTORY:        version 1  D. Lindler   July. 87        Converted to IDL V5.0   W. Landsman   September 1997        Make table creation optional, allow 1 row table, add comments to        required FITS keywords    W. Landsman    October 2001  ", "MAXCOLSMAXROWSHTAB", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftdelcol.html", "ftdelcol.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftdelcol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftdelcol.html#ftdelcol", "ftdelcol", 'routine in <a href="idlastro/ftdelcol.html">ftdelcol.pro</a>', "ftdelcol.pro", "", "ftdelcol", " NAME: 	FTDELCOL  PURPOSE: 	Delete a column of data from a FITS table   CALLING SEQUENCE: 	ftdelcol, h, tab, name   INPUTS-OUPUTS 	h,tab - FITS table header and data array.  H and TAB will 		be updated with the specified column deleted   INPUTS: 	name - Either (1) a string giving the name of the column to delete 		or (2) a scalar giving the column number to delete   EXAMPLE: 	Suppose it has been determined that the F7.2 format used for a field 	FLUX in a FITS table is insufficient.  The old column must first be 	deleted before a new column can be written with a new format.  	flux = FTGET(h,tab,'FLUX')       ;Save the existing values 	FTDELCOL,h,tab,'FLUX'            ;Delete the existing column 	FTADDCOL,h,tab,'FLUX',8,'F9.2'   ;Create a new column with larger format 	FTPUT,h,tab,'FLUX',0,flux        ;Put back the original values   REVISION HISTORY: 	Written   W. Landsman        STX Co.     August, 1988 	Adapted for IDL Version 2, J. Isensee, July, 1990 	Converted to IDL V5.0   W. Landsman   September 1997        Updated call to new FTINFO   W. Landsman  May 2000  ", "htabname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftdelrow.html", "ftdelrow.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftdelrow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftdelrow.html#ftdelrow", "ftdelrow", 'routine in <a href="idlastro/ftdelrow.html">ftdelrow.pro</a>', "ftdelrow.pro", "", "ftdelrow", " NAME:        FTDELROW  PURPOSE:        Delete a row of data from a FITS table   CALLING SEQUENCE:        ftdelrow, h, tab, rows   INPUTS-OUPUTS        h,tab - FITS table header and data array.  H and TAB will                be updated on output with the specified row(s) deleted.        rows  -  scalar or vector, specifying the row numbers to delete                This vector will be sorted and duplicates removed by FTDELROW   EXAMPLE:        Compress a table to include only non-negative flux values         flux = FTGET(h,tab,'FLUX')       ;Obtain original flux vector        bad = where(flux lt 0)           ;Find negative fluxes        FTDELROW,h,tab,bad               ;Delete rows with negative fluxes   PROCEDURE:        Specified rows are deleted from the data array, TAB.  The NAXIS2        keyword in the header is updated.   PROCEDURES USED:        sxaddpar   REVISION HISTORY:        Written   W. Landsman        STX Co.     August, 1988        Checked for IDL Version 2, J. Isensee, July, 1990        Converted to IDL V5.0   W. Landsman   September 1997        Assume since V5.4, use BREAK instead of GOTO  W. Landsman April 2006   ", "htabrows", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftget.html", "ftget.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftget.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftget.html#ftget", "ftget", 'routine in <a href="idlastro/ftget.html">ftget.pro</a>', "ftget.pro", "", "ftget", " NAME:       FTGET  PURPOSE:       Function to return value(s) from specified column in a FITS ASCII table   CALLING SEQUENCE       values = FTGET( h, tab, field, [ rows, nulls ] )                     or       values = FTGET( ft_str, tab, field. [rows, nulls]  INPUTS:       h - FITS ASCII extension header (e.g. as returned by FITS_READ)                             or       ft_str - FITS table structure extracted from FITS header by FTINFO                 Use of the IDL structure will improve processing speed       tab - FITS ASCII table array (e.g. as returned by FITS_READ)       field - field name or number   OPTIONAL INPUTS:       rows -  scalar or vector giving row number(s)                Row numbers start at 0.  If not supplied or set to                -1 then values for all rows are returned   OUTPUTS:        the values for the row are returned as the function value.        Null values are set to 0 or blanks for strings.   OPTIONAL OUTPUT:        nulls - null value flag of same length as the returned data.                It is set to 1 at null value positions and 0 elsewhere.                If supplied then the optional input, rows, must also                be supplied.   EXAMPLE:        Read the columns labeled 'WAVELENGTH' and 'FLUX' from the second        (ASCII table) extension of a FITS file 'spectra.fit'         IDL&gt; fits_read,'spectra.fit',tab,htab,exten=2     ;Read 2nd extension        IDL&gt; w = ftget( htab, tab,'wavelength')      ;Wavelength vector        IDL&gt; f = ftget( htab, tab,'flux')            ;Flux vector         Slightly more efficient would be to first call FTINFO        IDL&gt; ftinfo, htab, ft_str                     ;Extract structure        IDL&gt; w = ftget(ft_str, tab,'wavelength')      ;Wavelength vector        IDL&gt; f = ftget(ft_str, tab,'flux')            ;Flux vector   NOTES:        (1) Use the higher-level procedure FTAB_EXT to extract vectors                directly from the FITS file.        (2) Use FTAB_HELP or FTHELP to determine the columns in a particular                ASCII table.  HISTORY:        coded by D. Lindler  July, 1987        Always check for null values    W. Landsman          August 1990        More informative error message  W. Landsman          Feb. 1996        Converted to IDL V5.0   W. Landsman   September 1997        Allow structure rather than FITS header  W. Landsman   May 2000        No case sensitivity in TTYPE name      W. Landsman   February 2002  ", "hdr_or_ftstrtabfieldrowsnulls", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fthelp.html", "fthelp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fthelp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fthelp.html#fthelp", "fthelp", 'routine in <a href="idlastro/fthelp.html">fthelp.pro</a>', "fthelp.pro", "", "fthelp", " NAME:        FTHELP  PURPOSE:        Routine to print a description of a FITS ASCII table extension   CALLING SEQUENCE:        FTHELP, H, [ TEXTOUT = ]   INPUTS:        H - FITS header for ASCII table extension, string array   OPTIONAL INPUT KEYWORD        TEXTOUT - scalar number (0-7) or string (file name) determining                output device (see TEXTOPEN).  Default is TEXTOUT=1, output                to the user's terminal   NOTES:        FTHELP checks that the keyword XTENSION  equals 'TABLE' in the FITS                header.   SYSTEM VARIABLES:        Uses the non-standard system variables !TEXTOUT and !TEXTUNIT        which must be defined (e.g. with ASTROLIB) prior to compilation.  PROCEDURES USED:        REMCHAR, SXPAR(), TEXTOPEN, TEXTCLOSE, ZPARCHECK   HISTORY:        version 1  W. Landsman  Jan. 1988        Add TEXTOUT option, cleaner format  W. Landsman   September 1991        TTYPE value can be longer than 8 chars,  W. Landsman  August 1995        Remove calls to !ERR, some vectorization  W. Landsman  February 2000        Slightly more compact display  W. Landsman  August 2005  ", "TEXTOUTh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fthmod.html", "fthmod.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fthmod.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fthmod.html#fthmod", "fthmod", 'routine in <a href="idlastro/fthmod.html">fthmod.pro</a>', "fthmod.pro", "", "fthmod", " NAME:        FTHMOD  PURPOSE:        Procedure to modify header information for a specified field        in a FITS table.   CALLING SEQUENCE:        fthmod, h, field, parameter, value   INPUT:        h - FITS header for the table        field - field name or number        parameter - string name of the parameter to modify.  Choices                include:                        TTYPE - field name                        TUNIT - physical units for field (eg. 'ANGSTROMS')                        TNULL - null value (string) for field, (eg. '***')                        TFORM - format specification for the field                        TSCAL - scale factor                        TZERO - zero offset                User should be aware that the validity of the change is                not checked.  Unless you really know what you are doing,                this routine should only be used to change field names,                units, or another user specified parameter.        value - new value for the parameter.  Refer to the FITS table                standards documentation for valid values.   EXAMPLE:       Change the units for a field name  FLUX  to  Janskys  in a FITS table         header,h        IDL&gt; FTHMOD, h, 'FLUX', 'TUNIT','Janskys'  METHOD:        The header keyword &lt;parameter&gt;&lt;field number&gt; is modified        with the new value.  HISTORY:        version 1, D. Lindler  July 1987        Converted to IDL V5.0   W. Landsman   September 1997        Major rewrite to use new FTINFO call   W. Landsman   May 2000  ", "hfieldparametervalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftinfo.html", "ftinfo.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftinfo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftinfo.html#ftinfo", "ftinfo", 'routine in <a href="idlastro/ftinfo.html">ftinfo.pro</a>', "ftinfo.pro", "", "ftinfo", " NAME:        FTINFO  PURPOSE:        Return an informational structure from a FITS ASCII table header.  CALLING SEQUENCE:        ftinfo,h,ft_str, [Count = ]   INPUTS:        h - FITS ASCII table header, string array   OUTPUTS:        ft_str - IDL structure with extracted info from the FITS ASCII table                 header.   Tags include         .tbcol - starting column position in bytes         .width - width of the field in bytes         .idltype - idltype of field.                        7 - string, 4- real*4, 3-integer, 5-real*8         .tunit - string unit numbers         .tscal - scale factor         .tzero - zero point for field         .tnull - null value for the field         .tform - format for the field         .ttype - field name   OPTIONAL OUTPUT KEYWORD:        Count - Integer scalar giving number of fields in the table  PROCEDURES USED:        GETTOK(), SXPAR()  NOTES:        This procedure underwent a major revision in May 2000, and **THE        NEW CALLING SEQUENCE IS INCOMPATIBLE WITH THE OLD ONE **  HISTORY:        D. Lindler  July, 1987        Converted to IDL V5.0   W. Landsman   September 1997        Major rewrite, return structure   W. Landsman   April 2000  ", "Counthft_str", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftkeeprow.html", "ftkeeprow.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftkeeprow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftkeeprow.html#ftkeeprow", "ftkeeprow", 'routine in <a href="idlastro/ftkeeprow.html">ftkeeprow.pro</a>', "ftkeeprow.pro", "", "ftkeeprow", " NAME: 	FTKEEPROW  PURPOSE: 	Subscripts (and reorders) a FITS table.  A companion piece to FTDELROW.   CALLING SEQUENCE: 	ftkeeprow, h, tab, subs   INPUT PARAMETERS: 	h    = FITS table header array 	tab  = FITS table data array 	subs = subscript array of FITS table rows.  Works like any other IDL 		subscript array (0 based, of course).   OUTPUT PARAMETERS: 	h and tab are modified   MODIFICATION HISTORY: 	Written by R. S. Hill, ST Sys. Corp., 2 May 1991. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "htabsubs", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftprint.html", "ftprint.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftprint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftprint.html#ftprint", "ftprint", 'routine in <a href="idlastro/ftprint.html">ftprint.pro</a>', "ftprint.pro", "", "ftprint", "  NAME:       FTPRINT   PURPOSE:        Procedure to print specified columns and rows of a FITS table   CALLING SEQUENCE:        FTPRINT, h, tab, columns, [ rows, TEXTOUT = ]   INPUTS:        h - Fits header for table, string array        tab - table array        columns - string giving column names, or vector giving                column numbers (beginning with 1).  If string                supplied then column names should be separated by comma's.        rows - (optional) vector of row numbers to print.  If                not supplied or set to scalar, -1, then all rows                are printed.   OUTPUTS:        None   OPTIONAL INPUT KEYWORDS:        TEXTOUT controls the output device; see the procedure TEXTOPEN   SYSTEM VARIABLES:        Uses nonstandard system variables !TEXTOUT and !TEXTOPEN        These will be defined (using ASTROLIB) if not already present.        Set !TEXTOUT = 3 to direct output to a disk file.   The system        variable is overriden by the value of the keyword TEXTOUT   EXAMPLES:         ftprint,h,tab,'STAR ID,RA,DEC'    ;print id,ra,dec for all stars        ftprint,h,tab,[2,3,4],indgen(100) ;print columns 2-4 for                                          ;first 100 stars        ftprint,h,tab,text= stars.dat     ;Convert entire FITS table to                                          ;an ASCII file named STARS.DAT   PROCEDURES USED:        FTSIZE, FTINFO, TEXTOPEN, TEXTCLOSE   RESTRICTIONS:        (1) Program does not check whether output length exceeds output                device capacity (e.g. 80 or 132).        (2) Column heading may be truncated to fit in space defined by                the FORMAT specified for the column        (3) Program does not check for null values   HISTORY:        version 1  D. Lindler Feb. 1987        Accept undefined values of rows, columns   W. Landsman August 1997        New FTINFO calling sequence    W. Landsman   May 2000        Parse scalar string with STRSPLIT   W. Landsman  July 2002        Fix format display of row number  W. Landsman March 2003        Fix format display of row number again  W. Landsman May 2003  ", "textouthtabcolumnsrows", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftput.html", "ftput.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftput.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftput.html#ftput", "ftput", 'routine in <a href="idlastro/ftput.html">ftput.pro</a>', "ftput.pro", "", "ftput", " NAME:        FTPUT  PURPOSE:        Procedure to add or update a field in an FITS ASCII table  CALLING SEQUENCE:        FTPUT, htab, tab, field, row, values, [ nulls ]   INPUTS:        htab - FITS ASCII table header string array        tab - FITS ASCII table array (e.g. as read by READFITS)        field - string field name or integer field number        row -  either a non-negative integer scalar giving starting row to                update, or a non-negative integer vector specifying rows to                update.   FTPUT will append a new row to a table if the value                of 'row' exceeds the number of rows in the tab array        values - value(s) to add or update.   If row is a vector                then values must contain the same number of elements.   OPTIONAL INPUT:        nulls - null value flag of same length as values.                It should be set to 1 at null value positions                and 0 elsewhere.   OUTPUTS:        htab,tab will be updated as specified.   EXAMPLE:        One has a NAME and RA  and Dec vectors for 500 stars with formats A6,        F9.5 and F9.5 respectively.   Write this information to an ASCII table        named 'star.fits'.         IDL&gt; FTCREATE,24,500,h,tab       ;Create table header and (empty) data        IDL&gt; FTADDCOL,h,tab,'RA',8,'F9.5','DEGREES'   ;Explicity define the        IDL&gt; FTADDCOL,h,tab,'DEC',8,'F9.5','DEGREES'  ;RA and Dec columns        IDL&gt; FTPUT,h,tab,'RA',0,ra       ;Insert RA vector into table        IDL&gt; FTPUT,h,tab,'DEC',0,dec       ;Insert DEC vector into table        IDL&gt; FTPUT, h,tab, 'NAME',0,name   ;Insert NAME vector with default        IDL&gt; WRITEFITS,'stars.fits',tab,h ;Write to a file        Note that (1) explicit formatting has been supplied for the (numeric)       RA and Dec vectors, but was not needed for the NAME vector, (2) A width       of 24 was supplied in FTCREATE based on the expected formats (6+9+9),       though the FT* will adjust this value as necessary, and (3) WRITEFITS       will create a minimal primary header  NOTES:        (1) If the specified field is not already in the table, then FTPUT will        create a new column for that field using default formatting.   However,         FTADDCOL should be called prior to FTPUT for explicit formatting.   PROCEDURES CALLED        FTADDCOL, FTINFO, FTSIZE, SXADDPAR, SXPAR()  HISTORY:        version 1  D. Lindler July, 1987        Allow E format         W. Landsman          March 1992        Write in F format if E format will overflow    April 1994        Update documentation W. Landsman   January 1996        Allow 1 element vector  W. Landsman   March 1996        Adjust string length to maximum of input string array   June 1997        Work for more than 32767 elements August 1997        Converted to IDL V5.0   W. Landsman   September 1997        Updated call to the new FTINFO   W. Landsman   May 2000        Fix case where header does not have any columns yet W.Landsman Sep 2002        Assume since V5.2, omit fstring() call  W. Landsman April 2006  ", "htabfieldrowvaluesnulls", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftsize.html", "ftsize.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftsize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftsize.html#ftsize", "ftsize", 'routine in <a href="idlastro/ftsize.html">ftsize.pro</a>', "ftsize.pro", "", "ftsize", " NAME:        FTSIZE  PURPOSE:        Procedure to return the size of a FITS ASCII table.   CALLING SEQUENCE:        ftsize,h,tab,ncols,rows,tfields,ncols_all,nrows_all, [ERRMSG = ]   INPUTS:        h - FITS ASCII table header, string array        tab - FITS table array, 2-d byte array   OUTPUTS:        ncols - number of characters per row in table        nrows - number of rows in table        tfields - number of fields per row        ncols_all - number of characters/row allocated (size of tab)        nrows_all - number of rows allocated   OPTIONAL OUTPUT KEYWORD:        ERRMSG  = If this keyword is present, then any error messages will be                  returned to the user in this parameter rather than                  depending on the MESSAGE routine in IDL.  If no errors are                  encountered, then a null string is returned.  HISTORY        D. Lindler  July, 1987        Fix for 1-row table,  W. Landsman    HSTX,     June 1994        Converted to IDL V5.0   W. Landsman   September 1997        Added ERRMSG keyword   W. Landsman   May 2000   ", "ERRMSGhtabncolsnrowstfieldsncols_allnrows_all", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ftsort.html", "ftsort.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ftsort.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ftsort.html#ftsort", "ftsort", 'routine in <a href="idlastro/ftsort.html">ftsort.pro</a>', "ftsort.pro", "", "ftsort", " NAME:       FTSORT  PURPOSE:       Sort a FITS ASCII table according to a specified field   CALLING SEQUENCE:       FTSORT,h,tab,[field, REVERSE = ]               ;Sort original table header and array                or       FTSORT,h,tab,hnew,tabnew,[field, REVERSE =]   ;Create new sorted header   INPUTS:       H - FITS header (string array)       TAB - FITS table (byte array) associated with H.  If less than 4                parameters are supplied, then H and TAB will be updated to                contain the sorted table   OPTIONAL INPUTS:       FIELD - Field name(s) or number(s) used to sort the entire table.               If FIELD is a vector then the first element is used for the               primary sort, the second element is used for the secondary               sort, and so forth.   (A secondary sort only takes effect when               values in the primary sort  field are equal.)  Character fields               are sorted using the ASCII collating sequence.  If omitted,               the user will be prompted for the field name.   OPTIONAL OUTPUTS:       HNEW,TABNEW - Header and table containing the sorted tables   EXAMPLE:       Sort a FITS ASCII table by the 'DECLINATION' field in descending order       Assume that the table header htab, and array, tab, have already been       read (e.g. with READFITS or FITS_READ):       IDL&gt; FTSORT, htab, tab,'DECLINATION',/REVERSE  OPTIONAL INPUT KEYWORD:        REVERSE - If set then the table is sorted in reverse order (maximum               to minimum.    If FIELD is a vector, then REVERSE can also be               a vector.   For example, REVERSE = [1,0] indicates that the               primary sort should be in descending order, and the secondary               sort should be in ascending order.   EXAMPLE:  SIDE EFFECTS:        A HISTORY record is added to the table header.  REVISION HISTORY:       Written W. Landsman                         June, 1988       Converted to IDL V5.0   W. Landsman   September 1997       New FTINFO calling sequence, added REVERSE keyword, allow secondary sorts                   W. Landsman   May 2000  ", "reversehtabhnewtabnewfield", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxaddpar.html", "fxaddpar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxaddpar.pro", "", "", " NAME:        FXADDPAR  Purpose     :        Add or modify a parameter in a FITS header array.  Explanation :        This version of FXADDPAR will write string values longer than 68        characters using the FITS continuation convention described at        http://heasarc.gsfc.nasa.gov/docs/heasarc/ofwg/docs/ofwg_recomm/r13.html  Use         :        FXADDPAR, HEADER, NAME, VALUE, COMMENT  Inputs      :        HEADER  = String array containing FITS header.  The maximum string                  length must be equal to 80.  If not defined, then FXADDPAR                  will create an empty FITS header array.         NAME    = Name of parameter.  If NAME is already in the header the                  value and possibly comment fields are modified. Otherwise a                  new record is added to the header.  If NAME is equal to                  either  COMMENT  or  HISTORY  then the value will be added to                  the record without replacement.  In this case the comment                  parameter is ignored.         VALUE   = Value for parameter.  The value expression must be of the                  correct type, e.g. integer, floating or string.                  String values of 'T' or 'F' are considered logical                  values unless the /NOLOGICAL keyword is set.  If the value is                  a string and is  long  (more than 69 characters), then it                  may be continued over more than one line using the OGIP                  CONTINUE standard.   Opt. Inputs :        COMMENT = String field.  The '/' is added by this routine.  Added                  starting in position 31.  If not supplied, or set equal to ''                  (the null string), then any previous comment field in the                  header for that keyword is retained (when found).  Outputs     :        HEADER  = Updated header array.  Opt. Outputs:        None.  Keywords    :        BEFORE  = Keyword string name.  The parameter will be placed before the                  location of this keyword.  For example, if BEFORE='HISTORY'                  then the parameter will be placed before the first history                  location.  This applies only when adding a new keyword;                  keywords already in the header are kept in the same position.         AFTER   = Same as BEFORE, but the parameter will be placed after the                  location of this keyword.  This keyword takes precedence over                  BEFORE.         FORMAT  = Specifies FORTRAN-like format for parameter, e.g.  F7.3 .  A                  scalar string should be used.  For complex numbers the format                  should be defined so that it can be applied separately to the                  real and imaginary parts.      If not supplied, then the IDL                  default formatting is used, except that double precision is                  given a format of G19.12.         /NOCONTINUE = By default, FXADDPAR will break strings longer than 68                 characters into multiple lines using the continuation                 convention.    If this keyword is set, then the line will                 instead be truncated to 68 characters.    This was the default                 behaviour of FXADDPAR prior to December 1999.        /NOLOGICAL = If set, then the values 'T' and 'F' are not interpreted as                 logical values, and are simply added without interpretation.  	ERRMSG	 = If defined and passed, then any error messages will be 		   returned to the user in this parameter rather than 		   depending on the MESSAGE routine in IDL, e.g.  			ERRMSG = '' 			FXADDPAR, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       :        DETABIFY(), FXPAR(), FXPARPOS()  Common      :        None.  Restrictions:        Warning -- Parameters and names are not checked against valid FITS        parameter names, values and types.         The required FITS keywords SIMPLE (or XTENSION), BITPIX, NAXIS, NAXIS1,        NAXIS2, etc., must be entered in order.  The actual values of these        keywords are not checked for legality and consistency, however.   Side effects:        All HISTORY records are inserted in order at the end of the header.         All COMMENT records are also inserted in order at the end of the        header, but before the HISTORY records.  The BEFORE and AFTER keywords        can override this.         All records with no keyword (blank) are inserted in order at the end of        the header, but before the COMMENT and HISTORY records.  The BEFORE and        AFTER keywords can override this.         All other records are inserted before any of the HISTORY, COMMENT, or         blank  records.  The BEFORE and AFTER keywords can override this.         String values longer than 68 characters will be split into multiple        lines using the OGIP CONTINUE convention, unless the /NOCONTINUE keyword        is set.    For a description of the CONTINUE convention see        http://fits.gsfc.nasa.gov/registry/continue_keyword.html  Category    :        Data Handling, I/O, FITS, Generic.  Prev. Hist. :        William Thompson, Jan 1992, from SXADDPAR by D. Lindler and J. Isensee.        Differences include:                 * LOCATION parameter replaced with keywords BEFORE and AFTER.                * Support for COMMENT and  blank  FITS keywords.                * Better support for standard FITS formatting of string and                  complex values.                * Built-in knowledge of the proper position of required                  keywords in FITS (although not necessarily SDAS/Geis) primary                  headers, and in TABLE and BINTABLE extension headers.         William Thompson, May 1992, fixed bug when extending length of header,        and new record is COMMENT, HISTORY, or blank.  Written     :        William Thompson, GSFC, January 1992.  Modified    :        Version 1, William Thompson, GSFC, 12 April 1993.                Incorporated into CDS library.        Version 2, William Thompson, GSFC, 5 September 1997                Fixed bug replacing strings that contain  /  character--it                interpreted the following characters as a comment.        Version 3, Craig Markwardt, GSFC,  December 1997                Allow long values to extend over multiple lines 	Version 4, D. Lindler, March 2000, modified to use capital E instead 		of a lower case e for exponential format.        Version 4.1 W. Landsman April 2000, make user-supplied format uppercase        Version 4.2 W. Landsman July 2002, positioning of EXTEND keyword        Version 5, 23-April-2007, William Thompson, GSFC        Version 6, 02-Aug-2007, WTT, bug fix for OGIP long lines        Version 6.1, 10-Feb-2009, W. Landsman, increase default format precision        Version 6.2  30-Sep-2009, W. Landsman, added /NOLOGICAL keyword  Version     :        Version 6.2, 30-Sep-2009  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxaddpar.html#FXADDPAR_CONTPAR", "FXADDPAR_CONTPAR", 'routine in <a href="idlastro/fxaddpar.html">fxaddpar.pro</a>', "fxaddpar.pro", "", "FXADDPAR_CONTPAR", "", "VALUECONTINUED", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/fxaddpar.html#FXADDPAR_CONTWARN", "FXADDPAR_CONTWARN", 'routine in <a href="idlastro/fxaddpar.html">fxaddpar.pro</a>', "fxaddpar.pro", "", "FXADDPAR_CONTWARN", "", "HEADERNAME", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/fxaddpar.html#FXADDPAR", "FXADDPAR", 'routine in <a href="idlastro/fxaddpar.html">fxaddpar.pro</a>', "fxaddpar.pro", "", "FXADDPAR", "", "BEFOREAFTERFORMATNOCONTINUEERRMSGNOLOGICALHEADERNAMEVALUECOMMENT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbaddcol.html", "fxbaddcol.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbaddcol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbaddcol.html#FXBADDCOL", "FXBADDCOL", 'routine in <a href="idlastro/fxbaddcol.html">fxbaddcol.pro</a>', "fxbaddcol.pro", "", "FXBADDCOL", " NAME: 	FXBADDCOL  PURPOSE     : 	Adds a column to a binary table extension.  EXPLANATION : 	Modify a basic FITS binary table extension (BINTABLE) header array to 	define a column.  USE         : 	FXBADDCOL, INDEX, HEADER, ARRAY  [, TTYPE [, COMMENT ]]  INPUTS      : 	HEADER	= String array containing FITS extension header. 	ARRAY	= IDL variable used to determine the data size and type 		  associated with the column.  If the column is defined as 		  containing variable length arrays, then ARRAY must be of the 		  maximum size to be stored in the column.  Opt. Inputs : 	TTYPE	= Column label. 	COMMENT = Comment for TTYPE  Outputs     : 	INDEX	= Index (1-999) of the created column. 	HEADER	= The header is modified to reflect the added column.  Opt. Outputs: 	None.  Keywords    : 	VARIABLE= If set, then the column is defined to contain pointers to 		  variable length arrays in the heap area. 	DCOMPLEX= If set, and ARRAY is complex, with the first dimension being 		  two (real and imaginary parts), then the column is defined as 		  double-precision complex (type  M ).     This keyword is 		  only needed prior to IDL Version 4.0, when the double 		  double complex datatype was unavailable in IDL 	BIT	= If passed, and ARRAY is of type byte, then the column is 		  defined as containg bit mask arrays (type  X ), with the 		  value of BIT being equal to the number of mask bits. 	LOGICAL	= If set, and array is of type byte, then the column is defined 		  as containing logical arrays (type  L ). 	NO_TDIM	= If set, then the TDIMn keyword is not written out to the 		  header.  No TDIMn keywords are written for columns containing 		  variable length arrays. 	TUNIT	= If passed, then corresponding keyword is added to header. 	TSCAL	= Same. 	TZERO	= Same. 	TNULL	= Same. 	TDISP	= Same. 	TDMIN	= Same. 	TDMAX	= Same. 	TDESC	= Same. 	TCUNI	= Same. 	TROTA	= Same. 	TRPIX	= Same. 	TRVAL	= Same. 	TDELT	= Same. 	ERRMSG	= If defined and passed, then any error messages will be 		  returned to the user in this parameter rather than 		  depending on the MESSAGE routine in IDL.  If no errors are 		  encountered, then a null string is returned.  In order to 		  use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBADDCOL, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	FXADDPAR, FXPAR  Common      : 	None.  Restrictions: 	Warning: No checking is done of any of the parameters defining the 	values of optional FITS keywords.  	FXBHMAKE must first be called to initialize the header.  	If ARRAY is of type character, then it must be of the maximum length 	expected for this column.  If a character string array, then the 	largest string in the array is used to determine the maximum length.  	The DCOMPLEX keyword is ignored if ARRAY is not double-precision. 	ARRAY must also have a first dimension of two representing the real and 	imaginary parts.  	The BIT and LOGICAL keywords are ignored if ARRAY is not of type byte. 	BIT takes precedence over LOGICAL.   Side effects: 	If the data array is multidimensional, then a TDIM keyword is added to 	the header, unless either NO_TDIM or VARIABLE is set.  	No TDIMn keywords are written out for bit arrays (format 'X'), since 	the dimensions would refer to bits, not bytes.   Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Jan 1992. 	W. Thompson, Feb 1992, changed from function to procedure. 	W. Thompson, Feb 1992, modified to support variable length arrays.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 31 May 1994 		Added ERRMSG keyword.        Version 3, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined. 	Version 4, William Thompson, GSFC, 30 December 1994 		Added keyword TCUNI. 	Version 5, Wayne Landsman, GSFC, 12 Aug 1997 		Recognize double complex IDL datatype        Version 6, Wayne Landsman, GSFC. C. Yamauchi (ISAS) 23 Feb 2006                Support 64bit integers        Version 7, C. Markwardt, GSFC, Allow unsigned integers, which                have special TSCAL/TZERO values.  Feb 2009        Version 8,  P.Broos (PSU), Wayne Landsman (GSFC) Mar 2010                Do *not* force TTYPE* keyword to uppercase  Version     :        Version 8, Mar 2010  ", "TUNITTSCALTZEROTNULLTDISPTDMINTDMAXTDESCTROTATRPIXTRVALTDELTTCUNINO_TDIMVARIABLEDCOMPLEXBITLOGICALERRMSGINDEXHEADERARRAYTTYPECOMMENT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbclose.html", "fxbclose.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbclose.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbclose.html#FXBCLOSE", "FXBCLOSE", 'routine in <a href="idlastro/fxbclose.html">fxbclose.pro</a>', "fxbclose.pro", "", "FXBCLOSE", " NAME: 	FXBCLOSE  Purpose     : 	Close a FITS binary table extension opened for read.  Explanation : 	Closes a FITS binary table extension that had been opened for read by 	FXBOPEN.  Use         : 	FXBCLOSE, UNIT  Inputs      : 	UNIT	= Logical unit number of the file.  Opt. Inputs : 	None.  Outputs     : 	None.  Opt. Outputs: 	None.  Keywords    : 	ERRMSG	  = If defined and passed, then any error messages will be 		    returned to the user in this parameter rather than 		    depending on the MESSAGE routine in IDL.  If no errors are 		    encountered, then a null string is returned.  In order to 		    use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBCLOSE, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	None.  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	The file must have been opened with FXBOPEN.  Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, Feb. 1992.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 June 1994 		Added ERRMSG keyword.        Version 3, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined.  Version     :        Version 3, 23 June 1994 	Converted to IDL V5.0   W. Landsman   September 1997  ", "ERRMSGUNIT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbcolnum.html", "fxbcolnum.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbcolnum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbcolnum.html#FXBCOLNUM", "FXBCOLNUM", 'routine in <a href="idlastro/fxbcolnum.html">fxbcolnum.pro</a>', "fxbcolnum.pro", "", "FXBCOLNUM", " NAME: 	FXBCOLNUM()  Purpose     : 	Returns a binary table column number.  Explanation : 	Given a column specified either by number or name, this routine will 	return the appropriate column number.  Use         : 	Result = FXBCOLNUM( UNIT, COL )  Inputs      : 	UNIT	= Logical unit number corresponding to the file containing the 		  binary table. 	COL	= Column in the binary table, given either as a character 		  string containing a column label (TTYPE), or as a numerical 		  column index starting from column one.  Opt. Inputs : 	None.  Outputs     : 	The result of the function is the number of the column specified, or 	zero if no column is found (when passed by name).  Opt. Outputs: 	None.  Keywords    : 	ERRMSG	  = If defined and passed, then any error messages will be 		    returned to the user in this parameter rather than 		    depending on the MESSAGE routine in IDL.  If no errors are 		    encountered, then a null string is returned.  In order to 		    use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			Result = FXBCOLNUM( ERRMSG=ERRMSG, ... ) 			IF ERRMSG NE '' THEN ...   Calls       : 	None.  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	The binary table file must have been opened with FXBOPEN.  	If COL is passed as a number, rather than as a name, then it must be 	consistent with the number of columns in the table.   Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	None.  Written     : 	William Thompson, GSFC, 2 July 1993.  Modified    : 	Version 1, William Thompson, GSFC, 2 July 1993. 	Version 2, William Thompson, GSFC, 29 October 1993. 		Added error message for not finding column by name. 	Version 3, William Thompson, GSFC, 21 June 1994 		Added ERRMSG keyword.        Version 4, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined.  Version     :        Version 4, 23 June 1994 	Converted to IDL V5.0   W. Landsman   September 1997  ", "ERRMSGUNITCOL", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbcreate.html", "fxbcreate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbcreate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbcreate.html#FXBCREATE", "FXBCREATE", 'routine in <a href="idlastro/fxbcreate.html">fxbcreate.pro</a>', "fxbcreate.pro", "", "FXBCREATE", " NAME: 	FXBCREATE  Purpose     : 	Open a new binary table at the end of a FITS file.  Explanation : 	Write a binary table extension header to the end of a disk FITS file, 	and leave it open to receive the data.  	The FITS file is opened, and the pointer is positioned just after the 	last 2880 byte record.  Then the binary header is appended.  Calls to 	FXBWRITE will append the binary data to this file, and then FXBFINISH 	will close the file.   Use         : 	FXBCREATE, UNIT, FILENAME, HEADER  Inputs      : 	FILENAME = Name of FITS file to be opened. 	HEADER	 = String array containing the FITS binary table extension 		   header.  Opt. Inputs : 	None.  Outputs     : 	UNIT	 = Logical unit number of the opened file.        EXTENSION= Extension number of newly created extension.  Opt. Outputs: 	None.  Keywords    : 	ERRMSG	  = If defined and passed, then any error messages will be 		    returned to the user in this parameter rather than 		    depending on the MESSAGE routine in IDL.  If no errors are 		    encountered, then a null string is returned.  In order to 		    use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBCREATE, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	FXADDPAR, FXBFINDLUN, FXBPARSE, FXFINDEND  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	The primary FITS data unit must already be written to a file.  The 	binary table extension header must already be defined (FXBHMAKE), and 	must match the data that will be written to the file.  Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, Jan 1992, based on WRITEFITS by J. Woffard and W. Landsman. 	W. Thompson, Feb 1992, changed from function to procedure. 	W. Thompson, Feb 1992, removed all references to temporary files.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 July 1993. 		Fixed bug with variable length arrays. 	Version 3, William Thompson, GSFC, 21 June 1994 		Added ERRMSG keyword. 	Version 4, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined. 	Version 5, Antony Bird, Southampton, 25 June 1997 		Modified to allow very long tables  Version     : 	Version 5, 25 June 1997 	Converted to IDL V5.0   W. Landsman   September 1997        Added EXTENSION parameter, C. Markwardt 1999 Jul 15        More efficient zeroing of file, C. Markwardt, 26 Feb 2001        Recompute header size if updating THEAP keyword B. Roukema April 2010  ", "ERRMSGUNITFILENAMEHEADEREXTENSION", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbdimen.html", "fxbdimen.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbdimen.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbdimen.html#FXBDIMEN", "FXBDIMEN", 'routine in <a href="idlastro/fxbdimen.html">fxbdimen.pro</a>', "fxbdimen.pro", "", "FXBDIMEN", " NAME:      FXBDIMEN()   PURPOSE:       Returns the dimensions for a column in a FITS binary table.   Explanation : This procedure returns the dimensions associated with a column                in a binary table opened for read with the command FXBOPEN.   Use         : Result = FXBDIMEN(UNIT,COL)   Inputs      : UNIT    = Logical unit number returned by FXBOPEN routine.                          Must be a scalar integer.                 COL     = Column in the binary table to read data from, either                          as a character string containing a column label                          (TTYPE), or as a numerical column index starting from                          column one.   Opt. Inputs : None.   Outputs     : The result of the function is an array containing the                dimensions for the specified column in the FITS binary table                that UNIT points to.   Opt. Outputs: None.   Keywords :    ERRMSG  = If defined and passed, then any error messages will                          be returned to the user in this parameter rather than                          depending on the MESSAGE routine in IDL.  If no                          errors are encountered, then a null string is                          returned.  In order to use this feature, ERRMSG must                          be defined first, e.g.                                 ERRMSG = ''                                Result = FXBDIMEN( ERRMSG=ERRMSG, ... )                                IF ERRMSG NE '' THEN ...   Calls       : FXBCOLNUM, FXBFINDLUN   Common      : Uses common block FXBINTABLE--see  fxbintable.pro  for more                information.   Restrictions: None.   Side effects: The dimensions will be returned whether or not the table is                still open or not.                 If UNIT does not point to a binary table, then 0 is returned.                 If UNIT is an undefined variable, then 0 is returned.   Category    : Data Handling, I/O, FITS, Generic.   Prev. Hist. : None.   Written     : William Thompson, GSFC, 4 March 1994.   Modified    : Version 1, William Thompson, GSFC, 4 March 1994.                Version 2, William Thompson, GSFC, 21 June 1994                        Added ERRMSG keyword.                Version 3, William Thompson, GSFC, 23 June 1994                        Modified so that ERRMSG is not touched if not defined.   Version     : Version 3, 23 June 1994        Converted to IDL V5.0   W. Landsman   September 1997  ", "ERRMSGUNITCOL", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbfind.html", "fxbfind.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbfind.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbfind.html#FXBFIND", "FXBFIND", 'routine in <a href="idlastro/fxbfind.html">fxbfind.pro</a>', "fxbfind.pro", "", "FXBFIND", " NAME: 	FXBFIND  Purpose     : 	Find column keywords in a FITS binary table header.  Explanation : 	Finds the value of a column keyword for all the columns in the binary 	table for which it is set.  For example,  		FXBFIND, UNIT, 'TTYPE', COLUMNS, VALUES, N_FOUND  	Would find all instances of the keywords TTYPE1, TTYPE2, etc.  The 	array COLUMNS would contain the column numbers for which a TTYPEn 	keyword was found, and VALUES would contain the values.  N_FOUND would 	contain the total number of instances found.   Use         : 	FXBFIND, [UNIT or HEADER], KEYWORD, COLUMNS, VALUES, N_FOUND 		[, DEFAULT ]  Inputs      : 	Either UNIT or HEADER must be passed.  	UNIT	= Logical unit number of file opened by FXBOPEN. 	HEADER	= FITS binary table header. 	KEYWORD	= Prefix to a series of FITS binary table column keywords.  The 		  keywords to be searched for are formed by combining this 		  prefix with the numbers 1 through the value of TFIELDS in the 		  header.  Opt. Inputs : 	DEFAULT	= Default value to use for any column keywords that aren't 		  found.  If passed, then COLUMNS and VALUES will contain 		  entries for every column.  Otherwise, COLUMNS and VALUES only 		  contain entries for columns where values were found.  Outputs     : 	COLUMNS	= Array containing the column numbers for which values of the 		  requested keyword series were found. 	VALUES	= Array containing the found values. 	N_FOUND	= Number of values found.  The value of this parameter is 		  unaffected by whether or not DEFAULT is passed.  Opt. Outputs: 	None.  Output Keywords    :       COMMENTS = Comments associated with each keyword, if any  Calls       : 	FXBFINDLUN, FXPAR  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	If UNIT is passed, then the file must have been opened with FXBOPEN. 	If HEADER is passed, then it must be a legal FITS binary table header.  	The type of DEFAULT must be consistent with the values of the requested 	keywords, i.e. both most be either of string or numerical type.  	The KEYWORD prefix must not have more than five characters to leave 	room for the three digits allowed for the column numbers.   Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Feb. 1992.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library.        Vectorized implementation improves performance, CM 18 Nov 1999        Added COMMENTS keyword CM Nov 2003        Remove use of obsolete !ERR system variable W. Landsman April 2010        Fix error introduced April 2010  W. Landsman  Version     : 	Version 3, April 2010.  ", "COMMENTSP1KEYWORDCOLUMNSVALUESN_FOUNDDEFAULT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbfindlun.html", "fxbfindlun.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbfindlun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbfindlun.html#FXBFINDLUN", "FXBFINDLUN", 'routine in <a href="idlastro/fxbfindlun.html">fxbfindlun.pro</a>', "fxbfindlun.pro", "", "FXBFINDLUN", " NAME: 	FXBFINDLUN()  Purpose     : 	Find logical unit number UNIT in FXBINTABLE common block.  Explanation : 	Finds the proper index to use for getting information about the logical 	unit number UNIT in the arrays stored in the FXBINTABLE common block. 	Called from FXBCREATE and FXBOPEN.  Use         : 	Result = FXBFINDLUN( UNIT )  Inputs      : 	UNIT	= Logical unit number.  Opt. Inputs : 	None.  Outputs     : 	The result of the function is an index into the FXBINTABLE common 	block.  Opt. Outputs: 	None.  Keywords    : 	None.  Calls       : 	None.  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	None.  Side effects: 	If UNIT is not found in the common block, then it is added to the 	common block.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Feb. 1992.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 July 1993. 		Added DHEAP variable to fix bug with variable length arrays. 	Version 3, Michael Schubnell, University of Michigan, 22 May 1996 		Change N_DIMS from short to long integer.  Version     : 	Version 3, 22 May 1996 	Converted to IDL V5.0   W. Landsman   September 1997        Make NAXIS1, NAXIS2, HEAP, DHEAP, BYTOFF 64-bit integers to deal with large files,          E. Hivon Mar 2008  ", "UNIT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbfinish.html", "fxbfinish.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbfinish.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbfinish.html#FXBFINISH", "FXBFINISH", 'routine in <a href="idlastro/fxbfinish.html">fxbfinish.pro</a>', "fxbfinish.pro", "", "FXBFINISH", " NAME: 	FXBFINISH  Purpose     : 	Close a FITS binary table extension file opened for write.  Explanation : 	Closes a FITS binary table extension file that had been opened for 	write by FXBCREATE.  Use         : 	FXBFINISH, UNIT  Inputs      : 	UNIT	= Logical unit number of the file.  Opt. Inputs : 	None.  Outputs     : 	None.  Opt. Outputs: 	None.  Keywords    : 	ERRMSG	= If defined and passed, then any error messages will be 		  returned to the user in this parameter rather than 		  depending on the MESSAGE routine in IDL.  If no errors are 		  encountered, then a null string is returned.  In order to 		  use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBFINISH, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	None.  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	The file must have been opened with FXBCREATE, and written with 	FXBWRITE.  Side effects: 	Any bytes needed to pad the file out to an integral multiple of 2880 	bytes are written out to the file.  Then, the file is closed.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, Jan 1992. 	W. Thompson, Feb 1992, modified to support variable length arrays. 	W. Thompson, Feb 1992, removed all references to temporary files.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 July 1993. 		Fixed bug with variable length arrays. 	Version 3, William Thompson, GSFC, 31 May 1994 		Added ERRMSG keyword.        Version 4, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined.  Version     :        Version 4, 23 June 1994 	Converted to IDL V5.0   W. Landsman   September 1997  ", "ERRMSGUNIT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbgrow.html", "fxbgrow.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbgrow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbgrow.html#FXBGROW", "FXBGROW", 'routine in <a href="idlastro/fxbgrow.html">fxbgrow.pro</a>', "fxbgrow.pro", "", "FXBGROW", " NAME:         FXBGROW  PURPOSE     :        Increase the number of rows in a binary table.  EXPLANATION :        Call FXBGROW to increase the size of an already-existing FITS        binary table.  The number of rows increases to NROWS; however        the table cannot shrink by this operation.  This procedure is        useful when a table with an unknown number of rows must be        created.  The caller would then call FXBCREATE to construct a        table of some base size, and follow with calls to FXBGROW to        lengthen the table as needed.  The extension being enlarged        need not be the last extension in the file.  If subsequent        extensions exist in the file, they will be shifted properly.   CALLING SEQUENCE :        FXBGROW, UNIT, HEADER, NROWS[, ERRMSG= , NOZERO= , BUFFERSIZE= ]   INPUT PARAMETERS :        UNIT     = Logical unit number of an already-opened file.        HEADER   = String array containing the FITS binary table extension                   header.  The header is modified in place.        NROWS    = New number of rows, always more than the previous                   number.   OPTIONAL INPUT KEYWORDS:        NOZERO   = when set, FXBGROW will not zero-pad the new data if                   it doesn't have to.        ERRMSG    = If defined and passed, then any error messages will be                    returned to the user in this parameter rather than                    depending on the MESSAGE routine in IDL.  If no errors are                    encountered, then a null string is returned.  In order to                    use this feature, ERRMSG must be defined first, e.g.                         ERRMSG = ''                        FXBGROW, ERRMSG=ERRMSG, ...                        IF ERRMSG NE '' THEN ...        BUFFERSIZE = Size in bytes for intermediate data transfers                     (default 32768)   Calls       :        FXADDPAR, FXHREAD, BLKSHIFT  Common      :        Uses common block FXBINTABLE--see  fxbintable.pro  for more        information.  Restrictions:        The file must be open with write permission.         The binary table extension in question must already by written        to the file (using FXBCREATE).         A table can never shrink via this operation.   SIDE EFFECTS:        The FITS file will grow in size, and heap areas are        preserved by moving them to the end of the file.         The header is modified to reflect the new number of rows.  CATEGORY    :        Data Handling, I/O, FITS, Generic.        Initially written, C. Markwardt, GSFC, Nov 1998        Added ability to enlarge arbitrary extensions and tables with          variable sized rows, not just the last extension in a file,          CM, April 2000        Fix bug in the zeroing of the output file, C. Markwardt, April 2005   ", "ERRMSGNOZEROBUFFERSIZEUNITHEADERNROWS", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbheader.html", "fxbheader.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbheader.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbheader.html#FXBHEADER", "FXBHEADER", 'routine in <a href="idlastro/fxbheader.html">fxbheader.pro</a>', "fxbheader.pro", "", "FXBHEADER", " NAME:        FXBHEADER()   PURPOSE:        Returns the header of an open FITS binary table.   EXPLANATION:       This procedure returns the FITS extension header of a FITS          binary table opened for read with the command FXBOPEN.   Use         : Result = FXBHEADER(UNIT)   Inputs      : UNIT    = Logical unit number returned by FXBOPEN routine.                          Must be a scalar integer.   Opt. Inputs : None.   Outputs     : The result of the function is a string array containing the                header for the FITS binary table that UNIT points to.   Opt. Outputs: None.   Keywords    : None.   Calls       : FXBFINDLUN   Common      : Uses common block FXBINTABLE--see  fxbintable.pro  for more                information.   Restrictions: None.   Side effects: The string array returned always has as many elements as the                largest header read by FXBOPEN.  Any extra elements beyond the                true header are blank or null strings.                 The header will be returned whether or not the table is still                open or not.                 If UNIT does not point to a binary table, then a string array                of nulls is returned.                 If UNIT is an undefined variable, then the null string is                returned.   Category    : Data Handling, I/O, FITS, Generic.   Prev. Hist. : None.   Written     : William Thompson, GSFC, 1 July 1993.   Modified    : Version 1, William Thompson, GSFC, 1 July 1993.   Version     : Version 1, 1 July 1993.        Converted to IDL V5.0   W. Landsman   September 1997  ", "UNIT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbhelp.html", "fxbhelp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbhelp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbhelp.html#FXBHELP", "FXBHELP", 'routine in <a href="idlastro/fxbhelp.html">fxbhelp.pro</a>', "fxbhelp.pro", "", "FXBHELP", " NAME: 	FXBHELP  Purpose     : 	Prints short description of columns in a FITS binary table.  Explanation : 	Prints a short description of the columns in a FITS binary table to the 	terminal screen.  Use         : 	FXBHELP, UNIT  Inputs      : 	UNIT	= Logical unit number of file opened by FXBOPEN.  Opt. Inputs : 	None.  Outputs     : 	None.  Opt. Outputs: 	None.  Keywords    : 	None.  Calls       : 	FXBFIND, FXBFINDLUN, FXPAR  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	The file must have been opened with FXBOPEN.  Side effects: 	Certain fields may be truncated in the display.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Feb. 1992, from TBHELP by W. Landsman.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 12 May 1993. 		Modified to not write to a logical unit number assigned to the 		terminal.  This makes it compatible with IDL for Windows.        Version 3, Wayne Landsman GSFC April 2010                 Remove use of obsolete !ERR system variable  Version     : 	Version 3, April 2010.  ", "UNIT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbhmake.html", "fxbhmake.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbhmake.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbhmake.html#FXBHMAKE", "FXBHMAKE", 'routine in <a href="idlastro/fxbhmake.html">fxbhmake.pro</a>', "fxbhmake.pro", "", "FXBHMAKE", " NAME: 	FXBHMAKE  Purpose     : 	Create basic FITS binary table extension (BINTABLE) header.  Explanation : 	Creates a basic header array with all the required keywords, but with 	none of the table columns defined.  This defines a basic structure 	which can then be added to or modified by other routines.  Use         : 	FXBHMAKE, HEADER, NROWS  [, EXTNAME  [, COMMENT ]]  Inputs      : 	NROWS	= Number of rows in the binary table.  Opt. Inputs : 	EXTNAME	= If passed, then the EXTNAME record is added with this value. 	COMMENT = Comment to go along with EXTNAME.  Outputs     : 	HEADER = String array containing FITS extension header.  Opt. Outputs: 	None.  Keywords    : 	INITIALIZE = If set, then the header is completely initialized, and any 		     previous entries are lost. 	DATE	   = If set, then the DATE keyword is added to the header. 	EXTVER	   = Extension version number (integer). 	EXTLEVEL   = Extension level number (integer). 	ERRMSG	   = If defined and passed, then any error messages will be 		     returned to the user in this parameter rather than 		     depending on the MESSAGE routine in IDL.  If no errors are 		     encountered, then a null string is returned.  In order to 		     use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBHMAKE, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	GET_DATE, FXADDPAR, FXHCLEAN  Common      : 	None.  Restrictions: 	Warning:  No checking is done of any of the parameters.  Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Jan 1992. 	William Thompson, Sep 1992, added EXTVER and EXTLEVEL keywords.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 June 1994 		Added ERRMSG keyword.        Version 3, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined.  Version     :        Version 3, 23 June 1994 	Converted to IDL V5.0   W. Landsman   September 1997  ", "DATEINITIALIZEEXTVEREXTLEVELERRMSGHEADERNROWSEXTNAMECOMMENT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbintable.html", "fxbintable.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbintable.pro", "", "", " NAME: 	FXBINTABLE  Purpose     : 	Common block FXBINTABLE used by  FXB  routines.  Explanation : 	This is not an IDL routine as such, but contains the definition of the 	common block FXBINTABLE for inclusion into other routines.  By defining 	the common block in one place, the problem of conflicting definitions 	is avoided.  	This file is included into routines that need this common block with 	the single line (left justified)  				  @fxbintable  	FXBINTABLE contains the following arrays:  		LUN	= An array of logical unit numbers of currently (or 			  previously) opened binary table files. 		STATE	= Array containing the state of the FITS files 			  associated with the logical unit numbers, where 			  0=closed, 1=open for read, and 2=open for write. 		HEAD	= FITS binary table headers. 		MHEADER	= Array containing the positions of the first data byte 			  of the header for each file referenced by array LUN. 		NHEADER	= Array containing the positions of the first data byte 			  after the header for each file referenced by array 			  LUN. 		NAXIS1	= Values of NAXIS1 from the binary table headers. 		NAXIS2	= Values of NAXIS2 from the binary table headers. 		TFIELDS	= Values of TFIELDS from the binary table headers. 		HEAP	= The start of the first byte of the heap area 			  for variable length arrays. 		DHEAP	= The start of the first byte of the next variable 			  length array, if writing. 		BYTOFF	= Byte offset from the beginning of the row for each 			  column in the binary table headers. 		TTYPE	= Values of TTYPE for each column in the binary table 			  headers. 		FORMAT	= Character code formats of the various columns. 		IDLTYPE	= IDL type code for each column in the binary table 			  headers. 		N_ELEM	= Number of elements for each column in the binary 			  table headers. 		TSCAL	= Scale factors for the individual columns. 		TZERO	= Zero offsets for the individual columns. 		MAXVAL	= For variable length arrays, contains the maximum 			  number of elements for each column in the binary 			  table headers. 		N_DIMS	= Number of dimensions, and array of dimensions for 			  each column of type string in the binary table 			  headers.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Feb 1992.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 July 1993. 		Added DHEAP variable to fix bug with variable length arrays.  Version     : 	Version 2, 21 July 1993.  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("idlastro/fxbisopen.html", "fxbisopen.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbisopen.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbisopen.html#FXBISOPEN", "FXBISOPEN", 'routine in <a href="idlastro/fxbisopen.html">fxbisopen.pro</a>', "fxbisopen.pro", "", "FXBISOPEN", " NAME:        FXBISOPEN()   PURPOSE:        Returns true if UNIT points to an open FITS binary table.   Explanation : This procedure checks to see if the logical unit number given                by the variable UNIT corresponds to a FITS binary table opened                for read with the command FXBOPEN, and which has not yet been                closed with FXBCLOSE.   Use         : Result = FXBISOPEN(UNIT)                 If FXBISOPEN(UNIT) THEN ...   Inputs      : UNIT    = Logical unit number returned by FXBOPEN routine.                          Must be a scalar integer.   Opt. Inputs : None.   Outputs     : The result of the function is either True (1) or False (0),                depending on whether UNIT points to an open binary table or                not.   Opt. Outputs: None.   Keywords    : None.   Calls       : FXBFINDLUN   Common      : Uses common block FXBINTABLE--see  fxbintable.pro  for more                information.   Restrictions: None.   Side effects: If UNIT is an undefined variable, then False (0) is returned.                 If UNIT points to a FITS binary table file that is opened for                write, then False (0) is returned.   Category    : Data Handling, I/O, FITS, Generic.   Prev. Hist. : None.   Written     : William Thompson, GSFC, 1 July 1993.   Modified    : Version 1, William Thompson, GSFC, 1 July 1993.   Version     : Version 1, 1 July 1993.        Converted to IDL V5.0   W. Landsman   September 1997  ", "UNIT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbopen.html", "fxbopen.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbopen.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbopen.html#FXBOPEN", "FXBOPEN", 'routine in <a href="idlastro/fxbopen.html">fxbopen.pro</a>', "fxbopen.pro", "", "FXBOPEN", " NAME: 	FXBOPEN  Purpose     : 	Open binary table extension in a disk FITS file for reading or updating  Explanation : 	Opens a binary table extension in a disk FITS file for reading.  The 	columns are then read using FXBREAD, and the file is closed when done 	with FXBCLOSE.  Use         : 	FXBOPEN, UNIT, FILENAME, EXTENSION  [, HEADER ]  Inputs      :        FILENAME  = Name of FITS file to be opened.  Optional                    extension *number* may be specified, in either of                    the following formats (using the FTOOLS                    convention): FILENAME[EXT] or FILENAME+EXT, where                    EXT is 1 or higher.  Such an extension                    specification takes priority over EXTENSION.  	EXTENSION = Either the number of the FITS extension, starting with the 		    first extension after the primary data unit being one; or a 		    character string containing the value of EXTNAME to search 		    for.  Opt. Inputs : 	None.  Outputs     : 	UNIT	  = Logical unit number of the opened file.  Opt. Outputs: 	HEADER	  = String array containing the FITS binary table extension 		    header.  Keywords    : 	NO_TDIM	  = If set, then any TDIMn keywords found in the header are 		    ignored.         ACCESS    = A scalar string describing access privileges as                    one of READ ('R') or UPDATE ('RW').                    DEFAULT: 'R'         REOPEN    = If set, UNIT must be an already-opened file unit.                    FXBOPEN will treat the file as a FITS file.  	ERRMSG	  = If defined and passed, then any error messages will be 		    returned to the user in this parameter rather than 		    depending on the MESSAGE routine in IDL.  If no errors are 		    encountered, then a null string is returned.  In order to 		    use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBOPEN, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	FXBFINDLUN, FXBPARSE, FXHREAD, FXPAR  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	The file must be a valid FITS file.  Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, Feb 1992, based on READFITS by J. Woffard and W. Landsman. 	W. Thompson, Feb 1992, changed from function to procedure. 	W. Thompson, June 1992, fixed up error handling.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 27 May 1994 		Added ERRMSG keyword. 	Version 3, William Thompson, GSFC, 21 June 1994 		Extended ERRMSG to call to FXBPARSE        Version 4, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined.        Version 4, 23 June 1994   Added ACCESS, REOPEN keywords, and FXFILTER package, CM 1999 Feb 03  Added FILENAME[EXT] and FILENAME+EXT extension parsing, CM 1999 Jun 28  Some general tidying, CM 1999 Nov 18        Allow for possible 64bit integer number of bytes W. Landsman Nov 2007        Make Ndata a 64bit integer to deal with larger files, E. Hivon, Mar 2008   ", "NO_TDIMERRMSGACCESSREOPENUNITFILENAME0EXTENSIONHEADER", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbparse.html", "fxbparse.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbparse.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbparse.html#FXBPARSE", "FXBPARSE", 'routine in <a href="idlastro/fxbparse.html">fxbparse.pro</a>', "fxbparse.pro", "", "FXBPARSE", " NAME: 	FXBPARSE  Purpose     : 	Parse the binary table extension header.  Explanation : 	Parses the binary table extension header, and store the information 	about the format of the binary table in the FXBINTABLE common 	block--called from FXBCREATE and FXBOPEN.  Use         : 	FXBPARSE, ILUN, UNIT, HEADER  Inputs      : 	ILUN	= Index into the arrays in the FXBINTABLE common block. 	HEADER	= FITS binary table extension header.  Opt. Inputs : 	None.  Outputs     : 	None.  Opt. Outputs: 	None.  Keywords    : 	NO_TDIM	  = If set, then any TDIMn keywords found in the header are 		    ignored. 	ERRMSG	  = If defined and passed, then any error messages will be 		    returned to the user in this parameter rather than 		    depending on the MESSAGE routine in IDL.  If no errors are 		    encountered, then a null string is returned.  In order to 		    use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBPARSE, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	FXBFIND, FXBTDIM, FXBTFORM, FXPAR  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	None.  Side effects: 	Any TDIMn keywords found for bit arrays (format 'X') are ignored, since 	the dimensions would refer to bits, not bytes.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Feb. 1992. 	William Thompson, Jan. 1993, modified for renamed FXBTFORM and FXBTDIM.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 June 1994 		Added ERRMSG keyword.        Version 3, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined. 	Version 4, Michael Schubnell, University of Michigan, 22 May 1996 		Change N_DIMS from short to long integer. 	Version 5, W. Landsman, GSFC, 12 Aug 1997 		Use double complex datatype, if needed 	Version 6, W. Landsman GSFC 30 Aug 1997        Optimized FXPAR; call FXBFIND for speed, CM 1999 Nov 18        Modify DHEAP(ILUN) when opening table now, CM 2000 Feb 22        Default the TZERO/TSCAL tables to double instead of single          precision floating point, CM 2003 Nov 23        Make NAXIS1 and NAXIS2 64-bit integers to deal with large files,          E. Hivon Mar 2008        Remove use of Obsolete !ERR system variable   Version        Version 8   April 2010  ", "NO_TDIMERRMSGILUNHEADER", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbread.html", "fxbread.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbread.html#FXBREAD", "FXBREAD", 'routine in <a href="idlastro/fxbread.html">fxbread.pro</a>', "fxbread.pro", "", "FXBREAD", " NAME: 	FXBREAD  Purpose     : 	Read a data array from a disk FITS binary table file.  Explanation : 	Each call to FXBREAD will read the data from one column and one row 	from the FITS data file, which should already have been opened by 	FXBOPEN.  One needs to call this routine for every column and every row 	in the binary table.  FXBCLOSE will then close the FITS data file.  Use         : 	FXBREAD, UNIT, DATA, COL  [, ROW ]  Inputs      : 	UNIT	= Logical unit number corresponding to the file containing the 		  binary table. 	COL	= Column in the binary table to read data from, either as a 		  character string containing a column label (TTYPE), or as a 		  numerical column index starting from column one.  Opt. Inputs : 	ROW	= Either row number in the binary table to read data from, 		  starting from row one, or a two element array containing a 		  range of row numbers to read.  If not passed, then the entire 		  column is read in.  		  Row must be passed for variable length arrays.   Outputs     : 	DATA	= IDL data array to be read from the file.  Opt. Outputs: 	None.  Keywords    : 	NOSCALE	= If set, then the output data will not be scaled using the 		  optional TSCAL and TZERO keywords in the FITS header. 		  Default is to scale.        NOIEEE  = If set, then the output data is not byte-swapped to                  machine order.  NOIEEE implies NOSCALE.                  Default is to perform the byte-swap. 	VIRTUAL	= If set, and COL is passed as a name rather than a number, 		  then if the program can't find a column with that name, it 		  will then look for a keyword with that name in the header. 		  Such a keyword would then act as a  virtual column , with the 		  same value for every row. 	DIMENSIONS = Vector array containing the dimensions to be used to read 		  in the data.  Bypasses any dimensioning information stored in 		  the header.  Ignored for bit arrays.  If the data type is 		  double-precision complex, then an extra dimension of 2 is 		  prepended to the dimensions passed by the user. 	NANVALUE= Value signalling data dropout.  All points corresponding to 		  IEEE NaN (not-a-number) are converted to this number. 		  Ignored unless DATA is of type float, double-precision or 		  complex. 	ERRMSG	= If defined and passed, then any error messages will be 		  returned to the user in this parameter rather than 		  depending on the MESSAGE routine in IDL.  If no errors are 		  encountered, then a null string is returned.  In order to 		  use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBREAD, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	FXPAR, WHERE_NEGZERO, WHERENAN  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	The binary table file must have been opened with FXBOPEN.  	The data must be consistent with the column definition in the binary 	table header.  	The row number must be consistent with the number of rows stored in the 	binary table header.  	The number of elements implied by the dimensions keyword must not 	exceed the number of elements stored in the file.   Side effects: 	If the DIMENSIONS keyword is used, then the number of data points read 	in may be less than the number of points stored in the table.  	If there are no elements to read in (the number of elements is zero), 	then the program sets !ERR to -1, and DATA is unmodified.   Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, Jan 1992. 	W. Thompson, Feb 1992, modified to support variable length arrays. 	W. Thompson, Jun 1992, modified way that row ranges are read in.  No 			       longer works reiteratively. 	W. Thompson, Jun 1992, fixed bug where NANVALUE would be modified by 			       TSCAL and TZERO keywords. 	W. Thompson, Jun 1992, fixed bug when reading character strings. 			       Treats dimensions better when reading multiple 			       rows.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 30 June 1993. 		Added overwrite keyword to REFORM call to speed up. 	Version 3, William Thompson, GSFC, 21 July 1993. 		Fixed bug with variable length arrays. 	Version 4, William Thompson, GSFC, 29 October 1993. 		Added error message for not finding column by name. 	Version 5, William Thompson, GSFC, 31 May 1994 		Added ERRMSG keyword.        Version 6, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined. 	Version 7, William Thompson, GSFC, 29 December 1994 		Fixed bug where single element dimensions were lost. 	Version 8, William Thompson, GSFC, 20 March 1995 		Fixed bug introduced in version 7. 	Version 9, Wayne Landsman, GSFC, 3 July 1996 		Fixed bug involving use of virtual keyword. 	Version 10, William Thompson, GSFC, 31-Jan-1997 		Added call to WHERE_NEGZERO. 	Version 11, Wayne Landsman, GSFC, 12 Aug, 1997 		Use IDL dcomplex datatype if needed 	Version 12, Wayne Landmsan, GSFC, 20 Feb, 1998 		Remove call to WHERE_NEGZERO (now part of IEEE_TO_HOST) 	Version 13, 18 Nov 1999, CM, Add NOIEEE keyword 	Version 14, 21 Aug 2000, William Thompson, GSFC 		Catch I/O errors        Version 15, W. Landsman GSFC 10 Dec 2009                 Fix Dimension keyword, remove  IEEE_TO_HOST  Version     :        Version 15, 10 Dec 2009  ", "NOSCALEVIRTUALDIMENSIONSNANVALUEERRMSGNOIEEEUNITDATACOLROW", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbreadm.html", "fxbreadm.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbreadm.pro", "", "", " NAME:        FXBREADM  PURPOSE:        Read multiple columns/rows from a disk FITS binary table file.  EXPLANATION :        A call to FXBREADM will read data from multiple rows and        multiple columns in a single procedure call.  Up to forty-nine        columns may be read in a single pass; the number of rows is        limited essentially by available memory.  The file should have        already been opened with FXBOPEN.  FXBREADM optimizes reading        multiple columns by first reading a large chunk of data from        the FITS file directly, and then slicing the data into columns        within memory.  FXBREADM can read variable-length arrays (see        below).         The number of columns is limited to 49 if data are passed by        positional argument.  However, this limitation can be overcome        by having FXBREADM return the data in an array of pointers.        The user should set the PASS_METHOD keyword to 'POINTER', and an        array of pointers to the data will be returned in the POINTERS keyword.        The  user is responsible for freeing the pointers; however,        FXBREADM will reuse any pointers  passed into the procedure, and        hence any pointed-to data will be destroyed.         FXBREADM can also read variable-length columns from FITS        binary tables.  Since such data is not of a fixed size, it is        returned as a structure.  The structure has the following        elements:                VARICOL:    ;; Flag: variable length column (= 1)               N_ELEMENTS: ;; Total number of elements returned               TYPE:       ;; IDL data type code (integer)               N_ROWS:     ;; Number of rows read from table (integer)               INDICES:    ;; Indices of each row's data (integer array)               DATA:       ;; Raw data elements (variable type array)         In order to gain access to the Ith row's data, one should        examine DATA(INDICES(I):INDICES(I+1)-1), which is similar in        construct to the REVERSE_INDICES keyword of the HISTOGRAM        function.   CALLING SEQUENCE:        FXBREADM, UNIT, COL, DATA1, [ DATA2, ... DATA48, ROW=, BUFFERSIZE = ]            /NOIEEE, /NOSCALE, /VIRTUAL, NANVALUE=, PASS_METHOD = POINTERS=,            ERRMSG = , WARNMSG = , STATUS = , /DEFAULT_FLOAT]   INPUT PARAMETERS :        UNIT    = Logical unit number corresponding to the file containing the                  binary table.        COL     = An array of columns in the binary table to read data                  from, either as character strings containing column                  labels (TTYPE), or as numerical column indices                  starting from column one.  Outputs     :        DATA1, DATA2...DATA48 = A named variable to accept the data values, one                  for each column.  The columns are stored in order of the                  list in COL.  If the read operation fails for a                  particular column, then the corresponding output Dn                  variable is not altered.  See the STATUS keyword.                  Ignored if PASS_METHOD is 'POINTER'.   OPTIONAL INPUT KEYWORDS:        ROW     = Either row number in the binary table to read data from,                  starting from row one, or a two element array containing a                  range of row numbers to read.  If not passed, then the entire                  column is read in.        /DEFAULT_FLOAT = If set, then scaling with TSCAL/TZERO is done with                  floating point rather than double precision.        /NOIEEE = If set, then then IEEE floating point data will not                 be converted to the host floating point format (and                 this by definition implies NOSCALE).  The user is                 responsible for their own floating point conversion.        /NOSCALE = If set, then the output data will not be scaled using the                  optional TSCAL and TZERO keywords in the FITS header.                  Default is to scale.        VIRTUAL = If set, and COL is passed as a name rather than a number,                  then if the program can't find a column with that name, it                  will then look for a keyword with that name in the header.                  Such a keyword would then act as a  virtual column , with the                  same value for every row.        DIMENSIONS = FXBREADM ignores this keyword.  It is here for 	          compatibility only.        NANVALUE= Value signalling data dropout.  All points corresponding to                  IEEE NaN (not-a-number) are converted to this number.                  Ignored unless DATA is of type float, double-precision or                  complex.        PASS_METHOD = A scalar string indicating method of passing                  data from FXBREADM.  Either 'ARGUMENT' (indicating                  pass by positional argument), or 'POINTER' (indicating                  passing an array of pointers by the POINTERS                  keyword).                  Default: 'ARGUMENT'        POINTERS = If PASS_METHOD is 'POINTER' then an array of IDL                  pointers is returned in this keyword, one for each                  requested column.    Any pointers passed into FXBREADM will                  have their pointed-to data destroyed.  Ultimately the                  user is responsible for deallocating pointers.        BUFFERSIZE = Raw data are transferred from the file in chunks                  to conserve memory.  This is the size in bytes of                  each chunk.  If a value of zero is given, then all                  of the data are transferred in one pass.  Default is                  32768 (32 kB).  OPTIONAL OUTPUT KEYWORDS:        ERRMSG  = If defined and passed, then any error messages will be                  returned to the user in this parameter rather than                  depending on the MESSAGE routine in IDL.  If no errors are                  encountered, then a null string is returned.  In order to                  use this feature, ERRMSG must be defined first, e.g.                         ERRMSG = ''                        FXBREAD, ERRMSG=ERRMSG, ...                        IF ERRMSG NE '' THEN ...        WARNMSG = Messages which are considered to be non-fatal                   warnings  are returned in this output string.                  Note that if some but not all columns are                  unreadable, this is considered to be non-fatal.        STATUS  = An output array containing the status for each                  column read, 1 meaning success and 0 meaning failure.   Calls       :        IEEE_TO_HOST, FXPAR(), WHERENAN()  Common      :        Uses common block FXBINTABLE--see  fxbintable.pro  for more        information.  Restrictions:        The binary table file must have been opened with FXBOPEN.         The data must be consistent with the column definition in the binary        table header.         The row number must be consistent with the number of rows stored in the        binary table header.         Generaly speaking, FXBREADM will be faster than iterative        calls to FXBREAD when (a) a large number of columns is to be        read or (b) the size in bytes of each cell is small, so that        the overhead of the FOR loop in FXBREAD becomes significant.   SIDE EFFECTS:        If there are no elements to read in (the number of elements is zero),        then the program sets !ERR to -1, and DATA is unmodified.   Category    :        Data Handling, I/O, FITS, Generic.  Prev. Hist. :        C. Markwardt, based in concept on FXBREAD version 12 from                               IDLASTRO, but with significant and                               major changes to accomodate the                               multiple row/column technique.  Mostly                               the parameter checking and general data                               flow remain.        C. Markwardt, updated to read variable length arrays, and to                               pass columns by handle or pointer.                               20 Jun 2001        C. Markwardt, try to conserve memory when creating the arrays                               13 Oct 2001    Handle case of GE 50 columns, C. Markwardt, 18 Apr 2002    Handle case where TSCAL/TZERO changes type of column,        C. Markwardt, 23 Feb 2003    Fix bug in handling of FOUND and numeric columns,        C. Markwardt 12 May 2003    Removed pre-V5.0 HANDLE options  W. Landsman July 2004    Fix bug when HANDLE options were removed, July 2004    Handle special cases of TSCAL/TZERO which emulate unsigned       integers, Oct 2003    Add DEFAULT_FLOAT keyword to select float values instead of double       for TSCAL'ed, June 2004    Read 64bit integer columns, E. Hivon, Mar 2008    Add support for columns with TNULLn keywords, C. Markwardt, Apr 2010    Add support for files larger than 2 GB, C. Markwardt, 2012-04-17   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbreadm.html#FXBREADM_CONV", "FXBREADM_CONV", 'routine in <a href="idlastro/fxbreadm.html">fxbreadm.pro</a>', "fxbreadm.pro", "", "FXBREADM_CONV", "", "NOIEEENOSCALEVARICOLNANVALUETZEROTSCALTNULL_VALUETNULL_FLAGDEFAULT_FLOATBBDDCTYPEPERROWNROWS", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/fxbreadm.html#FXBREADM", "FXBREADM", 'routine in <a href="idlastro/fxbreadm.html">fxbreadm.pro</a>', "fxbreadm.pro", "", "FXBREADM", "", "ROWVIRTUALDIMENSIONSNOSCALENOIEEEDEFAULT_FLOATPASS_METHODPOINTERSNANVALUEBUFFERSIZEERRMSGWARNMSGSTATUSUNITCOLD0D1D2D3D4D5D6D7D8D9D10D11D12D13D14D15D16D17D18D19D20D21D22D23D24D25D26D27D28D29D30D31D32D33D34D35D36D37D38D39D40D41D42D43D44D45D46D47", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbstate.html", "fxbstate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbstate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbstate.html#FXBSTATE", "FXBSTATE", 'routine in <a href="idlastro/fxbstate.html">fxbstate.pro</a>', "fxbstate.pro", "", "FXBSTATE", " NAME:       FXBSTATE()   PURPOSE:        Returns the state of a FITS binary table.   Explanation : This procedure returns the state of a FITS binary table that                was either opened for read with the command FXBOPEN, or for                write with the command FXBCREATE.   Use         : Result = FXBSTATE(UNIT)   Inputs      : UNIT    = Logical unit number returned by FXBOPEN routine.                          Must be a scalar integer.   Opt. Inputs : None.   Outputs     : The result of the function is the state of the FITS binary                table that UNIT points to.  This can be one of three values:                         0 = Closed                        1 = Open for read                        2 = Open for write   Opt. Outputs: None.   Keywords    : None.   Calls       : FXBFINDLUN   Common      : Uses common block FXBINTABLE--see  fxbintable.pro  for more                information.   Restrictions: None.   Side effects: If UNIT is an undefined variable, then 0 (closed) is returned.   Category    : Data Handling, I/O, FITS, Generic.   Prev. Hist. : None.   Written     : William Thompson, GSFC, 1 July 1993.   Modified    : Version 1, William Thompson, GSFC, 1 July 1993.   Version     : Version 1, 1 July 1993.        Converted to IDL V5.0   W. Landsman   September 1997  ", "UNIT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbtdim.html", "fxbtdim.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbtdim.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbtdim.html#FXBTDIM", "FXBTDIM", 'routine in <a href="idlastro/fxbtdim.html">fxbtdim.pro</a>', "fxbtdim.pro", "", "FXBTDIM", " NAME: 	FXBTDIM()  Purpose     : 	Parse TDIM-like kwywords.  Explanation : 	Parses the value of a TDIM-like keyword (e.g. TDIMnnn, TDESC, etc.) to 	return the separate elements contained within.  Use         : 	Result = FXBTDIM( TDIM_KEYWORD )  Inputs      : 	TDIM_KEYWORD	= The value of a TDIM-like keyword.  Must be a 			  character string of the form  (value1,value2,...) . 			  If the parentheses characters are missing, then the 			  string is simply returned as is, without any further 			  processing.  Opt. Inputs : 	None.  Outputs     : 	The result of the function is a character string array containing the 	values contained within the keyword parameter.  If a numerical result 	is desired, then simply call, e.g.  		Result = FIX( FXBTDIM( TDIM_KEYWORD ))   Opt. Outputs: 	None.  Keywords    : 	None.  Calls       : 	GETTOK  Common      : 	None.  Restrictions: 	The input parameter must have the proper format.  The separate values 	must not contain the comma character.  TDIM_KEYWORD must not be an 	array.  Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Jan. 1992. 	William Thompson, Jan. 1993, renamed to be compatible with DOS 		limitations.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library.  Version     : 	Version 1, 12 April 1993. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "TDIM_KEYWORD", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbtform.html", "fxbtform.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbtform.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbtform.html#FXBTFORM", "FXBTFORM", 'routine in <a href="idlastro/fxbtform.html">fxbtform.pro</a>', "fxbtform.pro", "", "FXBTFORM", " NAME: 	FXBTFORM  PURPOSE     : 	Returns information about FITS binary table columns.  EXPLANATION : 	Procedure to return information about the format of the various columns 	in a FITS binary table.  Use         : 	FXBTFORM,HEADER,TBCOL,IDLTYPE,FORMAT,NUMVAL,MAXVAL  Inputs      : 	HEADER	= Fits binary table header.  Opt. Inputs : 	None.  Outputs     : 	TBCOL	= Array of starting column positions in bytes. 	IDLTYPE	= IDL data types of columns. 	FORMAT	= Character code defining the data types of the columns. 	NUMVAL	= Number of elements of the data arrays in the columns. 	MAXVAL	= Maximum number of elements for columns containing variable 		  length arrays, or zero otherwise.  Opt. Outputs: 	None.  Keywords    : 	ERRMSG	  = If defined and passed, then any error messages will be 		    returned to the user in this parameter rather than 		    depending on the MESSAGE routine in IDL.  If no errors are 		    encountered, then a null string is returned.  In order to 		    use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBTFORM, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	FXPAR  Common      : 	None.  Restrictions: 	None.  Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, Feb. 1992, from TBINFO by D. Lindler. 	W. Thompson, Jan. 1993, renamed to be compatible with DOS limitations.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 June 1994 		Added ERRMSG keyword.        Version 3, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined. 	Version 4, William Thompson, GSFC, 9 April 1997 		Modified so that variable length arrays can be read, even if 		the maximum array size is not in the header. 	Version 5  Wayne Landsman, GSFC, August 1997 		Recognize double complex array type if since IDL version 4.0        Version 6  Optimized FXPAR call, CM 1999 Nov 18        Version 7: Wayne Landsman, GSFC Feb 2006                Added support for 64bit integer K format  Version:        Version 8: Wayne Landsman GSFC Apr 2010                Remove use of obsolete !ERR variable  ", "ERRMSGHEADERTBCOLIDLTYPEFORMATNUMVALMAXVAL", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbwrite.html", "fxbwrite.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbwrite.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbwrite.html#FXBWRITE", "FXBWRITE", 'routine in <a href="idlastro/fxbwrite.html">fxbwrite.pro</a>', "fxbwrite.pro", "", "FXBWRITE", " NAME: 	FXBWRITE  Purpose     : 	Write a binary data array to a disk FITS binary table file.  Explanation : 	Each call to FXBWRITE will write to the data file, which should already 	have been created and opened by FXBCREATE.  One needs to call this 	routine for every column and every row in the binary table.  FXBFINISH 	will then close the file.  Use         : 	FXBWRITE, UNIT, DATA, COL, ROW  Inputs      : 	UNIT	= Logical unit number corresponding to the file containing the 		  binary table. 	DATA	= IDL data array to be written to the file. 	COL	= Column in the binary table to place data in, starting from 		  column one. 	ROW	= Row in the binary table to place data in, starting from row 		  one.  Opt. Inputs : 	None.  Outputs     : 	None.  Opt. Outputs: 	None.  Keywords    : 	BIT	= Number of bits in bit mask arrays (type  X ).  Only used if 		  the column is of variable size. 	NANVALUE= Value signalling data dropout.  All points corresponding to 		  this value are set to be IEEE NaN (not-a-number).  Ignored 		  unless DATA is of type float, double-precision or complex. 	ERRMSG	= If defined and passed, then any error messages will be 		  returned to the user in this parameter rather than 		  depending on the MESSAGE routine in IDL.  If no errors are 		  encountered, then a null string is returned.  In order to 		  use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBWRITE, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	HOST_TO_IEEE  Common      : 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  Restrictions: 	The binary table file must have been opened with FXBCREATE.  	The data must be consistent with the column definition in the binary 	table header.  	The row number must be consistent with the number of rows stored in the 	binary table header.   Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, Jan 1992, based on WRITEFITS by J. Woffard and W. Landsman. 	W. Thompson, Feb 1992, modified to support variable length arrays. 	W. Thompson, Feb 1992, removed all references to temporary files.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 July 1993. 		Fixed bug with variable length arrays. 	Version 3, William Thompson, GSFC, 31 May 1994 		Added ERRMSG keyword.        Version 4, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined. 	Version 5, Wayne Landsman, GSFC, 12 Aug 1997 		Recognize IDL double complex data type  Version     :        Version 5, 12 August 1997 	Converted to IDL V5.0   W. Landsman   September 1997  ", "BITNANVALUEERRMSGUNITDATACOLROW", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxbwritm.html", "fxbwritm.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxbwritm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxbwritm.html#FXBWRITM", "FXBWRITM", 'routine in <a href="idlastro/fxbwritm.html">fxbwritm.pro</a>', "fxbwritm.pro", "", "FXBWRITM", " NAME: 	FXBWRITM  PURPOSE:        Write multiple columns/rows to a disk FITS binary table file.  EXPLANATION :        A call to FXBWRITM will write multiple rows and multiple        columns to a binary table in a single procedure call.  Up to        fifty columns may be read in a single pass.  The file should        have already been opened with FXBOPEN (with write access) or        FXBCREATE.  FXBWRITM optimizes writing multiple columns by        first writing a large chunk of data to the FITS file all at        once.  FXBWRITM cannot write variable-length arrays; use        FXBWRITE instead.         The number of columns is limited to 50 if data are passed by        positional argument.  However, this limitation can be overcome        by passing pointers to FXBWRITM.  The user should set the PASS_METHOD        keyword to 'POINTER'  as appropriate, and  an array of pointers to        the data in the POINTERS keyword.  The user is responsible for freeing         the pointers.   CALLING SEQUENCE: 	FXBWRITM, UNIT, COL, D0, D1, D2, ..., [ ROW= , PASS_METHOD, NANVALUE=                                POINTERS=,  BUFFERSIZE= ]   INPUT PARAMETERS: 	UNIT	= Logical unit number corresponding to the file containing the 		  binary table. 	D0,..D49= An IDL data array to be written to the file, one for                  each column.      These parameters will be igonred if data                  is passed through the POINTERS keyword. 	COL	= Column in the binary table to place data in.   May be either                  a list of column numbers where the first column is one, or                  a string list of column names.  OPTIONAL INPUT KEYWORDS: 	ROW	= Either row number in the binary table to write data to, 		  starting from row one, or a two element array containing a 		  range of row numbers to write.  If not passed, then 		  the entire column is written. 	NANVALUE= Value signalling data dropout.  All points corresponding to 		  this value are set to be IEEE NaN (not-a-number).  Ignored 		  unless DATA is of type float, double-precision or complex.        NOSCALE = If set, then TSCAL/TZERO values are ignored, and data is                  written exactly as supplied.        PASS_METHOD = A scalar string indicating method of passing                  data to FXBWRITM.  One of 'ARGUMENT' (indicating                  pass by positional argument),  or'POINTER' (indicating                  passing an array of pointers by the POINTERS                  keyword).                  Default:  'ARGUMENT'        POINTERS = If PASS_METHOD is 'POINTER' then the user must pass                  an array of IDL pointers to this keyword, one for                  each column.    Ultimately the user is responsible for                  deallocating pointers.        BUFFERSIZE = Data are transferred in chunks to conserve                  memory.  This is the size in bytes of each chunk.                  If a value of zero is given, then all of the data                  are transferred in one pass.  Default is 32768 (32                  kB).  OPTIONAL OUTPUT KEYWORDS: 	ERRMSG	= If defined and passed, then any error messages will be 		  returned to the user in this parameter rather than 		  depending on the MESSAGE routine in IDL.  If no errors are 		  encountered, then a null string is returned.  In order to 		  use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXBWRITE, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...        WARNMSG = Messages which are considered to be non-fatal                   warnings  are returned in this  output string.        STATUS  = An output array containing the status for each                  read, 1 meaning success and 0 meaning failure.   PROCEDURE CALLS:       None.  EXAMPLE:       Write a binary table 'sample.fits' giving 43 X,Y positions and a       21 x 21 PSF at each position:        (1) First, create sample values       x = findgen(43) & y = findgen(43)+1 & psf = randomn(seed,21,21,43)        (2) Create primary header, write it to disk, and make extension header       fxhmake,header,/initialize,/extend,/date       fxwrite,'sample.fits',header       fxbhmake,header,43,'TESTEXT','Test binary table extension'        (3) Fill extension header with desired column names       fxbaddcol,1,header,x[0],'X'             ;Use first element in each array       fxbaddcol,2,header,y[0],'Y'             ;to determine column properties       fxbaddcol,3,header,psf[*,*,0],'PSF'        (4) Write extension header to FITS file       fxbcreate,unit,'sample.fits',header        (5) Use FXBWRITM to write all data to the extension in a single call       fxbwritm,unit,['X','Y','PSF'], x, y, psf       fxbfinish,unit                 ;Close the file   COMMON BLOCKS: 	Uses common block FXBINTABLE--see  fxbintable.pro  for more 	information.  RESTRICTIONS: 	The binary table file must have been opened with FXBCREATE or        FXBOPEN (with write access).  	The data must be consistent with the column definition in the binary 	table header.  	The row number must be consistent with the number of rows stored in the 	binary table header.         A PASS_METHOD of POINTER does not use the EXECUTE() statement and can be        used with the IDL Virtual Machine.   However, the EXECUTE() statement is        used when the PASS_METHOD is by arguments.  CATEGORY: 	Data Handling, I/O, FITS, Generic.  PREVIOUS HISTORY:        C. Markwardt, based on FXBWRITE and FXBREADM (ver 1), Jan 1999  WRITTEN: 	Craig Markwardt, GSFC, January 1999.  MODIFIED:        Version 1, Craig Markwardt, GSFC 18 January 1999.                Documented this routine, 18 January 1999.        C. Markwardt, added ability to pass by handle or pointer.                Some bug fixes, 20 July 2001        W. Landsman/B.Schulz  Allow more than 50 arguments when using pointers        W. Landsman  Remove pre-V5.0 HANDLE options      July 2004        W. Landsman Remove EXECUTE() call with POINTERS   May 2005        C. Markwardt Allow the output table to have TSCAL/TZERO           keyword values; if that is the case, then the passed values           will be quantized to match those scale factors before being           written.  Sep 2007        E. Hivon: write 64bit integer and double precison columns, Mar 2008        C. Markwardt Allow unsigned integers, which have special           TSCAL/TZERO values.  Feb 2009        C. Markwardt Add support for files larger than 2 GB, 2012-04-17   ", "NOIEEENOSCALEPOINTERSPASS_METHODROWNANVALUEBUFFERSIZEERRMSGWARNMSGSTATUSUNITCOLD0D1D2D3D4D5D6D7D8D9D10D11D12D13D14D15D16D17D18D19D20D21D22D23D24D25D26D27D28D29D30D31D32D33D34D35D36D37D38D39D40D41D42D43D44D45D46D47D48D49", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxfindend.html", "fxfindend.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxfindend.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxfindend.html#FXFINDEND", "FXFINDEND", 'routine in <a href="idlastro/fxfindend.html">fxfindend.pro</a>', "fxfindend.pro", "", "FXFINDEND", " NAME: 	FXFINDEND  Purpose     : 	Find the end of a FITS file.  Explanation : 	This routine finds the end of the last logical record in a FITS file, 	which may be different from that of the physical end of the file.  Each 	FITS header is read in and parsed, and the file pointer is moved to 	where the next FITS extension header would be if there is one, or to 	the end of the file if not.  Use         : 	FXFINDEND, UNIT [, EXTENSION]  Inputs      : 	UNIT	= Logical unit number for the opened file.  Opt. Inputs : 	None.  Outputs     : 	None.  Opt. Outputs:        EXTENSION = The extension number that a new extension would                    have if placed at the end of the file.  Keywords    : 	None.  Calls       : 	FXHREAD, FXPAR  Common      : 	None.  Restrictions: 	The file must have been opened for block I/O.  There must not be any 	FITS  special records  at the end of the file.  Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Feb. 1992.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library.  Version     : 	Version 1, 12 April 1993. 	Converted to IDL V5.0   W. Landsman   September 1997        Added EXTENSION parameter, CM 1999 Nov 18        Allow for possible 64bit integer number of bytes W. Landsman Nov 2007        make Ndata a long64 to deal with large files. E. Hivon Mar 2008  ", "UNITEXTENSION", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxhclean.html", "fxhclean.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxhclean.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxhclean.html#FXHCLEAN", "FXHCLEAN", 'routine in <a href="idlastro/fxhclean.html">fxhclean.pro</a>', "fxhclean.pro", "", "FXHCLEAN", " NAME: 	FXHCLEAN  Purpose     : 	Removes required keywords from FITS header.  Explanation : 	Removes any keywords relevant to array structure from a FITS header, 	preparatory to recreating it with the proper values.  Use         : 	FXHCLEAN, HEADER  Inputs      : 	HEADER	= FITS header to be cleaned.  Opt. Inputs : 	None.  Outputs     : 	HEADER	= The cleaned FITS header is returned in place of the input 		  array.  Opt. Outputs: 	None.  Keywords    : 	ERRMSG	= If defined and passed, then any error messages will be 		  returned to the user in this parameter rather than 		  depending on the MESSAGE routine in IDL.  If no errors are 		  encountered, then a null string is returned.  In order to 		  use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXHCLEAN, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	SXDELPAR, FXPAR  Common      : 	None.  Restrictions: 	HEADER must be a string array containing a properly formatted FITS 	header.  Side effects: 	Warning:  when cleaning a binary table extension header, not all of the 	keywords pertaining to columns in the table may be removed.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Jan 1992.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 31 May 1994 		Added ERRMSG keyword.        Version 3, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined. 	Version 4, William Thompson, GSFC, 30 December 1994 		Added TCUNIn to list of column keywords to be removed.  Version     :        Version 4, 30 December 1994 	Converted to IDL V5.0   W. Landsman   September 1997  ", "ERRMSGHEADER", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxhmake.html", "fxhmake.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxhmake.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxhmake.html#FXHMAKE", "FXHMAKE", 'routine in <a href="idlastro/fxhmake.html">fxhmake.pro</a>', "fxhmake.pro", "", "FXHMAKE", " NAME: 	FXHMAKE  Purpose     : 	Create a basic FITS header array.  Explanation : 	Creates a basic header array with all the required keywords.  This 	defines a basic structure which can then be added to or modified by 	other routines.  Use         : 	FXHMAKE, HEADER  [, DATA ]  Inputs      : 	None required.  Opt. Inputs : 	DATA	= IDL data array to be written to file.    It must be in the                   primary data unit unless the XTENSION keyword is supplied. 		  This array is used to determine the values of the BITPIX and                  NAXIS, etc. keywords.  		  If not passed, then BITPIX is set to eight, NAXIS is set to 		  zero, and no NAXISnnn keywords are included in this 		  preliminary header.  Outputs     : 	HEADER = String array containing FITS header.  Opt. Outputs: 	None.  Keywords    : 	INITIALIZE = If set, then the header is completely initialized, and any 		     previous entries are lost. 	EXTEND	= If set, then the keyword EXTEND is inserted into the file, 		  with the value of  T  (true). 	DATE	= If set, then the DATE keyword is added to the header. 	ERRMSG	= If defined and passed, then any error messages will be 		  returned to the user in this parameter rather than 		  depending on the MESSAGE routine in IDL.  If no errors are 		  encountered, then a null string is returned.  In order to 		  use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXHMAKE, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...        XTENSION - If set, then the header is appropriate for an image                   extension, rather than the primary data unit.  Calls       : 	GET_DATE, FXADDPAR, FXHCLEAN  Common      : 	None.  Restrictions: 	Groups are not currently supported.  Side effects: 	BITPIX, NAXIS, etc. are defined such that complex arrays are stored as 	floating point, with an extra first dimension of two elements (real and 	imaginary parts).  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Jan 1992, from SXHMAKE by D. Lindler and M. Greason. 	Differences include:  		* Use of FITS standard (negative BITPIX) to signal floating 		  point numbers instead of (SDAS/Geis) DATATYPE keyword. 		* Storage of complex numbers as pairs of real numbers. 		* Support for EXTEND keyword, and for cases where there is no 		  primary data array. 		* Insertion of DATE record made optional.  Only required FITS 		  keywords are inserted automatically.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 21 June 1994 		Added ERRMSG keyword.        Version 3, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined. 	Version 4, Wayne Landsman, GSFC, 12 August 1997 		Recognize double complex data type 	Converted to IDL V5.0   W. Landsman   September 1997        Version 6, William Thompson, GSFC, 22 September 2004                Recognize unsigned integer types.        Version 6.1, C. Markwardt, GSFC, 19 Jun 2005                Add the XTENSION keyword, which writes an XTENSION                keyword instead of SIMPLE.  Version     :        Version 6.1, 19 June 2005  ", "EXTENDDATEINITIALIZEERRMSGXTENSIONHEADERDATA", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxhmodify.html", "fxhmodify.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxhmodify.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxhmodify.html#FXHMODIFY", "FXHMODIFY", 'routine in <a href="idlastro/fxhmodify.html">fxhmodify.pro</a>', "fxhmodify.pro", "", "FXHMODIFY", " NAME:        FXHMODIFY  PURPOSE     :        Modify a FITS header in a file on disk.  Explanation :        Opens a FITS file, and adds or modifies a parameter in the FITS header.        Can be used for either the main header, or for an extension header.        The modification is performed directly on the disk file.  Use         :        FXHMODIFY, FILENAME, NAME, VALUE, COMMENT  Inputs      :        FILENAME = String containing the name of the file to be read.         NAME    = Name of parameter, scalar string  If NAME is already in the                  header the value and possibly comment fields are modified.                  Otherwise a new record is added to the header.  If NAME is                  equal to either  COMMENT  or  HISTORY  then the value will be                  added to the record without replacement.  In this case the                  comment parameter is ignored.         VALUE   = Value for parameter.  The value expression must be of the                  correct type, e.g. integer, floating or string.  String                  values of 'T' or 'F' are considered logical values.   Opt. Inputs :        COMMENT = String field.  The '/' is added by this routine.  Added                  starting in position 31.  If not supplied, or set equal to ''                  (the null string), then any previous comment field in the                  header for that keyword is retained (when found).  Outputs     :        None.  Opt. Outputs:        None.  Keywords    :        EXTENSION = Either the number of the FITS extension, starting with the                    first extension after the primary data unit being one; or a                    character string containing the value of EXTNAME to search                    for.  If not passed, then the primary FITS header is                    modified.         BEFORE  = Keyword string name.  The parameter will be placed before the                  location of this keyword.  For example, if BEFORE='HISTORY'                  then the parameter will be placed before the first history                  location.  This applies only when adding a new keyword;                  keywords already in the header are kept in the same position.         AFTER   = Same as BEFORE, but the parameter will be placed after the                  location of this keyword.  This keyword takes precedence over                  BEFORE.         FORMAT  = Specifies FORTRAN-like format for parameter, e.g.  F7.3 .  A                  scalar string should be used.  For complex numbers the format                  should be defined so that it can be applied separately to the                  real and imaginary parts.        ERRMSG  = If defined and passed, then any error messages will be                  returned to the user in this parameter rather than                  depending on the MESSAGE routine in IDL.  If no errors are                  encountered, then a null string is returned.  In order to                  use this feature, ERRMSG must be defined first, e.g.                         ERRMSG = ''                        FXHMODIFY, ERRMSG=ERRMSG, ...                        IF ERRMSG NE '' THEN ...   Calls       :        FXHREAD, FXPAR, FXADDPAR, BLKSHIFT  Restrictions:        This routine can not be used to modify any of the keywords that control        the structure of the FITS file, e.g. BITPIX, NAXIS, PCOUNT, etc.  Doing        so could corrupt the readability of the FITS file.  Example:        Modify the name 'OBJECT' keyword in the primary FITS header of a FITS        file 'spec98.ccd' to contain the value 'test domeflat'         IDL&gt; fxhmodify, 'spec98.ccd', 'OBJECT', 'test domeflat'   Side effects:        If adding a record to the FITS header would increase the        number of 2880 byte records stored on disk, then the file is        enlarged before modification, unless the NOGROW keyword is passed.   Category    :        Data Handling, I/O, FITS, Generic.  Prev. Hist. :        None.  Written     :        William Thompson, GSFC, 3 March 1994.  Modified    :        Version 1, William Thompson, GSFC, 3 March 1994.        Version 2, William Thompson, GSFC, 31 May 1994                Added ERRMSG keyword.        Version 3, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined.       Version 3.1 Wayne Landsman GSFC   17 March 2006                Fix problem in BLKSHIFT call if primary header  extended        Version 3.2 W. Landsman 14 November 204                Allow for need for 64bit number of bytes ; Version     :        Version 3.2, 14 Nov 2007  ", "BEFOREAFTERFORMATEXTENSIONERRMSGNOGROWFILENAMENAMEVALUECOMMENT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxhread.html", "fxhread.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxhread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxhread.html#FXHREAD", "FXHREAD", 'routine in <a href="idlastro/fxhread.html">fxhread.pro</a>', "fxhread.pro", "", "FXHREAD", " NAME: 	FXHREAD  Purpose     :        Reads a FITS header from an opened disk file.  Explanation :        Reads a FITS header from an opened disk file.  Use         : 	FXHREAD, UNIT, HEADER  [, STATUS ]  Inputs      : 	UNIT	= Logical unit number.  Opt. Inputs :   Outputs     : 	HEADER	= String array containing the FITS header.  Opt. Outputs: 	STATUS	= Condition code giving the status of the read.  Normally, this 		  is zero, but is set to !ERR if an error occurs, or if the 		  first byte of the header is zero (ASCII null).  Keywords    : 	None.  Calls       : 	None.  Common      : 	None.  Restrictions: 	The file must already be positioned at the start of the header.  It 	must be a proper FITS file.  Side effects: 	The file ends by being positioned at the end of the FITS header, unless 	an error occurs.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, Feb 1992, from READFITS by J. Woffard and W. Landsman. 	W. Thompson, Aug 1992, added test for SIMPLE keyword.  Written     : 	William Thompson, GSFC, February 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library.  Version     : 	Version 1, 12 April 1993. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "UNITHEADERSTATUS", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxmove.html", "fxmove.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxmove.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxmove.html#FXMOVE", "FXMOVE", 'routine in <a href="idlastro/fxmove.html">fxmove.pro</a>', "fxmove.pro", "", "FXMOVE", " NAME:      FXMOVE  PURPOSE:      Skip to a specified extension number or name in a FITS file   CALLING SEQUENCE:      STATUS=FXMOVE(UNIT, EXT, /Silent)      STATUS=FXMOVE(UNIT, EXTNAME, /Silent, EXT_NO=, ERRMSG= )   INPUT PARAMETERS:      UNIT     = An open unit descriptor for a FITS data stream.      EXTEN   = Number of extensions to skip.                               or              Scalar string giving extension name (in the EXTNAME keyword)  OPTIONAL INPUT PARAMETER:      /SILENT - If set, then any messages about invalid characters in the                FITS file are suppressed.  OPTIONAL OUTPUT PARAMETER:        ERRMSG  = If this keyword is present, then any error messages will be                  returned to the user in this parameter rather than                  depending on the MESSAGE routine in IDL.  If no errors are                  encountered, then a null string is returned.        EXT_NO - Extension number, scalar integer, useful if the user supplied                 an extension name in the EXTEN parameter  RETURNS:      0 if successful.     -1 if an error is encountered.   COMMON BLOCKS:       None.  SIDE EFFECTS:       Repositions the file pointer.  PROCEDURE:       Each FITS header is read in and parsed, and the file pointer is moved       to where the next FITS extension header until the desired       extension is reached.  PROCEDURE CALLS:       FXPAR(), MRD_HREAD, MRD_SKIP  MODIFICATION HISTORY:       Extracted from FXPOSIT 8-March-2000 by T. McGlynn       Added /SILENT keyword  14-Dec-2000 by W. Landsman       Save time by not reading the full header  W. Landsman   Feb. 2003       Allow extension name to be specified, added EXT_NO, ERRMSG keywords          W. Landsman  December 2006       Make search for EXTNAME case-independent  W.Landsman March 2007       Avoid round-off error for very large extensions N. Piskunov Dec 2007       Assume since V6.1 (/INTEGER keyword available to PRODUCT() ) Dec 2007       Capture error message from MRD_HREAD (must be used with post-June 2009         version of MRD-HREAD)   W. Landsman  July 2009  ", "SILENTEXT_NOERRMSGUNITEXTEN", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxpar.html", "fxpar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxpar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxpar.html#FXPAR", "FXPAR", 'routine in <a href="idlastro/fxpar.html">fxpar.pro</a>', "fxpar.pro", "", "FXPAR", " NAME:         FXPAR()  PURPOSE:        Obtain the value of a parameter in a FITS header.  EXPLANATION:        The first 8 chacters of each element of HDR are searched for a match to        NAME.  If the keyword is one of those allowed to take multiple values        ( HISTORY ,  COMMENT , or            (blank)), then the value is taken        as the next 72 characters.  Otherwise, it is assumed that the next        character is  = , and the value (and optional comment) is then parsed        from the last 71 characters.  An error occurs if there is no parameter        with the given name.         If the value is too long for one line, it may be continued on to the        the next input card, using the CONTINUE Long String Keyword convention.        For more info, http://fits.gsfc.nasa.gov/registry/continue_keyword.html         Complex numbers are recognized as two numbers separated by one or more        space characters.         If a numeric value has no decimal point (or E or D) it is returned as        type LONG.  If it contains more than 8 numerals, or contains the        character 'D', then it is returned as type DOUBLE.  Otherwise it is        returned as type FLOAT.    If an integer is too large to be stored as        type LONG, then it is returned as DOUBLE.   CALLING SEQUENCE:        Result = FXPAR( HDR, NAME  [, ABORT, COUNT=, COMMENT=, /NOCONTINUE ] )         Result = FXPAR(HEADER,'DATE')           ;Finds the value of DATE        Result = FXPAR(HEADER,'NAXIS*')         ;Returns array dimensions as                                                ;vector  REQUIRED INPUTS:        HDR     = FITS header string array (e.g. as returned by FXREAD).  Each                  element should have a length of 80 characters        NAME    = String name of the parameter to return.  If NAME is of the                  form 'keyword*' then an array is returned containing values                  of keywordN where N is an integer.  The value of keywordN                  will be placed in RESULT(N-1).  The data type of RESULT will                  be the type of the first valid match of keywordN                  found, unless DATATYPE is given.  OPTIONAL INPUT:        ABORT   = String specifying that FXPAR should do a RETALL if a                  parameter is not found.  ABORT should contain a string to be                  printed if the keyword parameter is not found.  If not                  supplied, FXPAR will return with a negative !err if a keyword                  is not found.        DATATYPE = A scalar value, indicating the type of vector                   data.  All keywords will be cast to this type.                   Default: based on first keyword.                   Example: DATATYPE=0.0D (cast data to double precision)        START   = A best-guess starting position of the sought-after                  keyword in the header.  If specified, then FXPAR                  first searches for scalar keywords in the header in                  the index range bounded by START-PRECHECK and                  START+POSTCHECK.  This can speed up keyword searches                  in large headers.  If the keyword is not found, then                  FXPAR searches the entire header.                   If not specified then the entire header is searched.                  Searches of the form 'keyword*' also search the                  entire header and ignore START.                   Upon return START is changed to be the position of                  the newly found keyword.  Thus the best way to                  search for a series of keywords is to search for                  them in the order they appear in the header like                  this:                         START = 0L                        P1 = FXPAR('P1', START=START)                        P2 = FXPAR('P2', START=START)        PRECHECK = If START is specified, then PRECHECK is the number                   of keywords preceding START to be searched.                   Default: 5        POSTCHECK = If START is specified, then POSTCHECK is the number                    of keywords after START to be searched.                    Default: 20  OUTPUT:        The returned value of the function is the value(s) associated with the        requested keyword in the header array.         If the parameter is complex, double precision, floating point, long or        string, then the result is of that type.  Apostrophes are stripped from        strings.  If the parameter is logical, 1 is returned for T, and 0 is        returned for F.         If NAME was of form 'keyword*' then a vector of values are returned.   OPTIONAL INPUT KEYWORDS:        /NOCONTINUE = If set, then continuation lines will not be read, even                  if present in the header  OPTIONAL OUTPUT KEYWORD:        COUNT   = Optional keyword to return a value equal to the number of                  parameters found by FXPAR.        COMMENTS= Array of comments associated with the returned values.   PROCEDURE CALLS:        GETTOK(), VALID_NUM  SIDE EFFECTS:         The system variable !err is set to -1 if parameter not found, 0 for a        scalar value returned.  If a vector is returned it is set to the number        of keyword matches found.         If a keyword occurs more than once in a header, a warning is given,        and the first occurence is used.  However, if the keyword is  HISTORY ,         COMMENT , or            (blank), then multiple values are returned.   NOTES: 	The functions SXPAR() and FXPAR() are nearly identical, although 	FXPAR() has slightly more sophisticated parsing.   There is no 	particular reason for having two nearly identical procedures, but 	both are too widely used to drop either one.   REVISION HISTORY:        Version 1, William Thompson, GSFC, 12 April 1993.                Adapted from SXPAR        Version 2, William Thompson, GSFC, 14 October 1994                Modified to use VALID_NUM instead of STRNUMBER.  Inserted                additional call to VALID_NUM to trap cases where character                strings did not contain quotation marks.        Version 3, William Thompson, GSFC, 22 December 1994                Fixed bug with blank keywords, following suggestion by Wayne                Landsman.        Version 4, Mons Morrison, LMSAL, 9-Jan-98                Made non-trailing ' for string tag just be a warning (not                a fatal error).  It was needed because  sxaddpar  had an                error which did not write tags properly for long strings                (over 68 characters)        Version 5, Wayne Landsman GSFC, 29 May 1998                Fixed potential problem with overflow of LONG values        Version 6, Craig Markwardt, GSFC, 28 Jan 1998,                Added CONTINUE parsing        Version 7, Craig Markwardt, GSFC, 18 Nov 1999,                Added START, PRE/POSTCHECK keywords for better                performance        Version 8, Craig Markwardt, GSFC, 08 Oct 2003,                Added DATATYPE keyword to cast vector keywords type        Version 9, Paul Hick, 22 Oct 2003, Corrected bug (NHEADER-1)        Version 10, W. Landsman, GSFC  2 May 2012                Keywords of form  name_0  cound confuse vector extractions  ", "COUNTCOMMENTSTARTPRECHECKPOSTCHECKNOCONTINUEDATATYPEHDRNAMEABORT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxparpos.html", "fxparpos.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxparpos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxparpos.html#FXPARPOS", "FXPARPOS", 'routine in <a href="idlastro/fxparpos.html">fxparpos.pro</a>', "fxparpos.pro", "", "FXPARPOS", " NAME: 	FXPARPOS()  Purpose     : 	Finds position to insert record into FITS header.  Explanation : 	Finds the position to insert a record into a FITS header.  Called from 	FXADDPAR.  Use         : 	Result = FXPARPOS(KEYWRD, IEND  [, BEFORE=BEFORE ]  [, AFTER=AFTER ])  Inputs      : 	KEYWRD	= Array of eight-character keywords in header. 	IEND	= Position of END keyword.  Opt. Inputs : 	None.  Outputs     : 	Result of function is position to insert record.  Opt. Outputs: 	None.  Keywords    : 	BEFORE	= Keyword string name.  The parameter will be placed before the 		  location of this keyword.  For example, if BEFORE='HISTORY' 		  then the parameter will be placed before the first history 		  location.  This applies only when adding a new keyword; 		  keywords already in the header are kept in the same position.  	AFTER	= Same as BEFORE, but the parameter will be placed after the 		  location of this keyword.  This keyword takes precedence over 		  BEFORE.  	If neither BEFORE or AFTER keywords are passed, then IEND is returned.   Calls       : 	None.  Common      : 	None.  Restrictions: 	KEYWRD and IEND must be consistent with the relevant FITS header.  Side effects: 	None.  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	William Thompson, Jan 1992.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library.  Version     : 	Version 1, 12 April 1993. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "BEFOREAFTERKEYWRDIEND", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxposit.html", "fxposit.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxposit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxposit.html#FXPOSIT", "FXPOSIT", 'routine in <a href="idlastro/fxposit.html">fxposit.pro</a>', "fxposit.pro", "", "FXPOSIT", " NAME:      FXPOSIT  PURPOSE:      Return the unit number of a FITS file positioned at specified extension  EXPLANATION:      The FITS file will be ready to be read at the beginning of the      specified extension.    Either an extension number or extension name      can be specified.   Called by headfits.pro, mrdfits.pro       Modified in March 2009 to set the /SWAP_IF_LITTLE_ENDIAN keyword      when opening a file, and **may not be compatible with earlier versions**  CALLING SEQUENCE:      unit=FXPOSIT(FILE, EXT_NO_OR_NAME, /READONLY, COMPRESS=program,                        UNIXPIPE=, ERRMSG= , EXTNUM= , UNIT=, /SILENT                         /FPACK, /NO_FPACK   INPUT PARAMETERS:      FILE    = FITS file name, scalar string.    If an empty string is supplied               then the user will be prompted for the file name.   The user               will also be prompted if a wild card is supplied, and more than               one file matches the wildcard.      EXT_NO_OR_NAME  = Either the extension to be moved to (scalar                nonnegative integer) or the name of the extension to read                (scalar string)   RETURNS:      Unit number of file or -1 if an error is detected.   OPTIONAL INPUT KEYWORD PARAMETER:      COMPRESS - If this keyword is set and non-zero, then then treat                 the file as compressed.  If 1 assume a gzipped file.                 and use IDLs internal decompression facility.    For Unix                 compressed or bzip2 compressed files spawn off a process to                 decompress and use its output as the FITS stream.  If the                 keyword is not 1, then use its value as a string giving the                 command needed for decompression.      /FPACK - Signal that the file is compressed with the FPACK software.                http://heasarc.gsfc.nasa.gov/fitsio/fpack/ ) By default,                (FXPOSIT will assume that if the file name extension ends in               .fz that it is fpack compressed.)     The FPACK software must                be installed on the system      /NO_FPACK - The unit will only be used to read the FITS header.  In                  that case FPACK compressed files need not be uncompressed.       LUNIT -    Integer giving the file unit number.    Use this keyword if                 you want to override the default use of GET_LUN to obtain                 a unit number.      /READONLY - If this keyword is set and non-zero, then OPENR rather                 than OPENU will be used to open the FITS file.    Note that                  compressed files are always set to /READONLY      /SILENT    If set, then suppress any messages about invalid characters                 in the FITS file.   OPTIONAL OUTPUT KEYWORDS:        EXTNUM - Nonnegative integer give the extension number actually read                Useful only if the extension was specified by name.        ERRMSG  = If this keyword is present, then any error messages will be                  returned to the user in this parameter rather than                  depending on the MESSAGE routine in IDL.  If no errors are                  encountered, then a null string is returned.        UNIXPIPE - If set to 1, then the FITS file was opened with a UNIX pipe                 rather than with the OPENR command.    This is only required                  when reading a FPACK, bzip or Unix compressed file.   Note                  that automatic byteswapping cannnot be set for a Unix pipe,                  since the SWAP_IF_LITTLE_ENDIAN keyword is only available for the                  OPEN command, and it is the responsibilty of the calling                  routine to perform the byteswapping.  SIDE EFFECTS:       Opens and returns a file unit.  PROCEDURE:       Open the appropriate file, or spawn a command and intercept       the output.       Call FXMOVE to get to the appropriate extension.  PROCEDURE CALLS:       FXMOVE()  MODIFICATION HISTORY:       Derived from William Thompson's FXFINDEND routine.       Modified by T.McGlynn, 5-October-1994.        Modified by T.McGlynn, 25-Feb-1995 to handle compressed           files.  Pipes cannot be accessed using FXHREAD so           MRD_HREAD was written.        W. Landsman 23-Apr-1997    Force the /bin/sh shell when uncompressing        T. McGlynn  03-June-1999   Use /noshell option to get rid of processes left by spawn.                                   Use findfile to retain ability to use wildcards        W. Landsman 03-Aug-1999    Use EXPAND_TILDE under Unix to find file        T. McGlynn  04-Apr-2000    Put reading code into FXMOVE,                                   additional support for compression from D.Palmer.        W. Landsman/D.Zarro 04-Jul-2000    Added test for !VERSION.OS EQ 'Win32' (WinNT)        W. Landsman    12-Dec-2000 Added /SILENT keyword        W. Landsman April 2002     Use FILE_SEARCH for V5.5 or later        W. Landsman Feb 2004       Assume since V5.3 (OPENR,/COMPRESS available)        W. Landsman,W. Thompson, 2-Mar-2004, Add support for BZIP2        W. Landsman                Don't leave open file if an error occurs        W. Landsman  Sep 2004      Treat FTZ extension as gzip compressed        W. Landsman  Feb 2006      Removed leading spaces (prior to V5.5)        W. Landsman  Nov 2006      Allow specification of extension name                                   Added EXTNUM, ERRMSG keywords        W. Landsman/N.Piskunov Dec 2007  Added LUNIT keyword        W. Landsman     Mar 2009   OPEN with /SWAP_IF_LITTLE_ENDIAN                                   Added UNIXPIPE output keyword        N. Rich        May 2009    Check if filename is an empty string        W. Landsman   May 2009     Support FPACK compressed files                                   Added /FPACK, /HEADERONLY keywords        W.Landsman    July 2009    Deprecated /HEADERONLY add /NO_FPACK        W.Landsman    July 2011    Check for SIMPLE in first 8 chars                Use gunzip to decompress Unix. Z file since compress utility                often not installed anymore)        W. Landsman   October 2012 Add .fz extension if /FPACK set  ", "readonlyCOMPRESSSILENTEXTNUMERRMSGLUNITUNIXPIPEFPACKNO_FPACKHEADERONLYXFILEEXT_NO", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxread.html", "fxread.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxread.html#FXREAD", "FXREAD", 'routine in <a href="idlastro/fxread.html">fxread.pro</a>', "fxread.pro", "", "FXREAD", " NAME: 	FXREAD  Purpose     : 	Read basic FITS files.  Explanation : 	Read an image array from a disk FITS file.  Optionally allows the 	user to read in only a subarray and/or every Nth pixel.  Use         : 	FXREAD, FILENAME, DATA  [, HEADER  [, I1, I2  [, J1, J2 ]]  [, STEP]]  Inputs      : 	FILENAME = String containing the name of the file to be read.  Opt. Inputs : 	I1,I2	 = Data range to read in the first dimension.  If passed, then 		   HEADER must also be passed.  If not passed, or set to -1,-1, 		   then the entire range is read. 	J1,J2	 = Data range to read in the second dimension.  If passed, then 		   HEADER and I1,J2 must also be passed.  If not passed, or set 		   to -1,-1, then the entire range is read. 	STEP	 = Step size to use in reading the data.  If passed, then 		   HEADER must also be passed.  Default value is 1.  Ignored if 		   less than 1.  Outputs     : 	DATA	 = Data array to be read from the file.  Opt. Outputs: 	HEADER	 = String array containing the header for the FITS file.  Keywords    :        /COMPRESS - If this keyword is set and non-zero, then then treat                 the file as gzip compressed.    By default FXREAD assumes                 the file is gzip compressed if it ends in  .gz  	NANVALUE = Value signalling data dropout.  All points corresponding to 		   IEEE NaN (not-a-number) are set to this value.  Ignored 		   unless DATA is of type float or double-precision.        EXTENSION = FITS extension.  It can be a scalar integer,                 indicating the extension number (extension number 0                 is the primary HDU).  It can also be a scalar string,                 indicating the extension name (EXTNAME keyword).                 Default: 0 (primary HDU) 	PROMPT	 = If set, then the optional parameters are prompted for at the 		   keyboard. 	AVERAGE	 = If set, then the array size is reduced by averaging pixels 		   together rather than by subselecting pixels.  Ignored unless 		   STEP is nontrivial.  Note:  this is much slower. 	YSTEP	 = If passed, then STEP is the step size in the 1st dimension, 		   and YSTEP is the step size in the 2nd dimension.  Otherwise, 		   STEP applies to both directions. 	NOSCALE	 = If set, then the output data will not be scaled using the 		   optional BSCALE and BZERO keywords in the FITS header. 		   Default is to scale, if and only if BSCALE and BZERO are 		   present and nontrivial. 	NOUPDATE = If set, then the optional BSCALE and BZERO keywords in the 		   optional HEADER array will not be changed.  The default is 		   to reset these keywords to BSCALE=1, BZERO=0.  Ignored if 		   NOSCALE is set. 	ERRMSG   = If defined and passed, then any error messages will be 		   returned to the user in this parameter rather than 		   depending on the MESSAGE routine in IDL.  If no errors are 		   encountered, then a null string is returned.  In order to 		   use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXREAD, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...        NODATA   = If set, then the array is not read in, but the                   primary header is read.   Calls       : 	GET_DATE, IEEE_TO_HOST, FXADDPAR, FXHREAD, FXPAR, WHERENAN  Common      : 	None.  Restrictions: 	Groups are not supported.  	The optional parameters I1, I2, and STEP only work with one or 	two-dimensional arrays.  J1 and J2 only work with two-dimensional 	arrays.  	Use of the AVERAGE keyword is not compatible with arrays with missing 	pixels.   Side effects: 	If the keywords BSCALE and BZERO are present in the FITS header, and 	have non-trivial values, then the returned array DATA is formed by the 	equation  			DATA = BSCALE*original + BZERO  	However, this behavior can overridden by using the /NOSCALE keyword.  	If the data is scaled, then the optional HEADER array is changed so 	that BSCALE=1 and BZERO=0.  This is so that these scaling parameters 	are not applied to the data a second time by another routine.  Also, 	history records are added storing the original values of these 	constants.  Note that only the returned array is modified--the header 	in the FITS file itself is untouched.  	If the /NOUPDATE keyword is set, however, then the BSCALE and BZERO 	keywords are not changed.  It is then the user's responsibility to 	ensure that these parameters are not reapplied to the data.  In 	particular, these keywords should not be present in any header when 	writing another FITS file, unless the user wants their values to be 	applied when the file is read back in.  Otherwise, FITS readers will 	read in the wrong values for the data array.   Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, May 1992, based in part on READFITS by W. Landsman, and 			       STSUB by M. Greason and K. Venkatakrishna. 	W. Thompson, Jun 1992, added code to interpret BSCALE and BZERO 			       records, and added NOSCALE and NOUPDATE 			       keywords. 	W. Thompson, Aug 1992, changed to call FXHREAD, and to add history 			       records for BZERO, BSCALE.  Minimium IDL Version:        V5.3 (uses COMPRESS keyword to OPEN)  Written     : 	William Thompson, GSFC, May 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 17 November 1993. 		Corrected bug with AVERAGE keyword on non-IEEE compatible 		machines. 		Corrected bug with subsampling on VAX machines. 	Version 3, William Thompson, GSFC, 31 May 1994 		Added ERRMSG keyword.        Version 4, William Thompson, GSFC, 23 June 1994                Modified so that ERRMSG is not touched if not defined.        Version 5, Zarro (SAC/GSFC), 14 Feb 1997                Added I/O error checking        Version 6, 20-May-1998, David Schlegel/W. Thompson                Allow a single pixel to be read in.                Change the signal to read in the entire array to be -1        Version 7 C. Markwardt 22 Sep 2003                If the image is empty (NAXIS EQ 0), or NODATA is set, then                return only the header.        Version 8 W. Landsman  29 June 2004                Added COMPRESS keyword, check for .gz extension        Version 9, William Thompson, 19-Aug-2004                Make sure COMPRESS is treated as a scalar        Version 10, Craig Markwardt, 01 Mar 2004                Add EXTENSION keyword and ability to read different                extensions than the primary one.        Version 11,  W. Landsamn   September 2006                Assume since V5.5, remove VMS support        Version 11.1,  W. Landsamn   November 2007                Allow for possibility number of bytes requires 64 bit integer        Version 12, William Thompson, 18-Jun-2010, update BLANK value.  ", "NANVALUEPROMPTAVERAGEYSTEPNOSCALENOUPDATEERRMSGNODATACOMPRESSEXTENSIONFILENAMEDATAHEADERP1P2P3P4P5", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/fxwrite.html", "fxwrite.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "fxwrite.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/fxwrite.html#FXWRITE", "FXWRITE", 'routine in <a href="idlastro/fxwrite.html">fxwrite.pro</a>', "fxwrite.pro", "", "FXWRITE", " NAME: 	FXWRITE  Purpose     : 	Write a disk FITS file.  Explanation :        Creates or appends to a disk FITS file and writes a FITS        header, and optionally an image data array.  Use         : 	FXWRITE, FILENAME, HEADER [, DATA ]  Inputs      : 	FILENAME = String containing the name of the file to be written. 	HEADER	 = String array containing the header for the FITS file.  Opt. Inputs : 	DATA	 = IDL data array to be written to the file.  If not passed, 		   then it is assumed that extensions will be added to the 		   file.  Outputs     : 	None.  Opt. Outputs: 	None.  Keywords    : 	NANVALUE = Value signalling data dropout.  All points corresponding to 		   this value are set to be IEEE NaN (not-a-number).  Ignored 		   unless DATA is of type float, double-precision or complex. 	NOUPDATE = If set, then the optional BSCALE and BZERO keywords in the 		   HEADER array will not be changed.  The default is to reset 		   these keywords to BSCALE=1, BZERO=0.        APPEND = If set, then an existing file will be appended to.                 Appending to a non-existent file will create it.  If                 a primary HDU already exists then it will be modified                 to have EXTEND = T. 	ERRMSG	 = If defined and passed, then any error messages will be 		   returned to the user in this parameter rather than 		   depending on the MESSAGE routine in IDL.  If no errors are 		   encountered, then a null string is returned.  In order to 		   use this feature, ERRMSG must be defined first, e.g.  			ERRMSG = '' 			FXWRITE, ERRMSG=ERRMSG, ... 			IF ERRMSG NE '' THEN ...   Calls       : 	CHECK_FITS, GET_DATE, HOST_TO_IEEE, FXADDPAR, FXPAR  Common      : 	None.  Restrictions: 	If DATA is passed, then HEADER must be consistent with it.  If no data 	array is being written to the file, then HEADER must also be consistent 	with that.  The routine FXHMAKE can be used to create a FITS header.  	If found, then the optional keywords BSCALE and BZERO in the HEADER 	array is changed so that BSCALE=1 and BZERO=0.  This is so that these 	scaling parameters are not applied to the data a second time by another 	routine.  Also, history records are added storing the original values 	of these constants.  (Other values of BZERO are used for unsigned 	integers.)  	If the /NOUPDATE keyword is set, however, then the BSCALE and BZERO 	keywords are not changed.  The user should then be aware that FITS 	readers will apply these numbers to the data, even if the data is 	already converted to floating point form.  	Groups are not supported.   Side effects: 	HEADER may be modified.  One way it may be modified is describe        above under NOUPDATE.  The first header card may also be        modified to conform to the FITS standard if it does not        already agree (i.e. use of either the SIMPLE or XTENSION        keyword depending on whether the image is the primary HDU or        not).  Category    : 	Data Handling, I/O, FITS, Generic.  Prev. Hist. : 	W. Thompson, Jan 1992, from WRITEFITS by J. Woffard and W. Landsman. 	Differences include:  		* Made DATA array optional, and HEADER array mandatory. 		* Changed order of HEADER and DATA parameters. 		* No attempt made to fix HEADER array.  	W. Thompson, May 1992, changed open statement to force 2880 byte fixed 			       length records (VMS).  The software here does not 			       depend on this file configuration, but other 			       FITS readers might. 	W. Thompson, Aug 1992, added code to reset BSCALE and BZERO records, 			       and added the NOUPDATE keyword.  Written     : 	William Thompson, GSFC, January 1992.  Modified    : 	Version 1, William Thompson, GSFC, 12 April 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 31 May 1994 		Added ERRMSG keyword. 	Version 3, William Thompson, GSFC, 23 June 1994 		Modified so that ERRMSG is not touched if not defined. 	Version 4, William Thompson, GSFC, 12 August 1999 		Catch error if unable to open file.        Version 4.1 Wayne Landsman, GSFC, 02 May 2000                Remove !ERR in call to CHECK_FITS, Use ARG_PRESENT()        Version 5, William Thompson, GSFC, 22 September 2004                Recognize unsigned integer types        Version 5.1 W. Landsman 14 November 204                Allow for need for 64bit number of bytes        Version 6, Craig Markwardt, GSFC, 30 May 2005                Ability to append to existing files  Version     : 	Version 6, 30 May 2005  ", "NANVALUENOUPDATEERRMSGAPPENDFILENAMEHEADERDATA", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gal_flat.html", "gal_flat.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gal_flat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gal_flat.html#GAL_FLAT", "GAL_FLAT", 'routine in <a href="idlastro/gal_flat.html">gal_flat.pro</a>', "gal_flat.pro", "", "GAL_FLAT", " NAME: 	GAL_FLAT   PURPOSE: 	Transforms the image of a galaxy so that the galaxy appears face-on  EXPLANATION: 	Either a nearest-neighbor approximations or a bilinear interpolation 	may  be used.   CALLING SEQUENCE: 	RESULT = GAL_FLAT( image, ang, inc, [, cen, /INTERP ] )   INPUTS: 	IMAGE  - Image to be transformed 	ANG  - Angle of major axis, counterclockwise from Y-axis, degrees 		For an image in standard orientation (North up, East left) 		this is the Position Angle 	INC - Angle of inclination of galaxy, degrees   OPTIONAL INPUTS: 	CEN - Two element vector giving the X and Y position of galaxy center 		If not supplied, then the galaxy center is assumed to coincide 		 with the image center   INPUT KEYWORDS: 	INTERP - If present, and non-zero, then bilinear interpolation will be 		performed.  Otherwise a nearest neighbor approximation  is used.   OUTPUTS: 	RESULT - the transformed image, same dimensions and type as IMAGE   METHOD: 	A set of 4 equal spaced control points are corrected for inclination 	using the procedure POLYWARP.   These control points are used by 	POLY_2D to correct the whole image.   REVISION HISTORY: 	Written by R. S. Hill, SASC Technologies Inc., 4 December 1985 	Code cleaned up a bit    W. Landsman      December 1992 	Converted to IDL V5.0   W. Landsman   September 1997  ", "INTERPIMAGEANGINCCEN", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gal_uvw.html", "gal_uvw.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gal_uvw.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gal_uvw.html#gal_uvw", "gal_uvw", 'routine in <a href="idlastro/gal_uvw.html">gal_uvw.pro</a>', "gal_uvw.pro", "", "gal_uvw", " NAME:      GAL_UVW  PURPOSE:      Calculate the Galactic space velocity (U,V,W) of star  EXPLANATION:      Calculates the Galactic space velocity U, V, W of star given its      (1) coordinates, (2) proper motion, (3) distance (or parallax), and      (4) radial velocity.  CALLING SEQUENCE:      GAL_UVW, U, V, W, [/LSR, RA=, DEC=, PMRA= ,PMDEC=, VRAD= , DISTANCE=               PLX= ]  OUTPUT PARAMETERS:       U - Velocity (km/s) positive toward the Galactic *anti*center       V - Velocity (km/s) positive in the direction of Galactic rotation       W - Velocity (km/s) positive toward the North Galactic Pole  REQUIRED INPUT KEYWORDS:       User must supply a position, proper motion,radial velocity and distance       (or parallax).    Either scalars or vectors can be supplied.      (1) Position:       RA - Right Ascension in *Degrees*       Dec - Declination in *Degrees*      (2) Proper Motion       PMRA = Proper motion in RA in arc units (typically milli-arcseconds/yr)             If given mu_alpha --proper motion in seconds of time/year - then       PMDEC = Proper motion in Declination (typically mas/yr)      (3) Radial Velocity       VRAD = radial velocity in km/s      (4) Distance or Parallax       DISTANCE - distance in parsecs                  or       PLX - parallax with same distance units as proper motion measurements             typically milliarcseconds (mas)   OPTIONAL INPUT KEYWORD:       /LSR - If this keyword is set, then the output velocities will be              corrected for the solar motion (U,V,W)_Sun = (-8.5, 13.38, 6.49)             (Coskunoglu et al. 2011 MNRAS) to the local standard of rest.             Note that the value of the solar motion through the LSR remains             poorly determined.   EXAMPLE:       (1) Compute the U,V,W coordinates for the halo star HD 6755.           Use values from Hipparcos catalog, and correct to the LSR       ra = ten(1,9,42.3)*15.    & dec = ten(61,32,49.5)       pmra = 628.42  &  pmdec = 76.65         ;mas/yr       dis = 139    &  vrad = -321.4       gal_uvw,u,v,w,ra=ra,dec=dec,pmra=pmra,pmdec=pmdec,vrad=vrad,dis=dis,/lsr           ===&gt;  u=141.2  v = -491.7  w = 93.9        ;km/s        (2) Use the Hipparcos Input and Output Catalog IDL databases (see       http://idlastro.gsfc.nasa.gov/ftp/zdbase/) to obtain space velocities       for all stars within 10 pc with radial velocities &gt; 10 km/s        dbopen,'hipp_new,hic'      ;Need Hipparcos output and input catalogs       list = dbfind('plx&gt;100,vrad&gt;10')      ;Plx &gt; 100 mas, Vrad &gt; 10 km/s       dbext,list,'pmra,pmdec,vrad,ra,dec,plx',pmra,pmdec,vrad,ra,dec,plx       ra = ra*15.                 ;Need right ascension in degrees       GAL_UVW,u,v,w,ra=ra,dec=dec,pmra=pmra,pmdec=pmdec,vrad=vrad,plx = plx       forprint,u,v,w              ;Display results  METHOD:       Follows the general outline of Johnson & Soderblom (1987, AJ, 93,864)       except that U is positive outward toward the Galactic *anti*center, and       the J2000 transformation matrix to Galactic coordinates is taken from       the introduction to the Hipparcos catalog.  REVISION HISTORY:       Written, W. Landsman                       December   2000       fix the bug occuring if the input arrays are longer than 32767         and update the Sun velocity           Sergey Koposov June 2008 	   vectorization of the loop -- performance on large arrays         is now 10 times higher                Sergey Koposov December 2008       More recent value of solar motion WL/SK   Jan 2011  ", "distanceLSRradecpmrapmdecvradplxuvw", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/galage.html", "galage.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "galage.pro", "", "", " NAME:    GALAGE   PURPOSE:    Determine the age of a galaxy given its redshift and a formation redshift.   CALLING SEQUENCE:    age = galage(z, [zform,  H0 =, k=, lambda0 =, Omega_m= , q0 =, /SILENT])'   INPUTS:     z - positive numeric vector or scalar of measured redshifts     zform - redshift of galaxy formation (&gt; z), numeric positive scalar         To determine the age of the universe at a given redshift, set zform         to a large number (e.g. ~1000).   OPTIONAL KEYWORD INPUTS:     H0 - Hubble constant in km/s/Mpc, positive scalar, default is 70     /SILENT - If set, then the adopted cosmological parameters are not          displayed at the terminal.          No more than two of the following four parameters should be         specified.   None of them need be specified -- the adopted defaults         are given.     k - curvature constant, normalized to the closure density.   Default is         0, (indicating a flat universe)     Omega_m -  Matter density, normalized to the closure density, default         is 0.3.   Must be non-negative     Lambda0 - Cosmological constant, normalized to the closure density,         default is 0.7     q0 - Deceleration parameter, numeric scalar = -R*(R'')/(R')^2, default         is -0.55   OUTPUTS:     age -  age of galaxy in years, will have the same number of elements            as the input Z vector   EXAMPLE:     (1) Determine the age of a galaxy observed at z = 1.5 in a cosmology with     Omega_matter = 0.3 and Lambda = 0.0.    Assume the formation redshift was     at z = 25, and use the default Hubble constant (=70 km/s/Mpc)      IDL&gt; print,galage(1.5,25,Omega_m=0.3, Lambda = 0)              ===&gt; 3.35 Gyr      (2) Plot the age of a galaxy in Gyr out to a redshift of z = 5, assuming         the default cosmology (omega_m=0.3, lambda=0.7), and zform = 100      IDL&gt; z = findgen(50)/10.     IDL&gt; plot,z,galage(z,100)/1e9,xtit='z',ytit = 'Age (Gyr)'   PROCEDURE:     For a given formation time zform and a measured z, integrate dt/dz from     zform to z. Analytic formula of dt/dz in Gardner, PASP 110:291-305, 1998     March  (eq. 7)   COMMENTS:     (1) Integrates using the IDL Astronomy Library procedure QSIMP.    (The     intrinsic IDL QSIMP() function is not called because of its ridiculous     restriction that only scalar arguments can be passed to the integrating     function.)    The function 'dtdz' is defined at the beginning of the     routine (so it can compile first).      (2) Should probably be fixed to use a different integrator from QSIMP when     computing age from an  infinite  redshift of formation.    But using a     large value of zform seems to work adequately.       (3) An alternative set of IDL procedures for computing cosmological     parameters is available at             http://cerebus.as.arizona.edu/~ioannis/research/red/  PROCEDURES CALLED:     COSMO_PARAM, QSIMP  HISTORY:      STIS version by P. Plait (ACC)                  June 1999      IDL Astro Version   W. Landsman (Raytheon ITSS)      April 2000      Avoid integer overflow for more than 32767 redshifts  July 2001  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/galage.html#dtdz", "dtdz", 'routine in <a href="idlastro/galage.html">galage.pro</a>', "galage.pro", "", "dtdz", "", "lambda0q0z", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/galage.html#galage", "galage", 'routine in <a href="idlastro/galage.html">galage.pro</a>', "galage.pro", "", "galage", "", "h0Omega_mlambda0kq0SILENTzzform", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/galapagos.html", "galapagos.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "galapagos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/galapagos.html#galapagos", "galapagos", 'routine in <a href="code_snapshots/obsolete_code/galapagos.html">galapagos.pro</a>', "galapagos.pro", "", "galapagos", "", "inputthresh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/public/gauss2d.html", "gauss2d.pro", '.pro file in <a href="coyote/public/dir-overview.html">coyote/public/ directory</a>', "gauss2d.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/public/gauss2d.html#gauss2d", "gauss2d", 'routine in <a href="coyote/public/gauss2d.html">gauss2d.pro</a>', "gauss2d.pro", "", "gauss2d", " NAME:   gauss2d  PURPOSE:   Compute a two dimensional gaussian within an array.  DESCRIPTION:  CATEGORY:   Mathematical  CALLING SEQUENCE:   pro gauss2d,nx,ny,x,y,fwhm,array  INPUTS:   nx   - X size of output array   ny   - Y size of output array   x    - X location of gaussian in array   y    - Y location of gaussian in array   fwhm - Full width at half-maximum of gaussian.  OPTIONAL INPUT PARAMETERS:  KEYWORD INPUT PARAMETERS:  OUTPUTS:   array - Result array with gaussian inserted.  KEYWORD OUTPUT PARAMETERS:  COMMON BLOCKS:  SIDE EFFECTS:  RESTRICTIONS:  PROCEDURE:  MODIFICATION HISTORY:   94/04/07, Written by Marc W. Buie, Lowell Observatory  ", "nxnyxyfwhmarray", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/gauss_fid.html", "gauss_fid.pro", '.pro file in <a href="code_snapshots/test_version/obsolete_files/dir-overview.html">code_snapshots/test_version/obsolete_files/ directory</a>', "gauss_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/gauss_fid.html#gauss_fid", "gauss_fid", 'routine in <a href="code_snapshots/test_version/obsolete_files/gauss_fid.html">gauss_fid.pro</a>', "gauss_fid.pro", "", "gauss_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/gauss_fid.html", "gauss_fid.pro", '.pro file in <a href="code_snapshots/jul25/obsolete_files/dir-overview.html">code_snapshots/jul25/obsolete_files/ directory</a>', "gauss_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/gauss_fid.html#gauss_fid", "gauss_fid", 'routine in <a href="code_snapshots/jul25/obsolete_files/gauss_fid.html">gauss_fid.pro</a>', "gauss_fid.pro", "", "gauss_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/obsolete_files/gauss_fid.html", "gauss_fid.pro", '.pro file in <a href="sep20/obsolete_files/dir-overview.html">sep20/obsolete_files/ directory</a>', "gauss_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/obsolete_files/gauss_fid.html#gauss_fid", "gauss_fid", 'routine in <a href="sep20/obsolete_files/gauss_fid.html">gauss_fid.pro</a>', "gauss_fid.pro", "", "gauss_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/gauss_fid.html", "gauss_fid.pro", '.pro file in <a href="code_snapshots/sep11/obsolete_files/dir-overview.html">code_snapshots/sep11/obsolete_files/ directory</a>', "gauss_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/gauss_fid.html#gauss_fid", "gauss_fid", 'routine in <a href="code_snapshots/sep11/obsolete_files/gauss_fid.html">gauss_fid.pro</a>', "gauss_fid.pro", "", "gauss_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/gauss_fid.html", "gauss_fid.pro", '.pro file in <a href="code_snapshots/orig_version/obsolete_files/dir-overview.html">code_snapshots/orig_version/obsolete_files/ directory</a>', "gauss_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/gauss_fid.html#gauss_fid", "gauss_fid", 'routine in <a href="code_snapshots/orig_version/obsolete_files/gauss_fid.html">gauss_fid.pro</a>', "gauss_fid.pro", "", "gauss_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/gauss_fid.html", "gauss_fid.pro", '.pro file in <a href="code_snapshots/albert_version/obsolete_files/dir-overview.html">code_snapshots/albert_version/obsolete_files/ directory</a>', "gauss_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/gauss_fid.html#gauss_fid", "gauss_fid", 'routine in <a href="code_snapshots/albert_version/obsolete_files/gauss_fid.html">gauss_fid.pro</a>', "gauss_fid.pro", "", "gauss_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gaussian.html", "gaussian.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gaussian.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gaussian.html#gaussian", "gaussian", 'routine in <a href="idlastro/gaussian.html">gaussian.pro</a>', "gaussian.pro", "", "gaussian", " NAME:        GAUSSIAN  PURPOSE:        Compute the 1-d Gaussian function and optionally the derivative  EXPLANATION:        Compute the 1-D Gaussian function and optionally the derivative        at an array of points.   CALLING SEQUENCE:        y = gaussian( xi, parms,[ pderiv ])   INPUTS:        xi = array, independent variable of Gaussian function.         parms = parameters of Gaussian, 2, 3 or 4 element array:                parms[0] = maximum value (factor) of Gaussian,                parms[1] = mean value (center) of Gaussian,                parms[2] = standard deviation (sigma) of Gaussian.                (if parms has only 2 elements then sigma taken from previous                call to gaussian(), which is stored in a  common block).                parms[3] = optional, constant offset added to Gaussian.  OUTPUT:        y -  Function returns array of Gaussian evaluated at xi.    Values will             be floating pt. (even if xi is double) unless the /DOUBLE keyword             is set.   OPTIONAL INPUT:        /DOUBLE - set this keyword to return double precision for both              the function values and (optionally) the partial derivatives.  OPTIONAL OUTPUT:        pderiv = [N,3] or [N,4] output array of partial derivatives,                computed only if parameter is present in call.                 pderiv[*,i] = partial derivative at all xi absisca values                with respect to parms[i], i=0,1,2,[3].   EXAMPLE:        Evaulate a Gaussian centered at x=0, with sigma=1, and a peak value        of 10 at the points 0.5 and 1.5.   Also compute the derivative         IDL&gt; f = gaussian( [0.5,1.5], [10,0,1], DERIV )        ==&gt; f= [8.825,3.25].   DERIV will be a 2 x 3 array containing the        numerical derivative at the two points with respect to the 3 parameters.   COMMON BLOCKS:        None  HISTORY:        Written, Frank Varosi NASA/GSFC 1992.        Converted to IDL V5.0   W. Landsman   September 1997        Use machar() for machine precision, added /DOUBLE keyword,        add optional constant 4th parameter    W. Landsman   November 2001  ", "DOUBLExiparmspderiv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/gaussscl.html", "gaussscl.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "gaussscl.pro", "", "", " NAME:        GAUSSSCL   PURPOSE:         This is a utility routine to perform a gaussian gray-level pixel        transformation stretch on a image.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         scaledImage = GAUSSSCL(image)   ARGUMENTS:         image:         The image to be scaled. Written for 2D images, but arrays                       of any size are treated alike.   KEYWORDS:         SIGMA:         The sigma value or width of the Gaussian                       function. Set to 1 by default.         MAX:           Any value in the input image greater than this value is                       set to this value before scaling.         MIN:           Any value in the input image less than this value is                       set to this value before scaling.         NEGATIVE:      If set, the  negative  of the result is returned.         OMAX:          The output image is scaled between OMIN and OMAX. The                       default value is 255.         OMIN:          The output image is scaled between OMIN and OMAX. The                       default value is 0.  RETURN VALUE:         scaledImage:   The output, scaled into the range OMIN to OMAX. A byte array.   COMMON BLOCKS:        None.   EXAMPLES:         LoadCT, 0                                            ; Gray-scale colors.        image = cgDemoData(11)                                 ; Load image.        TV, GaussScl(image)   RESTRICTIONS:       Requires cgScaleVector from the Coyote Library:          http://www.idlcoyote.com/programs/cgScaleVector.pro   MODIFICATION HISTORY:         Written by:  David W. Fanning, 5 September 2007.        Now setting NAN keyword on all MIN and MAX functions. 2 Dec 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/gaussscl.html#GaussScl", "GaussScl", 'routine in <a href="coyote/gaussscl.html">gaussscl.pro</a>', "gaussscl.pro", "", "GaussScl", "", "SIGMAMAXMINNEGATIVEOMAXOMINimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gcirc.html", "gcirc.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gcirc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gcirc.html#gcirc", "gcirc", 'routine in <a href="idlastro/gcirc.html">gcirc.pro</a>', "gcirc.pro", "", "gcirc", " NAME:      GCIRC  PURPOSE:      Computes rigorous great circle arc distances.  EXPLANATION:      Input position can either be either radians, sexagesimal RA, Dec or      degrees.   All computations are double precision.   CALLING SEQUENCE:       GCIRC, U, RA1, DC1, RA2, DC2, DIS   INPUTS:       U    -- integer = 0,1, or 2: Describes units of inputs and output:               0:  everything radians               1:  RAx in decimal hours, DCx in decimal                        degrees, DIS in arc seconds               2:  RAx and DCx in degrees, DIS in arc seconds       RA1  -- Right ascension or longitude of point 1       DC1  -- Declination or latitude of point 1       RA2  -- Right ascension or longitude of point 2       DC2  -- Declination or latitude of point 2   OUTPUTS:       DIS  -- Angular distance on the sky between points 1 and 2               See U above for units;  double precision   PROCEDURE:        Haversine formula  see       http://en.wikipedia.org/wiki/Great-circle_distance   NOTES:        (1) If RA1,DC1 are scalars, and RA2,DC2 are vectors, then DIS is a        vector giving the distance of each element of RA2,DC2 to RA1,DC1.        Similarly, if RA1,DC1 are vectors, and RA2, DC2 are scalars, then DIS        is a vector giving the distance of each element of RA1, DC1 to        RA2, DC2.    If both RA1,DC1 and RA2,DC2 are vectors then DIS is a        vector giving the distance of each element of RA1,DC1 to the        corresponding element of RA2,DC2.    If the input vectors are not the        same length, then excess elements of the longer ones will be ignored.         (2) The function SPHDIST provides an alternate method of computing         a spherical distance.         (3) The haversine formula can give rounding errors for antipodal        points.   PROCEDURE CALLS:       None     MODIFICATION HISTORY:       Written in Fortran by R. Hill -- SASC Technologies -- January 3, 1986       Translated from FORTRAN to IDL, RSH, STX, 2/6/87       Vector arguments allowed    W. Landsman    April 1989       Prints result if last argument not given.  RSH, RSTX, 3 Apr. 1998       Remove ISARRAY(), V5.1 version        W. Landsman   August 2000       Added option U=2                      W. Landsman   October 2006       Use double precision for U=0 as advertised R. McMahon/W.L.  April 2007       Use havesine formula, which has less roundoff error in the              milliarcsecond regime      W.L. Mar 2009  ", "ura1dc1ra2dc2dis", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gcntrd.html", "gcntrd.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gcntrd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gcntrd.html#gcntrd", "gcntrd", 'routine in <a href="idlastro/gcntrd.html">gcntrd.pro</a>', "gcntrd.pro", "", "gcntrd", "  NAME:        GCNTRD   PURPOSE:        Compute the stellar centroid by Gaussian fits to marginal X,Y, sums  EXPLANATION:        GCNTRD uses the DAOPHOT  FIND  centroid algorithm by fitting Gaussians        to the marginal X,Y distributions.     User can specify bad pixels        (either by using the MAXGOOD keyword or setting them to NaN) to be        ignored in the fit.    Pixel values are weighted toward the center to        avoid contamination by neighboring stars.    CALLING SEQUENCE:        GCNTRD, img, x, y, xcen, ycen, [ fwhm , /SILENT, /DEBUG, MAXGOOD = ,                             /KEEPCENTER ]    INPUTS:        IMG - Two dimensional image array        X,Y - Scalar or vector integers giving approximate stellar center    OPTIONAL INPUT:        FWHM - floating scalar; Centroid is computed using a box of half                width equal to 1.5 sigma = 0.637* FWHM.  GCNTRD will prompt                for FWHM if not supplied    OUTPUTS:        XCEN - the computed X centroid position, same number of points as X        YCEN - computed Y centroid position, same number of points as Y         Values for XCEN and YCEN will not be computed if the computed        centroid falls outside of the box, or if there are too many bad pixels,        or if the best-fit Gaussian has a negative height.   If the centroid        cannot be computed, then a  message is displayed (unless /SILENT is        set) and XCEN and YCEN are set to -1.    OPTIONAL OUTPUT KEYWORDS:        MAXGOOD=  Only pixels with values less than MAXGOOD are used to in                Gaussian fits to determine the centroid.    For non-integer                data, one can also flag bad pixels using NaN values.        /SILENT - Normally GCNTRD prints an error message if it is unable                to compute the centroid.   Set /SILENT to suppress this.        /DEBUG - If this keyword is set, then GCNTRD will display the subarray                it is using to compute the centroid.        /KeepCenter  By default, GCNTRD first convolves a small region around               the supplied position with a lowered Gaussian filter, and then               finds the maximum pixel in a box centered on the input X,Y               coordinates, and then extracts a new box about this maximum               pixel.   Set the /KeepCenter keyword  to skip the convolution               and finding the maximum pixel, and instead use a box               centered on the input X,Y coordinates.   PROCEDURE:        Unless /KEEPCENTER is set, a small area around the initial X,Y is        convolved with a Gaussian kernel, and the maximum pixel is found.        This pixel is used as the  center of a square, within        which the centroid is computed as the Gaussian least-squares fit        to the  marginal sums in the X and Y directions.    EXAMPLE:        Find the centroid of a star in an image im, with approximate center        631, 48.    Assume that bad (saturated) pixels have a value of 4096 or        or higher, and that the approximate FWHM is 3 pixels.         IDL&gt; GCNTRD, IM, 631, 48, XCEN, YCEN, 3, MAXGOOD = 4096   MODIFICATION HISTORY:        Written June 2004, W. Landsman  following algorithm used by P. Stetson              in DAOPHOT2.        Modified centroid computation (as in IRAF/DAOFIND) to allow shifts of       more than 1 pixel from initial guess.    March 2008       First perform Gaussian convolution prior to finding maximum pixel       to smooth out noise  W. Landsman  Jan 2009  ", "maxgoodkeepcenterSILENTDEBUGimgxyxcenycenfwhm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/geo2eci.html", "geo2eci.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "geo2eci.pro", "", "", " NAME:      GEO2ECI   PURPOSE:      Convert geographic spherical coordinates to Earth-centered inertial coords   EXPLANATION:      Converts from geographic spherical coordinates [latitude, longitude,      altitude] to ECI (Earth-Centered Inertial) [X,Y,Z] rectangular      coordinates.    JD time is also needed.       Geographic coordinates are in degrees/degrees/km      Geographic coordinates assume the Earth is a perfect sphere, with radius        equal to its equatorial radius.      ECI coordinates are in km from Earth center.   CALLING SEQUENCE:        ECIcoord=geo2eci(gcoord,JDtime)   INPUT:        gcoord: geographic [latitude,longitude,altitude], or a an array [3,n]                 of n such coordinates        JDtime: Julian Day time, double precision. Can be a 1-D array of n                such times.   KEYWORD INPUTS:        None   OUTPUT:        a 3-element array of ECI [X,Y,Z] coordinates, or an array [3,n] of                 n such coordinates, double precision   COMMON BLOCKS:        None   PROCEDURES USED:        CT2LST - Convert Local Civil Time to Local Mean Sidereal Time   EXAMPLES:         IDL&gt; ECIcoord=geo2eci([0,0,0], 2452343.38982663D)        IDL&gt; print,ECIcoord       -3902.9606       5044.5548       0.0000000         (The above is the ECI coordinates of the intersection of the equator and        Greenwich's meridian on 2002/03/09 21:21:21.021)   MODIFICATION HISTORY:        Written by Pascal Saint-Hilaire (shilaire@astro.phys.ethz.ch)              on 2002/05/14   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/geo2eci.html#geo2eci", "geo2eci", 'routine in <a href="idlastro/geo2eci.html">geo2eci.pro</a>', "geo2eci.pro", "", "geo2eci", "", "incoordJDtim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/geo2geodetic.html", "geo2geodetic.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "geo2geodetic.pro", "", "", " NAME:        GEO2GEODETIC   PURPOSE:        Convert from geographic/planetographic to geodetic coordinates  EXPLANATION:        Converts from geographic (latitude, longitude, altitude) to geodetic        (latitude, longitude, altitude).  In geographic coordinates, the            Earth is assumed a perfect sphere with a radius equal to its equatorial                radius. The geodetic (or ellipsoidal) coordinate system takes into                account the Earth's oblateness.         Geographic and geodetic longitudes are identical.                Geodetic latitude is the angle between local zenith and the equatorial plane.                Geographic and geodetic altitudes are both the closest distance between                the satellite and the ground.         The PLANET keyword allows a similar transformation for the other        planets  (planetographic to planetodetic coordinates).         The EQUATORIAL_RADIUS and POLAR_RADIUS keywords allow the        transformation for any ellipsoid.         Latitudes and longitudes are expressed in degrees, altitudes in km.         REF: Stephen P.  Keeler and Yves Nievergelt,  Computing geodetic        coordinates , SIAM Rev. Vol. 40, No. 2, pp. 300-309, June 1998         Planetary constants from  Allen's Astrophysical Quantities ,        Fourth Ed., (2000)   CALLING SEQUENCE:        ecoord=geo2geodetic(gcoord,[ PLANET=,EQUATORIAL_RADIUS=, POLAR_RADIUS=])   INPUT:        gcoord = a 3-element array of geographic [latitude,longitude,altitude],                 or an array [3,n] of n such coordinates.   OPTIONAL KEYWORD INPUT:        PLANET = keyword specifying planet (default is Earth).   The planet                 may be specified either as an integer (1-9) or as one of the                 (case-independent) strings 'mercury','venus','earth','mars',                 'jupiter','saturn','uranus','neptune', or 'pluto'         EQUATORIAL_RADIUS : Self-explanatory. In km. If not set, PLANET's                 value is used.        POLAR_RADIUS : Self-explanatory. In km. If not set, PLANET's value is                 used.   OUTPUT:       a 3-element array of geodetic/planetodetic [latitude,longitude,altitude],         or an array [3,n] of n such coordinates, double precision.   COMMON BLOCKS:        None   RESTRICTIONS:         Whereas the conversion from geodetic to geographic coordinates is given        by an exact, analytical formula, the conversion from geographic to        geodetic isn't. Approximative iterations (as used here) exist, but tend        to become less good with increasing eccentricity and altitude.        The formula used in this routine should give correct results within        six digits for all spatial locations, for an ellipsoid (planet) with        an eccentricity similar to or less than Earth's.        More accurate results can be obtained via calculus, needing a        non-determined amount of iterations.        In any case,           IDL&gt; PRINT,geodetic2geo(geo2geodetic(gcoord)) - gcoord        is a pretty good way to evaluate the accuracy of geo2geodetic.pro.   EXAMPLES:         Locate the geographic North pole, altitude 0., in geodetic coordinates        IDL&gt; geo=[90.d0,0.d0,0.d0]        IDL&gt; geod=geo2geodetic(geo); convert to equivalent geodetic coordinates        IDL&gt; PRINT,geod        90.000000       0.0000000       21.385000         As above, but for the case of Mars        IDL&gt; geod=geo2geodetic(geo,PLANET='Mars')        IDL&gt; PRINT,geod        90.000000       0.0000000       18.235500   MODIFICATION HISTORY:        Written by Pascal Saint-Hilaire (shilaire@astro.phys.ethz.ch), May 2002        Generalized for all solar system planets by Robert L. Marcialis                (umpire@lpl.arizona.edu), May 2002        Modified 2002/05/18, PSH: added keywords EQUATORIAL_RADIUS and                POLAR_RADIUS  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/geo2geodetic.html#geo2geodetic", "geo2geodetic", 'routine in <a href="idlastro/geo2geodetic.html">geo2geodetic.pro</a>', "geo2geodetic.pro", "", "geo2geodetic", "", "PLANETEQUATORIAL_RADIUSPOLAR_RADIUSgcoord", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/geo2mag.html", "geo2mag.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "geo2mag.pro", "", "", " NAME:        GEO2MAG()   PURPOSE:        Convert from geographic to geomagnetic coordinates  EXPLANATION:        Converts from GEOGRAPHIC (latitude,longitude) to GEOMAGNETIC (latitude,        longitude).   (Altitude remains the same)         Latitudes and longitudes are expressed in degrees.   CALLING SEQUENCE:        mcoord=geo2mag(gcoord)   INPUT:        gcoord = a 2-element array of geographic [latitude,longitude], or an                 array [2,n] of n such coordinates.   KEYWORD INPUTS:        None   OUTPUT:        a 2-element array of magnetic [latitude,longitude], or an array [2,n]          of n such coordinates   COMMON BLOCKS:        None   EXAMPLES:        geographic coordinates of magnetic south pole         IDL&gt; mcoord=geo2mag([79.3,288.59])        IDL&gt; print,mcoord        89.999992      -173.02325   MODIFICATION HISTORY:        Written by Pascal Saint-Hilaire (Saint-Hilaire@astro.phys.ethz.ch),             May 2002   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/geo2mag.html#geo2mag", "geo2mag", 'routine in <a href="idlastro/geo2mag.html">geo2mag.pro</a>', "geo2mag.pro", "", "geo2mag", "", "incoord", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/geodetic2geo.html", "geodetic2geo.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "geodetic2geo.pro", "", "", " NAME:        GEODETIC2GEO   PURPOSE:        Convert from geodetic (or planetodetic) to geographic coordinates  EXPLANATION:        Converts from geodetic (latitude, longitude, altitude) to geographic        (latitude, longitude, altitude).  In geographic coordinates, the        Earth is assumed a perfect sphere with a radius equal to its equatorial        radius. The geodetic (or ellipsoidal) coordinate system takes into        account the Earth's oblateness.         Geographic and geodetic longitudes are identical.        Geodetic latitude is the angle between local zenith and the equatorial        plane.   Geographic and geodetic altitudes are both the closest distance        between the satellite and the ground.         The PLANET keyword allows a similar transformation for the other        planets  (planetodetic to planetographic coordinates).         The EQUATORIAL_RADIUS and POLAR_RADIUS keywords allow the        transformation for any ellipsoid.         Latitudes and longitudes are expressed in degrees, altitudes in km.         REF: Stephen P.  Keeler and Yves Nievergelt,  Computing geodetic        coordinates , SIAM Rev. Vol. 40, No. 2, pp. 300-309, June 1998        Planetary constants from  Allen's Astrophysical Quantities ,        Fourth Ed., (2000)   CALLING SEQUENCE:        gcoord = geodetic2geo(ecoord, [ PLANET= ] )   INPUT:        ecoord = a 3-element array of geodetic [latitude,longitude,altitude],                 or an array [3,n] of n such coordinates.   OPTIONAL KEYWORD INPUT:        PLANET = keyword specifying planet (default is Earth).   The planet                 may be specified either as an integer (1-9) or as one of the                 (case-independent) strings 'mercury','venus','earth','mars',                 'jupiter','saturn','uranus','neptune', or 'pluto'         EQUATORIAL_RADIUS : Self-explanatory. In km. If not set, PLANET's value                 is used.   Numeric scalar        POLAR_RADIUS : Self-explanatory. In km. If not set, PLANET's value is                  used.   Numeric scalar   OUTPUT:        a 3-element array of geographic [latitude,longitude,altitude], or an          array [3,n] of n such coordinates, double precision         The geographic and geodetic longitudes will be identical.  COMMON BLOCKS:        None   EXAMPLES:         IDL&gt; geod=[90,0,0]  ; North pole, altitude 0., in geodetic coordinates        IDL&gt; geo=geodetic2geo(geod)        IDL&gt; PRINT,geo        90.000000       0.0000000      -21.385000         As above, but the equivalent planetographic coordinates for Mars        IDL&gt; geod=geodetic2geo(geod,PLANET='Mars');        IDL&gt; PRINT,geod        90.000000       0.0000000      -18.235500   MODIFICATION HISTORY:        Written by Pascal Saint-Hilaire (shilaire@astro.phys.ethz.ch),                   May 2002         Generalized for all solar system planets by Robert L. Marcialis                (umpire@lpl.arizona.edu), May 2002         Modified 2002/05/18, PSH: added keywords EQUATORIAL_RADIUS and                 POLAR_RADIUS   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/geodetic2geo.html#geodetic2geo", "geodetic2geo", 'routine in <a href="idlastro/geodetic2geo.html">geodetic2geo.pro</a>', "geodetic2geo.pro", "", "geodetic2geo", "", "PLANETEQUATORIAL_RADIUSPOLAR_RADIUSecoord", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/get_coords.html", "get_coords.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "get_coords.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/get_coords.html#GET_COORDS", "GET_COORDS", 'routine in <a href="idlastro/get_coords.html">get_coords.pro</a>', "get_coords.pro", "", "GET_COORDS", " NAME:        GET_COORDS   PURPOSE:        Converts a string with angular coordinates  to floating point values.  EXPLANATION:        Although called by ASTRO.PRO, this is a general purpose routine.        The user may input as floating point or sexagesimal.  If user inputs        calling procedure's job to convert hours to degrees if needed.        Since the input string is parsed character-by-character, ANY character        that is not a digit, minus sign or decimal point may be used as a        delimiter, i.e. acceptable examples of user input are:         1:03:55 -10:15:31        1 3 55.0 -10 15 31        1*3 55              -10abcd15efghij31        1.065278  hello   -10.25861   CALLING SEQUENCE:        GET_COORDS, Coords, [ PromptString, NumVals, INSTRING =, /QUIET ]   OPTIONAL INPUT:        PromptString - A string to inform the user what data are to be entered   OPTIONAL KEYWORD INPUT:        InString - a keyword that, if set, is assumed to already contain the                input data string to be parsed.  If this keyword is set, then                the user is not prompted for any input.        /Quiet - if set the program won't printout any error messages, but bad                input is still flagged by Coords=[-999,-999].   OUTPUT:        Coords - a 2 element floating array containing the coordinates.  The                vector [-999,-999] is returned if there has been an error.   OPTIONAL OUTPUT:        NumVals - the number of separate values entered by the user:  2 if the                user entered the coordinates as floating point numbers, 6 if                the user entered the coordinates as sexagesimal numbers.  Some                calling procedures might find this information useful (e.g., to                to print some output in the same format as the user's input).   REVISION HISTORY:        Written by Joel Parker, 5 MAR 90        Included InString and Quiet keywords.  Cleaned up some of the code and        comments.  JWmP,  16 Jun 94  *******************************************************************************        Converted to IDL V5.0   W. Landsman   September 1997  ", "InStringQuietCoordsPromptStringNumVals", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/get_date.html", "get_date.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "get_date.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/get_date.html#get_date", "get_date", 'routine in <a href="idlastro/get_date.html">get_date.pro</a>', "get_date.pro", "", "get_date", " NAME:        GET_DATE  PURPOSE:        Return the (current) UTC date in CCYY-MM-DD format for FITS headers  EXPLANATION:        This is the format required by the DATE and DATE-OBS keywords in a        FITS header.   CALLING SEQUENCE:        GET_DATE, FITS_date, [ in_date, /OLD, /TIMETAG ]  OPTIONAL INPUTS:        in_date - string (scalar or vector) containing dates in IDL             systime() format (e.g. 'Tue Sep 25 14:56:14 2001')  OUTPUTS:        FITS_date = A scalar character string giving the current date.    Actual                appearance of dte depends on which keywords are supplied.         No Keywords supplied - dte is a 10 character string with the format                CCYY-MM-DD where &lt;CCYY&gt; represents a calendar year, &lt;MM&gt; the                ordinal number of a calendar month within the calendar year,                and &lt;DD&gt; the ordinal number of a day within the calendar month.        /TIMETAG set - dte is a 19 character string with the format                CCYY-MM-DDThh:mm:ss where &lt;hh&gt; represents the hour in the day,                 &lt;mm&gt; the minutes, &lt;ss&gt; the seconds, and the literal 'T' the                ISO 8601 time designator        /OLD set - dte is an 8 character string in DD/MM/YY format   INPUT KEYWORDS:        /TIMETAG - Specify the time to the nearest second in the DATE format        /OLD - Return the DATE format formerly (pre-1997) recommended for FITS                Note that this format is now deprecated because it uses only                a 2 digit representation of the year.  EXAMPLE:        Add the current date to the DATE keyword in a FITS header,h         IDL&gt; GET_DATE,dte        IDL&gt; sxaddpar, h, 'DATE', dte, 'Date header was created'   NOTES:        (1) A discussion of the DATExxx syntax in FITS headers can be found in        http://www.cv.nrao.edu/fits/documents/standards/year2000.txt         (2) Those who wish to use need further flexibility in their date        formats (e.g. to use TAI time) should look at Bill Thompson's time        routines in http://sohowww.nascom.nasa.gov/solarsoft/gen/idl/time   PROCEDURES USED:        DAYCNV - Convert Julian date to Gregorian calendar date  REVISION HISTORY:        Written      W. Landsman          March 1991        Major rewrite to write new DATExxx syntax  W. Landsman  August 1997        Converted to IDL V5.0   W. Landsman   September 1997        Work after year 2000 even with /OLD keyword W. Landsman January 2000        Don't need to worry about TIME_DIFF since V5.4 W. Landsman July 2001        Assume since V5.4, remove LOCAL_DIFF keyword  W. Landsman April 2006  ", "OLDTIMETAGdtein_date", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/get_equinox.html", "get_equinox.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "get_equinox.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/get_equinox.html#GET_EQUINOX", "GET_EQUINOX", 'routine in <a href="idlastro/get_equinox.html">get_equinox.pro</a>', "get_equinox.pro", "", "GET_EQUINOX", " NAME:        GET_EQUINOX  PURPOSE:        Return the equinox value from a FITS header.  EXPLANATION:        Checks for 4 possibilities:         (1)  If the EQUINOX keyword is found and has a numeric value, then this                value is returned        (2)  If the EQUINOX keyword has the values 'J2000' or 'B1950', then                either 2000. or 1950. is returned.        (3)  If the EQUINOX keyword is not found, then GET_EQUINOX will return                the EPOCH keyword value.   This usage of EPOCH is disparaged.        (4)  If neither EQUINOX no EPOCH is found, then the RADESYS keyword                (or the deprecated RADECSYS keyword) is checked.   If the value                is 'ICRS' or 'FK5' then 2000 is is returned, if it is 'FK4' then                1950 is returned.         According Calabretta & Greisen (2002, A&A, 395, 1077) the EQUINOX should        be written as a numeric value, as in format (1).   However, in older        FITS headers, the EQUINOX might have been written using formats (2) or        (3).  CALLING SEQUENCE:        Year = GET_EQUINOX( Hdr, [ Code ] )   INPUTS:        Hdr - FITS Header, string array, will be searched for the EQUINOX                (or EPOCH) keyword.   OUTPUT:        Year - Year of equinox in FITS header, numeric scalar  OPTIONAL OUTPUT:        Code - Result of header search, scalar                -1 - EQUINOX, EPOCH or RADECSYS keyword not found in header                0 - EQUINOX found as a numeric value                1 - EPOCH keyword used for equinox (not recommended)                2 - EQUINOX found as  'B1950'                3 - EQUINOX found as  'J2000'                4 - EQUINOX derived from value of RADESYS or RADECSYS keyword                    'ICRS', 'FK5' ==&gt; 2000,  'FK4' ==&gt; 1950  OPTIONAL KEYWORD INPUT:        ALT -  single character 'A' through 'Z' or ' ' specifying which              astrometry system to use in the FITS header.    The default is              to use the primary astrometry or ALT = ''.   If /ALT is set,              then this is equivalent to ALT = 'A'.   See Section 3.3 of              Greisen & Calabretta (2002, A&A, 395, 1061) for information about              alternate astrometry keywords.  PROCEDURES USED:        ZPARCHECK, SXPAR()  NOTES:        Technically, RADESYS = 'ICRS' does not specify any equinox, but can be        assumed to be equivalent to J2000 for all but highest-precision work.  REVISION HISTORY:        Written  W. Landsman        STX              March, 1991        Don't use !ERR          W. Landsman   February 2000        N = 1 for check of EPOCH keyword, not 0 S. Ott July 2000        Added ALT keyword, recognize RADESYS along with deprecated RADECSYS               W. Landsman   Sep 2011  ", "ALTHDRCODE", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/get_juldate.html", "get_juldate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "get_juldate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/get_juldate.html#get_juldate", "get_juldate", 'routine in <a href="idlastro/get_juldate.html">get_juldate.pro</a>', "get_juldate.pro", "", "get_juldate", " NAME:     GET_JULDATE  PURPOSE:      Return the current Julian Date   EXPLANATION:      In V5.4, GET_JULDATE became completely obsolete with the introduction      of the /UTC keyword to SYSTIME().   So GET_JULDATE,jd is equivalent to      jd = SYSTIME(/JULIAN,/UTC).   CALLING SEQUENCE:        GET_JULDATE,jd   INPUTS:        None   OUTPUTS:        jd = Current Julian Date, double precision scalar   EXAMPLE:        Return the current hour, day, month and year as integers         IDL&gt; GET_JULDATE, JD                  ;Get current Julian date        IDL&gt; DAYCNV, JD, YR, MON, DAY, HOURS  ;Convert to hour,day month & year   METHOD:        A call is made to SYSTIME(/JULIAN,/UTC).   REVISION HISTORY:        Written Wayne Landsman                March, 1991        Converted to IDL V5.0   W. Landsman   September 1997        Assume since V5.4 Use /UTC keyword to SYSTIME()  W. Landsman April 2006  ", "jd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/get_object_id.html", "get_object_id.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "get_object_id.pro", "", "", " NAME:     GET_OBJECT_ID   PURPOSE:      The purpose of this function is to be able to obtain a unique     object identifier string for a heap variable (object or pointer).   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:      Utility.   CALLING SEQUENCE:      objectID = Get_Object_ID(theObject)   INPUTS:      theObject:    The object or pointer for which an identifier is requested. If                   this is a null object, the function returns the string                    NullObject . If it is a null pointer,  NullPointer .   OUTPUTS:      objectID:     The unique object or pointer identifier.   KEYWORDS:      NUMBER:       If this keyword is set, the function returns the unique                   number identifier associated with a valid pointer or object.                   The number is returned as a STRING variable. The string                    -999  is returned if the pointer or object is invalid and                   this keyword is set.   EXAMPLE:      Create a trackball object and obtain its unique object ID.         IDL&gt; theObject = Obj_New('TRACKBALL', [100,100], 50)        IDL&gt; objectID = Get_Object_ID(theObject, NUMBER=number)        IDL&gt; Print, objectID                ObjHeapVar71(TRACKBALL)        IDL&gt; Print, number                71   MODIFICATION HISTORY:      Written by: David W. Fanning, 4 September 2003.     Added NUMBER keyword. DWF, 22 September 2008.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/get_object_id.html#Get_Object_ID", "Get_Object_ID", 'routine in <a href="coyote/get_object_id.html">get_object_id.pro</a>', "get_object_id.pro", "", "Get_Object_ID", "", "NUMBERtheObject", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/get_pipe_filesize.html", "get_pipe_filesize.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "get_pipe_filesize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/get_pipe_filesize.html#get_pipe_filesize", "get_pipe_filesize", 'routine in <a href="idlastro/get_pipe_filesize.html">get_pipe_filesize.pro</a>', "get_pipe_filesize.pro", "", "get_pipe_filesize", "", "bufferunitnbytes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/getdecomposedstate.html", "getdecomposedstate.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "getdecomposedstate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/getdecomposedstate.html#GetDecomposedState", "GetDecomposedState", 'routine in <a href="coyote/getdecomposedstate.html">getdecomposedstate.pro</a>', "getdecomposedstate.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "GetDecomposedState", "  Provides a device-independent way to get the color decomposition state of the   current graphics device.   ", "DEPTH         The depth of the color display. Typically 8 for indexed color devices          and 24 for true-color devices.   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written, 12 December 2010 as a better named wrapper for DECOMPOSEDCOLOR program. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.         IDL&gt; currentState = GetDecomposedState()        Returns a 1 if color decomposition is turned on and a 0 if indexed color is used.   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/getdecomposedstate.html", "getdecomposedstate.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "getdecomposedstate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/getdecomposedstate.html#GetDecomposedState", "GetDecomposedState", 'routine in <a href="idlastro/coyote/getdecomposedstate.html">getdecomposedstate.pro</a>', "getdecomposedstate.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "GetDecomposedState", "  Provides a device-independent way to get the color decomposition state of the   current graphics device.   ", "DEPTH         The depth of the color display. Typically 8 for indexed color devices          and 24 for true-color devices.   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written, 12 December 2010 as a better named wrapper for DECOMPOSEDCOLOR program. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.         IDL&gt; currentState = GetDecomposedState()        Returns a 1 if color decomposition is turned on and a 0 if indexed color is used.   ");
  
  

libdata[libdataItem++] = new Array("coyote/getimage.html", "getimage.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "getimage.pro", "", "", " NAME:        GETIMAGE   PURPOSE:         The purpose of this function is to allow the user to open either        unformmated or XDR binary image files of up to eight dimensions.   CATEGORY:         Widgets, File I/O.   CALLING SEQUENCE:         image = GETIMAGE(filename)   OPTIONAL INPUTS:         filename: The name of the file to open for reading.   OPTIONAL KEYWORD PARAMETERS:         CANCEL: An output variable that can be set to a named variable.        The value of the return variable will be 1 if the user clicked        the  Cancel  button or if there was a problem reading the file.         DATATYPE: The  type  of data you wish to read out of the file.        The data type corresponds to the Size(image, /TYPE) value. Here        are the types supported:         BYTE                   1 (default)        INTEGER                2        LONG INTEGER           3        FLOAT                  4        DOUBLE                 5        UNSIGNED INTEGER      12        UNSIGNED LONG INTEGER 13        64-bit LONG           14        64-bit UNSIGNED LONG  15         DIMENSIONS: A vector of image dimensions. The default value is [256, 256].         DIRECTORY: The name of the directory the file is located in. By        default the program looks in the  coyote  directory under the        main IDL directory, if one exists. Otherwise, it defaults to the        current directory.         ENDIAN: Set this keyword to an integer that indicates the byte        ordering of the data file. If you don't know what byte order means,        or you don't know anything about the byte order of the data, or        if you are sure the data was created on the same type of machine        you are now running IDL on, then just accept the default of 0 or         native  ordering. If you are wrong, you will soon know it and you        can set the keyword to another value on your next try. :-)         If you know the machine was created on a big endian machine (such        as a Sun or HP workstation), set this value to 1 (Big Endian). If e        you are sur the image data was create on a little endian machine (such        as a Windows PC or laptop running LINUX), set the value to 2 (Little Endian).         HEADER: The size of any header information in the file in BYTES.        Default is 0.         HEADDATA: An optional output keyword that will contain the header        information read from the file.         PARENT: The group leader for this widget program. The PARENT is        required if GETIMAGE is called from another widget program in order        to make this program a MODAL widget program.         XDR: Set this keyword if the binary file is of XDR type. The default        type is  Unformatted .         XOFFSET: This is the X offset of the program on the display. The        program will be placed approximately in the middle of the display        by default.         YOFFSET: This is the Y offset of the program on the display. The        program will be placed approximately in the middle of the display        by default.   COMMON BLOCKS:         None.   SIDE EFFECTS:         A  CANCEL  operation is indicated by a 0 return value.        Any error in reading the file results in a 0 return value.   RESTRICTIONS:        Requires the following Coyote Library files:        CENTER_TLB       ERROR_MESSAGE       FSC_FIELD   EXAMPLE:        To load the image  galaxy.dat  in the $IDL/examples/data        directory, type:         image = GETIMAGE('galaxy.dat', DIRECTORY=!DIR + '/examples/data', $           DIMENSIONS=[256,256], Cancel=cancelled, Parent=event.top)        IF NOT cancelled THEN TV, image   MODIFICATION HISTORY:        Written by: David Fanning, 3 February 96.        Fixed bug that prevented reading INTEGER data. 19 Dec 96.        Modifed program for IDL 5 MODAL operation. 19 Oct 97.        Added CANCEL keyword. 27 Oct 97. DWF.        Fixed CANCLE keyword spelling. Sigh... 29 JUN 98. DWF.        Added COYOTE_FIELD, improved appearance. 19 NOV 99. DWF.        Updated with latest version of COYOTE_FIELD. 18 FEB 2000. DWF.        Added CATCH keyword so the program will break when I want        it to. :-) 18 MAR 2000. DWF.        Added GROUP_LEADER keyword, which is synonymous with PARENT. 31 MAR 2000. DWF.        Updated obsolete PICKFILE call to DIALOG_PICKFILE. 17 JAN 2001. DWF.        Extensive update for IDL Programming Techniques, 3rd Edition. 1 November 2006. DWF.           XSIZE, YSIZE, CATCH, and FRAMES keyword made obsolete.           HEADDATA, ENDIAN, DATATYPE, DIMENSIONS keywords added.           Now dependent on FSC_FIELD, ERROR_MESSAGE, and CENTER_TLB from Coyote Library.        Added ability to parse fully qualified file names passed from Dialog_Pickfile. 30 Oct 2010. DWF.        IF a file name is not passed into the program, it asks the user to select one now. 10 Jan 2011. DWF.        Problem with SWAP_ENDIAN keywords fixed. 7 March 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/getimage.html#GETIMAGE_NULL_EVENTS", "GETIMAGE_NULL_EVENTS", 'routine in <a href="coyote/getimage.html">getimage.pro</a>', "getimage.pro", "", "GETIMAGE_NULL_EVENTS", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/getimage.html#GETIMAGE_DIMS_EVENTS", "GETIMAGE_DIMS_EVENTS", 'routine in <a href="coyote/getimage.html">getimage.pro</a>', "getimage.pro", "", "GETIMAGE_DIMS_EVENTS", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/getimage.html#GETIMAGE_XDR_EVENTS", "GETIMAGE_XDR_EVENTS", 'routine in <a href="coyote/getimage.html">getimage.pro</a>', "getimage.pro", "", "GETIMAGE_XDR_EVENTS", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/getimage.html#GETIMAGE_FIND_COYOTE", "GETIMAGE_FIND_COYOTE", 'routine in <a href="coyote/getimage.html">getimage.pro</a>', "getimage.pro", "", "GETIMAGE_FIND_COYOTE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/getimage.html#GETIMAGE_EVENT", "GETIMAGE_EVENT", 'routine in <a href="coyote/getimage.html">getimage.pro</a>', "getimage.pro", "", "GETIMAGE_EVENT", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/getimage.html#GETIMAGE", "GETIMAGE", 'routine in <a href="coyote/getimage.html">getimage.pro</a>', "getimage.pro", "", "GETIMAGE", "", "DirectoryDataTypeDimensionsHeaderHeadDataParentXDRXOffSetYOffSetCancelGroup_LeaderEndianXSIZEYSIZEFRAMESCatchfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/getopt.html", "getopt.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "getopt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/getopt.html#getopt", "getopt", 'routine in <a href="idlastro/getopt.html">getopt.pro</a>', "getopt.pro", "", "getopt", " NAME: 	GETOPT  PURPOSE: 	Convert a string supplied by the user into a valid scalar or vector  EXPLANATION: 	Distinct elements in the string may be 	separated by either a comma or a space.  The output scalar 	or vector can be specified to be  either  integer or floating 	point.   A null string is converted to a zero.  CALLING SEQUENCE:      option = GETOPT( input, [ type, numopt, COUNT = ])   INPUTS: 	input   - string that was input by user in response to a prompt 		Arithmetic operations can be included in the string (see 		examples)   OPTIONAL INPUTS: 	type    - Either an  I  (integer) or an  F  (floating point) specifying 		the datatype of the output vector.  Default is floating point  	numopt  - number of values expected by calling procedure 		If less than NUMOPT values are supplied the output 		vector will be padded with zeros.  OUTPUTS: 	option  - scalar or vector containing the numeric conversion of 		the fields in the string INPUT.  If NUMOPT is not 		supplied, the number of elements in OPTION will 		equal the number of distinct fields in INPUT.  OPTIONAL INPUT KEYWORD:        Count - integer giving the number of values actually returned by                GETOPT.   If the input is invalid then COUNT is set to -1  NOTES: 	(1) If an input is invalid, Count is set to -1 and the result is set 		to 999. 	(2) GETOPT uses the execute function to interpret the user string. 	 	Therefore GETOPT itself cannot be called with the EXECUTE 		function. 	(3) GETOPT has a hard limit of 10 tokens in the input string.   EXAMPLES: 	(1)   a = getopt( '3.4,5*4 ', 'I' )    yields   a = [ 3, 20] 	(2)   a = getopt( '5/2.', 'F', 5)      yields   a = [2.5,0.,0.,0.,0.] 	(3)   a = getopt( '2*3,5,6')           yields   a = [6.,5.,6.]   REVISON HISTORY: 	written by B. Pfarr, STX, 5/6/87 	change value of !ERR W. Landsman   STX,  6/30/88 	Converted to IDL V5.0   W. Landsman   September 1997  ", "countinputtypenumopt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/getprimaryscreensize.html", "getprimaryscreensize.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "getprimaryscreensize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/getprimaryscreensize.html#GetPrimaryScreenSize", "GetPrimaryScreenSize", 'routine in <a href="coyote/getprimaryscreensize.html">getprimaryscreensize.pro</a>', "getprimaryscreensize.pro", "       Dick Jackson, www.dick-jackson.com   ", "GetPrimaryScreenSize", "   Provides a way to get the screen size of the primary monitor, especially when    there are several being used.   ", "Exclude_Taskbar         Set this keyword to exclude the taskbar from the monitor size.          This keyword is ignored on all but Windows machines.   ", "Graphics", "     Change History: <span class= code-output >  Written, 8 March 2011. DJ</span> <span class= code-output >  Modified to only use IDLsysMonitorInfo for IDL 6.3 and higher. 23 Feb 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/getprimaryscreensize.html", "getprimaryscreensize.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "getprimaryscreensize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/getprimaryscreensize.html#GetPrimaryScreenSize", "GetPrimaryScreenSize", 'routine in <a href="idlastro/coyote/getprimaryscreensize.html">getprimaryscreensize.pro</a>', "getprimaryscreensize.pro", "       Dick Jackson, www.dick-jackson.com   ", "GetPrimaryScreenSize", "   Provides a way to get the screen size of the primary monitor, especially when    there are several being used.   ", "Exclude_Taskbar         Set this keyword to exclude the taskbar from the monitor size.          This keyword is ignored on all but Windows machines.   ", "Graphics", "     Change History: <span class= code-output >  Written, 8 March 2011. DJ</span> <span class= code-output >  Modified to only use IDLsysMonitorInfo for IDL 6.3 and higher. 23 Feb 2012. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.  ");
  
  

libdata[libdataItem++] = new Array("idlastro/getpro.html", "getpro.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "getpro.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/getpro.html#getpro", "getpro", 'routine in <a href="idlastro/getpro.html">getpro.pro</a>', "getpro.pro", "", "getpro", " NAME:      GETPRO  PURPOSE:      Search !PATH for a procedure, and copy into user's working directory  EXPLANATION:      Extract a procedure from an IDL Library or directory given in the      !PATH  system variable and place it in the current default directory      (presumably to be edited by the user).   CALLING SEQUENCE:      GETPRO, [ proc_name ]          ;Find PROC_NAME in !PATH and copy   OPTIONAL INPUT:      proc_name - Character string giving the name of the IDL procedure or                function.  Do not give an extension.   If omitted,                the program will prompt for PROC_NAME.   OUTPUTS:      None.   SIDE EFFECTS:       A file with the extension .pro and a name given by PROC_NAME will       be created on the user's directory.   PROCEDURE:       The FILE_WHICH() function is used to locate the procedure in the IDL       !PATH.     When found, FILE_COPY is used to       copy the procedure into the user's current default directory.    If not       found in !PATH, then the ROUTINE_INFO() function is used to determine       if it is an intrinsic IDL procedure.   EXAMPLE:        Put a copy of the USER library procedure CURVEFIT on the current        directory         IDL&gt; getpro, 'CURVEFIT'   RESTRICTIONS:        User will be unable to obain source code for a native IDL function        or procedure, or for a FORTRAN or C routine added with CALL_EXTERNAL.        User must have write privilege to the current directory   PROCEDURE CALLS:       ZPARCHECK  REVISION HISTORY:       Written W. Landsman, STX Corp.   June 1990       Now use intrinsic EXPAND_PATH() command  W. Landsman November 1994       Use ROUTINE_NAMES() to check for intrinsic procs  W. Landsman July 95       Update for Windows/IDL     W. Landsman      September 95       Check if procedure is in current directory  W. Landsman  June 1997       Use ROUTINE_INFO instead of undocumented ROUTINE_NAMES W.L. October 1998       Use FILE_WHICH() to locate procedure W. Landsman May 2006       Assume since V5.5, remove VMS support  W. Landsman Sep 2006       Assume since V6.0, use file_basename() W.Landsman Feb 2009       Test for .sav file, more robust test for write privilege W.L. Jul 2010  ", "proc_name", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/getpsf.html", "getpsf.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "getpsf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/getpsf.html#getpsf", "getpsf", 'routine in <a href="idlastro/getpsf.html">getpsf.pro</a>', "getpsf.pro", "", "getpsf", " NAME: 	GETPSF  PURPOSE: 	To generate a point-spread function (PSF) from observed stars.  EXPLANATION: 	The PSF is represented as a 2-dimensional Gaussian 	(integrated over each pixel) and a lookup table of residuals. 	The lookup table and Gaussian parameters are output in a FITS 	image file.   The PSF FITS file created by GETPSF can be 	read with the procedure RDPSF.      Adapted from the 1986 STSDAS 	version of DAOPHOT   CALLING SEQUENCE: 	GETPSF, image, xc, yc, apmag, sky, [ronois, phpadu, gauss, psf, 			idpsf, psfrad, fitrad, psfname, /DEBUG ]   INPUTS: 	IMAGE  - input image array 	XC     - input vector of x coordinates (from FIND), these should be 		IDL (first pixel is (0,0)) convention. 	YC     - input vector of y coordinates (from FIND) 	APMAG  - vector of magnitudes (from APER), used for initial estimate 		of gaussian intensity.  If APMAG is multidimensional, (more 		than 1 aperture was used in APER) then the first aperture 		is used. 	SKY    - vector of sky values (from APER)   OPTIONAL INPUTS: 	The user will be prompted for the following parameters if not supplied.  	RONOIS - readout noise per pixel, (in electrons, or equivalent photons) 	PHPADU - photons per analog digital unit, used to scale the data 		numbers in IMAGE into photon units 	IDPSF  - subscripts of the list of stars created by 		APER which will be used to define the PSF.   Stars whose 		centroid does not fall within PSFRAD of the edge of the frame, 		or for which a Gaussian fit requires more than 25 iterations, 		will be ignored when creating the final PSF. 	PSFRAD - the scalar radius, in pixels, of the circular area within 		which the PSF will be defined.   This should be slightly larger 		than the radius of the brightest star that one will be 		interested in. 	FITRAD - the scalar radius, in pixels of the circular area used in the 		least-square star fits.  Stetson suggest that FITRAD should 		approximately equal to the FWHM, slightly less for crowded 		fields.  (FITRAD must be smaller than PSFRAD.) 	PSFNAME- Name of the FITS file that will contain the table of residuals, 		and the best-fit Gaussian parameters.    This file is 		subsequently required for use by NSTAR.   OPTIONAL OUTPUTS: 	GAUSS  - 5 element vector giving parameters of gaussian fit to the 		first PSF star 		GAUSS(0) - height of the gaussian (above sky) 		GAUSS(1) - the offset (in pixels) of the best fitting gaussian 			and the original X centroid 		GAUSS(2) - similiar offset from the Y centroid 		GAUSS(3) - Gaussian sigma in X 		GAUSS(4) - Gaussian sigma in Y 	PSF    - 2-d array of PSF residuals after a Gaussian fit.   PROCEDURE: 	GETPSF fits a Gaussian profile to the core of the first PSF star 	and generates a look-up table of the residuals of the 	actual image data from the Gaussian fit.  If desired, it will then 	fit this PSF to another star (using PKFIT) to determine its precise 	centroid, scale the same Gaussian to the new star's core, and add the 	differences between the actual data and the scaled Gaussian to the 	table of residuals.   (In other words, the Gaussian fit is performed        only on the first star.)   OPTIONAL KEYWORD INPUT: 	DEBUG - if this keyword is set and non-zero, then the result of each 		fitting iteration will be displayed.   PROCEDURES CALLED 	DAOERF, MAKE_2D, MKHDR, RINTER(), PKFIT, STRNUMBER(), STRN(), WRITEFITS   REVISON HISTORY: 	Adapted from the 1986 version of DAOPHOT in STSDAS 	IDL Version 2  W Landsman           November 1988 	Use DEBUG keyword instead of !DEBUG  W. Landsman       May 1996 	Converted to IDL V5.0   W. Landsman   September 1997  ", "DEBUGimagexcycapmagskyronoisphpadugausspsfidpsfpsfradfitradpsfname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/getrot.html", "getrot.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "getrot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/getrot.html#getrot", "getrot", 'routine in <a href="idlastro/getrot.html">getrot.pro</a>', "getrot.pro", "", "getrot", " NAME:     GETROT  PURPOSE:      Return the rotation and plate scale of an image from its FITS header  EXPLANATION:      Derive the counterclockwise rotation angle, and the X and Y scale      factors of an image, from a FITS image header.   The input parameter      may be either a FITS image header or an astrometry structure (as      obtained by extast.pro)   CALLING SEQUENCE:      GETROT, Hdr, [ Rot, CDelt, /SILENT, DEBUG =  ]              or      GETROT, Astr, Rot, CDelt, /SILENT, DEBUG = ]   INPUT PARAMETERS:      HDR - FITS Image header (string array).  Program will extract the              astrometry structure               or      ASTR -  ASTROMETRY structure, of the type returned by EXTAST.              See the documentation for EXTAST.PRO for details.   OPTIONAL OUTPUT PARAMETERS:        ROT - Scalar giving the counterclockwise rotation of NORTH in DEGREES                from the +Y axis of the image.        CDELT- 2 element vector giving the scale factors in DEGREES/PIXEL in                the X and Y directions.   CDELT[1] is always positive, whereas                CDELT[0] is negative for a normal left-handed coordinate system,                and positive for a right-handed system.         If no output variables are supplied (or /DEBUG is set), then GETROT        will display the rotation and plate scale at the terminal.   OPTIONAL INPUT KEYWORD         ALT - single character 'A' through 'Z' or ' ' specifying an alternate              astrometry system present in the FITS header.   See extast.pro              for more information on the ALT keyword.    Ignored if an              astrometry structure rather than FITS header is supplied.        DEBUG - if DEBUG is set, GETROT will print the rotation for both the            X and Y axis when these values are unequal.  If DEBUG is set to 2,            then the output parameter ROT will contain both X and Y rotations.         /SILENT - if set, then do not provide a warning about a right-handed            coordinate system  PROCEDURE:        If the FITS header already contains CDELT (and CD or CROTA) keyword,        (as suggested by the Calabretta & Greisen (2002, A&A, 395, 1077) FITS        standard) then this is used for the scale factor.         If the header contains CD keywords but no CDELT keywords (as in IRAF        headers) then the scale factor is derived from the CD matrix.         In case of skew (different rotations of the X and Y axes), the rotations        are averaged together if they are less than 2 degrees.   Otherwise,        a warning is given and the X rotation is used.   PROCEDURES USED:        EXTAST, GSSS_EXTAST  REVISION HISTORY:        Written W. Landsman STX January 1987        Option to return both rotations added.  J. D. Offenberg, STX, Aug 1991        Use new astrometry structure   W. Landsman  Mar 1994        Recognize a GSSS header        W. Landsman  June 1994        Correct rotation determination with unequal CDELT values WL October 1998        Consistent conversion between CROTA and CD matrix  WL  October 2000        Correct CDELT computations for rotations near 90 deg WL November 2002        Preserve sign in the CDELT output  WL June 2003        Check if latitude/longitude reversed in CTYPE  WL  February 2004        Fix problem in latitude check  M.Lombardi/W.Landsman Sep 2004        Added ALT keyword W. Landsman May 2005        Account for any rotation of the native system by examining the value         of LONGPOLE       H. Taylor/W. Landsman        Account for case where X,Y rotations differ by 2*!pi WL. Aug 2011  ", "DEBUGSILENTALThdrrotcdelt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/getstruct copy.html", "getstruct copy.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "getstruct copy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/getstruct copy.html#getstruct", "getstruct", 'routine in <a href="code_snapshots/obsolete_code/getstruct copy.html">getstruct copy.pro</a>', "getstruct copy.pro", "", "getstruct", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "time           Outputs how much time the program takes  struct           Structure containing the centers and cropped images of all 3 suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/getstruct.html", "getstruct.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "getstruct.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/getstruct.html#getstruct", "getstruct", 'routine in <a href="code_snapshots/obsolete_code/getstruct.html">getstruct.pro</a>', "getstruct.pro", "", "getstruct", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "time           Outputs how much time the program takes  file           What file to find 3 centers for  struct           Structure containing the centers and cropped images of all 3 suns  scan_width           How apart the scans are for minicrop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gettok.html", "gettok.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gettok.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gettok.html#gettok", "gettok", 'routine in <a href="idlastro/gettok.html">gettok.pro</a>', "gettok.pro", "", "gettok", " NAME: 	GETTOK  PURPOSE: 	Retrieve the first part of a (vector) string up to a specified character  EXPLANATION: 	GET TOKen - Retrieve first part of string until the character char 	is encountered.   CALLING SEQUENCE: 	token = gettok( st, char, [ /EXACT, /NOTRIM ] )   INPUT: 	char - character separating tokens, scalar string   INPUT-OUTPUT: 	st - string to get token from (on output token is removed unless             /NOTRIM is set), scalar or vector   OUTPUT: 	token - extracted string value is returned, same dimensions as st  OPTIONAL INPUT KEYWORD:        /EXACT -  The default behaviour of GETTOK is to remove any leading               blanks and (if the token is a blank) convert tabs to blanks.               Set the /EXACT keyword to skip these steps and leave the               input string unchanged before searching for the  character               tokens.        /NOTRIM - if set, then the input string is left unaltered  EXAMPLE: 	If ST is ['abc=999','x=3.4234'] then gettok(ST,'=') would return 	['abc','x'] and ST would be left as ['999','3.4234']   PROCEDURE CALLS:        REPCHR()  HISTORY 	version 1  by D. Lindler APR,86 	Remove leading blanks    W. Landsman (from JKF)    Aug. 1991        V5.3 version, accept vector input   W. Landsman February 2000        Slightly faster implementation  W. Landsman   February 2001        Added EXACT keyword  W. Landsman March 2004        Assume since V5.4, Use COMPLEMENT keyword to WHERE W. Landsman Apr 2006        Added NOTRIM keyword W. L. March 2011  ", "exactnotrimstchar", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jhuapl/getwrd.html", "getwrd.pro", '.pro file in <a href="idlastro/jhuapl/dir-overview.html">idlastro/jhuapl/ directory</a>', "getwrd.pro", "", "", " NAME:        GETWRD  PURPOSE:        Return the n'th word from a text string.  CATEGORY:  CALLING SEQUENCE:        wrd = getwrd(txt, n, [m])  INPUTS:        txt = text string to extract from.         in          The first element is used if txt is an array.        n = word number to get (first = 0 = def).  in        m = optional last word number to get.      in  KEYWORD PARAMETERS:        Keywords:          LOCATION = l.  Return word n string location.          DELIMITER = d. Set word delimiter (def = space & tab).          /LAST means n is offset from last word.  So n=0 gives            last word, n=-1 gives next to last, ...            If n=-2 and m=0 then last 3 words are returned.          /NOTRIM suppresses whitespace trimming on ends.          NWORDS=n.  Returns number of words in string.  OUTPUTS:        wrd = returned word or words.              out  COMMON BLOCKS:        getwrd_com  NOTES:        Note: If a NULL string is given (txt=  ) then the last string              given is used.  This saves finding the words again.              If m &gt; n wrd will be a string of words from word n to              word m.  If no m is given wrd will be a single word.              n&lt;0 returns text starting at word abs(n) to string end              If n is out of range then a null string is returned.              See also nwrds.  MODIFICATION HISTORY:        Ray Sterner,  6 Jan, 1985.        R. Sterner, Fall 1989 --- converted to SUN.        R. Sterner, Jan 1990 --- added delimiter.        R. Sterner, 18 Mar, 1990 --- added /LAST.        R. Sterner, 31 Jan, 1991 --- added /NOTRIM.        R. Sterner, 20 May, 1991 --- Added common and NULL string.        R. Sterner, 13 Dec, 1992 --- Made tabs equivalent to spaces.        R. Sterner,  4 Jan, 1993 --- Added NWORDS keyword.        R. Sterner, 2001 Jan 15 --- Fixed to use first element if not a scalar.        Johns Hopkins University Applied Physics Laboratory.   Copyright (C) 1985, Johns Hopkins University/Applied Physics Laboratory  This software may be used, copied, or redistributed as long as it is not  sold and this copyright notice is reproduced on each copy made.  This  routine is provided as is without any express or implied warranties  whatsoever.  Other limitations apply as described in the file disclaimer.txt.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/getwrd.html#GETWRD", "GETWRD", 'routine in <a href="idlastro/jhuapl/getwrd.html">getwrd.pro</a>', "getwrd.pro", "", "GETWRD", "", "helplocationdelimiternotrimlastnwordsTXTSTRNTHMTH", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/glactc.html", "glactc.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "glactc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/glactc.html#glactc", "glactc", 'routine in <a href="idlastro/glactc.html">glactc.pro</a>', "glactc.pro", "", "glactc", " NAME:        GLACTC  PURPOSE:         Convert between celestial and Galactic (or Supergalactic) coordinates.  EXPLANATION:        Program to convert right ascension (ra) and declination (dec) to        Galactic longitude (gl) and latitude (gb) (j=1) or vice versa (j=2).   CALLING SEQUENCE:        GLACTC, ra, dec, year, gl, gb, j, [ /DEGREE, /FK4, /SuperGalactic ]   INPUT PARAMETERS:        year     equinox of ra and dec, scalar       (input)        j        direction of conversion     (input)                1:  ra,dec --&gt; gl,gb                2:  gl,gb  --&gt; ra,dec   INPUTS OR OUTPUT PARAMETERS: ( depending on argument J )        ra       Right ascension, hours (or degrees if /DEGREES is set),                          scalar or vector        dec      Declination, degrees,scalar or vector        gl       Galactic longitude, degrees, scalar or vector        gb       Galactic latitude, degrees, scalar or vector         All results forced double precision floating.   OPTIONAL INPUT KEYWORD PARAMETERS:        /DEGREE - If set, then the RA parameter (both input and output) is                 given in degrees rather than hours.        /FK4 - If set, then the celestial (RA, Dec) coordinates are assumed               to be input/output in the FK4 system.    By default,  coordinates               are assumed to be in the FK5 system.    For B1950 coordinates,               set the /FK4 keyword *and* set the year to 1950.        /SuperGalactic - If set, the GLACTC returns SuperGalactic coordinates               as defined by deVaucouleurs et al. (1976) to account for the               local supercluster. The North pole in SuperGalactic coordinates               has Galactic coordinates l = 47.47, b = 6.32, and the origin is               at Galactic coordinates l = 137.37, b= 0   EXAMPLES:        Find the Galactic coordinates of Altair (RA (J2000): 19 50 47        Dec (J2000): 08 52 06)         IDL&gt; glactc, ten(19,50,47),ten(8,52,6),2000,gl,gb,1        ==&gt; gl = 47.74, gb = -8.91   PROCEDURE CALLS:        BPRECESS, JPRECESS, PRECESS  HISTORY:        FORTRAN subroutine by T. A. Nagy, 21-MAR-78.        Conversion to IDL, R. S. Hill, STX, 19-OCT-87.        Modified to handle vector input, E. P. Smith, GSFC, 14-OCT-94        Converted to IDL V5.0   W. Landsman   September 1997        Added DEGREE keyword, C. Markwardt, Nov 1999        Major rewrite, default now FK5 coordinates, added /FK4 keyword        use external precession routines    W. Landsman   April 2002        Add /Supergalactic keyword W. Landsman  September 2002        Fix major bug when year not 2000 and /FK4 not set W. Landsman July 2003  ", "degreefk4SuperGalacticradecyearglgbj", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/glactc_pm.html", "glactc_pm.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "glactc_pm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/glactc_pm.html#glactc_pm", "glactc_pm", 'routine in <a href="idlastro/glactc_pm.html">glactc_pm.pro</a>', "glactc_pm.pro", "", "glactc_pm", " NAME:        GLACTC_PM  PURPOSE:         Convert between celestial and Galactic (or Supergalactic) proper         motion (also converts coordinates).  EXPLANATION:        Program to convert proper motion in equatorial coordinates (ra,dec)        to proper motion in Galactic coordinates (gl, gb) or Supergalacic        Coordinates  (sgl,sgb)  or back to equatorial coordinates (j=2).        The proper motion unit is arbitrary, but be sure to set /MUSTAR if        units are the projection of the proper motion on the RA, Dec axis.        It does precession on the coordinates but does not        take care of precession of the proper motions which is usually a        very small effect.   CALLING SEQUENCE:        GLACTC_PM, ra, dec, mu_ra,mu_dec,year, gl, gb, mu_gl, mu_gb, j,                   [ /DEGREE, /FK4, /SuperGalactic, /mustar ]   INPUT PARAMETERS:        year     equinox of ra and dec, scalar       (input)        j        direction of conversion     (input) 		1:  ra,dec,mu_ra,mu_dec --&gt; gl,gb,mu_gl,mu_gb 		2:  gl,gb,mu_gl,mu_gb  --&gt; ra,dec,mu_ra,mu_dec   INPUTS OR OUTPUT PARAMETERS: ( depending on argument J )        ra       Right ascension, hours (or degrees if /DEGREES is set),                          scalar or vector.        dec      Declination, degrees,scalar or vector        mu_ra    right ascension proper motion any proper motion unit 					(angle/time)        mu_dec    declination proper motion in any proper motion unit 					(angle/time)        gl       Galactic longitude, degrees, scalar or vector        gb       Galactic latitude, degrees, scalar or vector        mu_gl    galactic longitude proper motion in any time unit        mu_gb    galactic latitude proper motion in any time unit        All results forced double precision floating.   OPTIONAL INPUT KEYWORD PARAMETERS:        /DEGREE - If set, then the RA parameter (both input and output) is                 given in degrees rather than hours.        /FK4 - If set, then the celestial (RA, Dec) coordinates are assumed               to be input/output in the FK4 system.    By default,  coordinates               are assumed to be in the FK5 system.    For B1950 coordinates,               set the /FK4 keyword *and* set the year to 1950.        /SuperGalactic - If set, the GLACTC returns SuperGalactic coordinates               as defined by deVaucouleurs et al. (1976) to account for the               local supercluster. The North pole in SuperGalactic coordinates               has Galactic coordinates l = 47.47, b = 6.32, and the origin is               at Galactic coordinates l = 137.37, b= 0 	/mustar - if set then input and output of mu_ra and mu_dec are the                 projections of mu in the ra or dec direction rather than 		the d(ra)/dt or d(mu)/dt.  So mu_ra becomes mu_ra*cos(dec)                and mu_gl becomes mu_gl*cos(gb).   EXAMPLES:        Find the SuperGalactic proper motion of M33 given its        equatorial proper motion mu* =(-29.3, 45.2) microas/yr.        Where the (*) indicates ra component is actual mu_ra*cos(dec) 		(Position: RA (J2000): 01 33 50.9, Dec (J2000): 30 39 36.8)         IDL&gt; glactc_pm, ten(1,33,50.9),ten(30,39,36.8),-29.3,45.2, 2000,$ 				sgl,sgb,mu_sgl,mu_sgb,1,/Supergalactic,/mustar        ==&gt; SGL = 328.46732 deg, SGB = -0.089896901 deg, 			mu_sgl = 33.732 muas/yr, mu_gb = 41.996 muas/yr.          And for the roundtrip:        IDL&gt; glactc_pm, ra,dec,mu_ra,mu_dec,2000,$        IDL&gt;  sgl,sgb,mu_sgl,mu_sgb,2,/Supergalactic,/mustar         ==&gt; ra=1.5641376 hrs., dec= 30.660277 deg,             mu_ra= -29.300000 muas/yr, mu_dec=i 45.200000 muas/yr   PROCEDURE CALLS:        BPRECESS, JPRECESS, PRECESS  HISTORY:        Written                Ed Shaya, U of MD,  Oct 2009.        Adapted from GLACTC  to make proper motion transformations,        Correct occasional sign error in galactic longitude E. Shaya  Nov 2011  ", "degreefk4SuperGalacticmustarradecmu_ramu_decyearglgbmu_glmu_gbj", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/gmascl.html", "gmascl.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "gmascl.pro", "", "", " NAME:        GMASCL   PURPOSE:         This is a utility routine to perform basic gray-level pixel        transformations of images. I think of it as BYTSCL on steroids.        It is similar to IMADJUST in _Digital Image Processing with MATLAB_        by Gonzales, Wood, and Eddins. It performs a log scaling of the        image array.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         scaledImage = GMASCL(image)   ARGUMENTS:         image:         The image to be scaled. Written for 2D images, but arrays                       of any size are treated alike.   KEYWORDS:         GAMMA:         The exponent in a power-law transformation (image^gamma). A gamma                       value of 1 results in a linear distribution of values between                       OMIN and OMAX. Gamma values less than 1 map darker image values                       into a wider range of output values, and Gamma values                       greater than 1 maps lighter image values into a wider                       range of output values. The gamma value is constrained to                       be greater than 1.0e-6.         MAX:           Any value in the input image greater than this value is                       set to this value before scaling.         MIN:           Any value in the input image less than this value is                       set to this value before scaling.         NEGATIVE:      If set, the  negative  of the result is returned.         OMAX:          The output image is scaled between OMIN and OMAX. The                       default value is 255.         OMIN:          The output image is scaled between OMIN and OMAX. The                       default value is 0.  RETURN VALUE:         scaledImage:   The output, scaled into the range OMIN to OMAX. A byte array.   COMMON BLOCKS:        None.   EXAMPLES:         LoadCT, 0                                            ; Gray-scale colors.        image = cgDemoData(11)                                 ; Load image.        TV, GmaScl(image, Min=30, Max=100)                   ; Similar to BytScl.        TV, GmaScl(image, /Negative)                         ; Produce negative image.        power = Shift(ALog(Abs(FFT(image,-1))), 124, 124)    ; Create power spectrum.        TV, GmaScl(power, Gamma=2.5)                         ; View power specturm with gamma correction.        TV, GmaScl(power, Gamma=2.5, /Negative)              ; Reverse power spectrum.   RESTRICTIONS:       Requires cgScaleVector from the Coyote Library:          http://www.idlcoyote.com/programs/cgScaleVector.pro   MODIFICATION HISTORY:         Written by:  David W. Fanning, 17 February 2006.        Fixed a problem with output scaling. 1 July 2009. DWF (with input from Bo Milvang-Jensen).        Now setting NAN keyword on all MIN and MAX functions. 2 Dec 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/gmascl.html#GmaScl", "GmaScl", 'routine in <a href="coyote/gmascl.html">gmascl.pro</a>', "gmascl.pro", "", "GmaScl", "", "GAMMAMAXMINNEGATIVEOMAXOMINimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/gord_fid.html", "gord_fid.pro", '.pro file in <a href="code_snapshots/test_version/obsolete_files/dir-overview.html">code_snapshots/test_version/obsolete_files/ directory</a>', "gord_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/gord_fid.html#gord_fid", "gord_fid", 'routine in <a href="code_snapshots/test_version/obsolete_files/gord_fid.html">gord_fid.pro</a>', "gord_fid.pro", "", "gord_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/gord_fid.html", "gord_fid.pro", '.pro file in <a href="code_snapshots/orig_version/obsolete_files/dir-overview.html">code_snapshots/orig_version/obsolete_files/ directory</a>', "gord_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/gord_fid.html#gord_fid", "gord_fid", 'routine in <a href="code_snapshots/orig_version/obsolete_files/gord_fid.html">gord_fid.pro</a>', "gord_fid.pro", "", "gord_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/obsolete_files/gord_fid.html", "gord_fid.pro", '.pro file in <a href="sep20/obsolete_files/dir-overview.html">sep20/obsolete_files/ directory</a>', "gord_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/obsolete_files/gord_fid.html#gord_fid", "gord_fid", 'routine in <a href="sep20/obsolete_files/gord_fid.html">gord_fid.pro</a>', "gord_fid.pro", "", "gord_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/gord_fid.html", "gord_fid.pro", '.pro file in <a href="code_snapshots/jul25/obsolete_files/dir-overview.html">code_snapshots/jul25/obsolete_files/ directory</a>', "gord_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/gord_fid.html#gord_fid", "gord_fid", 'routine in <a href="code_snapshots/jul25/obsolete_files/gord_fid.html">gord_fid.pro</a>', "gord_fid.pro", "", "gord_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/gord_fid.html", "gord_fid.pro", '.pro file in <a href="code_snapshots/sep11/obsolete_files/dir-overview.html">code_snapshots/sep11/obsolete_files/ directory</a>', "gord_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/gord_fid.html#gord_fid", "gord_fid", 'routine in <a href="code_snapshots/sep11/obsolete_files/gord_fid.html">gord_fid.pro</a>', "gord_fid.pro", "", "gord_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/gord_fid.html", "gord_fid.pro", '.pro file in <a href="code_snapshots/albert_version/obsolete_files/dir-overview.html">code_snapshots/albert_version/obsolete_files/ directory</a>', "gord_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/gord_fid.html#gord_fid", "gord_fid", 'routine in <a href="code_snapshots/albert_version/obsolete_files/gord_fid.html">gord_fid.pro</a>', "gord_fid.pro", "", "gord_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/greek.html", "greek.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "greek.pro", "", "", " NAME:   GREEK   PURPOSE:     This function provides a device-independent way to ask for a Greek letter as    a string that can be included, for example, in a plot title. It uses the Greek    simplex font (!4) when used with Hershey fonts, and the Symbol font (!9) when    used with PostScript or True-Type fonts. Selects the type of Greek character to    return based on value of !P.FONT. Updated now to return the UNICODE values for    Greek characters for those fonts that support them (Macintosh?).   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Graphics, Utilities   CALLING SEQUENCE:     greekString = Greek(greekLetter)   RETURN VALUE:     greekString    A string that represents the Greek letter.   ARGUMENTS:    greekLetter:    The name of the Greek letter desired. A string. Default: 'alpha'.                   Valid string names are the 24 characters of the Greek alphabet.                      alpha        nu                      beta         xi                      gamma        omicron                      delta        pi                      epsilon      rho                      zeta         sigma                      eta          tau                      theta        upsilon                      iota         phi                      kappa        chi                      lambda       psi                      mu           omega                     Note that if the first letter of the name is capitalized, this is                    the equivalent of setting the CAPITAL keyword.   KEYWORDRS:    CAPTIAL:        If this keyword is set, the captial Greek letter is returned rather                   than the lowercase Greek letter. An alternative way of capitalizing                   the letter is to make the first letter of the name an uppercase letter.    EXAMPLE:        If this keyword is set, the names of the Greek characters and their                   symbols are written out in the current graphics window.    PS:             Normally, the PostScript version of the greek letter is returned if                   the current device is PostScript and !P.Font is 0 or 1. But, the                   PostScript version of the greek letter can be obtained at any time                   and in any device, by setting this keyword.    UNICODE:        If this keyword is set, the function returns the Unicode for the Greek                   letter.   EXAMPLE:    Lowercase PSI:       IDL&gt; Plot, findgen(11), XTitle='This title contains ' + $            Greek('psi') + ' as a Greek letter'    Uppercase PSI:       IDL&gt; Plot, findgen(11), XTitle='This title contains ' + $            Greek('Psi') + ' as a Greek letter'  NOTES:    See the following article for additional information:         http://www.idlcoyote.com/ps_tips/greeksym.html   RESTRICTIONS:    For this program to work correctly on your graphics display, you should be using   Hershey fonts (!P.Font=-1). It will work correctly in PostScript with either   hardware fonts (!P.Font=0) or True-Type fonts (!P.Font=1).   MODIFICATION HISTORY:    Written by: David W. Fanning, 9 January 2010.   An alternative way to get an uppercase letter is to make the first letter of      the Greek name uppercase. (Maarten Sneep's suggestion!) 11 Jan 2010. DWF   Had the wrong value for the PostScript version of Phi. 26 January 2010. DWF   Added UNICODE keyword and values for Greek characters. 11 June 2010. DWF.   Changed the branching from !D.NAME EQ 'PS' to !P.FONT NE -1. (This is actually       what the documentation says, and what I intended.) 13 Dec 2010. DWF.   I don't think the last change did quite want I wanted. More tweaking to make       this more responsive to being in a PostScript file. 31 July 2011. DWF.   Added PS keyword so the return value is the PostScript file. This is for       convenience only, as the return value will be the PostScript value if       the current graphics device is PS and FONT is not equal to -1. 30 Aug 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/greek.html#Greek_Example", "Greek_Example", 'routine in <a href="idlastro/coyote/greek.html">greek.pro</a>', "greek.pro", "", "Greek_Example", "", "UNICODEPS", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/greek.html#Greek", "Greek", 'routine in <a href="idlastro/coyote/greek.html">greek.pro</a>', "greek.pro", "", "Greek", "", "CAPITALEXAMPLEPSUNICODEletter", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/group.html", "group.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "group.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/group.html#GROUP", "GROUP", 'routine in <a href="idlastro/group.html">group.pro</a>', "group.pro", "", "GROUP", " NAME:       GROUP  PURPOSE:       Assign stars with non-overlapping PSF profiles into distinct groups  EXPLANATION:       Part of the IDL-DAOPHOT sequence   CALLING SEQUENCE:       GROUP, X, Y, RCRIT, NGROUP   INPUTS:       X - vector, giving X coordinates of a set of stars.       Y - vector, giving Y coordinates of a set of stars.            If X and Y are input as integers, then they will be converted to            floating point       RCRIT - scalar, giving minimum distance between stars of two                distinct groups.  Stars less than this distance from                each other are always in the same group.    Stetson suggests                setting the critical distance equal to the PSF radius +                the Fitting radius.   OUTPUTS:       NGROUP - integer vector, same number of elements as X and Y,                giving a group number for each star position.  Group                numbering begins with 0.   METHOD:       Each position is initially given a unique group number.  The distance       of each star is computed against every other star.   Those distances       less than RCRIT are assigned the minimum group number of the set.   A       check is then made to see if any groups have merged together.   PROCEDURES USED:       REM_DUP()   REVISION HISTORY:       Written W. Landsman  STX                  April, 1988       Major revision to properly merge groups together  W. Landsman   Sep 1991       Work for more than 32767 points    W. Landsman  March 1997       Converted to IDL V5.0   W. Landsman   September 1997       Avoid overflow if X and Y are integers      W. Landsman  Feb. 1999  ", "XYRCRITNGROUP", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gsss_stdast.html", "gsss_stdast.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gsss_stdast.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gsss_stdast.html#GSSS_StdAst", "GSSS_StdAst", 'routine in <a href="idlastro/gsss_stdast.html">gsss_stdast.pro</a>', "gsss_stdast.pro", "", "GSSS_StdAst", " NAME:       GSSS_STDAST   PURPOSE:       Insert the closest tangent projection astrometry into an GSSS Image   DESCRIPTION:        This procedure takes a header with GSSS (ST Guide Star Survey)        astrometry and writes a roughly equivalent tangent projection        astrometry into the header.     One might want to do this if (1)        one needs to use software which does not recognize the GSSS astrometric        parameters or (2) if the the image to be transformed, since the        highly nonlinear GSSS solution does not transform easily.   CALLING SEQUENCE:        GSSS_STDAST, H, [Xpts, Ypts]   INPUT - OUTPUT:        H -  FITS header (string array) containing GSSS astrometry.        GSSS_STDAST will write the roughly equivalent tangent projection                astrometry solution into H.  OPTIONAL INPUTS:        xpts, ypts -- Vectors giving the X and Y positions of the three                reference points used to find approximate tangent projection.                Default is Xpts = [0.2,0.8,0.5], Ypts = [0.2, 0.4, 0.8]  METHOD:        The procedures GSSSXYAD is used to exactly determine the RA and Dec        at 3 reference points.    STARAST is then used to find the tangent        projection astrometry that best matches these reference points.   NOTES:        Images from the STScI server (http://archive.stsci.edu/dss/) contain        both a GSSS polynomial plate solution and an approximate WCS tangent        projection.    The value  of the WCSNAME keyword in the FITS header        is 'DSS'.    If WCSNAME =  DSS' then the more accurate DSS astrometry        is extracted by EXTAST    This procedure changes the value of WCSNAME        to 'DSS_TANGENT' to indicate that the tangent solution should be used.         Some early GSSS images (before the 1994 CD-Rom) used keywords CRPIXx        rather than CNPIXx.    The GSSS astrometry in these images could be        corrupted by this procedure as the CRPIXx values will be altered.         The tangent is only a approximation of the nonlinear GSSS astrometry,        but is generally accurate to about 0.1 pixels on a 1024 x 1024 image.   PROCEDURES USED:        GSSSEXTAST, GSSSXYAD, STARAST, PUTAST, SXADDHIST, SXDELPAR   HISTORY:        13-AUG-91 Version 2 written from MAKEASTGSSS  Eric Deutsch (STScI)        Delete CDELT* keywords from header   W. Landsman      May 1994        Remove call to BUILDAST  W. Landsman                  Jan, 1995        Added optional Xpts, Ypts parameters   E. Deutsch     Oct, 1995        Add WCSNAME   W. Landsman                             Nov 2006  ", "hxptsypts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gsssadxy.html", "gsssadxy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gsssadxy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gsssadxy.html#GSSSadxy", "GSSSadxy", 'routine in <a href="idlastro/gsssadxy.html">gsssadxy.pro</a>', "gsssadxy.pro", "", "GSSSadxy", " NAME:       GSSSADXY  PURPOSE:        Converts RA and DEC (J2000) to (X,Y) for an STScI GuideStar image.  EXPLANATION:        The sky coordinates may be printed and/or returned in variables.   CALLING SEQUENCE:        GSSSADXY, GSA, Ra,Dec, [ X, Y, /Print ]  INPUT:        GSA - the GSSS Astrometry structure created by GSSSEXTAST        RA  - the RA coordinate(s) in *degrees*, scalar or vector        DEC - the DEC coordinate(s) in *degrees*, scalar or vector   OPTIONAL KEYWORD INPUT:        /PRINT - If this keyword is set and non-zero, then coordinates will be                displayed at the terminal  OUTPUT:        X - the corresponding X pixel coordinate(s), double precision        Y - the corresponding Y pixel coordinate(s), double precision         X and Y will be in IDL convention (first pixel 0,0)  EXAMPLE:        Given a FITS header, hdr, from the STScI Guidestar Survey, determine        the X,Y coordinates of 3C 273 (RA = 12 29 6.7  +02 03 08)         IDL&gt; GSSSEXTAST, hdr, gsa          ;Extract astrometry structure        IDL&gt; GSSSADXY, gsa, ten(12,29,6.7)*15,ten(2,3,8),/print   NOTES:        For most purpose users can simply use ADXY, which will call GSSSADXY        if it is passed a GSSS header.   PROCEDURES CALLED:        ASTDISP - Print RA, Dec in standard format  HISTORY:        10-JUL-90 Version 1 written by Eric W. Deutsch                Derived from procedures written by Brian McLean        Vectorized code   W. Landsman        March, 1991        14-AUG-91 Fixed error which caused returned X and Y to be .5 pixels too                large.  Now X,Y follows same protocol as ADXY.        June 1994 - Dropped PRFLAG parameter, added /PRINT  W. Landsman (HSTX)        Converted to IDL V5.0   W. Landsman   September 1997        29-JUN-99 Added support for AMD[X,Y]1[2-3] for DSS images by E. Deutsch        Reduce memory requirements for large arrays D. Finkbeiner April 2004  ", "PRINTgsaradecxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gsssextast.html", "gsssextast.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gsssextast.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gsssextast.html#GSSSExtAst", "GSSSExtAst", 'routine in <a href="idlastro/gsssextast.html">gsssextast.pro</a>', "gsssextast.pro", "", "GSSSExtAst", " NAME:       GSSSEXTAST   PURPOSE:       Extract IDL astrometry structure from a ST Guide Star Survey FITS header   EXPLANATION:       This procedure extracts the astrometry information from a ST Guide       Star Survey FITS header and places it in an IDL structure for       subsequent use with GSSSxyad and GSSSadxy.   CALLING SEQUENCE:       GSSSExtast, hdr, astr, noparams  INPUT:       h - the GSSS FITS header  OUTPUT:       astr  - Structure containing the GSSS Astrometry information                .CTYPE  =  ['RA---GSS','DEC--GSS']                .CRVAL = plate center Ra, Dec (from PLTRAH, PLTRAM etc.)                .XLL,.YLL = offsets lower lefthand corner                .AMDX, .AMDY = 12 transformation coefficients                .XSZ,.YSZ = X and Y pixel size in microns                .PLTSCL = plate scale in arc sec/mm                .PPO3, .PPO6 - orientation coefficients  NOTES:       Most users should use EXTAST rather than this procedure.   EXTAST will       call GSSSEXTAST if supplied with GSSS FITS header.   PROCEDURES CALLED:       SXPAR() - Extract parameter values from a FITS header  HISTORY:        01-JUL-90 Version 1 written by Eric W. Deutsch        Code derived from Software by Brian McLean        20-AUG-91 Modified to Double Precision Variables.  E. Deutsch        June 94 Change astrometry tags to better agree with EXTAST  W. Landsman        Converted to IDL V5.0   W. Landsman   September 1997        29-JUN-99 Added support for AMD[X,Y]1[2-3] for DSS images by E. Deutsch        Eliminate use of obsolete !ERR  W. Landsman    February 2000  ", "hastrnoparams", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/gsssxyad.html", "gsssxyad.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "gsssxyad.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/gsssxyad.html#GSSSxyad", "GSSSxyad", 'routine in <a href="idlastro/gsssxyad.html">gsssxyad.pro</a>', "gsssxyad.pro", "", "GSSSxyad", " NAME:        GSSSXYAD  PURPOSE:        Convert (X,Y) coordinates in a STScI Guide Star image to RA and Dec  EXPLANATION:        The sky coordinates may be printed and/or returned in variables.   CALLING SEQUENCE:        GSSSxyad, gsa, x, y, ra, dec, [ /PRINT ]  INPUT:        GSA  - The GSSS Astrometry structure extracted from a FITS header               by GSSSEXTAST        X - The X pixel coordinate(s) of the image, scalar or vector        Y - The Y pixel coordinate(s) of the image, scalar or vector   OUTPUT:        RA - The RA coordinate of the given pixel(s) in *degrees*        DEC - The DEC coordinate of the given pixel(s) in *degrees*         Both RA and Dec will be returned as double precision   OPTIONAL KEYWORD INPUT:        /PRINT - If this keyword is set and non-zero, then coordinates will be                displayed at the terminal  EXAMPLE:        Given a FITS header,hdr, from a GSSS image, print the astronomical        coordinates of (X,Y) = (200.23, 100.16) at the terminal         IDL&gt; GSSSExtast, hdr, gsa        ;Extract astrometry structure        IDL&gt; GSSSxyad, gsa, 200.23, 100.16, /print   NOTES:        For most purpose users can simply use XYAD, which will call GSSSXYAD        if it is passed a GSSS header.   PROCEDURES CALLED:        ASTDISP - print RA, Dec in a standard format  HISTORY:        01-JUL-90 Version 1 written by Eric W. Deutsch        Vectorized Code   W. Landsman        March, 1991        14-AUG-91 Fixed error which caused returned RA and DEC to be off by        -.5 pixels in both X,Y.  Now X,Y follows same protocol as ADXY.        20-AUG-91 Modified to use AstDisp procedure.        June 94 Added /PRINT keyword instead of PRFLAG W. Landsman June 94        Converted to IDL V5.0   W. Landsman   September 1997        29-JUN-99 Added support for AMD[X,Y]1[2-3] for DSS images by E. Deutsch  ", "PRINTgsaxinyinradec", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hadec2altaz.html", "hadec2altaz.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hadec2altaz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hadec2altaz.html#hadec2altaz", "hadec2altaz", 'routine in <a href="idlastro/hadec2altaz.html">hadec2altaz.pro</a>', "hadec2altaz.pro", "", "hadec2altaz", "  NAME:      HADEC2ALTAZ   PURPOSE:       Converts Hour Angle and Declination to Horizon (alt-az) coordinates.   EXPLANATION:       Can deal with NCP/SCP singularity.    Intended mainly to be used by       program EQ2HOR   CALLING SEQUENCE:       HADEC2ALTAZ, ha, dec, lat ,alt ,az [ /WS ]   INPUTS      ha -  the local apparent hour angle, in DEGREES, scalar or vector      dec -  the local apparent declination, in DEGREES, scalar or vector      lat -  the local latitude, in DEGREES, scalar or vector   OUTPUTS      alt - the local apparent altitude, in DEGREES.      az  - the local apparent azimuth, in DEGREES, all results in double            precision  OPTIONAL KEYWORD INPUT:       /WS - Set this keyword for the output azimuth to be measured West from             South.    The default is to measure azimuth East from North.   EXAMPLE:      What were the apparent altitude and azimuth of the sun when it transited      the local meridian at Pine Bluff Observatory (Lat=+43.07833 degrees) on      April 21, 2002?   An object transits the local meridian at 0 hour angle.      Assume this will happen at roughly 1 PM local time (18:00 UTC).       IDL&gt; jdcnv, 2002, 4, 21, 18., jd  ; get rough Julian date to determine                                        ;Sun ra, dec.      IDL&gt; sunpos, jd, ra, dec      IDL&gt; hadec2altaz, 0., dec, 43.078333, alt, az         ===&gt; Altitude alt = 58.90             Azimuth  az = 180.0  REVISION HISTORY:       Written  Chris O'Dell Univ. of Wisconsin-Madison May 2002  ", "WShadeclataltaz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/hasimagemagick.html", "hasimagemagick.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "hasimagemagick.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/hasimagemagick.html#HasImageMagick", "HasImageMagick", 'routine in <a href="idlastro/coyote/hasimagemagick.html">hasimagemagick.pro</a>', "hasimagemagick.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "HasImageMagick", "   Searches for the ImageMagick  convert  command to see if ImageMagick is available    on the system.   ", "VERSION        Returns the version number of the ImageMagick convert command, if found.   ", "Utilities", "     Change History: <span class= code-output >  Written, 17 January 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used to determine if the ImageMagick convert command is available:   <span class= code-prompt >IDL&gt;</span> available = HasImageMagick(Version=version)   <span class= code-prompt >IDL&gt;</span> IF available THEN Print, version  ");
  
  

libdata[libdataItem++] = new Array("idlastro/hastrom.html", "hastrom.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hastrom.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hastrom.html#hastrom", "hastrom", 'routine in <a href="idlastro/hastrom.html">hastrom.pro</a>', "hastrom.pro", "", "hastrom", " NAME:        HASTROM  PURPOSE:        Transformation of an image to align it with a reference image  EXPLANATION:        A  transformation is applied (using POLY_2D) to an image so that        its astrometry is identical with that in a reference header.  This        procedure can be used to align two images.   CALLING SEQUENCE:        HASTROM, oldim, oldhd, newim, newhd, refhd, [MISSING =, INTERP = ]                             or        HASTROM, oldim, oldhd, refhd, [MISSING =, INTERP ={0,1,2}, NGRID =,                                       CUBIC =, DEGREE = ]   INPUTS:        OLDIM - Image array to be manipulated.  If only 3 parameters are                supplied then OLDIM and OLDHD will be modified to contain                the output image array and header        OLDHD - FITS header array for OLDIM, containing astrometry parameters        REFHD - Reference header, containing astrometry parameters.  OLDIM                will be rotated, shifted, and compressed or expanded until                its astrometry matches that in REFHD.  OUTPUTS:        NEWIM - Image array after transformation has been performed.                The dimensions of NEWIM will be identical to the NAXIS1 and                NAXIS2 keywords specified in REFHD.  Regions on the reference                image that do not exist in OLDIM can be assigned a value with                the MISSING keyword.        NEWHD - Updated FITS image header associated with NEWIM   OPTIONAL INPUT KEYWORDS:        MISSING - Set this keyword to a scalar value which will be assigned                to pixels in the output image which are out of range of the                supplied imput image.  If not supplied, then linear                extrapolation is used.   See the IDL manual on POLY_2D.                ***NOTE: A bug was introduced into the POLY_2D function in IDL                V5.5 (fixed in V6.1) such that the MISSING keyword                may not work properly with floating point data***        INTERP - Scalar, one of 0, 1, or 2 determining type of interpolation                0 nearest neighbor, 1 (default) bilinear interpolation,                2 cubic interpolation.        CUBIC - a scalar value between -1 and 0 specifying cubic interpolation                with the specified value as the cubic interpolation parameter.               (see poly_2d for info).    Setting CUBIC to a value greater                than zero is equivalent to setting CUBIC = -1.        NGRID -  Integer scalar specifying the number of equally spaced grid                points on each axis to use to specify the transformation.                The value of NGRID must always be greater than DEGREE + 1.                The default is DEGREE + 2 which equals 3 (9 total points) for                DEGREE=1 (linear warping).        DEGREE - Integer scalar specifying the degree of the transformation.                See the routine POLYWARP for more info.   Default =                1 (linear transformation) unless polynomial ('SIP') distortion                parameters are present in either the input or reference FITS                header.    In that case, the default degree is equal to the                degree of the distortion polynomial.  OPTIONAL OUTPUT KEYWORD:        ERRMSG - If this keyword is supplied, then any error messages will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.  NOTES:        (1) The 3 parameter calling sequence is less demanding on virtual                memory.        (2) The astrometry in OLDHD will be precessed to match the equinox                 given in REFHD.        (3) If an ST Guidestar image is used for the reference header, then the                 output header will be converted to standard astrometry.  EXAMPLE:        Suppose one has an image array, IM, and an associated FITS header H.        One desires to warp the image array so that it is aligned with another        image with a FITS header, HREF.    Both headers contain astrometry info.        Set pixel values to 0 where there is no overlap between the input and        reference image, and use linear interpolation (default)         IDL&gt; hastrom, IM, H, HREF, MISSING = 0   PROCEDURES USED:        ad2xy, check_FITS, extast, get_EQUINOX(), gsssextast, hprecess,        putast, sxaddpar, sxaddhist, sxpar(), xy2ad, zparcheck   REVISION HISTORY:        Written  W. Landsman, STX Co.              Feb, 1989        Updated to CHECK_FITS                      Dec, 1991        New astrometry keywords                    Mar, 1994        Recognize GSSS header   W. Landsman        June, 1994        Added CUBIC keyword     W. Landsman        March, 1997        Accept INTERP=0, Convert output GSS header to standard astrometry                                W. Landsman        June 1998        Remove calls to obsolete !ERR system variable   March 2000        Added ERRMSG output keyword  W. Landsman    April 2000        Need to re-extract astrometry after precession  W. Landsman Nov. 2000        Check for distortion parameters in headers, add more FITS HISTORY        information                        W. Landsman   February 2005        Use different coefficient for nearest neighbor to avoid half-pixel        shift with POLY_2D      W. Landsman   Aug 2006        Return ERRMSG if no overlap between images  W. Landsman  Nov 2007        Use V6.0 notation  W. Landsman  Jan 2012   ", "MISSINGINTERPERRMSGCUBICDEGREENGRIDoldimoldhdnewimnewhdrefhd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hboxave.html", "hboxave.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hboxave.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hboxave.html#hboxave", "hboxave", 'routine in <a href="idlastro/hboxave.html">hboxave.pro</a>', "hboxave.pro", "", "hboxave", " NAME:        HBOXAVE  PURPOSE:        Box average an image array and update the FITS header array  EXPLANATION:        The function BOXAVE() is used.  This procedure is recommended for        integer images when photometric precision is desired, because it        performs intermediate steps using REAL*4 arithmetic.   Otherwise, the        procedure HREBIN is much faster.   CALLING SEQUENCE:        HBOXAVE, Oldim, Oldhd, Newim, Hewhd, box                or        HBOXAVE, Oldim, Oldhd, box   INPUTS:        Oldim - the original image array        Oldhd - the original image FITS header, string array   OPTIONAL INPUTS:        box - the box size to be used, integer scalar.  If omitted, then                HBOXAVE will prompt for this parameter.   OPTIONAL OUTPUTS:        Newim - the image after boxaveraging        Newhd - header for newim containing updated astrometry info                If output parameters are not supplied, the program                will modify the input parameters OLDIM and OLDHD                to contain the new array and updated header.  OPTIONAL KEYWORD OUTPUT:        ERRMSG - If this keyword is supplied, then any error mesasges will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.   PROCEDURE:        The parameters BSCALE, NAXIS1, NAXIS2, CRPIX1, and CRPIX2 and        the CD (or CDELT) parameters are updated for the new FITS header.   EXAMPLE:        Compress the image in a FITS file 'image.fits' by a factor of 4 and        update the astrometry in the FITS header         IDL&gt; im = readfits('image.fits',hdr)    ;Read FITS file into IDL arrays        IDL&gt; hboxave, im, hdr, 4                ;Boxaverage by 4        IDL&gt; writefits,'image.fits',im,hdr      ;Write a new FITS file   CALLED PROCEDURES:        CHECK_FITS - Check that the FITS header is appropriate to the image        BOXAVE() - Performs box averaging of an image        SXPAR(), SXADDPAR - Read and write FITS keyword values   MODIFICATION HISTORY:        Written, Aug. 1986 W. Landsman, STI Corp.        IDLV2 changes, sxaddpar format keyword added, J. Isensee, July,1990        Fix 0.5 pixel offset in new CRPIX computation W. Landsman, Dec, 1991        Update BSCALE even if no astrometry present   W. Landsman, May 1997        Converted to IDL V5.0   W. Landsman   September 1997        Added ERRMSG keyword, Use double formatting   W. Landsman   April 2000        Recognize PC matrix astrometry format    W. Landsman   December 2001  ", "ERRMSGoldimoldhdnewimnewhdbox", "          -1", "");
  
  

libdata[libdataItem++] = new Array("bundle_analysis/hbundle.html", "hbundle.pro", '.pro file in <a href="bundle_analysis/dir-overview.html">bundle_analysis/ directory</a>', "hbundle.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("coyote/hcolorbar__define.html", "hcolorbar__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "hcolorbar__define.pro", "", "", " NAME:        HCOLORBAR   FILENAME:         hcolorbar__define.pro ;  PURPOSE:         The purpose of this program is to create a horizontal        colorbar object to be used in conjunction with other        IDL 5 graphics objects.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:         Object Graphics.   CALLING SEQUENCE:         thisColorBar = Obj_New('HColorBar')   REQUIRED INPUTS:         None.   INIT METHOD KEYWORD PARAMETERS:         COLOR: A three-element array representing the RGB values of a color           for the colorbar axes and annotation. The default value is           white: [255,255,255].         FONTSIZE: A floating value that is the point size of the font            used for the axis and title annotations. Set to 8 point by default.         NAME: The name associated with this object.         NCOLORS: The number of colors associated with the colorbar. The           default is 256.         MAJOR: The number of major tick divisions on the colorbar axes.           The default is 5.         MINOR: The number of minor tick marks on the colorbar axes.           The default is 4.         PALETTE: A palette object for the colorbar. The default palette            is a gray-scale palette object.         POSITION: A four-element array specifying the position of the            colorbar in normalized coordinate space. The default position            is [0.10, 0.90, 0.90, 0.95].         RANGE: The range associated with the colorbar axis. The default            is [0, NCOLORS].         TITLE: A string containing a title for the colorbar axis            annotation. The default is a null string.   OTHER METHODS:         Clamp (Procedure): Given a two-element array in the data range of           the colorbar, the colorbar image is clamped to this range. In           other words, the range of colors is clamped to the specified           range. Values above or below the range in the colorbar are set to           the minimum and maximum range values, respectively.         GetProperty (Procedure): Returns colorbar properties in keyword           parameters as defined for the INIT method. Keywords allowed are:                 COLOR                MAJOR                MINOR                NAME                PALETTE                POSITION                RANGE                TEXT                TITLE                TRANSFORM         SetProperty (Procedure): Sets colorbar properties in keyword           parameters as defined for the INIT method. Keywords allowed are:                 COLOR                MAJOR                MINOR                NAME                PALETTE                POSITION                RANGE                TEXT                TITLE                TRANSFORM   SIDE EFFECTS:         A HColorBar structure is created. The colorbar INHERITS IDLgrMODEL.        Thus, all IDLgrMODEL methods and keywords can also be used. It is        the model that is selected in a selection event, since the SELECT_TARGET        keyword is set for the model.   EXAMPLE:         To create a colorbar object and add it to a plot view object, type:         thisColorBarObject = Obj_New('HColorBar')        plotView-&gt;Add, thisColorBarObject        plotWindow-&gt;Draw, plotView   MODIFICATION HISTORY:         Written by David Fanning, from VColorBar code, 20 Sept 98. DWF.        Changed a reference to _Ref_Extra to _Extra. 27 Sept 98. DWF.        Fixed bug when adding a text object via the TEXT keyword. 9 May 99. DWF.        Fixed the same bug when getting the text using the TEXT keyword. :-( 16 Aug 2000. DWF.        Fixed a bug with getting the text object via the TEXT keyword. 16 Aug 2000. DWF.        Added the TRANSFORM keyword to GetProperty and SetProperty methods. 16 Aug 2000. DWF.        Added RECOMPUTE_DIMENSIONS=2 to text objects. 16 Aug 2000. DWF.        Added a polygon object around the image object. This allows rotation in 3D space. 16 Aug 2000. DWF.        Removed TEXT keyword (which was never used) and improved documentation. 15 AUG 2001. DWF.        Added ENABLE_FORMATTING keyword to title objects. 22 October 2001. DWF.        Added a CLAMP method. 18 November 2001. DWF.        Forgot to pass extra keywords along to the text widget. As a result, you couldn't           format tick labels, etc. Fixed this. Any keywords appropriate for IDLgrTick objects           are now available. 26 June 2002. DWF.        Fixed a problem with POSITION keyword in SetProperty method. 23 May 2003. DWF.        Fixed a problem with setting RANGE keyword in SetProperty method. 6 Sept 2003. DWF.        Removed NORMALIZE from source code. 19 November 2005. DWF.        Font sizes have changed. Now using a 12 point font. 6 May 2011. DWF.        Changed FSC_Normalize to cgNormalize to reflect new name. 6 Feb 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/hcolorbar__define.html#HColorBar::Clamp", "HColorBar::Clamp", 'routine in <a href="coyote/hcolorbar__define.html">hcolorbar__define.pro</a>', "hcolorbar__define.pro", "", "HColorBar::Clamp", "", "datarange", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/hcolorbar__define.html#HColorBar::INIT", "HColorBar::INIT", 'routine in <a href="coyote/hcolorbar__define.html">hcolorbar__define.pro</a>', "hcolorbar__define.pro", "", "HColorBar::INIT", "", "PositionTextNColorsTitlePaletteMajorMinorRangeColor_ExtraNameFontSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/hcolorbar__define.html#HColorBar::Cleanup", "HColorBar::Cleanup", 'routine in <a href="coyote/hcolorbar__define.html">hcolorbar__define.pro</a>', "hcolorbar__define.pro", "", "HColorBar::Cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/hcolorbar__define.html#HColorBar::GetProperty", "HColorBar::GetProperty", 'routine in <a href="coyote/hcolorbar__define.html">hcolorbar__define.pro</a>', "hcolorbar__define.pro", "", "HColorBar::GetProperty", "", "PositionTextTitlePaletteMajorMinorRangeColorTransformName_Ref_Extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/hcolorbar__define.html#HColorBar::SetProperty", "HColorBar::SetProperty", 'routine in <a href="coyote/hcolorbar__define.html">hcolorbar__define.pro</a>', "hcolorbar__define.pro", "", "HColorBar::SetProperty", "", "PositionTextTitlePaletteMajorMinorRangeColorTransformName_Extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/hcolorbar__define.html#HColorBar__Define", "HColorBar__Define", 'routine in <a href="coyote/hcolorbar__define.html">hcolorbar__define.pro</a>', "hcolorbar__define.pro", "", "HColorBar__Define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hcongrid.html", "hcongrid.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hcongrid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hcongrid.html#hcongrid", "hcongrid", 'routine in <a href="idlastro/hcongrid.html">hcongrid.pro</a>', "hcongrid.pro", "", "hcongrid", " NAME:        HCONGRID  PURPOSE:        CONGRID an image and update astrometry in a FITS header  EXPLANATION:        Expand or contract an image using CONGRID and update the        associated FITS header array.   CALLING SEQUENCE:        HCONGRID, oldhd                       ;Update FITS header only        HCONGRID, oldim, oldhd, [ newim, newhd, newx, newy, /HALF_HALF                                  CUBIC = , INTERP=, OUTSIZE=, ERRMSG=, ALT= ]   INPUTS:        OLDIM - the original image array        OLDHD - the original image FITS header, string array   OPTIONAL INPUTS:        NEWX - size of the new image in the X direction        NEWY - size of the new image in the Y direction                The OUTSIZE keyword can be used instead of the                NEWX, NEWY parameters   OPTIONAL OUTPUTS:        NEWIM - the image after expansion or contraction with CONGRID        NEWHD - header for newim containing updated astrometry info                If output parameters are not supplied, the program                will modify the input parameters OLDIM and OLDHD                to contain the new array and updated header.   OPTIONAL KEYWORD INPUTS:       ALT - Single character 'A' through 'Z' or ' ' specifying which astrometry           system to modify in the FITS header.    The default is to use the           primary astrometry of ALT = ' '.    See Greisen and Calabretta (2002)           for information about alternate astrometry keywords.        CUBIC - If set and non-zero, then cubic interpolation is used.   Valid                ranges are  -1 &lt;= Cubic &lt; 0.   Setting /CUBIC is equivalent to                CUBIC = -1 and also equivalent to INTERP = 2.   See INTERPOLATE                for more info.    Setting CUBIC = -0.5 is recommended.        ERRMSG - If this keyword is supplied, then any error mesasges will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.        /HALF_HALF - Due to edge effects, the default behaviour of CONGRID is            to introduce a slight shift in the image center.  Craig Markwardt            (http://cow.physics.wisc.edu/~craigm/idl/misc.html) has written            a modified version of CONGRID called CMCONGRID that when used with            the /HALF_HALF keyword eliminates any shift.   The use of the            /HALF keyword emulates CMCONGRID and eliminates any shift in the            image centroid.        INTERP   - 0 for nearest neighbor, 1 for bilinear interpolation                (default), 2 for cubic (=-1) interpolation.        OUTSIZE - Two element integer vector which can be used instead of the                NEWX and NEWY parameters to specify the output image dimensions  OPTIONAL KEYWORD OUTPUT:        ERRMSG - If this keyword is supplied, then any error mesasges will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.  PROCEDURE:        Expansion or contraction is done using the CONGRID function, unless        HALF_HALF is set.         The parameters BSCALE, NAXIS1, NAXIS2, CRPIX1, and CRPIX2 and        the CD (or CDELT) parameters are updated for the new header.   NOTES:        A FITS header can be supplied as the first parameter without having        to supply an image array.   The astrometry in the FITS header will be        updated to be appropriate to the specified image size.         If the FITS header contains astrometry from a ST Guide Star image,        then the astrometry will be converted to an approximately equivalent        tangent projection before applying CONGRID.  EXAMPLE:        Congrid an 512 x 512 image array IM and FITS header H to size 300 x 300        using cubic interpolation.   Use the HALF_HALF keyword to avoid        a shift of the image centroid         IDL&gt; hcongrid, IM ,H, OUT = [300, 300], CUBIC = -0.5, /HALF         The variables IM and H will be modified to the new image size.   PROCEDURES CALLED:        CHECK_FITS, CONGRID(), EXTAST, GSSS_STDAST, SXADDHIST,        SXADDPAR, SXPAR(), ZPARCHECK  MODIFICATION HISTORY:        Written, Aug. 1986 W. Landsman, STI Corp.        Added interp keywords, J. Isensee, July, 1990        Add cubic interpolation W. Landsman HSTX   January 1994        Recognize a GSSS FITS header   W. Landsman   June 1994        Fix case where header but not image supplied  W. Landsman  May 1995        Remove call to SINCE_VERSION()   W. Landsman   March 1996        Assume since IDL V3.5, add CUBIC keyword      W. Landsman   March 1997        Update BSCALE even if no astrometry present   W. Landsman   May 1997        Converted to IDL V5.0   W. Landsman   September 1997        Added HALF_HALF keyword  W. Landsman  February 2000        Added ERRMSG keyword, use double precision formatting W.L.  April 2000        Recognize PC00n00m astrometry format  W. Landsman   December 2001        Now works when both /INTERP and /HALF are set W. Landsman January 2002        Fix output astrometry for non-equal plate scales for PC matrix or        CROTA2 keyword, added ALT keyword.   W. Landsman May 2005        Update distortion parameters if present  W. Landsman January 2008        Don't update BSCALE/BZERO for unsigned integer W.Landsman Mar 2008        Write CRPIX as Double precision if necessary W. Landsman Oct 2012  ", "HALF_HALFINTERPOUTSIZECUBICERRMSGALToldimoldhdnewimnewhdnewxnewy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/hdfread.html", "hdfread.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "hdfread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/hdfread.html#TEST_ISHDF", "TEST_ISHDF", 'routine in <a href="coyote/hdfread.html">hdfread.pro</a>', "hdfread.pro", "", "TEST_ISHDF", "", "filename", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/hdfread.html#HDFREAD", "HDFREAD", 'routine in <a href="coyote/hdfread.html">hdfread.pro</a>', "hdfread.pro", "", "HDFREAD", "", "filename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/hdfwrite.html", "hdfwrite.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "hdfwrite.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/hdfwrite.html#HDFWRITE", "HDFWRITE", 'routine in <a href="coyote/hdfwrite.html">hdfwrite.pro</a>', "hdfwrite.pro", "", "HDFWRITE", "", "filename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/headfits.html", "headfits.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "headfits.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/headfits.html#HEADFITS", "HEADFITS", 'routine in <a href="idlastro/headfits.html">headfits.pro</a>', "headfits.pro", "", "HEADFITS", " NAME:        HEADFITS  PURPOSE:        Read a FITS (primary or extension) header into a string array.  EXPLANATION:        HEADFITS() supports several types of compressed files including        gzip (.gz), Unix compressed (.Z), Bzip2 (.bz2) or FPACK (.fz        http://heasarc.gsfc.nasa.gov/fitsio/fpack/ )   CALLING SEQUENCE:        Result = HEADFITS(Filename/Fileunit ,[ ERRMSG =, EXTEN= , COMPRESS=,                                             /SILENT ])   INPUTS:        Filename = String containing the name of the FITS file to be read.                 If set to an empty string, then user will be prompted for name.                 File names ending in '.gz' are assumed to be gzip'ed compressed                 and under Unix file names ending in '.Z' are assumed to be                 Unix compressed, and file names ending in .bz2 are assumed to                 be bzip2 compressed.    If this default behaviour is not                 sufficient then use the COMPRESS keyword.                             or        Fileunit - A scalar integer specifying the unit of an already opened                   FITS file.  The unit will remain open after exiting                   HEADFITS().  There are two possible reasons for choosing                   to specify a unit number rather than a file name:           (1) For a FITS file with many extensions, one can move to the               desired extensions with FXPOSIT() and then use HEADFITS().  This               is more efficient that repeatedly starting at the beginning of               the file.           (2) For reading a FITS file across a Web http: address after opening               the unit with the SOCKET procedure.  OPTIONAL INPUT KEYWORDS:       EXTEN  = Either an integer scalar, specifying which FITS extension to                read, or a scalar string specifying the extension name (stored                in the EXTNAME keyword).   For example, to read the header of                the first extension set EXTEN = 1.   Default is to read the                primary FITS header  (EXTEN = 0).    The EXTEN keyword cannot                be used when a unit number is supplied instead of a file name.      COMPRESS - If this keyword is set and non-zero, then treat the file               as compressed.  If 1 assume a gzipped file.   Use IDL's               internal decompression facilities for gzip files, while for               Unix or bzip2 compression spawn off a process to decompress and               use its output as the FITS stream.  If the keyword is not 1,               then use its value as a string giving the command needed for               decompression.   See FXPOSIT for more info.      /SILENT - If set, then suppress any warning messages about invalid               characters in the FITS file.  OPTIONAL KEYWORD OUTPUT:        ERRMSG	= If this keyword is present, then any error messages will be                  returned to the user in this parameter rather than                  depending on the MESSAGE routine in IDL.  If no errors are                  encountered, then a null string is returned.   OUTPUTS:        Result of function = FITS header, string array   EXAMPLE:        Print the main FITS header of a file 'test.fits' into a string        variable, h         IDL&gt;  print, headfits( 'test.fits')         Print the second extension header of a gzip compressed FITS file        'test.fits.gz'.  Use HPRINT for pretty format         IDL&gt; hprint, headfits( 'test.fits.gz', ext=2)         Read the extension named CALSPEC         IDL&gt; hprint,headfits('test.fits.gz',ext='CALSPEC')   PROCEDURES CALLED        FXPOSIT(), MRD_HREAD        The version of fxposit.pro must be post- May 2009.  MODIFICATION HISTORY:        adapted by Frank Varosi from READFITS by Jim Wofford, January, 24 1989        Keyword EXTEN added, K.Venkatakrishna, May 1992        Make sure first 8 characters are 'SIMPLE'  W. Landsman October 1993        Check PCOUNT and GCOUNT   W. Landsman    December 1994        Major rewrite, work for Unix gzip files,   W. Landsman  April 1996        Added COMPRESS keyword  W. Landsman   April 2000        Added ERRMSG keyword    W. Landsman   July 2000        Added /SILENT keyword   W. Landsman    December 2000        Option to read a unit number rather than file name W.L    October 2001        Test output status of MRD_HREAD call October 2003 W. Landsman        Allow extension to be specified by name Dec 2006 W. Landsman        No need to uncompress FPACK compressed files  May 2009 W. Landsman        Use V6.0 notation   W.L.   Feb. 2011  ", "EXTENCompressERRMSGSILENTfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/helio.html", "helio.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "helio.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/helio.html#HELIO", "HELIO", 'routine in <a href="idlastro/helio.html">helio.pro</a>', "helio.pro", "", "HELIO", " NAME:       HELIO  PURPOSE:       Compute (low-precision) heliocentric coordinates for the planets.  EXPLANATION:       The mean orbital elements for epoch J2000 are used.   These are derived       from a 250 yr least squares fit of the DE 200 planetary ephemeris to a       Keplerian orbit where each element is allowed to vary linearly with       time.  For dates between 1800 and 2050, this solution fits the       terrestrial planet orbits to ~25  or better, but achieves only ~600        for Saturn.        Use PLANET_COORDS (which calls HELIO) to get celestial (RA, Dec)       coordinates of the planets  CALLING SEQUENCE:        HELIO, JD, LIST, HRAD, HLONG, HLAT, [/RADIAN]  INPUTS:        JD = Julian date, double precision scalar or vector        LIST = List of planets array.  May be a single number.                1 = merc, 2 = venus, ... 9 = pluto.   OUTPUTS:        HRAD = array of Heliocentric radii (A.U).        HLONG = array of Heliocentric (ecliptic) longitudes (degrees).        HLAT = array of Heliocentric latitudes (degrees).              These output parameters will be dimensioned Nplanet by Ndate,              where Nplanet is the number of elements of list, and Ndate is              the number of elements of JD.   OPTIONAL INPUT KEYWORD:        /RADIAN - If set, then the output longitude and latitude are given in                  radians.  EXAMPLE:        (1) Find the current heliocentric positions of all the planets          IDL&gt; GET_JULDATE, jd      ;Get current Julian date         IDL&gt; HELIO,jd,indgen(9)+1,hrad,hlong,hlat  ;Get radius, long, and lat         (2) Find heliocentric position of Mars on August 23, 2000          IDL&gt; JDCNV, 2000,08,23,0,jd          IDL&gt; HELIO,JD,2,HRAD,HLONG,HLAT                   ===&gt; hrad = 1.6407 AU hlong = 124.3197 hlat = 1.7853          For comparison, the JPL ephemeris gives                        hrad = 1.6407 AU hlong = 124.2985 hlat = 1.7845        (3) Find the heliocentric positions of Mars and Venus for every day in            November 2000         IDL&gt; JDCNV, 2000, 11, 1, 0, jd    ;Julian date of November 1, 2000         IDL&gt; helio, jd+indgen(30), [4,2], hrad,hlong,hlat   ;Mars=4, Venus=2                    hrad, hlong, and hlat will be dimensioned [2,30]                    first column contains Mars data, second column Venus  COMMON BLOCKS:        None  ROUTINES USED:        CIRRANGE - force angle between 0 and 2*!PI  NOTES:        (1) The calling sequence for this procedure was changed in August 2000        (2) This program is based on the two-body model and thus neglects            interactions between the planets.   This is why the worst results            are for Saturn.  Use the procedure JPLEPHINTERp for more accurate            positions using the JPL ephemeris.   Also see            http://ssd.jpl.nasa.gov/cgi-bin/eph for a more accurate ephemeris            generator online.        (3) The coordinates are given for equinox 2000 and *not* the equinox            of the supplied date(s)  MODIFICATION HISTORY:        R. Sterner.  20 Aug, 1986.        Code cleaned up a bit      W. Landsman             December 1992        Major rewrite, use modern orbital elements, vectorize, more accurate          solution to Kepler's equation          W. Landsman August 2000        Wasn't working for planet vectors        W. Landsman August 2000        Work for more than 32767 positions       S. Leach Jan 2009  ", "RADIANJDLISTHRADHLONGHLAT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/helio_jd.html", "helio_jd.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "helio_jd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/helio_jd.html#helio_jd", "helio_jd", 'routine in <a href="idlastro/helio_jd.html">helio_jd.pro</a>', "helio_jd.pro", "", "helio_jd", " NAME:       HELIO_JD  PURPOSE:       Convert geocentric (reduced) Julian date to heliocentric Julian date  EXPLANATION:       This procedure correct for the extra light travel time between the Earth       and the Sun.         An online calculator for this quantity is available at        http://www.physics.sfasu.edu/astro/javascript/hjd.html         Users requiring more precise calculations and documentation should        look at the IDL code available at        http://astroutils.astronomy.ohio-state.edu/time/  CALLING SEQUENCE:        jdhelio = HELIO_JD( date, ra, dec, /B1950, /TIME_DIFF)   INPUTS        date - reduced Julian date (= JD - 2400000), scalar or vector, MUST                be double precision        ra,dec - scalars giving right ascension and declination in DEGREES                Equinox is J2000 unless the /B1950 keyword is set   OUTPUTS:        jdhelio - heliocentric reduced Julian date.  If /TIME_DIFF is set, then                  HELIO_JD() instead returns the time difference in seconds                  between the geocentric and heliocentric Julian date.   OPTIONAL INPUT KEYWORDS        /B1950 - if set, then input coordinates are assumed to be in equinox                 B1950 coordinates.        /TIME_DIFF - if set, then HELIO_JD() returns the time difference                 (heliocentric JD - geocentric JD ) in seconds   EXAMPLE:        What is the heliocentric Julian date of an observation of V402 Cygni        (J2000: RA = 20 9 7.8, Dec = 37 09 07) taken June 15, 1973 at 11:40 UT?         IDL&gt; juldate, [1973,6,15,11,40], jd      ;Get geocentric Julian date        IDL&gt; hjd = helio_jd( jd, ten(20,9,7.8)*15., ten(37,9,7) )         ==&gt; hjd = 41848.9881   Wayne Warren (Raytheon ITSS) has compared the results of HELIO_JD with the  FORTRAN subroutines in the STARLINK SLALIB library (see  http://star-www.rl.ac.uk/).                                                   Time Diff (sec)       Date               RA(2000)   Dec(2000)  STARLINK      IDL   1999-10-29T00:00:00.0  21 08 25.  -67 22 00.  -59.0        -59.0  1999-10-29T00:00:00.0  02 56 33.4 +00 26 55.  474.1        474.1  1940-12-11T06:55:00.0  07 34 41.9 -00 30 42.  366.3        370.2  1992-02-29T03:15:56.2  12 56 27.4 +42 10 17.  350.8        350.9  2000-03-01T10:26:31.8  14 28 36.7 -20 42 11.  243.7        243.7  2100-02-26T09:18:24.2  08 26 51.7 +85 47 28.  104.0        108.8  PROCEDURES CALLED:        bprecess, xyz, zparcheck   REVISION HISTORY:        Algorithm from the book Astronomical Photometry by Henden, p. 114        Written,   W. Landsman       STX     June, 1989        Make J2000 default equinox, add B1950, /TIME_DIFF keywords, compute        variation of the obliquity      W. Landsman   November 1999  ", "B1950TIME_DIFFdateradec", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/helio_rv.html", "helio_rv.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "helio_rv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/helio_rv.html#helio_rv", "helio_rv", 'routine in <a href="idlastro/helio_rv.html">helio_rv.pro</a>', "helio_rv.pro", "", "helio_rv", " NAME:     HELIO_RV   PURPOSE:      Return the heliocentric radial velocity of a spectroscopic binary   EXPLANATION:     This function will return the heliocentric radial velocity of a     spectroscopic binary star at a given heliocentric date     given its orbit.   CALLING SEQUENCE:    Result = HELIO_RV ( JD ,T ,Period ,Gamma , K, [,e ,Omega ] )   INPUT:   JD            - Time of observation  T             - Time of periastron passage (max. +ve velocity                  for circular orbits), same time system as JD  Period        - the period in same units as JD  Gamma         - systemic velocity  K             - velocity semi-amplitude in the same units as Gamma.  e             - eccentricity of the orbit, default is 0.  Omega         - longitude of periastron in degrees. Must be specified for                  eccentric orbits.   OUTPUT:    The predicted heliocentric radial velocity in the same units as Gamma   for the date(s) specified by Reduced_HJD.   RESTRICTIONS:    The user should ensure consistency with all time systems being   used (i.e. JD and T should be in the same units and time system).   Generally, users should reduce large time values by subtracting   a large constant offset, which may improve numerical accuracy.    If using the the routines JULDATE and HELIO_JD, the reduced HJD   time system must be used throughtout.   EXAMPLES:   Example 1    What was the heliocentric radial velocity of the primary component of HU Tau  at 1730 UT 25 Oct 1994?   IDL&gt; juldate ,[94,10,25,17,30],JD                 ;Get Geocentric julian date  IDL&gt; hjd = helio_jd(jd,ten(04,38,16)*15.,ten(20,41,05)) ; Convert to HJD  IDL&gt; print, helio_rv(hjd,46487.5303D,2.0563056D,-6.0,59.3)       -62.965569   NB. 1. The routines JULDATE and HELIO_JD return a reduced HJD (HJD - 2400000)         and so T and P must be specified in the same fashion.      2. The user should be careful to use double precision format to specify         T and P to sufficient precision where necessary.   Example 2    Plot two cycles of an eccentric orbit, e=0.6, omega=45 for both   components of a binary star   IDL&gt; phi=findgen(100)/50.0             ; Generates 100 phase points  IDL&gt; plot, phi,helio_rv(phi,0,1,0,100,0.6,45),yrange=[-100,150]  IDL&gt; oplot, phi,helio_rv(phi,0,1,0,50,0.6,45+180)   This illustrates both the use of arrays to perform multiple calculations  and generating radial velocities for a given phase by setting T=0 and P=1.  Note also that omega has been changed by 180 degrees for the orbit of the  second component  (the same 'trick' can be used for circular orbits).   MODIFICATION HISTORY:    Written by:  Pierre Maxted CUOBS, October, 1994    Circular orbits handled by setting e=0 and omega=0 to allow   binary orbits to be handled using omega and omega+180.                                                       Pierre Maxted,Feb 95   BUG - omega was altered by the routine - corrected Feb 95,Pierre Maxted   Iteration for E changed to that  given by Reidel , Feb 95,Pierre Maxted   /SINGLE keyword removed.                           May 96,Pierre Maxted ;   Removed limitation of time system on HJD, C. Markwardt, 2011-04-15    Change convergence test from relative to absolute precision on E                                                      Pierre Maxted, Apr 12  ", "HJDTPV0Keomega", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/help_var.html", "help_var.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "help_var.pro", "", "", " NAME:        HELP_VAR   PURPOSE:         The purpose of this program is to display HELP on just        the variables at the level in which HELP_VAR is called.        It is similar to the HELP command, except that compiled        functions and procedures are not displayed.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities.   CALLING SEQUENCE:         HELP_VAR   REQUIRED INPUTS:         None.   SIDE EFFECTS:         Memory is allocated for each variable, in turn, then deleted.        Uses undefined and unsupported ROUTINE_NAMES function. May not        work in all versions of IDL, including future versions.   EXAMPLE:         PRO HELP_VAR_TEST           a = 4.0           b = Lindgen(11)           HELP_VAR        END         IDL&gt; help_var             A          FLOAT     =       4.00000             B          LONG      = Array[11]   MODIFICATION HISTORY:         Written by David W. Fanning, 8 August 2003.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/help_var.html#HELP_VAR_UNDEFINE", "HELP_VAR_UNDEFINE", 'routine in <a href="coyote/help_var.html">help_var.pro</a>', "help_var.pro", "", "HELP_VAR_UNDEFINE", "", "varname", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/help_var.html#HELP_VAR", "HELP_VAR", 'routine in <a href="coyote/help_var.html">help_var.pro</a>', "help_var.pro", "", "HELP_VAR", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hermite.html", "hermite.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hermite.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hermite.html#hermite", "hermite", 'routine in <a href="idlastro/hermite.html">hermite.pro</a>', "hermite.pro", "", "hermite", " NAME:        HERMITE  PURPOSE:        To compute Hermite spline interpolation of a tabulated function.  EXPLANATION:        Hermite interpolation computes the cubic polynomial that agrees with        the tabulated function and its derivative at the two nearest        tabulated points.   It may be preferable to Lagrangian interpolation        (QUADTERP) when either (1) the first derivatives are known, or (2)        one desires continuity of the first derivative of the interpolated        values.    HERMITE() will numerically compute the necessary        derivatives, if they are not supplied.   CALLING SEQUENCE:        F = HERMITE( XX, FF, X, [ FDERIV = ])   INPUT PARAMETERS:        XX - Vector giving tabulated X values of function to be interpolated                Must be either monotonic increasing or decreasing        FF - Tabuluated values of function, same number of elements as X        X -  Scalar or vector giving the X values at which to interpolate   OPTIONAL INPUT KEYWORD:        FDERIV - function derivative values computed at XX.    If not supplied,                then HERMITE() will compute the derivatives numerically.                The FDERIV keyword is useful either when (1) the derivative                values are (somehow) known to better accuracy than can be                computed numerically, or (2) when HERMITE() is called repeatedly                with the same tabulated function, so that the derivatives                need be computed only once.   OUTPUT PARAMETER:        F - Interpolated values of function, same number of points as X   EXAMPLE:        Interpolate the function 1/x at x = 0.45 using tabulated values        with a spacing of 0.1         IDL&gt; x = findgen(20)*0.1 + 0.1        IDL&gt; y = 1/x        IDL&gt; print,hermite(x,y,0.45)                This gives 2.2188 compared to the true value 1/0.45 = 2.2222         IDL&gt; yprime = -1/x^2      ;But in this case we know the first derivatives        IDL&gt; print,hermite(x,y,0.45,fderiv = yprime)              == 2.2219            ;and so can get a more accurate interpolation  NOTES:        The algorithm here is based on the FORTRAN code discussed by        Hill, G. 1982, Publ Dom. Astrophys. Obs., 16, 67.   The original        FORTRAN source is U.S. Airforce. Surveys in Geophysics No 272.         HERMITE() will return an error if one tries to interpolate any values        outside of the range of the input table XX  PROCEDURES CALLED:        None  REVISION HISTORY:        Written,    B. Dorman (GSFC) Oct 1993, revised April 1996        Added FDERIV keyword,  W. Landsman (HSTX)  April 1996        Test for out of range values  W. Landsman (HSTX) May 1996        Converted to IDL V5.0   W. Landsman   September 1997        Use VALUE_LOCATE instead of TABINV   W. Landsman   February 2001  ", "FDERIVxxffx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/heuler.html", "heuler.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "heuler.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/heuler.html#heuler", "heuler", 'routine in <a href="idlastro/heuler.html">heuler.pro</a>', "heuler.pro", "", "heuler", " NAME:       HEULER   PURPOSE:        Change the coordinate system of a FITS header or astrometry structure  EXPLANATION:        Converts a FITS header or a astrometry structure containing WCS (world        coordinate system) information between celestial, ecliptic, and        Galactic coordinates   CALLING SEQUENCE:        HEULER, hdr, [/GALACTIC, /CELESTIAL, /ECLIPTIC, ALT_IN = , ALT_OUT=]                       or        HEULER, astr, /GALACTIC, /CELESTIAL, /ECLIPTIC   INPUT/OUTPUT PARAMETERS:        hdr - FITS header (string array) containing WCS information                             or        Astr - Astrometry structure as extracted from a FITS header              by extast.pro (See EXTAST for more info).         Header or astrometry structure will be modified by the program to        contain astrometry in the new coordinates system.  REQUIRED INPUT KEYWORDS:        One of the following exclusive keywords is *required*        /GALACTIC - Convert the header to Galactic coordinates        /CELESTIAL - Convert the header to celestial (RA & Dec) coordinates        /ECLIPTIC - Convert the header to ecliptic coordinates   OPTIONAL INPUT KEYWORDS:       The following two keywords apply if the FITS header contains multiple       WCS keywords. See Section 3.3 of Greisen & Calabretta (2002, A&A, 395,       1061) for information about alternate astrometry keywords.        ALT_IN -  single character 'A' through 'Z' or ' ' specifying an           alternate astrometry system present in the input FITS header.  The           default isto use the primary astrometry or ALT = ' '.   If /ALT_IN           is set, then this is equivalent to ALT_IN = 'A'.       ALT_OUT - single character specifying the alternate WCS keywords           to write the *output* astrometry.    If not specified, then ALT_OUT           is set equal to ALT_IN.  RESTRICTIONS:        Currently assumes that celestial and ecliptic coordinates are in        J2000.   Use HPRECESS if this is not the case.         ST Guide Star (DSS) image headers are first converted to a standard        tangent projection, prior to the coordinate conversion  METHOD:        The algorithm used is described in Section 2.7 of Calabretta & Greisen        (2002, A&A, 395, 1077).    The CRVAL coordinates are transformed        directly using EULER.    The new LONPOLE and LATPOLE values are then        determined by transforming the pole of the new system to the old, and        converted to native coordinates using WCS_ROTATE.  EXAMPLE:        A FITS header, hdr, has a standard tangent projection WCS information.        Add an alternate 'G' Galactic projection.    Note that the original        WCS information will be left unchanged         IDL&gt; heuler, hdr, /Galactic, alt='G'  PROCEDURES USED:        EULER, EXTAST, GSSS_STDAST, PUTAST, SXADDHIST, WCS_ROTATE  REVISION HISTORY:        Written    W. Landsman                  June 2003        Use PV2 tag in astrometry structure rather than PROJP1 W. L. May 2004        Use double precision to compute new North pole  W.L. Aug 2005  ", "Galacticcelestialeclipticalt_inalt_outh_or_astr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hextract.html", "hextract.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hextract.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hextract.html#hextract", "hextract", 'routine in <a href="idlastro/hextract.html">hextract.pro</a>', "hextract.pro", "", "hextract", " NAME:        HEXTRACT  PURPOSE:        Extract a subimage from an array and update astrometry in FITS header  EXPLANATION:        Extract a subimage from an array and create a new FITS header with        updated astrometry for the subarray  CALLING SEQUENCE:        HEXTRACT, Oldim, Oldhd, [ Newim, Newhd, x0, x1, y0, y1, /SILENT ]                or        HEXTRACT, Oldim, Oldhd, [x0, x1, y0, y1, /SILENT, ERRMSG =  ]   INPUTS:        Oldim - the original image array        Oldhd - the original image header   OPTIONAL INPUTS:        x0, x1, y0, y1 - respectively, first and last X pixel, and first and        last Y pixel to be extracted from the original image, integer scalars.        HEXTRACT will convert these values to long integers.        If omitted,  HEXTRACT will prompt for these parameters   OPTIONAL OUTPUTS:        Newim - the new subarray extracted from the original image        Newhd - header for newim containing updated astrometry info                If output parameters are not supplied or set equal to                -1, then the HEXTRACT will modify the input parameters                OLDIM and OLDHD to contain the subarray and updated header.   OPTIONAL INPUT KEYWORD:       ALT - Single character 'A' through 'Z' or ' ' specifying which astrometry           system to modify in the FITS header.    The default is to use the           primary astrometry or ALT = ' '.    See Greisen and Calabretta (2002)           for information about alternate astrometry keywords.       /SILENT - If set and non-zero, then a message describing the extraction                is not printed at the terminal.   This message can also be                suppressed by setting !QUIET.  OPTIONAL KEYWORD OUTPUT:        ERRMSG - If this keyword is supplied, then any error mesasges will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.   PROCEDURE:        The FITS header parameters NAXIS1, NAXIS2, CRPIX1, and CRPIX2 are        updated for the extracted image.   EXAMPLE:        Read an image from a FITS file 'IMAGE', extract a 512 x 512 subimage        with the same origin, and write to a new FITS file 'IMAGENEW'         IDL&gt; im = READFITS( 'IMAGE', hdr )      ;Read FITS files into IDL arrays        IDL&gt; hextract, im, h, 0, 511, 0, 511    ;Extract 512 x 512 subimage        IDL&gt; writefits, 'IMAGENEW', im ,h       ;Write subimage to a FITS file   PROCEDURES CALLED        CHECK_FITS, STRN(), SXPAR(), SXADDPAR, SXADDHIST  MODIFICATION HISTORY:        Written, Aug. 1986 W. Landsman, STX Corp.        Use astrometry structure,   W. Landsman      Jan, 1994        Minor fix if bad Y range supplied   W. Landsman    Feb, 1996        Added /SILENT keyword              W. Landsman     March, 1997        Added ERRMSG keyword    W. Landsman   May 2000        Work for dimensions larger than 32767   W.L., M.Symeonidis Mar 2007        Added ALT keyword  W.L. April 2007  ", "SILENTERRMSGALToldimoldhdnewimnewhdx0x1y0y1", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hgrep.html", "hgrep.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hgrep.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hgrep.html#hgrep", "hgrep", 'routine in <a href="idlastro/hgrep.html">hgrep.pro</a>', "hgrep.pro", "", "hgrep", " NAME:      HGREP   PURPOSE:        Find a substring in a FITS header (or any other string array)   CALLING SEQUENCE:        HGREP, header, substring, [/KEEPCASE, /LINENUM ]   INPUTS:        header -  FITS header or other string array        substring - scalar string to find in header; if a numeric value is                  supplied, it will be converted to type string   OPTIONAL INPUT KEYWORDS:        /KEEPCASE: if set, then look for an exact match of the input substring                  Default is to ignore case .        /LINENUM: if set, prints line number of header in which                 substring appears   OUTPUTS:        None, results are printed to screen   EXAMPLE:        Find every place in a FITS header that the word 'aperture'        appears in lower case letters and print the element number        of the header array:         IDL&gt; hgrep, header, 'aperture', /keepcase, /linenum   HISTORY:        Written, Wayne Landsman (Raytheon ITSS)      August 1998        Adapted from STIS version by Phil Plait/ ACC November 14, 1997        Remove trailing spaces if a non-string is supplied W. Landsman Jun 2002  ", "keepcaselinenumheadersubstring", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/public/hist_nd.html", "hist_nd.pro", '.pro file in <a href="coyote/public/dir-overview.html">coyote/public/ directory</a>', "hist_nd.pro", "", "", " NAME:        HIST_ND   PURPOSE:         Perform an N-dimensional histogram, also known as the joint        density function of N variables, ala HIST_2D.   CALLING SEQUENCE:        hist=HIST_ND(V,[BINSIZE,MIN=,MAX=,NBINS=,REVERSE_INDICES=])   INPUTS:         V: A NxP array representing P data points in N dimensions.         BINSIZE: The size of the bin to use. Either an N point vector          specifying a separate size for each dimension, or a scalar,          which will be used for all dimensions.  If BINSIZE is not          passed, NBINS must be.   OPTIONAL INPUTS:         MIN: The minimum value for the histogram.  Either a P point          vector specifying a separate minimum for each dimension, or          a scalar, which will be used for all dimensions.  If          omitted, the natural minimum within the dataset will be          used.         MAX: The maximum value for the histogram.  Either a P point          vector specifying a separate maximmum for each dimension, or          a scalar, which will be used for all dimensions. If omitted,          the natural maximum within the dataset will be used.         NBINS: Rather than specifying the binsize, you can pass NBINS,          the number of bins in each dimension, which can be a P point          vector, or a scalar.  If BINSIZE it also passed, NBINS will          be ignored, otherwise BINSIZE will then be calculated as          binsize=(max-min)/nbins.  Note that *unlike* RSI's version          of histogram as of IDL 5.4, this keyword actually works as          advertised, giving you NBINS bins over the range min to max.   KEYWORD PARAMETERS:         MIN,MAX,NBINS: See above         REVERSE_INDICES: Set to a named variable to receive the          reverse indices, for mapping which points occurred in a          given bin.  Note that this is a 1-dimensional reverse index          vector (see HISTOGRAM).  E.g., to find the indices of points          which fell in a histogram bin [i,j,k], look up:               ind=[i+nx*(j+ny*k)]              ri[ri[ind]:ri[ind+1]-1]           See also ARRAY_INDICES for converting in the other          direction.   OUTPUTS:         hist: The N-Dimensional histogram, an array of size          N1xN2xN3x...xND where the Ni's are the number of bins          implied by the data, and/or the optional inputs min, max and          binsize.   OPTIONAL OUTPUTS:         The reverse indices.   EXAMPLE:         v=randomu(sd,3,100)        h=hist_nd(v,.25,MIN=0,MAX=1,REVERSE_INDICES=ri)   SEE ALSO:         HISTOGRAM, HIST_2D   MODIFICATION HISTORY:         Wed Nov 3 17:40:21 2010, J.D. Smith                 Handle 1D input with out of range elements.         Mon Mar 5 09:45:53 2007, J.D. Smith &lt;jdsmith@as.arizona.edu&gt;                 Correctly trim out of range elements from the                histogram, when MIN/MAX are specified. Requires IDL                v6.1 or later.         Tue Aug 19 09:13:43 2003, J.D. Smith &lt;jdsmith@as.arizona.edu&gt;                 Slight update to BINSIZE logic to provide consistency                with HIST_2D.         Fri Oct 11 10:10:01 2002, J.D. Smith &lt;jdsmith@as.arizona.edu&gt;                 Updated to use new DIMENSION keyword to MAX/MIN.         Fri Apr 20 12:57:34 2001, JD Smith &lt;jdsmith@astro.cornell.edu&gt;                 Slight update to NBINS logic.  More aggressive keyword                checking.         Wed Mar 28 19:41:10 2001, JD Smith &lt;jdsmith@astro.cornell.edu&gt;                 Written, based on HIST_2D, and suggestions of CM.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/public/hist_nd.html#hist_nd", "hist_nd", 'routine in <a href="coyote/public/hist_nd.html">hist_nd.pro</a>', "hist_nd.pro", "", "hist_nd", "", "MINMAXNBINSREVERSE_INDICESVbs", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/histogauss.html", "histogauss.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "histogauss.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/histogauss.html#HISTOGAUSS", "HISTOGAUSS", 'routine in <a href="idlastro/histogauss.html">histogauss.pro</a>', "histogauss.pro", "", "HISTOGAUSS", "NAME:        HISTOGAUSS   PURPOSE:        Histograms data and overlays it with a Gaussian. Draws the mean, sigma,        and number of points on the plot.   CALLING SEQUENCE:        HISTOGAUSS, Sample, A, [XX, YY, GX, GY, /NOPLOT, /NOFIT, FONT=,                                CHARSIZE = ]   INPUT:        SAMPLE = Vector to be histogrammed   OUTPUT ARGUMENTS:        A = coefficients of the Gaussian fit: Height, mean, sigma                A[0]= the height of the Gaussian                A[1]= the mean                A[2]= the standard deviation                A[3]= the half-width of the 95% conf. interval of the standard                      mean                A[4]= 1/(N-1)*total( (y-mean)/sigma)^2 ) = a measure of                        normality         Below: superceded. The formula is not entirely reliable.        A[4]= measure of the normality of the distribution. =1.0, perfectly        normal. If no more than a few hundred points are input, there are        formulae for the 90 and 95% confidence intervals of this quantity:        M=ALOG10(N-1) ; N = number of points        T90=ABS(.6376-1.1535*M+.1266*M^2)  ; = 90% confidence interval        IF N LT 50 THEN T95=ABS(-1.9065-2.5465*M+.5652*M^2) $                   ELSE T95=ABS( 0.7824-1.1021*M+.1021*M^2)   ;95% conf.        (From Martinez, J. and Iglewicz, I., 1981, Biometrika, 68, 331-333.)         XX = the X coordinates of the histogram bins (CENTER)        YY = the Y coordinates of the histogram bins        GX = the X coordinates of the Gaussian fit        GY = the Y coordinates of the Gaussian fit   OPTIONAL INPUT KEYWORDS:        /NOPLOT - If set, nothing is drawn        /FITIT   If set, a Gaussian is actually fitted to the distribution.                By default, a Gaussian with the same mean and sigma is drawn;                the height is the only free parameter.        CHARSIZE Size of the characters in the annotation. Default = 0.82.        FONT - scalar font graphics keyword (-1,0 or 1) for text        /WINDOW - set to plot to a resizeable graphics window        _EXTRA - Any value keywords to the cgPLOT command (e.g. XTITLE) may also                be passed to HISTOGAUSS  SUBROUTINE CALLS:        BIWEIGHT_MEAN, which determines the mean and std. dev.        AUTOHIST, which draws the histogram        GAUSSFIT() (IDL Library) which does just that   REVISION HISTORY:        Written, H. Freudenreich, STX, 12/89        More quantities returned in A, 2/94, HF        Added NOPLOT keyword and print if Gaussian, 3/94        Stopped printing confidence limits on normality 3/31/94 HF        Added CHARSIZE keyword, changed annotation format, 8/94 HF        Simplified calculation of Gaussian height, 5/95 HF        Convert to V5.0, use T_CVF instead of STUDENT_T, GAUSSFIT instead of            FITAGAUSS  W. Landsman April 2002        Correct call to T_CVF for calculation of A[3], 95% confidence interval                 P. Broos/W. Landsman   July 2003        Allow FONT keyword to be passed.  T. Robishaw Apr. 2006        Use Coyote Graphics for plotting W.L. Mar 2011        Better formatting of text output W.L. May 2012  ", "NOPLOTNOFITCHARSIZEFONT_EXTRAWindowSAMPLEAXXYYGXGY", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/histomatch.html", "histomatch.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "histomatch.pro", "", "", " NAME:        HistoMatch   PURPOSE:         This is a function for Histogram Matching, in which an image        is manipulated in such a way that it's final histogram approximates        the histogram of an input image or histogram. Histogram matching        allows the user to specify the shape of the histogram of the final        product.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Image Processing   CALLING SEQUENCE:         output_image = HistoMatch(image, histogram_to_match)   INPUTS:         image - The input image to be manipulated. Assumed to be a 2D byte array.         histogram_to_match - Can be either a 1D long vector of 256 elements specifying            the histogram to match, or a 2D byte array from which the histogram to            match is calculated.   OUTPUTS:         output_image - The manipulated image adjusted to the histogram specifications.   INPUT KEYWORDS:         None.   OUTPUT KEYWORDS:         None.   DEPENDENCIES:         None.   METHOD:         Based on the Histogram Matching method on pages 94-102 of Digital        Image Processing, 2nd Edition, Rafael C. Gonzalez and Richard E. Woods,        ISBN 0-20-118075-8.   EXAMPLE:         There is an example program at the end of this file. It will require cgImage        from the Coyote Library to run. You can also find an explanation of this program        at http://www.idlcoyote.com/ip_tips/histomatch.html.   MODIFICATION HISTORY:         Written by David W. Fanning, January 2003.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/histomatch.html#HISTOMATCH_ERROR_MESSAGE", "HISTOMATCH_ERROR_MESSAGE", 'routine in <a href="coyote/histomatch.html">histomatch.pro</a>', "histomatch.pro", "", "HISTOMATCH_ERROR_MESSAGE", "", "ErrorInformationalTracebackNoNameTitle_ExtratheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/histomatch.html#HISTOMATCH", "HISTOMATCH", 'routine in <a href="coyote/histomatch.html">histomatch.pro</a>', "histomatch.pro", "", "HISTOMATCH", "", "imagehistogram_to_match", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/histomatch.html#Example", "Example", 'routine in <a href="coyote/histomatch.html">histomatch.pro</a>', "histomatch.pro", "", "Example", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/histosmoothed.html", "histosmoothed.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "histosmoothed.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/histosmoothed.html#histosmoothed", "histosmoothed", 'routine in <a href="code_snapshots/obsolete_code/histosmoothed.html">histosmoothed.pro</a>', "histosmoothed.pro", "", "histosmoothed", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hor2eq.html", "hor2eq.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hor2eq.pro", "", "", " NAME:    HOR2EQ   PURPOSE:     Converts local horizon coords (alt-az) of something to equatorial (ra-dec).   EXPLANATION:      This is a nice code to calculate equatorial (ra,dec) coordinates from      horizon (alt,az) coords.    It is typically accurate to about 1 arcsecond      or better (I have checked the output against the publicly available XEPHEM      software). It performs precession, nutation, aberration, and refraction      corrections.  The perhaps best thing about it is that it can take arrays      as inputs, in all variables and keywords EXCEPT Lat, lon, and Altitude     (the code assumes these aren't changing), and uses vector arithmetic in      every calculation except when calculating the precession matrices.   CALLING SEQUENCE:      HOR2EQ, alt, az, jd, ra, dec, [ha, LAT= , LON= , /WS, OBSNAME= , $                        /B1950 , PRECESS_= 0, NUTATE_= 0, REFRACT_= 0, $                        ABERRATION_= 0, ALTITUDE= , /VERBOSE, _EXTRA= ]   INPUT VARIABLES        alt  : altitude (in degrees) [scalar or vector]        az   : azimuth angle (in degrees, measured EAST from NORTH, but see               keyword WS below.) [scalar or vector]        JD   : Julian Date [scalar or vector], double precision        Note: if RA and DEC are arrays, then alt and az will also be arrays.              If RA and DEC are arrays, JD may be a scalar OR an array of               the same dimensionality.   OPTIONAL INPUT KEYWORDS:        lat   : north geodetic latitude of location in degrees        lon   : EAST longitude of location in degrees                (Specify west longitude with a negative sign.)        /WS   : Set this to get the azimuth measured westward from south                (not East of North).        obsname   : Set this to a valid observatory name to be used by the                astrolib OBSERVATORY procedure, which will return the latitude                and longitude to be used by this program.        /B1950  : Set this if your ra and dec are specified in B1950,                FK4 coordinates (instead of J2000, FK5)        precess_ : Set this to 1 to force precession [default], 0 for no                  precession.        nutate_  : Set this to 1 to force nutation [default], 0 for no nutation.        aberration_ : Set this to 1 to force aberration correction [default],                  0 for no correction.        refract_  : Set to 1 to force refraction correction [default], 0 for                    no correction.        altitude: The altitude of the observing location, in meters. [default=0].        /verbose: Set this for verbose output.  The default is verbose=0.    _extra: This is for setting TEMPERATURE or PRESSURE explicitly, which are            used by CO_REFRACT to calculate the refraction effect of the            atmosphere. If you don't set these, the program will make an            intelligent guess as to what they are (taking into account your             altitude).  See CO_REFRACT for more details.   OUTPUT VARIABLES        ra   : Right Ascension of object  (J2000) in degrees (FK5); scalar or               vector.        dec  : Declination of object (J2000) in degrees (FK5), scalar or vector.        ha   : hour angle (in degrees) (optional)   DEPENDENCIES:        NUTATE, PRECESS, ADSTRING(), SUNPOS, OBSERVATORY (from the astrolib)        CO_NUTATE, CO_ABERRATION, CO_REFRACT, HADEC2ALTAZ   BASIC STEPS    Precess Ra-Dec to current equinox.    Nutation Correction to Ra-Dec    Aberration correction to Ra-Dec    Calculate Local Mean Sidereal Time    Calculate Local Apparent Sidereal Time    Calculate Hour Angle    Do Spherical Trig to find Apparent Alt-Az    Apply refraction correction to find observed Alt.  CORRECTIONS I DO NOT MAKE:    *  Deflection of Light by the sun due to GR. (typically milliarcseconds,         can be arcseconds within one degree of the sun)    *  The Effect of Annual Parallax (typically &lt; 1 arcsecond)    *  and more (see below)   TO DO     * Better Refraction Correction.  Need to put in wavelength dependence,        and integrate through the atmosphere.     * Topocentric Parallax Correction (will take into account elevation of           the observatory)     * Proper Motion (but this will require crazy lookup tables or something).     * Difference between UTC and UT1 in determining LAST -- is this important?     * Effect of Annual Parallax (is this the same as topocentric Parallax?)     * Polar Motion     * Better connection to Julian Date Calculator.   EXAMPLE:     You are at Kitt Peak National Observatory, looking at a star at azimuth    angle 264d 55m 06s and elevation 37d 54m 41s (in the visible).  Today is    Dec 25, 2041 and the local time is 10 PM precisely.  What is the ra and dec    (J2000) of the star you're looking at?   The temperature here is about 0    Celsius, and the pressure is 781 millibars.    The Julian date for this    time is 2466879.7083333    IDL&gt; hor2eq, ten(37,54,41), ten(264,55,06), 2466879.7083333d, ra, dec, $            /verb, obs='kpno', pres=781.0, temp=273.0   The program produces this output (because the VERBOSE keyword was set):   Latitude = +31 57 48.0   Longitude = *** 36  0.0   ; longitude prints weirdly b/c of negative input to ADSTRING!!  Julian Date =  2466879.708333  Az, El =  17 39 40.4  +37 54 41.0   (Observer Coords)  Az, El =  17 39 40.4  +37 53 39.6   (Apparent Coords)  LMST = +03 53 54.1  LAST = +03 53 53.6  Hour Angle = +03 38 30.1  (hh:mm:ss)  Ra, Dec:  00 15 23.5  +15 25  1.9   (Apparent Coords)  Ra, Dec:  00 15 24.2  +15 25  0.1   (J2041.9841)  Ra, Dec:  00 13 14.1  +15 11  0.3   (J2000)   The star is therefore Algenib!  Compare the derived Ra, Dec with what XEPHEM  got:  Ra, Dec:      00 13 14.2  +15 11  1.0   (J2000)   AUTHOR:    Chris O'Dell        Univ. of Wisconsin-Madison    Observational Cosmology Laboratory    Email: odell@cmb.physics.wisc.edu  REVISION HISTORY:      Made all integers type LONG  W. Landsman   September 2007      Fixed for case of scalar Julian date but vector positions W L June 2009  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hor2eq.html#hor2eq", "hor2eq", 'routine in <a href="idlastro/hor2eq.html">hor2eq.pro</a>', "hor2eq.pro", "", "hor2eq", "", "latlonWSobsnameB1950verboseprecess_nutate_refract_aberration_altitude_extraaltazjdradecha", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/horiz.html", "horiz.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "horiz.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("idlastro/host_to_ieee.html", "host_to_ieee.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "host_to_ieee.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/host_to_ieee.html#host_to_ieee", "host_to_ieee", 'routine in <a href="idlastro/host_to_ieee.html">host_to_ieee.pro</a>', "host_to_ieee.pro", "", "host_to_ieee", " NAME:      HOST_TO_IEEE  PURPOSE:      Translate an IDL variable from host to IEEE representation  EXPLANATION:      The variable is converted from the format used by the host architecture      into IEEE-754 representation ( big endian  as used, e.g., in FITS data ).       Duplicates most of the functionality of the SWAP_ENDIAN_INPLACE procedure      with the addition of the IDLTYPE keyword.  CALLING SEQUENCE:      HOST_TO_IEEE, data, [ IDLTYPE = ]   INPUT-OUTPUT PARAMETERS:      data - any IDL variable, scalar or vector.   It will be modified by              HOST_TO_IEEE to convert from host to IEEE representation.  Byte              and string variables are returned by HOST_TO_IEEE unchanged   OPTIONAL KEYWORD INPUTS:      IDLTYPE - scalar integer (1-15) specifying the IDL datatype according                to the code given by the SIZE function.      This keyword                will usually be used when supplying a byte array that needs                to be interpreted as another data type (e.g. FLOAT).   EXAMPLE:      Suppose FITARR is a 2880 element byte array to be converted to a FITS      record and interpreted a FLOAT data.         IDL&gt; host_to_ieee, FITARR, IDLTYPE = 4   METHOD:      The BYTEORDER procedure is called with the appropriate keywords   MODIFICATION HISTORY:       Adapted from CONV_UNIX_VAX, W. Landsman   Hughes/STX    January, 1992       Version for IDL V5.0  August 1997       Converted to IDL V5.0   W. Landsman   September 1997       Added new integer datatypes  C. Markwardt/W. Landsman  July 2000       Use /SWAP_IF_LITTLE_ENDIAN keyword for 64bit types W. Landsman Feb 2003       Do not use XDR keywords to BYTEORDER for much improved speed                                W. Landsman   April 2006  ", "IDLTYPEdata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/howfar.html", "howfar.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "howfar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/howfar.html#howfar", "howfar", 'routine in <a href="code_snapshots/test_version/howfar.html">howfar.pro</a>', "howfar.pro", "", "howfar", "", "fromto", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/howfar.html", "howfar.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "howfar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/howfar.html#howfar", "howfar", 'routine in <a href="code_snapshots/jul25/howfar.html">howfar.pro</a>', "howfar.pro", "", "howfar", "", "fromto", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/howfar.html", "howfar.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "howfar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/howfar.html#howfar", "howfar", 'routine in <a href="code_snapshots/sep11/howfar.html">howfar.pro</a>', "howfar.pro", "", "howfar", "", "fromto", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/howfar.html", "howfar.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "howfar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/howfar.html#howfar", "howfar", 'routine in <a href="sep20/howfar.html">howfar.pro</a>', "howfar.pro", "", "howfar", "", "fromto", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hprecess.html", "hprecess.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hprecess.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hprecess.html#HPRECESS", "HPRECESS", 'routine in <a href="idlastro/hprecess.html">hprecess.pro</a>', "hprecess.pro", "", "HPRECESS", " NAME:        HPRECESS  PURPOSE:        Precess the astrometry in a FITS header to a new equinox   CALLING SEQUENCE:        HPRECESS, HDR, [ yearf ]   INPUT-OUTPUT:        HDR - FITS Header, must contain the CRVAL astrometry keywords,                and either an EPOCH or EQUINOX keyword.                HDR will be modified to contain the precessed astrometry   OPTIONAL INPUT:        YEARF - Scalar, giving the year of the new (Final) equinox.                If not supplied, user will be prompted for this value.   METHOD:        The CRVAL and CD (or CROTA) keywords are extracted from the header        and precessed to the new equinox.  The EPOCH or EQUINOX keyword in        the header is  updated.  A HISTORY record is added   RESTRICTIONS:        The FK5 reference frame is assumed for both equinoxes.   PROCEDURES USED:        EXTAST, GET_EQUINOX(), SXADDPAR, SXADDHIST, PRECESS, PRECESS_CD        PUTAST, ZPARCHECK  REVISION HISTORY:        Written  W. Landsman        STX              July, 1988        CD matrix precessed -                        February, 1989        Update EQUINOX keyword when CROTA2 present   November, 1992        Recognize a GSSS header                      June, 1994        Additional Noparams value recognize for storing CDs.  RSH, 6 Apr 95        Understand reversed X,Y (X-Dec, Y-RA) axes,   W. Landsman  October 1998        Correct algorithm when CROTA2 is in header W. Landsman  April 2006        Correct sign error introduced April 2006, include CDELT values          when computing rotation of pole   W. Landsman July 2007        Call hprecess/jprecess for 1950&lt;&gt;2000   W. L. Aug 2009  ", "HDRYEARF", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hprint.html", "hprint.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hprint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hprint.html#hprint", "hprint", 'routine in <a href="idlastro/hprint.html">hprint.pro</a>', "hprint.pro", "", "hprint", " NAME:        HPRINT  PURPOSE:        Display a FITS header (or other string array)  EXPLANATION:        On a GUI terminal, the string array is displayed using XDISPSTR.        If printing at a non-GUI terminal, the string array is  printed 1 line        at a  time, to make sure that each element of the string array is        displayed on a separate line.   CALLING SEQUENCE:        HPRINT, h, [ firstline ]   INPUTS:        H - FITS header (or any other string array).   OPTIONAL INPUT:        FIRSTLINE - scalar integer specifying the first line to begin                displaying.   The default is FIRSTLINE = 1, i.e. display                all the lines.     If Firstline is negative, then the first                line to be printed is counted backward from the last line.   NOTES:        When displaying at the terminal, HPRINT has the following differences        from the intrinsic PRINT procedure         (1) Arrays are printed one line at a time to avoid a space between 80                character lines        (2) Lines are trimmed with STRTRIM before being printed to speed up                display        (3) The /more option is used for output.   EXAMPLE:        Read the header from a FITS file named 'test.fits' and display it at the        terminal beginning with line 50         IDL&gt; h = headfits( 'test.fits')         ;Read FITS header        IDL&gt; hprint, h, 50                      ;Display starting at line 50         To print the last 25 lines of the header         IDL&gt; hprint, h, -25   REVISION HISTORY:        Written W. Landsman                     July, 1990        Added test for user quit                July, 1991        Added optional FIRSTLINE parameter      November, 1992        Modified for when STDOUT is not a TTY W. Landsman  September 1995        Converted to IDL V5.0   W. Landsman   September 1997        Fixed printing in IDLDE, C. Gehman      August, 1998        Skip PRINTF if IDL in demo mode  W. Landsman  October 2004        Fixed bug on non-terminals, William Thompson, 18-Oct-2004        Assume since V5.4 Use BREAK instead of GOTO  W. Landsman Apr 2006        Call XDISPSTR on a GUI terminal  W. Landsman Jun 2006  ", "hfirstline", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hrebin.html", "hrebin.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hrebin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hrebin.html#hrebin", "hrebin", 'routine in <a href="idlastro/hrebin.html">hrebin.pro</a>', "hrebin.pro", "", "hrebin", " NAME:     HREBIN  PURPOSE:     Expand or contract a FITS image using (F)REBIN and update the header  EXPLANATION:     If the output size is an exact multiple of the input size then REBIN is     used, else FREBIN is used.     User can either overwrite the input array,     or write to new variables.   CALLING SEQUENCE:     HREBIN, oldhd        ;Special calling sequence to just update header     HREBIN, oldim, oldhd, [ newim, newhd, newx, newy, OUTSIZE = ,/SAMPLE,                             ERRMSG =  ]   INPUTS:     OLDIM - the original image array     OLDHD - the original image FITS header, string array   OPTIONAL INPUTS:     NEWX - size of the new image in the X direction, integer scalar     NEWY - size of the new image in the Y direction, integer scalar             HREBIN will prompt for NEWX and NEWY if not supplied   OPTIONAL OUTPUTS:     NEWIM - the image after expansion or contraction with REBIN     NEWHD - header for newim containing updated astrometry info             If output parameters are not supplied, the program will modify             the input parameters OLDIM and OLDHD to contain the new array and             updated header.   OPTIONAL INPUT KEYWORDS:     /SAMPLE - Expansion or contraction is done using REBIN which uses               bilinear interpolation when magnifying and boxaveraging when               minifying.   If the SAMPLE keyword is supplied and non-zero,               then nearest neighbor sampling is used in both cases.   Keyword               has no effect when output size is not a multiple of input size.      OUTSIZE - Two element integer vector which can be used instead of the              NEWX and NEWY parameters to specify the output image dimensions      ALT - Single character 'A' through 'Z' or ' ' specifying which astrometry           system to modify in the FITS header.    The default is to use the           primary astrometry of ALT = ' '.    See Greisen and Calabretta (2002)           for information about alternate astrometry keywords.  OPTIONAL KEYWORD OUTPUT:        ERRMSG - If this keyword is supplied, then any error mesasges will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.  PROCEDURE:      The parameters BSCALE, NAXIS1, NAXIS2, CRPIX1, and CRPIX2 and the CD      (or CDELT) parameters are updated for the new FITS header.   EXAMPLE:      Compress a 2048 x 2048 image array IM, with FITS header HDR, to a      724 x 724 array.   Overwrite the input variables with the compressed      image and header.       IDL&gt; hrebin, im, hdr, OUT = [724, 724]   PROCEDURES USED:      CHECK_FITS, EXTAST, FREBIN, GSSS_STDAST, STRN(), SXPAR(), SXADDHIST,      SXADDPAR, ZPARCHECK   MODIFICATION HISTORY:      Written, December 1990  W. Landsman, ST System Corp.      Update CD1_1 keywords   W. Landsman   November 1992      Check for a GSSS header   W. Landsman  June 1994      Update BSCALE even if no astrometry present   W. Landsman  May 1997      Converted to IDL V5.0   W. Landsman   September 1997      Use FREBIN to accept sizes that are not a integer multiple of the original          size    W. Landsman     August 1998      Correct for  edge  effects when expanding with REBIN W. Landsman Apr. 1999      Fixed initialization of header only call broken in Apr 98 change May. 1999      Remove reference to obsolete !ERR  W. Landsman   February 2000      Use double precision formatting for CD matrix W. Landsman April 2000      Recognize PC00n00m astrometry format   W. Landsman   December 2001      Correct astrometry for integral contraction W. Landsman  April 2002      Fix output astrometry for non-equal plate scales for PC matrix or      CROTA2 keyword, added ALT keyword.   W. Landsman May 2005      Update distortion parameters if present  W. Landsman August 2007      Don't update BSCALE/BZERO for unsigned integer W.Landsman Mar 2008      Use post-V6.0 notation   W. Landsman  Nov 2011      Write CRPIX values as double precision if necessay W. Landsman Oct. 2012  ", "SAMPLEOUTSIZEERRMSGALToldimoldhdnewimnewhdnewxnewy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hreverse.html", "hreverse.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hreverse.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hreverse.html#hreverse", "hreverse", 'routine in <a href="idlastro/hreverse.html">hreverse.pro</a>', "hreverse.pro", "", "hreverse", " NAME:        HREVERSE  PURPOSE:        Reverse an image about either dimension and update FITS astrometry  EXPLANATION:        Reverse an image about either the X or Y axis, and create a new        header with updated astrometry for the reversed image.   CALLING SEQUENCE:        HREVERSE,oldim,oldhd, [ subs, /SILENT ]   ;Update input image and header                or        HREVERSE, oldim, oldhd, newim, newhd, [ subs, /SILENT ]   INPUTS:        OLDIM - the original image array        OLDHD - the original image header   OPTIONAL INPUTS:        SUBS - Subs equals 1 to reverse the order of the X dimension,                2 to reverse Y order.  If omitted, then HREVERSE will                prompt for this scalar parameter.   OPTIONAL OUTPUTS:        NEWIM - the rotated image, with the same dimensions as Oldim        NEWHD - header for newim containing updated astrometry info                If output parameters are not supplied, the program                will modify the input parameters OLDIM and OLDHD                to contain the rotated image and updated header.   OPTIONAL KEYWORD INPUT:        SILENT - if set and non-zero, then informative messages are suppressed.   OPTIONAL KEYWORD OUTPUT:        ERRMSG - If this keyword is supplied, then any error mesasges will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.   SIDE EFFECTS:        A right-handed coordinate system is converted into a left-        handed one, and vice-versa.   PROCEDURE:        The User's Library procedure REVERSE is used to reverse the image.        The CD and CRPIX header parameters are updated for the new header.        For AIPS type astrometry, the CDELT parameters are also updated.        A history record is also added to the header   PROCEDURES USED:        CHECK_FITS, EXTAST, REVERSE(), STRN(), SXADDPAR  MODIFICATION HISTORY:        Written, Aug. 1986 W. Landsman, STI Corp.        Error modifying CROTA angles corrected     9-23-88        Added format keyword, J. Isensee, July, 1990        Work for ST Guide Star images, W. Landsman   HSTX, May 1995        Compute CRPIX1 correctly for X reversal   W. Landsman HSTX August 1995        Converted to IDL V5.0   W. Landsman   September 1997        Added ERRMSG, Use double precision formatting, W. Landsman April 2000        Recognize PC00n00m astrometry matrix   W. Landsman   December 2001  ", "SILENTERRMSGoldimoldhdnewimnewhdsubs", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hrot.html", "hrot.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hrot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hrot.html#hrot", "hrot", 'routine in <a href="idlastro/hrot.html">hrot.pro</a>', "hrot.pro", "", "hrot", " NAME:        HROT  PURPOSE:        Rotate an image and create new FITS header with updated astrometry.  EXPLANATION:        Cubic, bilinear or nearest neighbor interpolation can be used.   CALLING SEQUENCE:        HROT, oldim, oldhd, [ newim, newhd, angle, xc, yc, int,                        MISSING =, INTERP =, CUBIC = , /PIVOT]  INPUTS:        OLDIM - the original image array        OLDHD - the original FITS image header, string array   OPTIONAL INPUTS:        NEWIM - If NEWIM is set to -1, then the old image and header will                be updated        ANGLE - Rotation angle, degrees clockwise, scalar        XC    - X Center of rotation (-1 for center of image)        YC    - Y Center of rotation (-1 for center of image)        INT   - 0 for nearest neighbor, 1 for bilinear interpolation                2 for cubic interpolation.   OPTIONAL OUTPUTS:        NEWIM - the rotated image, with the same dimensions as Oldim        NEWHD - header for newim containing updated astrometry info                If output parameters are not supplied, the program                will modify the input parameters OLDIM and OLDHD                to contain the rotated image and updated header.   OPTIONAL INPUT KEYWORD:        MISSING - Set this keyword to a scalar value which will be assigned                to pixels in the output image which do not correspond to                existing input images (e.g if one rotates off-center).                If not supplied then linear extrapolation is used.                ***NOTE: A bug was introduced into the POLY_2D function in IDL                V5.5 (fixed in V6.1) such that the MISSING keyword                may not work properly with floating point data***         INTERP - scalar set to either 0 (nearest neighbor interpolation),                1 (bilinear interpolation), or 2 (cubic interpolation).                The interpolation type can be specified by either the INTERP                keyword or the int parameter         CUBIC - If set and non-zero then cubic interpolation is used (see ROT),                which is equivalent to setting INT = 2.   In IDL V5.0 and later,                 this keyword can also be set to a value between -1 and 0.         /PIVOT - Setting this keyword causes the image to pivot around the point 		XC, YC, so that this point maps into the same point in the 		output image.  If this keyword is set to 0 or omitted, then the 		point XC, YC in the input image is mapped into the center of 		the output image.   OPTIONAL OUTPUT KEYWORD:        ERRMSG - If this keyword is supplied, then any error mesasges will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.  EXAMPLE:        Rotate an image non-interactively 30 degrees clockwise.  Use        bilinear interpolation, and set missing values to 0.         IDL&gt;  HROT, im_old, h_old, im_new, h_new, 30, -1, -1, 1, MIS = 0         As above but update the input image and header and pivot about (100,120)         IDL&gt;  HROT, im_old, h_old, -1, -1, 30, 100, 120, 1, MIS = 0, /PIVOT  RESTRICTIONS:        Unlike the ROT procedure, HROT cannot be used to magnify or        or demagnify an image. Use HCONGRID or HREBIN instead.   PROCEDURE:        The image array is rotated using the ROT procedure.        The CD (or CROTA) and CRPIX parameters, if present in the FITS header,        are updated for the new rotation.        History records are also added to the header   PROCEDURES USED:        CHECK_FITS, EXTAST, GETOPT(), GETROT, ROT(), STRN(), SXADDPAR   MODIFICATION HISTORY:        Written, Aug. 1986 W. Landsman, ST Systems Corp.        Added MISSING keyword, W. Landsman March, 1991        Added cubic interpolation, use astrometry structure   Feb 1994        Removed call to SINCE_VERSION()  W. Landsman  March 1996        Assume at least V3.5, add CUBIC parameter       W. Landsman  March 1997        Converted to IDL V5.0   W. Landsman   September 1997        Fix for CROTA2 defined and CDELT1 NE CDELT2, W. Landsman  November 1998        Fix documentation  to specify clockwise rotation W. Landsman Dec. 1999        Added /PIVOT keyword    W. Landsman  January 2000        Added ERRMSG, Use double precision formatting, W. Landsman April 2000        Consistent conversion between CROTA and CD matrix W. Landsman Oct 2000        Work for both CD001001 and CDELT defined  W. Landsman   March 2001        Recognize PC matrix astrometry  W. Landsman December 2001        Update astrometry correctly when /PIVOT applied W. Landsman March 2002        Update CROTA2 astrometry correctly, approximate GSSS W.L. June 2003        Work with CD1_1, PC1_1 and CROTA keywords W. L. July 2003        Work with angle as a 1 element vector  W.L.  May 2006  ", "MISSINGINTERPCUBICPIVOTERRMSGoldimoldhdnewimnewhdanglexcycint", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/hrotate.html", "hrotate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "hrotate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/hrotate.html#hrotate", "hrotate", 'routine in <a href="idlastro/hrotate.html">hrotate.pro</a>', "hrotate.pro", "", "hrotate", " NAME:      HROTATE  PURPOSE:      Apply the IDL ROTATE function and update astrometry in a FITS header  EXPLANATION:      Apply the intrinsic IDL ROTATE function to an image and update      astrometry in the associated FITS header.   CALLING SEQUENCE:      HROTATE, oldim, oldhd, newim, newhd, direction                or      HROTATE, oldim, oldhd, direction   INPUTS:      OLDIM - the original image array      OLDHD - the original FITS image header, string array      DIRECTION - Scalar integer (0-7) specifying rotation direction,                exactly as specified by the IDL ROTATE function.          Direction  Transpose?  Rot. CCW  X1  Y1         0          No          None     X0  Y0    (no change)        1          No          90      -Y0  X0        2          No          180     -X0 -Y0        3          No          270      Y0 -X0        4          Yes         None     Y0  X0        5          Yes         90      -X0  Y0        6          Yes         180     -Y0 -X0        7          Yes         270      X0 -Y0   OPTIONAL OUTPUTS:      NEWIM - the rotated image, with the same dimensions as Oldim      NEWHD - header for newim containing updated astrometry info                If output parameters are not supplied, the program                will modify the input parameters OLDIM and OLDHD                to contain the rotated image and updated header.   OPTIONAL KEYWORD OUTPUT:      ERRMSG - If this keyword is supplied, then any error mesasges will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.  EXAMPLE:      Rotate an image exactly 90 degrees counterclockwise and update the      FITS image array and header.         IDL&gt;  HROT, im, h, im_new, h_new, 1   PROCEDURE:       The image array is rotated using the ROTATE function.       The CD (or CROTA) and CRPIX parameters, if present in the FITS header,       are updated for the new rotation.       History records are also added to the header   RESTRICTIONS:      Does not work Guide Star Survey (GSS) astrometry.    Use GSSS_STDAST to      first convert  PROCEDURES USED:      CHECK_FITS(), SXADDPAR, EXTAST   MODIFICATION HISTORY:      Written,  Mar 1997    W. Landsman,  Hughes STX      Work for non-square images   W. Landsman   June 1998 Raytheon STX      Fix for different plate scales, and CROTA2 defined, November 1998      Added ERRMSG, Use double precision formatting, W. Landsman April 2000      Consistent conversion between CROTA and CD matrix W. Landsman Oct 2000      Correct update when CROTA keyword present W. Landsman  June 2003      Update CDELT for AIPS-style astrometry headers M. Perrin/WL Jul 2003      Convert GSS astrometry to WCS W. Landsman  November 2004      Work even if no astrometry present, just update NAXIS* WL June 2011  ", "ERRMSGoldimoldhdnewimnewhddirection", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/idfids.html", "idfids.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "idfids.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/idfids.html#idfids", "idfids", 'routine in <a href="code_snapshots/albert_version/idfids.html">idfids.pro</a>', "idfids.pro", "", "idfids", "", "fidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/idfids.html", "idfids.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "idfids.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/idfids.html#idfids", "idfids", 'routine in <a href="code_snapshots/test_version/idfids.html">idfids.pro</a>', "idfids.pro", "", "idfids", "", "fidstructcenterstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/idfids.html", "idfids.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "idfids.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/idfids.html#idfids", "idfids", 'routine in <a href="code_snapshots/jul25/idfids.html">idfids.pro</a>', "idfids.pro", "", "idfids", "", "fidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/idfids.html", "idfids.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "idfids.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/idfids.html#idfids", "idfids", 'routine in <a href="sep20/idfids.html">idfids.pro</a>', "idfids.pro", "", "idfids", "", "fidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/idfids.html", "idfids.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "idfids.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/idfids.html#idfids", "idfids", 'routine in <a href="code_snapshots/sep11/idfids.html">idfids.pro</a>', "idfids.pro", "", "idfids", "", "fidstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/idl_object__define.html", "idl_object__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "idl_object__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/idl_object__define.html#IDL_Object", "IDL_Object", 'routine in <a href="coyote/idl_object__define.html">idl_object__define.pro</a>', "idl_object__define.pro", "", "IDL_Object", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/idl_object__define.html#IDL_Object", "IDL_Object", 'routine in <a href="coyote/idl_object__define.html">idl_object__define.pro</a>', "idl_object__define.pro", "", "IDL_Object", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/idl_object__define.html#IDL_Object__Define", "IDL_Object__Define", 'routine in <a href="coyote/idl_object__define.html">idl_object__define.pro</a>', "idl_object__define.pro", "", "IDL_Object__Define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/idsuns.html", "idsuns.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "idsuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/idsuns.html#idsuns", "idsuns", 'routine in <a href="code_snapshots/jul25/idsuns.html">idsuns.pro</a>', "idsuns.pro", "", "idsuns", "       Defines solar regions   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/idsuns.html", "idsuns.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "idsuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/idsuns.html#idsuns", "idsuns", 'routine in <a href="code_snapshots/sep11/idsuns.html">idsuns.pro</a>', "idsuns.pro", "", "idsuns", "       Defines solar regions   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/idsuns.html", "idsuns.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "idsuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/idsuns.html#idsuns", "idsuns", 'routine in <a href="code_snapshots/test_version/idsuns.html">idsuns.pro</a>', "idsuns.pro", "", "idsuns", "       Defines solar regions   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/idsuns.html", "idsuns.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "idsuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/idsuns.html#idsuns", "idsuns", 'routine in <a href="code_snapshots/orig_version/idsuns.html">idsuns.pro</a>', "idsuns.pro", "", "idsuns", "       Defines solar regions   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/idsuns.html", "idsuns.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "idsuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/idsuns.html#idsuns", "idsuns", 'routine in <a href="code_snapshots/albert_version/idsuns.html">idsuns.pro</a>', "idsuns.pro", "", "idsuns", "       Defines solar regions   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/idsuns.html", "idsuns.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "idsuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/idsuns.html#idsuns", "idsuns", 'routine in <a href="sep20/idsuns.html">idsuns.pro</a>', "idsuns.pro", "", "idsuns", "       Defines solar regions   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/idsuns.html", "idsuns.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "idsuns.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/idsuns.html#idsuns", "idsuns", 'routine in <a href="code_snapshots/aug22_notworking/idsuns.html">idsuns.pro</a>', "idsuns.pro", "", "idsuns", "       Defines solar regions   ", "input           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ieee_to_host.html", "ieee_to_host.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ieee_to_host.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ieee_to_host.html#ieee_to_host", "ieee_to_host", 'routine in <a href="idlastro/ieee_to_host.html">ieee_to_host.pro</a>', "ieee_to_host.pro", "", "ieee_to_host", " NAME:      IEEE_TO_HOST  PURPOSE:      Translate an IDL variable from IEEE-754 to host representation  EXPLANATION:      The variable is translated from IEEE-754 ( big-endian  as used, for      example, in FITS data ), into the host machine architecture.       Duplicates most of the functionality of the SWAP_ENDIAN_INPLACE procedure      introduced in V5.6, with the addition of the IDLTYPE keyword.  CALLING SEQUENCE:      IEEE_TO_HOST, data, [ IDLTYPE = , ]   INPUT-OUTPUT PARAMETERS:      data - any IDL variable, scalar or vector.   It will be modified by              IEEE_TO_HOST to convert from IEEE to host representation.  Byte              and string variables are returned by IEEE_TO_HOST unchanged   OPTIONAL KEYWORD INPUTS:      IDLTYPE - scalar integer (1-15) specifying the IDL datatype according                to the code given by the SIZE function.     This keyword                is usually when DATA is a byte array to be interpreted as                another datatype (e.g. FLOAT).   EXAMPLE:        A 2880 byte array (named FITARR) from a FITS record is to be        interpreted as floating and converted to the host representaton:         IDL&gt; IEEE_TO_HOST, fitarr, IDLTYPE = 4   METHOD:        The BYTEORDER procedure is called with the appropriate keyword   MODIFICATION HISTORY:       Written, W. Landsman   Hughes/STX   May, 1992       Converted to IDL V5.0   W. Landsman   September 1997       Under VMS check for IEEE -0.0 values   January 1998       VMS now handle -0.0 values under IDL V5.1    July 1998       Added new integer datatypes  C. Markwardt/W. Landsman  July 2000       Post-V5.1 version, no VMS negative zero check  W. Landsman July 2001       Use size(/type)  W. Landsman December 2002       Use /SWAP_IF_LITTLE_ENDIAN keyword for 64bit types W. Landsman Feb 2003       Do not use XDR keywords to BYTEORDER for much improved speed                                W. Landsman   April 2006       Update cosmetic typo for structures W. Landsman  October 2006  ", "IDLTYPEdata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/image_blend.html", "image_blend.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "image_blend.pro", "", "", " NAME:        IMAGE_BLEND   PURPOSE:        The purpose of this program is to demonstrate how to        use the alpha channel to blend one image into another.        The specific purpose is to see a color image on top of        a gray-scale image, with the gray-scale image showing        through behind the color image.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Widgets, Object Graphics.   CALLING SEQUENCE:         Image_Blend   REQUIRED INPUTS:         None. The images  worldelv.dat  and  ctscan.dat  from the        examples/data directory are used.   OPTIONAL INPUTS:         backgroundImage::  A 2D image variable that will be used for the background image.        foregroundImage:   A 2D image variable that will be used for the foreground image.   OPTIONAL KEYWORD PARAMETERS:         COLORTABLE: The number of a color table to use for the foreground image.        Color table 3 (red temperature) is used as a default.   COMMON BLOCKS:         None.   SIDE EFFECTS:         None.   RESTRICTIONS:         None. The program XCOLORS is required from the Coyote library.   EXAMPLE:         Image_Blend, Colortable=5   MODIFICATION HISTORY:         Written by David Fanning, 30 March 99.        Fixed bug where I redefined the image parameter. Duh... 1 April 99. DWF.        Moved the program into the 21st century. :-) 21 March 2003. DWF.        Added TIFF, GIF (if version supports it), and PS output. 27 December 2006. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/image_blend.html#Image_Blend_Output", "Image_Blend_Output", 'routine in <a href="coyote/image_blend.html">image_blend.pro</a>', "image_blend.pro", "", "Image_Blend_Output", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/image_blend.html#Image_Blend_Exit", "Image_Blend_Exit", 'routine in <a href="coyote/image_blend.html">image_blend.pro</a>', "image_blend.pro", "", "Image_Blend_Exit", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/image_blend.html#Image_Blend_Foreground_Colors", "Image_Blend_Foreground_Colors", 'routine in <a href="coyote/image_blend.html">image_blend.pro</a>', "image_blend.pro", "", "Image_Blend_Foreground_Colors", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/image_blend.html#Image_Blend_Background_Colors", "Image_Blend_Background_Colors", 'routine in <a href="coyote/image_blend.html">image_blend.pro</a>', "image_blend.pro", "", "Image_Blend_Background_Colors", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/image_blend.html#Image_Blend_CleanUp", "Image_Blend_CleanUp", 'routine in <a href="coyote/image_blend.html">image_blend.pro</a>', "image_blend.pro", "", "Image_Blend_CleanUp", "", "id", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/image_blend.html#Image_Blend_Slider", "Image_Blend_Slider", 'routine in <a href="coyote/image_blend.html">image_blend.pro</a>', "image_blend.pro", "", "Image_Blend_Slider", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/image_blend.html#Image_Blend_Expose", "Image_Blend_Expose", 'routine in <a href="coyote/image_blend.html">image_blend.pro</a>', "image_blend.pro", "", "Image_Blend_Expose", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/image_blend.html#Image_Blend_Event", "Image_Blend_Event", 'routine in <a href="coyote/image_blend.html">image_blend.pro</a>', "image_blend.pro", "", "Image_Blend_Event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/image_blend.html#Image_Blend", "Image_Blend", 'routine in <a href="coyote/image_blend.html">image_blend.pro</a>', "image_blend.pro", "", "Image_Blend", "", "ColortablebackgroundImageforegroundImage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/image_dimensions.html", "image_dimensions.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "image_dimensions.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/image_dimensions.html#Image_Dimensions", "Image_Dimensions", 'routine in <a href="idlastro/coyote/image_dimensions.html">image_dimensions.pro</a>', "image_dimensions.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com/</span>  ", "Image_Dimensions", " The purpose of this function is to return the various dimensions of the image,  and also to extract relevant image information via output keywords. The  function works only with 2D and 3D (24-bit) images, with or without alpha  channels.   ", "AlphaChannel        This keyword is set to 1 if there is an alpha channel in the image. Otherwise,         the keyword is set to 0.  XSize        The X size of the image.  YSize        The Y size of the image.   TrueIndex        The position of the  true color  index in the return value. Is -1 for 2D images.  XIndex        The index (position) of the X dimension in the return value.  YIndex        The index (position) of the Y dimension in the return value.  image        The image variable from which information is to be obtained.   ", "Utilities", "    Modification History: <span class= code-output >  Written by:  David W. Fanning, 5 March 2003.</span> <span class= code-output >  Added support for alpha channel images, include ALPHACHANNEL keyword. 13 May 2009. DWF.</span>       Copyright (c) 2003-2011, Fanning Software Consulting, Inc.      To load open a window of the appropriate size and display a 24-bit image: <span class= code-output >  dims = Image_Dimensions(image24, XSize=xsize, YSize=ysize, TrueIndex=trueindex)</span> <span class= code-output >  Window, XSIZE=xsize, YSIZE=ysize</span> <span class= code-output >  TV, image24, TRUE=trueindex</span>       A vector containing the size of each dimension of the image. It is equivalent      to calling the SIZE function with the DIMENSIONS keyword set.   ");
  
  

libdata[libdataItem++] = new Array("coyote/image_dimensions.html", "image_dimensions.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "image_dimensions.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/image_dimensions.html#Image_Dimensions", "Image_Dimensions", 'routine in <a href="coyote/image_dimensions.html">image_dimensions.pro</a>', "image_dimensions.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com/</span>  ", "Image_Dimensions", " The purpose of this function is to return the various dimensions of the image,  and also to extract relevant image information via output keywords. The  function works only with 2D and 3D (24-bit) images, with or without alpha  channels.   ", "AlphaChannel        This keyword is set to 1 if there is an alpha channel in the image. Otherwise,         the keyword is set to 0.  XSize        The X size of the image.  YSize        The Y size of the image.   TrueIndex        The position of the  true color  index in the return value. Is -1 for 2D images.  XIndex        The index (position) of the X dimension in the return value.  YIndex        The index (position) of the Y dimension in the return value.  image        The image variable from which information is to be obtained.   ", "Utilities", "    Modification History: <span class= code-output >  Written by:  David W. Fanning, 5 March 2003.</span> <span class= code-output >  Added support for alpha channel images, include ALPHACHANNEL keyword. 13 May 2009. DWF.</span>       Copyright (c) 2003-2011, Fanning Software Consulting, Inc.      To load open a window of the appropriate size and display a 24-bit image: <span class= code-output >  dims = Image_Dimensions(image24, XSize=xsize, YSize=ysize, TrueIndex=trueindex)</span> <span class= code-output >  Window, XSIZE=xsize, YSIZE=ysize</span> <span class= code-output >  TV, image24, TRUE=trueindex</span>       A vector containing the size of each dimension of the image. It is equivalent      to calling the SIZE function with the DIMENSIONS keyword set.   ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/imageprep.html", "imageprep.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "imageprep.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/imageprep.html#imageprep", "imageprep", 'routine in <a href="code_snapshots/obsolete_code/imageprep.html">imageprep.pro</a>', "imageprep.pro", "", "imageprep", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/imageselect.html", "imageselect.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "imageselect.pro", "", "", " NAME:    IMAGESELECT   PURPOSE:     The purpose of this program is to allow the user to select a formatted    image file for reading. The image data is returned as the result of the    function. The program allows the user to see a thumbnail version of the    image, along with information about the image, before selection. The    program uses the file extention to determine what kind of image is to    be read. The following image types are supported:        TYPE      FILE EXTENSION       BMP       *.bmp       DICOM     *.dcm       FITS      *.fits, *.fts (requires NASA ASTRO library on IDL Path)       GIF       *.gif (IDL 6.2 and higher)       JPEG      *.jpg, *.jpeg, *.jpe       JPEG2000  *.jpf, *.jpx, *.jp2, *.j2c, *.j2k       PICT      *.pict       PNG       *.png       TIFF      *.tif, *tiff   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   CALLING SEQUENCE:     image = ImageSelect()   INPUT PARAMETERS:     None. All input is via keywords.   INPUT KEYWORDS:     BMP -- Set this keyword to select BMP files.     DEMO -- If this keyword is set, the program changes directory to !DIR/examples/data.     DICOM -- Set this keyword to select DICOM files.     DIRECTORY -- The initial input directory name. The current directory by default.     EXCLUDE -- A list of filenames that should excluded from the file selection list.     FILENAME -- The initial filename. If the initial directory has image files of the                correct type, the default is to display the first of these files. Otherwise, blank.     FILTER -- A string, representing the file filter. For example, '*.jpg'.     FITS -- Set the keyword to select FITS files. (Must have NASA Astro Library on path.)     FLIPIMAGE -- Set this keyword if you wish to flip the image from its current orientation. Setting                 this keyword reverses the Y dimension of the image.     GIF -- Set this keyword to select GIF files. (IDL versions before 5.4 and after 6.0, only.)     GROUP_LEADER -- Set this keyword to a widget identifier group leader. This keyword MUST be                    set when calling this program from another widget program to guarantee modal operation.     J2000 -- Set this keyword to select JPEG2000 files. (May also be set as J2K.) (IDL 6.1 or above.)     J2K -- Set this keyword to select JPEG2000 files. (May also be set as J2000.) (IDL 6.1 or above.)     JPEG -- Set this keyword to select JPEG files.     LISTXSIZE -- Set this keyword to the XSIZE of the list widget. Default is 30 or MAX(StrLen(filenames)), whichever is larger.     OFFSETS -- A two-element array containing the X and Y offsets of the program, from the upper left               corner of the display. On dismissal of the program, if this is a named variable (passed into               the program by reference), then it will contain the last offsets of the program. This is               useful if you want to call ImageSelect again and have it positioned in exactly the same               location it was before.     ONLY2D -- Set this keyword if you only want the user to be able to select 2D images. Note              that the user will be able to browse all images, but the Accept button will only              be sensitive for 2D images.     ONLY3D -- Set this keyword if you only want the user to be able to select 3D or true-color images.              Note that the user will be able to browse all images, but the Accept button will only              be sensitive for 3D or true-color images.     PICT -- Set this keyword to select PICT files.     PGM -- Set this keyword to select PGM files.     PPM -- Set this keyword to select PPM files.     PNG -- Set this keyword to select PNG files.     PREVIEWSIZE -- Set this keyword to the maximum size (in pixels) of the preview window. Default is 150.     SILENT -- Set this keyword to turn off Group_Leader educational message. Use only if you              are sure you know what you are doing. :-)     TIFF -- Set this keyword to select TIFF files. (This is the default filter selection.)     TITLE -- Set this keyword to the text to display as the title of the main image selection window.     NOTE: Any extra keywords passed into the program will collected and passed along to the READ_XXX routines    that actually do the image file reading. Using this keyword inheritance mechanism makes it impossible    to trap misspelled or misused keywords. Please take care when using ANY keyword for this routine!   OUTPUT KEYWORDS:     CANCEL -- This keyword is set to 1 if the user exits the program in any way except hitting the ACCEPT button.              The ACCEPT button will set this keyword to 0.     FHEADER -- Set this keyword to a named variable that will return the FITS header information for a FITS file.     FILEINFO -- This keyword returns information about the selected file. Obtained from the QUERY_**** functions.     GEOTIFF --  If the file is a GeoTIFF file, this keyword will return the GeoTIFF structure containing                the files GeoTags.     OUTDIRECTORY -- The directory where the selected file is found.     OUTFILENAME -- The short filename of the selected file.     PALETTE -- The current color table palette returned as a 256-by-3 byte array.   COMMON BLOCKS:     None.   RESTRICTIONS:     Requires other programs from the Coyote Library.    Note: Keyword inheritance to collect undefined keywords that may be passed into the   program for use in READ_XXX routines, make it impossible to trap keyword useage errors.   Please take care when using keywords.   EXAMPLE:     To read JPEG files from the directory:        IDL&gt; image = ImageSelect(/JPEG)   MODIFICATION HISTORY:     Written by: David W. Fanning, 18 Jan 2001.    Added modification to read both 8-bit and 24-bit BMP files. 27 Jan 2001. DWF.    Fixed a problem with calculating the new size of the draw widget. 5 April 2002. DWF.    Fixed a problem with List Widgets not sizing correctly on UNIX machines. 10 Aug 2002. DWF.    Fixed a problem with the initial file not being selected correctly when you changed      the file type. 10 Aug 2002. DWF.    Added a FLIPIMAGE keyword 10 Aug 2002. DWF.    When user chooses to Flip Image, I now reverse the Y dimension of the image,      rather than set the !Order system variable. 10 Aug 2002. DWF.    Added OUTDIRECTORY and OUTFILENAME keywords. 18 Aug 2002. DWF.    Fairly extensive changes in the way this program works and selects images.      A new version of FSC_FileSelect is also required. Because of interactions      with the operating system with image filters, the program has probably      become more Windows-centric. The default is now to display all image      files the program is capable of reading. 31 October 2002. DWF.    Added ONLY2D keyword to allow the acceptance of 2D images only. 3 Nov 2002. DWF.    Added ability to center itself on the display. 8 Nov 2002. DWF.    Fixed a problem caused by reading old images with short color table vectors. 26 Nov 2002. DWF.    Fixed a problem with specifying a fully-qualified filename. 26 Nov 2002. DWF.    Now highlights the selected file in the directory. 26 Nov 2002. DWF.    Improved error handling. 9 Dec 2002. DWF.    Added PALETTE keyword and improved color operation on 8-bit displays. If the image file      contains a color palette, that palette is now loaded when the image is read from the file.      The current color palette can be obtained with the PALETTE keyword. 4 April 2003. DWF.    Added ONLY3D keyword. 19 April 2003. DWF.    Added ability to read PPM and PGM files. 24 November 2003. DWF.    Added TITLE keyword. 1 December 2003. DWF.    Added EXAMPLES keyword. 22 December 2005. DWF.    Added GIF and JPEG2000 file types. Rearranged and cleaned up code. 3 January 2006. DWF.    Added LISTXSIZE keyword. 3 January 2006. DWF.    Added file type checkmark buttons. Program now compatible with IDL 5.6 and higher. 3 January 2006. DWF.    Improved error handling with invalid file types. 5 January 2006. DWF.    Added OFFSETS and EXCLUDE keywords. 3 March 2006 DWF.    Modified the program to check for FITS unsigned integer data. 3 March 2006. DWF.    Added ability to double-click image name in list to Accept. 10 March 2006. DWF.    Added FHEADER keyword to return FITS header information. 3 April 2006. DWF.    Fixed a problem in which the file type was not set if the user cancelled. 10 July 2006. DWF.    Added a  fit  file extension for FITS images. 1 April 2008. DWF.    Added a FILTER keyword. 1 April 2008. DWF.    Updated for reading transparent images. 13 May 2009. DWF.    Provided check for PNG images with more than 8 bits per channel. 5 August 2009. DWF.    Fixed a problem in which the starting directory was changed on exit. 20 Nov 2010. DWF.    Change EXAMPLES to more easily remembered DEMO keyword. 29 Nov 2010. DWF.    Removed NOINTERPOLATION keywords in going from TVIMAGE to cgImage. 22 Feb 2011. DWF.    Fixed a problem reading 2D Tiff files. 20 Sept 2012. DWF.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_WindowSize", "ImageSelect_WindowSize", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_WindowSize", "", "XSIZEYSIZEimage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_Action", "ImageSelect_Action", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_Action", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_BSort", "ImageSelect_BSort", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_BSort", "", "INFOREVERSEArrayAsort", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_Cleanup", "ImageSelect_Cleanup", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_Cleanup", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_FileExtension", "ImageSelect_FileExtension", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_FileExtension", "", "filename", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_FilenameEvents", "ImageSelect_FilenameEvents", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_FilenameEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_FlipImage", "ImageSelect_FlipImage", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_FlipImage", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_ListEvents", "ImageSelect_ListEvents", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_ListEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_ReadFiles", "ImageSelect_ReadFiles", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_ReadFiles", "", "_Extraextensionfilenameinfofileinfoimageoktype", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect_SetFilter", "ImageSelect_SetFilter", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect_SetFilter", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/imageselect.html#ImageSelect", "ImageSelect", 'routine in <a href="coyote/imageselect.html">imageselect.pro</a>', "imageselect.pro", "", "ImageSelect", "", "BMPCancelDemoDicomDirectoryExamplesExclude_ExtraFileInfoFilenameFilterFITSFlipimageGEOTIFFGIFGroup_LeaderFHeaderJ2000J2KJPEGLISTXSIZEOFFSETSONLY2DONLY3DOutDirectoryOutFilenamePalettePICTPGMPPMPNGSILENTTIFFTITLEPreviewSize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/imcontour.html", "imcontour.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "imcontour.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/imcontour.html#imcontour", "imcontour", 'routine in <a href="idlastro/imcontour.html">imcontour.pro</a>', "imcontour.pro", "", "imcontour", " NAME:        IMCONTOUR  PURPOSE:        Make a contour plot labeled with astronomical coordinates.  EXPLANATION:        The type of coordinate display is controlled by the keyword TYPE        Set TYPE=0 (default) to measure distances from the center of the image        (IMCONTOUR will decide whether the plotting units will be in        arc seconds, arc minutes, or degrees depending on image size.)        Set /TYPE for standard RA and Dec labeling         By using the /NODATA keyword, IMCONTOUR can also be used to simply        provide astronomical labeling of a previously displayed image.  CALLING SEQUENCE        IMCONTOUR, im, hdr,[ /TYPE, /PUTINFO, XDELTA = , YDELTA =, _EXTRA =                             XMID=, YMID= ]   INPUTS:        IM - 2-dimensional image array        HDR - FITS header associated with IM, string array, must include                astrometry keywords.   IMCONTOUR will also look for the                OBJECT and IMAGE keywords, and print these if found and the                PUTINFO keyword is set.   OPTIONAL PLOTTING KEYWORDS:        /TYPE - the type of astronomical labeling to be displayed.   Either set                TYPE = 0 (default), distance to center of the image is                marked in units of Arc seconds, arc minutes, or degrees                 TYPE = 1 astronomical labeling with Right ascension and                declination.         /PUTINFO - If set, then IMCONTOUR will add information about the image                to the right of the contour plot.  Information includes image                name, object, image center, image center, contour levels, and                date plot was made         XDELTA, YDELTA - Integer scalars giving spacing of labels for TYPE=1.                Default is to label every major tick (XDELTA=1) but if                crowding occurs, then the user might wish to label every other                tick (XDELTA=2) or every third tick (XDELTA=3)         XMID, YMID - Scalars giving the X,Y position from which offset distances                will be measured when TYPE=0.   By default, offset distances                are measured from the center of the image.        /OVERLAY - If set, then IMCONTOUR is assumed to overlay an image.                This requires 1 extra pixel be included on the X and Y axis,                to account for edge effects in the image display.    Setting                OVERLAY provide a better match of the contour and underlying                image but is not as aesthetically pleasing because the contours                will not extend to the axes.         Any keyword accepted by CONTOUR may also be passed through IMCONTOUR        since IMCONTOUR uses the _EXTRA facility.     IMCONTOUR uses its own        defaults for the XTITLE, YTITLE XMINOR, YMINOR, and SUBTITLE keywords        but these may be overridden.    Note in particular the /NODATA keyword        which can be used if imcontour.pro is to only provide labeling.   NOTES:        (1) The contour plot will have the same dimensional ratio as the input            image array        (2) To contour a subimage, use HEXTRACT before calling IMCONTOUR        (3) Use the /NODATA keyword to simply provide astronomical labeling            of a previously displayed image.        (4) The IMCONTOUR display currently does not indicate the image            rotation in any way, but only specifies coordinates along the            edges of the image   EXAMPLE:        Overlay the contour of an image, im2, with FITS header, h2, on top        of the display of a different image, im1.   Use RA, Dec labeling, and        seven equally spaced contour levels.    The use of a program like        David Fanning's cgImage  http://www.idlcoyote.com/programs/cgimage.pro        is suggested to properly overlay plotting and image coordinates.  The        /Keep_aspect_ratio keyword must be used.         IDL&gt; cgimage,im1,/keep_aspect, position = pos        IDL&gt; imcontour,im2,h2,nlevels=7,/Noerase,/TYPE,position = pos   PROCEDURES USED:        CHECK_FITS, EXTAST, GETROT, TICPOS, TICLABEL, TIC_ONE, TICS, XYAD        CONS_RA(), CONS_DEC(), ADSTRING()   REVISION HISTORY:        Written   W. Landsman   STX                    May, 1989        Fixed RA,Dec labeling  W. Landsman             November, 1991        Fix plotting keywords  W.Landsman             July, 1992        Recognize GSSS headers  W. Landsman            July, 1994        Removed Channel keyword for V4.0 compatibility June, 1995        Add _EXTRA CONTOUR plotting keywords  W. Landsman  August, 1995        Add XDELTA, YDELTA keywords  W. Landsman   November, 1995        Use SYSTIME() instead of !STIME                August, 1997        Remove obsolete !ERR system variable W. Landsman   May 2000        Added XMID, YMID keywords to specify central position (default is still           center of image)  W. Landsman               March 2002        Recognize Galactic coordinates, fix Levels display when /PUTINFO set            W. Landsman                May 2003        Correct conversion from seconds of RA to arcmin is 4 not 15.        	M. Perrin					July 2003        Fix integer truncation which appears with tiny images WL  July 2004        Changed some keyword_set() to N_elements WL  Sep 2006        Work to 1 pixels level when overlaying an image,added /OVERLAY keyword         Use FORMAT_AXIS_VALUES()  W. Landsman   Jan 2008        Make /OVERLAY  always optional   W. Landsman  Feb 2008        Check if RA crosses 0 hours  WL  Aug 2008        Use Coyote Graphics WL Feb 2011  ", "TYPEPUTINFOXTITLEYTITLESUBTITLEXDELTAYDELTA_EXTRAXMIDYMIDOVERLAYNOerasewindowimhdr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/imdbase.html", "imdbase.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "imdbase.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/imdbase.html#imdbase", "imdbase", 'routine in <a href="idlastro/imdbase.html">imdbase.pro</a>', "imdbase.pro", "", "imdbase", " NAME:      IMDBASE  PURPOSE:      Find the sources in an IDL database that are located on a given image.   CALLING SEQUENCE:     imdbase, hdr, [catalogue, list, ALT=, XPOS= ,YPOS=, XRANGE= ,YRANGE= ,                        SUBLIST =, /SILENT ]   INPUTS:     hdr - FITS image header containing astrometry, and the NAXIS1,                NAXIS2 keywords giving the image size     catalogue - string giving name of catalogue in database.   If not supplied               then the currently open database is used.   The database must               contain the (preferably indexed) fields RA (in hours) and DEC.               Type DBHELP for a list of the names of available catalogues.   OPTIONAL OUTPUT PARAMETER:     LIST - A longwprd vector containing the entry numbers of sources found            within the image.   This vector can then be used with other            database procedures, e.g. to print specified fields (DBPRINT)            or subselect with further criteria (DBFIND)   OPTIONAL OUTPUT KEYWORD PARAMETER:      XPOS - REAL*4 vector giving X positions of catalogue sources found             within the image      YPOS - REAL*4 vector giving Y positions of catalogue sources found             within the image   OPTIONAL INPUT KEYWORD PARAMETERS        ALT -  single character 'A' through 'Z' or ' ' specifying an alternate               astrometry system present in the FITS header.    The default is               to use the primary astrometry or ALT = ' '.   If /ALT is set,               then this is equivalent to ALT = 'A'.   See Section 3.3 of               Greisen & Calabretta (2002, A&A, 395, 1061) for information about               alternate astrometry keywords.      SILENT - If set, then informational messages are suppressed      SUBLIST - vector giving entries in the database to consider in the                search.  If not supplied, or set equal to -1, then all entries                are considered.      XRANGE - 2 element vector giving the X range of the image to consider.               The default is to search for catalogue sources within the entire              image      YRANGE - 2 element vector giving the Y range of the image to consider.   NOTES:      If an output list vector is not supplied, then the found objects are      diplayed at the terminal.   EXAMPLE:       Find all existing IUE observations within the field of the FITS       file fuv0435fc.fits.  Subselect those taken with the SWP camera        H = HEADFITS('fuv0435f.fits')             ;Read FITS header       IMDBASE,H,'IUE',list              ;Find IUE obs. within image       list2 = DBFIND('CAM_NO=3',list)   ;Subselect on SWP images   SIDE EFFECTS:       The IDL database is left open upon exiting IMDBASE.  NOTES:       IMDBASE checks the description of the RA item in the database for the       string '1950'.    If found, the database RA and Dec are assumed to be       in equinox B1950.   Otherwise they are assumed to be in ICRS or J2000.   SYSTEM VARIABLES:       The non-standard system variable !TEXTOUT is required for use with the       database procedures.   PROCEDURES USED:       AD2XY, DBEXT, DB_ITEM, DB_ITEM_INFO(), DBOPEN, DBFIND(), EXTAST,       GET_EQUINOX(), GSSSADXY, GSSSXYAD, HPRECESS, SXPAR(), XY2AD  REVISION HISTORY:       Written W. Landsman            September, 1988       Added SUBLIST keyword          September, 1991       Updated to use ASTROMETRY structures    J.D. Offenberg, HSTX, Jan 1993       Conversion for precession fixed.   R.Hill, HSTX, 22-Apr-93       Check RA description for equinox   W. Landsman  Aug 96       Call HPRECESS if header equinox does not match DB  W. Landsman Oct. 1998       Assume Equinox J2000 if not explicitly B1950 W. Landsman Jan. 2005       Added ALT keyword W. Landsman  April 2005       Use open database, if no catalogue name given  W.L  April 2008       Added /SILENT keyword W.L. Mar 2009  ", "XPOSYPOSSILENTXRANGEYRANGESUBLISTALThdrcataloguelist", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/imf.html", "imf.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "imf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/imf.html#imf", "imf", 'routine in <a href="idlastro/imf.html">imf.pro</a>', "imf.pro", "", "imf", " NAME:        IMF  PURPOSE:        Compute an N-component power-law logarithmic initial mass function  EXPLANTION:        The function is normalized so that the total mass distribution        equals one solar mass.   CALLING SEQUENCE:        psi = IMF( mass, expon,  mass_range )   INPUTS:        mass - mass in units of solar masses (scalar or vector)                Converted to floating point if necessary        expon - power law exponent, usually negative, scalar or vector                The number of values in expon equals the number of different                power-law components in the IMF                A Saltpeter IMF has a scalar value of expon = -1.35        mass_range - vector containing the mass upper and lower limits of the                IMF and masses where the IMF exponent changes.   The number                of values in mass_range should be one more than in expon.                The values in mass_range should be monotonically increasing.   OUTPUTS        psi - mass function, number of stars per unit logarithmic mass interval                evaluated for supplied masses   NOTES:        The mass spectrum f(m) giving the number of stars per unit mass        interval is related to psi(m) by  m*f(m) = psi(m).    The normalization        condition is that the integral of psi(m) between the upper and lower        mass limit is unity.   EXAMPLE:        (1) Print the number of stars per unit mass interval at 3 Msun                for a Salpeter (expon = -1.35) IMF, with a mass range from                0.1 MSun to 110 Msun.                 IDL&gt; print, imf(3, -1.35, [0.1, 110] ) / 3         (2) Lequex et al. (1981, A & A 103, 305) describes an IMF with an                exponent of -0.6 between 0.007 Msun and 1.8 Msun, and an                exponent of -1.7 between 1.8 Msun and 110 Msun.    Plot                the mass spectrum f(m)                 IDL&gt; m = [0.01,0.1,indgen(110) + 1 ]  ;Make a mass vector                IDL&gt; expon = [-0.6, -1.7]       ;Exponent Vector                IDL&gt; mass_range = [ 0.007, 1.8, 110]    ;Mass range                IDL&gt; plot,/xlog,/ylog, m, imf(m, expon, mass_range ) / m   METHOD        IMF first calculates the constants to multiply the power-law        components such that the IMF is continuous at the intermediate masses,        and that the total mass integral is one solar mass.  The IMF is then        calculated for the supplied masses.   Also see Scalo (1986, Fund. of        Cosmic Physics, 11, 1)   PROCEDURES CALLED:        None  REVISION HISTORY:        Written    W. Landsman              August, 1989        Set masses LE mass_u rather than LT mass_u  August, 1992        Major rewrite to accept arbitrary power-law components   April 1993        Convert EXPON to float if necessary  W. Landsman     March 1996        Remove call to DATATYPE, V5.3 version  W. Landsman  August 2000  ", "massexponmass_range", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/imlist.html", "imlist.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "imlist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/imlist.html#imlist", "imlist", 'routine in <a href="idlastro/imlist.html">imlist.pro</a>', "imlist.pro", "", "imlist", " NAME:       IMLIST  PURPOSE:       Display pixel values on an image surrounding a specified X,Y center.  EXPLANATION:       IMLIST is similar to TVLIST but the center pixel is supplied directly by       the user, rather than being read off of the image display   CALLING SEQUENCE:       IMLIST, Image, Xc, Yc, [ TEXTOUT = , DX = , DY = ,WIDTH = ,DESCRIP = ]   INPUTS:       Image - Two-dimensional array containing the image       Xc  -   X pixel value at which to center the display, integer scalar       Yc -    Y pixel value at which to center the display, integer scalar   OPTIONAL INPUTS KEYWORDS:       TEXTOUT - Scalar number (1-7) or string which determines output device.                (see TEXTOPEN) The following dev/file is opened for output.                 textout=1       TERMINAL using /more option                textout=2       TERMINAL without /more option                textout=3       &lt;program&gt;.prt                textout=4       laser.tmp                textout=5       user must open file                textout=7       same as 3 but text is appended to &lt;program&gt;.prt                                if file already exists                textout = filename (default extension of .prt)         DX     -Integer scalar giving the number of pixels inthe  X direction                to be displayed.  If omitted then DX = 18 for byte images, and                DX = 14 for integer images.  IMLIST will display REAL data                with more significant figures if more room is available to                print.         DY    - Same as DX, but in Y direction.  If omitted, then DY = DX        WIDTH - Integer scalar giving the character width of the output device.                Default is 80 characters.        DESCRIP =  Scalar string which will be written as a description over                the output pixel values.   If DESCRIP is not supplied, and the                output device specified by TEXTOUT is not a terminal, then the                user will be prompted for a description.        OFFSET - 2 element numeric vector giving an offset to apply to the                display of the X,Y coordinates of the image (e.g. if the                supplied image array is a subarray of a larger image).  OUTPUTS:        None.   PROCEDURE:        Corresponding region of image is then displayed at        the terminal.   If necessary, IMLIST will divide all pixel values        in a REAL*4 image by a (displayed) factor of 10 to make a pretty format.   SYSTEM VARIABLES:        If the keyword TEXTOUT is not supplied, then the non-standard system        variable !TEXTOUT will be read.    (The procedure ASTROLIB can be        used to add the non-standard system variables.)   RESTRICTIONS:        IMLIST may not be able to correctly format all pixel values if the        dynamic range of the values near the center pixel is very large   EXAMPLE:        Display the pixel values of an image array IM in the vicinity of 254,111         IDL&gt; imlist, IM, 254, 111   PROCEDURES USED        TEXTOPEN, F_FORMAT(), TEXTCLOSE  REVISION HISTORY:        Written,    W. Landsman             June, 1991        Added DESCRIP keyword    W. Landsman      December, 1991        Treat LONG image as integer when possible, call TEXTOPEN with /STDOUT        keyword, W. Landsman   April, 1996        Use SYSTIME() instead of !STIME  August 1997        Converted to IDL V5.0   W. Landsman   September 1997        Recognize new integer types, added OFFSET keyword  W. Landsman Jan. 2000        Replace DATATYPE() with size(/TNAME)  W. Landsman Nov. 2001        Handle NAN values in output display W. Landsman June 2004        Use V6.0 notation  W. Landsman April 2011  ", "DXDYWIDTHTEXTOUTDESCRIPOFFSETimagexcyc", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/inside.html", "inside.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "inside.pro", "", "", " NAME:     INSIDE   PURPOSE:      The purpose of this function is to indicate whether a specified     2D point is inside (returns a 1) a specified 2D polygon or outside     (returns a 0).   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:      Utility.   CALLING SEQUENCE:      result = INSIDE(x, y, xpts, ypts)   INPUTS:      x:        A scalar or vector of the x coordinates of the 2D point(s) to check.     y:        A scalar or vector of the y coordinates of the 2D point(s) to check.     xpts:     The x coordinates of the 2D polygon.     ypts:     The y coordinates of the 2D polygon.   OUTPUTS:      result:  A scalar or vector set to 1 if the point is inside the polygon and to              0 if the point is outside the polygon.   KEYWORDS:      INDEX:   An output keyword. If set to a named variable, will return the indices              of the X and Y points that are inside the polygon.   ALGORITHM:      Based on discussions on the IDL newsgroup (comp.lang.idl-pvwave) and     discussed here:        http://www.idlcoyote.com/tips/point_in_polygon.html      Primarily the work of B�rd Krane and William Connelly.   MODIFICATION HISTORY:      Written by: David W. Fanning, 4 September 2003.     Vectorized the function in accord with William Connelly's suggestions 24 July 2005. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/inside.html#Inside", "Inside", 'routine in <a href="coyote/inside.html">inside.pro</a>', "inside.pro", "", "Inside", "", "INDEXxyxptsypts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/irafdir.html", "irafdir.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "irafdir.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/irafdir.html#irafdir", "irafdir", 'routine in <a href="idlastro/irafdir.html">irafdir.pro</a>', "irafdir.pro", "", "irafdir", " NAME: 	IRAFDIR  PURPOSE: 	Provide a brief description of the IRAF images on a directory  CALLING SEQUENCE: 	IRAFDIR, [ directory, TEXTOUT = ]   OPTIONAL INPUT PARAMETERS: 	DIRECTORY - Scalar string giving file name, disk or directory to 		be searched   OPTIONAL INPUT KEYWORD: 	TEXTOUT - specifies output device (see TEXTOPEN) 		textout=1	TERMINAL using /more option 		textout=2	TERMINAL without /more option 		textout=3	&lt;program&gt;.prt 		textout=4	laser.tmp 		textout=5      user must open file 		textout=7       Append to existing &lt;program&gt;.prt file 		textout = 'filename' (default extension of .prt)   OUTPUT PARAMETERS: 	None   PROCEDURE: 	FINDFILE is used to find all '.imh' files in the directory. 	The object name and image size (NAXIS1, NAXIS2) are extracted 	from the header. Each header is also searched for the parameters 	DATE-OBS (or TDATEOBS), TELESCOP (or OBSERVAT), EXPTIME.   RESTRICTIONS: 	(1) Some fields may be truncated since IRAFDIR uses a fixed format 		output 	(2) No more than 2 dimension sizes are displayed  SYSTEM VARIABLES: 	If 'textout' keyword is not specified to select an output device, 	!TEXTOUT will be the default.    This non-standard system variable 	can be added using the procedure ASTROLIB.   PROCEDURE CALLS: 	EXPAND_TILDE(), FDECOMP, REMCHAR, TEXTOPEN, TEXTCLOSE  MODIFICATION HISTORY: 	Written, K. Venkatakrishna, ST Systems Corp, August 1991 	Work for IRAF V2.11 format   W. Landsman   November 1997 	Assume since V5.5 use file_search W. Landsman   Sep 2006  ", "TEXTOUTdirectory", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/irafrd.html", "irafrd.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "irafrd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/irafrd.html#irafrd", "irafrd", 'routine in <a href="idlastro/irafrd.html">irafrd.pro</a>', "irafrd.pro", "", "irafrd", " NAME:      IRAFRD  PURPOSE:        Read an IRAF (.imh) file into IDL image and header arrays.  EXPLANATION:        The internal IRAF format changed somewhat in IRAF V2.11 to a machine        independent format, with longer filename allocations.  This version        of IRAFRD should be able to read either format.   CALLING SEQUENCE:        IRAFRD, im, hdr, filename, [/SILENT ]   OPTIONAL INPUT:        FILENAME -  Character string giving the name of the IRAF image                header.  If omitted, then program will prompt for the                file name.  IRAFRD always assumes the header file has an                extension '.imh'.    IRAFRD will automatically locate the                 .pix  file containing the data by parsing the contents of                the .imh file.   (If the parse is unsuccesful, then IRAFRD looks                in the same directory as the .imh file.)  OUTPUTS:        IM - array containing image data        HDR - string array containing header.  Basic information in the                IRAF header is converted to a FITS style header   OPTIONAL INPUT KEYWORDS:        /SILENT  - If this keyword is set and non-zero, then messages displayed                while reading the image will be suppressed.   RESTRICTIONS:        (1)  Image size and history sections of the IRAF header are copied                into the FITS header HDR.  Other information (e.g. astrometry)                might not be included unless it is also in the history section        (2)  IRAFRD ignores the node name when deciphering the name of the                IRAF  .pix  file.        (3)  Certain FITS keywords ( DATATYPE, IRAFNAME) may appear more than                once in the output name        (4)  Does not read the DATE keyword for the new (V2.11) IRAF files  NOTES:        IRAFRD obtains dimensions and type of image from the IRAF header.   PROCEDURES CALLED:        FDECOMP, SXADDPAR, SXPAR()   MODIFICATION HISTORY:        Written W. Landsman, STX January 1989        Converted to IDL Version 2.  M. Greason, STX, June 1990        Updated for DecStation compatibility   W. Landsman   March 1992        Don't leave an open LUN  W. Landsman   July 1993        Don't overwrite existing OBS-DATE  W. Landsman  October 1994        Don't bomb on very long FITS headers W. Landsman  April 1995        Work on Alpha/OSF and Linux      W. Landsman     Dec 1995        Remove /VMSIMG keyword, improve efficiency when physical and                image dimensions differ   W. Landsman     April 1996        Don't use FINDFILE (too slow)     W. Landsman     Oct 1996        Read V2.11 files, remove some parameter checks W. Landsman Nov. 1997        Fixed problem reading V2.11 files with long headers Jan. 1998        Accept names with multiple extensions    W. Landsman   April 98        Test for big endian machine under V2.11 format W. Landsman Feb. 1999        Don't read past the end of file for V5.4 compatilibity  W.L.  Jan. 2001        Convert to square brackets W.L   May 2001        Assume since V5.4, remove SPEC_DIR()   W. L.   April 2006  ", "SILENTimhdfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/irafwrt.html", "irafwrt.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "irafwrt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/irafwrt.html#irafwrt", "irafwrt", 'routine in <a href="idlastro/irafwrt.html">irafwrt.pro</a>', "irafwrt.pro", "", "irafwrt", " NAME:      IRAFWRT  PURPOSE:      Write IDL data in IRAF (OIF) format (.imh and .pix files).  EXPLANATION:      Does the reverse of IRAFRD.    IRAFWRT writes the  old  IRAF format      used prior to v2.11.   However, this  old  format is still readable by      the current version of IRAF.   CALLING SEQUENCE:     IRAFWRT, image, hdr, filename, [ PIXDIR = ]   INPUTS:      image - array containing data      hdr   - The  corresponding FITS header.   Use MKHDR to create a minimal              FITS header if one does not already exist.      filename - Scalar string giving the name of the file to be written              Should not include the extension name, which will be supplied              by IRAFWRT.  OUTPUTS:      None   OPTIONAL KEYWORD INPUT:       PIXDIR - scalar string specifying the directory into which to write               the IRAF pixel (.pix) file.   The default is to write the pixel               file to the same directory as the header (.imh) file   SIDE EFFECTS:       Image array and  FITS header are written to IRAF pixel file                'filename'.pix and header file 'filename'.imh   EXAMPLE:        Write an empty 50 x 50 array of all zeros to an IRAF file named 'EMPTY'         IDL&gt; im = intarr( 50, 50)         ;Create empty array        IDL&gt; mkhdr, hdr, im               ;Create a minimal FITS header        IDL&gt; irafwrt, im, hdr, 'empty'    ;Write to a IRAF file named 'empty'   PROCEDURE:        IRAFWRT gets information about the data - image dimensions, size,        datatype, maximum and minimum pixel values - and writes it into        the binary part of the header. The ASCII part of the header        is directly copied after deleting records with certain keywords        A pixel file is created, with a header in the first 1024 bytes   RESTRICTIONS:        (1) The files are not created by IRAFWRT are not identical to those                created by the IRAF routine rfits.    However, the files                created by IRAFWRT appear to be compatible with all the IRAF                routines tested so far.        (2)  IRAFWRT has been tested on a limited number of data types        (3)  IRAFWRT has only been tested on Unix and VMS systems.   PROCEDURES CALLED:        FDECOMP, IS_IEEE_BIG(), ISARRAY(), REPCHR(), STRN(), SXDELPAR, SXPAR()  MODIFICATION HISTORY:        Written K. Venkatakrishna, STX February 1992        VMS compatibility    W. Landsman      April 1992        Work with headers without DATE-OBS or ORIGIN           August 1992        Preserve HISTORY records with other FITS records       March 1995        Fix case where a minimal FITS header supplied          August 1995        Work under Alpha/OSF and Linux                         Dec.   1995        Make sureheader has 80 char lines, use IS_IEEE_BIG()   May    1997        Don't apply strlowcase to .pix name   W. Landsman      April 1999        Work with double precision            W. Landsman      May 1999        Minimize use of obsolete !ERR         W. Landsman      Feb. 2000        Assume since V5.5, remove VMS support W. Landsman       Sep. 2006  ", "PIXDIRimagehdfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/is_ieee_big.html", "is_ieee_big.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "is_ieee_big.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/is_ieee_big.html#is_ieee_big", "is_ieee_big", 'routine in <a href="idlastro/is_ieee_big.html">is_ieee_big.pro</a>', "is_ieee_big.pro", "", "is_ieee_big", " NAME: 	IS_IEEE_BIG  PURPOSE: 	Determine if the current machine uses IEEE, big-endian numbers.  EXPLANATION:        (Big endian implies that byteorder XDR conversions are no-ops).  CALLING SEQUENCE: 	flag = is_ieee_big()  INPUT PARAMETERS:        None  RETURNS:        1 if the machine appears to be IEEE-compliant, 0 if not.  COMMON BLOCKS: 	None.  SIDE EFFECTS: 	None  RESTRICTIONS:  PROCEDURE:        The first byte of the two-byte representation of 1 is examined.        If it is zero, then the data is stored in big-endian order.  MODIFICATION HISTORY:        Written 15-April-1996 by T. McGlynn for use in MRDFITS. 	13-jul-1997	jkf/acc	- added calls to check_math to avoid 				  underflow messages in V5.0 on Win32 (NT). 	Converted to IDL V5.0   W. Landsman   September 1997        Follow RSI and just do a single test  W. Landsman   April 2003  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jhuapl/isarray.html", "isarray.pro", '.pro file in <a href="idlastro/jhuapl/dir-overview.html">idlastro/jhuapl/ directory</a>', "isarray.pro", "", "", " NAME:        ISARRAY  PURPOSE:        Tests if the argument is an array.  CATEGORY:  CALLING SEQUENCE:        flag = isarray(a)  INPUTS:        a = variable to test.                                in  KEYWORD PARAMETERS:  OUTPUTS:        flag = test result: 0 if not array, else non-zero.   out  COMMON BLOCKS:  NOTES:  MODIFICATION HISTORY:        R. Sterner  20 Mar, 1986.        Checked for undefined variables.  RES 25 Aug, 1989.        Johns Hopkins Applied Physics Lab.   Copyright (C) 1986, Johns Hopkins University/Applied Physics Laboratory  This software may be used, copied, or redistributed as long as it is not  sold and this copyright notice is reproduced on each copy made.  This  routine is provided as is without any express or implied warranties  whatsoever.  Other limitations apply as described in the file disclaimer.txt. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/isarray.html#isarray", "isarray", 'routine in <a href="idlastro/jhuapl/isarray.html">isarray.pro</a>', "isarray.pro", "", "isarray", "", "helpa", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ismeuv.html", "ismeuv.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ismeuv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ismeuv.html#ismeuv", "ismeuv", 'routine in <a href="idlastro/ismeuv.html">ismeuv.pro</a>', "ismeuv.pro", "", "ismeuv", " NAME:        ISMEUV  PURPOSE:        Compute the continuum interstellar EUV optical depth   EXPLANATION:        The EUV optical depth is computed from the photoionization of        hydrogen and helium.   CALLING SEQUENCE:        tau = ISMEUV( wave, Hcol, [ HeIcol, HeIIcol, /Fano ]   INPUTS:        wave - Vector of wavelength values (in Angstroms).   Useful range is                40 - 912 A; at shorter wavelengths metal opacity should be                considered, at longer wavelengths there is no photoionization.        Hcol - Scalar specifying interstellar hydrogen column density in cm-2.                  Typical values are 1E17 to 1E20.   OUTPUT:        tau - Vector giving resulting optical depth, same number of elements                as wave, non-negative values.   To obtain the attenuation of                an input spectrum, multiply by exp(-tau).   OPTIONAL INPUTS:        HeIcol - Scalar specifying neutral helium column density in cm-2.                Default is 0.1*Hcol (10% of hydrogen column)        HeIIcol - Scalar specifying ionized helium column density in cm-2                Default is 0 (no HeII)   OPTIONAL INPUT KEYWORDS:        /FANO - If this keyword is set and non-zero, then the 4 strongest                auto-ionizing resonances of He I are included.   The shape                of these resonances is given by a Fano profile - see Rumph,                Bowyer, & Vennes 1994, AJ, 107, 2108.  If these resonances are                included then the input wavelength vector should have                a fine (&gt;~0.01 A) grid between 190 A and 210 A, since the                resonances are very narrow.  EXAMPLE:        (1) One has a model EUV spectrum with wavelength, w (in Angstroms) and        flux,f .  Plot the model flux after attenuation by 1e18 cm-2 of HI,        with N(HeI)/N(HI) = N(HeII)/N(HI) = 0.05         IDL&gt; Hcol = 1e18        IDL&gt; plot, w, f*exp(-ismeuv(w, Hcol, .05*Hcol, .05*Hcol))         (2)  Plot the cross-section of HeI from 180 A to 220 A for 1e18 cm-2                of HeI, showing the auto-ionizing resonances.   This is                Figure 1 in Rumph et al. (1994)         IDL&gt; w = 180 + findgen(40000)*0.001        ;Need a fine wavelength grid        IDL&gt; plot, w, ismeuv(w, 0, 1e18, /Fano)   NOTES:        (1) The more complete program  ismtau.pro at            http://hea-www.harvard.edu/PINTofALE/pro/ extends this work            to shorter wavelengths and includes metal and molecular hydrogen            opacities        (2) This program only compute continuum opacities, and for example,            the He ionization edges at 504 A  and 228 A are blurred by            converging line absorptions (Dupuis et al. 1995. ApJ, 455, 574)   HISTORY:        Written,    W. Landsman                  October, 1994        Adapted from ism.c at anonymous ftp site cea-ftp.cea.berkeley.edu        by Pat Jelinsky, Todd Rumph & others.        Converted to IDL V5.0   W. Landsman   September 1997        Avoid underflow messages, support double prec.  W. Landsman October 2003  ", "FanowaveHcolHeIcolHeIIcol", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/jd2time.html", "jd2time.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "jd2time.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/jd2time.html#JD2Time", "JD2Time", 'routine in <a href="coyote/jd2time.html">jd2time.pro</a>', "jd2time.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "JD2Time", " The purpose of this function is to convert a Julian day number into  a time string of the form  16 Mar 2009 .   ", "DAY        The day of the month as an integer.  MONTH        The month as an integer.  YEAR        The year as an integer.   jdnumber       A Julian day number or array of Julian day numbers. If absent,        today's current Julian day number.  jdyear       The year for which the Julian day number applies. If absent, the current year.   ", "Utilities", "     Change History: <span class= code-output >  Written by: David W. Fanning, 25 June 2009.</span> <span class= code-output >  Added DAY, MONTH, and YEAR keywords. 18 Sept 2012. DWF.</span>       Copyright (c) 2009-2012, Fanning Software Consulting, Inc.      Used like the IDL AXIS command:   <span class= code-prompt >IDL&gt;</span> cgPlot, cgDemoData(1), YStyle=8, Position=[0.1, 0.1, 0.85, 0.9], /Window   <span class= code-prompt >IDL&gt;</span> cgAxis, /YAxis, Color='red', YRange=[-500, 500], /Save, /Window      A scalar or vector of time strings of the form  16 Mar 2009 15:34:26 .   ");
  
  

libdata[libdataItem++] = new Array("idlastro/jdcnv.html", "jdcnv.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "jdcnv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jdcnv.html#JDCNV", "JDCNV", 'routine in <a href="idlastro/jdcnv.html">jdcnv.pro</a>', "jdcnv.pro", "", "JDCNV", " NAME: 	JDCNV  PURPOSE: 	Converts Gregorian dates to Julian days   EXPLANATION:        For IDL versions V5.1 or greater, this procedure is superceded by        JULDAY() function in the standard IDL distribution.   Note, however,        that prior to V5.1 there wasa bug in JULDAY() that gave answers off        by 0.5 days.   CALLING SEQUENCE: 	JDCNV, YR, MN, DAY, HR, JULIAN   INPUTS:  	YR = Year, integer scalar or vector 	MN = Month  integer (1-12) scalar or vector 	DAY = Day   integer 1-31) scalar or vector 	HR  = Hours and fractions of hours of universal time (U.T.), scalar               or vector   OUTPUTS: 	JULIAN = Julian date (double precision)   EXAMPLE: 	To find the Julian Date at 1978 January 1, 0h (U.T.)  	IDL&gt; JDCNV, 1978, 1, 1, 0., JULIAN  	will give JULIAN = 2443509.5  NOTES: 	(1) JDCNV will accept vector arguments 	(2) JULDATE is an alternate procedure to perform the same function   REVISON HISTORY: 	Converted to IDL from Don Yeomans Comet Ephemeris Generator, 	B. Pfarr, STX, 6/15/88 	Converted to IDL V5.0   W. Landsman   September 1997        Added checks on valid month, day ranges W. Landsman July 2008  ", "YRMNDAYHRJULIAN", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./jimage.html", "jimage.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "jimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./jimage.html#jimage", "jimage", 'routine in <a href="./jimage.html">jimage.pro</a>', "jimage.pro", "", "jimage", "", "_EXTRAim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jplephinterp.html", "jplephinterp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "jplephinterp.pro", "", "", " NAME:    JPLEPHINTERP   AUTHOR:    Craig B. Markwardt, NASA/GSFC Code 662, Greenbelt, MD 20770    craigm@lheamail.gsfc.nasa.gov    UPDATED VERSIONs can be found on my WEB PAGE:       http://cow.physics.wisc.edu/~craigm/idl/idl.html   PURPOSE:    Interpolate position and motion of planetary bodies (JPL Ephemeris)   MAJOR TOPICS:    Planetary Orbits, Interpolation   CALLING SEQUENCE:    JPLEPHINTERP, INFO, RAWDATA, T, X, Y, Z, [VX, VY, VZ, /EARTH, /SUN,          OBJECTNAME=, CENTER=, TBASE=, POSUNITS=, VELUNITS= ]   DESCRIPTION:     JPLEPHINTERP interpolates the JPL DE200 or DE405 planetary    ephemeris to find the positions and motions of planetary bodies.     This routine is the second stage of a two-stage process to    interpolate the JPL ephemeris.  In this first stage, the file is    opened using JPLEPHREAD, and the relevant portions of the table    are read and stored into the two variables INFO and RAWDATA.  In    the second stage, the user actually interpolates the ephemeris for    the desired bodies and to the desired ephemeris time using    JPLEPHINTERP.     The only independent variable which must be specified is T, the    ephemeris time.  For low to moderate accuracy applications, T is    simply the conventional calendar date, expressed in Julian days.    See below for high precision applications.     Upon output, the position components of the desired body are    returned in parameters X, Y and Z, and if requested velocity    components are returned in parameters VX, VY and VZ.  Coordinates    are referred to the ephemeris's coordinate system: FK5 for    JPL-DE200 and ICRS for JPL-DE405.  By default, the origin of    coordinates is the solar system barycenter (SSB), unless another    origin is selected using the CENTER keyword.     Users must set the VELOCITY keyword to generate body velocities.    By default they are not generated.     Users can select the desired body by using either the EARTH or SUN    keywords, or the OBJECTNAME keyword.     By default, positions are returned in units of KM and velocities    in units of KM/DAY.  However, the output units are selectable by    setting the POSUNITS and VELUNITS keywords.   High Precision Applications     If the required precision is finer than a few hundred meters, the    user must be aware that the formal definition of the ephemeris    time is the coordinate time of a clock placed at the solar system    barycenter (SSB).  If the user's time is measured by a clock    positioned elsewhere, then various corrections must be applied.    Usually, the most significant correction is that from the    geocenter to the SSB (see Fairhead & Bretagnon 1990; Fukushima    1995).  Not applying this correction creates an error with    amplitude ~170 nano-light-seconds ( = 50 m) on the earth's    position.  (see TDB2TDT)     For high precision, the user should also specify the TBASE    keyword.  TBASE should be considered a fixed epoch with respect to    which T is measured; T should be small compared to TBASE.    Internally, subtraction of large numbers occurs with TBASE first,    so truncation error is minimized by specifying TBASE.   Nutations and Librations     This routine also provides information about earth nutations and    lunar librations, which are stored in the JPL ephemeris tables.    The POSUNITS and VELUNITS keywords do not affect these    computations.     Lunar librations in the form of three Euler angles are returned in    X, Y, Z, in units of radians, and their time derivatives are    returned in VX, VY, and VZ in units of radians per day.     The earth nutation angles psi (nutation in longitude) and epsilon    (nutation in obliquity) are returned in X and Y, in units of    radians.  Their time derivatives are returned in VX and VY    respectively.  The quantities returned in Z and VZ are undefined.   Verification     The precision routine has been verified using JPLEPHTEST, which is    similar to the original JPL program EPHTEST.  For years 1950 to    2050, JPLEPHINTERP reproduces the original JPL ephemeris to within    1 centimeter.   Custom Ephemerides     It is possible to make custom ephemerides using JPLEPHMAKE, or to    augmented an existing ephemeris with additional data.  In the    former case JPLEPHINTERP should automatically choose the correct    object from the table and interpolate it appropriately.     For augmented ephemerides, the object can be specified by name,    which works as expected, or by number, which has a special    behavior.  For augmented files only, the new objects begin at    number 100.   PARAMETERS:     INFO - structure returned by JPLEPHREAD.  Users should not modify           this structure.     RAWDATA - raw data array returned by JPLEPHREAD.  Users should not              modify this data array.     T - ephemeris time(s) of interest, relative to TBASE (i.e. the        actual interpolation time is (T+TBASE)).  May be a scalar or        vector.     X, Y, Z - upon return, the x-, y- and z-components of the body              position are returned in these parameters.  For              nutations and librations see above.     VX, VY, VZ - upon return, the x-, y- and z-components of the body                 velocity are returned in these parameters, if the                 VELOCITY keyword is set.  For nutations and                 librations see above.   KEYWORD PARAMETERS:     EARTH, SUN - set one of these keywords if the desired body is the                 earth or the sun.  One of EARTH, SUN or OBJECTNAME                 must be specified.     OBJECTNAME - a scalar string or integer, specifies the planetary                 body of interest.  May take any one of the following                 integer or string values.                     1 - 'MERCURY'     9 - 'PLUTO'                    2 - 'VENUS'      10 - 'MOON'  (earth's moon)                    3 - 'EARTH'      11 - 'SUN'                    4 - 'MARS'       12 - 'SOLARBARY' or 'SSB' (solar system barycenter)                    5 - 'JUPITER'    13 - 'EARTHBARY' or 'EMB' (earth-moon barycenter)                    6 - 'SATURN'     14 - 'NUTATIONS' (see above)                    7 - 'URANUS'     15 - 'LIBRATIONS' (see above)                    8 - 'NEPTUNE'                  For custom ephemerides, the user should specify the                 object name or number.                  For augmented ephemerides, the user should specify                 the name.  If the number is specified, then numbers                 1-15 have the above meanings, and new objects are                 numbered starting at 100.     CENTER - a scalar string or integer, specifies the origin of             coordinates.  See OBJECTNAME for allowed values.             Default: 12 (Solar system barycenter)     VELOCITY - if set, body velocities are generated and returned in               VX, VY and VZ.               Default: unset (no velocities)     POSUNITS - a scalar string specifying the desired units for X, Y,               and Z.  Allowed values:                  'KM' - kilometers  (default)                  'CM' - centimeters                  'AU' - astronomical units                  'LT-S' - light seconds                If angles are requested, this keyword is ignored and                the units are always 'RADIANS'.     VELUNITS - a scalar string specifying the desired units for VX, VY               and VZ.  Allowed values:                  'KM/DAY' - kilometers per day  (default)                  'KM/S' - kilometers per second                  'CM/S' - centimeters per second                  'LT-S/S' - light seconds per second                  'AU/DAY' - astronomical units per day     TBASE - a scalar or vector, specifies a fixed epoch against wich T            is measured.  The ephemeris time will be (T+TBASE).  Use            this keyword for maximum precision.   EXAMPLE:     Find position of earth at ephemeris time 2451544.5 JD.  Units are    in Astronomical Units.     JPLEPHREAD, 'JPLEPH.200', pinfo, pdata, [2451544D, 2451545D]     JPLEPHINTERP, pinfo, pdata, 2451544.5D, xearth, yearth, zearth, $                  /EARTH, posunits='AU'   REFERENCES:     AXBARY, Arnold Rots.       ftp://heasarc.gsfc.nasa.gov/xte/calib_data/clock/bary/     HORIZONS, JPL Web-based ephermis calculator (Ephemeris DE406)       http://ssd.jpl.nasa.gov/horizons.html     Fairhead, L. & Bretagnon, P. 1990, A&A, 229, 240     Fukushima, T. 1995, A&A, 294, 895     Standish, E.M. 1982,  Orientation of the JPL Ephemerides,       DE200/LE200, to the Dynamical Equinox of J2000 , Astronomy &       Astrophysics, vol. 114, pp. 297-302.     Standish, E.M.: 1990,  The Observational Basis for JPL's DE200,       the planetary ephemeris of the Astronomical Almanac , Astronomy       & Astrophysics, vol. 233, pp. 252-271.   SEE ALSO    JPLEPHREAD, JPLEPHINTERP, JPLEPHTEST, TDB2TDT, JPLEPHMAKE   MODIFICATION HISTORY:    Written and Documented, CM, Jun 2001    Corrected bug in name conversion of NUTATIONS and LIBRATIONS, 18      Oct 2001, CM    Added code to handle custom-built ephemerides, 04 Mar 2002, CM    Fix bug in evaluation of velocity (only appears in highest order      polynomial term); JPLEPHTEST verification tests still pass;      change is of order &lt; 0.5 cm in position, 22 Nov 2004, CM    Perform more validity checking on inputs; and more informative      outputs, 09 Oct 2008, CM    Allow SSB and EMB as shortcuts for solar system and earth-moon      bary center, 15 Oct 2008, CM    TBASE now allowed to be a vector or scalar, 01 Jan 2009, CM    VELFAC keyword gives scale factor between POSUNITS and VELUNITS,      12 Jan 2009, CM    $Id: jplephinterp.pro,v 1.18 2009/01/13 04:53:26 craigm Exp $   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jplephinterp.html#jplephinterp_calc", "jplephinterp_calc", 'routine in <a href="idlastro/jplephinterp.html">jplephinterp.pro</a>', "jplephinterp.pro", "", "jplephinterp_calc", "", "velocitytbaseinforawobjtxyzvxvyvz", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/jplephinterp.html#jplephinterp_denew", "jplephinterp_denew", 'routine in <a href="idlastro/jplephinterp.html">jplephinterp.pro</a>', "jplephinterp.pro", "", "jplephinterp_denew", "", "velocitytbaseinforawobjtxyzvxvyvz", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/jplephinterp.html#jplephinterp", "jplephinterp", 'routine in <a href="idlastro/jplephinterp.html">jplephinterp.pro</a>', "jplephinterp.pro", "", "jplephinterp", "", "earthsunobjectnamevelocitycentertbaseposunitsvelunitspos_vel_factorxobjnumdecode_objinforawtxyzvxvyvz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jplephread.html", "jplephread.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "jplephread.pro", "", "", " NAME:    JPLEPHREAD   AUTHOR:    Craig B. Markwardt, NASA/GSFC Code 662, Greenbelt, MD 20770    craigm@lheamail.gsfc.nasa.gov    UPDATED VERSIONs can be found on my WEB PAGE:       http://cow.physics.wisc.edu/~craigm/idl/idl.html   PURPOSE:    Open and read JPL DE200 or DE405 Ephemeride FITS File   MAJOR TOPICS:    Planetary Orbits, Interpolation   CALLING SEQUENCE:    JPLEPHREAD, FILENAME, INFO, RAWDATA, JDLIMITS, STATUS=, ERRMSG=   DESCRIPTION:     JPLEPHREAD opens and reads the JPL DE200 or DE405 planetary    ephemerides, as available in FITS format.  The user must have the    IDL Astronomy Library installed to use this routine.     This routine is the initialization stage of a two-stage process to    interpolate the JPL ephemeris.  In this first stage, the file is    opened, and the relevant portions of the table are read and stored    into the two variables INFO and RAWDATA.  In the second stage, the    user actually interpolates the ephemeris for the desired bodies    and to the desired ephemeris time using JPLEPHINTERP.     Users must decide ahead of time the approximate dates of interest,    and pass this range in the JDLIMITS parameter.  Any date covered    by the ephemeris is valid.     JPLEPHREAD is able to read files of the following format:      DE200 - Chebyshev - FITS format - Note 1      DE405 - Chebyshev - FITS format - Note 1      DE200 - Taylor    - FITS format - Note 2     Note 1 - Chebyshev formatted FITS files are available in the             AXBARY package by Arnold Rots, found here:               ftp://heasarc.gsfc.nasa.gov/xte/calib_data/clock/bary/             or at the Markwardt FTP site:               ftp://cow.physics.wisc.edu/pub/craigm/bary/     Note 2 - Taylor-series based ephemerides have been available for             years in the FTOOLS / LHEASOFT package produced by NASA's             Goddard Space Flight Center.  The original file is             de200_new.fits, which covers the years 1959-2000,             inclusive.  A newer file is named             de200_1950-2050_v2.fits, and covers the years 1959-2050.             See Markwardt FTP site for these files.   PARAMETERS:     FILENAME - name of ephemeris file (scalar string).     INFO - upon completion, information about the ephemeris data is           returned in this parameter in the form of a structure.           Users must not modify INFO, although several fields are           useful and may be accessed read-only:               TSTART/TSTOP (start and stop time of data in Julian                             days);               C (speed of light in km/s);               DENUM (development ephemeris number [200 or 405])               AU (1 astronomical unit, in units of light-seconds)     RAWDATA - upon completion, raw ephemeris data is returned in this              parameter.  Users are not meant to access this data              directly, but rather to pass it to JPLEPHINTERP.     JDLIMITS - a two-element vector (optional), describing the desired               time range of interest.  The vector should have the               form [TSTART, TSTOP], where TSTART and TSTOP are the               beginning and ending times of the range, expressed in               Julian days.               Default: entire table is read (note, this can be               several megabytes)   KEYWORD PARAMETERS:     STATUS - upon completion, a value of 1 indicates success, and 0             indicates failure.     ERRMSG - upon completion, an error message is returned in this             keyword.  If there were no errors, then the returned             value is the empty string, ''.   EXAMPLE:     Find position of earth at ephemeris time 2451544.5 JD.  Units are    in Astronomical Units.     JPLEPHREAD, 'JPLEPH.200', pinfo, pdata, [2451544D, 2451545D]     JPLEPHINTERP, pinfo, pdata, 2451544.5D, xearth, yearth, zearth, $                  /EARTH, posunits='AU'   REFERENCES:     AXBARY, Arnold Rots.       ftp://heasarc.gsfc.nasa.gov/xte/calib_data/clock/bary/     HORIZONS, JPL Web-based ephermis calculator (Ephemeris DE406)       http://ssd.jpl.nasa.gov/horizons.html     JPL Export Ephemeris FTP Site       ftp://ssd.jpl.nasa.gov/pub/eph/planets/       (ephemeris files are available here, however, they must be       converted to FITS format using the  bin2eph  utility found in       AXBARY)     JPL Export Ephemeris CD-ROM - Ordering Information       http://www.willbell.com/software/jpl.htm     Standish, E.M. 1982,  Orientation of the JPL Ephemerides,       DE200/LE200, to the Dynamical Equinox of J2000 , Astronomy &       Astrophysics, vol. 114, pp. 297-302.     Standish, E.M.: 1990,  The Observational Basis for JPL's DE200,       the planetary ephemeris of the Astronomical Almanac , Astronomy       & Astrophysics, vol. 233, pp. 252-271.   SEE ALSO    JPLEPHREAD, JPLEPHINTERP, JPLEPHTEST  PROCEDURES USED:      FXBCLOSE, FXBOPEN, FXPAR(),   MODIFICATION HISTORY:    Written and Documented, CM, Jun 2001    Use GETTOK() instead of STR_SEP()  W. Landsman  July 2002    $Id: jplephread.pro,v 1.6 2001/07/01 03:32:02 craigm Exp $   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jplephread.html#jplephpar", "jplephpar", 'routine in <a href="idlastro/jplephread.html">jplephread.pro</a>', "jplephread.pro", "", "jplephpar", "", "defaultfatalheaderparname", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/jplephread.html#jplephval", "jplephval", 'routine in <a href="idlastro/jplephread.html">jplephread.pro</a>', "jplephread.pro", "", "jplephval", "", "defaultfatalnamesvaluesname", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/jplephread.html#jplephread", "jplephread", 'routine in <a href="idlastro/jplephread.html">jplephread.pro</a>', "jplephread.pro", "", "jplephread", "", "statuserrmsgfilenameinforawjdlimits", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jplephtest.html", "jplephtest.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "jplephtest.pro", "", "", " NAME:    JPLEPHTEST   AUTHOR:    Craig B. Markwardt, NASA/GSFC Code 662, Greenbelt, MD 20770    craigm@lheamail.gsfc.nasa.gov    UPDATED VERSIONs can be found on my WEB PAGE:       http://cow.physics.wisc.edu/~craigm/idl/idl.html   PURPOSE:    Test JPLEPHTEST with JPL test data set   MAJOR TOPICS:    Planetary Orbits, Interpolation   CALLING SEQUENCE:    JPLEPHTEST, EPHFILE, TESTFILE   DESCRIPTION:     JPLEPHTEST tests the JPLEPHINTERP procedure for precision.  In    order to function, you must have a JPL ephemeris test data set.    The test data set testpo.405 is available in    ftp://idlastro.gsfc.nasa.gov/pub/data     The procedure opens and reads the test set, which contains    precomputed data.  Every tenth value is printed on the screen.    Any deviations that exceed 1.5d-13 AU = 1.5 cm are reported.     The columns are labelled according to the input file, except for    the final column, which is the deviation between the input file    and the computed value.   PARAMETERS:     EPHFILE - a scalar string, specifies the name of the ephemeris              file, in FITS format.    JPLEPHTEST will look in the directory              $ASTRO_DATA for the file if it is not in the current directory.     TESTFILE - a scalar string, specifies JPL test data set to compare               against.   JPLEPHTEST will look in the directory              $ASTRO_DATA for the file if it is not in the current directory.   EXAMPLE:     Test JPL DE200 and DE405 ephemerides.  Assumes files are in the    current directory.     JPLEPHTEST, 'JPLEPH.200', 'testpo.200'    JPLEPHTEST, 'JPLEPH.405', 'testpo.405'   REFERENCES:     JPL Export Ephemeris FTP Site       ftp://ssd.jpl.nasa.gov/pub/eph/planets/       (see test-data/ for test data sets)     HORIZONS, JPL Web-based ephermis calculator (Ephemeris DE406)       http://ssd.jpl.nasa.gov/horizons.html   SEE ALSO    JPLEPHREAD, JPLEPHINTERP, JPLEPHTEST   MODIFICATION HISTORY:    Written and Documented, CM, Jun 2001    Removed TRANSREAD, improved output, improved docs, CM, 9 Jul 2001    $Id: jplephtest.pro,v 1.4 2001/07/20 13:29:53 craigm Exp $   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jplephtest.html#jplephtest", "jplephtest", 'routine in <a href="idlastro/jplephtest.html">jplephtest.pro</a>', "jplephtest.pro", "", "jplephtest", "", "pauseephfiletestfile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jprecess.html", "jprecess.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "jprecess.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jprecess.html#jprecess", "jprecess", 'routine in <a href="idlastro/jprecess.html">jprecess.pro</a>', "jprecess.pro", "", "jprecess", " NAME:       JPRECESS  PURPOSE:       Precess astronomical coordinates from B1950 to J2000  EXPLANATION:       Calculate the mean place of a star at J2000.0 on the FK5 system from the       mean place at B1950.0 on the FK4 system.        Use BPRECESS for the reverse direction J2000 ==&gt; B1950  CALLING SEQUENCE:       jprecess, ra, dec, ra_2000, dec_2000, [ MU_RADEC = , PARALLAX =                RAD_VEL =, EPOCH =   ]   INPUTS:       RA,DEC - input B1950 right ascension and declination in *degrees*.                Scalar or vector   OUTPUTS:       RA_2000, DEC_2000 - the corresponding J2000 right ascension and                declination in *degrees*.   Same number of elements as RA,DEC                but always double precision.   OPTIONAL INPUT-OUTPUT KEYWORDS       MU_RADEC - 2xN element double precision vector containing the proper                   motion in seconds of arc per tropical *century* in right                   ascension and declination.       PARALLAX - N_element vector giving stellar parallax (seconds of arc)       RAD_VEL  - N_element vector giving radial velocity in km/s         The values of MU_RADEC, PARALLAX, and RADVEL will all be modified        upon output to contain the values of these quantities in the        J2000 system.    Values will also be converted to double precision.        The parallax and radial velocity will have a very minor influence on        the J2000 position.         EPOCH - scalar giving epoch of original observations, default 1950.0d            This keyword value is only used if the MU_RADEC keyword is not set.   NOTES:        The algorithm is taken from the Explanatory Supplement to the        Astronomical Almanac 1992, page 184.        Also see Aoki et al (1983), A&A, 128,263         JPRECESS distinguishes between the following two cases:        (1) The proper motion is known and non-zero        (2) the proper motion is unknown or known to be exactly zero (i.e.                extragalactic radio sources).   In this case, the algorithm                in Appendix 2 of Aoki et al. (1983) is used to ensure that                the output proper motion is  exactly zero.    Better precision                can be achieved in this case by inputting the EPOCH of the                original observations.         The error in using the IDL procedure PRECESS for converting between        B1950 and J2000 can be up to 12 , mainly in right ascension.   If        better accuracy than this is needed then JPRECESS should be used.   EXAMPLE:        The SAO catalogue gives the B1950 position and proper motion for the        star HD 119288.   Find the J2000 position.            RA(1950) = 13h 39m 44.526s      Dec(1950) = 8d 38' 28.63''           Mu(RA) = -.0259 s/yr      Mu(Dec) = -.093 ''/yr         IDL&gt; mu_radec = 100D* [ -15D*.0259, -0.093 ]        IDL&gt; ra = ten(13,39,44.526)*15.D        IDL&gt; dec = ten(8,38,28.63)        IDL&gt; jprecess, ra, dec, ra2000, dec2000, mu_radec = mu_radec        IDL&gt; print, adstring(ra2000, dec2000,2)                ===&gt; 13h 42m 12.740s    +08d 23' 17.69    RESTRICTIONS:        When transferring individual observations, as opposed to catalog mean        place, the safest method is to tranform the observations back to the        epoch of the observation, on the FK4 system (or in the system that was        used to to produce the observed mean place), convert to the FK5 system,        and transform to the the epoch and equinox of J2000.0  -- from the        Explanatory Supplement (1992), p. 180   REVISION HISTORY:        Written,    W. Landsman                September, 1992        Corrected a couple of typos in M matrix   October, 1992        Vectorized, W. Landsman                   February, 1994        Implement Appendix 2 of Aoki et al. (1983) for case where proper        motion unknown or exactly zero     W. Landsman    November, 1994        Converted to IDL V5.0   W. Landsman   September 1997        Fixed typo in updating proper motion   W. Landsman   April 1999        Make sure proper motion is floating point  W. Landsman December 2000        Use V6.0 notation  W. Landsman Mar 2011  ", "MU_RADECPARALLAXRAD_VELEPOCHradecra_2000dec_2000", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/juldate.html", "juldate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "juldate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/juldate.html#JULDATE", "JULDATE", 'routine in <a href="idlastro/juldate.html">juldate.pro</a>', "juldate.pro", "", "JULDATE", " NAME:      JULDATE  PURPOSE:      Convert from calendar to Reduced Julian Date   EXPLANATION:      Julian Day Number is a count of days elapsed since Greenwich mean noon      on 1 January 4713 B.C.  The Julian Date is the Julian day number      followed by the fraction of the day elapsed since the preceding noon.       This procedure duplicates the functionality of the JULDAY() function in      in the standard IDL distribution, but also allows interactive input and      gives output as Reduced Julian date (=JD - 2400000.)  CALLING SEQUENCE:      JULDATE, /PROMPT           ;Prompt for calendar Date, print Julian Date                or      JULDATE, date, jd   INPUT:      DATE -  3 to 6-element vector containing year,month (1-12),day, and               optionally hour, minute, and second all specified as numbers               (Universal Time).   Year should be supplied with all digits.               Years B.C should be entered as negative numbers (and note that               Year 0 did not exist).  If Hour, minute or seconds are not               supplied, they will default to 0.    OUTPUT:        JD - Reduced Julian date, double precision scalar.  To convert to                Julian Date, add 2400000.   JULDATE will print the value of                JD at the terminal if less than 2 parameters are supplied, or                if the /PROMPT keyword is set    OPTIONAL INPUT KEYWORD:        /PROMPT - If this keyword is set and non-zero, then JULDATE will prompt                for the calendar date at the terminal.    RESTRICTIONS:        The procedure HELIO_JD can be used after JULDATE, if a heliocentric        Julian date is required.    EXAMPLE:        A date of 25-DEC-2006 06:25 UT may be expressed as either         IDL&gt; juldate, [2006, 12, 25, 6, 25], jd        IDL&gt; juldate, [2006, 12, 25.2673611d], jd         In either case, one should obtain a Reduced Julian date of        JD = 54094.7673611    PROCEDURE USED:        GETOPT()   REVISION HISTORY        Adapted from IUE RDAF (S. Parsons)                      8-31-87        Algorithm from Sky and Telescope April 1981        Added /PROMPT keyword, W. Landsman    September 1992        Converted to IDL V5.0   W. Landsman   September 1997        Make negative years correspond to B.C. (no year 0), work for year 1582        Disallow 2 digit years.    W. Landsman    March 2000  ", "PROMPTDATEJD", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html", "kahuna _before_non-comment_removal.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "kahuna _before_non-comment_removal.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    KAHUNA   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image. Instead    of scanning rows to crop, scans in a circle. Using solar centers, identifies fiducial positions.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html">kahuna _before_non-comment_removal.pro</a>', "kahuna _before_non-comment_removal.pro", "", "makelimbstrips", "       Makes limb strips from full-length strips   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xstrips           Structure containing row strips  ystrips           Structure containing column strips   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html">kahuna _before_non-comment_removal.pro</a>', "kahuna _before_non-comment_removal.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html#whichcropmethod", "whichcropmethod", 'routine in <a href="code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html">kahuna _before_non-comment_removal.pro</a>', "kahuna _before_non-comment_removal.pro", "", "whichcropmethod", "       Crops differently according to which region is selected.   ", "region           1) main sun            2) 50% brightness sun            3) 25% brightness sun  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html">kahuna _before_non-comment_removal.pro</a>', "kahuna _before_non-comment_removal.pro", "", "makestrips", "       Only saves 5 strips centered around the solar diameter to reduce the amount of limb-            darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.   ", "region       Which sun out of the three to find the center of. Defaults to the brightest sun  time       Prints elapsed time  thresh       Threshold used to select pixels  xstrips       Structure containing row strips  ystrips       Structure containing column strips   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html#circscancrop", "circscancrop", 'routine in <a href="code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html">kahuna _before_non-comment_removal.pro</a>', "kahuna _before_non-comment_removal.pro", "", "circscancrop", "       Quickly finds the center of the main sun, scans in a circle, and locates the two secondary        suns' centers. Crops either of the secondary suns based on what region specified.   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Print the elapsed time  mainxpos           X position of 100% brightness sun to scan in a circle around  mainypos           Y position of 100% brightness sun to scan in a circle around  image           Cropped area  thresh           Threshold used in finding center  xpos           Computed X position of center  ypos           Computed Y position of center  xoffset           X offset of cropped region's bottom left corner  yoffset           Y offset of cropped region's bottom left corner   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html">kahuna _before_non-comment_removal.pro</a>', "kahuna _before_non-comment_removal.pro", "", "limbfit", "       Uses the data from makelimbstrips and fits an n-th order polynomial to the limb to find where        it crosses the threshold.   ", "plot           Makes some nice plots  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xpos           X center  ypos           Y center   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html#getstruct", "getstruct", 'routine in <a href="code_snapshots/obsolete_code/kahuna _before_non-comment_removal.html">kahuna _before_non-comment_removal.pro</a>', "kahuna _before_non-comment_removal.pro", "", "getstruct", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "time           Outputs how much time the program takes  struct           Structure containing the centers and cropped images of all 3 suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna copy.html", "kahuna copy.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "kahuna copy.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    KAHUNA   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image. Instead    of scanning rows to crop, scans in a circle. Using solar centers, identifies fiducial positions.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna copy.html#kahuna", "kahuna", 'routine in <a href="code_snapshots/obsolete_code/kahuna copy.html">kahuna copy.pro</a>', "kahuna copy.pro", "", "kahuna", "       This version uses limb fitting opposed to masking (tricenter).   ", "time           Outputs how much time the program takes   ", "          -1", "       Find and ISOLATE fiducials, not just mask them out         Ignore center if sun is too close to edge (or if when cropping, we cro outside wholeimage)         Use 25% of median(image)        Um, let's not (Apr24)         Make sure program doesn't freak out when sun isn't in POV   ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html", "kahuna.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "kahuna.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    KAHUNA   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image. Instead    of scanning rows to crop, scans in a circle. Using solar centers, identifies fiducial positions.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "makelimbstrips", "       Makes limb strips from full-length strips   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xstrips           Structure containing row strips  ystrips           Structure containing column strips   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#whichcropmethod", "whichcropmethod", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "whichcropmethod", "       Crops differently according to which region is selected.   ", "region           1) main sun            2) 50% brightness sun            3) 25% brightness sun  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "makestrips", "       Only saves 5 strips centered around the solar diameter to reduce the amount of limb-            darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.   ", "region       Which sun out of the three to find the center of. Defaults to the brightest sun  time       Prints elapsed time  thresh       Threshold used to select pixels  xstrips       Structure containing row strips  ystrips       Structure containing column strips   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#circscancrop", "circscancrop", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "circscancrop", "       Quickly finds the center of the main sun, scans in a circle, and locates the two secondary        suns' centers. Crops either of the secondary suns based on what region specified.   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Print the elapsed time  mainxpos           X position of 100% brightness sun to scan in a circle around  mainypos           Y position of 100% brightness sun to scan in a circle around  image           Cropped area  thresh           Threshold used in finding center  xpos           Computed X position of center  ypos           Computed Y position of center  xoffset           X offset of cropped region's bottom left corner  yoffset           Y offset of cropped region's bottom left corner   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "limbfit", "       Uses the data from makelimbstrips and fits an n-th order polynomial to the limb to find where        it crosses the threshold.   ", "plot           Makes some nice plots  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xpos           X center  ypos           Y center   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#getstruct", "getstruct", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "getstruct", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "time           Outputs how much time the program takes  struct           Structure containing the centers and cropped images of all 3 suns   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#cropme", "cropme", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "cropme", "", "inputpix", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#bordercheck", "bordercheck", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "bordercheck", "", "input", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna.html#edgefidcheck", "edgefidcheck", 'routine in <a href="code_snapshots/obsolete_code/kahuna.html">kahuna.pro</a>', "kahuna.pro", "", "edgefidcheck", "", "inputthresh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html", "kahuna_apr24.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "kahuna_apr24.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    KAHUNA   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image. Instead    of scanning rows to crop, scans in a circle. Using solar centers, identifies fiducial positions.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "makelimbstrips", "       Makes limb strips from full-length strips   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xstrips           Structure containing row strips  ystrips           Structure containing column strips   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#quickfidmask", "quickfidmask", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "quickfidmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#whichcropmethod", "whichcropmethod", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "whichcropmethod", "       Crops differently according to which region is selected.   ", "region           1) main sun            2) 50% brightness sun            3) 25% brightness sun  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "makestrips", "       Only saves 5 strips centered around the solar diameter to reduce the amount of limb-            darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.   ", "region       Which sun out of the three to find the center of. Defaults to the brightest sun  time       Prints elapsed time  thresh       Threshold used to select pixels  xstrips       Structure containing row strips  ystrips       Structure containing column strips   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#circscancrop", "circscancrop", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "circscancrop", "       Quickly finds the center of the main sun, scans in a circle, and locates the two secondary        suns' centers. Crops either of the secondary suns based on what region specified.   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Print the elapsed time  mainxpos           X position of 100% brightness sun to scan in a circle around  mainypos           Y position of 100% brightness sun to scan in a circle around  image           Cropped area  thresh           Threshold used in finding center  xpos           Computed X position of center  ypos           Computed Y position of center  xoffset           X offset of cropped region's bottom left corner  yoffset           Y offset of cropped region's bottom left corner   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "limbfit", "       Uses the data from makelimbstrips and fits an n-th order polynomial to the limb to find where        it crosses the threshold.   ", "plot           Makes some nice plots  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xpos           X center  ypos           Y center   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#getstruct", "getstruct", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "getstruct", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "time           Outputs how much time the program takes  struct           Structure containing the centers and cropped images of all 3 suns   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#auxcrop", "auxcrop", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "auxcrop", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#cropme", "cropme", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "cropme", "", "inputpix", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#bordercheck", "bordercheck", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "bordercheck", "", "input", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#morescratch", "morescratch", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "morescratch", "", "inputthresh", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#edgefidcheck", "edgefidcheck", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "edgefidcheck", "", "inputthresh", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#galapagos", "galapagos", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "galapagos", "", "inputthresh", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#scratch", "scratch", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "scratch", "", "inputthresh", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#barkbark", "barkbark", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "barkbark", "", "inputthresh", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#last6pixels", "last6pixels", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "last6pixels", "", "inputthresh", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/kahuna_apr24.html#smoothit", "smoothit", 'routine in <a href="code_snapshots/obsolete_code/kahuna_apr24.html">kahuna_apr24.pro</a>', "kahuna_apr24.pro", "", "smoothit", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ksone.html", "ksone.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ksone.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ksone.html#ksone", "ksone", 'routine in <a href="idlastro/ksone.html">ksone.pro</a>', "ksone.pro", "", "ksone", " NAME:        KSONE  PURPOSE:        Compute the one-sided Kolmogorov-Smirnov statistic  EXPLANATION:        Returns the Kolmogorov-Smirnov statistic and associated probability for        for an array of data values and a user-supplied cumulative distribution        function (CDF) of a single variable.   Algorithm from the procedure of        the same name in  Numerical Recipes  by Press et al. 2nd edition (1992)   CALLING SEQUENCE:        ksone, data, func_name, D, prob, [ /PLOT ]   INPUT PARAMETERS:        data -  vector of data values, must contain at least 4 elements for the                K-S statistic to be meaningful        func_name - scalar string giving the name of the cumulative distribution                function.    The function must be defined to accept the data                vector as its only input (see example), though keywords may be                passed via the _EXTRA facility.   OUTPUT PARAMETERS:        D - floating scalar giving the Kolmogorov-Smirnov statistic.   It                specified the maximum deviation between the cumulative                distribution of the data and the supplied function        prob - floating scalar between 0 and 1 giving the significance level of                the K-S statistic.   Small values of PROB show that the                cumulative distribution function of DATA is significantly                different from FUNC_NAME.   OPTIONAL INPUT KEYWORD:        /PLOT - If this keyword is set and non-zero, then KSONE will display a                plot of the CDF of the data with the supplied function                superposed.   The data value where the K-S statistic is                computed (i.e. at the maximum difference between the data CDF                and the function) is indicated by a vertical line.                KSONE accepts the _EXTRA keyword, so that most plot keywords                (e.g. TITLE, XTITLE, XSTYLE) can also be passed to KSONE.        /WINDOW - If set, the plot to a resizeable graphics window  EXAMPLE:        Determine if a vector created by the RANDOMN function is really        consistent with a Gaussian distribution with unit variance.        The CDF of a Gaussian is the error function except that a factor        of 2 is included in the error function.   So we must create a special        function:         function gauss_cdf, x        return, errorf( x/sqrt(2) )        end         IDL&gt; data = randomn(seed, 50)          ;create data array to be tested        IDL&gt; ksone, abs(data), 'gauss_cdf', D, prob, /PLOT     ;Use K-S test         A small value of PROB indicates that the cumulative distribution of         DATA is significantly different from a Gaussian   NOTES:        The code for PROB_KS is from the 2nd (1992) edition of Numerical        Recipes which includes a more accurate computation of the K-S        significance for small values of N than the first edition.         Since _EXTRA is used to pass extra parameters both to the user-supplied        function, and to the cgPLOT command, the user-supplied function should        not accept  cgPLOT  keyword names (e.g. XTITLE).   PROCEDURE CALLS        procedure PROB_KS - computes significance of K-S distribution        TAG_EXIST()   REVISION HISTORY:        Written     W. Landsman                   August, 1992        Accept _EXTRA keywords   W. Landsman      September, 1995        Fixed possible bug in plot display showing position maximum difference        in histogram   M. Fardal/ W. Landsman      March, 1997        Documentation updates   W. Landsman   June 2003        Pass _EXTRA to func_name  M. Fitzgerald    April, 2005        Work for functions that do not accept keywords W. Landsman July 2009        Use Coyote graphics for plotting           Feb 2011  ", "PLOT_EXTRAWindowdatafunc_namedprob", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/kstwo.html", "kstwo.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "kstwo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/kstwo.html#kstwo", "kstwo", 'routine in <a href="idlastro/kstwo.html">kstwo.pro</a>', "kstwo.pro", "", "kstwo", " NAME:        KSTWO  PURPOSE:        Return the two-sided Kolmogorov-Smirnov statistic  EXPLANATION:        Returns the Kolmogorov-Smirnov statistic and associated probability        that two arrays of data values are drawn from the same distribution        Algorithm taken from procedure of the same name in  Numerical        Recipes  by Press et al., 2nd edition (1992), Chapter 14   CALLING SEQUENCE:        kstwo, data1, data2, D, prob   INPUT PARAMATERS:        data1 -  vector of data values, at least 4 data values must be included                for the K-S statistic to be meaningful        data2 -  second set of data values, does not need to have the same                number of elements as data1   OUTPUT PARAMETERS:        D - floating scalar giving the Kolmogorov-Smirnov statistic.   It                specifies the maximum deviation between the cumulative                distribution of the data and the supplied function        prob - floating scalar between 0 and 1 giving the significance level of                the K-S statistic.   Small values of PROB show that the                cumulative distribution function of DATA1 is significantly                different from DATA2   EXAMPLE:        Test whether two vectors created by the RANDOMN function likely came        from the same distribution         IDL&gt; data1 = randomn(seed,40)        ;Create data vectors to be        IDL&gt; data2 = randomn(seed,70)        ;compared        IDL&gt; kstwo, data1, data2, D, prob   & print,D,prob   PROCEDURE CALLS        procedure PROB_KS - computes significance of K-S distribution   REVISION HISTORY:        Written     W. Landsman                August, 1992        FP computation of N_eff      H. Ebeling/W. Landsman  March 1996        Fix for arrays containing equal values J. Ballet/W. Landsman Oct. 2001        Fix index when maximum difference is at array end Renbin Yan  Dec 2008        Handle large number when computing N_err  D. Schnitzeler/WL  Sep 2010  ", "data1data2Dprob", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/kuiperone.html", "kuiperone.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "kuiperone.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/kuiperone.html#kuiperone", "kuiperone", 'routine in <a href="idlastro/kuiperone.html">kuiperone.pro</a>', "kuiperone.pro", "", "kuiperone", " NAME:        KUIPERONE  PURPOSE:        Compute the one-sided Kuiper statistic (invariant Kolmogorov-Smirnov)  EXPLANATION:        Returns the Kuiper statistic and associated probability        for an array of data values and a user-supplied cumulative distribution        function (CDF) of a single variable.   Algorithm adapted from KSONE        in  Numerical Recipes  by Press et al. 2nd edition (1992)         Kuiper's test is especially useful for data defined on a circle or        to search for periodicity (see Paltani 2004, A&A, 420, 789).  CALLING SEQUENCE:        kuiperone, data, func_name, D, prob, [ /PLOT ]   INPUT PARAMETERS:        data -  vector of data values, must contain at least 4 elements for the                Kuiper statistic to be meaningful        func_name - scalar string giving the name of the cumulative distribution                function.    The function must be defined to accept the data                vector as its only input (see example).   OUTPUT PARAMETERS:        D - floating scalar giving the Kuiper statistic.   It                specifies the sum of positive and negative deviations between the                cumulative distribution of the data and the supplied function        prob - floating scalar between 0 and 1 giving the significance level of                the Kuiper statistic.   Small values of PROB show that the                cumulative distribution function of DATA is significantly                different from FUNC_NAME.   OPTIONAL INPUT KEYWORD:        /PLOT - If this keyword is set and non-zero, then KUIPERONE will display a                plot of the CDF of the data with the supplied function                superposed.   The data values where the Kuiper statistic is                computed (i.e. at the maximum difference between the data CDF                and the function) are indicated by vertical dashed lines.                KUIPERONE accepts the _EXTRA keyword, so that most plot keywords                (e.g. TITLE, XTITLE, XSTYLE) can also be passed to KUIPERONE.   EXAMPLE:        Determine if a vector created by the RANDOMN function is really        consistent with a Gaussian distribution.        The CDF of a Gaussian is the error function except that a factor        of 2 is included in the error function.   So we must create a special        function:         function gauss_cdf, x        return, errorf( x/sqrt(2) )        end         IDL&gt; data = randomn(seed, 50)          ;create data array to be tested        IDL&gt; kuiperone, data, 'gauss_pdf', D, prob, /PLOT     ;Use Kuiper test         A small value of PROB indicates that the cumulative distribution of        DATA is significantly different from a Gaussian   NOTES:        Note that the 2nd (1992) edition of Numerical Recipes includes        a more accurate computation of the K-S significance for small        values of N.   PROCEDURE CALLS        procedure PROB_KUIPER - computes significance of Kuiper distribution   REVISION HISTORY:        Written     W. Landsman                   August, 1992        Accept _EXTRA keywords   W. Landsman      September, 1995        Fixed possible bug in plot display showing position maximum difference        in histogram   M. Fardal/ W. Landsman      March, 1997        Adapted from KSONE      J. Ballet     July 2003        Use Coyote graphics   W. Landsman     Feb 2011  ", "PLOTWINDOW_EXTRAdatafunc_namedprob", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/kuipertwo.html", "kuipertwo.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "kuipertwo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/kuipertwo.html#kuipertwo", "kuipertwo", 'routine in <a href="idlastro/kuipertwo.html">kuipertwo.pro</a>', "kuipertwo.pro", "", "kuipertwo", " NAME:        KUIPERTWO  PURPOSE:        Compute the two-sided Kuiper statistic (invariant Kolmogorov-Smirnov)  EXPLANATION:        Returns the Kuiper statistic and associated probability        that two arrays of data values are drawn from the same distribution        Algorithm adapted from KSTWO in  Numerical        Recipes  by Press et al., 2nd edition (1992), Chapter 14   CALLING SEQUENCE:        kuipertwo, data1, data2, D, prob, [ /PLOT ]   INPUT PARAMETERS:        data1 -  vector of data values, at least 4 data values must be included                for the Kuiper statistic to be meaningful        data2 -  second set of data values, does not need to have the same                number of elements as data1   OUTPUT PARAMETERS:        D - floating scalar giving the Kuiper statistic.   It                specifies the sum of positive and negative deviations between                the cumulative distributions of the two data sets        prob - floating scalar between 0 and 1 giving the significance level of                the Kuiper statistic.   Small values of PROB show that the                cumulative distribution function of DATA1 is significantly                different from DATA2   OPTIONAL INPUT KEYWORD:        /PLOT - If this keyword is set and non-zero, then KUIPERTWO will display                a plot of the CDF of the two data sets.                The data values where the Kuiper statistic is                computed (i.e. at the maximum difference between the CDF of                the two data sets) are indicated by vertical dashed lines.                KUIPERTWO accepts the _EXTRA keyword, so that most plot keywords                (e.g. TITLE, XTITLE, XSTYLE) can also be passed to KUIPERTWO.        /WINDOW - If set the plot to a resizeable graphics window.  EXAMPLE:        Test whether two vectors created by the RANDOMN function likely came        from the same distribution         IDL&gt; data1 = randomn(seed,40)        ;Create data vectors to be        IDL&gt; data2 = randomn(seed,70)        ;compared        IDL&gt; kuipertwo, data1, data2, D, prob   & print,D,prob   PROCEDURE CALLS        procedure PROB_KUIPER - computes significance of Kuiper distribution   REVISION HISTORY:        Written     W. Landsman                August, 1992        FP computation of N_eff      H. Ebeling/W. Landsman  March 1996        Fix for arrays containing equal values J. Ballet/W. Landsman        Oct. 2001        Adapted from KSTWO, added PLOT keyword  J. Ballet     July 2004        Use Coyote Graphics W. Landsman   Feb 2011  ", "PLOT_EXTRAWINDOWdata1data2Dprob", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/last6pixels.html", "last6pixels.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "last6pixels.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/last6pixels.html#last6pixels", "last6pixels", 'routine in <a href="code_snapshots/obsolete_code/last6pixels.html">last6pixels.pro</a>', "last6pixels.pro", "", "last6pixels", "", "inputthresh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/lclxtrem.html", "lclxtrem.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "lclxtrem.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/lclxtrem.html#lclxtrem", "lclxtrem", 'routine in <a href="code_snapshots/obsolete_code/lclxtrem.html">lclxtrem.pro</a>', "lclxtrem.pro", "", "lclxtrem", " NAME:   lclxtrem  PURPOSE:   Find local minima or maxima in a 1-d vector.  DESCRIPTION:   CATEGORY:   Spectroscopy  CALLING SEQUENCE:   idx=lclxtrem(vec,width,[/MAXIMA])  INPUTS:   vec - Input vector of data points.   width - size of zone to search, minima (or maxima) separated by less than             width are never returned.  (Default = 5)  OPTIONAL INPUT PARAMETERS:   KEYWORD INPUT PARAMETERS:   MAXIMA  - Flag, if set, causes program to search for local maxima, the default             is to search for local minima  OUTPUTS:   Returns indicies into vec that give local extrema.  KEYWORD OUTPUT PARAMETERS:   COMMON BLOCKS:   SIDE EFFECTS:   RESTRICTIONS:   PROCEDURE:   MODIFICATION HISTORY:   97/12/5, Written by Marc W. Buie, Lowell Observatory   ", "MAXIMAvecin_width", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/leftjustify.html", "leftjustify.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "leftjustify.pro", "", "", " NAME:        LEFTJUSTIFY   PURPOSE:         This is a utility routine to create a string that is left-justified with        respect to a string width.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities   CALLING SEQUENCE:         justifiedString = LeftJustify(string, width)   AUGUMENTS:         string:      The string that is to be left-justified. If not supplied, a null                     string is returned and no error is issued.         width:       The final width of the left-justified string. The width must be                     longer than the length of the string or an error results. Default: 50.   KEYWORDS:         None.   RETURN VALUE:         justifiedString: A string of WIDTH, with the string left-justified and the rest of the string                      filled with blank characters.   MODIFICATION HISTORY:         Written by:  David W. Fanning, 26 January 2009.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/leftjustify.html#LeftJustify", "LeftJustify", 'routine in <a href="coyote/leftjustify.html">leftjustify.pro</a>', "leftjustify.pro", "", "LeftJustify", "", "theStringtheWidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/legend.html", "legend.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "legend.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/legend.html#legend", "legend", 'routine in <a href="idlastro/legend.html">legend.pro</a>', "legend.pro", "", "legend", " NAME:        LEGEND  PURPOSE:        Create an annotation legend for a plot.  EXPLANATION:        NOTE: This procedure is *deprecated* because IDL 8.0 contains a LEGEND()        function written in IDL.   Both can be used provided that the one found        later in one's !PATH is  explicitly compiled in one's startup file.        However we strongly recommend the use of AL_LEGEND, which is identical        in use to LEGEND.    legend.pro will eventually be removed from future        releases of the IDL Astron library.         This procedure makes a legend for a plot.  The legend can contain        a mixture of symbols, linestyles, Hershey characters (vectorfont),        and filled polygons (usersym).  A test procedure, legendtest.pro,        shows legend's capabilities.  Placement of the legend is controlled        with keywords like /right, /top, and /center or by using a position        keyword for exact placement (position=[x,y]) or via mouse (/position).  CALLING SEQUENCE:        LEGEND [,items][,keyword options]  EXAMPLES:        The call:                legend,['Plus sign','Asterisk','Period'],psym=[1,2,3]          produces:                -----------------                |               |                |  + Plus sign  |                |  * Asterisk   |                |  . Period     |          Each symbol is drawn with a plots command, so they look OK.          Other examples are given in optional output keywords.                 |               |         lines = indgen(6)                       ; for line styles        items = 'linestyle '+strtrim(lines,2)   ; annotations        legend,items,linestyle=lines            ; vertical legend---upper left        items = ['Plus sign','Asterisk','Period']        sym = [1,2,3]        legend,items,psym=sym                   ; ditto except using symbols        legend,items,psym=sym,/horizontal       ; horizontal format        legend,items,psym=sym,box=0             ; sans border        legend,items,psym=sym,delimiter='='     ; embed '=' betw psym & text        legend,items,psym=sym,margin=2          ; 2-character margin        legend,items,psym=sym,position=[x,y]    ; upper left in data coords        legend,items,psym=sym,pos=[x,y],/norm   ; upper left in normal coords        legend,items,psym=sym,pos=[x,y],/device ; upper left in device coords        legend,items,psym=sym,/position         ; interactive position        legend,items,psym=sym,/right            ; at upper right        legend,items,psym=sym,/bottom           ; at lower left        legend,items,psym=sym,/center           ; approximately near center        legend,items,psym=sym,number=2          ; plot two symbols, not one        legend,items,/fill,psym=[8,8,8],colors=[10,20,30]; 3 filled squares  INPUTS:        items = text for the items in the legend, a string array.                For example, items = ['diamond','asterisk','square'].                You can omit items if you don't want any text labels.  OPTIONAL INPUT KEYWORDS:         linestyle = array of linestyle numbers  If linestyle[i] &lt; 0, then omit                ith symbol or line to allow a multi-line entry.     If                linestyle = -99 then text will be left-justified.        psym = array of plot symbol numbers.  If psym[i] is negative, then a                line connects pts for ith item.  If psym[i] = 8, then the                procedure usersym is called with vertices define in the                keyword usersym.   If psym[i] = 88, then use the previously                defined user symbol.    If 11 &lt;= psym[i] &lt;= 46 then David                Fanning's function CGSYMCAT() will be used for additional.                symbols.   Note that                PSYM=10 (histogram plot mode) is not allowed since it                cannot be used with the PLOTS command.        vectorfont = vector-drawn characters for the sym/line column, e.g.,                ['!9B!3','!9C!3','!9D!3'] produces an open square, a checkmark,                and a partial derivative, which might have accompanying items                ['BOX','CHECK','PARTIAL DERIVATIVE'].                There is no check that !p.font is set properly, e.g., -1 for                X and 0 for PostScript.  This can produce an error, e.g., use                !20 with PostScript and !p.font=0, but allows use of Hershey                *AND* PostScript fonts together.        N. B.: Choose any of linestyle, psym, and/or vectorfont.  If none is                present, only the text is output.  If more than one                is present, all need the same number of elements, and normal                plot behaviour occurs.                By default, if psym is positive, you get one point so there is                no connecting line.  If vectorfont[i] = '',                then plots is called to make a symbol or a line, but if                vectorfont[i] is a non-null string, then xyouts is called.        /help = flag to print header        /horizontal = flag to make the legend horizontal        /vertical = flag to make the legend vertical (D=vertical)        box = flag to include/omit box around the legend (D=include) 		  outline_color = color of box outline (D = !P.color)        bthick = thickness of the legend box (D = !P.thick)        clear = flag to clear the box area before drawing the legend        delimiter = embedded character(s) between symbol and text (D=none)        colors = array of colors for plot symbols/lines (D=!P.color)        font = scalar font graphics keyword (-1,0 or 1) for text        textcolors = array of colors for text (D=!P.color)        margin = margin around text measured in characters and lines        spacing = line spacing (D=bit more than character height)        linsize = Scale factor for line length (0-1), default = 1                  Set to 0 to give a dot, 0.5 give half default line length        pspacing = psym spacing (D=3 characters) (when number of symbols is              greater than 1)        charsize = just like !p.charsize for plot labels        charthick = just like !p.charthick for plot labels        thick = array of line thickness numbers (D = !P.thick), if used, then                linestyle must also be specified        position = data coordinates of the /top (D) /left (D) of the legend        normal = use normal coordinates for position, not data        device = use device coordinates for position, not data        number = number of plot symbols to plot or length of line (D=1)        usersym = 2-D array of vertices, cf. usersym in IDL manual.              (/USERSYM =square, default is to use existing USERSYM definition)        /fill = flag to fill the usersym        /left_legend = flag to place legend snug against left side of plot                  window (D)        /right_legend = flag to place legend snug against right side of plot                window.    If /right,pos=[x,y], then x is position of RHS and                text runs right-to-left.        /top_legend = flag to place legend snug against top of plot window (D)        /bottom = flag to place legend snug against bottom of plot window                /top,pos=[x,y] and /bottom,pos=[x,y] produce same positions.         If LINESTYLE, PSYM, VECTORFONT, THICK, COLORS, or TEXTCOLORS are        supplied as scalars, then the scalar value is set for every line or        symbol in the legend.  Outputs:        legend to current plot device  OPTIONAL OUTPUT KEYWORDS:        corners = 4-element array, like !p.position, of the normalized          coords for the box (even if box=0): [llx,lly,urx,ury].          Useful for multi-column or multi-line legends, for example,          to make a 2-column legend, you might do the following:            c1_items = ['diamond','asterisk','square']            c1_psym = [4,2,6]            c2_items = ['solid','dashed','dotted']            c2_line = [0,2,1]            legend,c1_items,psym=c1_psym,corners=c1,box=0            legend,c2_items,line=c2_line,corners=c2,box=0,pos=[c1[2],c1[3]]            c = [c1[0]&lt;c2[0],c1[1]&lt;c2[1],c1[2]&gt;c2[2],c1[3]&gt;c2[3]]            plots,[c[0],c[0],c[2],c[2],c[0]],[c[1],c[3],c[3],c[1],c[1]],/norm          Useful also to place the legend.  Here's an automatic way to place          the legend in the lower right corner.  The difficulty is that the          legend's width is unknown until it is plotted.  In this example,          the legend is plotted twice: the first time in the upper left, the          second time in the lower right.            legend,['1','22','333','4444'],linestyle=indgen(4),corners=corners                        ; BOGUS LEGEND---FIRST TIME TO REPORT CORNERS            xydims = [corners[2]-corners[0],corners[3]-corners[1]]                        ; SAVE WIDTH AND HEIGHT            chdim=[!d.x_ch_size/float(!d.x_size),!d.y_ch_size/float(!d.y_size)]                        ; DIMENSIONS OF ONE CHARACTER IN NORMALIZED COORDS            pos = [!x.window[1]-chdim[0]-xydims[0] $                        ,!y.window[0]+chdim[1]+xydims[1]]                        ; CALCULATE POSITION FOR LOWER RIGHT            plot,findgen(10)    ; SIMPLE PLOT; YOU DO WHATEVER YOU WANT HERE.            legend,['1','22','333','4444'],linestyle=indgen(4),pos=pos                        ; REDO THE LEGEND IN LOWER RIGHT CORNER          You can modify the pos calculation to place the legend where you          want.  For example to place it in the upper right:            pos = [!x.window[1]-chdim[0]-xydims[0],!y.window[1]-xydims[1]]  Common blocks:        none  Procedure:        If keyword help is set, call doc_library to print header.        See notes in the code.  Much of the code deals with placement of the        legend.  The main problem with placement is not being        able to sense the length of a string before it is output.  Some crude        approximations are used for centering.  Restrictions:        Here are some things that aren't implemented.        - An orientation keyword would allow lines at angles in the legend.        - An array of usersyms would be nice---simple change.        - An order option to interchange symbols and text might be nice.        - Somebody might like double boxes, e.g., with box = 2.        - Another feature might be a continuous bar with ticks and text.        - There are no guards to avoid writing outside the plot area.        - There is no provision for multi-line text, e.g., '1st line!c2nd line'          Sensing !c would be easy, but !c isn't implemented for PostScript.          A better way might be to simply output the 2nd line as another item          but without any accompanying symbol or linestyle.  A flag to omit          the symbol and linestyle is linestyle[i] = -1.        - There is no ability to make a title line containing any of titles          for the legend, for the symbols, or for the text.  Side Effects:  Modification history:        write, 24-25 Aug 92, F K Knight (knight@ll.mit.edu)        allow omission of items or omission of both psym and linestyle, add          corners keyword to facilitate multi-column legends, improve place-          ment of symbols and text, add guards for unequal size, 26 Aug 92, FKK        add linestyle(i)=-1 to suppress a single symbol/line, 27 Aug 92, FKK        add keyword vectorfont to allow characters in the sym/line column,          28 Aug 92, FKK        add /top, /bottom, /left, /right keywords for automatic placement at          the four corners of the plot window.  The /right keyword forces          right-to-left printing of menu. 18 Jun 93, FKK        change default position to data coords and add normal, data, and          device keywords, 17 Jan 94, FKK        add /center keyword for positioning, but it is not precise because          text string lengths cannot be known in advance, 17 Jan 94, FKK        add interactive positioning with /position keyword, 17 Jan 94, FKK        allow a legend with just text, no plotting symbols.  This helps in          simply describing a plot or writing assumptions done, 4 Feb 94, FKK        added thick, symsize, and clear keyword Feb 96, W. Landsman HSTX                David Seed, HR Wallingford, d.seed@hrwallingford.co.uk        allow scalar specification of keywords, Mar 96, W. Landsman HSTX        added charthick keyword, June 96, W. Landsman HSTX        Made keyword names  left,right,top,bottom,center longer,                                  Aug 16, 2000, Kim Tolbert        Added ability to have regular text lines in addition to plot legend        lines in legend.  If linestyle is -99 that item is left-justified.        Previously, only option for no sym/line was linestyle=-1, but then text        was lined up after sym/line column.    10 Oct 2000, Kim Tolbert        Make default value of thick = !P.thick  W. Landsman  Jan. 2001        Don't overwrite existing USERSYM definition  W. Landsman Mar. 2002 	     Added outline_color BT 24 MAY 2004        Pass font keyword to xyouts commands.  M. Fitzgerald, Sep. 2005        Default spacing, pspacing should be relative to charsize. M. Perrin, July 2007        Don't modify position keyword  A. Kimball/ W. Landsman Jul 2007        Small update to Jul 2007 for /NORMAL coords.  W. Landsman Aug 2007        Use CGSYMCAT() plotting symbols for 11&lt;=PSYM&lt;=46   W. Landsman  Nov 2009        Make a sharper box edge T. Robishaw/W.Landsman July 2010        Added BTHICK keyword W. Landsman October 2010        Added LINESIZ keyword W.L./V.Gonzalez   May 2011        Use CHARSIZE instead of SIZE keyword in XYOUTS  W.L./S.Erard Jul 2011  ", "BOTTOM_LEGENDBOXCENTER_LEGENDCHARTHICKCHARSIZECLEARCOLORSCORNERSDATADELIMITERDEVICEFILLHELPHORIZONTALLEFT_LEGENDLINESTYLEMARGINNORMALNUMBERPOSITIONPSPACINGPSYMRIGHT_LEGENDSPACINGSYMSIZETEXTCOLORSTHICKTOP_LEGENDUSERSYMVECTORFONTVERTICALOUTLINE_COLORFONTBTHICKlinsizeitems", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/legendtest.html", "legendtest.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "legendtest.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/legendtest.html#legendtest", "legendtest", 'routine in <a href="idlastro/legendtest.html">legendtest.pro</a>', "legendtest.pro", "", "legendtest", " NAME: 	LEGENDTEST  PURPOSE: 	Demo program to show capabilities of  the legend procedure.  CALLING SEQUENCE: 	legendtest  INPUTS: 	none  OPTIONAL INPUTS: 	none  KEYWORDS: 	none  OUTPUTS: 	legends of note  COMMON BLOCKS: 	none  SIDE EFFECTS: 	Sets !20 font to symbol if PostScript and !p.font=0.  RESTRICTIONS: 	With the vectorfont test, you'll get different results for PostScript 	depending on the value of !p.font.  MODIFICATION HISTORY: 	write, 27 Aug 92, F.K.Knight (knight@ll.mit.edu) 	add test of /left,/right,/top,/bottom keywords, 21 June 93, FKK 	update based on recent changes to legend, 7 Feb 94, FKK        Fix ambiguous CHAR keyword  W. Landsman Sep 2007        Use Coyote graphics routines  W. Landsman Jan 2011  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/limbfit copy.html", "limbfit copy.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "limbfit copy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/limbfit copy.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/obsolete_code/limbfit copy.html">limbfit copy.pro</a>', "limbfit copy.pro", "", "limbfit", "       Uses the data from makelimbstrips and fits an n-th order polynomial to the limb to find where        it crosses the threshold.   ", "plot           Makes some nice plots  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xpos           X center  ypos           Y center   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/limbfit.html", "limbfit.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "limbfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/limbfit.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/orig_version/limbfit.html">limbfit.pro</a>', "limbfit.pro", "", "limbfit", "       Fits 2nd order polynomial to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/limbfit.html", "limbfit.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "limbfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/limbfit.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/test_version/limbfit.html">limbfit.pro</a>', "limbfit.pro", "", "limbfit", "       Fits 2nd order polynomial to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/limbfit.html", "limbfit.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "limbfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/limbfit.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/sep11/limbfit.html">limbfit.pro</a>', "limbfit.pro", "", "limbfit", "       Fits 2nd order polynomial to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/limbfit.html", "limbfit.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "limbfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/limbfit.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/jul25/limbfit.html">limbfit.pro</a>', "limbfit.pro", "", "limbfit", "       Fits 2nd order polynomial to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/limbfit.html", "limbfit.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "limbfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/limbfit.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/albert_version/limbfit.html">limbfit.pro</a>', "limbfit.pro", "", "limbfit", "       Fits 2nd order polynomial to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/limbfit.html", "limbfit.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "limbfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/limbfit.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/obsolete_code/limbfit.html">limbfit.pro</a>', "limbfit.pro", "", "limbfit", "   Uses the data from makelimbstrips and fits an n-th order polynomial to the limb to find where        it crosses the threshold.   ", "nstrips           How many strips to select, centered around the row/col diameter  plot           Makes some nice plots  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xpos           X center  ypos           Y center   file           File to be read in  ministrip_length           How long the trimmed down strip will be  order           What order polynomial to use for POLY_FIT()  scan_width           Indicates how far apart to scan  sigmavalue           Sets the threshold to be:            max(image) - sigmavalue*stddev(image)   sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/limbfit.html", "limbfit.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "limbfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/limbfit.html#limbfit", "limbfit", 'routine in <a href="sep20/limbfit.html">limbfit.pro</a>', "limbfit.pro", "", "limbfit", "       Fits 2nd order polynomial to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/limbfit.html", "limbfit.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "limbfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/limbfit.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/aug22_notworking/limbfit.html">limbfit.pro</a>', "limbfit.pro", "", "limbfit", "       Fits 2nd order polynomial to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/lineid_plot.html", "lineid_plot.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "lineid_plot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/lineid_plot.html#lineid_plot", "lineid_plot", 'routine in <a href="idlastro/lineid_plot.html">lineid_plot.pro</a>', "lineid_plot.pro", "", "lineid_plot", " NAME: 	LINEID_PLOT  PURPOSE: 	 Plot spectrum with specified line identifications annotated at the 	 top of the plot.   CALLING SEQUENCE: 	lineid_plot, wave, flux, wline, text1, [ text2, 			LCHARSIZE=, LCHARTHICK=, EXTEND =, ...plotting keywords]   INPUTS: 	wave - wavelength vector for the plot 	flux - flux vector 	wline - wavelength vector of line identifications.  (only the lines 		between	the plot limits will be used) 	text1 - string array of text to be used to annotate each line 	text2 - (OPTIONAL) second string array of text to be used for 		line annotation.  Since the text is written with 		proportional spaced characters, TEXT2 can be used if 		you want two sets of annotation to be alinged:  		eg:	Cr IV  1390.009 			Fe V   1390.049 			Ni IV  1390.184 			    instead of 			Cr IV 1390.009 			Fe V 1390.049 			Ni IV 1390.184   OPTIONAL KEYWORD INPUTS: 	EXTEND - specifies that the annotated lines should have a dotted line 		extended to the spectrum to indicate the line position. 		EXTEND can be a scalar (applies to all lines) or a vector with 		a different value for each line.  The value of EXTEND gives 		the line IDL plot line thickness for the dotted lines. 		If EXTEND is a vector each dotted line can have a different 		thickness.  A value of 0 indicates that no dotted line is to 		be drawn. (default = scalar 0) 	LCHARSIZE - the character size of the annotation for each line. 		If can be a vector so that different lines are annotated with 		different size characters.  LCHARSIZE can be used to make 		stronger lines have a larger annotation. (default = scalar 1.0). 	LCHARTHICK = the character thickness of the annotation for each line. 		It can be a vector so that different lines are annotated with 		characters of varying thickness.   LCHARTHICK can be used to 		make stronger lines have a bolder annotation. 		(default = !p.charthick)  	LINEID_PLOT uses the _EXTRA facility to allow the use of any cgPLOT 	keywords (e.g. AXISCOLOR, LINESTYLE, CHARSIZE) to be passed to the        plot.   SIDE EFFECTS: 	Program uses SET_VIEWPORT to set the !P.POSITION parameter to allow 	room for the annotation.   This system variable can be reset to the 	default value by setting !P.POSTION=0 or typing SET_VIEWPORT with no 	parameters   OPERATIONAL NOTES: 	Once the program has completed, You can use OPLOT to draw additional 	plots on the display.  	If your annotated characters are not being rotated properly, 	try setting !P.FONT to a non zero value.  EXAMPLE: 	Annotate some interstellar lines between 1240 and 1270 A.  	IDL&gt; w = 1240+ indgen(300)*0.1    ;Make a wavelength vector 	IDL&gt; f = randomn(seed,300)        ;Random flux vector 	IDL&gt; id = ['N V','Si II','Si II','Si II']   ;Line IDs 	IDL&gt; wl = [1242.80,1260.42,1264.74,1265.00] ;Line positions 	IDL&gt; lineid_plot,w,f,wl,id,wl,/ext  	Note that LINEID_PLOT is smart enough not to overlap the annotation 	for the two closely spaced lines at 1264.74 and 1265.00  HISTORY: 	version 1  D. Lindler Jan, 1992 	Sept 27, 1993  DJL  fixed bug in /extend option 	Apr 19, 1994 DJL corrected bug in sorting of charthick (cthick) 	Sep 1996, W. Landsman,  added _EXTRA keyword, changed keyword names 		CHARTHICK==&gt;LCHARTHICK, CHARSIZE==&gt;LCHARSIZE        Work with !P.MULTI   W. Landsman   December 2003        Use Coyote graphics routines  W. Landsman February 2011  ", "extendlcharthicklcharsizewindow_EXTRAwavefluxwlinetext1text2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/linkedlist__define.html", "linkedlist__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "linkedlist__define.pro", "", "", " NAME:    LINKEDLIST   FILENAME:    linkedlist__define.pro   PURPOSE:     The purpose of this program is to implement a list that    is linked in both the forward and backward directions. There    is no restriction as to what can be stored in a linked list    node. The linked list is implemented as an object.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   CALLING SEQUENCE:     mylist = Obj_New('LINKEDLIST', item)   OPTIONAL INPUTS:     item: The first item added to the list. Items can be any      valid IDL variable type.   COMMON BLOCKS:     Are you kidding?!   RESTRICTIONS:     Be sure to destroy the LINKEDLIST object when you are finished    with it: Obj_Destroy, mylist     Node index numbers start at 0 and go to n-1, where n is the    number of items in the list.   PUBLIC METHODS:  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   PRO LINKEDLIST::ADD, item, index, $      AFTER=after, $      BEFORE=before, $      ERROR=error, $      NO_COPY=no_copy, $      REPLACE=replace     The ADD method adds a data item to the list.     Parameters:     item: The data item to be added to the list. Required.     index: The location in the list where the data item is      to be added. If neither the AFTER or BEFORE keyword is      set, the item is added AFTER the item at the index location.      If index is missing, the index points to the last item in      the list. Optional.     Keywords:     AFTER: If this keyword is set, the item is added after the      item at the current index.     BEFORE: If this keyword is set, the item is added before the      item at the current index.     ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.     NO_COPY: If set, the item is transferred to the internal pointer using       a no copy method. This will cause the item variable to become undefined.     REPLACE: If this keyword is set, the item will replace the current item at       the index location.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   PRO LINKEDLIST::DELETE, index, ALL=all, DESTROY=destroy, ERROR=error     The DELETE method deletes an item from the list.     Parameters:     index: The location in the list where the data item is      to be delete. If index is missing, the index points to      the last item in the list. Optional.     Keywords:     ALL: If this keyword is set, all items in the list are deleted.     DESTROY: If the item at the node is an object or pointer, the      item will be destroyed before the node is deleted. This keyword      is turned on (set to 1) by default. Set to 0 to prevent destruction.      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message. ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   FUNCTION LINKEDLIST::GET_COUNT     The GET_COUNT method returns the number of items in the list.     Return Value: The number of items stored in the linked list.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   FUNCTION LINKEDLIST::GET_ITEM, index, $     ALL=all, $                 ; This ASSUMES all items stored are the same type!!!     Dereference=dereference, $ ; Obsolete. Ignored. Always returns item.     ItemPtr=itemPtr, $         ; The pointer to the item, if needed. Output.     NO_COPY=no_copy, $         ; Copy from location with NO_COPY.     ERROR=errorMsg             ; The error message. Null string if no error.     Parameters:     index: The location in the list from which the data item is      to be retrieved. If not present, the last item in the list      is retrieved. Optional.     Keywords:     DEREFERENCE: This keyword obsolete and only provided for backward compatibility.     ALL: Set this keyword to return an n-element array containing all the list       items.  This requires that all list items be of the same type, and       if they are arrays, they have 7 dimensions or fewer. If index is passed,       it is ignored.     ITEMPTR: The pointer to the data item.     NO_COPY: If this keyword is set, the item is transferred from the data       pointer using a NO_COPY method. This will undefine the item at that       indexed locaton.      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.     Return Value: The data item at this index on the list.      If ALL is set, then an array containing all the data items is returned.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   FUNCTION LINKEDLIST::GET_NODE, index, ERROR=error     The GET_NODE method returns a pointer to the specified node    from the list.     Parameters:     index: The location in the list from which the data node is      to be retrieved. If not present, the last node in the list      is retrieved. The node is a structure with three fields:      Previous is a pointer to the previous node in the list.      Next is a pointer to the next node in the list. A null pointer      in the previous field indicates the first node on the list. A      null pointer in the next field indicates the last node on the      list. The item field is a pointer to the item stored in the      node. Optional.     ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.     Return Value: A pointer to the specified node structure in      the linked list.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   PRO LINKEDLIST::HELP, PRINT=print   The HELP method performs a HELP command on each item  in the linked list.     Keywords:      PRINT: If this keyword is set, the PRINT command is used       instead of the HELP command on the items in the list.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   PRO LINKEDLIST::MOVE_NODE, nodeIndex, location, BEFORE=before, ERROR=error     The MOVE_NODE method moves a list node from one location to another.     Parameters:     nodeIndex: The location in the list of the node you are moving.      Required.     location: The location (index) you are moving the node to. If      location is missing, the location points to the node at the      end of the list.     Keywords:      BEFORE: If this keyword is set, the node is added to the       list before the location node. Otherwise, it is added after       the location node.      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  PRO LINKEDLIST::REPLACE_ITEM, newItem, index, ERROR=error    Use this method to replace any item in the list with any other value.   This allows the caller to change an item without stepping through the   process of deleting an item then adding a new one.    Parameters:      index:  The location of the node you are replacing       newItem:  Any value of any data type.      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  FUNCTION LINKEDLIST::HAVE_ITEM, index, ERROR=error    Use this method to check to see if an item exits at a particular location   on the list. Returns a 1 if the item is there, otherwise a 0.    Parameters:      index:  The location of the node you are replacing      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   EXAMPLE:     mylist = Obj_New( LINKEDLIST , 5)    mylist-&gt;Add, 10    mylist-&gt;Add, 7, 1, /Before    mylist-&gt;Add, 12    print, mylist-&gt;Get_Item(/All)    mylist-&gt;Add, 'Bob', 2, /Replace    mylist-&gt;Help    mylist-&gt;Delete, 0    mylist-&gt;Help, /Print   MODIFICATION HISTORY:    Written by: David Fanning, 25 August 98.    25 August 99. Fixed several errors in various methods dealing with        moving nodes from one place to another. DWF.    13 June 2001. DWF. Added DEREFERENCE to the GET_ITEM method to        return the item itself, instead of the pointer to the item.    27 June 2001 Added REPLACE_ITEM method.  Ben Tupper.    7 April 2003. Added DESTROY keyword to DELETE method so that objects       and pointers could be cleaned up properly when they are deleted       from the linked list. DWF.    9 April 2003. Fixed a problem that occurs when deleting the last node. DWF.    3 Feb 2004. Make sure loop index vars are long.  Jeff Guerber    30 Jun 2004.  Added /ALL to GET_ITEM function.  Henry Throop, SWRI.    23 Nov 2004.  Fixed GET_ITEM, /ALL to accomodate structures and empty       lists.  Henry Throop.    21 February 2011. A complete refurbishing to incorporate changes and to fix bugs       I found in the SolarSoft version of this code. I've tried to make this compatible       with the version distributed with SolarSoft to reduce problems caused by two versions       of the software with the same name.     9 December 2011. Fixed a problem with the ALL keyword on the Get_Item method. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::ADD", "LINKEDLIST::ADD", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::ADD", "", "AfterBeforeErrorNo_CopyReplaceitemindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::ADD_AFTER", "LINKEDLIST::ADD_AFTER", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::ADD_AFTER", "", "NO_COPYERRORitemindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::ADD_BEFORE", "LINKEDLIST::ADD_BEFORE", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::ADD_BEFORE", "", "NO_COPYERRORitemindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::ADD_TO_END", "LINKEDLIST::ADD_TO_END", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::ADD_TO_END", "", "NO_COPYERRORitem", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::DELETE", "LINKEDLIST::DELETE", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::DELETE", "", "AllDESTROYERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::DELETE_LAST_NODE", "LINKEDLIST::DELETE_LAST_NODE", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::DELETE_LAST_NODE", "", "DESTROYERROR", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::DELETE_NODE", "LINKEDLIST::DELETE_NODE", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::DELETE_NODE", "", "DESTROYERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::DELETE_NODES", "LINKEDLIST::DELETE_NODES", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::DELETE_NODES", "", "DESTROYERROR", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::GET_COUNT", "LINKEDLIST::GET_COUNT", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::GET_COUNT", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::GET_ITEM", "LINKEDLIST::GET_ITEM", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::GET_ITEM", "", "ALLDereferenceItemPtrNO_COPYERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::GET_NODE", "LINKEDLIST::GET_NODE", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::GET_NODE", "", "ERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::GET_VALUE", "LINKEDLIST::GET_VALUE", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::GET_VALUE", "", "NO_COPYERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::HAVE_ITEM", "LINKEDLIST::HAVE_ITEM", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::HAVE_ITEM", "", "ERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::HELP", "LINKEDLIST::HELP", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::HELP", "", "Print", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::MOVE_NODE", "LINKEDLIST::MOVE_NODE", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::MOVE_NODE", "", "BeforeErrornodeIndexlocation", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::REPLACE_ITEM", "LINKEDLIST::REPLACE_ITEM", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::REPLACE_ITEM", "", "NO_COPYERRORitemindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::CLEANUP", "LINKEDLIST::CLEANUP", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST::INIT", "LINKEDLIST::INIT", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::INIT", "", "item", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/linkedlist__define.html#LINKEDLIST__DEFINE", "LINKEDLIST__DEFINE", 'routine in <a href="coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST__DEFINE", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html", "linkedlist__define.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "linkedlist__define.pro", "", "", " NAME:    LINKEDLIST   FILENAME:    linkedlist__define.pro   PURPOSE:     The purpose of this program is to implement a list that    is linked in both the forward and backward directions. There    is no restriction as to what can be stored in a linked list    node. The linked list is implemented as an object.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     General programming.   CALLING SEQUENCE:     mylist = Obj_New('LINKEDLIST', item)   OPTIONAL INPUTS:     item: The first item added to the list. Items can be any      valid IDL variable type.   COMMON BLOCKS:     Are you kidding?!   RESTRICTIONS:     Be sure to destroy the LINKEDLIST object when you are finished    with it: Obj_Destroy, mylist     Node index numbers start at 0 and go to n-1, where n is the    number of items in the list.   PUBLIC METHODS:  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   PRO LINKEDLIST::ADD, item, index, $      AFTER=after, $      BEFORE=before, $      ERROR=error, $      NO_COPY=no_copy, $      REPLACE=replace     The ADD method adds a data item to the list.     Parameters:     item: The data item to be added to the list. Required.     index: The location in the list where the data item is      to be added. If neither the AFTER or BEFORE keyword is      set, the item is added AFTER the item at the index location.      If index is missing, the index points to the last item in      the list. Optional.     Keywords:     AFTER: If this keyword is set, the item is added after the      item at the current index.     BEFORE: If this keyword is set, the item is added before the      item at the current index.     ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.     NO_COPY: If set, the item is transferred to the internal pointer using       a no copy method. This will cause the item variable to become undefined.     REPLACE: If this keyword is set, the item will replace the current item at       the index location.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   PRO LINKEDLIST::DELETE, index, ALL=all, DESTROY=destroy, ERROR=error     The DELETE method deletes an item from the list.     Parameters:     index: The location in the list where the data item is      to be delete. If index is missing, the index points to      the last item in the list. Optional.     Keywords:     ALL: If this keyword is set, all items in the list are deleted.     DESTROY: If the item at the node is an object or pointer, the      item will be destroyed before the node is deleted. This keyword      is turned on (set to 1) by default. Set to 0 to prevent destruction.      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message. ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   FUNCTION LINKEDLIST::GET_COUNT     The GET_COUNT method returns the number of items in the list.     Return Value: The number of items stored in the linked list.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   FUNCTION LINKEDLIST::GET_ITEM, index, $     ALL=all, $                 ; This ASSUMES all items stored are the same type!!!     Dereference=dereference, $ ; Obsolete. Ignored. Always returns item.     ItemPtr=itemPtr, $         ; The pointer to the item, if needed. Output.     NO_COPY=no_copy, $         ; Copy from location with NO_COPY.     ERROR=errorMsg             ; The error message. Null string if no error.     Parameters:     index: The location in the list from which the data item is      to be retrieved. If not present, the last item in the list      is retrieved. Optional.     Keywords:     DEREFERENCE: This keyword obsolete and only provided for backward compatibility.     ALL: Set this keyword to return an n-element array containing all the list       items.  This requires that all list items be of the same type, and       if they are arrays, they have 7 dimensions or fewer. If index is passed,       it is ignored.     ITEMPTR: The pointer to the data item.     NO_COPY: If this keyword is set, the item is transferred from the data       pointer using a NO_COPY method. This will undefine the item at that       indexed locaton.      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.     Return Value: The data item at this index on the list.      If ALL is set, then an array containing all the data items is returned.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   FUNCTION LINKEDLIST::GET_NODE, index, ERROR=error     The GET_NODE method returns a pointer to the specified node    from the list.     Parameters:     index: The location in the list from which the data node is      to be retrieved. If not present, the last node in the list      is retrieved. The node is a structure with three fields:      Previous is a pointer to the previous node in the list.      Next is a pointer to the next node in the list. A null pointer      in the previous field indicates the first node on the list. A      null pointer in the next field indicates the last node on the      list. The item field is a pointer to the item stored in the      node. Optional.     ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.     Return Value: A pointer to the specified node structure in      the linked list.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   PRO LINKEDLIST::HELP, PRINT=print   The HELP method performs a HELP command on each item  in the linked list.     Keywords:      PRINT: If this keyword is set, the PRINT command is used       instead of the HELP command on the items in the list.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   PRO LINKEDLIST::MOVE_NODE, nodeIndex, location, BEFORE=before, ERROR=error     The MOVE_NODE method moves a list node from one location to another.     Parameters:     nodeIndex: The location in the list of the node you are moving.      Required.     location: The location (index) you are moving the node to. If      location is missing, the location points to the node at the      end of the list.     Keywords:      BEFORE: If this keyword is set, the node is added to the       list before the location node. Otherwise, it is added after       the location node.      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  PRO LINKEDLIST::REPLACE_ITEM, newItem, index, ERROR=error    Use this method to replace any item in the list with any other value.   This allows the caller to change an item without stepping through the   process of deleting an item then adding a new one.    Parameters:      index:  The location of the node you are replacing       newItem:  Any value of any data type.      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  FUNCTION LINKEDLIST::HAVE_ITEM, index, ERROR=error    Use this method to check to see if an item exits at a particular location   on the list. Returns a 1 if the item is there, otherwise a 0.    Parameters:      index:  The location of the node you are replacing      ERROR: On return, if this is not a null string, an error occurred       and this value is set equal to the error message.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   EXAMPLE:     mylist = Obj_New( LINKEDLIST , 5)    mylist-&gt;Add, 10    mylist-&gt;Add, 7, 1, /Before    mylist-&gt;Add, 12    print, mylist-&gt;Get_Item(/All)    mylist-&gt;Add, 'Bob', 2, /Replace    mylist-&gt;Help    mylist-&gt;Delete, 0    mylist-&gt;Help, /Print   MODIFICATION HISTORY:    Written by: David Fanning, 25 August 98.    25 August 99. Fixed several errors in various methods dealing with        moving nodes from one place to another. DWF.    13 June 2001. DWF. Added DEREFERENCE to the GET_ITEM method to        return the item itself, instead of the pointer to the item.    27 June 2001 Added REPLACE_ITEM method.  Ben Tupper.    7 April 2003. Added DESTROY keyword to DELETE method so that objects       and pointers could be cleaned up properly when they are deleted       from the linked list. DWF.    9 April 2003. Fixed a problem that occurs when deleting the last node. DWF.    3 Feb 2004. Make sure loop index vars are long.  Jeff Guerber    30 Jun 2004.  Added /ALL to GET_ITEM function.  Henry Throop, SWRI.    23 Nov 2004.  Fixed GET_ITEM, /ALL to accomodate structures and empty       lists.  Henry Throop.    21 February 2011. A complete refurbishing to incorporate changes and to fix bugs       I found in the SolarSoft version of this code. I've tried to make this compatible       with the version distributed with SolarSoft to reduce problems caused by two versions       of the software with the same name.     9 December 2011. Fixed a problem with the ALL keyword on the Get_Item method. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::ADD", "LINKEDLIST::ADD", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::ADD", "", "AfterBeforeErrorNo_CopyReplaceitemindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::ADD_AFTER", "LINKEDLIST::ADD_AFTER", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::ADD_AFTER", "", "NO_COPYERRORitemindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::ADD_BEFORE", "LINKEDLIST::ADD_BEFORE", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::ADD_BEFORE", "", "NO_COPYERRORitemindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::ADD_TO_END", "LINKEDLIST::ADD_TO_END", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::ADD_TO_END", "", "NO_COPYERRORitem", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::DELETE", "LINKEDLIST::DELETE", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::DELETE", "", "AllDESTROYERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::DELETE_LAST_NODE", "LINKEDLIST::DELETE_LAST_NODE", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::DELETE_LAST_NODE", "", "DESTROYERROR", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::DELETE_NODE", "LINKEDLIST::DELETE_NODE", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::DELETE_NODE", "", "DESTROYERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::DELETE_NODES", "LINKEDLIST::DELETE_NODES", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::DELETE_NODES", "", "DESTROYERROR", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::GET_COUNT", "LINKEDLIST::GET_COUNT", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::GET_COUNT", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::GET_ITEM", "LINKEDLIST::GET_ITEM", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::GET_ITEM", "", "ALLDereferenceItemPtrNO_COPYERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::GET_NODE", "LINKEDLIST::GET_NODE", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::GET_NODE", "", "ERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::GET_VALUE", "LINKEDLIST::GET_VALUE", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::GET_VALUE", "", "NO_COPYERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::HAVE_ITEM", "LINKEDLIST::HAVE_ITEM", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::HAVE_ITEM", "", "ERRORindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::HELP", "LINKEDLIST::HELP", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::HELP", "", "Print", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::MOVE_NODE", "LINKEDLIST::MOVE_NODE", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::MOVE_NODE", "", "BeforeErrornodeIndexlocation", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::REPLACE_ITEM", "LINKEDLIST::REPLACE_ITEM", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::REPLACE_ITEM", "", "NO_COPYERRORitemindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::CLEANUP", "LINKEDLIST::CLEANUP", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST::INIT", "LINKEDLIST::INIT", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST::INIT", "", "item", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/linkedlist__define.html#LINKEDLIST__DEFINE", "LINKEDLIST__DEFINE", 'routine in <a href="idlastro/coyote/linkedlist__define.html">linkedlist__define.pro</a>', "linkedlist__define.pro", "", "LINKEDLIST__DEFINE", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/linmix_err.html", "linmix_err.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "linmix_err.pro", "", "", "   NAME:      LINMIX_ERR    PURPOSE:       Bayesian approach to linear regression with errors in both X and Y    EXPLANATION:      Perform linear regression of y on x when there are measurement      errors in both variables. the regression assumes :                   ETA = ALPHA + BETA * XI + EPSILON                  X = XI + XERR                  Y = ETA + YERR   Here, (ALPHA, BETA) are the regression coefficients, EPSILON is the  intrinsic random scatter about the regression, XERR is the  measurement error in X, and YERR is the measurement error in  Y. EPSILON is assumed to be normally-distributed with mean zero and  variance SIGSQR. XERR and YERR are assumed to be  normally-distributed with means equal to zero, variances XSIG^2 and  YSIG^2, respectively, and covariance XYCOV. The distribution of XI  is modelled as a mixture of normals, with group proportions PI,  mean MU, and variance TAUSQR. Bayesian inference is employed, and  a structure containing random draws from the posterior is  returned. Convergence of the MCMC to the posterior is monitored  using the potential scale reduction factor (RHAT, Gelman et  al.2004). In general, when RHAT &lt; 1.1 then approximate convergence  is reached.   Simple non-detections on y may also be included.   CALLING SEQUENCE:       LINMIX_ERR, X, Y, POST, XSIG=, YSIG=, XYCOV=, DELTA=, NGAUSS=, /SILENT,                 /METRO, MINITER= , MAXITER=   INPUTS :     X - THE OBSERVED INDEPENDENT VARIABLE. THIS SHOULD BE AN        NX-ELEMENT VECTOR.    Y - THE OBSERVED DEPENDENT VARIABLE. THIS SHOULD BE AN NX-ELEMENT        VECTOR.   OPTIONAL INPUTS :     XSIG - THE 1-SIGMA MEASUREMENT ERRORS IN X, AN NX-ELEMENT VECTOR.    YSIG - THE 1-SIGMA MEASUREMENT ERRORS IN Y, AN NX-ELEMENT VECTOR.    XYCOV - THE COVARIANCE BETWEEN THE MEASUREMENT ERRORS IN X AND Y,            AND NX-ELEMENT VECTOR.    DELTA - AN NX-ELEMENT VECTOR INDICATING WHETHER A DATA POINT IS            CENSORED OR NOT. IF DELTA[i] = 1, THEN THE SOURCE IS            DETECTED, ELSE IF DELTA[i] = 0 THE SOURCE IS NOT DETECTED            AND Y[i] SHOULD BE AN UPPER LIMIT ON Y[i]. NOTE THAT IF            THERE ARE CENSORED DATA POINTS, THEN THE            MAXIMUM-LIKELIHOOD ESTIMATE (THETA) IS NOT VALID. THE            DEFAULT IS TO ASSUME ALL DATA POINTS ARE DETECTED, IE,            DELTA = REPLICATE(1, NX).    METRO - IF METRO = 1, THEN THE MARKOV CHAINS WILL BE CREATED USING            THE METROPOLIS-HASTINGS ALGORITHM INSTEAD OF THE GIBBS            SAMPLER. THIS CAN HELP THE CHAINS CONVERGE WHEN THE SAMPLE            SIZE IS SMALL OR IF THE MEASUREMENT ERRORS DOMINATE THE            SCATTER IN X AND Y.    SILENT - SUPPRESS TEXT OUTPUT.    MINITER - MINIMUM NUMBER OF ITERATIONS PERFORMED BY THE GIBBS              SAMPLER OR METROPOLIS-HASTINGS ALGORITHM. IN GENERAL,              MINITER = 5000 SHOULD BE SUFFICIENT FOR CONVERGENCE. THE              DEFAULT IS MINITER = 5000. THE MCMC IS STOPPED AFTER              RHAT &lt; 1.1 FOR ALL PARAMETERS OF INTEREST, AND THE              NUMBER OF ITERATIONS PERFORMED IS GREATER THAN MINITER.    MAXITER - THE MAXIMUM NUMBER OF ITERATIONS PERFORMED BY THE              MCMC. THE DEFAULT IS 1D5. THE MCMC IS STOPPED              AUTOMATICALLY AFTER MAXITER ITERATIONS.    NGAUSS - THE NUMBER OF GAUSSIANS TO USE IN THE MIXTURE             MODELLING. THE DEFAULT IS 3. IF NGAUSS = 1, THEN THE             PRIOR ON (MU, TAUSQR) IS ASSUMED TO BE UNIFORM.   OUTPUT :      POST - A STRUCTURE CONTAINING THE RESULTS FROM THE MCMC. EACH            ELEMENT OF POST IS A DRAW FROM THE POSTERIOR DISTRIBUTION            FOR EACH OF THE PARAMETERS.               ALPHA - THE CONSTANT IN THE REGRESSION.              BETA - THE SLOPE OF THE REGRESSION.              SIGSQR - THE VARIANCE OF THE INTRINSIC SCATTER.              PI - THE GAUSSIAN WEIGHTS FOR THE MIXTURE MODEL.              MU - THE GAUSSIAN MEANS FOR THE MIXTURE MODEL.              TAUSQR - THE GAUSSIAN VARIANCES FOR THE MIXTURE MODEL.              MU0 - THE HYPERPARAMETER GIVING THE MEAN VALUE OF THE                    GAUSSIAN PRIOR ON MU. ONLY INCLUDED IF NGAUSS &gt;                    1.              USQR - THE HYPERPARAMETER DESCRIBING FOR THE PRIOR                     VARIANCE OF THE INDIVIDUAL GAUSSIAN CENTROIDS                     ABOUT MU0. ONLY INCLUDED IF NGAUSS &gt; 1.              WSQR - THE HYPERPARAMETER DESCRIBING THE TYPICAL' SCALE                     FOR THE PRIOR ON (TAUSQR,USQR). ONLY INCLUDED IF                     NGAUSS &gt; 1.              XIMEAN - THE MEAN OF THE DISTRIBUTION FOR THE                       INDEPENDENT VARIABLE, XI.              XISIG - THE STANDARD DEVIATION OF THE DISTRIBUTION FOR                      THE INDEPENDENT VARIABLE, XI.              CORR - THE LINEAR CORRELATION COEFFICIENT BETWEEN THE                     DEPENDENT AND INDEPENDENT VARIABLES, XI AND ETA.   CALLED ROUTINES :      RANDOMCHI, MRANDOMN, RANDOMGAM, RANDOMDIR, MULTINOM   REFERENCES :     Carroll, R.J., Roeder, K., & Wasserman, L., 1999, Flexible      Parametric Measurement Error Models, Biometrics, 55, 44     Kelly, B.C., 2007, Some Aspects of Measurement Error in      Linear Regression of Astronomical Data, The Astrophysical      Journal, 665, 1489 (arXiv:0705.2774)     Gelman, A., Carlin, J.B., Stern, H.S., & Rubin, D.B., 2004,      Bayesian Data Analysis, Chapman & Hall/CRC   REVISION HISTORY       AUTHOR : BRANDON C. KELLY, STEWARD OBS., JULY 2006    - MODIFIED PRIOR ON MU0 TO BE UNIFORM OVER [MIN(X),MAX(X)] AND      PRIOR ON USQR TO BE UNIFORM OVER [0, 1.5 * VARIANCE(X)]. THIS      TENDS TO GIVE BETTER RESULTS WITH FEWER GAUSSIANS. (B.KELLY, MAY      2007)    - FIXED BUG SO THE ITERATION COUNT RESET AFTER THE BURNIN STAGE      WHEN SILENT = 1 (B. KELLY, JUNE 2009)    - FIXED BUG WHEN UPDATING MU VIA THE METROPOLIS-HASTING      UPDATE. PREVIOUS VERSIONS DID NO INDEX MUHAT, SO ONLY MUHAT[0]      WAS USED IN THE PROPOSAL DISTRIBUTION. THANKS TO AMY BENDER FOR      POINTING THIS OUT. (B. KELLY, DEC 2011)  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/linmix_err.html#linmix_atanh", "linmix_atanh", 'routine in <a href="idlastro/linmix_err.html">linmix_err.pro</a>', "linmix_err.pro", "", "linmix_atanh", "", "x", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/linmix_err.html#linmix_robsig", "linmix_robsig", 'routine in <a href="idlastro/linmix_err.html">linmix_err.pro</a>', "linmix_err.pro", "", "linmix_robsig", "", "x", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/linmix_err.html#loglik_mixerr", "loglik_mixerr", 'routine in <a href="idlastro/linmix_err.html">linmix_err.pro</a>', "linmix_err.pro", "", "loglik_mixerr", "", "xyxvaryvarxycovdeltathetapimutausqrGlabel", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/linmix_err.html#logprior_mixerr", "logprior_mixerr", 'routine in <a href="idlastro/linmix_err.html">linmix_err.pro</a>', "linmix_err.pro", "", "logprior_mixerr", "", "mumu0tausqrusqrwsqr", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/linmix_err.html#linmix_metro_update", "linmix_metro_update", 'routine in <a href="idlastro/linmix_err.html">linmix_err.pro</a>', "linmix_err.pro", "", "linmix_metro_update", "", "logpost_newlogpost_oldseedlog_jrat", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/linmix_err.html#linmix_metro_results", "linmix_metro_results", 'routine in <a href="idlastro/linmix_err.html">linmix_err.pro</a>', "linmix_err.pro", "", "linmix_metro_results", "", "aratengauss", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/linmix_err.html#linmix_err", "linmix_err", 'routine in <a href="idlastro/linmix_err.html">linmix_err.pro</a>', "linmix_err.pro", "", "linmix_err", "", "xsigysigxycovdeltangaussmetrosilentminitermaxiterxypost", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/linterp.html", "linterp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "linterp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/linterp.html#linterp", "linterp", 'routine in <a href="idlastro/linterp.html">linterp.pro</a>', "linterp.pro", "", "linterp", " NAME:        LINTERP  PURPOSE:        Linearly interpolate tabulated 1-d data from one grid to a new one.  EXPLANATION:        The results of LINTERP are numerically equivalent to the IDL intrinsic        INTERPOL() function, but note the following:          (1) LINTERP is a procedure rather than a function          (2) INTERPOL() extrapolates beyond the end points whereas LINTERP              truncates to the endpoints (or uses the MISSING keyword)          (3) LINTERP (unlike INTERPOL) uses the intrinsic INTERPOLATE function                  and thus may have a speed advantage          (4) LINTERP always converts the new grid vector to floating point                 (because INTERPOLATE does this) whereas INTERPOL() will                  keep double precision if supplied.         Use QUADTERP for quadratic interpolation.   CALLING SEQUENCE:        LINTERP, Xtab, Ytab, Xint, Yint, [MISSING =, /NoInterp ]   INPUT PARAMETERS:        Xtab -  Vector containing the current independent variable grid.                Must be monotonic increasing or decreasing        Ytab -  Vector containing the current dependent variable values at                the XTAB grid points.        Xint -  Scalar or vector containing the new independent variable grid                points for which interpolated value(s) of the dependent                variable are sought.    Note that -- due to a limitation of the                intrinsic INTERPOLATE() function -- Xint is always converted to                floating point internally.   OUTPUT PARAMETERS:        Yint  -  Scalar or vector with the interpolated value(s) of the                dependent variable at the XINT grid points.                YINT is double precision if XTAB or YTAB are double,                otherwise YINT is REAL*4   OPTIONAL INPUT KEYWORD:        MISSING - Scalar specifying YINT value(s) to be assigned, when Xint                value(s) are outside of the range of Xtab.     Default is to                truncate the out of range YINT value(s) to the nearest value                of YTAB.   See the help for the INTERPOLATE function.        /NoINTERP - If supplied then LINTERP returns the YTAB value(s)                associated with the closest XTAB value(s)rather than                interpolating.   EXAMPLE:        To linearly interpolate from a spectrum wavelength-flux pair        Wave, Flux to another wavelength grid defined as:        WGrid = [1540., 1541., 1542., 1543., 1544, 1545.]         IDL&gt;  LINTERP, Wave, Flux, WGrid, FGrid         FGRID will be a 6 element vector containing the values of Flux        linearly interpolated onto the WGrid wavelength scale   PROCEDURE:        Uses TABINV to calculate the effective index of the values        in Xint in the table Xtab.  The resulting index is used        with the intrinsic INTERPOLATE function to find the corresponding        Yint value in Ytab.  Unless the MISSING keyword is supplied, out        of range Yint values are truncated to the nearest value of Ytab.   PROCEDURES CALLED:        TABINV, ZPARCHECK  MODIFICATION HISTORY:        Adapted from the IUE RDAF,  W. Landsman      October, 1988        Modified to use the new INTERPOLATE function        June, 1992        Modified to always return REAL*4             October, 1992        Added MISSING keyword                        August, 1993        Converted to IDL V5.0   W. Landsman   September 1997        Added NoInterp keyword  W. Landsman      July 1999        Work for unsigned, 64 bit integers  W. Landsman  October 2001  ", "MISSINGNoInterpXtabYtabXintYint", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/list_selector.html", "list_selector.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "list_selector.pro", "", "", " NAME:    LIST_SELECTOR   PURPOSE:     The purpose of this function is to implement a pop-up dialog widget    for the purpose of selecting  names . Names can be names of variables,    names of files, etc. Any string array can be used.   CALLING SEQUENCE:     selectedNames = List_Selector(theNames)   ARGUMENTS:     theNames:       A string array of potential  names  that can be selected.   KEYWORDS:     ALL:            Set this keyword if you wish all the names to be selected                    initially.     CANCEL:         An output keyword set to 1 if the user cancels or quits the                    program without hitting the Accept button. Set to 0 if a proper                    selection was made and the use hits the Accept button.     COUNT:          An output keyword containing the number of elements in the return array.     GROUP_LEADER:   The widget identifier of a widget who will be the group leader                    for this dialog. Passing a group leader is the *only* way to                    assure the dialog will be a MODAL dialog (as opposed to a blocking                    dialog). A GROUP_LEADER is required if you will be using this                    function in an IDL Virtual Machine application.     LABEL:          A string that will be placed on a label above the selections.                    If not used, no label is used in the program.     LIST_COUNTER:   If this keyword is set, a number is associated and displayed with                    each list item, starting with the number 1.     TITLE:          A string that is used for the title of the dialog window. If                    undefined, then  Selection Widget  is used.     SELECTED_INDICES: An output vector of the selected indices from theNames array.   RETURN VALUE:     selectedNames:  Typically, an array of selected names. If there is only one item                    in the selection, the variable will be a scalar string.   EXAMPLE:     See the List_Selector_Test procedure below. I use the program to allow the    user to select the names of scientific data sets in an HDF file for further    reading and processing.   MODIFICATION HISTORY:     Written by David W. Fanning, 11 January 2009, based on Name_Selector program.    Added  Accept on Double-Click  functionality. 14 January 2009. DWF.    Added LIST_COUNTER keyword. 25 May 2009. DWF.    Well, basically a RE-DO of yesterday's work, although done correctly today. 26 May 2009. DWF.    Fixed a problem when the user double-clicks an item in the list. 8 August 2009. DWF.    Double clicks are a problem with UNIX machines because &lt;CR&gt; sets event.clicks = 2       prematurely. Removed double-click functionality from all but Windows machines. 9 Feb 2012. DWF.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/list_selector.html#List_Selector_Button_Events", "List_Selector_Button_Events", 'routine in <a href="coyote/list_selector.html">list_selector.pro</a>', "list_selector.pro", "", "List_Selector_Button_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/list_selector.html#List_Selector_Click_Events", "List_Selector_Click_Events", 'routine in <a href="coyote/list_selector.html">list_selector.pro</a>', "list_selector.pro", "", "List_Selector_Click_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/list_selector.html#List_Selector_Size_Events", "List_Selector_Size_Events", 'routine in <a href="coyote/list_selector.html">list_selector.pro</a>', "list_selector.pro", "", "List_Selector_Size_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/list_selector.html#List_Selector_Test", "List_Selector_Test", 'routine in <a href="coyote/list_selector.html">list_selector.pro</a>', "list_selector.pro", "", "List_Selector_Test", "", "MORENAMESLIST_COUNTERSELECTED_INDICES", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/list_selector.html#List_Selector", "List_Selector", 'routine in <a href="coyote/list_selector.html">list_selector.pro</a>', "list_selector.pro", "", "List_Selector", "", "ALLCANCELCOUNTLABELLIST_COUNTERNUMCOLSSELECTED_INDICESTITLEGROUP_LEADERtheNames", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/list_with_path.html", "list_with_path.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "list_with_path.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/list_with_path.html#LIST_WITH_PATH", "LIST_WITH_PATH", 'routine in <a href="idlastro/list_with_path.html">list_with_path.pro</a>', "list_with_path.pro", "", "LIST_WITH_PATH", " NAME: 	LIST_WITH_PATH  PURPOSE: 	Search for files in a specified directory path.  EXPLANATION: 	Lists files in a set of default paths, similar to using FILE_SEARCH, 	except that a list of paths to be searched can be given.   CALLING SEQUENCE: 	Result = LIST_WITH_PATH( FILENAME, PATHS )   INPUTS: 	FILENAME   = Name of file to be searched for.  It may contain wildcard 		     characters, e.g.  *.dat .  	PATHS	   = One or more default paths to use in the search in case 		     FILENAME does not contain a path itself.  The individual 		     paths are separated by commas, although in UNIX, colons 		     can also be used.  In other words, PATHS has the same 		     format as !PATH, except that commas can be used as a 		     separator regardless of operating system.  The current 		     directory is always searched first, unless the keyword 		     NOCURRENT is set.  		     A leading $ can be used in any path to signal that what 		     follows is an environmental variable, but the $ is not 		     necessary.    Environmental variables can themselves                     contain multiple paths.   OUTPUTS: 	The result of the function is a list of filenames.  EXAMPLE: 	FILENAME = '' 	READ, 'File to open: ', FILENAME 	FILE = LIST_WITH_PATH( FILENAME, 'SERTS_DATA', '.fix' ) 	IF FILE NE '' THEN ...  PROCEDURE CALLS: 	BREAK_PATH, CONCAT_DIR()  Category    : 	Utilities, Operating_system  REVISION HISTORY: 	Version 1, William Thompson, GSFC, 3 November 1994 	Documentation modified Wayne Landsman HSTX  November 1994 	Assume since V5.5, vector call to FILE_SEARCH()  W. Landsman Sep 2006        Restore pre-Sep 2006 behavior of not searching subdirectories                       W.Landsman. Feb 2007  ", "NOCURRENTCOUNTFILENAMEPATHS", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/localmax.html", "localmax.pro", '.pro file in <a href="code_snapshots/orig_version/obsolete_files/dir-overview.html">code_snapshots/orig_version/obsolete_files/ directory</a>', "localmax.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/localmax.html#localmax", "localmax", 'routine in <a href="code_snapshots/orig_version/obsolete_files/localmax.html">localmax.pro</a>', "localmax.pro", "", "localmax", "", "imgfloorceiling", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/obsolete_files/localmax.html", "localmax.pro", '.pro file in <a href="sep20/obsolete_files/dir-overview.html">sep20/obsolete_files/ directory</a>', "localmax.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/obsolete_files/localmax.html#localmax", "localmax", 'routine in <a href="sep20/obsolete_files/localmax.html">localmax.pro</a>', "localmax.pro", "", "localmax", "", "imgfloorceiling", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/localmax.html", "localmax.pro", '.pro file in <a href="code_snapshots/sep11/obsolete_files/dir-overview.html">code_snapshots/sep11/obsolete_files/ directory</a>', "localmax.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/localmax.html#localmax", "localmax", 'routine in <a href="code_snapshots/sep11/obsolete_files/localmax.html">localmax.pro</a>', "localmax.pro", "", "localmax", "", "imgfloorceiling", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/localmax.html", "localmax.pro", '.pro file in <a href="code_snapshots/albert_version/obsolete_files/dir-overview.html">code_snapshots/albert_version/obsolete_files/ directory</a>', "localmax.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/localmax.html#localmax", "localmax", 'routine in <a href="code_snapshots/albert_version/obsolete_files/localmax.html">localmax.pro</a>', "localmax.pro", "", "localmax", "", "imgfloorceiling", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/localmax.html", "localmax.pro", '.pro file in <a href="code_snapshots/jul25/obsolete_files/dir-overview.html">code_snapshots/jul25/obsolete_files/ directory</a>', "localmax.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/localmax.html#localmax", "localmax", 'routine in <a href="code_snapshots/jul25/obsolete_files/localmax.html">localmax.pro</a>', "localmax.pro", "", "localmax", "", "imgfloorceiling", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/localmax.html", "localmax.pro", '.pro file in <a href="code_snapshots/test_version/obsolete_files/dir-overview.html">code_snapshots/test_version/obsolete_files/ directory</a>', "localmax.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/localmax.html#localmax", "localmax", 'routine in <a href="code_snapshots/test_version/obsolete_files/localmax.html">localmax.pro</a>', "localmax.pro", "", "localmax", "", "imgfloorceiling", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/public/loglevels.html", "loglevels.pro", '.pro file in <a href="coyote/public/dir-overview.html">coyote/public/ directory</a>', "loglevels.pro", "", "", " NAME:         LOGLEVELS (function)   PURPOSE:         Compute default values for logarithmic axis labeling         or contour levels. For a range from 1 to 100 these         would be 1., 2., 5., 10., 20., 50., 100.         If the range spans more than (usually) 3 decades, only         decadal values will be returned unless the /FINE keyword         is set.   CATEGORY:         Tools   CALLING SEQUENCE:         result = LOGLEVELS([range | MIN=min,MAX=max] [,/FINE], [COARSE=dec])   INPUTS:         RANGE -&gt; A 2-element vector with the minimum and maximum             value to be returned. Only levels _within_ this range             will be returned. If RANGE contains only one element,             this is interpreted as MAX and MIN will be assumed as             3 decades smaller. RANGE superseeds the MIN and MAX             keywords. Note that RANGE must be positive definite             but can be given in descending order in which case             the labels will be reversed.   KEYWORD PARAMETERS:         MIN, MAX -&gt; alternative way of specifying a RANGE. If only             one keyword is given, the other one is computed as             3 decades smaller/larger than the given parameter.             RANGE superseeds MIN and MAX.          /FINE -&gt; always return finer levels (1,2,5,...)          COARSE -&gt; the maximum number of decades for which LOGLEVELS             shall return fine labels. Default is 3. (non-integer             values are possible).   OUTPUTS:         A vector with  round  logarithmic values within the given         range. The original (or modified) RANGE will be returned         unchanged if RANGE does not span at least one label interval.         The result will always contain at least two elements.   SUBROUTINES:         none   REQUIREMENTS:         none   NOTES:         If COARSE is lt 0, the nearest decades will be returned         instead. The result will always have at least two elements.         If COARSE forces decades, the result values may be out-of-         range if RANGE spans less than a decade.          Caution with type conversion from FLOAT to DOUBLE !!   EXAMPLE:         range = [ min(data), max(data) ]         c_level = LOGLEVELS(range)         contour,...,c_level=c_level   MODIFICATION HISTORY:         mgs, 17 Mar 1999: VERSION 1.00   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/public/loglevels.html#loglevels", "loglevels", 'routine in <a href="coyote/public/loglevels.html">loglevels.pro</a>', "loglevels.pro", "", "loglevels", "", "minmaxcoarsefinerange", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/loglevels.html", "loglevels.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "loglevels.pro", "", "", " NAME:         LOGLEVELS (function)   PURPOSE:         Compute default values for logarithmic axis labeling         or contour levels. For a range from 1 to 100 these         would be 1., 2., 5., 10., 20., 50., 100.         If the range spans more than (usually) 3 decades, only         decadal values will be returned unless the /FINE keyword         is set.   CATEGORY:         Tools   CALLING SEQUENCE:         result = LOGLEVELS([range | MIN=min,MAX=max] [,/FINE], [COARSE=dec])   INPUTS:         RANGE -&gt; A 2-element vector with the minimum and maximum             value to be returned. Only levels _within_ this range             will be returned. If RANGE contains only one element,             this is interpreted as MAX and MIN will be assumed as             3 decades smaller. RANGE superseeds the MIN and MAX             keywords. Note that RANGE must be positive definite             but can be given in descending order in which case             the labels will be reversed.   KEYWORD PARAMETERS:         MIN, MAX -&gt; alternative way of specifying a RANGE. If only             one keyword is given, the other one is computed as             3 decades smaller/larger than the given parameter.             RANGE superseeds MIN and MAX.          /FINE -&gt; always return finer levels (1,2,5,...)          COARSE -&gt; the maximum number of decades for which LOGLEVELS             shall return fine labels. Default is 3. (non-integer             values are possible).   OUTPUTS:         A vector with  round  logarithmic values within the given         range. The original (or modified) RANGE will be returned         unchanged if RANGE does not span at least one label interval.         The result will always contain at least two elements.   SUBROUTINES:         none   REQUIREMENTS:         none   NOTES:         If COARSE is lt 0, the nearest decades will be returned         instead. The result will always have at least two elements.         If COARSE forces decades, the result values may be out-of-         range if RANGE spans less than a decade.          Caution with type conversion from FLOAT to DOUBLE !!   EXAMPLE:         range = [ min(data), max(data) ]         c_level = LOGLEVELS(range)         contour,...,c_level=c_level   MODIFICATION HISTORY:         mgs, 17 Mar 1999: VERSION 1.00   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/loglevels.html#loglevels", "loglevels", 'routine in <a href="coyote/loglevels.html">loglevels.pro</a>', "loglevels.pro", "", "loglevels", "", "minmaxcoarsefinerange", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/logscl.html", "logscl.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "logscl.pro", "", "", " NAME:        LOGSCL   PURPOSE:         This is a utility routine to perform a log intensity transformation        on an image. For exponent values greater than 1.0, the upper and        lower values of the image are compressed and centered on the mean.        Larger exponent values provide steeper compression. For exponent values        less than 1.0, the compression is similar to gamma compression. (See        IMGSCL.) See pages 68-70 in _Digital Image Processing with MATLAB_        by Gonzales, Wood, and Eddins. The function is used to improve contrast        in images.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         outputImage = LOGSCL(image)   ARGUMENTS:         image:         The image to be scaled. Written for 2D images, but arrays                       of any size are treated alike.   KEYWORDS:         EXPONENT:      The exponent in a log transformation. By default, 4.0.         MEAN:          Values on either side of the mean will be compressed by the log.                       The value is a normalized value between 0.0 and 1.0. By default, 0.5.         NEGATIVE:      If set, the  negative  of the result is returned.         MAX:           Any value in the input image greater than this value is                       set to this value before scaling.         MIN:           Any value in the input image less than this value is                       set to this value before scaling.         OMAX:          The output image is scaled between OMIN and OMAX. The                       default value is 255.         OMIN:          The output image is scaled between OMIN and OMAX. The                       default value is 0.  RETURN VALUE:         outputImage:   The output, scaled into the range OMIN to OMAX. A byte array.   COMMON BLOCKS:        None.   EXAMPLES:         cgLoadCT, 0                                       ; Gray-scale colors.        image = cgDemoData(22)                            ; Load image.        cgImage, image                                    ; No contrast.        cgImage, LogScl(image)                            ; Improved contrast.        cgImage, LogScl(image, Exponent=10, Mean=0.65)    ; Even more contrast.        cgImage, LogScl(image, /Negative, Exponent=5)     ; A negative image.   RESTRICTIONS:       Requires cgScaleVector from the Coyote Library:          http://www.idlcoyote.com/programs/cgScaleVector.pro   MODIFICATION HISTORY:         Written by:  David W. Fanning, 20 February 2006.        Fixed a problem with output scaling. 1 July 2009. DWF (with input from Bo Milvang-Jensen).  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/logscl.html#LogScl", "LogScl", 'routine in <a href="coyote/logscl.html">logscl.pro</a>', "logscl.pro", "", "LogScl", "", "EXPONENTMEANNEGATIVEMAXMINOMAXOMINimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/lsf_rotate.html", "lsf_rotate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "lsf_rotate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/lsf_rotate.html#lsf_rotate", "lsf_rotate", 'routine in <a href="idlastro/lsf_rotate.html">lsf_rotate.pro</a>', "lsf_rotate.pro", "", "lsf_rotate", " NAME:      LSF_ROTATE:   PURPOSE:      Create a 1-d convolution kernel to broaden a spectrum from a rotating star   EXPLANATION:      Can be used to derive the broadening effect (line spread function; LSF)      due to  rotation on a synthetic stellar spectrum.     Assumes constant      limb darkening across the disk.   CALLING SEQUENCE      lsf = LSF_ROTATE(deltav, vsini, EPSILON=, VELGRID=)   INPUT PARAMETERS:     deltaV - numeric scalar giving the step increment (in km/s) in the output              rotation kernel.     Vsini - the rotational velocity projected  along the line of sight (km/s)   OUTPUT PARAMETERS:     LSF - The convolution kernel vector for the specified rotational velocity.           The  number of points in LSF will be always be odd (the kernel is           symmetric) and equal to  either ceil(2*Vsini/deltav) or           ceil(2*Vsini/deltav) +1 (whichever number is odd).    LSF will           always be of type FLOAT.            To actually compute the broadening. the spectrum should be convolved           with the rotational LSF.  OPTIONAL INPUT PARAMETERS:     Epsilon - numeric scalar giving the limb-darkening coefficient,           default = 0.6 which is typical for  photospheric lines.    The           specific intensity I at any angle theta from the specific intensity           Icen at the center of the disk is given by:            I = Icen*(1-epsilon*(1-cos(theta))   OPTIONAL OUTPUT PARAMETER:      Velgrid - Vector with the same number of elements as LSF  EXAMPLE:     (1) Plot the LSF for a star rotating at 90 km/s in both velocity space and         for a central wavelength of 4300 A.    Compute the LSF every 3 km/s         IDL&gt; lsf = lsf_rotate(3,90,velgrid=vel)      ;LSF will contain 61 pts        IDL&gt; plot,vel,lsf                    ;Plot the LSF in velocity space        IDL&gt; wgrid = 4300*(1+vel/3e5)       ;Speed of light = 3e5 km/s        IDL&gt; oplot,wgrid,lsf                ;Plot in wavelength space   NOTES:     Adapted from rotin3.f in the SYNSPEC software of Hubeny & Lanz         .http://nova.astro.umd.edu/index.html    Also see Eq. 17.12 in      The Observation and Analysis of Stellar Photospheres  by D. Gray (1992)  REVISION HISTORY:     Written,   W. Landsman                November 2001  ", "EPSILONVELGRIDdeltavvsini", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/lumdist.html", "lumdist.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "lumdist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/lumdist.html#ldist", "ldist", 'routine in <a href="idlastro/lumdist.html">lumdist.pro</a>', "lumdist.pro", "", "ldist", " NAME:     LUMDIST   PURPOSE:     Calculate luminosity distance (in Mpc) of an object given its redshift  EXPLANATION:     The luminosity distance in the Friedmann-Robertson-Walker model is     taken from  Caroll, Press, and Turner (1992, ARAA, 30, 499), p. 511     Uses a closed form (Mattig equation) to compute the distance when the     cosmological constant is zero.   Otherwise integrates the function using     QSIMP.  CALLING SEQUENCE:     result = lumdist(z, [H0 = , k = , Omega_M =, Lambda0 = , q0 = ,/SILENT])   INPUTS:     z = redshift, positive scalar or vector   OPTIONAL KEYWORD INPUTS:     /SILENT - If set, the program will not display adopted cosmological         parameters at the terminal.     H0: Hubble parameter  in km/s/Mpc, default is 70          No more than two of the following four parameters should be         specified.   None of them need be specified -- the adopted defaults         are given.     k - curvature constant, normalized to the closure density.   Default is         0, indicating a flat universe     Omega_m -  Matter density, normalized to the closure density, default         is 0.3.   Must be non-negative     Lambda0 - Cosmological constant, normalized to the closure density,         default is 0.7     q0 - Deceleration parameter, numeric scalar = -R*(R'')/(R')^2, default         is -0.55   OUTPUTS:     The result of the function is the luminosity distance (in Mpc) for each     input value of z.   EXAMPLE:     (1) Plot the distance of a galaxy in Mpc as a function of redshift out         to z = 5.0, assuming the default cosmology (Omega_m=0.3, Lambda = 0.7,         H0 = 70 km/s/Mpc)          IDL&gt; z = findgen(50)/10.         IDL&gt; plot,z,lumdist(z),xtit='z',ytit='Distance (Mpc)'          Now overplot the relation for zero cosmological constant and         Omega_m=0.3         IDL&gt; oplot,z,lumdist(z,lambda=0,omega=0.3),linestyle=1  COMMENTS:     (1) Integrates using the IDL Astronomy Version procedure QSIMP.    (The     intrinsic IDL QSIMP function is not called because of its ridiculous     restriction that only scalar arguments can be passed to the integrating     function.)     (2) Can fail to converge at high redshift for closed universes with     non-zero lambda.   This can presumably be fixed by replacing QSIMP with     an integrator that can handle a singularity  PROCEDURES CALLED:     COSMO_PARAM, QSIMP  REVISION HISTORY:     Written   W. Landsman        Raytheon ITSS       April 2000     Avoid integer overflow for more than 32767 redshifts  July 2001     Use double precision J. Moustakas/W. Landsman April 2008  ", "q0lambda0z", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/lumdist.html#lumdist", "lumdist", 'routine in <a href="idlastro/lumdist.html">lumdist.pro</a>', "lumdist.pro", "", "lumdist", "", "h0kLambda0Omega_mq0Silentz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mag2flux.html", "mag2flux.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mag2flux.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mag2flux.html#mag2flux", "mag2flux", 'routine in <a href="idlastro/mag2flux.html">mag2flux.pro</a>', "mag2flux.pro", "", "mag2flux", " NAME: 	MAG2FLUX  PURPOSE: 	Convert from magnitudes to flux (ergs/s/cm^2/A).  EXPLANATION: 	Use FLUX2MAG() for the opposite direction.   CALLING SEQUENCE: 	flux = mag2flux( mag, [ zero_pt, ABwave = ] )   INPUTS: 	mag - scalar or vector of magnitudes   OPTIONAL INPUT: 	zero_pt - scalar giving the zero point level of the magnitude. 		If not supplied then zero_pt = 21.1 (Code et al. 1976)                Ignored if the ABwave keyword is set.   OPTIONAL KEYWORD INPUT:      ABwave - wavelength scalar or vector in Angstroms.   If supplied, then               the input vector, mag, is assumed to contain Oke AB magnitudes               (Oke & Gunn 1983, ApJ, 266, 713)   OUTPUT: 	flux - scalar or vector flux vector, in erg cm-2 s-1 A-1               If the ABwave keyword is set, then the flux is given by                f = 10^(-0.4*(mag +2.406 + 4*alog10(ABwave)))                Otherwise the flux is given by               f =  10^(-0.4*(mag + zero_pt))   EXAMPLE:        Suppose one is given vectors of wavelengths and AB magnitudes, w (in        Angstroms) and mag.   Plot the spectrum in erg cm-2 s-1 A-1         IDL&gt; plot, w, mag2flux(mag,ABwave = w)  REVISION HISTORY: 	Written    J. Hill        STX Co.       1988 	Converted to IDL V5.0   W. Landsman   September 1997        Added ABwave keyword,   W. Landsman   September 1998  ", "ABwavemagzero_pt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mag2geo.html", "mag2geo.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mag2geo.pro", "", "", " NAME:       MAG2GEO()   PURPOSE:      Convert from geomagnetic to geographic coordinates   EXPLANATION:       Converts from GEOMAGNETIC (latitude,longitude) to GEOGRAPHIC (latitude,     longitude).    (altitude remains the same)   CALLING SEQUENCE:        gcoord=mag2geo(mcoord)   INPUT:        mcoord = a 2-element array of magnetic [latitude,longitude], or an                 array [2,n] of n such coordinates.   KEYWORD INPUTS:                None   OUTPUT:        a 2-element array of geographic [latitude,longitude], or an array [2,n]             of n such coordinates   COMMON BLOCKS:                None   EXAMPLES:        IDL&gt; gcoord=mag2geo([90,0])       ; coordinates of magnetic south pole        IDL&gt; print,gcoord        79.300000      -71.409990   MODIFICATION HISTORY:        Written by Pascal Saint-Hilaire (Saint-Hilaire@astro.phys.ethz.ch),         May 2002  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mag2geo.html#mag2geo", "mag2geo", 'routine in <a href="idlastro/mag2geo.html">mag2geo.pro</a>', "mag2geo.pro", "", "mag2geo", "", "incoord", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/make_2d.html", "make_2d.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "make_2d.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/make_2d.html#make_2d", "make_2d", 'routine in <a href="idlastro/make_2d.html">make_2d.pro</a>', "make_2d.pro", "", "make_2d", " NAME:        MAKE_2D  PURPOSE:        Change from 1-d indexing to 2-d indexing  EXPLANATION:        Convert an N element X vector, and an M element Y vector, into        N x M arrays giving all possible combination of X and Y pairs.        Useful for obtaining the X and Y positions of each element of        a regular grid.   CALLING SEQUENCE:        MAKE_2D, X, Y, [ XX, YY ]   INPUTS:        X - N element vector of X positions        Y - M element vector of Y positions   OUTPUTS:        XX - N x M element array giving the X position at each pixel        YY - N x M element array giving the Y position of each pixel                If only 2 parameters are supplied then X and Y will be                updated to contain the output arrays   EXAMPLE:        To obtain the X and Y position of each element of a 30 x 15 array         IDL&gt; x = indgen(30)  &  y = indgen(15)        IDL&gt; make_2d, x, y  REVISION HISTORY:        Written,    Wayne Landsman    ST Systems Co.    May, 1988        Added /NOZERO keyword       W. Landsman         Mar, 1991        Converted to IDL V5.0   W. Landsman   September 1997        Improved speed          P. Broos      July 2000  ", "xyxxyy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/make_astr.html", "make_astr.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "make_astr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/make_astr.html#make_astr", "make_astr", 'routine in <a href="idlastro/make_astr.html">make_astr.pro</a>', "make_astr.pro", "", "make_astr", " NAME:        MAKE_ASTR  PURPOSE:        Build an astrometry structure from input parameter values  EXPLANATION:        This structure can be subsequently placed in a FITS header with        PUTAST   CALLING SEQUENCE:        MAKE_ASTR, astr, CD = , DELT =, CRPIX =, CRVAL =, CTYPE =,                LATPOLE = , LONGPOLE =, PV2_1 = PV2_2 = , PV2_3 =   OUTPUT PARAMETER:        ASTR - Anonymous structure containing astrometry info.  See the               documentation for EXTAST for descriptions of the individual               tags   REQUIRED INPUT KEYWORDS        CRPIX - 2 element vector giving X and Y coordinates of reference pixel                (def = NAXIS/2).  VALUES MUST BE IN FITS CONVENTION (first pixel                is [1,1]) AND NOT IDL CONVENTION (first pixel is [0,0]).        CRVAL - 2 element double precision vector giving R.A. and DEC of                reference pixel in DEGREES  OPTIONAL INPUT KEYWORDS        CD -  2 x 2 array containing the astrometry parameters CD1_1 CD1_2               in DEGREES/PIXEL                                CD2_1 CD2_2        DELT - 2 element vector giving physical increment at reference pixel               in DEGREES/PIXEL default = [-1.0D, 1.0D]/3600.  (1 arcsec/pixel)        CTYPE - 2 element string vector giving projection types, default               ['RA---TAN','DEC--TAN']        LATPOLE - Scalar latitude of the north pole, default = 0        LONGPOLE - scalar longitude of north pole, default = 180                 Note that the default value of 180 is valid only for zenithal                projections; it should be set to PV2_1 for conic projections,                and zero for other projections.        PV2 - Vector of projection parameters.   Not required for some              projections (e.g. TAN) and optional for others (e.g. SIN).              Usually a 2 element vector, but may contain up to 21 elements              for the Zenithal Polynomial (ZPN) projection.   Corresponds to              the keywords PV2_1, PV2_2...  Defaults to 0.0   NOTES:        (1) An anonymous structure is created to avoid structure definition                conflicts.    This is needed because some projection systems                require additional dimensions (i.e. spherical cube                projections require a specification of the cube face).        (2) The name of the keyword for the CDELT parameter is DELT because                the IDL keyword CDELT would conflict with the CD keyword        (3) The astrometry structure definition was slightly modified in                July 2003; all angles are now double precision, and the                LATPOLE tag was added.   In April 2007 the CRPIX tag was also                changed to double precision.  REVISION HISTORY:        Written by   W. Landsman              Mar. 1994        Added LATPOLE, all angles double precision  W. Landsman July 2003        Use PV2 keyword rather than PROJP1, PROJP2 W. Landsman May 2004        Make .CRPIX tag double precision, change CDELT default to 1 /pixel                       W. Landsman April 2007         Default plate scale is now 1 /pixel (not 1 deg/pix)  WL  Oct. 2010         Oct 2010 change should only apply when CD matrix not given                      M. Cushing/W.L.  Aug 2011  ", "CDDELTACRPIXCRVALCTYPELATPOLELONGPOLEPV2astr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/makelimbstrips.html", "makelimbstrips.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "makelimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/makelimbstrips.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/obsolete_code/makelimbstrips.html">makelimbstrips.pro</a>', "makelimbstrips.pro", "", "makelimbstrips", "       Makes limb strips from full-length strips   ", "nstrips           How many strips to select, centered around the row/col diameter  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time   thresh           Threshold used to select pixels   xstripsystripsfile           File to be read in  ministrip_length           How long the total array of the cut-down strip will be  scan_width           Indicates how far apart to scan  sigmavalue           Sets the threshold to be:            max(image) - sigmavalue*stddev(image)   sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  ", "          -1", "   Exactly how much data should be stored in a structure? Since we're interested in saving space,    doesn't make sense to repeat any data in the structures.  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/makelimbstrips.html", "makelimbstrips.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "makelimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/makelimbstrips.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/albert_version/makelimbstrips.html">makelimbstrips.pro</a>', "makelimbstrips.pro", "", "makelimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/makelimbstrips.html", "makelimbstrips.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "makelimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/makelimbstrips.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/aug22_notworking/makelimbstrips.html">makelimbstrips.pro</a>', "makelimbstrips.pro", "", "makelimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/makelimbstrips.html", "makelimbstrips.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "makelimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/makelimbstrips.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/jul25/makelimbstrips.html">makelimbstrips.pro</a>', "makelimbstrips.pro", "", "makelimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/makelimbstrips.html", "makelimbstrips.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "makelimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/makelimbstrips.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/test_version/makelimbstrips.html">makelimbstrips.pro</a>', "makelimbstrips.pro", "", "makelimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/makelimbstrips.html", "makelimbstrips.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "makelimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/makelimbstrips.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/orig_version/makelimbstrips.html">makelimbstrips.pro</a>', "makelimbstrips.pro", "", "makelimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/makeskinnylimbstrips.html", "makeskinnylimbstrips.pro", '.pro file in <a href="code_snapshots/test_version/obsolete_files/dir-overview.html">code_snapshots/test_version/obsolete_files/ directory</a>', "makeskinnylimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/makeskinnylimbstrips.html#makeskinnylimbstrips", "makeskinnylimbstrips", 'routine in <a href="code_snapshots/test_version/obsolete_files/makeskinnylimbstrips.html">makeskinnylimbstrips.pro</a>', "makeskinnylimbstrips.pro", "", "makeskinnylimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/makeskinnylimbstrips.html", "makeskinnylimbstrips.pro", '.pro file in <a href="code_snapshots/orig_version/obsolete_files/dir-overview.html">code_snapshots/orig_version/obsolete_files/ directory</a>', "makeskinnylimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/makeskinnylimbstrips.html#makeskinnylimbstrips", "makeskinnylimbstrips", 'routine in <a href="code_snapshots/orig_version/obsolete_files/makeskinnylimbstrips.html">makeskinnylimbstrips.pro</a>', "makeskinnylimbstrips.pro", "", "makeskinnylimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/makeskinnylimbstrips.html", "makeskinnylimbstrips.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "makeskinnylimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/makeskinnylimbstrips.html#makeskinnylimbstrips", "makeskinnylimbstrips", 'routine in <a href="code_snapshots/aug22_notworking/makeskinnylimbstrips.html">makeskinnylimbstrips.pro</a>', "makeskinnylimbstrips.pro", "", "makeskinnylimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/obsolete_files/makeskinnylimbstrips.html", "makeskinnylimbstrips.pro", '.pro file in <a href="sep20/obsolete_files/dir-overview.html">sep20/obsolete_files/ directory</a>', "makeskinnylimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/obsolete_files/makeskinnylimbstrips.html#makeskinnylimbstrips", "makeskinnylimbstrips", 'routine in <a href="sep20/obsolete_files/makeskinnylimbstrips.html">makeskinnylimbstrips.pro</a>', "makeskinnylimbstrips.pro", "", "makeskinnylimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/makeskinnylimbstrips.html", "makeskinnylimbstrips.pro", '.pro file in <a href="code_snapshots/albert_version/obsolete_files/dir-overview.html">code_snapshots/albert_version/obsolete_files/ directory</a>', "makeskinnylimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/makeskinnylimbstrips.html#makeskinnylimbstrips", "makeskinnylimbstrips", 'routine in <a href="code_snapshots/albert_version/obsolete_files/makeskinnylimbstrips.html">makeskinnylimbstrips.pro</a>', "makeskinnylimbstrips.pro", "", "makeskinnylimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/makeskinnylimbstrips.html", "makeskinnylimbstrips.pro", '.pro file in <a href="code_snapshots/jul25/obsolete_files/dir-overview.html">code_snapshots/jul25/obsolete_files/ directory</a>', "makeskinnylimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/makeskinnylimbstrips.html#makeskinnylimbstrips", "makeskinnylimbstrips", 'routine in <a href="code_snapshots/jul25/obsolete_files/makeskinnylimbstrips.html">makeskinnylimbstrips.pro</a>', "makeskinnylimbstrips.pro", "", "makeskinnylimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/makeskinnylimbstrips.html", "makeskinnylimbstrips.pro", '.pro file in <a href="code_snapshots/sep11/obsolete_files/dir-overview.html">code_snapshots/sep11/obsolete_files/ directory</a>', "makeskinnylimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/makeskinnylimbstrips.html#makeskinnylimbstrips", "makeskinnylimbstrips", 'routine in <a href="code_snapshots/sep11/obsolete_files/makeskinnylimbstrips.html">makeskinnylimbstrips.pro</a>', "makeskinnylimbstrips.pro", "", "makeskinnylimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/makeslimlimbstrips.html", "makeslimlimbstrips.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "makeslimlimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/makeslimlimbstrips.html#makeslimlimbstrips", "makeslimlimbstrips", 'routine in <a href="sep20/makeslimlimbstrips.html">makeslimlimbstrips.pro</a>', "makeslimlimbstrips.pro", "", "makeslimlimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/makeslimlimbstrips.html", "makeslimlimbstrips.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "makeslimlimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/makeslimlimbstrips.html#makeslimlimbstrips", "makeslimlimbstrips", 'routine in <a href="code_snapshots/test_version/makeslimlimbstrips.html">makeslimlimbstrips.pro</a>', "makeslimlimbstrips.pro", "", "makeslimlimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/makeslimlimbstrips.html", "makeslimlimbstrips.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "makeslimlimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/makeslimlimbstrips.html#makeslimlimbstrips", "makeslimlimbstrips", 'routine in <a href="code_snapshots/aug22_notworking/makeslimlimbstrips.html">makeslimlimbstrips.pro</a>', "makeslimlimbstrips.pro", "", "makeslimlimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/makeslimlimbstrips.html", "makeslimlimbstrips.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "makeslimlimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/makeslimlimbstrips.html#makeslimlimbstrips", "makeslimlimbstrips", 'routine in <a href="code_snapshots/jul25/makeslimlimbstrips.html">makeslimlimbstrips.pro</a>', "makeslimlimbstrips.pro", "", "makeslimlimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/makeslimlimbstrips.html", "makeslimlimbstrips.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "makeslimlimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/makeslimlimbstrips.html#makeslimlimbstrips", "makeslimlimbstrips", 'routine in <a href="code_snapshots/albert_version/makeslimlimbstrips.html">makeslimlimbstrips.pro</a>', "makeslimlimbstrips.pro", "", "makeslimlimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/makeslimlimbstrips.html", "makeslimlimbstrips.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "makeslimlimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/makeslimlimbstrips.html#makeslimlimbstrips", "makeslimlimbstrips", 'routine in <a href="code_snapshots/orig_version/makeslimlimbstrips.html">makeslimlimbstrips.pro</a>', "makeslimlimbstrips.pro", "", "makeslimlimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/makeslimlimbstrips.html", "makeslimlimbstrips.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "makeslimlimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/makeslimlimbstrips.html#makeslimlimbstrips", "makeslimlimbstrips", 'routine in <a href="code_snapshots/sep11/makeslimlimbstrips.html">makeslimlimbstrips.pro</a>', "makeslimlimbstrips.pro", "", "makeslimlimbstrips", "       Makes limb strips from whole strips   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/makestrips.html", "makestrips.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "makestrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/makestrips.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/orig_version/makestrips.html">makestrips.pro</a>', "makestrips.pro", "", "makestrips", "       Makes strips using approx centroiding method to make cropped areas   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/makestrips.html", "makestrips.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "makestrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/makestrips.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/albert_version/makestrips.html">makestrips.pro</a>', "makestrips.pro", "", "makestrips", "       Makes strips using approx centroiding method to make cropped areas   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/makestrips.html", "makestrips.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "makestrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/makestrips.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/test_version/makestrips.html">makestrips.pro</a>', "makestrips.pro", "", "makestrips", "       Makes strips using approx centroiding method to make cropped areas   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/makestrips.html", "makestrips.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "makestrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/makestrips.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/obsolete_code/makestrips.html">makestrips.pro</a>', "makestrips.pro", "", "makestrips", "		Only saves 5 strips centered around the solar diameter to reduce the amount of limb-        	darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.   ", "nstripsregiontimethreshxstripsystripsfilescan_widthsigmavaluesundiam", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/makestrips.html", "makestrips.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "makestrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/makestrips.html#makestrips", "makestrips", 'routine in <a href="sep20/makestrips.html">makestrips.pro</a>', "makestrips.pro", "", "makestrips", "       Makes strips using approx centroiding method to make cropped areas   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   fixfid           Strucutre comtaining the fiducial positions to be used for chord checking.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/makestrips.html", "makestrips.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "makestrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/makestrips.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/sep11/makestrips.html">makestrips.pro</a>', "makestrips.pro", "", "makestrips", "       Makes strips using approx centroiding method to make cropped areas   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   fixfid           If set, marks the second run of centroidwholesuns and attempts to fix any chord slicing if the chord edge crosses a fiducial.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/makestrips.html", "makestrips.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "makestrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/makestrips.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/jul25/makestrips.html">makestrips.pro</a>', "makestrips.pro", "", "makestrips", "       Makes strips using approx centroiding method to make cropped areas   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/makestrips.html", "makestrips.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "makestrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/makestrips.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/aug22_notworking/makestrips.html">makestrips.pro</a>', "makestrips.pro", "", "makestrips", "       Makes strips using approx centroiding method to make cropped areas   ", "inputstruct           Structure containing all the solar information   inputimage           The raw input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/makestrips_may8.html", "makestrips_may8.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "makestrips_may8.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/makestrips_may8.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/obsolete_code/makestrips_may8.html">makestrips_may8.pro</a>', "makestrips_may8.pro", "", "makestrips", "       Only saves 5 strips centered around the solar diameter to reduce the amount of limb-            darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.   ", "region       Which sun out of the three to find the center of. Defaults to the brightest sun  time       Prints elapsed time  thresh       Threshold used to select pixels  xstrips       Structure containing row strips  ystrips       Structure containing column strips   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/match.html", "match.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "match.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/match.html#match", "match", 'routine in <a href="idlastro/match.html">match.pro</a>', "match.pro", "", "match", " NAME:        MATCH  PURPOSE:        Routine to match values in two vectors.   CALLING SEQUENCE:        match, a, b, suba, subb, [ COUNT =, /SORT, EPSILON =  ]   INPUTS:        a,b - two vectors to match elements, numeric or string data types   OUTPUTS:        suba - subscripts of elements in vector a with a match                in vector b        subb - subscripts of the positions of the elements in                vector b with matchs in vector a.         suba and subb are ordered such that a[suba] equals b[subb]   OPTIONAL INPUT KEYWORD:        /SORT - By default, MATCH uses two different algorithm: (1) the                /REVERSE_INDICES keyword to HISTOGRAM is used for integer data,                while (2) a sorting algorithm is used for non-integer data.  The                histogram algorithm is usually faster, except when the input                vectors are sparse and contain very large numbers, possibly                causing memory problems.   Use the /SORT keyword to always use                the sort algorithm.        epsilon - if values are within epsilon, they are considered equal. Used only                only for non-integer matching.  Note that input vectors should                be unique to within epsilon to provide one-to-one mapping..                Default=0.   OPTIONAL KEYWORD OUTPUT:        COUNT - set to the number of matches, integer scalar   SIDE EFFECTS:        The obsolete system variable !ERR is set to the number of matches;        however, the use !ERR is deprecated in favor of the COUNT keyword   RESTRICTIONS:        The vectors a and b should not have duplicate values within them.        You can use rem_dup function to remove duplicate values        in a vector   EXAMPLE:        If a = [3,5,7,9,11]   & b = [5,6,7,8,9,10]        then                IDL&gt; match, a, b, suba, subb, COUNT = count         will give suba = [1,2,3], subb = [0,2,4],  COUNT = 3        and       a[suba] = b[subb] = [5,7,9]   METHOD:        For non-integer data types, the two input vectors are combined and        sorted and the consecutive equal elements are identified.   For integer        data types, the /REVERSE_INDICES keyword to HISTOGRAM of each array        is used to identify where the two arrays have elements in common.  HISTORY:        D. Lindler  Mar. 1986.        Fixed  indgen  call for very large arrays   W. Landsman  Sep 1991        Added COUNT keyword    W. Landsman   Sep. 1992        Fixed case where single element array supplied   W. Landsman Aug 95        Use a HISTOGRAM algorithm for integer vector inputs for improved              performance                W. Landsman         March 2000        Work again for strings           W. Landsman         April 2000        Use size(/type)                  W. Landsman         December 2002        Work for scalar integer input    W. Landsman         June 2003        Assume since V5.4, use COMPLEMENT to WHERE() W. Landsman Apr 2006        Added epsilon keyword            Kim Tolbert         March 14, 2008  ", "COUNTSORTepsilonabsubasubb", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/match2.html", "match2.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "match2.pro", "", "", " NAME:        MATCH2  PURPOSE:        Routine to cross-match values in two vectors (including non-matches)  EXPLANATION:        This procedure *appears* similar to MATCH of the IDL astronomy        library.  However, this routine is quite different in that it        reports an index value for each element of the input arrays.        In other words, while MATCH reports the *existence* of        matching elements in each array, MATCH2 reports explicitly        *which* elements match.         Furthermore, while MATCH reports only unique matching        elements, MATCH2 will always report a cross-match for every        element in each array, even if it is a repeat.         In cases where no match was found, an index of -1 is        reported.   CALLING SEQUENCE:        match2, a, b, suba, subb   INPUTS:        a,b - two vectors to match elements, numeric or string data types   OUTPUTS:        suba - vector with same number of elements as A, such that               A EQ B[SUBA], except non-matches which are indicated               by SUBA EQ -1        subb - vector with same number of elements as B, such that               B EQ A[SUBB], except non-matches which are indicated               by SUBB EQ -1   RESTRICTIONS:         The vectors A and B are allowed to have duplicates in them,        but for matching purposes, only the first one found will        be reported.   EXAMPLE:       A = [0,7,14,23,24,30]       B = [7,8,14,25,14]       IDL&gt; match2, a, b, suba, subb      --&gt; suba = [ -1 ,  0,  4,  -1, -1, -1 ]      (indicates that A[1] matches B[1] and A[3] matches B[2])      --&gt; subb = [  1 , -1,  2,  -1,  2 ]      (indicates that B[1] matches A[1] and B[2] matches A[3])    Compare to the results of the original MATCH procedure,        IDL&gt; match, a, b, suba, subb      --&gt; suba = [  1,  3]   (indicates that A[1] and A[3] match elements in B, but not which ones)      --&gt; subb = [  1,  2]   (indicates that B[1] and B[2] match elements in A, but not which ones)   MODIFICATION HISTORY    Derived from the IDL Astronomy Library MATCH, 14 Feb 2007    Updated documentation, 17 Jul 2007    More updated documentation (example), 03 Sep 2007   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/match2.html#match2", "match2", 'routine in <a href="idlastro/match2.html">match2.pro</a>', "match2.pro", "", "match2", "", "absubasubb", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/max_entropy.html", "max_entropy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "max_entropy.pro", "", "", " NAME: 	MAX_ENTROPY   PURPOSE: 	Deconvolution of data by Maximum Entropy analysis, given the PSF  EXPLANATION: 	Deconvolution of data by Maximum Entropy analysis, given the 	instrument point spread response function (spatially invariant psf). 	Data can be an observed image or spectrum, result is always positive. 	Default is convolutions using FFT (faster when image size = power of 2).   CALLING SEQUENCE: 	for i=1,Niter do begin 	Max_Entropy, image_data, psf, image_deconv, multipliers, FT_PSF=psf_ft   INPUTS: 	data = observed image or spectrum, should be mostly positive, 					with mean sky (background) near zero. 	psf = Point Spread Function of instrument (response to point source, 							must sum to unity). 	deconv = result of previous call to Max_Entropy, 	multipliers = the Lagrange multipliers of max.entropy theory 		(on first call, set = 0, giving flat first result).   OUTPUTS: 	deconv = deconvolution result of one more iteration by Max_Entropy. 	multipliers = the Lagrange multipliers saved for next iteration.   OPTIONAL INPUT KEYWORDS: 	FT_PSF = passes (out/in) the Fourier transform of the PSF, 		so that it can be reused for the next time procedure is called,       /NO_FT overrides the use of FFT, using the IDL function convol() instead.       /LINEAR switches to Linear convergence mode, much slower than the 		default Logarithmic convergence mode. 	LOGMIN = minimum value constraint for taking Logarithms (default=1.e-9).  EXTERNAL CALLS: 	function convolve( image, psf ) for convolutions using FFT or otherwise.  METHOD: 	Iteration with PSF to maximize entropy of solution image with 	constraint that the solution convolved with PSF fits data image. 	Based on paper by Hollis, Dorband, Yusef-Zadeh, Ap.J. Feb.1992, 	which refers to Agmon, Alhassid, Levine, J.Comp.Phys. 1979.         A more elaborate image deconvolution program using maximum entropy is        available at        http://sohowww.nascom.nasa.gov/solarsoft/gen/idl/image/image_deconvolve.pro  HISTORY: 	written by Frank Varosi at NASA/GSFC, 1992. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/max_entropy.html#max_entropy", "max_entropy", 'routine in <a href="idlastro/max_entropy.html">max_entropy.pro</a>', "max_entropy.pro", "", "max_entropy", "", "FT_PSFNO_FTLINEARLOGMINRE_CONVOL_IMAGEdatapsfdeconvmultipliers", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/max_likelihood.html", "max_likelihood.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "max_likelihood.pro", "", "", " NAME: 	MAX_LIKELIHOOD   PURPOSE: 	Maximum likelihood deconvolution of an image or a spectrum.  EXPLANATION:  	Deconvolution of an observed image (or spectrum) given the 	instrument point spread response function (spatially invariant psf). 	Performs iteration based on the Maximum Likelihood solution for 	the restoration of a blurred image (or spectrum) with additive noise. 	Maximum Likelihood formulation can assume Poisson noise statistics 	or Gaussian additive noise, yielding two types of iteration.   CALLING SEQUENCE: 	for i=1,Niter do Max_Likelihood, data, psf, deconv, FT_PSF=psf_ft   INPUTS PARAMETERS: 	data = observed image or spectrum, should be mostly positive, 				with mean sky (background) near zero. 	psf = Point Spread Function of the observing instrument, 				(response to a point source, must sum to unity).  INPUT/OUTPUT PARAMETERS: 	deconv = as input: the result of previous call to Max_Likelihood, 		(initial guess on first call, default = average of data), 		as output: result of one more iteration by Max_Likelihood. 	Re_conv = (optional) the current deconv image reconvolved with PSF 		for use in next iteration and to check convergence.   OPTIONAL INPUT KEYWORDS:       /GAUSSIAN causes max-likelihood iteration for Gaussian additive noise 		to be used,  otherwise the default is Poisson statistics. 	FT_PSF = passes (out/in) the Fourier transform of the PSF, 		so that it can be reused for the next time procedure is called,       /NO_FT overrides the use of FFT, using the IDL function convol() instead. 	POSITIVITY_EPS = value of epsilon passed to function positivity, 			default = -1 which means no action (identity). 	UNDERFLOW_ZERO = cutoff to consider as zero, if numbers less than this.   EXTERNAL CALLS: 	function convolve( image, psf ) for convolutions using FFT or otherwise. 	function positivity( image, EPS= ) to make image positive.   METHOD: 	Maximum Likelihood solution is a fixed point of an iterative eq. 	(derived by setting partial derivatives of Log(Likelihood) to zero). 	Poisson noise case was derived by Richardson(1972) & Lucy(1974). 	Gaussian noise case is similar with subtraction instead of division.  NOTES:        WARNING: The Poisson case may not conserve flux for an odd image size.        This behavior is being investigated.  HISTORY: 	written: Frank Varosi at NASA/GSFC, 1992. 	F.V. 1993, added optional arg. Re_conv (to avoid doing it twice). 	Converted to IDL V5.0   W. Landsman   September 1997        Use COMPLEMENT keyword to WHERE()   W. Landsman  Jan 2008  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/max_likelihood.html#Max_Likelihood", "Max_Likelihood", 'routine in <a href="idlastro/max_likelihood.html">max_likelihood.pro</a>', "max_likelihood.pro", "", "Max_Likelihood", "", "FT_PSFNO_FTGAUSSIANPOSITIVITY_EPSUNDERFLOW_ZEROdatapsfdeconvRe_conv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/maxmin.html", "maxmin.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "maxmin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/maxmin.html#MaxMin", "MaxMin", 'routine in <a href="coyote/maxmin.html">maxmin.pro</a>', "maxmin.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "MaxMin", "    Prints the maximum and minimum of an IDL variable.   ", "NAN       Set this keyword to ignore NANs in the variable. Default: 0.  TEXT       Prepend this string to the output of MinMax. Default:  MinMax:  .   variable       The variable whose minimum and maximum you wish to know.   ", "Utility", "     Change History: <span class= code-output >  Written, 20 Sept 2010.</span> <span class= code-output >  Changed name of program from MinMax to MaxMin to avoid conflict with</span> <span class= code-output >  MinMax program in NASA Astronomy Library. 1 Nov 2010. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.     The MaxMin routine gives the range of the variable:  <span class= code-prompt >IDL&gt;</span> a = Findgen(11)  <span class= code-prompt >IDL&gt;</span> MaxMin, a, TEXT='Variable A:' <span class= code-output > Variable A:   11    0</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/maxwindowsize.html", "maxwindowsize.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "maxwindowsize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/maxwindowsize.html#MaxWindowSize", "MaxWindowSize", 'routine in <a href="coyote/maxwindowsize.html">maxwindowsize.pro</a>', "maxwindowsize.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "MaxWindowSize", "    Returns the resolution of the largest unobstructed graphics window that can be     created on this particular graphics device. Works properly for Windows and UNIX     computers, excluding Macintosh computers. There is no known way to find the resolution     of the largest unobstructed graphics window on a Macintosh computer, so a fudge factor     of 22 pixels is used to account for the Macintosh  dock .   ", "MONITOR_RESOLUTION        Set this keyword to a named variable to return the resolution of the         primary display monitor.   ", "Utility", "     Change History: <span class= code-output >  Written, 26 October 2010. DWF.</span> <span class= code-output >  Misunderstood Macintosh result. Now Mac treated like UNIX. 27 Oct 2010. DWF.</span> <span class= code-output >  No known method for Macintosh computers. Resorting to a fudge factor</span> <span class= code-output >     of 22 pixels to account for the Macintosh dock. 27 Oct 2010. DWF.</span> <span class= code-output >  Code is total reversed for UNIX and Macintosh computers! Fixed. 16 Dec 2011. DWF.</span> <span class= code-output >  Modified to only use IDLsysMonitorInfo for IDL 6.3 and higher. 23 Feb 2012. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.      To create a window of maximum size: <span class= code-output >  maxsize = MaxWindowSize()</span> <span class= code-output >  Window, XSize=maxsize[0], YSize=maxsize[1], /Free</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/meanclip.html", "meanclip.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "meanclip.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/meanclip.html#MEANCLIP", "MEANCLIP", 'routine in <a href="idlastro/meanclip.html">meanclip.pro</a>', "meanclip.pro", "", "MEANCLIP", " NAME:        MEANCLIP   PURPOSE:        Computes an iteratively sigma-clipped mean on a data set  EXPLANATION:        Clipping is done about median, but mean is returned.        Called by SKYADJ_CUBE   CATEGORY:        Statistics   CALLING SEQUENCE:        MEANCLIP, Data, Mean, [ Sigma, SUBS =               CLIPSIG=, MAXITER=, CONVERGE_NUM=, /VERBOSE, /DOUBLE ]   INPUT POSITIONAL PARAMETERS:        Data:     Input data, any numeric array   OUTPUT POSITIONAL PARAMETERS:        Mean:     N-sigma clipped mean.        Sigma:    Standard deviation of remaining pixels.   INPUT KEYWORD PARAMETERS:        CLIPSIG:  Number of sigma at which to clip.  Default=3        MAXITER:  Ceiling on number of clipping iterations.  Default=5        CONVERGE_NUM:  If the proportion of rejected pixels is less            than this fraction, the iterations stop.  Default=0.02, i.e.,            iteration stops if fewer than 2% of pixels excluded.        /VERBOSE:  Set this flag to get messages.        /DOUBLE - if set then perform all computations in double precision.                  Otherwise double precision is used only if the input                  data is double  OUTPUT KEYWORD PARAMETER:        SUBS:     Subscript array for pixels finally used.   MODIFICATION HISTORY:        Written by:     RSH, RITSS, 21 Oct 98        20 Jan 99 - Added SUBS, fixed misplaced paren on float call,                    improved doc.  RSH        Nov 2005   Added /DOUBLE keyword, check if all pixels are removed                   by clipping W. Landsman  ", "CLIPSIGMAXITERCONVERGE_NUMVERBOSESUBSDOUBLEImageMeanSigma", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/medarr.html", "medarr.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "medarr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/medarr.html#medarr", "medarr", 'routine in <a href="idlastro/medarr.html">medarr.pro</a>', "medarr.pro", "", "medarr", " NAME:        MEDARR  PURPOSE:        Compute the median at each pixel across a set of 2-d images  EXPLANATION:        Each pixel in the output array contains  the median of the        corresponding pixels in the input arrays.   Useful, for example to        combine a stack of CCD images, while removing cosmic ray hits.         This routine became partially obsolete in V5.6 with the introduction        of the DIMENSION keyword to the intrinsic MEDIAN() function.   However,        it is  still useful if a input mask is needed (though it is much        faster to set invalid pixels to NaN values.)  CALLING SEQUENCE:        MEDARR, inarr, outarr, [ mask, output_mask ]  INPUTS:        inarr  -- A three dimensional array containing the input arrays to                  combine together.  Each of the input arrays must be two                  dimensional and must have the same dimensions.  These arrays                  should then be stacked together into a single 3-D array,                  creating INARR.   OPTIONAL INPUT:        mask   -- Same structure as inarr, byte array with 1b where                  pixels are to be included, 0b where they are to be                  excluded.    For floating point images, it is much faster to                  set masked pixels in inarr equal to !VALUES.F_NAN (see below),                  rather than use the mask parameter.   OUTPUTS:        outarr -- The output array.  It will have dimensions equal to the                  first two dimensions of the input array.   OPTIONAL OUPUT:        output_mask -- Same structure as outarr, byte array with 1b                       pixels are valid, 0b where all the input pixels                       have been masked out.  RESTRICTIONS:         This procedure was *SLOW* when using the Mask parameter because it has         to loop over  each pixel of the image.   EXAMPLE:        Suppose one wants to combine three floating point 1024 x 1024 bias        frames which have been read into the IDL variables im1,im2,im3         IDL&gt; bigim = fltarr(1024,1024,3)        ;Create big array to hold images        IDL&gt; bigim(0,0,0) = im1 & bigim(0,0,1) = im2 & bigim(0,0,2) = im2        IDL&gt; medarr, bigim, avgbias         The variable avgbias will be the desired 1024x 1024 float image.  PROCEDURE:        If the MASK parameter is not set, then MEDARR is just a wrapper for        MEDIAN(/EVEN, dimension = 3).    If the MASK parameter is set,        a scalar median function over the third dimension is looped over        each pixel of the first two dimensions.   The /EVEN keyword is used        with MEDIAN (which averages the two middle values), since this avoids        biasing the output for an even number of images.         Any values set to NAN (not a number) are ignored when computing the        median.    If all values for a pixel location are NAN, then the median        is also returned as NAN.   MODIFICATION HISTORY:        Written by Michael R. Greason, STX, 12 June 1990.        Don't use MEDIAN function for even number of images.           W. Landsman Sep 1996        Mask added.  RS Hill, HSTX, 13 Mar. 1997        Converted to IDL V5.0   W. Landsman   September 1997        Use /EVEN keyword to MEDIAN    W. Landsman  September 1997        Rearranged code for faster execution   W. Landsman January 1998        Faster execution for odd number of images   W. Landsman July 2000        V5.4 fix for change in SIZE() definition of undefined variable                 W. Landsman/E. Young   May 2001        Use MEDIAN(/DIMEN) for V5.6 or later   W. Landsman   November 2002        Use keyword_set() instead of ARG_present() to test for presence of mask            parameter  D. Hanish/W. Landsman   June 2003        Assume since V5.6  W. Landsman  Feb 2004   ", "inarroutarrmaskoutput_mask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/medsmooth.html", "medsmooth.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "medsmooth.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/medsmooth.html#MEDSMOOTH", "MEDSMOOTH", 'routine in <a href="idlastro/medsmooth.html">medsmooth.pro</a>', "medsmooth.pro", "", "MEDSMOOTH", " NAME:        MEDSMOOTH   PURPOSE:        Median smoothing of a vector, including points near its ends.   CALLING SEQUENCE:        SMOOTHED = MEDSMOOTH( VECTOR, WINDOW_WIDTH )   INPUTS:        VECTOR  = The (1-d numeric) vector to be smoothed        WINDOW = Odd integer giving the full width of the window over which                the median is determined for each point.     (If WINDOW is                specified as an even number, then the effect is the same as                using WINDOW+1)   OUTPUT:        Function returns the smoothed vector   PROCEDURE:        Each point is replaced by the median of the nearest WINDOW of points.        The width of the window shrinks towards the ends of the vector, so that        only the first and last points are not filtered. These points are        replaced by forecasting from smoothed interior points.   EXAMPLE:        Create a vector with isolated high points near its ends        IDL&gt; a = randomn(seed,40) & a[1] = 10  & a[38] = 10        Now do median smoothing with a 7 point window        IDL&gt; b = medsmooth(a,7)        Note that, unlike MEDIAN(), that MEDSMOOTH will remove the isolated        high points near the ends.  REVISION HISTORY:        Written, H. Freudenreich, STX, 12/89        H.Freudenreich, 8/90: took care of end-points by shrinking window.        Speed up using vector median when possible  W. Landsman February 2002  ", "ARRAYWINDOW", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/merrygotrace.html", "merrygotrace.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "merrygotrace.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    MERRYGOTRACE   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image. Instead    of scanning rows to crop, scans in a circle.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/merrygotrace.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/obsolete_code/merrygotrace.html">merrygotrace.pro</a>', "merrygotrace.pro", "", "makelimbstrips", "       Makes limb strips from full-length strips   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xstrips           Structure containing row strips  ystrips           Structure containing column strips   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/merrygotrace.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/obsolete_code/merrygotrace.html">merrygotrace.pro</a>', "merrygotrace.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/merrygotrace.html#whichcropmethod", "whichcropmethod", 'routine in <a href="code_snapshots/obsolete_code/merrygotrace.html">merrygotrace.pro</a>', "merrygotrace.pro", "", "whichcropmethod", "       Crops differently according to which region is selected.   ", "region           1) main sun            2) 50% brightness sun            3) 25% brightness sun  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/merrygotrace.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/obsolete_code/merrygotrace.html">merrygotrace.pro</a>', "merrygotrace.pro", "", "makestrips", "       Only saves 5 strips centered around the solar diameter to reduce the amount of limb-            darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.   ", "region       Which sun out of the three to find the center of. Defaults to the brightest sun  time       Prints elapsed time  thresh       Threshold used to select pixels  xstrips       Structure containing row strips  ystrips       Structure containing column strips   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/merrygotrace.html#circscancrop", "circscancrop", 'routine in <a href="code_snapshots/obsolete_code/merrygotrace.html">merrygotrace.pro</a>', "merrygotrace.pro", "", "circscancrop", "       Quickly finds the center of the main sun, scans in a circle, and locates the two secondary        suns' centers. Crops either of the secondary suns based on what region specified.   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Print the elapsed time  mainxpos           X position of 100% brightness sun to scan in a circle around  mainypos           Y position of 100% brightness sun to scan in a circle around  image           Cropped area  thresh           Threshold used in finding center  xpos           Computed X position of center  ypos           Computed Y position of center  xoffset           X offset of cropped region's bottom left corner  yoffset           Y offset of cropped region's bottom left corner   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/merrygotrace.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/obsolete_code/merrygotrace.html">merrygotrace.pro</a>', "merrygotrace.pro", "", "limbfit", "       Uses the data from makelimbstrips and fits an n-th order polynomial to the limb to find where        it crosses the threshold.   ", "plot           Makes some nice plots  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xpos           X center  ypos           Y center   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/merrygotrace.html#getstruct", "getstruct", 'routine in <a href="code_snapshots/obsolete_code/merrygotrace.html">merrygotrace.pro</a>', "merrygotrace.pro", "", "getstruct", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "time           Outputs how much time the program takes  struct           Structure containing the centers and cropped images of all 3 suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html", "mgt.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "mgt.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    MERRYGOTRACE   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image. Instead    of scanning rows to crop, scans in a circle.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/obsolete_code/mgt.html">mgt.pro</a>', "mgt.pro", "", "makelimbstrips", "       Makes limb strips from full-length strips   ", "nstrips           How many strips to select, centered around the row/col diameter  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time   thresh           Threshold used to select pixels   xstripsystripsfile           File to be read in  ministrip_length           How long the total array of the cut-down strip will be  scan_width           Indicates how far apart to scan  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  ", "          -1", "   Exactly how much data should be stored in a structure? Since we're interested in saving space,    doesn't make sense to repeat any data in the structures.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/obsolete_code/mgt.html">mgt.pro</a>', "mgt.pro", "", "quickmask", "", "imagethresh", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html#whichcropmethod", "whichcropmethod", 'routine in <a href="code_snapshots/obsolete_code/mgt.html">mgt.pro</a>', "mgt.pro", "", "whichcropmethod", "", "fileregionscan_widthsundiamthresh", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/obsolete_code/mgt.html">mgt.pro</a>', "mgt.pro", "", "makestrips", "       Only saves 5 strips centered around the solar diameter to reduce the amount of limb-            darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.   ", "nstrips       How many strips to select, centered around the row/col diameter  region       Which sun out of the three to find the center of. Defaults to the brightest sun  time       Prints elapsed time  thresh       Threshold used to select pixels  xstrips       Structure containing row strips  ystrips       Structure containing column strips   file       File to be read in  scan_width       Indicates how far apart to scan  sundiam       Approximate diameter of sun in pixels. (Based on bmp image)  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html#circscancrop", "circscancrop", 'routine in <a href="code_snapshots/obsolete_code/mgt.html">mgt.pro</a>', "mgt.pro", "", "circscancrop", "       Quickly finds the center of the main sun, scans in a circle, and locates the two secondary        suns' centers. Crops either of the secondary suns based on what region specified.   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Print the elapsed time  mainxposmainyposfile           What file to load in  imagexpos           Computed X position of center  ypos           Computed Y position of center  xoffsetyoffsetscan_width           How apart the scans are for minicrop().  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  thresh           Threshold used in finding center   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html#mainsuncrop", "mainsuncrop", 'routine in <a href="code_snapshots/obsolete_code/mgt.html">mgt.pro</a>', "mgt.pro", "", "mainsuncrop", "", "timefilescan_widthsundiam", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html#merrygotrimask", "merrygotrimask", 'routine in <a href="code_snapshots/obsolete_code/mgt.html">mgt.pro</a>', "mgt.pro", "", "merrygotrimask", "       Had to make a new version of comp3 because the old one called scanbox() by default   ", "time           Print the elapsed time  image           Cropped image  file           What file to load in  xpos           Computed X position of center  ypos           Computed Y position of center  xoffsetyoffsetscan_width           How apart the scans are for minicrop().  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  thresh           Threshold used in finding center   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/obsolete_code/mgt.html">mgt.pro</a>', "mgt.pro", "", "limbfit", "   Uses the data from makelimbstrips and fits an n-th order polynomial to the limb to find where        it crosses the threshold.   ", "nstrips           How many strips to select, centered around the row/col diameter  plot           Makes some nice plots  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xpos           X center  ypos           Y center   file           File to be read in  ministrip_length           How long the trimmed down strip will be  order           What order polynomial to use for POLY_FIT()  scan_width           Indicates how far apart to scan  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/mgt.html#getstruct", "getstruct", 'routine in <a href="code_snapshots/obsolete_code/mgt.html">mgt.pro</a>', "mgt.pro", "", "getstruct", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "time           Outputs how much time the program takes  file           What file to find 3 centers for  struct           Structure containing the centers and cropped images of all 3 suns  scan_width           How apart the scans are for minicrop().  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/micro_makelimbstrips.html", "micro_makelimbstrips.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "micro_makelimbstrips.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/micro_makelimbstrips.html#micro_makelimbstrips", "micro_makelimbstrips", 'routine in <a href="sep20/micro_makelimbstrips.html">micro_makelimbstrips.pro</a>', "micro_makelimbstrips.pro", "", "micro_makelimbstrips", "       Does a quick look at a limb of a chord and returns some positions to compare against fiducial positions   ", "chord           Chord data we check limb for  thresh           Threshold to judge limb-crossing position   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/minf_bracket.html", "minf_bracket.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "minf_bracket.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/minf_bracket.html#minF_bracket", "minF_bracket", 'routine in <a href="idlastro/minf_bracket.html">minf_bracket.pro</a>', "minf_bracket.pro", "", "minF_bracket", " NAME:        MINF_BRACKET  PURPOSE:        Bracket a local minimum of a 1-D function with 3 points,  EXPLANATION:        Brackets a local minimum of a 1-d function with 3 points,        thus ensuring that a minimum exists somewhere in the interval.        This routine assumes that the function has a minimum somewhere....        Routine can also be applied to a scalar function of many variables,        for such case the local minimum in a specified direction is bracketed,        This routine is called by minF_conj_grad, to bracket minimum in the        direction of the conjugate gradient of function of many variables  CALLING EXAMPLE:        xa=0  & xb=1        minF_bracket, xa,xb,xc, fa,fb,fc, FUNC_NAME= name       ;for 1-D func.   or:        minF_bracket, xa,xb,xc, fa,fb,fc, FUNC= name ,     $                                          POINT=[0,1,1],   $                                          DIRECTION=[2,1,1]     ;for 3-D func.  INPUTS:        xa = scalar, guess for point bracketing location of minimum.        xb = scalar, second guess for point bracketing location of minimum.  KEYWORDS:        FUNC_NAME = function name (string)                Calling mechanism should be:  F = func_name( px )                where:                        px = scalar or vector of independent variables, input.                        F = scalar value of function at px.        POINT_NDIM = when working with function of N variables,                use this keyword to specify the starting point in N-dim space.                Default = 0, which assumes function is 1-D.        DIRECTION = when working with function of N variables,                use this keyword to specify the direction in N-dim space                along which to bracket the local minimum, (default=1 for 1-D).                (xa,xb,xc) are then relative distances from POINT_NDIM.  OUTPUTS:        xa,xb,xc = scalars, 3 points which bracket location of minimum,                that is, f(xb) &lt; f(xa) and f(xb) &lt; f(xc), so minimum exists.                When working with function of N variables                (xa,xb,xc) are then relative distances from POINT_NDIM,                in the direction specified by keyword DIRECTION,                with scale factor given by magnitude of DIRECTION.  OPTIONAL OUTPUT:        fa,fb,fc = value of function at 3 points which bracket the minimum,                        again note that fb &lt; fa and fb &lt; fc if minimum exists.  PROCEDURE:        algorithm from Numerical Recipes (by Press, et al.), sec.10.1 (p.281).  MODIFICATION HISTORY:        Written, Frank Varosi NASA/GSFC 1992.        Converted to IDL V5.0   W. Landsman   September 1997  ", "FUNC_NAMEPOINT_NDIMDIRECTIONxaxbxcfafbfc", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/minf_conj_grad.html", "minf_conj_grad.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "minf_conj_grad.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/minf_conj_grad.html#minF_conj_grad", "minF_conj_grad", 'routine in <a href="idlastro/minf_conj_grad.html">minf_conj_grad.pro</a>', "minf_conj_grad.pro", "", "minF_conj_grad", " NAME:         MINF_CONJ_GRAD  PURPOSE:        Find the local minimum of a scalar function using conjugate gradient  EXPLANATION:        Find the local minimum of a scalar function of several variables using        the Conjugate Gradient method (Fletcher-Reeves-Polak-Ribiere algorithm).        Function may be anything with computable partial derivatives.        Each call to minF_conj_grad performs one iteration of algorithm,        and returns an N-dim point closer to the local minimum of function.  CALLING EXAMPLE:        p_min = replicate( 1, N_dim )        minF_conj_grad, p_min, f_min, conv_factor, FUNC_NAME= name ,/INITIALIZE         while (conv_factor GT 0) do begin                minF_conj_grad, p_min, f_min, conv_factor, FUNC_NAME= name         endwhile  INPUTS:        p_min = vector of independent variables, location of minimum point                obtained from previous call to minF_conj_grad, (or first guess).  KEYWORDS:        FUNC_NAME = function name (string)                Calling mechanism should be:  F = func_name( px, gradient )          where:                F = scalar value of function at px.                px = vector of independent variables, input.                gradient = vector of partial derivatives of the function                        with respect to independent variables, evaluated at px.                        This is an optional output parameter:                        gradient should not be calculated if parameter is not                        supplied in call (Unless you want to waste some time).       /INIT must be specified on first call (whenever p_min is a guess),                        to initialize the iteration scheme of algorithm.       /USE_DERIV causes the directional derivative of function to be used                        in the 1-D minimization part of algorithm                        (default is not to use directional derivative).        TOLERANCE = desired accuracy of minimum location, default=sqrt(1.e-7).       /QUADRATIC runs simpler version which works only for quadratic function.  OUTPUTS:        p_min = vector giving improved solution for location of minimum point.        f_min = value of function at p_min.        conv_factor = gives the current rate of convergence (change in value),                        iteration should be stopped when rate gets near zero.  EXTERNAL CALLS:        pro minF_bracket,  to find 3 points which bracket the minimum in 1-D.        pro minF_parabolic,  to find minimum point in 1-D.        pro minF_parabol_D,  to find minimum point in 1-D, using derivatives.  COMMON BLOCKS:        common minf_conj_grad, grad_conj, grad_save, gs_norm        (to keep conjugate gradient, gradient and norm from previous iteration)  PROCEDURE:        Algorithm adapted from Numerical Recipes, sec.10.6 (p.305).        Conjugate gradient is computed from gradient, which then gives        the best direction (in N-dim space) in which to proceed to find        the minimum point. The function is then minimized along        this direction of conjugate gradient (a 1-D minimization).        The algorithm is repeated starting at the new point by calling again.  MODIFICATION HISTORY:        Written, Frank Varosi NASA/GSFC 1992.        Converted to IDL V5.0   W. Landsman   September 1997  ", "FUNC_NAMETOLERANCEUSE_DERIVINITIALIZEQUADRATICp_minf_minconv_factor", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/minf_parabol_d.html", "minf_parabol_d.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "minf_parabol_d.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/minf_parabol_d.html#call_func_deriv", "call_func_deriv", 'routine in <a href="idlastro/minf_parabol_d.html">minf_parabol_d.pro</a>', "minf_parabol_d.pro", "", "call_func_deriv", "", "POINT_NDIMDIRECTIONfunc_namexderiv", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/minf_parabol_d.html#minF_parabol_D", "minF_parabol_D", 'routine in <a href="idlastro/minf_parabol_d.html">minf_parabol_d.pro</a>', "minf_parabol_d.pro", "", "minF_parabol_D", " NAME:        MINF_PARABOL_D  PURPOSE:        Minimize a function using a modified  Brent's method with derivatives  EXPLANATION:        Based on the procedure DBRENT in Numerical Recipes by Press et al.        Finds a local minimum of a 1-D function up to specified tolerance,        using the first derivative of function in the algorithm.        This routine assumes that the function has a minimum nearby.        (recommend first calling minF_bracket, xa,xb,xc, to bracket minimum).        Routine can also be applied to a scalar function of many variables,        for such case the local minimum in a specified direction is found,        This routine is called by minF_conj_grad, to locate minimum in the        direction of the conjugate gradient of function of many variables.   CALLING EXAMPLES:        minF_parabol_D, xa,xb,xc, xmin, fmin, FUNC_NAME= name   ;for 1-D func.   or:        minF_parabol_D, xa,xb,xc, xmin, fmin, FUNC= name , $                                          POINT=[0,1,1],   $                                          DIRECTION=[2,1,1]     ;for 3-D func.  INPUTS:        xa,xb,xc = scalars, 3 points which bracket location of minimum,                that is, f(xb) &lt; f(xa) and f(xb) &lt; f(xc), so minimum exists.                When working with function of N variables                (xa,xb,xc) are then relative distances from POINT_NDIM,                in the direction specified by keyword DIRECTION,                with scale factor given by magnitude of DIRECTION.  KEYWORDS:        FUNC_NAME = function name (string)                Calling mechanism should be:  F = func_name( px, gradient )                where:                        px = scalar or vector of independent variables, input.                        F = scalar value of function at px.                        gradient = derivative of function, a scalar if 1-D,                                a gradient vector if N-D,                                (should only be computed if arg. is present).         POINT_NDIM = when working with function of N variables,                use this keyword to specify the starting point in N-dim space.                Default = 0, which assumes function is 1-D.        DIRECTION = when working with function of N variables,                use this keyword to specify the direction in N-dim space                along which to bracket the local minimum, (default=1 for 1-D).                (xa, xb, xc, x_min are then relative distances from POINT_NDIM)        MAX_ITER = maximum allowed number iterations, default=100.        TOLERANCE = desired accuracy of minimum location, default=sqrt(1.e-7).   OUTPUTS:        xmin = estimated location of minimum.                When working with function of N variables,                xmin is the relative distance from POINT_NDIM,                in the direction specified by keyword DIRECTION,                with scale factor given by magnitude of DIRECTION,                so that min. Loc. Pmin = Point_Ndim + xmin * Direction.        fmin = value of function at xmin (or Pmin).  PROCEDURE:        Brent's method to minimize a function by using parabolic interpolation        and using first derivative of function,        from Numerical Recipes (by Press, et al.), sec.10.3 (p.287),  MODIFICATION HISTORY:        Written, Frank Varosi NASA/GSFC 1992.  ", "FUNC_NAMEMAX_ITERATIONSTOLERANCEPOINT_NDIMDIRECTIONxaxbxcxminfmin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/minf_parabolic.html", "minf_parabolic.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "minf_parabolic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/minf_parabolic.html#minF_parabolic", "minF_parabolic", 'routine in <a href="idlastro/minf_parabolic.html">minf_parabolic.pro</a>', "minf_parabolic.pro", "", "minF_parabolic", " NAME:        MINF_PARABOLIC  PURPOSE:        Minimize a function using Brent's method with parabolic interpolation  EXPLANATION:        Find a local minimum of a 1-D function up to specified tolerance.        This routine assumes that the function has a minimum nearby.        (recommend first calling minF_bracket, xa,xb,xc, to bracket minimum).        Routine can also be applied to a scalar function of many variables,        for such case the local minimum in a specified direction is found,        This routine is called by minF_conj_grad, to locate minimum in the        direction of the conjugate gradient of function of many variables.   CALLING EXAMPLES:        minF_parabolic, xa,xb,xc, xmin, fmin, FUNC_NAME= name   ;for 1-D func.   or:        minF_parabolic, xa,xb,xc, xmin, fmin, FUNC= name , $                                          POINT=[0,1,1],   $                                          DIRECTION=[2,1,1]     ;for 3-D func.  INPUTS:        xa,xb,xc = scalars, 3 points which bracket location of minimum,                that is, f(xb) &lt; f(xa) and f(xb) &lt; f(xc), so minimum exists.                When working with function of N variables                (xa,xb,xc) are then relative distances from POINT_NDIM,                in the direction specified by keyword DIRECTION,                with scale factor given by magnitude of DIRECTION.  INPUT KEYWORDS:       FUNC_NAME = function name (string)                Calling mechanism should be:  F = func_name( px )                where:                        px = scalar or vector of independent variables, input.                        F = scalar value of function at px.        POINT_NDIM = when working with function of N variables,                use this keyword to specify the starting point in N-dim space.                Default = 0, which assumes function is 1-D.       DIRECTION = when working with function of N variables,                use this keyword to specify the direction in N-dim space                along which to bracket the local minimum, (default=1 for 1-D).                (xa, xb, xc, x_min are then relative distances from POINT_NDIM)       MAX_ITER = maximum allowed number iterations, default=100.       TOLERANCE = desired accuracy of minimum location, default=sqrt(1.e-7).  OUTPUTS:        xmin = estimated location of minimum.                When working with function of N variables,                xmin is the relative distance from POINT_NDIM,                in the direction specified by keyword DIRECTION,                with scale factor given by magnitude of DIRECTION,                so that min. Loc. Pmin = Point_Ndim + xmin * Direction.        fmin = value of function at xmin (or Pmin).  PROCEDURE:        Brent's method to minimize a function by using parabolic interpolation.        Based on function BRENT in Numerical Recipes in FORTRAN (Press et al.        1992),  sec.10.2 (p. 397).  MODIFICATION HISTORY:        Written, Frank Varosi NASA/GSFC 1992.        Converted to IDL V5.0   W. Landsman   September 1997  ", "FUNC_NAMEMAX_ITERATIONSTOLERANCEPOINT_NDIMDIRECTIONxaxbxcxminfmin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/minicrop.html", "minicrop.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "minicrop.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/minicrop.html#minicrop", "minicrop", 'routine in <a href="code_snapshots/obsolete_code/minicrop.html">minicrop.pro</a>', "minicrop.pro", "", "minicrop", "       Small function to keep code small in cropit. Finds the row where the threshold is crossed        and then steps back in the x-direction to find the left side of the cropping box. Skips        over the sun by a predetermined value then crops out the sun.   ", "time           Print the elapsed time  temparr           2D array to check boundary limits of  rowscan           Where to crop the rows from  colscan           Where to crop the columns from  rowendscan           Where to crop the rows to  colendscan           Where to crop the columns to  scan_width           How apart the scans are for minicrop().  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  thresh           What the minimum threshold will be for scanning   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/minmax.html", "minmax.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "minmax.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/minmax.html#minmax", "minmax", 'routine in <a href="idlastro/minmax.html">minmax.pro</a>', "minmax.pro", "", "minmax", " NAME:       MINMAX  PURPOSE:       Return a 2 element array giving the minimum and maximum of an array  EXPLANATION:       Using MINMAX() is faster than doing a separate MAX and MIN.        The procedure MAXMIN in http://www.idlcoyote.com/programs/maxmin.pro       has a similar purpose but uses a procedure call rather than a function.  CALLING SEQUENCE:       value = minmax( array, [subs, /NAN, DIMEN= ] )  INPUTS:       array - an IDL numeric scalar, vector or array.   OUTPUTS:       value = a two element vector (if DIMEN is not supplied)             value[0] = minimum value of array             value[1] = maximum value of array              If the DIMEN keyword is supplied then value will be a 2 x N element             array where N is the number of elements in the specified             dimension   OPTIONAL OUTPUT PARAMETER:        subs - two-dimensional vector; the first element gives the subscript               of the minimum value, the second element gives the subscript               of the maximum value.   OPTIONAL INPUT KEYWORD:       /NAN   - Set this keyword to cause the routine to check for occurrences             of the IEEE floating-point value NaN in the input data.  Elements             with the value NaN are treated as missing data.        DIMEN -  integer (either 1 or 2) specifying which dimension of a 2-d             array to  take the minimum and maximum.   Note that (unlike the             DIMENSION keyword to the MIN() function) DIMEN is only valid             for a 2-d array, larger dimensions are  not supported.  EXAMPLE:      (1)  Print the minimum and maximum of an image array, im              IDL&gt; print, minmax( im )       (2) Given a 2-dimension array of (echelle) wavelengths w, print the          minimum and maximum of each order           print,minmax(w,dimen=1)   PROCEDURE:       The MIN function is used with the MAX keyword   REVISION HISTORY:       Written W. Landsman                January, 1990       Added NaN keyword.      M. Buie       June 1998       Added DIMEN keyword    W. Landsman  January 2002       Added SUBSCRIPT_MIN and SUBSCRIPT_MAX  BT Jan 2005       Added optional subs output parameter  W. Landsman July 2009  ", "NANDIMENarraysubs", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mkhdr.html", "mkhdr.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mkhdr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mkhdr.html#mkhdr", "mkhdr", 'routine in <a href="idlastro/mkhdr.html">mkhdr.pro</a>', "mkhdr.pro", "", "mkhdr", " NAME:        MKHDR  PURPOSE:        Make a minimal primary (or IMAGE extension) FITS header  EXPLANATION:        If an array is supplied,  then the created FITS header will be        appropriate to the supplied array.  Otherwise, the user can specify        the dimensions and datatype.   CALLING SEQUENCE:        MKHDR, header                   ;Prompt for image size and type                or        MKHDR, header, im, [ /IMAGE, /EXTEND ]                or        MKHDR, header, type, naxisx, [/IMAGE, /EXTEND ]   OPTIONAL INPUTS:        IM - If IM is a vector or array then the header will be made                appropriate to the size and type of IM.  IM does not have                to be the actual data; it can be a dummy array of the same                type and size as the data.    Set IM = '' to create a dummy                header with NAXIS = 0.        TYPE - If 2 parameters are supplied, then the second parameter                is interpreted as an integer giving the IDL datatype e.g.                1 - Byte, 2 - 16 bit integer, 4 - float, 3 - Long        NAXISX - Vector giving the size of each dimension (NAXIS1, NAXIS2,                etc.).   OUTPUT:        HEADER - image header, (string array) with required keywords                BITPIX, NAXIS, NAXIS1, ... Further keywords can be added                to the header with SXADDPAR.   OPTIONAL INPUT KEYWORDS:        /IMAGE   = If set, then a minimal header for a FITS IMAGE extension                is created.    An IMAGE extension header is identical to                a primary FITS header except the first keyword is                'XTENSION' = 'IMAGE' instead of 'SIMPLE  ' = 'T'        /EXTEND  = If set, then the keyword EXTEND is inserted into the file,                with the value of  T  (true).    The EXTEND keyword can                optionally be included in a primary header, if the FITS file                contains extensions.   RESTRICTIONS:        (1)  MKHDR should not be used to make an STSDAS header or a FITS                ASCII or Binary Table extension header.   Instead use                 SXHMAKE - to create a minimal STSDAS header                FXBHMAKE - to create a minimal FITS binary table header                FTCREATE - to create a minimal FITS ASCII table header         (2)  Any data already in the header before calling MKHDR                will be destroyed.  EXAMPLE:        Create a minimal FITS header, Hdr, for a 30 x 40 x 50 INTEGER*2 array               IDL&gt; mkhdr, Hdr, 2, [30,40,50]         Alternatively, if the array already exists as an IDL variable, Array,                IDL&gt; mkhdr, Hdr, Array   PROCEDURES CALLED:        SXADDPAR, GET_DATE   REVISION HISTORY:        Written November, 1988               W. Landsman        May, 1990, Adapted for IDL Version 2.0, J. Isensee        Aug, 1997, Use SYSTIME(), new DATE format  W. Landsman        Allow unsigned data types    W. Landsman   December 1999        Set BZERO = 0 for unsigned integer data  W. Landsman January 2000        EXTEND keyword must immediately follow last NAXISi W. Landsman Sep 2000        Add FITS definition COMMENT to primary headers W. Landsman Oct. 2001        Allow (nonstandard) 64 bit integers   W. Landsman  Feb. 2003        Add V6.0 notation W. Landsman July 2012  ", "IMAGEEXTENDheaderimnaxisx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mlinmix_err.html", "mlinmix_err.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mlinmix_err.pro", "", "", "   NAME:      MLINMIX_ERR    PURPOSE:       Bayesian approach to multiple linear regression with errors in  X and Y    EXPLANATION:  PERFORM LINEAR REGRESSION OF Y ON X WHEN THERE ARE MEASUREMENT  ERRORS IN BOTH VARIABLES. THE REGRESSION ASSUMES :                   ETA = ALPHA + BETA ## XI + EPSILON                  X = XI + XERR                  Y = ETA + YERR   HERE, (ALPHA, BETA) ARE THE REGRESSION COEFFICIENTS, EPSILON IS THE  INTRINSIC RANDOM SCATTER ABOUT THE REGRESSION, XERR IS THE  MEASUREMENT ERROR IN X, AND YERR IS THE MEASUREMENT ERROR IN  Y. EPSILON IS ASSUMED TO BE NORMALLY-DISTRIBUTED WITH MEAN ZERO AND  VARIANCE SIGSQR. XERR AND YERR ARE ASSUMED TO BE  NORMALLY-DISTRIBUTED WITH MEANS EQUAL TO ZERO, COVARIANCE MATRICES  XVAR^2 FOR X, VARIANCES YSIG^2 FOR Y, AND COVARIANCE VECTORS  XYCOV. THE DISTRIBUTION OF XI IS MODELLED AS A MIXTURE OF NORMALS,  WITH GROUP PROPORTIONS PI, MEANS MU, AND COVARIANCES T. BAYESIAN  INFERENCE IS EMPLOYED, AND A STRUCTURE CONTAINING RANDOM DRAWS FROM  THE POSTERIOR IS RETURNED. CONVERGENCE OF THE MCMC TO THE POSTERIOR  IS MONITORED USING THE POTENTIAL SCALE REDUCTION FACTOR (RHAT,  GELMAN ET AL.2004). IN GENERAL, WHEN RHAT &lt; 1.1 THEN APPROXIMATE  CONVERGENCE IS REACHED.   SIMPLE NON-DETECTIONS ON Y MAY ALSO BE INCLUDED   AUTHOR : BRANDON C. KELLY, STEWARD OBS., JULY 2006   INPUTS :     X - THE OBSERVED INDEPENDENT VARIABLES. THIS SHOULD BE AN        [NX, NP]-ELEMENT ARRAY.    Y - THE OBSERVED DEPENDENT VARIABLE. THIS SHOULD BE AN NX-ELEMENT        VECTOR.   OPTIONAL INPUTS :     XVAR - THE COVARIANCE MATRIX OF THE X ERRORS, AND           [NX,NP,NP]-ELEMENT ARRAY. XVAR[I,*,*] IS THE COVARIANCE           MATRIX FOR THE ERRORS ON X[I,*]. THE DIAGONAL OF           XVAR[I,*,*] MUST BE GREATER THAN ZERO FOR EACH DATA POINT.    YVAR - THE VARIANCE OF THE Y ERRORS, AND NX-ELEMENT VECTOR. YVAR           MUST BE GREATER THAN ZERO.    XYCOV - THE VECTOR OF COVARIANCES FOR THE MEASUREMENT ERRORS            BETWEEN X AND Y.    DELTA - AN NX-ELEMENT VECTOR INDICATING WHETHER A DATA POINT IS            CENSORED OR NOT. IF DELTA[i] = 1, THEN THE SOURCE IS            DETECTED, ELSE IF DELTA[i] = 0 THE SOURCE IS NOT DETECTED            AND Y[i] SHOULD BE AN UPPER LIMIT ON Y[i]. NOTE THAT IF            THERE ARE CENSORED DATA POINTS, THEN THE            MAXIMUM-LIKELIHOOD ESTIMATE (THETA) IS NOT VALID. THE            DEFAULT IS TO ASSUME ALL DATA POINTS ARE DETECTED, IE,            DELTA = REPLICATE(1, NX).    SILENT - SUPPRESS TEXT OUTPUT.    MINITER - MINIMUM NUMBER OF ITERATIONS PERFORMED BY THE GIBBS              SAMPLER. IN GENERAL, MINITER = 5000 SHOULD BE SUFFICIENT              FOR CONVERGENCE. THE DEFAULT IS MINITER = 5000. THE              GIBBS SAMPLER IS STOPPED AFTER RHAT &lt; 1.1 FOR ALPHA,              BETA, AND SIGMA^2, AND THE NUMBER OF ITERATIONS              PERFORMED IS GREATER THAN MINITER.    MAXITER - THE MAXIMUM NUMBER OF ITERATIONS PERFORMED BY THE              MCMC. THE DEFAULT IS 1D5. THE GIBBS SAMPLER IS STOPPED              AUTOMATICALLY AFTER MAXITER ITERATIONS.    NGAUSS - THE NUMBER OF GAUSSIANS TO USE IN THE MIXTURE             MODELLING. THE DEFAULT IS 3.   OUTPUT :      POST - A STRUCTURE CONTAINING THE RESULTS FROM THE GIBBS            SAMPLER. EACH ELEMENT OF POST IS A DRAW FROM THE POSTERIOR            DISTRIBUTION FOR EACH OF THE PARAMETERS.               ALPHA - THE CONSTANT IN THE REGRESSION.              BETA - THE SLOPES OF THE REGRESSION.              SIGSQR - THE VARIANCE OF THE INTRINSIC SCATTER.              PI - THE GAUSSIAN WEIGHTS FOR THE MIXTURE MODEL.              MU - THE GAUSSIAN MEANS FOR THE MIXTURE MODEL.              T - THE GAUSSIAN COVARIANCE MATRICES FOR THE MIXTURE                  MODEL.              MU0 - THE HYPERPARAMETER GIVING THE MEAN VALUE OF THE                    GAUSSIAN PRIOR ON MU.              U - THE HYPERPARAMETER DESCRIBING FOR THE PRIOR                  COVARIANCE MATRIX OF THE INDIVIDUAL GAUSSIAN                  CENTROIDS ABOUT MU0.              W - THE HYPERPARAMETER DESCRIBING THE TYPICAL' SCALE                  MATRIX FOR THE PRIOR ON (T,U).              XIMEAN - THE MEAN OF THE DISTRIBUTION FOR THE                       INDEPENDENT VARIABLE, XI.              XIVAR - THE STANDARD COVARIANCE MATRIX FOR THE                      DISTRIBUTION OF THE INDEPENDENT VARIABLE, XI.              XICORR - SAME AS XIVAR, BUT FOR THE CORRELATION MATRIX.              CORR - THE LINEAR CORRELATION COEFFICIENT BETWEEN THE                     DEPENDENT AND INDIVIDUAL INDEPENDENT VARIABLES,                     XI AND ETA.              PCORR - SAME AS CORR, BUT FOR THE PARTIAL CORRELATIONS.   CALLED ROUTINES :      RANDOMCHI, MRANDOMN, RANDOMWISH, RANDOMDIR, MULTINOM   REFERENCES :     Carroll, R.J., Roeder, K., & Wasserman, L., 1999, Flexible      Parametric Measurement Error Models, Biometrics, 55, 44     Kelly, B.C., 2007, Some Aspects of Measurement Error in      Linear Regression of Astronomical Data, ApJ, In press      (astro-ph/0705.2774)     Gelman, A., Carlin, J.B., Stern, H.S., & Rubin, D.B., 2004,      Bayesian Data Analysis, Chapman & Hall/CRC  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mlinmix_err.html#mlinmix_chol_invert", "mlinmix_chol_invert", 'routine in <a href="idlastro/mlinmix_err.html">mlinmix_err.pro</a>', "mlinmix_err.pro", "", "mlinmix_chol_invert", "", "L", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mlinmix_err.html#mlinmix_posdef_invert", "mlinmix_posdef_invert", 'routine in <a href="idlastro/mlinmix_err.html">mlinmix_err.pro</a>', "mlinmix_err.pro", "", "mlinmix_posdef_invert", "", "A", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mlinmix_err.html#mlinmix_err", "mlinmix_err", 'routine in <a href="idlastro/mlinmix_err.html">mlinmix_err.pro</a>', "mlinmix_err.pro", "", "mlinmix_err", "", "xvaryvarxycovsilentdeltaminitermaxiterngaussxypost", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mmm.html", "mmm.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mmm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mmm.html#mmm", "mmm", 'routine in <a href="idlastro/mmm.html">mmm.pro</a>', "mmm.pro", "", "mmm", " NAME:        MMM  PURPOSE:        Estimate the sky background in a stellar contaminated field.  EXPLANATION:        MMM assumes that contaminated sky pixel values overwhelmingly display        POSITIVE departures from the true value.  Adapted from DAOPHOT        routine of the same name.   CALLING SEQUENCE:        MMM, sky, [ skymod, sigma, skew, HIGHBAD = , READNOISE=, /DEBUG,                   NSKY=, /INTEGER,/SILENT]   INPUTS:        SKY - Array or Vector containing sky values.  This version of                MMM does not require SKY to be sorted beforehand.  SKY                is unaltered by this program.   OPTIONAL OUTPUTS:        skymod - Scalar giving estimated mode of the sky values        SIGMA -  Scalar giving standard deviation of the peak in the sky                histogram.  If for some reason it is impossible to derive                skymod, then SIGMA = -1.0        SKEW -   Scalar giving skewness of the peak in the sky histogram                 If no output variables are supplied or if /DEBUG is set                then the values of skymod, SIGMA and SKEW will be printed.   OPTIONAL KEYWORD INPUTS:        HIGHBAD - scalar value of the (lowest)  bad  pixel level (e.g. cosmic                 rays or saturated pixels) If not supplied, then there is                 assumed to be no high bad pixels.        MINSKY - Integer giving mininum number of sky values to be used.   MMM                 will return an error if fewer sky elements are supplied.                 Default = 20.        MAXITER - integer giving maximum number of iterations allowed,default=50        READNOISE - Scalar giving the read noise (or minimum noise for any                 pixel).     Normally, MMM determines the (robust) median by                 averaging the central 20% of the sky values.     In some cases                 where the noise is low, and pixel values are quantized a                 larger fraction may be needed.    By supplying the optional                 read noise parameter, MMM is better able to adjust the                 fraction of pixels used to determine the median.        /INTEGER - Set this keyword if the  input SKY vector only contains                 discrete integer values.    This keyword is only needed if the                 SKY vector is of type float or double precision, but contains                 only discrete integer values.     (Prior to July 2004, the                 equivalent of /INTEGER was set for all data types)        /DEBUG - If this keyword is set and non-zero, then additional                information is displayed at the terminal.        /SILENT - If set, then error messages will be suppressed when MMM                 cannot compute a background.    Sigma will still be set to -1  OPTIONAL OUTPUT KEYWORD:       NSKY - Integer scalar giving the number of pixels actually used for the              sky computation (after outliers have been removed).  NOTES:        (1) Program assumes that low  bad  pixels (e.g. bad CCD columns) have        already been deleted from the SKY vector.        (2) MMM was updated in June 2004 to better match more recent versions        of DAOPHOT.        (3) Does not work well in the limit of low Poisson integer counts        (4) MMM may fail for strongly skewed distributions.  METHOD:        The algorithm used by MMM consists of roughly two parts:        (1) The average and sigma of the sky pixels is computed.   These values        are used to eliminate outliers, i.e. values with a low probability        given a Gaussian with specified average and sigma.   The average        and sigma are then recomputed and the process repeated up to 20        iterations:        (2) The amount of contamination by stars is estimated by comparing the        mean and median of the remaining sky pixels.   If the mean is larger        than the median then the true sky value is estimated by        3*median - 2*mean   REVISION HISTORY:        Adapted to IDL from 1986 version of DAOPHOT in STSDAS,        W. Landsman, STX Feb 1987        Added HIGHBAD keyword, W. Landsman January, 1991        Fixed occasional problem with integer inputs    W. Landsman  Feb, 1994        Avoid possible 16 bit integer overflow   W. Landsman  November 2001        Added READNOISE, NSKY keywords,  new median computation                           W. Landsman   June 2004        Added INTEGER keyword W. Landsman July 2004        Improve numerical precision  W. Landsman  October 2004        Fewer aborts on strange input sky histograms W. Landsman October 2005        Added /SILENT keyword  November 2005        Fix too many /CON keywords to MESSAGE  W.L. December 2005        Fix bug introduced June 2004 removing outliers when READNOISE not set          N. Cunningham/W. Landsman  January 2006        Make sure that MESSAGE never aborts  W. Landsman   January 2008        Add mxiter keyword and change default to 50  W. Landsman August 2011        Added MINSKY keyword W.L. December 2011  ", "HIGHBADDEBUGReadNoiseNskyINTEGERMAXITERSILENTMINSKYsky_vectorskymodsigmaskew", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/modfits.html", "modfits.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "modfits.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/modfits.html#MODFITS", "MODFITS", 'routine in <a href="idlastro/modfits.html">modfits.pro</a>', "modfits.pro", "", "MODFITS", " NAME:       MODFITS  PURPOSE:       Modify a FITS file by updating the header and/or data array.  EXPLANATION:       Update the data and/or header in a specified FITS extension or primary       HDU.        The size of the supplied FITS header or data array does not       need to match the size of the existing header or data array.   CALLING SEQUENCE:       MODFITS, Filename_or_fcb, Data, [ Header, EXTEN_NO =, EXTNAME= , ERRMSG=]   INPUTS:       FILENAME/FCB = Scalar string containing either the name of the FITS file                   to be modified, or the IO file control block returned after                   opening the file with FITS_OPEN,/UPDATE.   The explicit                   use of FITS_OPEN can save time if many extensions in a                   single file will be updated.        DATA - data array to be inserted into the FITS file.   Set DATA = 0                to leave the data portion of the FITS file unmodified.   Data                can also be an IDL structure (e.g. as returned by MRDFITS).                provided that it does not include IDL pointers.        HEADER - FITS header (string array) to be updated in the FITS file.   OPTIONAL INPUT KEYWORDS:       A specific extension can be specified with either the EXTNAME or       EXTEN_NO keyword        EXTEN_NO - scalar integer specifying the FITS extension to modified.  For                example, specify EXTEN = 1 or /EXTEN to modify the first                FITS extension.       EXTNAME - string name of the extension to modify.   OPTIONAL OUTPUT KEYWORD:        ERRMSG - If this keyword is supplied, then any error mesasges will be                returned to the user in this parameter rather than depending on                on the MESSAGE routine in IDL.   If no errors are encountered                then a null string is returned.   EXAMPLES:      (1) Modify the value of the DATE keyword in the primary header of a              file TEST.FITS.                IDL&gt; h = headfits('test.fits')      ;Read primary header               IDL&gt; sxaddpar,h,'DATE','2001-03-23' ;Modify value of DATE               IDL&gt; modfits,'test.fits',0,h        ;Update header only         (2) Replace the values of the primary image array in 'test.fits' with                their absolute values                 IDL&gt; im = readfits('test.fits')    ;Read image array                IDL&gt; im = abs(im)                  ;Take absolute values                IDL&gt; modfits,'test.fits',im        ;Update image array         (3) Add some HISTORY records to the FITS header in the first extension                of a file 'test.fits'                 IDL&gt; h = headfits('test.fits',/ext)  ;Read first extension hdr                IDL&gt; sxaddhist,['Comment 1','Comment 2'],h                IDL&gt; modfits,'test.fits',0,h,/ext    ;Update extension hdr         (4) Change 'OBSDATE' keyword to 'OBS-DATE' in every extension in a            FITS file.    Explicitly open with FITS_OPEN to save compute time.                 fits_open,'test.fits',io,/update    ;Faster to explicity open                for i = 1,nextend do begin          ;Loop over extensions                    fits_read,io,0,h,/header_only,exten_no=i,/No_PDU ;Get header                    date= sxpar(h,'OBSDATE')         ;Save keyword value                    sxaddpar,h,'OBS-DATE',date,after='OBSDATE'                    sxdelpar,h,'OBSDATE'             ;Delete bad keyword                    modfits,io,0,h,exten_no=i        ;Update header                endfor             Note the use of the /No_PDU keyword in the FITS_READ call -- one            does *not* want to append the primary header, if the STScI            inheritance convention is adopted.   NOTES:        Uses the BLKSHIFT procedure to shift the contents of the FITS file if        the new data or header differs in size by more than 2880 bytes from the        old data or header.    If a file control block (FCB) structure is        supplied, then the values of START_HEADER, START_DATA and NBYTES may        be modified if the file size changes.         Also see the procedures FXHMODIFY to add a single FITS keyword to a        header in a FITS files, and FXBGROW to enlarge the size of a binary        table.   RESTRICTIONS:        (1) Cannot be used to modify the data in FITS files with random            groups or variable length binary tables.   (The headers in such            files *can* be modified.)         (2) If a data array but no FITS header is supplied, then MODFITS does            not check to make sure that the existing header is consistent with            the new data.         (3) Does not work with compressed files         (4) The Checksum keywords will not be updated if the array to be            updated is supplied as a structure (e.g. from MRDFITS).  PROCEDURES USED:        Functions:   N_BYTES(), SXPAR()        Procedures:  BLKSHIFT, CHECK_FITS, FITS_OPEN, FITS_READ   MODIFICATION HISTORY:        Written,    Wayne Landsman          December, 1994        Fixed possible problem when using WRITEU after READU   October 1997        New and old sizes need only be the same within multiple of 2880 bytes        Added call to IS_IEEE_BIG()     W. Landsman   May 1999        Added ERRMSG output keyword     W. Landsman   May 2000        Update tests for incompatible sizes   W. Landsman   December 2000        Major rewrite to use FITS_OPEN procedures W. Landsman November 2001        Add /No_PDU call to FITS_READ call  W. Landsman  June 2002        Update CHECKSUM keywords if already present in header, add padding        if new data  size is smaller than old  W.Landsman December 2002        Only check XTENSION value if EXTEN_NO &gt; 1   W. Landsman Feb. 2003        Correct for unsigned data on little endian machines W. Landsman Apr 2003        Major rewrite to allow changing size of data or header W.L. Aug 2003        Fixed case where updated header exactly fills boundary W.L. Feb 2004        More robust error reporting W.L. Dec 2004        Make sure input header ends with a END W.L.  March 2006        Assume since V5.5, remove VMS support, assume FITS_OPEN will            perform byte swapping   W.L. Sep 2006        Update FCB structure if file size changes W.L. March 2007        Fix problem when data size must be extended W.L. August 2007        Don't assume supplied FITS header is 80 bytes W. L. Dec 2007        Check for new END position after adding CHECKSUM  W.L. July 2008        Added EXTNAME input keyword  W.L. July 2008        Allow data to be an IDL structure  A. Conley/W.L. June 2009        Use V6.0 notation, add /NOZERO to BLKSHIFT W.L. Feb 2011        Don't try to update Checksums when structure supplied W.L. April 2011        Allow structure with only 1 element  W.L.  Feb 2012  ", "EXTEN_NOERRMSGEXTNAMEfilenamedataheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/month_cnv.html", "month_cnv.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "month_cnv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/month_cnv.html#month_cnv", "month_cnv", 'routine in <a href="idlastro/month_cnv.html">month_cnv.pro</a>', "month_cnv.pro", "", "month_cnv", " NAME:        MONTH_CNV  PURPOSE:        Convert between a month name and  the equivalent number  EXPLANATION: (e.g.,        For example, converts from 'January' to 1  or vice-versa.  CALLING SEQUENCE:        Result = MONTH_CNV( MonthInput, [/UP, /LOW, /SHORT ] )  INPUTS:        MonthInput - either a string ('January', 'Jan', 'Decem', etc.) or                an number from 1 to 12.  Scalar or array.  OPTIONAL KEYWORDS:        UP - if set and if a string is being returned, it will be in all                uppercase letters.        LOW - if set and if a string is being returned, it will be in all                lowercase letters.        SHORT - if set and if a string is being returned, only the first                three letters are returned.   OUTPUTS:        If the input is a string, the output is the matching month number.If                an input string isn't a valid month name, -1 is returned.        If the input is a number, the output is the matching month name.  The                default format is only the first letter is capitalized.  EXAMPLE:        To get a vector of all the month names:                Names = month_cnv(indgen(12)+1)   MODIFICATION HISTORY:        Written by:     Joel Wm. Parker, SwRI, 1998 Dec 9  ", "UpLowShortMonthInput", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/moonpos.html", "moonpos.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "moonpos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/moonpos.html#MOONPOS", "MOONPOS", 'routine in <a href="idlastro/moonpos.html">moonpos.pro</a>', "moonpos.pro", "", "MOONPOS", " NAME:        MOONPOS  PURPOSE:        To compute the RA and Dec of the Moon at specified Julian date(s).   CALLING SEQUENCE:        MOONPOS, jd, ra, dec, dis, geolong, geolat, [/RADIAN ]   INPUTS:        JD - Julian ephemeris date, scalar or vector, double precision suggested   OUTPUTS:        Ra  - Apparent right ascension of the moon in DEGREES, referred to the                true equator of the specified date(s)        Dec - The declination of the moon in DEGREES        Dis - The Earth-moon distance in kilometers (between the center of the              Earth and the center of the Moon).        Geolong - Apparent longitude of the moon in DEGREES, referred to the                ecliptic of the specified date(s)        Geolat - Apparent longitude of the moon in DEGREES, referred to the                ecliptic of the specified date(s)         The output variables will all have the same number of elements as the        input Julian date vector, JD.   If JD is a scalar then the output        variables will be also.   OPTIONAL INPUT KEYWORD:        /RADIAN - If this keyword is set and non-zero, then all output variables                are given in Radians rather than Degrees   EXAMPLES:        (1) Find the position of the moon on April 12, 1992         IDL&gt; jdcnv,1992,4,12,0,jd    ;Get Julian date        IDL&gt; moonpos, jd, ra ,dec     ;Get RA and Dec of moon        IDL&gt; print,adstring(ra,dec,1)                ==&gt; 08 58 45.23  +13 46  6.1         This is within 1  from the position given in the Astronomical Almanac         (2) Plot the Earth-moon distance for every day at 0 TD in July, 1996         IDL&gt; jdcnv,1996,7,1,0,jd                   ;Get Julian date of July 1        IDL&gt; moonpos,jd+dindgen(31), ra, dec, dis  ;Position at all 31 days        IDL&gt; plot,indgen(31),dis, /YNOZ   METHOD:        Derived from the Chapront ELP2000/82 Lunar Theory (Chapront-Touze' and        Chapront, 1983, 124, 50), as described by Jean Meeus in Chapter 47 of        Astronomical Algorithms'' (Willmann-Bell, Richmond), 2nd edition,        1998.    Meeus quotes an approximate accuracy of 10  in longitude and        4  in latitude, but he does not give the time range for this accuracy.         Comparison of this IDL procedure with the example in Astronomical        Algorithms'' reveals a very small discrepancy (~1 km) in the distance        computation, but no difference in the position calculation.         This procedure underwent a major rewrite in June 1996, and the new        calling sequence is *incompatible with the old* (e.g. angles now        returned in degrees instead of radians).   PROCEDURES CALLED:        CIRRANGE, ISARRAY(), NUTATE, TEN()  - from IDL Astronomy Library        POLY() - from IDL User's Library  MODIFICATION HISTORY:        Written by Michael R. Greason, STX, 31 October 1988.        Major rewrite, new (incompatible) calling sequence, much improved                accuracy,       W. Landsman   Hughes STX      June 1996        Added /RADIAN keyword  W. Landsman August 1997        Converted to IDL V5.0   W. Landsman   September 1997        Use improved expressions for L',D,M,M', and F given in 2nd edition of             Meeus (very slight change),  W. Landsman    November 2000        Avoid 32767 overflow   W. Landsman January 2005   ", "RADIANjdradecdisgeolonggeolat", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/morescratch.html", "morescratch.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "morescratch.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/morescratch.html#morescratch", "morescratch", 'routine in <a href="code_snapshots/obsolete_code/morescratch.html">morescratch.pro</a>', "morescratch.pro", "", "morescratch", "", "inputthresh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mphase.html", "mphase.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mphase.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mphase.html#mphase", "mphase", 'routine in <a href="idlastro/mphase.html">mphase.pro</a>', "mphase.pro", "", "mphase", " NAME:        MPHASE  PURPOSE:        Return the illuminated fraction of the Moon at given Julian date(s)   CALLING SEQUENCE:        MPHASE, jd, k  INPUT:        JD - Julian date, scalar or vector, double precision recommended  OUTPUT:        k - illuminated fraction of Moon's disk (0.0 &lt; k &lt; 1.0), same number            of elements as jd.   k = 0 indicates a new moon, while k = 1 for            a full moon.  EXAMPLE:        Plot the illuminated fraction of the moon for every day in July        1996 at 0 TD (~Greenwich noon).         IDL&gt; jdcnv, 1996, 7, 1, 0, jd         ;Get Julian date of July 1        IDL&gt; mphase, jd+dindgen(31), k        ;Moon phase for all 31 days        IDL&gt; plot, indgen(31),k               ;Plot phase vs. July day number   METHOD:        Algorithm from Chapter 46 of  Astronomical Algorithms  by Jean Meeus        (Willmann-Bell, Richmond) 1991.   SUNPOS and MOONPOS are used to get        positions of the Sun and the Moon (and the Moon distance).   The        selenocentric elongation of the Earth from the Sun (phase angle)        is then computed, and used to determine the illuminated fraction.  PROCEDURES CALLED:        MOONPOS, SUNPOS  REVISION HISTORY:        Written W. Landsman     Hughes STX           June 1996        Converted to IDL V5.0   W. Landsman   September 1997        Use /RADIAN keywords to MOONPOS, SUNPOS internally  W. Landsman Aug 2000  ", "jdk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mrandomn.html", "mrandomn.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mrandomn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mrandomn.html#mrandomn", "mrandomn", 'routine in <a href="idlastro/mrandomn.html">mrandomn.pro</a>', "mrandomn.pro", "", "mrandomn", "  NAME:      MRANDOMN  PURPOSE:  Function to draw NRAND random deviates from a multivariate normal  distribution with zero mean and covariance matrix COVAR.   AUTHOR : Brandon C. Kelly, Steward Obs., Sept. 2004   INPUTS :      SEED - The random number generator seed, the default is IDL's            default in RANDOMN()     COVAR - The covariance matrix of the multivariate normal             distribution.  OPTIONAL INPUTS :      NRAND - The number of randomn deviates to draw. The default is             one.  OUTPUT :      The random deviates, an [NRAND, NP] array where NP is the     dimension of the covariance matrix, i.e., the number of     parameters.   ROUTINES CALLED :      POSITIVE, DIAG  ", "seedcovarnrand", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mrd_hread.html", "mrd_hread.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mrd_hread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mrd_hread.html#mrd_hread", "mrd_hread", 'routine in <a href="idlastro/mrd_hread.html">mrd_hread.pro</a>', "mrd_hread.pro", "", "mrd_hread", " NAME:      MRD_HREAD   PURPOSE:      Reads a FITS header from an opened disk file or Unix pipe  EXPLANATION:      Like FXHREAD but also works with compressed Unix files   CALLING SEQUENCE:      MRD_HREAD, UNIT, HEADER  [, STATUS, /SILENT, ERRMSG =, /FIRSTBLOCK ]  INPUTS:      UNIT    = Logical unit number of an open FITS file  OUTPUTS:      HEADER  = String array containing the FITS header.  OPT. OUTPUTS:      STATUS  = Condition code giving the status of the read.  Normally, this                  is zero, but is set to -1 if an error occurs, or if the                  first byte of the header is zero (ASCII null).  OPTIONAL KEYWORD INPUT:       /FIRSTBLOCK - If set, then only the first block (36 lines or less) of                 the FITS header are read into the output variable.   If only                 size information (e.g. BITPIX, NAXIS) is needed from the                 header, then the use of this keyword can save time.  The                 file pointer is still positioned at the end of the header,                 even if the /FIRSTBLOCK keyword is supplied.       /SILENT - If set, then warning messages about any invalid characters in                 the header are suppressed.       /SKIPDATA - If set, then the file point is positioned at the end of the                 HDU after the header is read, i.e. the following data block                 is skipped.   Useful, when one wants to the read the headers                 of multiple extensions.       /NO_BADHEADER - if set, returns if FITS header has illegal characters                 By default, MRD_HREAD replaces bad characters with blanks,                 issues a warning, and continues.  OPTIONAL OUTPUT PARAMETER:        ERRMSG  = If this keyword is present, then any error messages will be                  returned to the user in this parameter rather than                  depending on the MESSAGE routine in IDL.  If no errors are                  encountered, then a null string is returned.  RESTRICTIONS:       The file must already be positioned at the start of the header.  It       must be a proper FITS file.  SIDE EFFECTS:        The file ends by being positioned at the end of the FITS header, unless        an error occurs.  REVISION HISTORY:       Written,  Thomas McGlynn                     August 1995       Modified, Thomas McGlynn		     January 1996          Changed MRD_HREAD to handle Headers which have null characters           A warning message is printed out but the program continues.           Previously MRD_HREAD would fail if the null characters were           not in the last 2880 byte block of the header.  Note that           such characters are illegal in the header but frequently           are produced by poor FITS writers.       Added /SILENT keyword   W. Landsman   December 2000       Added /FIRSTBLOCK keyword  W. Landsman   February 2003       Added ERRMSG, SKIPDATA keyword W. Landsman          April 2009       Close file unit even after error message   W.L.  October 2010       Added /NO_BADHEADER  Zarro (ADNET), January 2012  ", "SILENTFIRSTBLOCKERRMSGSKIPDATANO_BADHEADERunitheaderstatus", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mrd_skip.html", "mrd_skip.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mrd_skip.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mrd_skip.html#mrd_skip", "mrd_skip", 'routine in <a href="idlastro/mrd_skip.html">mrd_skip.pro</a>', "mrd_skip.pro", "", "mrd_skip", " NAME:        MRD_SKIP  PURPOSE:        Skip a number of bytes from the current location in a file or a pipe  EXPLANATION:        First tries using POINT_LUN and if this doesn't work, perhaps because        the unit is a pipe or a socket, MRD_SKIP will just read in the        requisite number  of bytes.  CALLING SEQUENCE:        MRD_SKIP, Unit, Nskip   INPUTS:        Unit - File unit for the file or pipe in question, integer scalar        Nskip - Number of bytes to be skipped, positive integer  NOTES:        This routine should be used in place of POINT_LUN wherever a pipe        or socket may be the input unit (see the procedure FXPOSIT for an        example).   Note that it assumes that it can only work with nskip &gt;= 0        so it doesn't even try for negative values.         For reading a pipe, MRD_SKIP currently uses a maximum buffer size        of 8 MB.   This chunk value can be increased for improved efficiency        (or decreased if you really have little memory.)  REVISION HISTORY:        Written, Thomas A. McGlynn    July 1995 	Don't even try to skip bytes on a pipe with POINT_LUN, since this 	might reset the current pointer     W. Landsman        April 1996        Increase buffer size, check fstat.compress W. Landsman  Jan 2001        Only a warning if trying read past EOF   W. Landsman   Sep 2001        Use 64bit longword for skipping in very large files W. Landsman Sep 2003        Assume since V5.4, fstat.compress available W. Landsman April 2006        POINT_LUN for compressed files is as fast as any W. Landsman Oct 2006        Don't try to use POINT_LUN on compressed files W. Landsman Dec. 2006   ", "unitnskip", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mrd_struct.html", "mrd_struct.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mrd_struct.pro", "", "", " NAME:        MRD_STRUCT  PURPOSE:        Return a structure as defined in the names and values data.  CALLING SEQUENCE:        struct = MRD_STRUCT(NAMES, VALUES, NROW, STRUCTYP='name' )  INPUT PARAMETERS:        NAMES   = A string array of names of structure fields.        VALUES  = A string array giving the values of the structure                  fields.  See examples below.        NROW    = The number of elements in the structure array.   RETURNS:        A structure as described in the parameters or 0 if an error        is detected.   OPTIONAL KEYWORD PARAMETERS:        /NO_EXECUTE - If set then the use of the EXECUTE() statement is avoided.                   By default, the NO_EXECUTE pathway is used if IDL is                   running under the Virtual Machine.    Note if  /NO_EXECUTE                   is set, then the user cannot supply arbitary values, but                   all possible values used by MRDFITS will be allowed.        STRUCTYP = The structure type.  Since IDL does not allow the                   redefinition of a named structure it is an error                   to call MRD_STRUCT with different parameters but                   the same STRUCTYP in the same session.  If this                   keyword is not set an anonymous structure is created.  COMMON BLOCKS:        MRD_COMMON  SIDE EFFECTS:        May create a temporary file if the structure definition is too long        for the EXECUTE function and using old style structures   RESTRICTIONS:        By default, the program defines the structure in a long string        which is executed with CREATE_STRUCT within a single EXECUTE statement.         If program is being run in the IDL Virtual machine (EXECUTE statement        not allowed), then a separate CREATE_STRUCT statement is called        for each tag.   This mode does not have the full capabilities of the        normal mode, but should be sufficient for use with MRDFITS().  PROCEDURE:        A structure definition is created using the parameter values.        MRD_NSTRUCT is called  and generates the structure in pieces using the        execute and create_struct keywords.   EXAMPLES:        (1) str = mrd_struct(['fld1', 'fld2'], ['0','dblarr(10,10)'],3)            print, str(0).fld2(3,3)        Note that  0  is always considered short integer even if the default        integer is set to long.         (2) str = mrd_struct(['a','b','c','d'],['1', '1.', '1.d0',  '1' ],1)                ; returns a structure with integer, float, double and string                ; fields.  PROCEDURE CALLS:        GETTOK() - needed for virtual machine mode only  MODIFICATION HISTORY:        Created by T. McGlynn October, 1994.        Modified by T. McGlynn September, 1995.           Added capability to create substructures so that structure           may contain up to 4096 distinct elements.  [This can be           increased by futher iteration of the process used if needed.]        Removed V4.0 reference to common block  October 1997        Allowed unlimited number of structure elements if the version        is greater than 5.0.  Put back in code to handle prior versions.        The [] will need to be translated back to () for this to        work.  T. McGlynn December 15 1998.        Add MRD_NSTRUCT since IDL has mysterious problems compiling        very large structures.        Removed TEMPDIR and OLD_STRUCT keywords  W. Landsman October 2003        Alternate pathway without EXECUTE for V6.0 virtual machine, D. Lindler        Removed limit on EXECUTE statement.  W. Landsman  October 2003        Restore EXECUTE limit (sigh...), added NO_EXECUTE keyword                          W. Landsman July 2004        Fix use of STRUCTYP with /NO_EXECUTE  W. Landsman June 2005        Assume since V6.0 (lmgr function available), remove 131 string length              limit for execute    W. Landsman Jun 2009        Restore EXECUTE limit (sigh...)   W. Landsman July 2009        Make sure  0  is a short integer even with compile_opt idl2  July 2010        Added  0.0 ,  0.0d ,  0u ,  0ul , and  0ull  as valid tags              for /NO_EXECUTE  E. Rykoff May 2012  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mrd_struct.html#mrd_struct", "mrd_struct", 'routine in <a href="idlastro/mrd_struct.html">mrd_struct.pro</a>', "mrd_struct.pro", "", "mrd_struct", "", "no_executestructyptempdirsilentold_structnamesvaluesnrow", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mrdfits.html", "mrdfits.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mrdfits.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_fxpar", "mrd_fxpar", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_fxpar", " NAME:      MRDFITS   PURPOSE:      Read all standard FITS data types into arrays or structures.   EXPLANATION:       Further information on MRDFITS is available at       http://idlastro.gsfc.nasa.gov/mrdfits.html        **This version requires a post March 2009 version of fxposit.pro**  CALLING SEQUENCE:       Result = MRDFITS( Filename/FileUnit,[Exten_no/Exten_name, Header],                        /FPACK, /NO_FPACK, /FSCALE , /DSCALE , /UNSIGNED,                        ALIAS=strarr[2,n], /USE_COLNUM,                        /NO_TDIM, ROWS = [a,b,...], $                        /POINTER_VAR, /FIXED_VAR, EXTNUM=                        RANGE=[a,b], COLUMNS=[a,b,...]), ERROR_ACTION=x,                        COMPRESS=comp_prog, STATUS=status, /VERSION,                        /EMPTYSTRING )   INPUTS:       Filename = String containing the name of the file to be read or                  file number of an open unit.  If an empty string is supplied,                  then user will be prompted for the file name.    The user                  will also be prompted if a wild card is given in the file                  name, and there is more than one file name match.                  If the file name ends in .gz or .fz (or .Z on Unix systems)                  the file will be dynamically decompressed.                                     or       FiluUnit = An integer file unit which has already been                  opened for input.  Data will be read from this                  unit and the unit will be left pointing immediately                  after the HDU that is read.  Thus to read a compressed                  file with many HDU's a user might do something like:                       lun=fxposit(filename, 3)  ; Skip the first three HDU's                       repeat begin                           thisHDU = mrdfits(lun, 0, hdr, status=status)                           ... process the HDU ...                       endrep until status lt 0        Exten_no= Extension number to be read, 0 for primary array.                  Assumed 0 if not specified.                  If a unit rather than a filename                  is specified in the first argument, this is                  the number of HDU's to skip from the current position.       Exten_name - Name of the extension to read (as stored in the EXTNAME                  keyword).   This is a slightly slower method then specifying                  the extension number.  OUTPUTS:       Result = FITS data array or structure constructed from                the designated extension.  The format of result depends                upon the type of FITS data read.              Non-group primary array or IMAGE extension:                A simple multidimensional array is returned with the                dimensions given in the NAXISn keywords.              Grouped image data with PCOUNT=0.                As above but with GCOUNT treated as NAXIS(n+1).              Grouped image data with PCOUNT&gt;0.                The data is returned as an array of structures.  Each                structure has two elements.  The first is a one-dimensional                array of the group parameters, the second is a multidimensional                array as given by the NAXIS2-n keywords.              ASCII and BINARY tables.                The data is returned as a structure with one column for                each field in the table.  The names of the columns are                normally taken from the TTYPE keywords (but see USE_COLNUM).                Bit field columns                are stored in byte arrays of the minimum necessary                length.  Spaces and invalid characters are replaced by                underscores, and other invalid tag names are converted using                the IDL_VALIDNAME(/CONVERT_ALL) function.                Columns specified as variable length columns are stored                with a dimension equal to the largest actual dimension                used.  Extra values in rows are filled with 0's or blanks.                If the size of the variable length column is not                a constant, then an additional column is created giving the                size used in the current row.  This additional column will                have a tag name of the form L#_ colname  where # is the column                number and colname is the column name of the variable length                column.   If the length of each element of a variable length                column is 0 then the column is deleted.   OPTIONAL OUTPUT:        Header = String array containing the header from the FITS extension.   OPTIONAL INPUT KEYWORDS:        ALIAS    The keyword allows the user to specify the column names                 to be created when reading FITS data.  The value of                 this keyword should be a 2xn string array.  The first                 value of each pair of strings should be the desired                 tag name for the IDL column.  The second should be                 the FITS TTYPE value.  Note that there are restrictions                 on valid tag names.  The order of the ALIAS keyword                 is compatible with MWRFITS.        COLUMNS - This keyword allows the user to specify that only a                 subset of columns is to be returned.  The columns                 may be specified either as number 1,... n or by                 name or some combination of these two.                 If /USE_COLNUM is specified names should be C1,...Cn.                 The use of this keyword will not save time or internal                 memory since the extraction of specified columns                 is done after all columns have been retrieved from the                 FITS file.      Structure columns are returned in the order                 supplied in this keyword.        COMPRESS - This keyword allows the user to specify a                 decompression program to use to decompress a file that                 will not be automatically recognized based upon                 the file name.        /DSCALE - As with FSCALE except that the resulting data is                 stored in doubles.        /EMPTYSTRING - There was a bug in memory management for IDL versions                  prior to V8.0, causing a memory leak when reading                  empty strings in a FITS table.   Setting /EMPTYSTRING will                  avoid this problem by first reading strings into bytes and                  then converting.   However, there is a performance penalty.        ERROR_ACTION - Set the on_error action to this value (defaults                 to 2).        /FIXED_VAR- Translate variable length columns into fixed length columns                 and provide a length column for truly varying columns.                 This was only behavior prior to V2.5 for MRDFITS and remains                 the default (see /POINTER_VAR)        /FPACK - If set, then assume the FITS file uses FPACK compression                 (http://heasarc.gsfc.nasa.gov/fitsio/fpack/).     To read                 an FPACK compressed file, either this must be set or the                 file name must end in  .fz         /NO_FPACK - If present, then MRDFITS will not uncompress an extension                 compressed with FPACK (i.e with a .fz extension), but will                 just read the compressed binary stream.        /FSCALE - If present and non-zero then scale data to float                 numbers for arrays and columns which have either                 non-zero offset or non-unity scale.                 If scaling parameters are applied, then the corresponding                 FITS scaling keywords will be modified.        NO_TDIM  - Disable processing of TDIM keywords.  If NO_TDIM                 is specified MRDFITS will ignore TDIM keywords in                 binary tables.        /POINTER_VAR- Use pointer arrays for variable length columns.                 In addition to changing the format in which                 variable length arrays are stored, if the pointer_var                 keyword is set to any value other than 1 this also disables                 the deletion of variable length columns. (See /FIXED_VAR)                 Note that because pointers may be present in the output                 structure, the user is responsible for memory management                 when deleting or reassigning the structure (e.g. use HEAP_FREE                 first).        RANGE  - A scalar or two element vector giving the start                 and end rows to be retrieved.  For ASCII and BINARY                 tables this specifies the row number.  For GROUPed data                 this will specify the groups.  For array images, this                 refers to the last non-unity index in the array.  E.g.,                 for a 3 D image with NAXIS* values = [100,100,1], the                 range may be specified as 0:99, since the last axis                 is suppressed.  Note that the range uses IDL indexing                 So that the first row is row 0.                 If only a single value, x, is given in the range,                 the range is assumed to be [0,x-1].        ROWS -  A scalar or vector specifying a  specific row or rows to read                (first row is 0).   For example to read rows 0,                12 and 23 only, set ROWS=[0,12,23].   Valid for images, ASCII                and binary tables, but not GROUPed data.   For images                the row numbers refer to the last non-unity index in the array.                Note that the use of the ROWS will not improve the speed of                MRDFITS since the entire table will be read in, and then subset                to the specified rows.     Cannot be used at the same time as                the RANGE keyword        /SILENT - Suppress informative messages.        STRUCTYP - The structyp keyword specifies the name to be used                 for the structure defined when reading ASCII or binary                 tables.  Generally users will not be able to conveniently                 combine data from multiple files unless the STRUCTYP                 parameter is specified.  An error will occur if the                 user specifies the same value for the STRUCTYP keyword                 in calls to MRDFITS in the same IDL session for extensions                 which have different structures.        /UNSIGNED - For integer data with appropriate zero points and scales                 read the data into unsigned integer arrays.        /USE_COLNUM - When creating column names for binary and ASCII tables                 MRDFITS attempts to use the appropriate TTYPE keyword                 values.  If USE_COLNUM is specified and non-zero then                 column names will be generated as 'C1, C2, ... 'Cn'                 for the number of columns in the table.        /VERSION Print the current version number   OPTIONAL OUTPUT KEYWORDS:        EXTNUM - the number of the extension actually read.   Useful if the                  user specified the extension by name.        OUTALIAS - This is a 2xn string array where the first column gives the                 actual structure tagname, and the second gives the                 corresponding FITS keyword name (e.g. in the TTYPE keyword).                 This array can be passed directly to                 the alias keyword of MWRFITS to recreate the file originally                 read by MRDFITS.        STATUS - A integer status indicating success or failure of                 the request.  A status of &gt;=0 indicates a successful read.                 Currently                     0 -&gt; successful completion                    -1 -&gt; error                    -2 -&gt; end of file   EXAMPLES:        (1) Read a FITS primary array:                a = mrdfits('TEST.FITS')    or                a = mrdfits('TEST.FITS', 0, header)        The second example also retrieves header information.         (2) Read rows 10-100 of the second extension of a FITS file.                a = mrdfits('TEST.FITS', 2, header, range=[10,100])         (3) Read a table and ask that any scalings be applied and the        scaled data be converted to doubles.  Use simple column names,        suppress outputs.                a = mrdfits('TEST.FITS', 1, /dscale, /use_colnum, /silent)         (4) Read rows 3, 34 and 52 of a binary table and request that            variable length columns be stored as a pointer variable in the            output structure               a = mrdfits('TEST.FITS',1,rows=[3,34,52],/POINTER)  RESTRICTIONS:        (1)     Cannot handle data in non-standard FITS formats.        (2)     Doesn't do anything with BLANK or NULL values or                NaN's.  They are just read in.  They may be scaled                if scaling is applied.        (3)     Does not automatically detect a FPACK compressed file.  Either                the file name must end in .fz, or the /FPACK keyword must                be set  NOTES:        This multiple format FITS reader is designed to provide a        single, simple interface to reading all common types of FITS data.        MRDFITS DOES NOT scale data by default.  The FSCALE or DSCALE        parameters must be used.         Null values in an FITS ASCII table are converted to NaN (floating data),        or -2147483647L (longwords) or '...' (strings).   PROCEDURES USED:        The following procedures are contained in the main MRDFITS program.            MRD_IMAGE           -- Generate array/structure for images.            MRD_READ_IMAGE      -- Read image data.            MRD_ASCII           -- Generate structure for ASCII tables.            MRD_READ_ASCII      -- Read an ASCII table.            MRD_TABLE           -- Generate structure for Binary tables.            MRD_READ_TABLE      -- Read binary table info.            MRD_READ_HEAP       -- Read variable length record info.            MRD_SCALE           -- Apply scaling to data.            MRD_COLUMNS         -- Extract columns.          Other ASTRON Library routines used            FXPAR(), FXADDPAR, FXPOSIT, FXMOVE(), MATCH, MRD_STRUCT(), MRD_SKIP   MODIfICATION HISTORY:        V1.0 November 9, 1994 ----  Initial release.           Creator: Thomas A. McGlynn        V1.1 January 20, 1995 T.A. McGlynn           Fixed bug in variable length records.           Added TDIM support -- new routine mrd_tdim in MRD_TABLE.        V1.2           Added support for dynamic decompression of files.           Fixed further bugs in variable length record handling.        V1.2a           Added NO_TDIM keyword to turn off TDIM processing for           those who don't want it.           Bug fixes: Handle one row tables correctly, use BZERO rather than                BOFFSET.     Fix error in scaling of images.        V1.2b           Changed MRD_HREAD to handle null characters in headers.        V2.0 April 1, 1996           -Handles FITS tables with an arbitrary number of columns.           -Substantial changes to MRD_STRUCT to allow the use of           substructures when more than 127 columns are desired.           -All references to table columns are now made through the           functions MRD_GETC and MRD_PUTC.  See description above.           -Use of SILENT will now eliminate compilation messages for           temporary functions.           -Bugs in handling of variable length columns with either           a single row in the table or a maximum of a single element           in the column fixed.           -Added support for DCOMPLEX numbers in binary tables (M formats) for           IDL versions above 4.0.           -Created regression test procedure to check in new versions.           -Added error_action parameter to allow user to specify           on_error action.  This should allow better interaction with           new CHECK facility.  ON_ERROR statements deleted from           most called routines.           - Modified MRDFITS to read in headers containing null characters           with a warning message printed.        V2.0a April 16, 1996           - Added IS_IEEE_BIG() checks (and routine) so that we don't           worry about IEEE to host conversions if the machine's native           format is IEEE Big-endian.        V2.1 August 24, 1996           - Use resolve_routine for dynamically defined functions           for versions &gt; 4.0           - Fix some processing in random groups format.           - Handle cases where the data segment is--legally--null.           In this case MRDFITS returns a scalar 0.           - Fix bugs with the values for BSCALE and BZERO (and PSCAL and           PZERO) parameters set by MRDFITS.        V2.1a April 24, 1997  Handle binary tables with zero length columns        V2.1b May 13,1997 Remove whitespace from replicate structure definition        V2.1c May 28,1997 Less strict parsing of XTENSION keyword        V2.1d June 16, 1997 Fixed problem for &gt;32767 entries introduced 24-Apr        V2.1e Aug 12, 1997 Fixed problem handling double complex arrays        V2.1f Oct 22, 1997 IDL reserved words can't be structure tag names        V2.1g Nov 24, 1997 Handle XTENSION keywords with extra blanks.        V2.1h Jul 26, 1998 More flexible parsing of TFORM characters        V2.2 Dec 14, 1998 Allow fields with longer names for                         later versions of IDL.                         Fix handling of arrays in scaling routines.                         Allow &gt;128 fields in structures for IDL &gt;4.0                         Use more efficient structure copying for                         IDL&gt;5.0        V2.2b June 17, 1999 Fix bug in handling case where                            all variable length columns are deleted                            because they are empty.        V2.3 March 7, 2000 Allow user to supply file handle rather                           than file name.                           Added status field.                           Now needs FXMOVE routine        V2.3b April 4, 2000                           Added compress option (from D. Palmer)        V2.4  July 4, 2000 Added STATUS=-1 for  File access error  (Zarro/GSFC)        V2.4a May 2, 2001  Trim binary format string   (W. Landsman)        V2.5 December 5, 2001 Add unsigned, alias, 64 bit integers. version, $                            /pointer_val, /fixed_var.        V2.5a Fix problem when both the first and the last character             in a TTYPEnn value are invalid structure tag characters        V2.6 February 15, 2002 Fix error in handling unsigned numbers, $                            and 64 bit unsigneds. (Thanks to Stephane Beland)        V2.6a September 2, 2002 Fix possible conflicting data structure for                           variable length arrays (W. Landsman)        V2.7 July, 2003  Added Rows keyword (W. Landsman)        V2.7a September  2003 Convert dimensions to long64 to handle huge files        V2.8 October 2003 Use IDL_VALIDNAME() function to ensure valid tag names                          Removed OLD_STRUCT and TEMPDIR keywords W. Landsman        V2.9 February 2004 Added internal MRD_FXPAR procedure for faster                      processing of binary table headers E. Sheldon        V2.9a March 2004 Restore ability to read empty binary table W. Landsman              Swallow binary tables with more columns than given in TFIELDS        V2.9b Fix to ensure order of TFORMn doesn't matter        V2.9c Check if extra degenerate NAXISn keyword are present W.L. Oct 2004        V2.9d Propagate /SILENT to MRD_HREAD, more LONG64 casting W. L. Dec 2004        V2.9e Add typarr[good] to fix a problem reading zero-length columns              A.Csillaghy, csillag@ssl.berkeley.edu (RHESSI)        V2.9f Fix problem with string variable binary tables, possible math              overflow on non-IEEE machines  WL Feb. 2005        V2.9g Fix problem when setting /USE_COLNUM   WL Feb. 2005        V2.10 Use faster keywords to BYTEORDER  WL May 2006        V2.11  Add ON_IOERROR, CATCH, and STATUS keyword to MRD_READ_IMAGE to              trap EOF in compressed files DZ  Also fix handling of unsigned              images when BSCALE not present  K Chu/WL   June 2006        V2.12 Allow extension to be specified by name, added EXTNUM keyword                      WL    December 2006        V2.12a Convert ASCII table column to DOUBLE if single precision is                  insufficient        V2.12b Fixed problem when both /fscale and /unsigned are set                   C. Markwardt    Aug 2007        V2.13  Use SWAP_ENDIAN_INPLACE instead of IEEE_TO_HOST and IS_IEEE_BIG                 W. Landsman Nov 2007        V2.13a One element vector allowed for file name W.L. Dec 2007        V2.13b More informative error message when EOF found W.L. Jun 2008        V2.14  Use vector form of VALID_NUM(), added OUTALIAS keyword                                        W.L. Aug 2008        V2.15  Use new FXPOSIT which uses on-the-fly byteswapping W.L. Mar 2009        V2.15a Small efficiency updates to MRD_SCALE W.L. Apr 2009        V2.15b Fixed typo introduced Apr 2009        V2.15c Fix bug introduced Mar 2009  when file unit used W.L. July 2009        V2.16  Handle FPACK compressed files    W. L. July 2009        V2.17  Use compile_opt hidden on all routines except mrdfits.pro W.L. July 2009        V2.18  Added /EMPTYSTRING keyword W. Landsman August 2009        V2.18a Fix Columns keyword output, A. Kimball/ W. Landsman Feb 2010        V2.18b Fix bug with /EMPTYSTRING and multidimensional strings                              S. Baldridge/W.L. August 2010        V2.18c Fix unsigned bug caused by compile_opt idl2 WL  Nov 2010        V2.19  Use V6.0 operators WL Nov 2010        V2.19a Fix complex data conversion in variable length tables WL Dec 2010        V2.19b Fix bug with /FSCALE introduced Nov 2010 WL Jan 2011        V2.19c Fix bug with ROWS keyword introduced Nov 2010 WL Mar 2011        V2.20  Convert Nulls in ASCII tables, better check of duplicate keywords                                             WL May 2011        V2.20a Better error checking for FPACK files  WL October 2012  ", "hdrxtennfldnrowrsizefnamesfformsscalesoffsets", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_dofn", "mrd_dofn", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_dofn", "", "aliasnameindexuse_colnum", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_doff", "mrd_doff", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_doff", "", "formdimtype", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_chkfn", "mrd_chkfn", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_chkfn", "", "namenamelistindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_unsigned_offset", "mrd_unsigned_offset", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_unsigned_offset", "", "type", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_chkunsigned", "mrd_chkunsigned", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_chkunsigned", "", "unsignedbitpixscalezero", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_unsignedtype", "mrd_unsignedtype", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_unsignedtype", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_version", "mrd_version", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_version", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_atype", "mrd_atype", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_atype", "", "formtypeslen", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_read_ascii", "mrd_read_ascii", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_read_ascii", "", "old_structrowsunitrangenbytesnrowsnfldtyparrposarrlenarrnullarrtable", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_ascii", "mrd_ascii", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_ascii", "", "rowssilentcolumnsaliasoutaliasheaderstructypuse_colnumrangetablenbytesnrowsnfldtyparrposarrlenarrnullarrfnamesfvaluesscalesoffsetsscalingstatus", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_columns", "mrd_columns", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_columns", "", "structypsilenttablecolumnsfnamesfvaluesvclsvtpesscalesoffsetsscaling", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_read_image", "mrd_read_image", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_read_image", "", "rowsstatusunixpipeunitrangemaxdrsizetable", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_axes_trunc", "mrd_axes_trunc", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_axes_trunc", "", "naxisdimssilent", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_image", "mrd_image", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_image", "", "silentunsignedrowsheaderrangemaxdrsizetablescalesoffsetsscalingstatus", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_ptrscale", "mrd_ptrscale", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_ptrscale", "", "arrayscaleoffset", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_string", "mrd_string", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_string", "", "structypsilenttableheadertyparrfnamesfvaluesnrec", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_scale", "mrd_scale", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_scale", "", "dscalestructypsilenttypescalesoffsetstableheaderfnamesfvaluesnrec", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_varcolumn", "mrd_varcolumn", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_varcolumn", "", "vtypearrayheapoffsiz", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_fixcolumn", "mrd_fixcolumn", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_fixcolumn", "", "vtypearrayheapoffsiz", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_read_heap", "mrd_read_heap", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_read_heap", "", "silentcolumnsrowspointer_varfixed_varunitheaderrangefnamesfvaluesvclsvtpestablestructypscalingscalesoffsetsstatus", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_read_table", "mrd_read_table", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_read_table", "", "rowsunixpipeunitrangersizestructypnrowsnfldtyparrtable", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_tdim", "mrd_tdim", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_tdim", "", "no_tdimheaderindexflenarrstr", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrd_table", "mrd_table", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrd_table", "", "rowssilentcolumnsno_tdimaliasunsignedoutaliasemptystringheaderstructypuse_colnumrangersizetablenrowsnfldtyparrfnamesfvaluesvclsvtpesscalesoffsetsscalingstatus", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mrdfits.html#mrdfits", "mrdfits", 'routine in <a href="idlastro/mrdfits.html">mrdfits.pro</a>', "mrdfits.pro", "", "mrdfits", "", "structypuse_colnumrangedscalefscalefpackno_fpacksilentcolumnsno_tdimerror_actioncompressaliasrowsunsignedversionpointer_varfixed_varoutaliasemptystringstatusextnumfileextensionheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/multinom.html", "multinom.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "multinom.pro", "", "", " NAME:    MULTINOM  PURPOSE:  SIMULATE MULTINOMIAL RANDOM VARIABLES   AUTHOR : BRANDON C. KELLY, STEWARD OBS., APR 2006   INPUTS :     N - THE NUMBER OF TRIALS    P - A K-ELEMENT VECTOR CONTAINING THE PROBABILITIES FOR EACH        CLASS.   OPTIONAL INPUTS :     NRAND - THE NUMBER OF RANDOM VARIABLES TO DRAW    SEED - THE SEED FOR THE RANDOM NUMBER GENERATOR   OUTPUT :    NRAND RANDOM DRAWS FROM A MULTINOMIAL DISTRIBUTION WITH PARAMETERS    N AND P.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/multinom.html#multinom", "multinom", 'routine in <a href="idlastro/multinom.html">multinom.pro</a>', "multinom.pro", "", "multinom", "", "seednpnrand", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/multiplot.html", "multiplot.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "multiplot.pro", "", "", " Name:    MULTIPLOT   Purpose: 	Create multiple plots with simple control over the gaps between plots.    By default, the gap is zero but this can be set with the    gap= keyword, or xgap=, ygap= for individual control over different axes.    You can also place a single title along the x, y and top axes of the    matrix of plots using the mtitle, mxtitle and mytitle keywords.  	It is good for data with one or two shared axes and retains all the 	versatility of the plot commands (e.g. all keywords and log scaling). 	The plots are connected with the shared axes, which saves space by 	omitting redundant ticklabels and titles.  Multiplot does this by 	setting !p.position, !x.tickname and !y.tickname automatically. 	A call (multiplot,/reset) restores original values.   CALLING SEQUENCE: 	multiplot, pmulti,        gap=, xgap=, ygap=,        /square,        /doxaxis, /doyaxis,        mTitle=, mTitSize=, mTitOffset=,        mxTitle=, mxTitSize=, mxTitOffset=,        myTitle=, myTitSize=, myTitOffset=,        xtickformat=, ytickformat=        /default, /reset, /rowmajor, /initialize   INPUTS:    pmulti: Optional input. [Nx,Ny] array describing the shape of the        matrix of plots.  This is equivalent to the 2nd and 3rd elements        of !p.multi.  Or you can send all 5 elements of the !p.multi.   KEYWORD INPUTS:    gap=: Set the gap between plots in normalized units.  Default is 0.        This input overrides the xgap and ygap inputs.    xgap=: Gap between plots in the x direction. Default 0. To set both        x and y gap to the same value just use the gap keyword.    ygap=: Gap between plots in the y direction. Default 0. To set both        x and y gap to the same value just use the gap keyword.     mTitle: A single title to go across the top of the matrix of plots,        as opposed to the plot over single plots you generate with the        plot command for example.    mTitSize: The font size of the top title. Default is 1.25*!p.charsize    mTitOffset: Offset of the title in the y-direction.    mxTitle, mxTitSize, mxTitOffset: same as above but for the x-axis title    myTitle, myTitSize, myTitOffset: same as above but for the y-axis title     xtickformat, ytickformat: Set the default tick formats when the ticks        are plotted. This allows the user to avoid sending this to each        plotting command which can have unexpected results if that axis        was not to get tick labels in a given point in the matrix.   KEYWORDS SWITCHES:    /square: Force the axis ratio of each plot to be square. Note if        xgap and ygap are set to different values, this axis ratio will        not be preserved.  It will be preserved if gap= is used.     /doxaxis: Put axis labels, etc on the axis. Default is to place labels        only on the left side and bottom sides of the plot matrix, but may        be useful when some cells are empty; for example the x-axis of        a 2x2 grid when only 3 total plots will be created.    /doyaxis: Put axis labels, etc on the yxis.  Default is to place labels        only on the left side and bottom sides of the plot matrix, but may        be useful when some cells are empty; for example the x-axis of        a 2x2 grid when only 3 total plots will be created.     /rowmajor: Like setting 5th element of !p.multi to 1.    /reset: Set plotting parameters to their saved values from before        multiplot was initially called.    /default: Set plotting parameters to IDL defaults.  This is useful        when the saved parameters get in a whacky state.    /initialize: Just do the initialization. This is what happends when        you first call multiplot anyway.   EXAMPLES:    ; Make an array of plots [4,3] with a gap of 0.1 (in norm. coords.)    ; and overall titles along the x and y axes as given.  Force the    ; plots to be square.         cgerase & multiplot, [4,3], /square, gap=0.1, mXtitle='R', mYtitle='F(R)'        for i=0,4*3-1 do begin            cgplot, struct[i].x, struct[i].y, psym=4            multiplot        endfor        multiplot,/reset   Side Effects:    Multiplot sets a number of system variables: !p.position, !p.multi, 	!x.tickname, !y.tickname, !P.noerase---but all can be reset with 	the call: multiplot,/reset     Things can get out of wack if your program crashes in the middle of    making a matrix of plots, and often /reset will not fix it.  In those    cases, calling multiplot,/default will often fix the problem.   Restrictions: 	1. If you use !p.multi as the method of telling how many plots 	are present, you have to set !p.multi at the beginning each time you 	use multiplot or call multiplot with the /reset keyword. 	2. There is no way to make plots of different sizes; each plot 	covers the same area on the screen or paper.   Modification history: 	write, 21-23 Mar 94, Fred Knight (knight@ll.mit.edu) 	alter plot command that sets !x.window, etc. per suggestion of 	  Mark Hadfield (hadfield@storm.greta.cri.nz), 7 Apr 94, FKK 	add a /default keyword restore IDL's default values of system vars, 	  7 Apr 94, FKK 	modify two more sys vars !x(y).tickformat to suppress user-formatted 	  ticknames, per suggestion of Mark Hadfield (qv), 8 Apr 94, FKK     2001-03-20    Added /square keyword        Work in device coordinates so we can force aspect ratio to be square        if requested. Erin Scott Sheldon UMichigan     2007-06-18        Can now place titles on the overall x and y axes, as well as a        top title using these new keywords.            mTitle=, mTitSize=, mTitOffset=,            mxTitle=, mxTitSize=, mxTitOffset=,            myTitle=, myTitSize=, myTitOffset=,        Can also control overall tick formats. Useful because can just call        multiplot initially and set this, while calling on each call to        the plotting program will have unexpected results if the ticks        are not to be labelled for that place in the matrix.            xtickformat, ytickformat        Erin Sheldon, NYU    2007-08-28:        Can now add gaps between the plots with these keywords:            gap=, xgap=, ygap=        where the values are in normalized coordinates. Erin Sheldon, NYU    2009-11-23        Initialize common block if M[X/Y]TITLE set W. Landsman    2011-02-07         Use Coyote Graphics  W. Landsman    2012-03-21         Use cgplot on initial call to get right background  W.L.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/multiplot.html#multiplot", "multiplot", 'routine in <a href="idlastro/multiplot.html">multiplot.pro</a>', "multiplot.pro", "", "multiplot", "", "helpinitializeresetdefaultrowmajorverbosesquaregapxgapygapdoxaxisdoyaxisxtickformatytickformatmtitlemTitSizemTitOffsetmxTitlemxTitSizemxTitOffsetmyTitlemyTitSizemyTitOffsetpmulti", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/mwrfits.html", "mwrfits.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "mwrfits.pro", "", "", " NAME:        MWRFITS  PURPOSE:        Write all standard FITS data types from input arrays or structures.   EXPLANATION:        Must be used with a post-October 2009 version of FXADDPAR.   CALLING SEQUENCE:        MWRFITS, Input, Filename, [Header],                        /LSCALE , /ISCALE, /BSCALE,                        /USE_COLNUM, /Silent, /Create, /No_comment, /Version, $                        Alias=, /ASCII, Separator=, Terminator=, Null=,                        /Logical_cols, /Bit_cols, /Nbit_cols,                        Group=, Pscale=, Pzero=, Status=   INPUTS:        Input = Array or structure to be written to FITS file.                 -When writing FITS primary data or image extensions                 input should be an array.                --If data is to be grouped                  the Group keyword should be specified to point to                  a two dimensional array.  The first dimension of the                  Group array will be PCOUNT while the second dimension                  should be the same as the last dimension of Input.                --If Input is undefined, then a dummy primary dataset                  or Image extension is created [This might be done, e.g.,                  to put appropriate keywords in a dummy primary                  HDU].                 -When writing an ASCII table extension, Input should                 be a structure array where no element of the structure                 is a structure or array (except see below).                --A byte array will be written as A field.  No checking                  is done to ensure that the values in the byte field                  are valid ASCII.                --Complex numbers are written to two columns with '_R' and                  '_I' appended to the TTYPE fields (if present).  The                  complex number is enclosed in square brackets in the output.                --Strings are written to fields with the length adjusted                  to accommodate the largest string.  Shorter strings are                  blank padded to the right.                 -When writing a binary table extension, the input should                 be a structure array with no element of the structure                 being a substructure.                 If a structure is specified on input and the output                file does not exist or the /CREATE keyword is specified                a dummy primary HDU is created.         Filename = String containing the name of the file to be written.                 By default MWRFITS appends a new extension to existing                 files which are assumed to be valid FITS.  The /CREATE                 keyword can be used to ensure that a new FITS file                 is created even if the file already exists.   OUTPUTS:   OPTIONAL INPUTS:        Header = Header should be a string array.  Each element of the                 array is added as a row in the FITS  header.  No                 parsing is done of this data.  MWRFITS will prepend                 required structural (and, if specified, scaling)                 keywords before the rows specified in Header.                 Rows describing columns in the table will be appended                 to the contents of Header.                 Header lines will be extended or truncated to                 80 characters as necessary.                 If Header is specified then on return Header will have                 the header generated for the specified extension.   OPTIONAL INPUT KEYWORDS:        ALias=   Set up aliases to convert from the IDL structure                 to the FITS column name.  The value should be                 a STRARR(2,*) value where the first element of                 each pair of values corresponds to a column                 in the structure and the second is the name                 to be used in the FITS file.                 The order of the alias keyword is compatible with                 use in MRDFITS.        ASCII  - Creates an ASCII table rather than a binary table.                 This keyword may be specified as:                 /ASCII - Use default formats for columns.                 ASCII='format_string' allows the user to specify                   the format of various data types such using the following                   syntax 'column_type:format, column_type:format'.  E.g.,                 ASCII='A:A1,I:I6,L:I10,B:I4,F:G15.9,D:G23.17,C:G15.9,M:G23.17'                 gives the default formats used for each type.  The TFORM                 fields for the real and complex types indicate will use corresponding                 E and D formats when a G format is specified.                 Note that the length of the field for ASCII strings and                 byte arrays is automatically determined for each column.        BIT_COLS=   An array of indices of the bit columns.   The data should                 comprise a byte array with the appropriate dimensions.                 If the number of bits per row (see NBIT_COLS)                 is greater than 8, then the first dimension of the array                 should match the number of input bytes per row.        BSCALE   Scale floats, longs, or shorts to unsigned bytes (see LSCALE)        /CREATE   If this keyword is non-zero, then a new FITS file will                 be created regardless of whether the file currently                 exists.  Otherwise when the file already exists,                 a FITS extension will be appended to the existing file                 which is assumed to be a valid FITS file.        GROUP=   This keyword indicates that GROUPed FITS data is to                 be generated.                 Group should be a 2-D array of the appropriate output type.                 The first dimension will set the number of group parameters.                 The second dimension must agree with the last dimension                 of the Input array.        ISCALE   Scale floats or longs to short integer (see LSCALE)        LOGICAL_COLS=  An array of indices of the logical column numbers.                 These should start with the first column having index *1*.                 The structure element should either be an array of characters                 with the values 'T' or 'F', or an array of bytes having the                 values byte('T')=84b, byte('F')=70b or 0b.     The use of bytes                 allows the specification of undefined values (0b).        LSCALE   Scale floating point numbers to long integers.                 This keyword may be specified in three ways.                 /LSCALE (or LSCALE=1) asks for scaling to be automatically                 determined. LSCALE=value divides the input by value.                 I.e., BSCALE=value, BZERO=0.  Numbers out of range are                 given the value of NULL if specified, otherwise they are given                 the appropriate extremum value.  LSCALE=(value,value)                 uses the first value as BSCALE and the second as BZERO                 (or TSCALE and TZERO for tables).        NBIT_COLS=  The number of bits actually used in the bit array.                 This argument must point to an array of the same dimension                 as BIT_COLS.        NO_TYPES  If the NO_TYPES keyword is specified, then no TTYPE                 keywords will be created for ASCII and BINARY tables.        No_comment Do not write comment keywords in the header        NULL=    Value to be written for integers/strings which are                 undefined or unwritable.        PSCALE=  An array giving scaling parameters for the group keywords.                 It should have the same dimension as the first dimension                 of Group.        PZERO=   An array giving offset parameters for the group keywords.                 It should have the same dimension as the first dimension                 of Group.        Separator= This keyword can be specified as a string which will                 be used to separate fields in ASCII tables.  By default                 fields are separated by a blank.        /SILENT   Suppress informative messages.  Errors will still                 be reported.        Terminator= This keyword can be specified to provide a string which                 will be placed at the end of each row of an ASCII table.                 No terminator is used when not specified.                 If a non-string terminator is specified (including                 when the /terminator form is used), a new line terminator                 is appended.        USE_COLNUM  When creating column names for binary and ASCII tables                 MWRFITS attempts to use structure field name                 values.  If USE_COLNUM is specified and non-zero then                 column names will be generated as 'C1, C2, ... 'Cn'                 for the number of columns in the table.        Version   Print the version number of MWRFITS.   OPTIONAL OUTPUT KEYWORD:        Status - 0 if FITS file is successfully written, -1 if there is a                 a problem (e.g. nonexistent directory, or no write permission)  EXAMPLE:        Write a simple array:             a=fltarr(20,20)             mwrfits,a,'test.fits'         Append a 3 column, 2 row, binary table extension to file just created.             a={name:'M31', coords:(30., 20.), distance:2}             a=replicate(a, 2);             mwrfits,a,'test.fits'         Now add on an image extension:             a=lonarr(10,10,10)             hdr=( COMMENT  This is a comment line to put in the header , $                   MYKEY    =  Some desired keyword value )             mwrfits,a,'test.fits',hdr   RESTRICTIONS:        (1)     Variable length columns are not supported for anything                other than simple types (byte, int, long, float, double).        (2)     Empty strings are converted to 1 element blank strings (because                IDL refuses to write an empty string (0b) from a structure)  NOTES:        This multiple format FITS writer is designed to provide a        single, simple interface to writing all common types of FITS data.        Given the number of options within the program and the        variety of IDL systems available it is likely that a number        of bugs are yet to be uncovered.   PROCEDURES USED:        FXPAR(), FXADDPAR  MODIfICATION HISTORY:        Version 0.9: By T. McGlynn   1997-07-23               Initial beta release.        Dec 1, 1997, Lindler, Modified to work under VMS.        Version 0.91: T. McGlynn  1998-03-09                Fixed problem in handling null primary arrays.        Version 0.92: T. McGlynn 1998-09-09                Add no_comment flag and keep user comments on fields.                Fix handling of bit fields.        Version 0.93: T. McGlynn 1999-03-10                Fix table appends on VMS.        Version 0.93a  W. Landsman/D. Schlegel                Update keyword values in chk_and_upd if data type has changed        Version 0.94: T. McGlynn 2000-02-02                Efficient processing of ASCII tables.                Use G rather than E formats as defaults for ASCII tables                 and make the default precision long enough that transformations                 binary to/from ASCII are invertible.                Some loop indices made long.                Fixed some ends to match block beginnings.        Version 0.95: T. McGlynn 2000-11-06                Several fixes to scaling.  Thanks to David Sahnow for                documenting the problems.                Added PCOUNT,GCOUNT keywords to Image extensions.                Version numbers shown in SIMPLE/XTENSION comments        Version 0.96: T. McGlynn 2001-04-06                Changed how files are opened to handle ~ consistently        Version 1.0: T. McGlynn 2001-12-04                Unsigned integers,                64 bit integers.                Aliases                Variable length arrays                Some code cleanup        Version 1.1: T. McGlynn 2002-2-18                Fixed major bug in processing of unsigned integers.                (Thanks to Stephane Beland)        Version 1.2: Stephane Beland 2003-03-17                Fixed problem in creating dummy dataset when passing undefined                data, caused by an update to FXADDPAR routine.        Version 1.2.1 Stephane Beland 2003-09-10                Exit gracefully if write priveleges unavailable        Version 1.3 Wayne Landsman 2003-10-24                Don't use EXECUTE() statement if on a virtual machine        Version 1.3a Wayne Landsman 2004-5-21                Fix for variable type arrays        Version 1.4 Wayne Landsman 2004-07-16                Use STRUCT_ASSIGN when modifying structure with pointer tags        Version 1.4a Wayne Landsman 2005-01-03                Fix writing of empty strings in binary tables        Version 1.4b Wayne Landsman 2006-02-23                Propagate /SILENT keyword to mwr_tablehdr        Version 1.5 Wayne Landsman  2006-05-24                Open file using /SWAP_IF_LITTLE_ENDIAN keyword                Convert empty strings to 1 element blank strings before writing        Version 1.5a Wayne Landsman 2006-06-29                Fix problem introduced 2006-05-24 with multidimensional strings        Version 1.5b K. Tolbert 2006-06-29                Make V1.5a fix work pre-V6.0        Version 1.5c I.Evans/W.Landsman 2006-08-08                Allow logical columns to be specified as bytes        Version 1,5d K. Tolbert 2006-08-11                Make V1.5a fix work for scalar empty string        Version 1.6  W. Landsman  2006-09-22                Assume since V5.5, remove VMS support        Version 1.6a  W. Landsman  2006-09-22                Don't right-justify strings        Version 1.7  W. Landsman  2009-01-12                Added STATUS output keyword        Version 1.7a W. Landsman 2009-04-10                Since V6.4 strings are no longer limited to 1024                elements        Version 1.8 Pierre Chanial 2009-06-23                trim alias, implement logical TFORM 'L', don't                add space after tform key.        Version 1.9 W. Landsman 2009-07-20                Suppress compilation messages of supporting routines        Version 1.10 W. Landsman 2009-09-30                Allow TTYPE values of 'T' and 'F', fix USE_COLNUM for bin tables        Version 1.11 W. Landsman 2010-11-18                Allow LONG64 number of bytes, use V6.0 notation        Version 1.11a W. Landsman 2012-08-12                Better documentation, error checking for logical columns        Version 1.11b M. Haffner/W.L. 2012-10-12   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_version", "mwr_version", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_version", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_unsigned_offset", "mwr_unsigned_offset", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_unsigned_offset", "", "type", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#chk_and_upd", "chk_and_upd", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "chk_and_upd", "", "nologicalheaderkeyvaluecomment", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_checktype", "mwr_checktype", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_checktype", "", "aliastag", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_ascii", "mwr_ascii", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_ascii", "", "asciinulluse_colnumlscaleiscalebscaleno_typesseparatorterminatorno_commentsilentaliasinputsizlunbofheader", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_dummy", "mwr_dummy", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_dummy", "", "lun", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_validptr", "mwr_validptr", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_validptr", "", "vtypesnfldindexarray", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_tablehdr", "mwr_tablehdr", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_tablehdr", "", "no_typeslogical_colsbit_colsnbit_colsno_commentaliassilentuse_colnumluninputheadervtypes", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_retable", "mwr_retable", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_retable", "", "inputvtypes", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_writeheap", "mwr_writeheap", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_writeheap", "", "lunvtypes", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_tabledat", "mwr_tabledat", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_tabledat", "", "luninputheadervtypes", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_pscale", "mwr_pscale", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_pscale", "", "pscalepzerogrpheader", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_findscale", "mwr_findscale", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_findscale", "", "flagarraynbitsscaleoffseterror", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_scale", "mwr_scale", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_scale", "", "lscaleiscalebscalenullarrayscaleoffset", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_header", "mwr_header", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_header", "", "lunheader", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_groupinfix", "mwr_groupinfix", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_groupinfix", "", "datagrouphdr", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_groupscale", "mwr_groupscale", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_groupscale", "", "maxvalgrouphdr", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwr_image", "mwr_image", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwr_image", "", "nullgrouppscalepzerolscaleiscalebscaleno_commentsilentinputsizlunbofhdr", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/mwrfits.html#mwrfits", "mwrfits", 'routine in <a href="idlastro/mwrfits.html">mwrfits.pro</a>', "mwrfits.pro", "", "mwrfits", "", "asciiseparatorterminatorcreatenullgrouppscalepzeroaliasuse_colnumlscaleiscalebscaleno_typessilentno_commentlogical_colsbit_colsnbit_colsstatusversionxinputfileheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/n_bytes.html", "n_bytes.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "n_bytes.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/n_bytes.html#N_bytes", "N_bytes", 'routine in <a href="idlastro/n_bytes.html">n_bytes.pro</a>', "n_bytes.pro", "", "N_bytes", " NAME:        N_bytes()   PURPOSE:        To return the total number of bytes in data element   CALLING SEQUENCE:        result = N_bytes(a)   INPUTS:        a - any idl data element, scalar or array   OUTPUTS:        total number of bytes in a is returned as the function value        (64bit longword scalar)  NOTES:        (1) Not valid for object or pointer data types        (2) For a string array, the number of bytes is computed after conversion            with the BYTE() function, i.e. each element has the same length,            equal to the maximum individual string length.   MODIFICATION HISTORY:        Version 1  By D. Lindler  Oct. 1986        Include new IDL data types    W. Landsman          June 2001        Now return a 64bit integer    W. Landsman          April 2006  ", "a", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/name_selector.html", "name_selector.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "name_selector.pro", "", "", " NAME:    NAME_SELECTOR   PURPOSE:     The purpose of this function is to implement a pop-up dialog widget    for the purpose of selecting  names . Names can be names of variables,    names of files, etc. Any string array can be used.   CALLING SEQUENCE:     selectedNames = Name_Selector(theNames)   ARGUMENTS:     theNames:       A string array of potential  names  that can be selected.   KEYWORDS:     ALL:            Set this keyword if you wish all the names to be selected                    initially.     CANCEL:         An output keyword set to 1 if the user cancels or quits the                    program without hitting the Accept button. Set to 0 if a proper                    selection was made and the use hits the Accept button.     COUNT:          An output keyword containing the number of elements in the return array.     GROUP_LEADER:   The widget identifier of a widget who will be the group leader                    for this dialog. Passing a group leader is the *only* way to                    assure the dialog will be a MODAL dialog (as opposed to a blocking                    dialog). A GROUP_LEADER is required if you will be using this                    function in an IDL Virtual Machine application.     LABEL:          A string that will be placed on a label above the selections.                    If not used, no label is used in the program.     NUMCOLS:        The number of columns to organize the string array in. The default                    is to use one column per approximately 20 strings.     TITLE:          A string that is used for the title of the dialog window. If                    undefined, then  Selection Widget  is used.   RETURN VALUE:     selectedNames:  Typically, an array of selected names. If there is only one item                    in the selection, the variable will be a scalar string.   EXAMPLE:     See the Name_Selector_Test procedure below. I use the program to allow the    user to select the names of scientific data sets in an HDF file for further    reading and processing.   MODIFICATION HISTORY:     Written by David W. Fanning, 21 December 2008.    Added a COUNT keyword. DWF. 6 January 2009.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/name_selector.html#Name_Selector_Button_Events", "Name_Selector_Button_Events", 'routine in <a href="coyote/name_selector.html">name_selector.pro</a>', "name_selector.pro", "", "Name_Selector_Button_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/name_selector.html#Name_Selector_Null_Events", "Name_Selector_Null_Events", 'routine in <a href="coyote/name_selector.html">name_selector.pro</a>', "name_selector.pro", "", "Name_Selector_Null_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/name_selector.html#Name_Selector_Size_Events", "Name_Selector_Size_Events", 'routine in <a href="coyote/name_selector.html">name_selector.pro</a>', "name_selector.pro", "", "Name_Selector_Size_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/name_selector.html#Name_Selector_Test", "Name_Selector_Test", 'routine in <a href="coyote/name_selector.html">name_selector.pro</a>', "name_selector.pro", "", "Name_Selector_Test", "", "MORENAMESNUMCOLS", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/name_selector.html#Name_Selector", "Name_Selector", 'routine in <a href="coyote/name_selector.html">name_selector.pro</a>', "name_selector.pro", "", "Name_Selector", "", "ALLCANCELCOUNTLABELNUMCOLSTITLEGROUP_LEADERtheNames", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_attribute__define.html", "ncdf_attribute__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_attribute__define.pro", "", "", " NAME:        NCDF_ATTRIBUTE   PURPOSE:         The pupose of this NCDF_Attribute object is to store information about        a netCDF global or variable attribute. The object is principally used        as a utility routine for the NCDF_FILE object. Given the attribute name,        the object will acquire additional information about the attribute from        the netCDF file containing the attribute.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        File I/O   CALLING SEQUENCE:         IDL&gt; attrObj = Obj_New('NCDF_ATTRIBUTE', attrName, parent, VARNAME=varName)   ARGUMENTS:         attrName:  The case sensitive name of a netCDF attribute that is stored in the                   netCDF file. (Input and required.)         parent:    The object reference (NCDF_FILE object) of the netCDF file. In other words, the                   object reference of the file that contains this attribute. (Input and required.)   KEYWORD PARAMETERS:         varName:   If this is a variable attribute, this is the case sensitive name of the                   variable that the attribute is attached to. (Input and required for variable                   attributes.) Note that a variable object reference may be used in place of the                   variable name.   METHODS:       The following methods are available. Each is documented in front of the method.       attrName = attrObject -&gt; GetName()      propertyValue = attrObject -&gt; GetProperty(attrProperty)      attrValue = attrObject -&gt; GetValue()      attrObject -&gt; ParseAttribute   MODIFICATION HISTORY:        Written by:  David W. Fanning, 3 Feb 2010.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_attribute__define.html#NCDF_Attribute::GetName", "NCDF_Attribute::GetName", 'routine in <a href="coyote/ncdf_attribute__define.html">ncdf_attribute__define.pro</a>', "ncdf_attribute__define.pro", "", "NCDF_Attribute::GetName", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_attribute__define.html#NCDF_Attribute::GetProperty", "NCDF_Attribute::GetProperty", 'routine in <a href="coyote/ncdf_attribute__define.html">ncdf_attribute__define.pro</a>', "ncdf_attribute__define.pro", "", "NCDF_Attribute::GetProperty", "", "thisProperty", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_attribute__define.html#NCDF_Attribute::GetValue", "NCDF_Attribute::GetValue", 'routine in <a href="coyote/ncdf_attribute__define.html">ncdf_attribute__define.pro</a>', "ncdf_attribute__define.pro", "", "NCDF_Attribute::GetValue", "", "DATATYPE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_attribute__define.html#NCDF_Attribute::ParseAttribute", "NCDF_Attribute::ParseAttribute", 'routine in <a href="coyote/ncdf_attribute__define.html">ncdf_attribute__define.pro</a>', "ncdf_attribute__define.pro", "", "NCDF_Attribute::ParseAttribute", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_attribute__define.html#NCDF_Attribute::CLEANUP", "NCDF_Attribute::CLEANUP", 'routine in <a href="coyote/ncdf_attribute__define.html">ncdf_attribute__define.pro</a>', "ncdf_attribute__define.pro", "", "NCDF_Attribute::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_attribute__define.html#NCDF_Attribute::INIT", "NCDF_Attribute::INIT", 'routine in <a href="coyote/ncdf_attribute__define.html">ncdf_attribute__define.pro</a>', "ncdf_attribute__define.pro", "", "NCDF_Attribute::INIT", "", "VARNAMEattrNameparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_attribute__define.html#NCDF_Attribute__DEFINE", "NCDF_Attribute__DEFINE", 'routine in <a href="coyote/ncdf_attribute__define.html">ncdf_attribute__define.pro</a>', "ncdf_attribute__define.pro", "", "NCDF_Attribute__DEFINE", "", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_browser.html", "ncdf_browser.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_browser.pro", "", "", " NAME:        NCDF_BROWSER   PURPOSE:         This program is designed to make it easier to browse and read the        data and metadata in netCDF and HDF files. The user can browse files,        and read the data and metadata into main-level IDL variables. New netCDF        and HDF files can be opened at any time. The user interacts with the        program via a browser window (GUI). This program is a wrapper for the        NCDF_DATA object (ncdf_data__define.pro), which must also be downloaded.         Note that only HDF files with scientific datasets (SD) can be read currently.        There is no support for VDATA objects or other objects sometimes found in HDF        files. Also note that when variables are returned from HDF files, they are returned        in a calibrated form, if calibration information about the variable is present in the        file. Calibration information is presented as an extra variable attribute in the        browser.            calibratedData = calData.cal * (uncalibratedData - calData.offset)   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        File I/O   CALLING SEQUENCE:         IDL&gt; NCDF_Browser, filename   Arguments:         filename: The name of a netCDF and HDF file to open and browse.   KEYWORD PARAMETERS:         EXTENSION: In general, netCDF and HDF files use *.nc, *.ncf, *.ncdf and *.hdf file extensions to                   identify themselves as netCDF and HDF files. Some users have their own file extensions.                   You can use this keyword to identify the file extension you wish to use. If                   set here, it will be used as the file filter in place of the normal file                   extensions in DIALOG_PICKFILE.                        obj = ('NCDF_DATA', file, EXTENSION='*.bin')         NO_NEW_FILE: If this keyword is set, then the button that allows a new file to be open                   on the browser is not created.         NO_READ_ON_PARSE: Normally, when a file is opened it is parsed for information.                   One piece of information is the minimum and maximum values of the variables.                   This requires actually reading the variables. This can slow things down                   considerably is the variable is large. Setting this keyword will suppress                   the reading of the variables during the parsing of the data file, with the                   result that no minimum or maximum values will be reported.         TITLE:     Set this keyword to a string that is on the title bar of the browser.         XOFFSET:   Set this keyword to the X offset in pixels of the top-left corner of the browser.         YOFFSET:   Set this keyword to the Y offset in pixels of the top-left corner of the browser.   NOTES:         This program is only a (useful) front-end for a more flexible        object program of class NCDF_DATA. In this front end, the NCDF_DATA        object is created and then destroyed when the GUI is destroyed.        The NCDF_DATA object can be used to read netCDF data in a non-interactive        way, if you prefer not to use a GUI to interact with the data file.   REQUIRES:          The following programs are required from the Coyote Library.                http://www.idlcoyote.com/netcdf_data__define.pro               http://www.idlcoyote.com/error_message.pro               http://www.idlcoyote.com/undefine.pro               http://www.idlcoyote.com/textbox.pro               http://www.idlcoyote.com/cgRootName.pro               http://www.idlcoyote.com/textlineformat.pro   MODIFICATION HISTORY:        Written by:  David W. Fanning, 03 Feb 2008. Used ideas from many            people, including Chris Torrence, Ken Bowman, Liam Gumely,            Andrew Slater, and Paul van Delst.        Added Extension keyword. DWF. 04 Feb 2008.        Added error handling and protection for NCDF variables that have a dimension of length zero. 22 April 2009. DWF.        Added NO_READ_ON_PARSE keyword. 22 April 2009. DWF.        Now convert NCDF CHAR type variables to strings on output. 22 April 2009. DWF        Made the default value of NO_READ_ON_PARSE set to 1. 25 June 2009. DWF.        Added NO_NEW_FILE keyword to suppress the Open File button. 3 February 2010. DWF.        Added TITLE, XOFFSET, and YOFFSET keywords. 5 February 2010. DWF.        Fixed a problem with memory leakage when the input file cannot be read. 1 May 2010. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_browser.html#NCDF_BROWSER", "NCDF_BROWSER", 'routine in <a href="coyote/ncdf_browser.html">ncdf_browser.pro</a>', "ncdf_browser.pro", "", "NCDF_BROWSER", "", "EXTENSIONNO_NEW_FILENO_READ_ON_PARSETITLEXOFFSETYOFFSETfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_castdatatype.html", "ncdf_castdatatype.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_castdatatype.pro", "", "", " NAME:        NCDF_CastDataType   PURPOSE:         This is a utility routine to turn IDL data types into the equivalent        netCDF data type. In other words, change 'STRING' to 'CHAR' and so on.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         ncdf_datatype = NCDF_CastDataType(variable)   ARGUMENTS:         variable:      The IDL variable for which you want a netCDF data type.                       Or, if the TYPE keyword is set, the variable type index you wish                       to convert. Or, if the TNAME keyword is set, the variable type                       name you wish to convert.   KEYWORDS:          TYPE:         If set, the positional argument is an IDL variable type of                       the sort returned by the SIZE function with the TYPE keyword set.                         type = Size(variable, /TYPE)          TNAME:        If set, the positional argument is an IDL variable type of                       the sort returned by the SIZE function with the TNAME keyword set.                         type = Size(variable, /TNAME)   RETURN VALUE:         ncdf_datatype: The netCDF data type of the variable. Possible values are                       'BYTE', 'CHAR', 'SHORT', 'LONG', 'FLOAT' and 'DOUBLE'.   NOTES:       The program is designed to work with the NCDF_FILE object and related programs.   MODIFICATION HISTORY:         Written by:  David W. Fanning, 3 February 2010.        Made a UINT data type be cast to LONG, rather than SHORT. 29 April 2010. DWF.        Added TYPE and TNAME keywords. 5 May 2010. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_castdatatype.html#NCDF_CastDataType", "NCDF_CastDataType", 'routine in <a href="coyote/ncdf_castdatatype.html">ncdf_castdatatype.pro</a>', "ncdf_castdatatype.pro", "", "NCDF_CastDataType", "", "TNAMETYPEvariable", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_container__define.html", "ncdf_container__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_container__define.pro", "", "", " NAME:        NCDF_Container   PURPOSE:         This is a beefed-up IDL_CONTAINER object written as a utility object        for the NCDF_FILE object and related objects. In particular, two new        container methods have been added. The FindByID method searches container        objects by object ID, and the FindByName method searches container object        by object name. If found, the object reference is returned. This object        is a subclassed IDL_CONTAINER object and uses the IDL_CONTAINER        initialization routine.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         ncdf_container = NCDF_Container()   ARGUMENTS:         Those used in the IDL_CONTAINER method.   RETURN VALUE:         A sub-classed IDL_Container object.   NOTES:       The program is designed to work with the NCDF_FILE object and related programs.   MODIFICATION HISTORY:         Written by:  David W. Fanning, 3 February 2010.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_container__define.html#NCDF_Container::FindByID", "NCDF_Container::FindByID", 'routine in <a href="coyote/ncdf_container__define.html">ncdf_container__define.pro</a>', "ncdf_container__define.pro", "", "NCDF_Container::FindByID", "", "COUNTthisID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_container__define.html#NCDF_Container::FindByName", "NCDF_Container::FindByName", 'routine in <a href="coyote/ncdf_container__define.html">ncdf_container__define.pro</a>', "ncdf_container__define.pro", "", "NCDF_Container::FindByName", "", "Case_SensitiveCountRegExp_ExtrasearchName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_container__define.html#NCDF_Container__DEFINE", "NCDF_Container__DEFINE", 'routine in <a href="coyote/ncdf_container__define.html">ncdf_container__define.pro</a>', "ncdf_container__define.pro", "", "NCDF_Container__DEFINE", "", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html", "ncdf_data__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_data__define.pro", "", "", " NAME:        NCDF_DATA__DEFINE   PURPOSE:         This program is designed to make it easier to browse and read the        data and metadata in netCDF and HDF files. The user can browse files,        and read the data and metadata into main-level IDL variables. New netCDF        and HDF files can be opened at any time. The user interacts with the        program via a browser window (GUI) or directly through the methods of        the object. The program implements an IDL object.         Note that only HDF files with scientific datasets (SD) can be read currently.        There is no support for VDATA objects or other objects sometimes found in HDF        files. Also note that when variables are returned from HDF files, they are returned        in a calibrated form, if calibration information about the variable is present in the        file. Calibration information is presented as an extra variable attribute in the        browser.            calibratedData = calData.cal * (uncalibratedData - calData.offset)   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        File I/O   CALLING SEQUENCE:         IDL&gt; nCDFObject = Obj_New('NCDF_DATA', filename)   ARGUMENTS:         filename: The name of a netCDF or HDF file to open and browse.   KEYWORD PARAMETERS:         BROWSE:   If this keyword is set, the Browse Window is invoked as soon                  as the object is initiated.         DESTROY_FROM_BROWSER:  As with all objects, this object is persistent until                   it is destroyed. However, with this keyword set, the object will                   be destroyed when the user closes the Browse Window.         EXTENSION: In general, netCDF and HDF files use *.nc, *.ncf, *.ncdf of *.hdf file extensions to                   identify themselves as netCDF or HDF files. Some users have their own file extensions.                   You can use this keyword to identify the file extension you wish to use. If                   set here, it will be used as the file filter in place of the normal file                   extensions in DIALOG_PICKFILE.                        obj = ('NCDF_DATA', file, EXTENSION='*.bin')         NO_READ_ON_PARSE: Normally, when a file is opened it is parsed for information.                   One piece of information is the minimum and maximum values of the variables.                   This requires actually reading the variables. This can slow things down                   considerably is the variable is large. Setting this keyword will suppress                   the reading of the variables during the parsing of the data file, with the                   result that no minimum or maximum values will be reported.   NOTES:         This program is designed to be flexible in how it is used, so it        can be used in both interactive and non-interactive (called directly)        ways. A less flexible way of interacting with the program is via the        NCDF_BROWSER program, which is a front-end to this object.         The netCDF and HDF file formats are thought to be  standards . And to        a large extent, they are. But files are not always created to standards,        and both netCDF and HDF files can be quirky. If you look carefully at the        code you will see places where I work around quirks in the files I typically        use on a daily basis. If you find you can't read a particular file, let me know        about it. I may be able to improve the program in such as way that it can be read.         This program is not meant to be the be-all and end-all of programs. Rather, it is        a tool I use, and improve upon whenever necessary, in my own work with netCDF and HDF        files. It will get better for all of us if you report problems to me directly.   REQUIRES:       The following programs are required from the Coyote Library. And it is always a      good idea to make sure you have the latest version of the Coyote Library code,      as updates are irregular and frequent.                http://www.idlcoyote.com/programs/netcdf_data__define.pro               http://www.idlcoyote.com/programs/error_message.pro ;              http://www.idlcoyote.com/programs/undefine.pro               http://www.idlcoyote.com/programs/textbox.pro               http://www.idlcoyote.com/programs/cgrootname.pro               http://www.idlcoyote.com/programs/textlineformat.pro   METHODS:       The following methods can be used directly.       ncdfObject -&gt; Browse                             ; Use GUI to browse file data and metadata.      ncdfObject -&gt; OpenFile, filename                 ; Opens a new netCDF or HDF file.      globalAttr = ncdfObject -&gt; ReadGlobalAttr()      ; Return a structure containing global attributes.      attribute = ncdfObject -&gt; ReadAttribute(attrname); Return an attribute, identified by name.      dim = ncdfObject -&gt; ReadDimension(dimName)        ; Return a dimension, identified by name.      variable = ncdfObject -&gt; ReadVariable(varname)   ; Return a variable, identified by name.      varstruct = ncdfObject -&gt; ReadVariableWithAttr(varname)   ; Return a variable, identified by                                                                ; name, along with its attributes.      allData = ncdfObject -&gt; ReadFile(filename)        ; Read all the data in the file, into structures.   EXAMPLE:         IDL&gt; filename = 'example.nc'        IDL&gt; ncdfObj = Obj_New('NCDF_DATA', filename)        IDL&gt; ncdfObj -&gt; Browse        IDL&gt; Obj_Destroy, ncdfObj   MODIFICATION HISTORY:        Written by:  David W. Fanning, 03 Feb 2008. Used ideas from many            people, including Chris Torrence, Ken Bowman, Liam Gumely,            Andrew Slater, and Paul van Delst.        Added EXTENSION keyword, resizeable TLB, and ability to download            individual global attibutes. DWF. 04 Feb 2008.        Added ReadDimension and ReadVariableWithAttr methods. DWF. 05 Feb 2008.        Ill-formed attribute names giving me fits. Now doing checks with IDL_VALIDNAME             before creating structures. 06 February 2008. DWF.        Same problem. Wide use of IDL_VALIDNAME everywhere it seems wise. 06 Feb 2008. DWF.        Added functionality to read a variable with its attributes from the browser interface,             and fixed a problem with reading CHAR values. 2 March 2008. DWF.        Fixed a problem with changing variable name when reading variable plus attributes. 6 March 2008. DWF.        Fixed a problem with not setting GLOBAL keyword when inquiring about global attribute. 6 March 2008. DWF.        Made sure file was parsed before attempting to read variables and attributes to avoid errors. 7 March 2008. DWF.        Small bug with variable attributes fixed. 18 Dec 2008. DWF.        Added ability to read HDF files containing Scientific Datasets (SD). 21 February 2009. DWF.        Added error handling and protection for NCDF variables that have a dimension of length zero. 22 April 2009. DWF.        Added NO_READ_ON_PARSE keyword. 22 April 2009. DWF.        Now convert NCDF CHAR type variables to strings on output. 22 April 2009. DWF        Fixed a problem with the directory being correct when file name passed in. 11 May 2009. DWF.        Added COUNT, OFFSET, and STRIDE keywords to ReadVariable method. 25 June 2009. DWF.        When reading a netCDF variable by itself (without it's attributes), the program now looks for           a SCALE_FACTOR and ADD_OFFSET attribute, and if found will apply this to the variable before           it is returned to the user. 24 August 2009. DWF.        Added the methods GetAttrNames, GetVarNames, GetVarAttrNames, and ReadVarAttr to retrieve specfic           information from the data files. 16 November 2009. DWF.        Modified the ReadVariableWithAttr method to include the number of dimensions (in the NDIMS field,           and the dimensions (in the DIMS field) in the return structure. For HDF files, the DIMS field           is a vector of the dimensions of the variable. For netCDF files, the DIMS field is a vector           of dimension IDs for the dimensions of the variable. 27 Nov 2009. DWF.        Andy Meigs alerted me to a problem creating a structure when the ncdf variable name           is ill-formed according to IDL structure tag name rules. Fixed in the ReadFile method.           30 November 2009. DWF.        Added NO_NEW_FILE keyword to the BROWSE method. This keyword will suppress the OPEN FILE           button on the browse interface. 3 Feb 2010. DWF.        Made the default browser size a bit larger to accomodate longer variable names. 3 Feb 2010. DWF.        Add a check for HDF/netCDF file type in the INIT method to better accommodate reading data           from the file without first parsing the file. 16 March 2010. DWF.        Changed the ReadVariable for netCDF files to now check for missing data, using either the            depreciated missing_value attribute or the compliant _FillValue attribute. Missing data            is now identified via new output keywords MISSINGINDICES and FILLVALUE, and missing data            is not scaled or offset, if these operations are applied to the data prior to return.            21 March 2010. DWF. Problem with these changes, fixed 23 March 2010. DWF.        Fixed a problem with memory leakage when the input file cannot be read. 1 May 2010. DWF.        Fixed a problem with memory leakage from created structures. 1 May 2010. DWF.        Have done some work on parsing HDF-EOS swath files, but currently unused in code. 15 May 2010. DWF.        Modified the ReadVariable method to check for 0 length dimensions when reading variables            from HDF files. 21 July 2010. DWF.        Modified the global attribute structure so that the  filename  field, which holds the            name of the netCDF of HDF file is now named  ncdf_filename  or  hdf_filename . This            will avoid conflicts with global attributes with  filename . 20 January 2011. DWF.        Typo in the section reading calibration data fixed. 12 March 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::Browse", "NCDF_DATA::Browse", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::Browse", "", "NO_NEW_FILESUCCESSTITLEXOFFSETYOFFSET", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::CleanParsedStructures", "NCDF_DATA::CleanParsedStructures", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::CleanParsedStructures", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::EventHandler", "NCDF_DATA::EventHandler", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::EventHandler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::FindDimensions", "NCDF_DATA::FindDimensions", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::FindDimensions", "", "fileIDvarID", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::Destroy_From_Browser", "NCDF_DATA::Destroy_From_Browser", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::Destroy_From_Browser", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::GetAttrNames", "NCDF_DATA::GetAttrNames", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::GetAttrNames", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ListAttrNames", "NCDF_DATA::ListAttrNames", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ListAttrNames", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::GetVarNames", "NCDF_DATA::GetVarNames", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::GetVarNames", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ListVarNames", "NCDF_DATA::ListVarNames", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ListVarNames", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::GetVarAttrNames", "NCDF_DATA::GetVarAttrNames", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::GetVarAttrNames", "", "theVariable", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::OpenNewFile", "NCDF_DATA::OpenNewFile", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::OpenNewFile", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::OpenFile", "NCDF_DATA::OpenFile", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::OpenFile", "", "filename", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ParseFile", "NCDF_DATA::ParseFile", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ParseFile", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::Parse_HDF_File", "NCDF_DATA::Parse_HDF_File", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::Parse_HDF_File", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::Parse_HDF_EOS_File", "NCDF_DATA::Parse_HDF_EOS_File", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::Parse_HDF_EOS_File", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadAttribute", "NCDF_DATA::ReadAttribute", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadAttribute", "", "SUCCESStheAttribute", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadAttributeFromGUI", "NCDF_DATA::ReadAttributeFromGUI", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadAttributeFromGUI", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadAttributeFromGUI_Events", "NCDF_DATA::ReadAttributeFromGUI_Events", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadAttributeFromGUI_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadDimension", "NCDF_DATA::ReadDimension", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadDimension", "", "SUCCESSdimensionName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadFile", "NCDF_DATA::ReadFile", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadFile", "", "SUCCESStheFile", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadFileFromGUI", "NCDF_DATA::ReadFileFromGUI", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadFileFromGUI", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadGlobalAttr", "NCDF_DATA::ReadGlobalAttr", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadGlobalAttr", "", "SUCCESS", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadVariable", "NCDF_DATA::ReadVariable", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadVariable", "", "SUCCESSCOUNTFILLVALUEMISSINGINDICESOFFSETSTARTSTRIDEtheVariable", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadVariableFromGUI", "NCDF_DATA::ReadVariableFromGUI", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadVariableFromGUI", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadVarAttr", "NCDF_DATA::ReadVarAttr", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadVarAttr", "", "theVariableNametheAttributeName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadVariableFromGUI_Events", "NCDF_DATA::ReadVariableFromGUI_Events", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadVariableFromGUI_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadVariableWithAttr", "NCDF_DATA::ReadVariableWithAttr", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadVariableWithAttr", "", "SUCCESStheVariable", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadVarPlusFromGUI", "NCDF_DATA::ReadVarPlusFromGUI", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadVarPlusFromGUI", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::ReadVarPlusFromGUI_Events", "NCDF_DATA::ReadVarPlusFromGUI_Events", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::ReadVarPlusFromGUI_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::SelectionInTree", "NCDF_DATA::SelectionInTree", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::SelectionInTree", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::CLEANUP", "NCDF_DATA::CLEANUP", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA::INIT", "NCDF_DATA::INIT", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA::INIT", "", "BROWSEDESTROY_FROM_BROWSEREXTENSIONNO_READ_ON_PARSENO_NEW_FILEfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA_ATTRIBUTE__DEFINE", "NCDF_DATA_ATTRIBUTE__DEFINE", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA_ATTRIBUTE__DEFINE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA_DIMENSION__DEFINE", "NCDF_DATA_DIMENSION__DEFINE", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA_DIMENSION__DEFINE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA_VARIABLE__DEFINE", "NCDF_DATA_VARIABLE__DEFINE", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA_VARIABLE__DEFINE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA_SWATH__DEFINE", "NCDF_DATA_SWATH__DEFINE", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA_SWATH__DEFINE", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA_WIDGET_CLEANUP", "NCDF_DATA_WIDGET_CLEANUP", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA_WIDGET_CLEANUP", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA_WIDGET_EVENTS", "NCDF_DATA_WIDGET_EVENTS", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA_WIDGET_EVENTS", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_data__define.html#NCDF_DATA__DEFINE", "NCDF_DATA__DEFINE", 'routine in <a href="coyote/ncdf_data__define.html">ncdf_data__define.pro</a>', "ncdf_data__define.pro", "", "NCDF_DATA__DEFINE", "", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html", "ncdf_dimension__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_dimension__define.pro", "", "", " NAME:        NCDF_DIMENSION   PURPOSE:         The pupose of this NCDF_Dimension object is to store information about        a netCDF dimension. The object is principally used as a utility routine        for the NCDF_FILE object. Given the dimension name, the object will        acquire additional information about the dimension from the netCDF file        containing the dimension.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        File I/O   CALLING SEQUENCE:         IDL&gt; dimObj = Obj_New('NCDF_DIMENSION', dimName, parent)   ARGUMENTS:         dimName:   The case sensitive name of a netCDF dimension that is stored in the                   netCDF file. (Input and required.)         parent:    The object reference (NCDF_FILE object) of the netCDF file. In other words, the                   object reference of the file that contains this attribute. (Input and required.)   KEYWORD PARAMETERS:         None.   METHODS:       The following methods are available. Each is documented in front of the method.       dimName = dimObject -&gt; GetID()      dimName = dimObject -&gt; GetName()      dimName = dimObject -&gt; GetSize()      propertyValue = dimObject -&gt; GetProperty(dimProperty)      dimValue = dimObject -&gt; GetValue()      dimName = dimObject -&gt; GetUnlimited()      dimObject -&gt; ParseAttribute   MODIFICATION HISTORY:        Written by:  David W. Fanning, 3 Feb 2010.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension::GetID", "NCDF_Dimension::GetID", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension::GetID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension::GetName", "NCDF_Dimension::GetName", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension::GetName", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension::GetSize", "NCDF_Dimension::GetSize", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension::GetSize", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension::GetUnlimited", "NCDF_Dimension::GetUnlimited", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension::GetUnlimited", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension::GetProperty", "NCDF_Dimension::GetProperty", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension::GetProperty", "", "thisProperty", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension::GetValue", "NCDF_Dimension::GetValue", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension::GetValue", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension::ParseDimension", "NCDF_Dimension::ParseDimension", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension::ParseDimension", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension::CLEANUP", "NCDF_Dimension::CLEANUP", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension::INIT", "NCDF_Dimension::INIT", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension::INIT", "", "dimNameparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_dimension__define.html#NCDF_Dimension__DEFINE", "NCDF_Dimension__DEFINE", 'routine in <a href="coyote/ncdf_dimension__define.html">ncdf_dimension__define.pro</a>', "ncdf_dimension__define.pro", "", "NCDF_Dimension__DEFINE", "", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html", "ncdf_file__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_file__define.pro", "", "", " NAME:        NCDF_FILE   PURPOSE:         The pupose of this NCDF_File object is three-fold. (1) Allow the user to easily        determine what information is inside a netCDF file and allow easy access        to such information. (2) Allow the user to easily create a netCDF file from        scratch. (3) Allow the user to easily copy information from one netCDF        file to another.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        File I/O   CALLING SEQUENCE:         IDL&gt; nCDFObject = Obj_New('NCDF_FILE', filename)   ARGUMENTS:         filename:  The name of a netCDF file to read, write to, or browse.   KEYWORD PARAMETERS:         ALERT:     Set this keyword if you wish to have alert from the object's error logger.                   Input. Default is 1.         BROWSE:    If this keyword is set, the Browse Window is invoked as soon                   as the object is initiated. Input. Default is 0.         CLOBBER:   Set this keyword if you are opening a netCDF file that already exists and                   you want to overwrite the existing file. Input. Default is 0.         CREATE:    Set this keyword if you wish to create a new netCDF file to write                   into. Input. Default is 0, which means the file will be opened as                    read-only .         DELETE_ON_DESTROY:  Set this keyword if you wish to delete the error log file when                   the ErrorLogger object is destroyed. This will only happen if the ErrorLogger                   object is not in an error state. Input. Default is 1.         MODIFY:    Set this keyword if you wish to modify (write to) a file you are opening.                   If not set, the file will be opened as  read-only .   REQUIRES:       The following programs are required from the Coyote Library. And it is always a      good idea to make sure you have the latest version of the Coyote Library code,      as updates are irregular and frequent.                http://www.idlcoyote.com/programs/ncdf_attribute__define.pro               http://www.idlcoyote.com/programs/ncdf_data__define.pro               http://www.idlcoyote.com/programs/ncdf_browser.pro               http://www.idlcoyote.com/programs/ncdf_castdatatype.pro               http://www.idlcoyote.com/programs/ncdf_container__define.pro               http://www.idlcoyote.com/programs/ncdf_dimension__define.pro               http://www.idlcoyote.com/programs/ncdf_variable__define.pro               http://www.idlcoyote.com/programs/errorlogger__define.pro               http://www.idlcoyote.com/programs/error_message.pro               http://www.idlcoyote.com/programs/cgcentertlb.pro               http://www.idlcoyote.com/programs/undefine.pro               http://www.idlcoyote.com/programs/textbox.pro               http://www.idlcoyote.com/programs/cgrootname.pro               http://www.idlcoyote.com/programs/textlineformat.pro       These files may be (almost certainly are!) dependent on other Coyote Library files.   METHODS:       The following methods are available. Each is documented in front of the method.       ncdfObject -&gt; Browse      ncdfObject -&gt; CopyVarAttrTo, varName, attrName, destObj      ncdfObject -&gt; CopyVarDataTo, varName, destObj, COUNT=count, OFFSET=offset, STRIDE=stride      ncdfObject -&gt; CopyVarDefTo, varName, destObj      ncdfObject -&gt; CopyGlobalAttrTo, attrName, destObj      ncdfObject -&gt; CopyDimTo, dimName, destObj      dimNames = ncdfObject -&gt; GetDimNames(COUNT=dimCount)      dimValue = ncdfObject -&gt; GetDimValue(dimName)      fileID = ncdfObject -&gt; GetFileID()      globalAttrNames = ncdfObject -&gt; GetGlobalAttrNames(COUNT=attrCount)      attrValue = ncdfObject -&gt; GetGlobalAttrValue(attrName, DATATYPE=datatype)      ncdfObject -&gt; GetProperty, ....      property = ncdfObject -&gt; GetProperty(thisProperty)      varAttrNames = ncdfObject -&gt; GetVarAttrNames(varName, COUNT=attrCount)      varAttrValue = ncdfObject -&gt; GetVarAttrValue(varName, varAttrName, COUNT=attrCount)      varNames = ncdfObject -&gt; GetVarNames(COUNT=varCount)      varData = ncdfObject -&gt; GetVarData(varName, COUNT=count, OFFSET=offset, STRIDE=stride)      answer = ncdfObject -&gt; HasGlobalAttr(attrName, OBJECT=object)      answer = ncdfObject -&gt; HasDim(dimName, OBJECT=object)      answer = ncdfObject -&gt; HasVar(varName, OBJECT=object)      answer = ncdfObject -&gt; HasVarAttr(varName, attrName, OBJECT=object)      ncdfObject -&gt; PrintFileInfo      ncdfObject -&gt; ParseFile      ncdfObject -&gt; SetMode, DEFINE=define, DATA=data      ncdfObject -&gt; WriteVarData, varName, data, COUNT=count, OFFSET=offset, STRIDE=stride      ncdfObject -&gt; WriteVarDef, varName, dimNames, DATATYPE=datatype, VAROBJ=varObj      ncdfObject -&gt; WriteDim, dimName, dimSize, UNLIMITED=unlimited      ncdfObject -&gt; WriteGlobalAttr, attrName, attrValue, DATATYPE=datatype      ncdfObject -&gt; WriteVarAttr, attrName, attrValue, varObj, DATATYPE=datatype   NOTES:       Note that all variable, attribute, and dimension names in a netCDF file are CASE SENSITIIVE!!      Thus, it is a good idea to use the methods provided in this object to obtain and examine      information in the file, as these names are handled in a case sensitive manner.       Whenever you are creating a new netCDF file, you should try to create the file in      the following way.         1. Create your global attributes.         2. Create the dimensions you will be using to describe the variables.         3. Define the variables. To do this correctly, dimensions MUST be defined.         4. Define variable attributes.         5. Load your variables with data.          Note that the data type of the _FillValue variable attribute MUST match the         data type of the variable data. Otherwise, you will have MANY problems! This         is a common source of error.          Note that in almost all cases where you see the names  varName ,  dimName , or          attrName  used as input variables, you can substitute the proper object         reference in place of the actual name. In other words, you could get the value         of a variable attribute by doing something like this:              check = ncdfObject -&gt; HasAttr('history', OBJECT=attrObj)             IF check THEN attrValue = ncdfObject -&gt; GetGlobalAttrValue(attrObj)           as opposed to this:              IF check THEN attrValue = ncdfObject -&gt; GetGlobalAttrValue('history')  EXAMPLE:         IDL&gt; filename = 'example.nc'        IDL&gt; ncdfObj = Obj_New('NCDF_FILE', filename)        IDL&gt; ncdfObj -&gt; Browse        IDL&gt; Obj_Destroy, ncdfObj   MODIFICATION HISTORY:        Written by:  David W. Fanning, 3 Feb 2010, using (stealing, really) plenty of ideas           from Mark Hadfield's Motley Library. Mark's mghncfile object is terrific, but it           had a number of limitations for my particular application, which I have attemped           to correct in my version of the software. But I wouldn't have even attempted this           had Mark not blazed the trail and Matt Savoie not insisted that I look at Mark's           wonderful library.        Changes in the way dimensions with a zero length are handled. 11 Feb 2010, DWF.        Added GetVarInfo method. 20 March 2010. DWF.        Added MISSINGINIDCES and FILLVALUE output keywords to GetVarData method. 20 March 2010. DWF.        Added output keywords SCALE_FACTOR, ADD_OFFSET, and DATATYPE to GetVarData method            so that these values can be obtained with the data. 29 Apr 2010. DWF.        I changed  missingValue  to  fillValue  some time ago, but I missed one in            the GetVarData method. Fixed. 7 June 2010. DWF.        Used the undefine procedure OBJ_DELETE, rather than OBJ_DESTROY. Sheesh! 18 June 2010. DWF.        Added NETCDF4_FORMAT keyword. 13 Feb 2012. DWF.        Added a bunch of new IDL 8.0 and 8.1 keyword to the WriteVarDef method to allow            access to these keywords in NCDF_VarDef. Also modified the NETCDF4_FORMAT keyword            to apply only in IDL versions 8.0 and higher. 21 Feb 2012. DWF.        Small typo fixed in setting CHAR datatype for IDL 8.1 and higher. 22 May 2013. DWF.        Typo (CONTINUOUS-&gt;CONTIGUOUS) fixed in WriteDefVar method. 30 July 2013. DWF.        Modified CopyVarDefTo method to allow new NCDF4 keywords. 30 July 2013. DWF.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::Browse", "NCDF_File::Browse", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::Browse", "", "TITLEXOFFSETYOFFSET", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::Close_File", "NCDF_File::Close_File", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::Close_File", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CreateVarObj", "NCDF_File::CreateVarObj", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CreateVarObj", "", "varName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CreateAttrObj", "NCDF_File::CreateAttrObj", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CreateAttrObj", "", "attrName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CreateDimObj", "NCDF_File::CreateDimObj", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CreateDimObj", "", "dimensionName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CopyVarAttrTo", "NCDF_File::CopyVarAttrTo", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CopyVarAttrTo", "", "varNameattrNamedestObj", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CopyVariableTo", "NCDF_File::CopyVariableTo", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CopyVariableTo", "", "varNamedestObj", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CopyVarDataTo", "NCDF_File::CopyVarDataTo", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CopyVarDataTo", "", "COUNTOFFSETSTRIDEvarNamedestObj", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CopyVarDefTo", "NCDF_File::CopyVarDefTo", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CopyVarDefTo", "", "CHUNK_DIMENSIONSGZIPSHUFFLEvarNamedestObj", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CopyGlobalAttrTo", "NCDF_File::CopyGlobalAttrTo", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CopyGlobalAttrTo", "", "attrNamedestObj", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CopyDimTo", "NCDF_File::CopyDimTo", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CopyDimTo", "", "dimNamedestObj", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetDimNames", "NCDF_File::GetDimNames", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetDimNames", "", "COUNT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetDimValue", "NCDF_File::GetDimValue", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetDimValue", "", "dimName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetFileID", "NCDF_File::GetFileID", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetFileID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetGlobalAttrNames", "NCDF_File::GetGlobalAttrNames", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetGlobalAttrNames", "", "COUNT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetGlobalAttrValue", "NCDF_File::GetGlobalAttrValue", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetGlobalAttrValue", "", "DATATYPEattrName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetProperty", "NCDF_File::GetProperty", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetProperty", "", "ALLATTRNAMESDEFINEDIMNAMESDIMENSIONSERRORLOGGERFILEIDFILENAMEFILEHASBEENPARSEDN_DIMSN_VARSN_ATTRSUNLIMITEDVARNAMESWRITABLE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetProperty", "NCDF_File::GetProperty", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetProperty", "", "thisProperty", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetVarAttrNames", "NCDF_File::GetVarAttrNames", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetVarAttrNames", "", "COUNTvarName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetVarAttrValue", "NCDF_File::GetVarAttrValue", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetVarAttrValue", "", "DATATYPEvarNameattrName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetVarNames", "NCDF_File::GetVarNames", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetVarNames", "", "COUNT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetVarData", "NCDF_File::GetVarData", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetVarData", "", "ADD_OFFSETCOUNTDATATYPEFILLVALUEOFFSETSCALE_FACTORSTRIDEMISSINGINDICESvarName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::GetVarInfo", "NCDF_File::GetVarInfo", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::GetVarInfo", "", "varName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::HasGlobalAttr", "NCDF_File::HasGlobalAttr", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::HasGlobalAttr", "", "OBJECTattrName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::HasDim", "NCDF_File::HasDim", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::HasDim", "", "OBJECTdimName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::HasVar", "NCDF_File::HasVar", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::HasVar", "", "OBJECTvarName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::HasVarAttr", "NCDF_File::HasVarAttr", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::HasVarAttr", "", "OBJECTvarNamevarAttrName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::PrintFileInfo", "NCDF_File::PrintFileInfo", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::PrintFileInfo", "", "outputFile", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::ParseFile", "NCDF_File::ParseFile", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::ParseFile", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::SetMode", "NCDF_File::SetMode", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::SetMode", "", "DATADEFINE", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::Sync", "NCDF_File::Sync", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::Sync", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::WriteVarData", "NCDF_File::WriteVarData", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::WriteVarData", "", "COUNTOFFSETSTRIDEvarNamedata", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::WriteVarDef", "NCDF_File::WriteVarDef", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::WriteVarDef", "", "CHUNK_DIMENSIONSCONTIGUOUSDATATYPEGZIPOBJECTSHUFFLEvarNamedimNames", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::WriteDim", "NCDF_File::WriteDim", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::WriteDim", "", "UNLIMITEDOBJECTdimNamedimSize", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::WriteGlobalAttr", "NCDF_File::WriteGlobalAttr", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::WriteGlobalAttr", "", "DATATYPEOBJECTattrNameattrValue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::WriteVarAttr", "NCDF_File::WriteVarAttr", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::WriteVarAttr", "", "DATATYPEvarNameattrNameattrValue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File::CLEANUP", "NCDF_File::CLEANUP", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_FILE::INIT", "NCDF_FILE::INIT", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_FILE::INIT", "", "ALERTBROWSECLOBBERCREATEDELETE_ON_DESTROYERRORLOGGERNAMEMODIFYNETCDF4_FORMATNOCLUTTERTIMESTAMPfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file__define.html#NCDF_File__DEFINE", "NCDF_File__DEFINE", 'routine in <a href="coyote/ncdf_file__define.html">ncdf_file__define.pro</a>', "ncdf_file__define.pro", "", "NCDF_File__DEFINE", "", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_file_examples.html", "ncdf_file_examples.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_file_examples.pro", "", "", " NAME:        NCDF_FILE_EXAMPLES   PURPOSE:         This is a utility routine demonstrates the several ways it is possible        to use the NCDF_FILE object to create netCDF files, copy information        from one netCDF file to another, and to read information from a netCDF        file.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         NCDF_File_Examples   ARGUMENTS:         None.   KEYWORDS:         None.   MODIFICATION HISTORY:         Written by:  David W. Fanning, 3 February 2010.        Updated to use a time variable for the frame number. 29 Oct 2011.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_file_examples.html#NCDF_File_Examples", "NCDF_File_Examples", 'routine in <a href="coyote/ncdf_file_examples.html">ncdf_file_examples.pro</a>', "ncdf_file_examples.pro", "", "NCDF_File_Examples", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_isvalidfile.html", "ncdf_isvalidfile.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_isvalidfile.pro", "", "", " NAME:     NCDF_ISVALIDFILE   PURPOSE:      Utility routine to determine if a file is a valid netCDF file or not.     Returns a 1 if the file is valid and a 0 otherwise.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:      Utility.   CALLING SEQUENCE:      result = NCDF_IsValidFile(filename)   INPUTS:      filename:    The name of a filename to open to see if it is a valid netCDF file.   RETURN VALUE:      result:  A 1 if the file can be opened as a netCDF file. A 0 otherwise.   KEYWORDS:      None.   ALGORITHM:      Try to open the file. If you fail, it is not an netCDF file.   MODIFICATION HISTORY:      Written by: David W. Fanning, 21 February 2010.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_isvalidfile.html#NCDF_IsValidFile", "NCDF_IsValidFile", 'routine in <a href="coyote/ncdf_isvalidfile.html">ncdf_isvalidfile.pro</a>', "ncdf_isvalidfile.pro", "", "NCDF_IsValidFile", "", "filename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html", "ncdf_variable__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ncdf_variable__define.pro", "", "", " NAME:        NCDF_VARIABLE   PURPOSE:         The pupose of this NCDF_Variable object is to store information about        a netCDF variable. The object is principally used as a utility routine        for the NCDF_FILE object. Given the variable name, the object will acquire        additional information about the variable from the netCDF file containing        the variable.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         File I/O   CALLING SEQUENCE:         IDL&gt; varObj = Obj_New('NCDF_VARIABLE', varName, parent)   ARGUMENTS:         varName:   The case sensitive name of a netCDF variable that is stored in the                   netCDF file. (Input and required.)         parent:    The object reference (NCDF_FILE object) of the netCDF file. In other words, the                   object reference of the file that contains this attribute. (Input and required.)   KEYWORD PARAMETERS:         None.   METHODS:       The following methods are available. Each is documented in front of the method.       varObject -&gt; AddAttr      varAttrNames = varObject -&gt; GetAttrNames()      dimIDs = varObject -&gt; GetDimIDs()      dimNames = varObject -&gt; GetDimNames()      varAttrValue = varObject -&gt; GetAttrValue()      varID = varObject -&gt; GetID()      varName = varObject -&gt; GetName()      propertyValue = varObject -&gt; GetProperty(attrProperty)      varValue = varObject -&gt; GetValue()      varObject -&gt; ParseVariable   MODIFICATION HISTORY:        Written by:  David W. Fanning, 3 Feb 2010.        Changes to the way dimensions of length 0 are handled. 11 Feb 2010. DWF.        Added GetInfo method. 20 Mar 2010. DWF.        Added MISSINGINDICES and FILLVALUE keywords to GetValue method to return the indices            and the value of missing data. 20 Mar 2010. DWF.        Modified the GetValue method so that if the data returned is scaled and/or offset            then the  missing  data value is preserved, although its data type may change.            In other words, the  missing  data is not scaled or offset. 20 Mar 2010. DWF.        Added output keywords SCALE_FACTOR, ADD_OFFSET, and DATATYPE to the GetValue method            so that these values can be returned to the caller at run-time. 29 April 2010. DWF.        Modified AddAttr method to allow for additional data types in attributes, specifically            INT data type. 3 June 2013. DWF.        Had to modify AddAttr method again to allow compatibility with IDL versions below 8.1. 26 July 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::AddAttr", "NCDF_Variable::AddAttr", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::AddAttr", "", "DATATYPEattrNameattrValue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetAttrNames", "NCDF_Variable::GetAttrNames", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetAttrNames", "", "COUNT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetAttrValue", "NCDF_Variable::GetAttrValue", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetAttrValue", "", "DATATYPEattrName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetDimIDs", "NCDF_Variable::GetDimIDs", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetDimIDs", "", "COUNT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetDimNames", "NCDF_Variable::GetDimNames", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetDimNames", "", "COUNT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetDimSizes", "NCDF_Variable::GetDimSizes", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetDimSizes", "", "COUNT", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetID", "NCDF_Variable::GetID", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetID", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetInfo", "NCDF_Variable::GetInfo", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetInfo", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetName", "NCDF_Variable::GetName", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetName", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetProperty", "NCDF_Variable::GetProperty", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetProperty", "", "thisProperty", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::GetValue", "NCDF_Variable::GetValue", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::GetValue", "", "ADD_OFFSETCOUNTDATATYPEFILLVALUEOFFSETSCALE_FACTORSTRIDEMISSINGINDICES", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::HasAttr", "NCDF_Variable::HasAttr", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::HasAttr", "", "OBJECTattrName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::ParseVariable", "NCDF_Variable::ParseVariable", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::ParseVariable", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::CLEANUP", "NCDF_Variable::CLEANUP", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable::INIT", "NCDF_Variable::INIT", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable::INIT", "", "varNameparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/ncdf_variable__define.html#NCDF_Variable__DEFINE", "NCDF_Variable__DEFINE", 'routine in <a href="coyote/ncdf_variable__define.html">ncdf_variable__define.pro</a>', "ncdf_variable__define.pro", "", "NCDF_Variable__DEFINE", "", "class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/newbox.html", "newbox.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "newbox.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/newbox.html#newbox", "newbox", 'routine in <a href="code_snapshots/obsolete_code/newbox.html">newbox.pro</a>', "newbox.pro", "", "newbox", "			Since I kind of fucked up boxit, doing another one.  ", "filebmp", "          -1", "		newbox,file='$PWD/sep11_postit/104533_20120912_124300_353097_0.bin'  ");
  
  

libdata[libdataItem++] = new Array("idlastro/ngp.html", "ngp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ngp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ngp.html#ngp", "ngp", 'routine in <a href="idlastro/ngp.html">ngp.pro</a>', "ngp.pro", "", "ngp", " NAME:        NGP   PURPOSE:        Interpolate an irregularly sampled field using Nearest Grid Point   EXPLANATION:        This function interpolates irregularly gridded points to a        regular grid using Nearest Grid Point.   CATEGORY:        Mathematical functions, Interpolation   CALLING SEQUENCE:        Result = NGP, VALUE, POSX, NX[, POSY, NY, POSZ, NZ,                      /AVERAGE, /WRAPAROUND, /NO_MESSAGE]   INPUTS:        VALUE: Array of sample weights (field values). For e.g. a               temperature field this would be the temperature and the               keyword AVERAGE should be set. For e.g. a density field               this could be either the particle mass (AVERAGE should               not be set) or the density (AVERAGE should be set).        POSX:  Array of X coordinates of field samples, unit indices: [0,NX&gt;.        NX:    Desired number of grid points in X-direction.   OPTIONAL INPUTS:       POSY: Array of Y coordinates of field samples, unit indices: [0,NY&gt;.       NY:   Desired number of grid points in Y-direction.       POSZ: Array of Z coordinates of field samples, unit indices: [0,NZ&gt;.       NZ:   Desired number of grid points in Z-direction.   KEYWORD PARAMETERS:        AVERAGE:    Set this keyword if the nodes contain field samples                    (e.g. a temperature field). The value at each grid                    point will then be the average of all the samples                    allocated to it. If this keyword is not set, the                    value at each grid point will be the sum of all the                    nodes allocated to it (e.g. for a density field from                    a distribution of particles). (D=0).        WRAPAROUND: Set this keyword if the data is periodic and if you                    want the first grid point to contain samples of both                    sides of the volume (see below). (D=0).        NO_MESSAGE: Suppress informational messages.   Example of default NGP allocation: n0=4, *=gridpoint.       0   1   2   3     Index of gridpoints      *   *   *   *     Grid points    |---|---|---|---|   Range allocated to gridpoints ([0.0,1.0&gt; --&gt; 0, etc.)    0   1   2   3   4   posx   Example of NGP allocation for WRAPAROUND: n0=4, *=gridpoint.     0   1   2   3         Index of gridpoints    *   *   *   *         Grid points  |---|---|---|---|--     Range allocated to gridpoints ([0.5,1.5&gt; --&gt; 1, etc.)    0   1   2   3   4=0   posx   OUTPUTS:        Prints that a NGP interpolation is being performed of x        samples to y grid points, unless NO_MESSAGE is set.   RESTRICTIONS:        All input arrays must have the same dimensions.        Postition coordinates should be in index units' of the        desired grid: POSX=[0,NX&gt;, etc.   PROCEDURE:        Nearest grid point is determined for each sample.        Samples are allocated to nearest grid points.        Grid point values are computed (sum or average of samples).   EXAMPLE:        nx = 20        ny = 10        posx = randomu(s,1000)        posy = randomu(s,1000)        value = posx^2+posy^2        field = ngp(value,posx*nx,nx,posy*ny,ny,/average)        surface,field,/lego   NOTES:        Use tsc.pro or cic.pro for a higher order interpolation schemes.    A        standard reference for these interpolation methods is:   R.W. Hockney        and J.W. Eastwood, Computer Simulations Using Particles (New York:        McGraw-Hill, 1981).  MODIFICATION HISTORY:        Written by Joop Schaye, Feb 1999.        Check for LONG overflow  P. Riley/W. Landsman   December 1999  ", "AVERAGEWRAPAROUNDNO_MESSAGEvalueposxnxposynyposznz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/nint.html", "nint.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "nint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/nint.html#nint", "nint", 'routine in <a href="idlastro/nint.html">nint.pro</a>', "nint.pro", "", "nint", " NAME: 	NINT  PURPOSE: 	Nearest integer function.  EXPLANATION: 	NINT() is similar to the intrinsic ROUND function, with the following 	two differences: 	(1) if no absolute value exceeds 32767, then the array is returned as 		as a type INTEGER instead of LONG 	(2) NINT will work on strings, e.g. print,nint(['3.4','-0.9']) will 		give [3,-1], whereas ROUND() gives an error message   CALLING SEQUENCE: 	result = nint( x, [ /LONG] )   INPUT: 	X - An IDL variable, scalar or vector, usually floating or double 		Unless the LONG keyword is set, X must be between -32767.5 and 		32767.5 to avoid integer overflow   OUTPUT 	RESULT - Nearest integer to X   OPTIONAL KEYWORD INPUT: 	LONG - If this keyword is set and non-zero, then the result of NINT 		is of type LONG.   Otherwise, the result is of type LONG if 		any absolute values exceed 32767, and type INTEGER if all 		all absolute values are less than 32767.  EXAMPLE: 	If X = [-0.9,-0.1,0.1,0.9] then NINT(X) = [-1,0,0,1]   PROCEDURE CALL: 	None:  REVISION HISTORY: 	Written W. Landsman        January 1989 	Added LONG keyword         November 1991 	Use ROUND if since V3.1.0  June 1993 	Always start with ROUND function    April 1995 	Return LONG values, if some input value exceed 32767 		and accept string values   February 1998        Use size(/TNAME) instead of DATATYPE()      October 2001  ", "LONGx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/npixfit.html", "npixfit.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "npixfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/npixfit.html#npixfit", "npixfit", 'routine in <a href="sep20/npixfit.html">npixfit.pro</a>', "npixfit.pro", "", "npixfit", "       Linear fit to limb strips with an arbitrary number of limb pixels   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   fixfid           Strucutre comtaining the fiducial positions to be used for chord checking.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/npixfit.html", "npixfit.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "npixfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/npixfit.html#npixfit", "npixfit", 'routine in <a href="code_snapshots/jul25/npixfit.html">npixfit.pro</a>', "npixfit.pro", "", "npixfit", "       Linear fit to limb strips with an arbitrary number of limb pixels   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/npixfit.html", "npixfit.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "npixfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/npixfit.html#npixfit", "npixfit", 'routine in <a href="code_snapshots/sep11/npixfit.html">npixfit.pro</a>', "npixfit.pro", "", "npixfit", "       Linear fit to limb strips with an arbitrary number of limb pixels   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   fixfid           If set, marks the second run of centroidwholesuns and attempts to fix any chord slicing if the chord edge crosses a fiducial.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/nstar.html", "nstar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "nstar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/nstar.html#nstar", "nstar", 'routine in <a href="idlastro/nstar.html">nstar.pro</a>', "nstar.pro", "", "nstar", " NAME:        NSTAR  PURPOSE:        Simultaneous point spread function fitting (adapted from DAOPHOT)  EXPLANATION:        This PSF fitting algorithm is based on a very old (~1987) version of        DAOPHOT, and much better algorithms (e.g. ALLSTAR) are now available        -- though not in IDL.   CALLING SEQUENCE:        NSTAR, image, id, xc, yc, mags, sky, group, [ phpadu, readns, psfname,                magerr, iter, chisq, peak, /PRINT , /SILENT, /VARSKY, /DEBUG ]   INPUTS:        image - image array        id    - vector of stellar ID numbers given by FIND        xc    - vector containing X position centroids of stars (e.g. as found                by FIND)        yc    - vector of Y position centroids        mags  - vector of aperture magnitudes (e.g. as found by APER)                If 9 or more parameters are supplied then, upon output                ID,XC,YC, and MAGS will be modified to contain the new                values of these parameters as determined by NSTAR.                Note that the number of output stars may be less than                the number of input stars since stars may converge, or                 disappear  because they are too faint.        sky   - vector of sky background values (e.g. as found by APER)        group - vector containing group id's of stars as found by GROUP   OPTIONAL INPUT:        phpadu - numeric scalar giving number of photons per digital unit.                Needed for computing Poisson error statistics.        readns - readout noise per pixel, numeric scalar.   If not supplied,                NSTAR will try to read the values of READNS and PHPADU from                the PSF header.  If still not found, user will be prompted.        psfname - name of FITS image file containing the point spread                function residuals as determined by GETPSF, scalar string.                If omitted, then NSTAR will prompt for this parameter.   OPTIONAL OUTPUTS:        MAGERR - vector of errors in the magnitudes found by NSTAR        ITER - vector containing the number of iterations required for                each output star.        CHISQ- vector containing the chi square of the PSF fit for each                output star.        PEAK - vector containing the difference of the mean residual of                the pixels in the outer half of the fitting circle and                the mean residual of pixels in the inner half of the                fitting circle   OPTIONAL KEYWORD INPUTS:        /SILENT - if set and non-zero, then NSTAR will not display its results                at the terminal        /PRINT - if set and non-zero then NSTAR will also write its results to                a file nstar.prt.   One also can specify the output file name                by setting PRINT = 'filename'.        /VARSKY - if this keyword is set and non-zero, then the sky level of                each group is set as a free parameter.        /DEBUG - if this keyword is set and non-zero, then the result of each                fitting iteration will be displayed.   PROCEDURES USED:        DAO_VALUE(), READFITS(), REMOVE, SPEC_DIR(), STRN(), SXPAR()   COMMON BLOCK:        RINTER - contains pre-tabulated values for cubic interpolation  REVISION HISTORY        W. Landsman                 ST Systems Co.       May, 1988        Adapted for IDL Version 2, J. Isensee, September, 1990        Minor fixes so that PRINT='filename' really prints to 'filename', and        it really silent if SILENT is set.  J.Wm.Parker HSTX 1995-Oct-31        Added /VARSKY option   W. Landsman   HSTX      May 1996        Converted to IDL V5.0   W. Landsman   September 1997        Replace DATATYPE() with size(/TNAME)  W. Landsman November 2001        Assume since V5.5, remove VMS calls W. Landsman September 2006  ", "DEBUGPRINTSILENTVARSKYimageidxcycmagsskygroupphpadureadnspsfnameerrmagiterchisqpeak", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/nulltrim.html", "nulltrim.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "nulltrim.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/nulltrim.html#nulltrim", "nulltrim", 'routine in <a href="idlastro/nulltrim.html">nulltrim.pro</a>', "nulltrim.pro", "", "nulltrim", " NAME: 	NULLTRIM  PURPOSE: 	Trim a string of all characters after and including the first null  EXPLANATION: 	The null character is an ascii 0b   CALLING SEQUENCE: 	result = nulltrim( st )   INPUTS: 	st = input string  OUTPUTS: 	trimmed string returned as the function value.  HISTORY: 	D. Lindler  July, 1987 	Converted to IDL V5.0   W. Landsman   September 1997  ", "st", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/nutate.html", "nutate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "nutate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/nutate.html#nutate", "nutate", 'routine in <a href="idlastro/nutate.html">nutate.pro</a>', "nutate.pro", "", "nutate", " NAME:        NUTATE  PURPOSE:        Return the nutation in longitude and obliquity for a given Julian date   CALLING SEQUENCE:        NUTATE, jd, Nut_long, Nut_obliq   INPUT:        jd - Julian ephemeris date, scalar or vector, double precision  OUTPUT:        Nut_long - the nutation in longitude, same # of elements as jd        Nut_obliq - nutation in latitude, same # of elements as jd   EXAMPLE:        (1) Find the nutation in longitude and obliquity 1987 on Apr 10 at Oh.               This is example 22.a from Meeus         IDL&gt; jdcnv,1987,4,10,0,jul         IDL&gt; nutate, jul, nut_long, nut_obliq              ==&gt; nut_long = -3.788    nut_obliq = 9.443         (2) Plot the large-scale variation of the nutation in longitude                during the 20th century         IDL&gt; yr = 1900 + indgen(100)     ;Compute once a year        IDL&gt; jdcnv,yr,1,1,0,jul          ;Find Julian date of first day of year        IDL&gt; nutate,jul, nut_long        ;Nutation in longitude        IDL&gt; plot, yr, nut_long         This plot will reveal the dominant (18.6 year) period, but a finer        grid is needed to display the shorter periods in the nutation.  METHOD:        Uses the formula in Chapter 22 of Astronomical Algorithms'' by Jean        Meeus (1998, 2nd ed.) which is based on the 1980 IAU Theory of Nutation        and includes all terms larger than 0.0003 .   PROCEDURES CALLED:        POLY()                       (from IDL User's Library)        CIRRANGE, ISARRAY()          (from IDL Astronomy Library)   REVISION HISTORY:        Written, W.Landsman (Goddard/HSTX)      June 1996        Converted to IDL V5.0   W. Landsman   September 1997        Corrected minor typos in values of d_lng W. Landsman  December 2000        Updated typo in cdelt term              December 2000        Avoid overflow for more than 32767 input dates W. Landsman January 2005  ", "jdnut_longnut_obliq", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutri.html", "nutri.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "nutri.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    NUTRI   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutri.html#nutri", "nutri", 'routine in <a href="code_snapshots/obsolete_code/nutri.html">nutri.pro</a>', "nutri.pro", "", "nutri", "       Object-oriented version of tricenter.pro. Easier to use? Not really, but 		that's probably because it was my first time writing a successful OOP 		program.   ", "time           Outputs how much time the program takes  file           What file to find 3 centers for  scan_width           How apart the scans are for minicrop(). Overrides defaults in crop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html", "nutricenter.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "nutricenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#data::init", "data::init", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "data::init", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#data::set", "data::set", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "data::set", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#data::get", "data::get", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "data::get", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#data__define", "data__define", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "data__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#minicrop::init", "minicrop::init", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "minicrop::init", "", "scan_widthsundiamthreshtemparrtime", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#boundaries::cleanup", "boundaries::cleanup", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "boundaries::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#minicrop__define", "minicrop__define", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "minicrop__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#boundaries::init", "boundaries::init", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "boundaries::init", "   Loads a triple-sun image and crops out selected regions one-by-one.   ", "regioninputarrscan_width       How far apart the scanning should be.  sundiamsigmavalue       Sets the threshold to be: <span class= code-output >   max(image) - sigmavalue*stddev(image)</span>  time       Print the elapsed time  ", "          -1", "       cropped = boundaries(region=1,inputarr=image,sundiam=sundiam,scan_width=scan_width,$            thresh=thresh)   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#boundaries::cleanup", "boundaries::cleanup", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "boundaries::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#boundaries__define", "boundaries__define", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "boundaries__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#cropit::init", "cropit::init", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "cropit::init", "   Loads a triple-sun image and crops out selected regions one-by-one.   ", "regionscan_width       How far apart the scanning should be.  sundiamsigmavalue       Sets the threshold to be: <span class= code-output >   max(image) - sigmavalue*stddev(image)</span>  time       Print the elapsed time  ", "          -1", "       cropped = cropit(region=1,inputarr=image,sundiam=sundiam,scan_width=scan_width,$            thresh=thresh)   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#cropit::cleanup", "cropit::cleanup", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "cropit::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#cropit__define", "cropit__define", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "cropit__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#centerit::init", "centerit::init", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "centerit::init", "       Had to make a new version of comp3 because the old one called scanbox() by default   ", "file           What file to load in  time           Print the elapsed time  sigmavalue           Sets the threshold to be: <span class= code-output >   max(image) - sigmavalue*stddev(image)</span>  region           Which sun out of the three to find the center of. Defaults to the brightest sun  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#centerit::cleanup", "centerit::cleanup", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "centerit::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#centerit__define", "centerit__define", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "centerit__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#getstruct::init", "getstruct::init", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "getstruct::init", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "scan_width           How apart the scans are for minicrop(). Overrides defaults in tribox().  file           What file to find 4 centers for  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>   time           Outputs how much time the program takes  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#getstruct::minicrop", "getstruct::minicrop", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "getstruct::minicrop", "", "scan_widthsundiamthreshtemparrtime", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#getstruct::cleanup", "getstruct::cleanup", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "getstruct::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#getstruct__define", "getstruct__define", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "getstruct__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/nutricenter.html#nutricenter", "nutricenter", 'routine in <a href="code_snapshots/obsolete_code/nutricenter.html">nutricenter.pro</a>', "nutricenter.pro", "", "nutricenter", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "scan_width           How apart the scans are for minicrop(). Overrides defaults in tribox().  file           What file to find 4 centers for  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>   time           Outputs how much time the program takes  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/observatory.html", "observatory.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "observatory.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/observatory.html#observatory", "observatory", 'routine in <a href="idlastro/observatory.html">observatory.pro</a>', "observatory.pro", "", "observatory", " NAME:        OBSERVATORY  PURPOSE:        Return longitude, latitude, altitude & time zones of an observatory  EXPLANATION:        Given an observatory name, returns a structure giving the longitude,        latitude, altitude, and time zone   CALLING SEQUENCE:        Observatory, obsname, obs_struct, [ /PRINT ]   INPUTS:        obsname - scalar or vector string giving abbreviated name(s) of              observatories for which location or time information is requested.              If obsname is an empty string, then information is returned for              all observatories in the database.     See the NOTES: section              for the list of 41 recognized observatories.   The case of the              string does not matter  OUTPUTS:        obs_struct - an IDL structure containing information on  the specified                  observatories.   The structure tags are as follows:        .observatory - abbreviated observatory name        .name - full observatory name        .longitude - observatory longitude in degrees *west*        .latitude - observatory latitude in degrees        .altitude - observatory altitude in meters above sea level        .tz - time zone, number of hours *west* of Greenwich   OPTIONAL INPUT KEYWORD:      /PRINT - If this keyword is set, (or if only 1 parameter is supplied)              then OBSERVATORY will display information about the specified              observatories at the terminal  EXAMPLE:      Get the latitude, longitude and altitude of Kitt Peak National Observatory       IDL&gt; observatory,'kpno',obs      IDL&gt; print,obs.longitude  ==&gt; 111.6 degrees west      IDL&gt; print,obs.latitude  ==&gt; +31.9633 degrees      IDL&gt; print,obs.altitude  ==&gt; 2120 meters above sea level   NOTES:    Observatory information is taken from noao$lib/obsdb.dat file in IRAF 2.11    Currently recognized observatory names are as follows:    'kpno': Kitt Peak National Observatory   'ctio': Cerro Tololo Interamerican Observatory   'eso': European Southern Observatory   'lick': Lick Observatory   'mmto': MMT Observatory   'cfht': Canada-France-Hawaii Telescope   'lapalma': Roque de los Muchachos, La Palma   'mso': Mt. Stromlo Observatory   'sso': Siding Spring Observatory   'aao': Anglo-Australian Observatory   'mcdonald': McDonald Observatory   'lco': Las Campanas Observatory   'mtbigelow': Catalina Observatory: 61 inch telescope   'dao': Dominion Astrophysical Observatory   'spm': Observatorio Astronomico Nacional, San Pedro Martir   'tona': Observatorio Astronomico Nacional, Tonantzintla   'Palomar': The Hale Telescope   'mdm': Michigan-Dartmouth-MIT Observatory   'NOV': National Observatory of Venezuela   'bmo': Black Moshannon Observatory   'BAO': Beijing XingLong Observatory   'keck': W. M. Keck Observatory   'ekar': Mt. Ekar 182 cm. Telescope   'apo': Apache Point Observatory   'lowell': Lowell Observatory   'vbo': Vainu Bappu Observatory   'flwo': Whipple Observatory   'oro': Oak Ridge Observatory   'lna': Laboratorio Nacional de Astrofisica - Brazil   'saao': South African Astronomical Observatory   'casleo': Complejo Astronomico El Leoncito, San Juan   'bosque': Estacion Astrofisica Bosque Alegre, Cordoba   'rozhen': National Astronomical Observatory Rozhen - Bulgaria   'irtf': NASA Infrared Telescope Facility   'bgsuo': Bowling Green State Univ Observatory   'ca': Calar Alto Observatory   'holi': Observatorium Hoher List (Universitaet Bonn) - Germany   'lmo': Leander McCormick Observatory   'fmo': Fan Mountain Observatory   'whitin': Whitin Observatory, Wellesley College   'mgio': Mount Graham International Observatory   PROCEDURE CALLS:     TEN()  REVISION HISTORY:     Written   W. Landsman                 July 2000     Corrected sign error for 'holi'   W.L/ Holger Israel    Mar 2008     Correctly terminate when observatory name not recognized                                               S. Koposov, July 2008  ", "printobsnameobs_struct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/one_arrow.html", "one_arrow.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "one_arrow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/one_arrow.html#one_arrow", "one_arrow", 'routine in <a href="idlastro/one_arrow.html">one_arrow.pro</a>', "one_arrow.pro", "", "one_arrow", " NAME:        ONE_ARROW  PURPOSE:        Draws an arrow labeled with a single character on the current device  EXPLANATION:        ONE_ARROW is called, for example, by ARROWS to create a         weathervane  showing the N-E orientation of an image.   CALLING SEQUENCE:        one_arrow, xcen, ycen, angle, label, CHARSIZE = , THICK = , COLOR =                        ARROWSIZE=, FONT =  ]  INPUT PARAMETERS:     xcen, ycen = starting point of arrow, floating point scalars,                  In device coordinates unless /DATA or /NORMAL set     angle      = angle of arrow in degrees counterclockwise from +X direction     label      = single-character label (may be blank)   OUTPUT PARAMETERS:  none   OPTIONAL INPUT PARAMETERS:        ARROWSIZE  = 3-element vector defining appearance of arrow.                For device coordinates the default is  [30.0, 9.0, 35.0],                meaning arrow is 30 pixels long; arrowhead lines 9 pixels                long and inclined 35 degrees from arrow shaft.     For                normalized coordinates the default is divided by 512., for                data coordinates the default is multiplied by                (!X.crange[1] - !X.crange[0])/512..        CHARSIZE   = usual IDL meaning, default = 2.0        COLOR      = name or number give the color to draw the arrow.  See              cgCOLOR for a list of color names.        /DATA - If set, then the input position (xcen, ycen) and the ARROWSIZE                 lengths are interpreted as being in data coordinates        FONT - IDL vector font number to use (1-20).   For example, to write                the 'N' and 'E' characters in complex script, set font=13        /NORMAL - If set, then the input position (xcen, ycen) and the ARROWSIZE                 lengths are interpreted as being in normal coordinates        THICK      = usual IDL meaning, default = 2.0  EXAMPLE:        Draw an triple size arrow emanating from the point (212,224)        and labeled with the character 'S'         IDL&gt; one_arrow,212,224,270,'S',charsize=3  PROCEDURE:        Calls one_ray to vector-draw arrow.  MODIFICATION HISTORY:        Written by R. S. Hill, Hughes STX Corp., 20-May-1992.        Added font keyword, W.B. Landsman Hughes STX Corp. April 1995        Modified to work correctly for COLOR=0  J.Wm.Parker, HITC   1995 May 25        Add /NORMAL and /DATA keywords  W.Landsman    November 2006        Work with Coyote graphics W. Landsman  February 2011  ", "linestylecharsizethickcolorarrowsizefontdatanormalxcenycenanglelabel", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/one_ray.html", "one_ray.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "one_ray.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/one_ray.html#one_ray", "one_ray", 'routine in <a href="idlastro/one_ray.html">one_ray.pro</a>', "one_ray.pro", "", "one_ray", " NAME:        ONE_RAY  PURPOSE:        Draw a line with a specified starting point, length, and  angle   CALLING SEQUENCE:        one_ray, xcen, ycen, len, angle, terminus, /NODRAW ]   INPUT PARAMETERS:        xcen, ycen = starting point in device coordinates, floating point                        scalars        len        = length in pixels, device coordinates        angle      = angle in degrees counterclockwise from +X direction   OUTPUT PARAMETERS:        terminus = two-element vector giving ending point of ray in device                coordinates   OPTIONAL KEYWORD INPUT PARAMETERS:        /nodraw   if non-zero, the ray is not actually drawn, but the terminus                is still calculated          Any valid keyword to cgPLOTS can also be passed ot ONE_RAY.   In         particular, COLOR, THICK, and LINESTYLE control the color, thickness         and linestyle of the drawn line.  EXAMPLE:        Draw a double thickness line of length 32 pixels from (256,256)        45 degrees counterclockwise from the X axis         IDL&gt; one_ray, 256, 256, 32, 45 ,term, THICK = 2   PROCEDURE:  straightforward matrix arithmetic   MODIFICATION HISTORY:     Written by R. S. Hill, Hughes STX Corp., 20-May-1992.     Modified to work correctly for COLOR=0  J.Wm.Parker  HITC   1995 May 25     Added _EXTRA keywords to PLOT   W. Landsman   November 2006     Work with Coyote Graphcis W. Landsman February 2011  ", "nodraw_EXTRAdatanormalxcenycenlenangleterminus", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/oploterror.html", "oploterror.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "oploterror.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/oploterror.html#oploterror", "oploterror", 'routine in <a href="idlastro/oploterror.html">oploterror.pro</a>', "oploterror.pro", "", "oploterror", " NAME:       OPLOTERROR  PURPOSE:       Over-plot data points with accompanying X or Y error bars.  EXPLANATION:       For use instead of PLOTERROR when the plotting system has already been       defined.   CALLING SEQUENCE:       oploterror, [ x,]  y, [xerr], yerr,             [ /NOHAT, HATLENGTH= , ERRTHICK =, ERRSTYLE=, ERRCOLOR =,               /LOBAR, /HIBAR, NSKIP = , NSUM = , /ADDCMD, ... OPLOT keywords ]  INPUTS:       X = array of abcissae, any datatype except string       Y = array of Y values, any datatype except string       XERR = array of error bar values (along X)       YERR = array of error bar values (along Y)   OPTIONAL INPUT KEYWORD PARAMETERS:        /ADDCMD    = Set this keyword if you want to add this command to                    a cgWindow.       /NOHAT     = if specified and non-zero, the error bars are drawn                   without hats.       HATLENGTH = the length of the hat lines used to cap the error bars.                   Defaults to !D.X_VSIZE / 100).       ERRTHICK  = the thickness of the error bar lines.  Defaults to the                   THICK plotting keyword.       ERRSTYLE  = the line style to use when drawing the error bars.  Uses                   the same codes as LINESTYLE.      ERRCOLOR =  String (e.g. 'red') or scalar integer (0 - !D.N_TABLE)               specifying the color to use for the error bars.   See CGCOLOR()               for a list of possible color names.  See               http://www.idlcoyote.com/cg_tips/legcolor.php               for a warning about the use of indexed color       NSKIP = Positive Integer specifying the error bars to be plotted.             For example, if NSKIP = 2 then every other error bar is             plotted; if NSKIP=3 then every third error bar is plotted.             Default is to plot every error bar (NSKIP = 1)       NSUM =  Number of points to average over before plotting, default =              !P.NSUM  The errors are also averaged, and then divided by              sqrt(NSUM).   This approximation is meaningful only when the              neighboring error bars have similar sizes.        /LOBAR = if specified and non-zero, will draw only the -ERR error bars.       /HIBAR = if specified and non-zero, will draw only the +ERR error bars.                   If neither LOBAR or HIBAR are set _or_ if both are set,                   you will get both error bars.  Just specify one if you                   only want one set.      Any valid keywords to the OPLOT command (e.g. PSYM, YRANGE) are also      accepted by OPLOTERROR via the _EXTRA facility.   NOTES:      If only two parameters are input, they are taken as Y and YERR.  If only      three parameters are input, they will be taken as X, Y and YERR,      respectively.   EXAMPLE:       Suppose one has X and Y vectors with associated errors XERR and YERR       and that a plotting system has already been defined:         (1) Overplot Y vs. X with both X and Y errors and no lines connecting            the points                   IDL&gt; oploterror, x, y, xerr, yerr, psym=3         (2) Like (1) but overplot only the Y errors bars and omits  hats                    IDL&gt; oploterror, x, y, yerr, psym=3, /NOHAT         (3) Like (2) but suppose one has a positive error vector YERR1, and                a negative error vector YERR2 (asymmetric error bars)                   IDL&gt; oploterror, x, y, yerr1, psym=3, /NOHAT,/HIBAR                   IDL&gt; oploterror, x, y, yerr2, psym=3, /NOHAT,/LOBAR   PROCEDURE:       A plot of X versus Y with error bars drawn from Y - YERR to Y + YERR       and optionally from X - XERR to X + XERR is written to the output device   WARNING:       This an enhanced version of the procedure OPLOTERR in the standard RSI       library.    It was renamed to OPLOTERROR in June 1998 in the IDL       Astronomy library.   MODIFICATION HISTORY:       Adapted from the most recent version of PLOTERR.  M. R. Greason,             Hughes STX, 11 August 1992.       Added COLOR keyword option to error bars W. Landsman   November 1993       Add ERRCOLOR, use _EXTRA keyword,           W. Landsman, July 1995       Remove spurious call to PLOT_KEYWORDS     W. Landsman, August 1995       OPLOT more than 32767 error bars          W. Landsman, Feb 1996       Added NSKIP keyword                       W. Landsman, Dec 1996       Added HIBAR and LOBAR keywords, M. Buie, Lowell Obs., Feb 1998       Rename to OPLOTERROR    W. Landsman    June 1998       Ignore !P.PSYM when drawing error bars   W. Landsman   Jan 1999       Handle NSUM keyword correctly           W. Landsman    Aug 1999       Check limits for logarithmic axes       W. Landsman    Nov. 1999       Work in the presence of  NAN values     W. Landsman    Dec 2000       Improve logic when NSUM or !P.NSUM is set  W. Landsman      Jan 2001       Remove NSUM keyword from PLOTS call    W. Landsman      March 2001       Only draw error bars with in XRANGE (for speed)  W. Landsman Jan 2002       Fix Jan 2002 update to work with log plots  W. Landsman Jun 2002       Added STRICT_EXTRA keyword   W. Landsman     July 2005       W. Landsman Fixed case of logarithmic axes reversed Mar 2009       Update for Coyote Graphics  W. Landsman     Feb. 2011       Hats were not being plotted by default  W. Landsman Apr 2011  ", "NOHATHATLENGTHERRTHICKERRSTYLETHICKNOCLIPERRCOLORNsumNSKIPLOBARHIBARADDCMD_EXTRAxyxerryerr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ordinal.html", "ordinal.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ordinal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ordinal.html#ordinal", "ordinal", 'routine in <a href="idlastro/ordinal.html">ordinal.pro</a>', "ordinal.pro", "", "ordinal", " NAME: 	ORDINAL  PURPOSE: 	Convert an integer to a correct English ordinal string:  EXPLANATION: 	The first four ordinal strings are  1st ,  2nd ,  3rd ,  4th  ....   CALLING SEQUENCE: 	result = ordinal( num )   INPUT PARAMETERS: 	num = number to be made an ordinal.  If float, will be FIXed.   OUTPUT PARAMETERS: 	result = string such as '1st' '3rd' '164th' '87th', etc.   MODIFICATION HISTORY: 	Written by R. S. Hill, STX, 8 Aug. 1991 	Converted to IDL V5.0   W. Landsman   September 1997  ", "num", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/para_fid.html", "para_fid.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "para_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/para_fid.html#para_fid", "para_fid", 'routine in <a href="code_snapshots/albert_version/para_fid.html">para_fid.pro</a>', "para_fid.pro", "", "para_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/para_fid.html", "para_fid.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "para_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/para_fid.html#para_fid", "para_fid", 'routine in <a href="sep20/para_fid.html">para_fid.pro</a>', "para_fid.pro", "", "para_fid", "       Fits 2 1D parabolas to the fiducial center and returns where they cross   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/para_fid.html", "para_fid.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "para_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/para_fid.html#para_fid", "para_fid", 'routine in <a href="code_snapshots/jul25/para_fid.html">para_fid.pro</a>', "para_fid.pro", "", "para_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/para_fid.html", "para_fid.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "para_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/para_fid.html#para_fid", "para_fid", 'routine in <a href="code_snapshots/orig_version/para_fid.html">para_fid.pro</a>', "para_fid.pro", "", "para_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/para_fid.html", "para_fid.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "para_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/para_fid.html#para_fid", "para_fid", 'routine in <a href="code_snapshots/test_version/para_fid.html">para_fid.pro</a>', "para_fid.pro", "", "para_fid", "", "inputimageinputstruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/para_fid.html", "para_fid.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "para_fid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/para_fid.html#para_fid", "para_fid", 'routine in <a href="code_snapshots/sep11/para_fid.html">para_fid.pro</a>', "para_fid.pro", "", "para_fid", "       Fits 2 1D parabolas to the fiducial center and returns where they cross   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   fixfid           If set, marks the second run of centroidwholesuns and attempts to fix any chord slicing if the chord edge crosses a fiducial.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/paradip.html", "paradip.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "paradip.pro", "", "", " PROJECT:        HESSI  NAME:    PARADIP   PURPOSE:    Given a 3x3 array, does parabolic fits to determine position and value of dip. Different from PARAPEAK in that this computes the fit of the dip and not a peak. I don't like having to normalie my data so I'd rather do it this way.   CATEGORY:    IMAGE   CALLING SEQUENCE:    Result = paradip (z, err_msg=err_msg)   INPUTS:    z - (3,3) array of image values.  Middle value should be highest, corners lowest.   OUTPUT KEYWORDS:    err_msg - '' if no error, otherwise contains error message   OUTPUT:    Returns a 3-element vector containing the x,y coordinates of the peak (relative to the middle      of the central pixel) in units of pixel size and the value at the inferred peak.   PROCEDURE:    Given a 3x3 array in which the corner values are lower than any intermediate value,    PARADIP assumes that these correspond to the top of a 2-D circular gaussian; does    a pair of 1-D parabolic fits and returns the 2-D peak location and value.    The 3x3 array supposedly represents the function z at x=0,1,2 and y=0,1,2     Note that there is considerable redundancy in the data which has not been exploited.    An alternate technique would be to use just the 5 values in the '+' shaped configuration.   COMMON BLOCKS:    None.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/paradip.html#paradip", "paradip", 'routine in <a href="code_snapshots/aug22_notworking/paradip.html">paradip.pro</a>', "paradip.pro", "", "paradip", "", "err_msgz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/partialcenter.html", "partialcenter.pro", '.pro file in <a href="code_snapshots/albert_version/obsolete_files/dir-overview.html">code_snapshots/albert_version/obsolete_files/ directory</a>', "partialcenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/obsolete_files/partialcenter.html#partialcenter", "partialcenter", 'routine in <a href="code_snapshots/albert_version/obsolete_files/partialcenter.html">partialcenter.pro</a>', "partialcenter.pro", "", "partialcenter", "", "inputimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/partialcenter.html", "partialcenter.pro", '.pro file in <a href="code_snapshots/sep11/obsolete_files/dir-overview.html">code_snapshots/sep11/obsolete_files/ directory</a>', "partialcenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/obsolete_files/partialcenter.html#partialcenter", "partialcenter", 'routine in <a href="code_snapshots/sep11/obsolete_files/partialcenter.html">partialcenter.pro</a>', "partialcenter.pro", "", "partialcenter", "", "inputimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/partialcenter.html", "partialcenter.pro", '.pro file in <a href="code_snapshots/jul25/obsolete_files/dir-overview.html">code_snapshots/jul25/obsolete_files/ directory</a>', "partialcenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/obsolete_files/partialcenter.html#partialcenter", "partialcenter", 'routine in <a href="code_snapshots/jul25/obsolete_files/partialcenter.html">partialcenter.pro</a>', "partialcenter.pro", "", "partialcenter", "", "inputimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/partialcenter.html", "partialcenter.pro", '.pro file in <a href="code_snapshots/test_version/obsolete_files/dir-overview.html">code_snapshots/test_version/obsolete_files/ directory</a>', "partialcenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/obsolete_files/partialcenter.html#partialcenter", "partialcenter", 'routine in <a href="code_snapshots/test_version/obsolete_files/partialcenter.html">partialcenter.pro</a>', "partialcenter.pro", "", "partialcenter", "", "inputimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/obsolete_files/partialcenter.html", "partialcenter.pro", '.pro file in <a href="sep20/obsolete_files/dir-overview.html">sep20/obsolete_files/ directory</a>', "partialcenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/obsolete_files/partialcenter.html#partialcenter", "partialcenter", 'routine in <a href="sep20/obsolete_files/partialcenter.html">partialcenter.pro</a>', "partialcenter.pro", "", "partialcenter", "", "inputimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/partialcenter.html", "partialcenter.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "partialcenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/partialcenter.html#partialcenter", "partialcenter", 'routine in <a href="code_snapshots/aug22_notworking/partialcenter.html">partialcenter.pro</a>', "partialcenter.pro", "", "partialcenter", "", "inputimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/partialcenter.html", "partialcenter.pro", '.pro file in <a href="code_snapshots/orig_version/obsolete_files/dir-overview.html">code_snapshots/orig_version/obsolete_files/ directory</a>', "partialcenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/obsolete_files/partialcenter.html#partialcenter", "partialcenter", 'routine in <a href="code_snapshots/orig_version/obsolete_files/partialcenter.html">partialcenter.pro</a>', "partialcenter.pro", "", "partialcenter", "", "inputimage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/partvelvec.html", "partvelvec.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "partvelvec.pro", "", "", " NAME:       PARTVELVEC   PURPOSE:        Plot the velocity vectors of particles at their positions  EXPLANATION:        This procedure plots the velocity vectors of particles (at the        positions of the particles).   CATEGORY:        Plotting, Two-dimensional.   CALLING SEQUENCE:        PARTVELVEC, VELX, VELY, POSX, POSY [, X, Y]   INPUTS:        VELX:  An array of any dimension, containing the x-components               of the particle velocities.        VELY:  An array of the same dimension as velx, containing the               y-components of the particle velocities.        POSX:  An array of the same dimension as velx, containing the               x-components of the particle positions.        POSY:  An array of the same dimension as velx, containing the               y-components of the particle positions.   OPTIONAL INPUTS:        X:   Optional abcissae values. X must be a vector.        Y:   Optional ordinate values. Y must be a vector. If only X             is specified, then Y is taken equal to be equal to X.   OPTIONAL INPUT KEYWORD PARAMETERS:        FRACTION:   The fraction of the vectors to plot. They are                    taken at random from the complete sample.    Default is               FRACTION = 1.0, use all vectors         LENGTH:     The maximum vectorlength relative to the plot data                    window.   Default = 0.08         COLOR:      Color for the vectors, axes and titles by string name or                    number (see cgCOLOR).   Note that if VECCOLORS is                    supplied, then the COLOR keyword still specifies the                    color of the axes and title.    Default  = 'Opposite'         OVER:       Plot over the previous plot         VECCOLORS:  The vector colors. Must be either a scalar, or                    a vector (nmeric or string) the same size as VELX.                    Set to COLOR by default.        WINDOW - Set this keyword to plot to a resizeable graphics window         Plot        All other keywords available to cgPlot (e.g. AXISCOLOR,        Keywords:   LINESTYLE, XRANGE) are available (via _EXTRA)   OUTPUTS:        This procedure plots the velocity vectors (VELX,VELY) at the        positions of the particles, (POSX,POSY). If X and Y are not        specified, then the size of the plot is such that all vectors        just fit within in the plot data window.   SIDE EFFECTS:        Plotting on the current device is performed.   EXAMPLE:        Generate some particle positions and velocities.           POSX=RANDOMU(seed,200)          POSY=RANDOMU(seed,200)          VELX=RANDOMU(seed,200)-0.5          VELY=RANDOMU(seed,200)-0.5         Plot the particle velocities.           PARTVELVEC, VELX, VELY, POSX, POSY         Example using vector colors.           POSX=RANDOMU(seed,200)          POSY=RANDOMU(seed,200)          VELX=RANDOMU(seed,200)-0.5          VELY=RANDOMU(seed,200)-0.5          magnitude = SQRT(velx^2 + vely^2)          LOADCT, 5, NCOLORS=254, BOTTOM=1 ; Load vector colors          colors = BytScl(magnitude, Top=254) + 1B          PARTVELVEC, VELX, VELY, POSX, POSY, COLOR='green', VECCOLORS=colors   MODIFICATION HISTORY:        Written by:  Joop Schaye (jschaye@astro.rug.nl), Sep 1996.        Added /OVER keyword   Theo Brauers (th.brauers@fz-juelich.de) Jul 2002        Added VECCOLORS keyword. David Fanning (david@dfanning.com) March, 2005        Incorporate the Coyote Graphics (cg) plot programs  WL  January 2011  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/partvelvec.html#partvelvec", "partvelvec", 'routine in <a href="idlastro/partvelvec.html">partvelvec.pro</a>', "partvelvec.pro", "", "partvelvec", "", "OVERVECCOLORSFRACTIONLENGTHCOLORWINDOW_EXTRAvelxvelyposxposyxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/pb_lines_intersection.html", "pb_lines_intersection.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "pb_lines_intersection.pro", "", "", " NAME:  PB_LINES_INTERSECTION   PURPOSE:  Use this function to find the intersection point of two lines  defined as segments (start and endpoints are provided).  For  now the lines must be coplanar (i.e. 2D).   CALLING SEQUENCE:  result = PB_LINES_INTERSECTION(LineA, LineB, $    [UA = variable], [UB = variable], $    [PARALLEL = variable], [COINCIDENT = variable], $    [ONSEGMENT = variable], $    [ANGLE = angle])   RETURNED VALUE:  A two element array of the intersection [X, Y].  If the  lines are parallel or coincident then the returned  value contains NANs and the appropriate output keyword is  returned as TRUE(non-zero).   ARGUMENTS:  LINEA and LINEB  4 element arrays that define the start and    end points of the lines in the form [x0,y0,x1,y1] or    [[x0,y0],[x1,y1]]   KEYWORDS:  ANGLE Set equal to a named variable to retrieve the angle (in radians) between    A and B as swept from A to B positive CCW.  The angle is between -pi and +pi  UA and UB  The parametric scaling constants calculated from the input    points.  PARALLEL Set this equal to a named variable which is returned    as TRUE (non-zero) if the lines are parallel  COINCIDENT Set this equal to a named variable which is returned    as TRUE (non-zero) if the lines are coincident (and parallel, too!)  ONSEGMENT Set this equal to anamed variable to retrieve a two    element flag indicating the point lies within the corresponding    segments.  For example, [1,0] indicates that the point is within    the two points defining the A line but it is outside the endpoints    of the B line (but lines A and B still intersect somewhere).   REFERENCE:  Paul Bourke's Geometry Resources located at  http://local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/  http://local.wasp.uwa.edu.au/~pbourke/geometry/insidepoly/   EXAMPLE:  A = [1.0,1.0,2.0,2.0]  B = [1.0,2.0,2.0,1.0]  xy = PB_LINES_INTERSECTION(A,B)  plot, A[[0,2]],A[[1,3]]  oplot, B[[0,2]],B[[1,3]]  plots, xy[0],xy[1],psym = 6   MODIFICATION HISTORY:  2007-07-15 BT adapted from description in reference.  2012-02-13 BT switched to cg* graphics  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/pb_lines_intersection.html#TESTLINES2", "TESTLINES2", 'routine in <a href="code_snapshots/obsolete_code/pb_lines_intersection.html">pb_lines_intersection.pro</a>', "pb_lines_intersection.pro", "", "TESTLINES2", "", "waitInterval", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/pb_lines_intersection.html#TESTLINES", "TESTLINES", 'routine in <a href="code_snapshots/obsolete_code/pb_lines_intersection.html">pb_lines_intersection.pro</a>', "pb_lines_intersection.pro", "", "TESTLINES", "", "AB", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/pb_lines_intersection.html#L_I_ANGLE", "L_I_ANGLE", 'routine in <a href="code_snapshots/obsolete_code/pb_lines_intersection.html">pb_lines_intersection.pro</a>', "pb_lines_intersection.pro", "", "L_I_ANGLE", "", "h1v1h2v2PI", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/pb_lines_intersection.html#PB_LINES_INTERSECTION", "PB_LINES_INTERSECTION", 'routine in <a href="code_snapshots/obsolete_code/pb_lines_intersection.html">pb_lines_intersection.pro</a>', "pb_lines_intersection.pro", "", "PB_LINES_INTERSECTION", "", "UAUBPARALLELCOINCIDENTONSEGMENTANGLEDOUBLEAABB", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/pca.html", "pca.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "pca.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/pca.html#PCA", "PCA", 'routine in <a href="idlastro/pca.html">pca.pro</a>', "pca.pro", "", "PCA", " NAME:     PCA   PURPOSE:     Carry out a Principal Components Analysis (Karhunen-Loeve Transform)  EXPLANATION:     Results can be directed to the screen, a file, or output variables     See notes below for comparison with the intrinsic IDL function PCOMP.   CALLING SEQUENCE:     PCA, data, eigenval, eigenvect, percentages, proj_obj, proj_atr,              [MATRIX =, TEXTOUT = ,/COVARIANCE, /SSQ, /SILENT ]   INPUT PARAMETERS:      data -  2-d data matrix, data(i,j) contains the jth attribute value                for the ith object in the sample.    If N_OBJ is the total                number of objects (rows) in the sample, and N_ATTRIB is the                total number of attributes (columns) then data should be                dimensioned N_OBJ x N_ATTRIB.   OPTIONAL INPUT KEYWORD PARAMETERS:      /COVARIANCE - if this keyword is set, then the PCA will be carried out               on the covariance matrix (rare), the default is to use the               correlation matrix      /SILENT - If this keyword is set, then no output is printed      /SSQ - if this keyword is set, then the PCA will be carried out on                on the sums-of-squares & cross-products matrix (rare)      TEXTOUT - Controls print output device, defaults to !TEXTOUT                textout=1       TERMINAL using /more option               textout=2       TERMINAL without /more option               textout=3       &lt;program&gt;.prt               textout=4       laser.tmp               textout=5      user must open file               textout = filename (default extension of .prt)   OPTIONAL OUTPUT PARAMETERS:      eigenval -  N_ATTRIB element vector containing the sorted eigenvalues      eigenvect - N_ATRRIB x N_ATTRIB matrix containing the corresponding                eigenvectors      percentages - N_ATTRIB element containing the cumulative percentage              variances associated with the principal components      proj_obj - N_OBJ by N_ATTRIB matrix containing the projections of the              objects on the principal components      proj_atr - N_ATTRIB by N_ATTRIB matrix containing the projections of                the attributes on the principal components   OPTIONAL OUTPUT PARAMETER       MATRIX   = analysed matrix, either the covariance matrix if /COVARIANCE               is set, the  sum of squares and cross-products  matrix if               /SSQ is set, or the (by default) correlation matrix.    Matrix               will have dimensions N_ATTRIB x N_ATTRIB   NOTES:       This procedure performs Principal Components Analysis (Karhunen-Loeve       Transform) according to the method described in  Multivariate Data       Analysis  by Murtagh & Heck [Reidel : Dordrecht 1987], pp. 33-48.       See  http://astro.u-strasbg.fr/~fmurtagh/mda-sw/        Keywords /COVARIANCE and /SSQ are mutually exclusive.        The printout contains only (at most) the first seven principle       eigenvectors.    However, the output variables EIGENVECT contain       all the eigenvectors        Different authors scale the covariance matrix in different ways.       The eigenvalues output by PCA may have to be scaled by 1/N_OBJ or       1/(N_OBJ-1) to agree with other calculations when /COVAR is set.        PCA uses the non-standard system variables !TEXTOUT and !TEXTUNIT.       These can be added to one's session using the procedure ASTROLIB.        The intrinsic IDL function PCOMP  duplicates most       most of the functionality of PCA, but uses different conventions and       normalizations.   Note the following:     (1) PCOMP requires a N_ATTRIB x N_OBJ input array; this is the transpose          of what PCA expects    (2) PCA uses standardized variables for the correlation matrix:  the input         vectors are set to a  mean of zero and variance of one and divided by         sqrt(n); use the /STANDARDIZE keyword to PCOMP for a direct comparison.    (3) PCA (unlike PCOMP) normalizes the eigenvectors by the square root          of the eigenvalues.    (4) PCA returns cumulative percentages; the VARIANCES keyword of PCOMP          returns the variance in each variable    (5) PCOMP divides the eigenvalues by (1/N_OBJ-1) when the covariance matrix           is used.   EXAMPLE:       Perform a PCA analysis on the covariance matrix of a data matrix, DATA,       and write the results to a file        IDL&gt; PCA, data, /COVAR, t = 'pca.dat'        Perform a PCA analysis on the correlation matrix.   Suppress all       printing, and save the eigenvectors and eigenvalues in output variables        IDL&gt; PCA, data, eigenval, eigenvect, /SILENT   PROCEDURES CALLED:       TEXTOPEN, TEXTCLOSE   REVISION HISTORY:       Immanuel Freedman (after Murtagh F. and Heck A.).     December 1993       Wayne Landsman, modified I/O              December 1993       Fix MATRIX output, remove GOTO statements   W. Landsman August 1998       Changed some index variable to type LONG    W. Landsman March 2000       Fix error in computation of proj_atr, see Jan 1990 fix in        http://astro.u-strasbg.fr/~fmurtagh/mda-sw/pca.f   W. Landsman Feb 2008  ", "MATRIXTEXTOUTCOVARIANCESSQSILENTdataeigenvaleigenvectpercentagesproj_objproj_atr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/pent.html", "pent.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "pent.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/pent.html#pent", "pent", 'routine in <a href="idlastro/pent.html">pent.pro</a>', "pent.pro", "", "pent", " NAME:        PENT  PURPOSE:        Return the information entropy of a time series  EXPLANATION:        This function will return S, the information entropy of a time series        for a set of trial periods   CATEGORY:        Time series analysis, period finding, astronomical utilities.   CALLING SEQUENCE:        Result = PENT(P, T, X, [N, M ] )   INPUTS:        P - array of trial period values.        T - array of observation times (same units as P).        X - array of observations.   OPTIONAL INPUTS:        N   - If  four parameters are given then the 4th parameter is assumed                to be N. Then NxN boxes are used to calculate S.        M,N - If five parameters are given then parameter 4 is M and parameter                5 is N. S is then calculated using MxN boxes - M partitions for the                phase and N partitions for the data.   OUTPUTS:        This function returns S, the information entropy of the time series for        the periods given in P as defined by Cincotta, Me'ndez & Nu'n~ez        (Astrophysical Journal 449, 231-235, 1995). The minima of S occur at        values of P where X shows periodicity.   PROCEDURE:        The procedure involves dividing the phase space into N^2 partitions        (NxN boxes) and then calculating:                 __ N^2          S = - \        mu_i . ln(mu_i)  for all mu_i &lt;&gt; 0                /_                  i = 1         where  mu_i is the number of data points in partition i normalised by        the number of partitions.         The option of using MxN boxes is an additional feature of this routine.   EXAMPLE:         To generate a similar sythetic data set to Cincotta et al. we         do the following:         IDL&gt; P0 = 173.015                        ; Fundamental period        IDL&gt; T = randomu(seed,400)*15000         ; 400 random observation times        IDL&gt; A0 = 14.0                           ; Mean magnitude        IDL&gt; M0 = -0.5  * sin(2*!pi*T/P0)        ; Fundamental mode        IDL&gt; M1 = -0.15 * sin(4*!pi*T/P0)        ; 1st harmonic        IDL&gt; M2 = -0.05 * sin(6*!pi*T/P0)        ; 2nd harmonic        IDL&gt; sig = randomu(seed,400)*0.03        ; noise        IDL&gt; U = A0 + M0 + M1 + M2 + sig         ; Synthetic data        IDL&gt; Ptest = 100. + findgen(2000)/2.     ; Trial periods        IDL&gt; S = pent(Ptest,T,U)                 ; Calculate S                ... this takes a few seconds ...        IDL&gt; plot,Ptest,S,xtitle= P ,ytitle= S   ; plot S v. P        IDL&gt; print,Ptest(where(S eq min(S)))     ; Print best period (+/- 0.5)         The plot produced should be similar to Fig. 2 of Cincotta et al.   RESTRICTIONS:         My own (limited) experience with this routine suggests that it is not        as good as other techniques for finding  weak,  multi-periodic signals in        poorly sampled  data, but is good for establishing periods of eclipsing        binary stars when M is quite large (try MxN = 64x16, 128x16 or even        256x16).  This suggests it may be good for other periodic light curves        (Cepheids, RR Lyrae etc.).        I would be glad to receive reports of other peoples experience with        this technique (e-mail pflm@bro730.astro.ku.dk).   MODIFICATION HISTORY:        Written by:   Pierre Maxted, 14Sep95        Modifications:        Normalisation of S corrected, T-min(T) taken out of loop.                -  Pierre Maxted, 15Sep95        Converted to IDL V5.0   W. Landsman   September 1997  ", "ptxmn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/permute.html", "permute.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "permute.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/permute.html#PERMUTE", "PERMUTE", 'routine in <a href="idlastro/permute.html">permute.pro</a>', "permute.pro", "", "PERMUTE", " NAME: 	PERMUTE   PURPOSE: 	This function returns an array containing the numbers 	[0, ..., N-1] in random order.  They are useful as indices 	when permuting a dataset, for example in a balanced bootstrap 	Monte Carlo algorithm.   CATEGORY: 	Statistics.   CALLING SEQUENCE:  	Result = PERMUTE(N)   INPUTS: 	N:	The number of items to be permuted.   OPTIONAL INPUTS: 	SEED:	A random number seed, see RANDOMU.   OUTPUTS: 	This function returns an N-element array containing a random 	permutation of the integers from 0 through N-1.   SIDE EFFECTS: 	Unless Seed is specified, IDL's global random number 	seed is changed.   PROCEDURE: 	This is an in-place swapping algorithm.  It starts with an 	index array.  For each position in the array, it swaps the 	occupant of that position with the occupant of a random 	position from there (inclusive) to the end of the array.  The 	last iteration is not necessary to compute, since it swaps 	with itself.  	See http://www.techuser.net/randpermgen.html for a proof.  The 	2-line code there has been optimized for IDL's vector 	architecture.  This is a linear-time algorithm.   EXAMPLE:  Show some permutations of 6 numbers: 	print, permute(6) 	    0           2           1           3           4           5 	print, permute(6)            2           4           3           5           1           0 	print, permute(6) 	    0           4           3           1           2           5   Permute the array [2, 4, 6, 8] 	a = [2, 4, 6, 8] 	print, a[permute(4)]        4       8       6       2   Test randomness (results should be close to k):  m = 6l  k = 10000l  n = m * k  a = lonarr(m, n)  for i = 0l, n-1, 1 do a[*, i] = permute(m)  for i = 0l, m-1, 1 do print, histogram(a[i, *])          9885       10062       10051        9915       10028       10059         10096       10087       10094        9913        9933        9877         10041       10013        9968        9958        9911       10109          9880        9858       10166       10049       10081        9966         10093        9915        9800       10166        9969       10057         10005       10065        9921        9999       10078        9932   Time the algorithm:  maxn = 7  t = dblarr(maxn)  n = 10L^(indgen(maxn)+1)  for i = 0, maxn-1, 1 do begin &$    t1 = systime(/s) &$    print, n[i] &$    a = permute(n[i]) &$    t2 = systime(/s) &$    t[i] = t2-t1 &$  endfor  print, '        Elements         Seconds   Elements Per Second'  print, transpose([[n], [t], [t/n]])           Elements         Seconds   Elements Per Second         10.000000   0.00012397766   1.2397766e-05         100.00000   0.00015020370   1.5020370e-06         1000.0000    0.0011651516   1.1651516e-06         10000.000     0.018178225   1.8178225e-06         100000.00      0.13504505   1.3504505e-06         1000000.0       1.3817160   1.3817160e-06         10000000.       14.609985   1.4609985e-06   These times are for a 2.071 GHz AMD Athlon 2800+ CPU.   MODIFICATION HISTORY:  	Written by:	Joseph Harrington, Cornell.  2006-03-22 			jh@alum.mit.edu  ", "NSeed", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/public/pg_plotimage.html", "pg_plotimage.pro", '.pro file in <a href="coyote/public/dir-overview.html">coyote/public/ directory</a>', "pg_plotimage.pro", "", "", " NAME:     pg_plotimage   PURPOSE:    Plots an image with coordinates pretty much the same way one would use the   plot command   CATEGORY:   image display utils   CALLING SEQUENCE:   pg_plotimage,im,x,y [,optional inputs see below]   INPUTS:   im: an n-by-m array   x: an n-element array (if not given, [1,2,...,n] is used)   y: an m-element array (if not given, [1,2,...,m] is used)   OPTIONAL INPUTS:   addcmd: set to add this command to a currently open resizeable cgWindow  axiscolor: set to the name of the axis color  background: set to the name of the background color  fulledges: set this keyword to have fully sized pixels at the edge of the  images. It will still look funny in log-scale however.  psresolution: ps resolution in dpi (default 150)  no_rescale: use tv instead than tvscl to plot the image  title: the plot main title  position: plot position  window: set to use the resizeable graphics window cgWindow to display this command  all the graphical optional ketwords starting with x- and y-   OUTPUTS:   NONE   COMMON BLOCKS:   NONE   SIDE EFFECTS:   a plot is generated to the current graphics device   RESTRICTIONS:   only tested on X and PS devices, should work with WIN, not sure about Z-buffer though   PROCEDURE:   Every pixel of the final image (to be plotted) is generated by interpolating  the original dataset at the coordinates of the pixel to be displayed.   EXAMPLE:    loadct,5   im=dist(128,128)   x=findgen(128)   y=findgen(128)   pg_plotimage,im,x,y,xrange=[5,100],yrange=[5,100],/xstyle,/ystyle,/xlog   AUTHOR:  Paolo Grigis, SAO, pgrigis@cfa.harvard.edu   MODIFICATION HISTORY:   25-FEB-2008 written PG  26-FEB-2008 made x and y optional PG  31-MAR-2008 added /isotropic PG  02-APR-2008 fixed bug of /isotropic PG  16-JAN-2008 added /fulledges option to have full              sized edge pixels as requested by Brian Larsen on the IDL newsgroup              (it's actually a good idea, but didn't make it the default to              avoid breaking backwards compatibility) PG  18-MAY-2011 turned into a Coyote Graphic command DWF   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/public/pg_plotimage.html#pg_plotimage", "pg_plotimage", 'routine in <a href="coyote/public/pg_plotimage.html">pg_plotimage.pro</a>', "pg_plotimage.pro", "", "pg_plotimage", "", "isotropicfulledges_extraxrangeyrangepositiontitlexstyleystylesmoothxlogylogno_rescalepsresolutionxcharsizexgridstylexminorxthickxtick_getxtickformatxtickintervalxticklayoutxticklenxticknamexticksxtickunitsxtickvxtitleycharsizeygridstyleyminorythickytick_getytickformatytickintervalyticklayoutyticklenyticknameyticksytickunitsytickvytitlenoeraseaxiscolorbackgroundlayoutwindowaddcmdimxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/pickcolor.html", "pickcolor.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "pickcolor.pro", "", "", " NAME:        PICKCOLOR   PURPOSE:         A modal dialog widget allowing the user to select        the RGB color triple specifying a color. The return        value of the function is the color triple specifying the        color or the  name  of the color if the NAME keyword is set.   AUTHOR:        FANNING SOFTWARE CONSULTING:        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: davidf@dfanning.com        Coyote's Guide to IDL Programming: http://www.dfanning.com   CATEGORY:         Graphics, Color Specification. See related program cgCOLOR.   CALLING SEQUENCE:         color = PickColor(colorindex)   RETURN VALUE:         The return value of the function is a 1-by-3 array containing        the values of the color triple that specifies the selected color.        The color can be loaded, for example, in any color index:             color = PickColor(240)            TVLCT, color, 240         The return value is the original color triple if the user        selects the CANCEL button.         IF the NAMES keyword is set, the return value of the function is        the  name  of the selected color. This would be appropriate for        passing to the cgCOLOR program, for example.   OPTIONAL INPUT POSITIONAL PARAMETERS:         COLORINDEX: The color index of the color to be changed. If not               specified the color index !D.Table_Size - 2 is used.               The Current Color and the Color Sliders are set to the               values of the color at this color index.   OPTIONAL INPUT KEYWORD PARAMETERS:         GROUP_LEADER: The group leader for this widget program. This               keyword is required for MODAL operation. If not supplied               the program is a BLOCKING widget. Be adviced, however, that               the program will NOT work if called from a blocking widget               program, unless a GROUP_LEADER is supplied.         NAMES: Set this keyword to return the  name  of the selected color               rather than its color triple.         STARTINDEX: 88 pre-determined colors are loaded The STARTINDEX               is the index in the color table where these 88 colors will               be loaded. By default, it is !D.Table_Size - 89.         TITLE: The title on the program's top-level base. By default the               title is  Pick a Color .   OPTIONAL INPUT KEYWORD PARAMETERS:         CANCEL: A keyword that is set to 1 if the CANCEL button is selected               and to 0 otherwise.   COMMON BLOCKS:         None.   SIDE EFFECTS:         88 pre-determined colors are loaded in the color table.        In addition, the color index at COLORINDEX is modified while        the program is on the display. When the program exits, the        entry color table is restored. Thus, on 8-bit displays there        might be some color effects in graphics windows while PICKCOLOR        is on the display. Changes in the color table are not noticable        on 16-bit and 24-bit displays.   EXAMPLE:         To specify a color for a plot in color decomposition OFF mode:            Device, Decomposed=0           !P.Color = !P.Color &lt; (!D.Table_Size - 1)           color = PickColor(!P.Color, Cancel=cancelled)           IF NOT cancelled THEN BEGIN               TVLCT, color, !P.Color               Plot, data           ENDIF         To specify a color for a plot in color decomposition ON mode:            Device, Decomposed=1           color = PickColor(Cancel=cancelled)           !P.Color = Color24(color)           IF NOT cancelled THEN Plot, data          To obtain the name of the selected color to pass to GetColor:            selectedColor = PickColor(/Name)           axisColor = cgColor(selectedColor, !D.Table_Size-4)   MODIFICATION HISTORY:        Written by: David Fanning, 28 Oct 99.        Added NAME keyword. 18 March 2000, DWF.        Fixed a small bug when choosing a colorindex less than !D.Table_Size-17. 20 April 2000. DWF.        Added actual color names to label when NAMES keyword selected. 12 May 2000. DWF.        Modified to use 88 colors and cgCOLOR instead of 16 colors and GETCOLOR. 4 Dec 2000. DWF.        Changed FSC_Color to cgColor everywhere. 16 Jan 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/pickcolor.html#PickColor_CenterTLB", "PickColor_CenterTLB", 'routine in <a href="coyote/pickcolor.html">pickcolor.pro</a>', "pickcolor.pro", "", "PickColor_CenterTLB", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/pickcolor.html#PickColor_Select_Color", "PickColor_Select_Color", 'routine in <a href="coyote/pickcolor.html">pickcolor.pro</a>', "pickcolor.pro", "", "PickColor_Select_Color", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/pickcolor.html#PickColor_Sliders", "PickColor_Sliders", 'routine in <a href="coyote/pickcolor.html">pickcolor.pro</a>', "pickcolor.pro", "", "PickColor_Sliders", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/pickcolor.html#PickColor_Buttons", "PickColor_Buttons", 'routine in <a href="coyote/pickcolor.html">pickcolor.pro</a>', "pickcolor.pro", "", "PickColor_Buttons", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/pickcolor.html#PickColor", "PickColor", 'routine in <a href="coyote/pickcolor.html">pickcolor.pro</a>', "pickcolor.pro", "", "PickColor", "", "StartIndexTitleGroup_LeaderCancelNamescurrentColorIndex", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/pickcolorname.html", "pickcolorname.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "pickcolorname.pro", "", "", " NAME:        PICKCOLORNAME   PURPOSE:         The purpose of this program is to provide a blocking        or modal widget interface for selecting a color  name .        The program uses colors familiar to the cgColor program,        and is often used to select a color name for passing to cgColor.   AUTHOR:         FANNING SOFTWARE CONSULTING:        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Graphics, Color Specification.   CALLING SEQUENCE:         colorName = PickColorName(startColorName)   OPTIONAL INPUT PARAMETERS:         startColorName: A string with the  name  of the color. Colors available are these:              Almond     Antique White        Aquamarine             Beige            Bisque             Black               Blue       Blue Violet             Brown         Burlywood        Cadet Blue          Charcoal         Chartreuse         Chocolate             Coral   Cornflower Blue          Cornsilk           Crimson               Cyan    Dark Goldenrod         Dark Gray        Dark Green        Dark Khaki       Dark Orchid           Dark Red       Dark Salmon   Dark Slate Blue         Deep Pink       Dodger Blue         Firebrick       Forest Green              Gold         Goldenrod              Gray             Green      Green Yellow           Honeydew          Hot Pink        Indian Red             Ivory             Khaki          Lavender         Lawn Green       Light Coral        Light Cyan        Light Gray      Light Salmon   Light Sea Green       Light Yellow        Lime Green             Linen           Magenta            Maroon       Medium Gray      Medium Orchid          Moccasin              Navy             Olive        Olive Drab            Orange         Orange Red            Orchid    Pale Goldenrod        Pale Green            Papaya              Peru               Pink              Plum       Powder Blue            Purple               Red              Rose         Rosy Brown        Royal Blue      Saddle Brown            Salmon       Sandy Brown         Sea Green           Seashell            Sienna          Sky Blue        Slate Blue        Slate Gray              Snow       Spring Green        Steel Blue               Tan              Teal           Thistle            Tomato          Turquoise            Violet        Violet Red             Wheat             White            Yellow         The color WHITE is used if this parameter is absent.     If the BREWER keyword is set, you can use the Brewer Color names:         WT1       WT2       WT3       WT4       WT5       WT6       WT7       WT8       TAN1      TAN2      TAN3      TAN4      TAN5      TAN6      TAN7      TAN8       BLK1      BLK2      BLK3      BLK4      BLK5      BLK6      BLK7      BLK8       GRN1      GRN2      GRN3      GRN4      GRN5      GRN6      GRN7      GRN8       BLU1      BLU2      BLU3      BLU4      BLU5      BLU6      BLU7      BLU8       ORG1      ORG2      ORG3      ORG4      ORG5      ORG6      ORG7      ORG8       RED1      RED2      RED3      RED4      RED5      RED6      RED7      RED8       PUR1      PUR2      PUR3      PUR4      PUR5      PUR6      PUR7      PUR8       PBG1      PBG2      PBG3      PBG4      PBG5      PBG6      PBG7      PBG8       YGB1      YGB2      YGB3      YGB4      YGB5      YGB6      YGB7      YGB8       RYB1      RYB2      RYB3      RYB4      RYB5      RYB6      RYB7      RYB8        TG1       TG2       TG3       TG4       TG5       TG6       TG7       TG8     As of 3 JULY 2008, the BREWER names are always available. If the BREWER keyword is set, only    the BREWER names are available.   INPUT KEYWORD PARAMETERS:         BOTTOM: The colors used in the program must be loaded somewhere            in the color table. This keyword indicates where the colors            start loading. By default BOTTOM is set equal to !D.Table_Size-NCOLORS-1.         BREWER: Set this keyword if you wish to use the Brewer Colors, as defined               in this reference:                http://www.personal.psu.edu/cab38/ColorBrewer/ColorBrewer_intro.html         COLUMNS: Set this keyword to the number of columns the colors should            be arranged in.         FILENAME: The string name of an ASCII file that can be opened to read in            color values and color names. There should be one color per row            in the file. Please be sure there are no blank lines in the file.            The format of each row should be:                redValue  greenValue  blueValue  colorName             Color values should be between 0 and 255. Any kind of white-space            separation (blank characters, commas, or tabs) are allowed. The color            name should be a string, but it should NOT be in quotes. A typical            entry into the file would look like this:                 255   255   0   Yellow         GROUP_LEADER: This identifies a group leader if the program is called            from within a widget program. Note that this keyword MUST be provided            if you want to guarantee modal widget functionality. (If you don't know            what this means, believe me, you WANT to use this keyword, always.)         INDEX: This keyword identifies a color table index where the selected color            is to be loaded when the program exits. The default behavior is to restore            the input color table and NOT load a color.         TITLE: This keyword accepts a string value for the window title. The default            is  Select a Color .   OUTPUT KEYWORD PARAMETERS:         CANCEL: On exit, this keyword value is set to 0 if the user selected            the ACCEPT button. IF the user selected the CANCEL button, or            closed the window in any other way, this keyword value is set to 1.  COMMON BLOCKS:         None.   SIDE EFFECTS:         Colors are loaded in the current color table. The input color table        is restored when the program exits. This will only be noticable on        8-bit displays. The startColorName is returned if the user cancels        or destroys the widget before a selection is made. Users should        check the CANCEL flag before using the returned color.   EXAMPLE:         To call the program from the IDL comamnd line:           IDL&gt; color = PickColorName( red ) & Print, color         To call the program from within a widget program:           color = PickColorName( red , Group_Leader=event.top) & Print, color   MODIFICATION HISTORY:         Written by: David W. Fanning, 31 August 2000.        Modified program to read colors from a file and to use more          colors on 24-bit platforms. 16 October 2000. DWF.        Added the COLUMNS keyword. 16 October 2000. DWF.        Fixed a small problem with mapping a modal widget. 2 Jan 2001. DWF        Now drawing small box around each color. 13 March 2003. DWF.        Added eight new colors. Total now of 104 colors. 11 August 2005. DWF.        Modified GUI to display system colors. 13 Dec 2005. DWF.        Added BREWER keyword to allow Brewer Colors. 15 May 2008. DWF.        Added all BREWER names to the default naming scheme. 3 July 2008. DWF.        Set a size for the color name label widget. Otherwise, the widget always           jumps back to the center of the display when I select a color on UNIX           machines. Also had to remove TLB updating with UPDATE keyword to avoid           tickling the same IDL bug. Sigh... 13 March (Friday) 2009.        Removed system color names, since these are no longer available in cgColor.           27 Nov 2010. DWF  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/pickcolorname.html#PickColorName_CenterTLB", "PickColorName_CenterTLB", 'routine in <a href="idlastro/coyote/pickcolorname.html">pickcolorname.pro</a>', "pickcolorname.pro", "", "PickColorName_CenterTLB", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/pickcolorname.html#PickColorName_RGB_to_24Bit", "PickColorName_RGB_to_24Bit", 'routine in <a href="idlastro/coyote/pickcolorname.html">pickcolorname.pro</a>', "pickcolorname.pro", "", "PickColorName_RGB_to_24Bit", "", "number", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/pickcolorname.html#PickColorName_Count_Rows", "PickColorName_Count_Rows", 'routine in <a href="idlastro/coyote/pickcolorname.html">pickcolorname.pro</a>', "pickcolorname.pro", "", "PickColorName_Count_Rows", "", "MaxRowsfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/pickcolorname.html#PickColorName_Select_Color", "PickColorName_Select_Color", 'routine in <a href="idlastro/coyote/pickcolorname.html">pickcolorname.pro</a>', "pickcolorname.pro", "", "PickColorName_Select_Color", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/pickcolorname.html#PickColorName_Buttons", "PickColorName_Buttons", 'routine in <a href="idlastro/coyote/pickcolorname.html">pickcolorname.pro</a>', "pickcolorname.pro", "", "PickColorName_Buttons", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/pickcolorname.html#PickColorName", "PickColorName", 'routine in <a href="idlastro/coyote/pickcolorname.html">pickcolorname.pro</a>', "pickcolorname.pro", "", "PickColorName", "", "BrewerBottomCancelColumnsFilenameGroup_LeaderIndexTitletheName", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/picksun.html", "picksun.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "picksun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/picksun.html#picksun", "picksun", 'routine in <a href="code_snapshots/orig_version/picksun.html">picksun.pro</a>', "picksun.pro", "", "picksun", "       Decides which suns to ignore. Creates a mask with the bottom corners cut off and then creates a bordermask of the remaining area. Any center positions of suns within this bordermask are deemed partial.   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/picksun.html", "picksun.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "picksun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/picksun.html#picksun", "picksun", 'routine in <a href="code_snapshots/albert_version/picksun.html">picksun.pro</a>', "picksun.pro", "", "picksun", "       Decides which suns to ignore. Creates a mask with the bottom corners cut off and then creates a bordermask of the remaining area. Any center positions of suns within this bordermask are deemed partial.   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/picksun.html", "picksun.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "picksun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/picksun.html#picksun", "picksun", 'routine in <a href="code_snapshots/test_version/picksun.html">picksun.pro</a>', "picksun.pro", "", "picksun", "       Decides which suns to ignore. Creates a mask with the bottom corners cut off and then creates a bordermask of the remaining area. Any center positions of suns within this bordermask are deemed partial.   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/picksun.html", "picksun.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "picksun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/picksun.html#picksun", "picksun", 'routine in <a href="code_snapshots/aug22_notworking/picksun.html">picksun.pro</a>', "picksun.pro", "", "picksun", "       Decides which suns to ignore. Looks along the border pixels of the image and if 6 consecutive pixels are seen, it finds the closest sun (which will be a partial sun) and marks it as no good   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/picksun.html", "picksun.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "picksun.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/picksun.html#picksun", "picksun", 'routine in <a href="code_snapshots/jul25/picksun.html">picksun.pro</a>', "picksun.pro", "", "picksun", "       Decides which suns to ignore. Creates a mask with the bottom corners cut off and then creates a bordermask of the remaining area. Any center positions of suns within this bordermask are deemed partial.   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/picksun_rot.html", "picksun_rot.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "picksun_rot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/picksun_rot.html#picksun_rot", "picksun_rot", 'routine in <a href="code_snapshots/albert_version/picksun_rot.html">picksun_rot.pro</a>', "picksun_rot.pro", "", "picksun_rot", "       Decides which suns to ignore. Checks if the center coordinates of the sun are within certain boundaries. To deal with the bottom corners, coordinates are rotated 45 degrees.   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/picksun_rot.html", "picksun_rot.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "picksun_rot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/picksun_rot.html#picksun_rot", "picksun_rot", 'routine in <a href="sep20/picksun_rot.html">picksun_rot.pro</a>', "picksun_rot.pro", "", "picksun_rot", "       Decides which suns to ignore. Checks if the center coordinates of the sun are within certain boundaries. To deal with the bottom corners, coordinates are rotated 45 degrees.   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "       Correct border checking distance in rotated space  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/picksun_rot.html", "picksun_rot.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "picksun_rot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/picksun_rot.html#picksun_rot", "picksun_rot", 'routine in <a href="code_snapshots/test_version/picksun_rot.html">picksun_rot.pro</a>', "picksun_rot.pro", "", "picksun_rot", "       Decides which suns to ignore. Checks if the center coordinates of the sun are within certain boundaries. To deal with the bottom corners, coordinates are rotated 45 degrees.   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/picksun_rot.html", "picksun_rot.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "picksun_rot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/picksun_rot.html#picksun_rot", "picksun_rot", 'routine in <a href="code_snapshots/sep11/picksun_rot.html">picksun_rot.pro</a>', "picksun_rot.pro", "", "picksun_rot", "       Decides which suns to ignore. Checks if the center coordinates of the sun are within certain boundaries. To deal with the bottom corners, coordinates are rotated 45 degrees.   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "       Correct border checking distance in rotated space  ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/picksun_rot.html", "picksun_rot.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "picksun_rot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/picksun_rot.html#picksun_rot", "picksun_rot", 'routine in <a href="code_snapshots/jul25/picksun_rot.html">picksun_rot.pro</a>', "picksun_rot.pro", "", "picksun_rot", "       Decides which suns to ignore. Checks if the center coordinates of the sun are within certain boundaries. To deal with the bottom corners, coordinates are rotated 45 degrees.   ", "inputimage           The raw input image   inputstruct           Structure containing all the solar information   ", "          -1", "       Correct border checking distance in rotated space  ");
  
  

libdata[libdataItem++] = new Array("idlastro/pixcolor.html", "pixcolor.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "pixcolor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/pixcolor.html#pixcolor", "pixcolor", 'routine in <a href="idlastro/pixcolor.html">pixcolor.pro</a>', "pixcolor.pro", "", "pixcolor", " NAME: 	PIXCOLOR  PURPOSE: 	Assign colors to specified pixel values in a color lookup table  EXPLANATION:        Colors can be specified either from the list in cgcolor        (http://www.idlcoyote.com/programs/cgcolor.pro ) or as 1 letter        abbreviations for 8 common colors.   CALLING SEQUENCE:       	PIXCOLOR, pixvalue, color         ;Set color at specified pixel values   INPUT PARMETERS: 	pixvalue - value or range of pixel values whose color will be modified. 		A single pixel value may be specified by an integer 		If a range of values is specified, then it must be written 		as a string, with a colon denoting the range (e.g.'102:123') 		If omitted, program will prompt for this parameter.    OPTIONAL INPUT PARAMETER 	color - scalar string specifying either a full color name available in                CGCOLOR, or a  single character string giving one of the                specified colors: 'R' (red), 'B' (blue), 'G' (green) 		'Y' (yellow), 'T' (turquoise), 'V' (violet), 'W' (white) 		or 'D' (dark).  If omitted, program will prompt for this 		parameter.   OUTPUTS: 	None  PROCEDURE: 	TVLCT is used in RGB mode to load the specified pixel values.   EXAMPLE: 	Set pixel values of 245 to a color of red  	IDL&gt; pixcolor,245,'R'         Set pixel values 120 to 150 to Magenta         IDL&gt; pixcolor,'120:150','Magenta'  REVISION HISTORY: 	Written, W. Landsman ST Systems Corp.		February, 1987 	Converted to IDL V5.0   W. Landsman   September 1997        Allow specification of cgcolor names   April 2011  ", "pix_valuecolor", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/pixwt.html", "pixwt.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "pixwt.pro", "", "", " NAME: 	PIXWT  PURPOSE: 	Circle-rectangle overlap area computation.  DESCRIPTION: 	Compute the fraction of a unit pixel that is interior to a circle. 	The circle has a radius r and is centered at (xc, yc).  The center of 	the unit pixel (length of sides = 1) is at (x, y).   CATEGORY: 	CCD data processing  CALLING SEQUENCE: 	area = Pixwt( xc, yc, r, x, y )  INPUTS: 	xc, yc : Center of the circle, numeric scalars 	r      : Radius of the circle, numeric scalars 	x, y   : Center of the unit pixel, numeric scalar or vector  OPTIONAL INPUT PARAMETERS: 	None.  KEYWORD PARAMETERS: 	None.  OUTPUTS: 	Function value: Computed overlap area.  EXAMPLE:        What is the area of overlap of a circle with radius 3.44 units centered        on the point 3.23, 4.22 with the pixel centered at [5,7]         IDL&gt; print,pixwt(3.23,4.22,3.44,5,7)  ==&gt;  0.6502  COMMON BLOCKS:     None.  PROCEDURE: 	Divides the circle and rectangle into a series of sectors and 	triangles.  Determines which of nine possible cases for the 	overlap applies and sums the areas of the corresponding sectors 	and triangles.    Called by aper.pro   NOTES:       If improved speed is needed then a C version of this routines, with       notes on how to linkimage it to IDL is available at        ftp://ftp.lowell.edu/pub/buie/idl/custom/   MODIFICATION HISTORY:      Ported by Doug Loucks, Lowell Observatory, 1992 Sep, from the     routine pixwt.c, by Marc Buie.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/pixwt.html#Arc", "Arc", 'routine in <a href="idlastro/pixwt.html">pixwt.pro</a>', "pixwt.pro", "", "Arc", "", "xy0y1r", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/pixwt.html#Chord", "Chord", 'routine in <a href="idlastro/pixwt.html">pixwt.pro</a>', "pixwt.pro", "", "Chord", "", "xy0y1", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/pixwt.html#Oneside", "Oneside", 'routine in <a href="idlastro/pixwt.html">pixwt.pro</a>', "pixwt.pro", "", "Oneside", "", "xy0y1r", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/pixwt.html#Intarea", "Intarea", 'routine in <a href="idlastro/pixwt.html">pixwt.pro</a>', "pixwt.pro", "", "Intarea", "", "xcycrx0x1y0y1", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/pixwt.html#Pixwt", "Pixwt", 'routine in <a href="idlastro/pixwt.html">pixwt.pro</a>', "pixwt.pro", "", "Pixwt", "", "xcycrxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/pkfit.html", "pkfit.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "pkfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/pkfit.html#pkfit", "pkfit", 'routine in <a href="idlastro/pkfit.html">pkfit.pro</a>', "pkfit.pro", "", "pkfit", " NAME: 	PKFIT  PURPOSE: 	Subroutine of  GETPSF to perform a one-star least-squares fit  EXPLANATION: 	Part of the DAOPHOT PSF photometry sequence   CALLING SEQUENCE: 	PKFIT, f, scale, x, y, sky, radius, ronois, phpadu, gauss, psf, 				errmag, chi, sharp, Niter, /DEBUG  INPUTS: 	F      - NX by NY array containing actual picture data. 	X, Y   - the initial estimates of the centroid of the star relative 		to the corner (0,0) of the subarray.  Upon return, the 		final computed values of X and Y will be passed back to the 		calling routine. 	SKY  -   the local sky brightness value, as obtained from APER 	RADIUS-  the fitting radius-- only pixels within RADIUS of the 		instantaneous estimate of the star's centroid will be 		included in the fit, scalar 	RONOIS - readout noise per pixel, scalar 	PHPADU - photons per analog digital unit, scalar 	GAUSS -  vector containing the values of the five parameters defining 		the analytic Gaussian which approximates the core of the PSF. 	PSF   -  an NPSF by NPSF look-up table containing corrections from 		the Gaussian approximation of the PSF to the true PSF.   INPUT-OUTPUT: 	SCALE  - the initial estimate of the brightness of the star, 		expressed as a fraction of the brightness of the PSF. 		Upon return, the final computed value of SCALE will be 		passed back to the calling routine.  OUTPUTS: 	ERRMAG - the estimated standard error of the value of SCALE 		returned by this routine. 	CHI    - the estimated goodness-of-fit statistic:  the ratio 		of the observed pixel-to-pixel mean absolute deviation from 		the profile fit, to the value expected on the basis of the 		noise as determined from Poisson statistics and the 		readout noise. 	SHARP  - a goodness-of-fit statistic describing how much broader 		the actual profile of the object appears than the 		profile of the PSF. 	NITER -  the number of iterations the solution required to achieve 		convergence.  If NITER = 25, the solution did not converge. 		If for some reason a singular matrix occurs during the least- 		squares solution, this will be flagged by setting NITER = -1.   RESTRICTIONS: 	No parameter checking is performed  REVISON HISTORY: 	Adapted from the official DAO version of 1985 January 25 	Version 2.0 W. Landsman STX             November 1988 	Converted to IDL V5.0   W. Landsman   September 1997  ", "DEBUGfscalexyskyradiusronoisphpadugausspsferrmagchisharpniter", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/planck.html", "planck.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "planck.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/planck.html#planck", "planck", 'routine in <a href="idlastro/planck.html">planck.pro</a>', "planck.pro", "", "planck", " NAME:        PLANCK()  PURPOSE:        To calculate the Planck function in units of ergs/cm2/s/A   CALLING SEQUENCE:        bbflux = PLANCK( wave, temp)   INPUT PARAMETERS:        WAVE   Scalar or vector giving the wavelength(s) in **Angstroms**                at which the Planck function is to be evaluated.        TEMP   Scalar giving the temperature of the planck function in degree K   OUTPUT PARAMETERS:        BBFLUX - Scalar or vector giving the blackbody flux (i.e. !pi*Intensity)                in erg/cm^2/s/A in at the specified wavelength points.   EXAMPLES:        To calculate the blackbody flux at 30,000 K every 100 Angstroms between        2000A and 2900 A         IDL&gt; wave = 2000 + findgen(10)*100        IDL&gt; bbflux = planck(wave,30000)         If a star with a blackbody spectrum has a radius R, and distance,d, then        the flux at Earth in erg/cm^2/s/A will be bbflux*R^2/d^2  PROCEDURE:        The wavelength data are converted to cm, and the Planck function        is calculated for each wavelength point. See Allen (1973), Astrophysical        Quantities, section 44 for more information.   NOTES:        See the procedure planck_radiance.pro in        ftp://origin.ssec.wisc.edu/pub/paulv/idl/Radiance/planck_radiance.pro        for computation of Planck radiance given wavenumber in cm-1 or        wavelength in microns  MODIFICATION HISTORY:        Adapted from the IUE RDAF               August, 1989        Converted to IDL V5.0   W. Landsman   September 1997        Improve precision of constants    W. Landsman  January 2002  ", "wavetemp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/planet_coords.html", "planet_coords.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "planet_coords.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/planet_coords.html#planet_coords", "planet_coords", 'routine in <a href="idlastro/planet_coords.html">planet_coords.pro</a>', "planet_coords.pro", "", "planet_coords", " NAME:     PLANET_COORDS  PURPOSE:     Find low or high precision RA and DEC for the planets given a date   EXPLANATION:     For low precision this routine uses HELIO to get the heliocentric ecliptic     coordinates of the planets at the given date, then converts these to     geocentric ecliptic coordinates ala  Astronomical Algorithms  by Jean     Meeus (1991, p 209). These are then converted to RA and Dec using EULER.     The accuracy between the years 1800 and 2050 is better than 1 arcminute     for  the terrestial planets, but reaches 10 arcminutes for Saturn.     Before 1850 or after 2050 the accuracy can get much worse.      For high precision use the /JPL option ito use the full JPL ephemeris.  CALLING SEQUENCE:     PLANET_COORDS, DATE, RA, DEC, [ PLANET = , /JD, /JPL]   INPUTS:        DATE - If /JD is not set, then date is a 3-6 element vector containing               year,month (1-12), day, and optionally hour, minute, & second.               If /JD is set then DATE is a Julian date.   An advantage of the               /JD option is that it allows the use of vector dates.  OUTPUTS:        RA - right ascension of planet(s), J2000 degrees, double precision        DEC - declination of   planet(s), J2000 degrees, double precision   OPTIONAL INPUT KEYWORD:        PLANET - scalar string giving name of a planet, e.g. 'venus'. Default                is to compute coords for all of them (except Earth).        /JD - If set, then the date parameter should be supplied as Julian date        JPL - if /JPL set, then PLANET_COORDS will call the procedure              JPLEPHINTERP to compute positions using the full JPL ephemeris.              The JPL ephemeris FITS file JPLEPH.405 must exist in either the              current directory, or in the directory specified by the              environment variable ASTRO_DATA.   Alternatively, the JPL keyword              can be set to the full path and name of the ephemeris file.              A copy of the JPL ephemeris FITS file JPLEPH.405 is available in                  http://idlastro.gsfc.nasa.gov/ftp/data/  EXAMPLES:     (1)  Find the RA, Dec of Venus on 1992 Dec 20           IDL&gt; planet_coords, [1992,12,20], ra,dec    ;Compute for all planets           IDL&gt; print,adstring(ra[1],dec[1],1)         ;Venus is second planet      ====&gt; RA = 21 05  2.66  Dec = -18 51 45.7     This position is 37  from the full DE406 ephemeris position of           RA = 21 05  5.24        -18 51 43.1      (2) Return the current RA and Dec of all 8 planets using JPL ephemeris           IDL&gt; get_juldate, jd                 ;Get current Julian Date           IDL&gt; planet_coords,jd,ra,dec,/jd,/jpl  ;Find positions of all planets           IDL&gt; forprint,adstring(ra,dec,0)     ;Display positions      (3) Plot the declination of Mars for every day in the year 2001           IDL&gt; jdcnv,2001,1,1,0,jd      ;Get Julian date of midnight on Jan 1                Now get Mars RA,Dec for 365 consecutive days           IDL&gt; planet_coords,jd+indgen(365),ra,dec,/jd, planet = 'mars'           IDL&gt; plot,indgen(365)+1,dec  NOTES:           HELIO is based on the two-body problem and neglects interactions            between the planets.   This is why the worst results are for            Saturn.   Use the /JPL option or the online ephemeris generator            http://ssd.jpl.nasa.gov/horizons.cgi for more accuracy.             The procedure returns astrometric coordinates, i.e. no correction            for aberration.   A correction for light travel time is applied            when /JPL is set, but not for the default low-precision calculation.  PROCEDURES USED:         JULDATE         EULER, HELIO  - if /JPL is not set         JPLEPHREAD, JPLEPHINTERP - if /JPL is set  REVISION HISTORY:         Written P.Plait & W. Landsman     August 2000         Fixed Julian date conversion   W. Landsman August 2000         Added /JPL keyword  W. Landsman   July 2001         Allow vector Julian dates with JPL ephemeris W. Landsman December 2002  ", "planetjdjpldateradec", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ploterror.html", "ploterror.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ploterror.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ploterror.html#ploterror", "ploterror", 'routine in <a href="idlastro/ploterror.html">ploterror.pro</a>', "ploterror.pro", "", "ploterror", " NAME:      PLOTERROR  PURPOSE:      Plot data points with accompanying X or Y error bars.  EXPLANATION:      This is a greatly enhanced version of the standard IDL Library routine      PLOTERR   CALLING SEQUENCE:      ploterror, [ x,]  y, [xerr], yerr [, TYPE=, /NOHAT, HATLENGTH= , NSUM =                   ERRTHICK=, ERRSTYLE=, ErrcolOR=, NSKIP=, .. PLOT keywords]   INPUTS:      X = array of abcissae.      Y = array of Y values.      XERR = array of error bar values (along X)      YERR = array of error bar values (along Y)   OPTIONAL INPUT KEYWORD PARAMETERS:      TYPE = type of plot produced.  The possible types are:               TYPE = 0 :       X Linear - Y Linear  (default)               TYPE = 1 :       X Linear - Y Log               TYPE = 2 :       X Log    - Y Linear               TYPE = 3 :       X Log    - Y Log               Actually, if 0 is specified, the XLOG and YLOG keywords               are used.  If these aren't specified, then a linear-linear               plot is produced.  This keyword is available to maintain               compatibility with the previous version of PLOTERROR.      /NOHAT     = if specified and non-zero, the error bars are drawn               without hats.      HATLENGTH = the length of the hat lines in device units used to cap the               error bars.   Defaults to !D.X_VSIZE / 100).      ERRTHICK  = the thickness of the error bar lines.  Defaults to the               THICK plotting keyword.      ERRSTYLE  = the line style to use when drawing the error bars.  Uses               the same codes as LINESTYLE.      ERRCOLOR =  String (e.g. 'red') or scalar integer (0 - !D.N_TABLE)               specifying the color to use for the error bars.   See CGCOLOR()               for a list of possible color names.  See               http://www.idlcoyote.com/cg_tips/legcolor.php               for a warning about the use of indexed color      NSKIP = Integer specifying the error bars to be plotted.   For example,               if NSKIP = 2 then every other error bar is plotted; if NSKIP=3               then every third error bar is plotted.   Default is to plot               every error bar (NSKIP = 1)      NSUM =  Number of points to average over before plotting, default=!P.NSUM              The errors are also averaged, and then divided by sqrt(NSUM).              This  approximation is meaningful only when the neighboring error              bars have similar sizes.    PLOTERROR does not pass the NSUM              keyword to the PLOT command, but rather computes the binning              itself using the  FREBIN function.      TRADITIONAL - If set to 0 then a black plot is drawn on a white background              in the graphcis window.   The default value is 1, giving the              traditional black background for a graphics window.      WINDOW - Set this keyword to plot to a resizeable graphics window       Any valid keywords to the cgPLOT command (e.g. PSYM, YRANGE, AXISCOLOR      SYMCOLOR, ASPECT) are also accepted by PLOTERROR via the _EXTRA facility.   RESTRICTIONS:        Arrays must not be of type string, and there must be at least 1 point.        If only three parameters are input, they will be taken as X, Y and        YERR respectively.         PLOTERROR cannot be used for asymmetric error bars.   Instead use        OPLOTERROR with the /LOBAR and /HIBAR keywords.         Any data points with NAN values in the X, Y, or error vectors are        ignored.  EXAMPLE:        Suppose one has X and Y vectors with associated errors XERR and YERR         (1) Plot Y vs. X with both X and Y errors and no lines connecting            the points                   IDL&gt; ploterror, x, y, xerr, yerr, psym=3         (2) Like (1) but plot only the Y errors bars and omits  hats                    IDL&gt; ploterror, x, y, yerr, psym=3, /NOHAT   WARNING:        This an enhanced version of the procedure PLOTERR in the standard IDL        distribution.    It was renamed from PLOTERR to PLOTERROR in June 1998        in the IDL Astronomy Library to avoid conflict with the RSI procedure.   PROCEDURE:        A plot of X versus Y with error bars drawn from Y - YERR to Y + YERR        and optionally from X - XERR to X + XERR is written to the output device   PROCEDURE CALLS:      cgPlot, cgPlots      FREBIN - used to compute binning if NSUM keyword is present  MODIFICATION HISTORY:      William Thompson        Applied Research Corporation  July, 1986      DMS, April, 1989        Modified for Unix      Michael R. Greason      ST Systems      May, 1991               Added most of the plotting keywords, put hats                                on the error bars.      K. Venkatakrishna       Added option to plot xerr, May, 1992      Michael R. Greason      Corrected handling of reversed axes.  Aug. 1992      W. Landsman             Use _EXTRA keyword                    July 1995      W. Landsman             Plot more than 32767 points           Feb 1996      W. Landsman     Fix Y scaling when only XRANGE supplied       Nov 1996      W. Landsman     Added NSKIP keyword                           Dec 1996      W. Landsman     Use XLOG, YLOG instead of XTYPE, YTYPE        Jan 1998      W. Landsman     Rename to PLOTERROR, OPLOTERROR               Jun 1998      W. Landsman  Better default scaling when NSKIP supplied       Oct 1998      W. Landsman  Ignore !P.PSYM when drawing error bars           Jan 1999      W. Landsman  Handle NSUM keyword correctly                    Aug 1999      W. Landsman  Fix case of /XLOG but no X error bars            Oct 1999      W. Landsman  Work in the presence of NAN values               Nov 2000      W. Landsman  Improve logic when NSUM or !P.NSUM is set        Jan 2001      W. Landsman  Only draw error bars with in XRANGE (for speed)  Jan 2002      W. Landsman  Fix Jan 2002 update to work with log plots       Jun 2002      W. Landsman  Added _STRICT_EXTRA                              Jul 2005      W. Landsman/D.Nidever Fixed case of logarithmic axes reversed Mar 2009      W. Landsman/S. Koch  Allow input to be a single point         Jan 2010      W. Landsman  Add Coyote Graphics                              Feb 2011      W. Landsman Make keyword name ERRCOLOR instead of ECOLOR                  Speedup when no ERRCOLOR defined                  Feb 2011      D. Fanning Use PLOTS instead of CGPLOTS for speed             Jan 2012  ", "NOHATHATLENGTHERRTHICKERRSTYLETYPEXRANGEXLOGYLOGNSKIPNOCLIPERRCOLORYRANGENSUMWINDOW_EXTRAxyxerryerr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/plothist.html", "plothist.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "plothist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/plothist.html#plothist", "plothist", 'routine in <a href="idlastro/plothist.html">plothist.pro</a>', "plothist.pro", "", "plothist", " NAME:       PLOTHIST  PURPOSE:       Plot the histogram of an array with the corresponding abcissa.   CALLING SEQUENCE:       plothist, arr, xhist, yhist, [, BIN=, /FILL, /NOPLOT, /OVERPLOT, PEAK=,                                      /AUTOBIN,  ...plotting keywords]  INPUTS:       arr - The array to plot the histogram of.   It can include negative             values, but non-integral values will be truncated.   OPTIONAL OUTPUTS:       xhist - X vector used in making the plot               ( = lindgen( N_elements(h)) * bin + min(arr) )       yhist - Y vector used in making the plot  (= histogram(arr/bin))   OPTIONAL INPUT KEYWORDS:       /AUTOBIN - Automatically determines bin size of the histogram as the                  square root of the number of samples. Only valid when BIN                  is not set.       AXISCOLOR - Color (string or number) of the plotting axes.       BIN -  The size of each bin of the histogram,  scalar (not necessarily              integral).  If not present (or zero), the bin size is set to 1.       /BOXPLOT - If set, then each histogram data value will be plotted               box style  with vertical lines drawn from Y=0 at each end of               the bin width       COLOR - Color (number or string) of the plotted data.    See CGCOLOR               for a list of available color names.       /HALFBIN - Set this keyword to a nonzero value to shift the binning by               half a bin size.     This is useful for integer data, where e.g.               the bin for values of 6 will go from 5.5 to 6.5.   The default               is to set the HALFBIN keyword for integer data, and not for               non-integer data.       /NAN - If set, then check for the occurence of IEEE not-a-number values       /NOPLOT - If set, will not plot the result.  Useful if intention is to              only get the xhist and yhist outputs.       /OVERPLOT - If set, will overplot the data on the current plot.  User             must take care that only keywords valid for OPLOT are used.       PEAK - if non-zero, then the entire histogram is normalized to have              a maximum value equal to the value in PEAK.  If PEAK is              negative, the histogram is inverted.       /FILL - if set, will plot a filled (rather than line) histogram.       /ROTATE - if set, the plot is rotated onto it's side, meaning the bars              extend from left to right.  Xaxis corresponds to the count within              in each bin.      Useful for placing a histogram plot              at the side of a scatter plot, as shown at the bottom of                http://www.dur.ac.uk/j.r.mullaney/pages/software.php        WINDOW - Set this keyword to plot to a resizeable graphics window   The following keywords take effect only if the FILL keyword is set:       FCOLOR - color (string or number) to use for filling the histogram       /FLINE - if set, will use lines rather than solid color for fill (see               the LINE_FILL keyword in the cgcolorfill routine)       FORIENTATION - angle of lines for fill (see the ORIENTATION keyword               in the cgcolorfill routine)       FPATTERN - the pattern to use for the fill (see the PATTERN keyword               in the cgcolorfill routine)       FSPACING - the spacing of the lines to use in the fill (see the SPACING               keyword in the cgcolorfill routine)       FTHICK - the thickness of the lines to use in the fill (see the THICK               keyword in the cgcolorfill routine)   Any input keyword that can be supplied to the cgPLOT procedure (e.g. XRANGE,     AXISCOLOR, LINESTYLE, /XLOG, /YLOG) can also be supplied to PLOTHIST.   EXAMPLE:        (1) Create a vector of random 1000 values derived from a Gaussian of        mean 0, and sigma of 1.    Plot the histogram of these values with a        binsize of 0.1, and use a box plotting style.         IDL&gt; a = randomn(seed,1000)        IDL&gt; plothist,a, bin = 0.1, /boxplot         (2) As before, but fill the plot with diagonal lines at a 45 degree            angle         IDL&gt; plothist,a, bin=0.1, /fill, /fline, forient=45   NOTES:        David Fanning has written a similar program HISTOPLOT with more graphics        options:   See http://www.idlcoyote.com/programs/histoplot.pro  MODIFICATION HISTORY:         Written     W. Landsman            January, 1991         Add inherited keywords W. Landsman        March, 1994         Use ROUND instead of NINT  W. Landsman   August, 1995         Add NoPlot and Overplot keywords.   J.Wm.Parker  July, 1997         Add Peak keyword.   J.Wm.Parker  Jan, 1998         Add FILL,FCOLOR,FLINE,FPATTERN,FSPACING keywords. J.Wm.Parker Jan, 1998         Add /NAN keyword        W. Landsman October 2001         Don't plot out of range with /FILL, added HALFBIN keyword, make         half bin shift default for integer only W. Landsman/J. Kurk May 2002         Add BOXPLOT keyword, use exact XRANGE as default W.L.  May 2006         Allow use of /XLOG and /YLOG keywords  W.L. June 2006         Adjust Ymin when /YLOG is used  W. L.  Sep 2007         Added AXISCOLOR keyword, fix color problem with overplots WL Nov 2007         Check when /NAN is used and all elements are NAN  S. Koposov Sep 2008         Added /ROTATE keyword to turn plot on its side. J. Mullaney, 2009.         Added FTHICK keyword for thickness of fill lines. L. Anderson Oct. 2010         Use Coyote Graphics  W. Landsman Feb 2011         Explicit XSTYLE, YSTYLE keywords to avoid _EXTRA confusion WL. Aug 2011         Fix PLOT keyword problem with /ROTATE  WL  Dec 2011  ", "BINNOPLOTOVERPLOTPSYMPeakFillFCOLORFLINEFTHICKFSPACINGFPATTERNFORIENTATIONNAN_EXTRAHalfbinAUTOBinBoxplotxlogylogyrangeColoraxiscolorrotateWINDOWXSTYLEYSTYLETHICKLINESTYLEarrxhistyhist", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/public/plotimage.html", "plotimage.pro", '.pro file in <a href="coyote/public/dir-overview.html">coyote/public/ directory</a>', "plotimage.pro", "", "", " NAME:    PLOTIMAGE   AUTHOR:    Craig B. Markwardt, NASA/GSFC Code 662, Greenbelt, MD 20770    craigm@lheamail.gsfc.nasa.gov   PURPOSE:    Displays an image via a  PLOT -like interface.   CALLING SEQUENCE:    PLOTIMAGE, img, [xrange=xrange,] [yrange=yrange,] ...   DESCRIPTION:     PLOTIMAGE displays an image (or slice of an image) on the current    graphics device.  The syntax is very similar to the PLOT command,    in the sense that an XRANGE and YRANGE for the plot can be    specified.     PLOTIMAGE keeps separate the notions of the image coordinate    system and the displayed coordinate system, which allows any input    image to be  cropped,   zoomed,  or  flipped.      PLOTIMAGE allows the user to express image extents in physical    units rather than pixel units.     The image coordinate system specifies the physical coordinates of    original image data, IMG.  The image is considered to be a 2D    array (IMG = ARRAY(NX,NY)), where the values are attached to the    midpoint of each geometric pixel.  The image has NX columns and NY    rows.  Physical coordinates are attached to each pixel by using    the IMGXRANGE and IMGYRANGE keywords.  The IMGXRANGE keyword is a    two-element array specifying the  left  and  right  boundaries of    the image pixels in physical units; the IMGYRANGE keyword    specifies the  top  and  bottom  boundaries of the image.  This is    illustrated in Figure 1 for a simplified case.                                     ___          +-----------+-----------+  ^  IMGYRANGE[1]          |           |           |  |          | IMG[0,1]  | IMG[1,1]  |  |          |     +     |     +     |  |          |           |           |  |          |           |           |  |          +-----------+-----------+  |          |           |           |  |          | IMG[0,0]  | IMG[1,0]  |  |          |     +     |     +     |  |          |           |           |  |          |           |           |  v          +-----------+-----------+ ___ IMGYRANGE[0]         |                         |         |&lt;-----------------------&gt;|         IMGXRANGE[0]   IMGXRANGE[1]        Figure 1.  Simplified example of a 2x2 input image,       demonstrating that IMG[*,*] values refer to the pixel       mid-points, and that IMGXRANGE and IMGYRANGE ranges specify the       physical coordinates of the outer edges of the image extent in       X and Y, respectively.     The displayed plot coordinate system is entirely independent of    the native image coordinates.  Users can set up the plot scale    using any combination of {X,Y}RANGE, {X,Y}STYLE and/or {X,Y}LOG,    as they would for any IDL plot, using physical units.  The input    image will then be overlayed on this coordinate system.     If the displayed plot coordinates are narrower than the native    image coordinates, then the displayed portion of the image will be    cropped to fit.  If the displayed coordinates are wider than the    native image coordinates, then the image will be displayed with    blank spaces on either side (see Figure 2).  A mirror  flip  is    also possible in X and/or Y, if XRANGE or YRANGE are specified in    reverse order.                                                  ___       +---------------------------------------+   ^       |            ___                        |   |       |             ^  +---------------+      |   |       |             |  |               |      |   |       |             |  |               |      |   |       |    IMGYRANGE|  |     IMG       |      |   | YRANGE       |             |  |               |      |   |       |             v  |               |      |   |       |            ___ +---------------+      |   |       |               |&lt;-- IMGXRANGE --&gt;|     |   |       |                                       |   v       +---------------------------------------+  ___      |&lt;-------------   XRANGE   --------------&gt;|       Figure 2.  Example of an image whose native image coordinates      are embedded in a wider plot display range.     The standard [XY]STYLE keywords can be used to style either axis.    However at the very least [XY]STYLE=1 is always implied, i.e. the    plot limits exactly obey the [XY]RANGE keyword values.     If XLOG or YLOG are set, then the image is assumed to be sampled    on a logarithmic grid, and logarithmic axes are displayed    accordingly.  PLOTIMAGE does not attempt to resample the image    from linear scale to logarithmic scale, or reverse.     Psuedocolor images may be of any type, but must rescaled to a byte    range by using the RANGE keyword.  By default the color range used    in the rescaling operation is 0 to !D.N_COLORS - 3B.  The extra    two color values are reserved for the background and default pen    colors.  This behavior can be adjusted by specifying the BOTTOM    and/or NCOLORS keywords.     Truecolor images must always be of type BYTE and one of their    dimensions must have 3 elements, corresponding to the three color    planes of the image.   INPUTS:     IMG - Array to be displayed.  For single-plane images (i.e.,          pseudocolor), the image must be two dimensional and of any          real numeric type.  For images that are not of BYTE type,          the RANGE keyword must be supplied, and then PLOTIMAGE will          rescale the image values to a byte range.           An image declared as ARRAY(NX,NY) will be NX pixels in the          x-direction and NY pixels in the y-direction.  The image is          resampled to fill the desired display region (and optionally          smoothed).           For three-plane images (i.e., truecolor) the image must be          of type BYTE.  One of the dimensions of the array must have          three elements.  Hence it must be one of BYTARR(NX, NY, 3),          BYTARR(NX, 3, NY) or BYTARR(3, NX, NY).  The 3-element          dimension is recognized automatically.   OPTIONAL INPUTS:    NONE   INPUT KEYWORD PARAMETERS:     IMGXRANGE, IMGYRANGE - Each is a two component vector that                           describes the X and Y position of the outer                           edges of the first and last pixels.                           Default: IMGXRANGE = [0,NX]                                    IMGYRANGE = [0,NY]     XRANGE, YRANGE - Each is a two component vector that specifies the                     X and Y plot ranges, respectively.  These values                     are not required to coincide with IMG[XY]RANGE.                     Default: XRANGE=IMGXRANGE                              YRANGE=IMGYRANGE     POSITION - Position of the inner plot window in the standard               graphics keyword format.  Overrides PANEL and SUBPANEL.     INTERP - if set, interpolate (smooth) the image before displaying.             This keyword applies to the screen displays.  For printed             images that are coarser than MIN_DPI, the image is             implicitly interpolated regardless of INTERP.     PRESERVE_ASPECT - if set, preserve the aspect ratio of the                      original image (in pixels).  The result will be                      the largest image that fits in the display                      region while maintaining approximately square                      pixels.  However, PIXEL_ASPECT_RATIO overrides                      PRESERVE_ASPECT.  The POSITION keyword will be                      reset upon output to the ultimate image                      position.                      DEFAULT: not set (image will fill POSITION rectangle)     PIXEL_ASPECT_RATIO - The ratio of width to height for each pixel.                         If specified, then the image will be scaled                         so that each pixel has the specified aspect                         ratio.  If not specified, then the image will                         be scaled independently in X and Y in order                         to fill the POSITION rectangle.  NOTE: If you                         want to change the overall image aspect                         ratio, then use the POSITION keyword.                   DEFAULT: undefined (image will fill POSITION rectangle)     MIN_DPI - if printing, the minimum dot-per-inch pixel resolution              for the resulting image.  Output images that would be              coarser than this value are resampled to have a              resolution of at least MIN_DPI, and smoothed.  Some              common resolutions are: screen, 90 dpi; dot matrix, 72              dpi; laser printer 300-600 dpi.  Note that large values              of MIN_DPI will produce very large output files.              Default: 0 (i.e., the output image will not be smoothed)     RANGE - a two element vector.  If the image is single plane (i.e.,            pseudocolor) the input image can be of any real numeric            type, and then must be rescaled into byte range with this            keyword.  In contrast, truecolor images must always be of            type BYTE.  Values are scaled into byte range with the            following statement:               RESULT = BYTSCL(INPUT, MIN=RANGE(0), MAX=RANGE(1), $                               TOP=NCOLORS-1) + BOTTOM            so that pixels with an intensity RANGE(0) are set to            BOTTOM; those with RANGE(1) are set to the maximum color.            Default: no range scaling occurs (and the image must hence                     be of type BYTE -- otherwise an error occurs)     NCOLORS - number of color table values be used in the byte              rescaling operation.              Default: !D.N_COLORS - BOTTOM - 1 (for default pen color)     BOTTOM - bottom-most value of the color table to be used in the             byte rescaling operation.             Default: 1 (for default background color)     NOERASE - If set, the display is not erased before graphics              operations.     NODATA - If set, the image is not actually displayed, but             coordinate axes may be drawn.     NOAXES - An attempt is made to render the image without coordinate             axes.  However, it's usually more straightforward to set             XSTYLE=4 or YSTYLE=4, which is the standard IDL way to             disable coordinate axes.     ORDER - same interpretation as the !ORDER system variable;            if ORDER=0, then the first pixel is drawn in the lower            left corner; if ORDER=1, then the first pixel is drawn in            the upper left corner.            Default: 0     PANEL, SUBPANEL - An alternate way to more precisely specify the                      plot and annotation positions.  See SUBCELL.     PLOTIMAGE will pass other keywords directly to the PLOT command    used for generating the plot axes.  XSTYLE=1 and YSTYLE=1 are    enforced.   OUTPUTS:    NONE   PROCEDURE:   EXAMPLE:     This example constructs an image whose values are found by        z(x,y) = cos(x) * sin(y)    and x and y are in the range [-2,2] and [4,8], respectively.    The image is then plotted, with appropriate axes.     x = findgen(20)/5. - 2. + .1   ; 0.1 = half-pixel    y = findgen(20)/5. + 4. + .1    zz = cos(x) # sin(y)    imgxrange = [-2.,2.]           ; extend to pixel edges    imgyrange = [4.,8.]    plotimage, bytscl(zz), imgxrange=imgxrange, imgyrange=imgyrange     This second example plots the same image, but with a plot range    much larger than the image's.     xr=[-10.,10]    yr=[-10.,10]    plotimage, bytscl(zz), imgxrange=imgxrange, imgyrange=imgyrange, $       xrange=xr, yrange=yr   SEE ALSO:     OPLOTIMAGE, BYTSCL   EXTERNAL SUBROUTINES:     SUBCELL, DEFSUBCELL   MODIFICATION HISTORY:    Written, CM, 1997    Correct various one-off problems, 02 Feb 1999, CM    Made self-contained with some pre-processing, 17 Oct 1999, CM    Corrected bug in newly introduced CONGRID functions, 18 Oct 1999, CM    Correct behavior with no POSITION keyword, 17 Nov 1999, CM    Simplified axis plotting, 17 Nov 1999, CM    Use _EXTRA keyword in first PLOT, but with blank TITLEs, 11 Jan      2000, CM    Correct implementation of X/YSTYLE in first PLOT, 11 Feb 2000, CM    Correct CONGRID implementation (small effect when enlarging most      images), 14 Feb 2000, CM    Major changes: 19 Apr 2000       - now handle decomposed color, automatic color mapping via         RANGE, and 24-bit multiplane images       - new PRESERVE_ASPECT keyword to keep square pixels       - removed legacy TVIMAGE code       - smoothing is more configurable, esp. for printers, but is not         done by default; more printers are supported    Corrected INTERPOLATE behavior (thanks to Liam Gumley      &lt;Liam.Gumley@ssec.wisc.edu&gt;), other minor tweaks, CM 20 Apr 2000    Added ability to use PRESERVE_ASPECT with POSITION, PANEL or      SUBPANEL keywords CM 20 Oct 2000    Oops, a typo is now fixed, CM 23 Oct 2000    Add fix for MacIntoshes and DECOMPOSED color, Tupper, 02 Aug 2001    Better behavior with fractional pixels (ie, when the image pixels      are very large compared to the screen), 23 Aug 2001    Add support for Z buffer, CM, 20 Oct 2002    Memory conservation: use REVERSE() to reverse IMG; rewrote      PLOTIMAGE_RESAMP to rescale entire image instead of each color plane      separately.  Jeff Guerber, 30 July 2003    Add PIXEL_ASPECT_RATIO keyword, 22-25 Nov 2005    Check for the case of an 1xNXxNY 3D image and treat it as a 2D      image.  The  1  dimension can be anywhere, CM, 03 Sep 2006    Add the ORDER keyword parameter, CM, 20 Mar 2007    Enable XLOG and YLOG keywords, for logarithmic axes;      doesn't actually resample the image from linear&lt;-&gt;log, CM      21 Jan 2009    Documentation, CM, 21 Jan 2009    Allow reverse color scale, CM, 13 Nov 2010     $Id: plotimage.pro,v 1.15 2010/11/13 09:53:39 cmarkwar Exp $   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/public/plotimage.html#plotimage_resamp", "plotimage_resamp", 'routine in <a href="coyote/public/plotimage.html">plotimage.pro</a>', "plotimage.pro", "", "plotimage_resamp", "", "interpimagenxnybdepthnewxnewy", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/public/plotimage.html#plotimage_pos", "plotimage_pos", 'routine in <a href="coyote/public/plotimage.html">plotimage.pro</a>', "plotimage.pro", "", "plotimage_pos", "", "logscalequietstatuspixtolerancexrange0imgxrange0imgxsizexreversesrcxpiximgxpanel", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/public/plotimage.html#plotimage", "plotimage", 'routine in <a href="coyote/public/plotimage.html">plotimage.pro</a>', "plotimage.pro", "", "plotimage", "", "xrangeyrangeimgxrangeimgyrangexlogylogpositionpanelsubpanelxstyleystyletitleinterpquietditherpreserve_aspectpixel_aspect_ratiomin_dpiorderncolorsbottomrangenoerasenodatanoaxespixtolerance_EXTRAimg0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/plotsym.html", "plotsym.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "plotsym.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/plotsym.html#plotsym", "plotsym", 'routine in <a href="idlastro/plotsym.html">plotsym.pro</a>', "plotsym.pro", "", "plotsym", " NAME:      PLOTSYM  PURPOSE:      Define useful plotting symbols not in the standard !PSYM definitions.  EXPLANATION:      After a symbol has been defined with PLOTSYM, a plotting command should      follow with either PSYM = 8 or !P.PSYM = 8 (see USERSYM)       For additional rotationally symmetric plotting symbols, see VSYM.PRO      Also see CGSYMCAT in the/coyote directory.  CALLING SEQUENCE:      PLOTSYM, PSYM,[ PSIZE, /FILL, THICK=, COLOR=]   INPUTS:      PSYM -  The following integer values of PSYM will create the              corresponding plot symbols      0 - circle      1 - downward arrow (upper limit), base of arrow begins at plot value             value      2 - upward arrow (lower limt)      3 - 5 pointed star      4 - triangle      5 - upside down triangle      6 - left pointing arrow      7 - right pointing arrow      8 - square       Arrows are defined such that their base begins at their origin.   OPTIONAL INPUTS:      PSIZE - Size of the plotting symbol in multiples of the default size                (default PSIZE=1).  Does not need to be an integer   OPTIONAL INPUT KEYWORD:      FILL -  Parameter indicating whether to fill the symbol (see USERSYM)              The default is 0, unfilled symbol.  Does not affect arrows              or character symbols.      THICK -  Thickness of unfilled symbols. Default is 1.      COLOR - Color of the symbols, Default is !P.color  OUTPUTS:      None   EXAMPLES:      Plot Y vs. X with filled stars as the symbol, twice the default size      IDL&gt; PLOTSYM, 3 ,2, /FILL       ;Plotting symbol is a filled star,                                        ;twice default size      IDL&gt; PLOT,X,Y,PSYM=8            ;Set PSYM = 8 to get star symbol       Now plot Y vs. X with an open circle as the symbol        IDL&gt; PLOTSYM, 0               ;Plotting symbol is a circle       IDL&gt; PLOT,X,Y,PSYM=8   METHOD:      Appropriate X,Y vectors are used to define the symbol and passed to the      USERSYM command.   REVISION HISTORY       Written       W. Landsman         June 1992       18-JAN-1996    Added a square symbol, HCW.       98Aug20         Added keyword thick parameter - RCB.       April 2001     Added COLOR keyword    WBL  ", "FILLthickColorpsympsize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/poidev.html", "poidev.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "poidev.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/poidev.html#poidev", "poidev", 'routine in <a href="idlastro/poidev.html">poidev.pro</a>', "poidev.pro", "", "poidev", " NAME:      POIDEV  PURPOSE:      Generate a Poisson random deviate  EXPLANATION:      Return an integer random deviate drawn from a Poisson distribution with      a specified mean.    Adapted from procedure of the same name in       Numerical Recipes  by Press et al. (1992), Section 7.3       NOTE: This routine became partially obsolete in V5.0 with the      introduction of the POISSON keyword to the intrinsic functions      RANDOMU and RANDOMN.     However, POIDEV is still useful for adding      Poisson noise to an existing image array, for which the coding is much      simpler than it would be using RANDOMU (see example 1)  CALLING SEQUENCE:      result = POIDEV( xm, [ SEED = ] )   INPUTS:      xm - numeric scalar, vector or array, specifying the mean(s) of the           Poisson distribution   OUTPUT:      result - Long integer scalar or vector, same size as xm   OPTIONAL KEYWORD INPUT-OUTPUT:      SEED -  Scalar to be used as the seed for the random distribution.              For best results, SEED should be a large (&gt;100) integer.              If SEED is undefined, then its value is taken from the system              clock (see RANDOMU).    The value of SEED is always updated              upon output.   This keyword can be used to have POIDEV give              identical results on consecutive runs.   EXAMPLE:      (1) Add Poisson noise to an integral image array, im               IDL&gt; imnoise = POIDEV( im)       (2) Verify the expected mean  and sigma for an input value of 81               IDL&gt; p = POIDEV( intarr(10000) + 81)   ;Test for 10,000 points               IDL&gt; print,mean(p),sigma(p)      Mean and sigma of the 10000 points should be close to 81 and 9   METHOD:      For small values (&lt; 20) independent exponential deviates are generated      until their sum exceeds the specified mean, the number of events      required is returned as the Poisson deviate.   For large (&gt; 20) values,      uniform random variates are compared with a Lorentzian distribution      function.   NOTES:      Negative values in the input array will be returned as zeros.   REVISION HISTORY:       Version 1               Wayne Landsman        July  1992       Added SEED keyword                            September 1992       Call intrinsic LNGAMMA function               November 1994       Converted to IDL V5.0   W. Landsman   September 1997       Use COMPLEMENT keyword to WHERE()        W. Landsman August 2008  ", "SEEDxm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/polint.html", "polint.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "polint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/polint.html#polint", "polint", 'routine in <a href="idlastro/polint.html">polint.pro</a>', "polint.pro", "", "polint", " NAME:      POLINT  PURPOSE:      Interpolate a set of N points by fitting a polynomial of degree N-1  EXPLANATION:      Adapted from algorithm in Numerical Recipes, Press et al. (1992),      Section 3.1.   CALLING SEQUENCE      POLINT, xa, ya, x, y, [ dy ]  INPUTS:      XA - X Numeric vector, all values must be distinct.   The number of           values in XA should rarely exceed 10 (i.e. a 9th order polynomial)      YA - Y Numeric vector, same number of elements      X - Numeric scalar specifying value to be interpolated   OUTPUT:      Y - Scalar, interpolated value in (XA,YA) corresponding to X   OPTIONAL OUTPUT      DY - Error estimate on Y, scalar   EXAMPLE:      Find sin(2.5) by polynomial interpolation on sin(indgen(10))                 IDL&gt; xa = indgen(10)                IDL&gt; ya = sin( xa )                IDL&gt; polint, xa, ya, 2.5, y ,dy       The above method gives  y = .5988 & dy = 3.1e-4  a close      approximation to the actual sin(2.5) = .5985   METHOD:      Uses Neville's algorithm to iteratively build up the correct      polynomial, with each iteration containing one higher order.   REVISION HISTORY:      Written W. Landsman                 January, 1992      Converted to IDL V5.0   W. Landsman   September 1997  ", "xayaxydy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jhuapl/polrec.html", "polrec.pro", '.pro file in <a href="idlastro/jhuapl/dir-overview.html">idlastro/jhuapl/ directory</a>', "polrec.pro", "", "", " NAME:        POLREC  PURPOSE:        Convert 2-d polar coordinates to rectangular coordinates.  CATEGORY:  CALLING SEQUENCE:        polrec, r, a, x, y  INPUTS:        r, a = vector in polar form: radius, angle (radians).  in  KEYWORD PARAMETERS:        Keywords:          /DEGREES means angle is in degrees, else radians.  OUTPUTS:        x, y = vector in rectangular form, double precision     out  COMMON BLOCKS:  NOTES:  MODIFICATION HISTORY:        R. Sterner. 18 Aug, 1986.        Johns Hopkins University Applied Physics Laboratory.        RES 13 Feb, 1991 --- added /degrees. 	Converted to IDL V5.0   W. Landsman   September 1997        1999 May 03 --- Made double precision.  R. Sterner.   Copyright (C) 1986, Johns Hopkins University/Applied Physics Laboratory  This software may be used, copied, or redistributed as long as it is not  sold and this copyright notice is reproduced on each copy made.  This  routine is provided as is without any express or implied warranties  whatsoever.  Other limitations apply as described in the file disclaimer.txt.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/polrec.html#POLREC", "POLREC", 'routine in <a href="idlastro/jhuapl/polrec.html">polrec.pro</a>', "polrec.pro", "", "POLREC", "", "helpdegreesRAXY", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/poly_smooth.html", "poly_smooth.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "poly_smooth.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/poly_smooth.html#poly_smooth", "poly_smooth", 'routine in <a href="idlastro/poly_smooth.html">poly_smooth.pro</a>', "poly_smooth.pro", "", "poly_smooth", " NAME:        POLY_SMOOTH   PURPOSE:        Apply a least-squares (Savitzky-Golay) polynomial smoothing filter  EXPLANATION:        Reduce noise in 1-D data (e.g. time-series, spectrum) but retain        dynamic range of variations in the data by applying a least squares        smoothing polynomial filter,         Also called the Savitzky-Golay smoothing filter, cf. Numerical        Recipes (Press et al. 1992, Sec.14.8)         The low-pass filter coefficients are computed by effectively        least-squares fitting a polynomial in moving window,        centered on each data point, so the new value will be the        zero-th coefficient of the polynomial. Approximate first derivates        of the data can be computed by using first degree coefficient of        each polynomial, and so on. The filter coefficients for a specified        polynomial degree and window width are computed independent of any        data, and stored in a common block. The filter is then convolved        with the data array to result in smoothed data with reduced noise,        but retaining higher order variations (better than SMOOTH).         This procedure became partially obsolete in IDL V5.4 with the        introduction of the SAVGOL function, which computes the smoothing        coefficients.  CALLING SEQUENCE:         spectrum = poly_smooth( data, [ width, DEGREE = , NLEFT = , NRIGHT =                                        DERIV_ORDER = ,COEFF = ]   INPUTS:        data = 1-D array, such as a spectrum or time-series.         width = total number of data points to use in filter convolution,                (default = 5, using 2 past and 2 future data points),                must be larger than DEGREE of polynomials, and a guideline is to                make WIDTH between 1 and 2 times the FWHM of desired features.   OPTIONAL INPUT KEYWORDS:         DEGREE = degree of polynomials to use in designing the filter                via least squares fits, (default DEGREE = 2)                The higher degrees will preserve sharper features.         NLEFT = # of past data points to use in filter convolution,                excluding current point, overrides width parameter,                so that width = NLEFT + NRIGHT + 1.  (default = NRIGHT)         NRIGHT = # of future data points to use (default = NLEFT).         DERIV_ORDER = order of derivative desired (default = 0, no derivative).   OPTIONAL OUTPUT KEYWORD:         COEFFICIENTS = optional output of the filter coefficients applied,                but they are all stored in common block for reuse, anyway.  RESULTS:        Function returns the data convolved with polynomial filter coefs.   EXAMPLE:         Given a wavelength - flux spectrum (w,f), apply a 31 point quadratic        smoothing filter and plot         IDL&gt; cgplot, w, poly_smooth(f,31)  COMMON BLOCKS:        common poly_smooth, degc, nlc, nrc, coefs, ordermax   PROCEDURE:        As described in Numerical Recipies, 2nd edition sec.14.8,        Savitsky-Golay filter.        Matrix of normal eqs. is formed by starting with small terms        and then adding progressively larger terms (powers).        The filter coefficients of up to derivative ordermax are stored        in common, until the specifications change, then recompute coefficients.        Coefficients are stored in convolution order, zero lag in the middle.   MODIFICATION HISTORY:        Written, Frank Varosi NASA/GSFC 1993.        Converted to IDL V5.0   W. Landsman   September 1997        Use /EDGE_TRUNCATE keyword to CONVOL  W. Landsman March 2006  ", "DEGREENLEFTNRIGHTDERIV_ORDERCOEFFICIENTSdatawidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/polyleg.html", "polyleg.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "polyleg.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/polyleg.html#polyleg", "polyleg", 'routine in <a href="idlastro/polyleg.html">polyleg.pro</a>', "polyleg.pro", "", "polyleg", " NAME:        POLYLEG   PURPOSE:        Evaluate a Legendre polynomial with specified coefficients.  EXPLANATION:        Meant to be used analogously to the POLY function in the IDL User's        Library distribution.   CALLING SEQUENCE:        Result = POLYLEG( X, C )   INPUTS:        X - input variable, scalar or vector        C - vector of Legendre polynomial coefficients.  OUTPUTS:        POLYLEG returns a result equal to:                C[0] + C[1]*P_1(x) + C[2]*P_2(x) + ...         where P_j(x) is the jth Legendre polynomial.   The output will have        the same dimensions as the input X variable.   EXAMPLE:        If x = [0.5, 1.0] and C = [2.4, 1.3, 2.5] then        print, polyleg(x, c)    ====&gt; [2.7375, 6.20]         The result can be checked using the first 3 Legendre polynomial terms        C[0] + C[1]*x + C[2]*(0.5*(3*x^2-1))  METHOD:        Uses the recurrence relation of Legendre polynomials                (n+1)*P_n+1(x) = (2n+1)*x*P_n(x) - n*P_n-1(x)        evaluated with the Clenshaw recurrence formula, see Numerical Recipes        by Press et al. (1992), Section 5.5   REVISION HISTORY:        Written W. Landsman   Hughes STX Co.        April, 1995        Fixed for double precision  W. Landsman     May, 1997        Converted to IDL V5.0   W. Landsman   September 1997  ", "xcoeff", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/posang.html", "posang.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "posang.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/posang.html#POSANG", "POSANG", 'routine in <a href="idlastro/posang.html">posang.pro</a>', "posang.pro", "", "POSANG", " NAME:        POSANG  PURPOSE:        Computes rigorous position angle of source 2 relative to source 1   EXPLANATION:        Computes the rigorous position angle of source 2 (with given RA, Dec)        using source 1 (with given RA, Dec) as the center.   CALLING SEQUENCE:        POSANG, U, RA1, DC1, RA2, DC2, ANGLE   INPUTS:        U    -- Describes units of inputs and output:                0:  everything radians                1:  RAx in decimal hours, DCx in decimal                        degrees, ANGLE in degrees        RA1  -- Right ascension of point 1        DC1  -- Declination of point 1        RA2  -- Right ascension of point 2        DC2  -- Declination of point 2     OUTPUTS:        ANGLE-- Angle of the great circle containing [ra2, dc2] from                the meridian containing [ra1, dc1], in the sense north                through east rotating about [ra1, dc1].  See U above                for units.     PROCEDURE:        The  four-parts formula  from spherical trig (p. 12 of Smart's        Spherical Astronomy or p. 12 of Green' Spherical Astronomy).     EXAMPLE:        For the star 56 Per, the Hipparcos catalog gives a position of        RA = 66.15593384, Dec = 33.94988843 for component A, and        RA = 66.15646079, Dec =  33.96100069 for component B.   What is the        position angle of B relative to A?         IDL&gt; RA1 = 66.15593384/15.d   & DC1 = 33.95988843        IDL&gt; RA2 = 66.15646079/15.d   & DC2 = 33.96100069        IDL&gt; posang,1,ra1,dc1,ra2,dc2, ang             will give the answer of ang = 21.4 degrees    NOTES:        (1) If RA1,DC1 are scalars, and RA2,DC2 are vectors, then ANGLE is a        vector giving the position angle between each element of RA2,DC2 and        RA1,DC1.   Similarly, if RA1,DC1 are vectors, and RA2, DC2 are scalars,        then DIS is a vector giving the position angle of each element of RA1,        DC1 and RA2, DC2.    If both RA1,DC1 and RA2,DC2 are vectors then ANGLE        is a vector giving the position angle between each element of RA1,DC1        and the corresponding element of RA2,DC2.    If then vectors are not the        same length, then excess elements of the longer one will be ignored.         (2) Note that POSANG is not commutative -- the position angle between         A and B is theta, then the position angle between B and A is 180+theta    PROCEDURE CALLS:         ISARRAY()    HISTORY:        Modified from GCIRC, R. S. Hill, RSTX, 1 Apr. 1998        Use V6.0 notation W.L. Mar 2011   ", "ura1dc1ra2dc2angle", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/positivity.html", "positivity.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "positivity.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/positivity.html#positivity", "positivity", 'routine in <a href="idlastro/positivity.html">positivity.pro</a>', "positivity.pro", "", "positivity", " NAME: 	POSITIVITY  PURPOSE: 	Map an image uniquely and smoothly into all positive values.  EXPLANATION: 	Take unconstrained x (usually an image), and map it uniquely and 	smoothly into positive values.   Negative values of x get mapped to 	interval ( 0, sqrt( epsilon )/2 ], positive values go to 	( sqrt( epsilon )/2, oo ) with deriv approaching 1.  Derivative is 	always 1/2 at x=0.   Derivative is used by the MRL deconvolution 	algorithm.   CALLING SEQUENCE: 	result = POSITIVITY( x, [ /DERIVATIVE, EPSILON = )   INPUTS: 	x - input array, unconstrained   OUTPUT: 	result =  output array = ((x + sqrt(x^2 + epsilon))/2 		if the /DERIV keyword is set then instead the derivative of 		the above expression with respect to X is returned   OPTIONAL INPUT KEYWORDS: 	DERIV -  if this keyword set, then the derivative of the positivity 		mapping is returned, rather than the mapping itself 	EPSILON - real scalar specifying the interval into which to map 		negative values.    If EPSILON EQ 0 then the mapping reduces to 		positive truncation.   If EPSILON LT then the mapping reduces to 		an identity (no change).  Default is EPSILON = 1e-9   REVISION HISTORY: 	 F.Varosi NASA/GSFC 1992, as suggested by R.Pina UCSD. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "DERIVATIVEEPSILONx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/posscomb.html", "posscomb.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "posscomb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/posscomb.html#posscomb", "posscomb", 'routine in <a href="code_snapshots/albert_version/posscomb.html">posscomb.pro</a>', "posscomb.pro", "", "posscomb", "", "n", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/posscomb.html", "posscomb.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "posscomb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/posscomb.html#posscomb", "posscomb", 'routine in <a href="sep20/posscomb.html">posscomb.pro</a>', "posscomb.pro", "", "posscomb", "", "n", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/posscomb.html", "posscomb.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "posscomb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/posscomb.html#posscomb", "posscomb", 'routine in <a href="code_snapshots/test_version/posscomb.html">posscomb.pro</a>', "posscomb.pro", "", "posscomb", "", "n", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/posscomb.html", "posscomb.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "posscomb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/posscomb.html#posscomb", "posscomb", 'routine in <a href="code_snapshots/jul25/posscomb.html">posscomb.pro</a>', "posscomb.pro", "", "posscomb", "", "n", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/posscomb.html", "posscomb.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "posscomb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/posscomb.html#posscomb", "posscomb", 'routine in <a href="code_snapshots/sep11/posscomb.html">posscomb.pro</a>', "posscomb.pro", "", "posscomb", "", "n", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/precess.html", "precess.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "precess.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/precess.html#precess", "precess", 'routine in <a href="idlastro/precess.html">precess.pro</a>', "precess.pro", "", "precess", " NAME:       PRECESS  PURPOSE:       Precess coordinates from EQUINOX1 to EQUINOX2.  EXPLANATION:       For interactive display, one can use the procedure ASTRO which calls       PRECESS or use the /PRINT keyword.   The default (RA,DEC) system is       FK5 based on epoch J2000.0 but FK4 based on B1950.0 is available via       the /FK4 keyword.        Use BPRECESS and JPRECESS to convert between FK4 and FK5 systems  CALLING SEQUENCE:       PRECESS, ra, dec, [ equinox1, equinox2, /PRINT, /FK4, /RADIAN ]   INPUT - OUTPUT:       RA - Input right ascension (scalar or vector) in DEGREES, unless the               /RADIAN keyword is set       DEC - Input declination in DEGREES (scalar or vector), unless the               /RADIAN keyword is set        The input RA and DEC are modified by PRECESS to give the       values after precession.   OPTIONAL INPUTS:       EQUINOX1 - Original equinox of coordinates, numeric scalar.  If                omitted, then PRECESS will query for EQUINOX1 and EQUINOX2.       EQUINOX2 - Equinox of precessed coordinates.   OPTIONAL INPUT KEYWORDS:       /PRINT - If this keyword is set and non-zero, then the precessed                coordinates are displayed at the terminal.    Cannot be used                with the /RADIAN keyword       /FK4   - If this keyword is set and non-zero, the FK4 (B1950.0) system                will be used otherwise FK5 (J2000.0) will be used instead.       /RADIAN - If this keyword is set and non-zero, then the input and                output RA and DEC vectors are in radians rather than degrees   RESTRICTIONS:        Accuracy of precession decreases for declination values near 90        degrees.  PRECESS should not be used more than 2.5 centuries from        2000 on the FK5 system (1950.0 on the FK4 system).   EXAMPLES:        (1) The Pole Star has J2000.0 coordinates (2h, 31m, 46.3s,                89d 15' 50.6 ); compute its coordinates at J1985.0         IDL&gt; precess, ten(2,31,46.3)*15, ten(89,15,50.6), 2000, 1985, /PRINT                 ====&gt; 2h 16m 22.73s, 89d 11' 47.3          (2) Precess the B1950 coordinates of Eps Ind (RA = 21h 59m,33.053s,        DEC = (-56d, 59', 33.053 ) to equinox B1975.         IDL&gt; ra = ten(21, 59, 33.053)*15        IDL&gt; dec = ten(-56, 59, 33.053)        IDL&gt; precess, ra, dec ,1950, 1975, /fk4   PROCEDURE:        Algorithm from Computational Spherical Astronomy by Taff (1983),        p. 24. (FK4). FK5 constants from  Astronomical Almanac Explanatory        Supplement 1992, page 104 Table 3.211.1.   PROCEDURE CALLED:        Function PREMAT - computes precession matrix   REVISION HISTORY        Written, Wayne Landsman, STI Corporation  August 1986        Correct negative output RA values   February 1989        Added /PRINT keyword      W. Landsman   November, 1991        Provided FK5 (J2000.0)  I. Freedman   January 1994        Precession Matrix computation now in PREMAT   W. Landsman June 1994        Added /RADIAN keyword                         W. Landsman June 1997        Converted to IDL V5.0   W. Landsman   September 1997        Correct negative output RA values when /RADIAN used    March 1999        Work for arrays, not just vectors  W. Landsman    September 2003  ", "PRINTFK4RADIANradecequinox1equinox2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/precess_cd.html", "precess_cd.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "precess_cd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/precess_cd.html#PRECESS_CD", "PRECESS_CD", 'routine in <a href="idlastro/precess_cd.html">precess_cd.pro</a>', "precess_cd.pro", "", "PRECESS_CD", " NAME:        PRECESS_CD   PURPOSE:        Precess the CD (coordinate description) matrix from a FITS header  EXPLANATION:        The CD matrix is precessed from EPOCH1 to EPOCH2.  Called by HPRECESS   CALLING SEQUENCE:        PRECESS_CD, cd, epoch1, epoch2, crval_old, crval_new, [/FK4]   INPUTS/OUTPUT:        CD - 2 x 2 CD (coordinate description) matrix in any units                (degrees or radians).  CD will altered on output to contain                precessed values in the same units.    On output CD will always                be double precision no matter how input.   INPUTS:        EPOCH1 - Original equinox of coordinates, scalar (e.g. 1950.0).        EPOCH2 - Equinox of precessed coordinates, scalar (e.g. 2000.0)        CRVAL_OLD - 2 element vector containing RA and DEC in DEGREES                of the reference pixel in the original equinox        CRVAL_NEW - 2 elements vector giving CRVAL in the new equinox   INPUT KEYWORD:        /FK4 - If this keyword is set, then the precession constants are taken              in the FK4 reference frame.   The default is the FK5 frame.   RESTRICTIONS:        PRECESS_CD should not be used more than 2.5 centuries from the        year 1900.   PROCEDURE:        Adapted from the STSDAS program FMATPREC.  Precession changes the        location of the north pole, and thus changes the rotation of        an image from north up.  This is reflected in the precession of the        CD matrix.   This is usually a very small change.   PROCEDURE CALLS:        PRECESS   REVISION HISTORY:        Written, Wayne Landsman, ST Systems  February 1988        Fixed sign error in computation of SINRA     March 1992        Added /FK4 keyword                           Feb 1994        Converted to IDL V5.0   W. Landsman   September 1997        Use B/Jprecess for conversion between 1950 and 2000 W.L. Aug 2009  ", "FK4cdepoch1epoch2crval_oldcrval_new", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/precess_xyz.html", "precess_xyz.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "precess_xyz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/precess_xyz.html#precess_xyz", "precess_xyz", 'routine in <a href="idlastro/precess_xyz.html">precess_xyz.pro</a>', "precess_xyz.pro", "", "precess_xyz", " NAME: 	PRECESS_XYZ   PURPOSE: 	Precess equatorial geocentric rectangular coordinates.   CALLING SEQUENCE: 	precess_xyz, x, y, z, equinox1, equinox2   INPUT/OUTPUT: 	x,y,z: scalars or vectors giving heliocentric rectangular coordinates               THESE ARE CHANGED UPON RETURNING.  INPUT: 	EQUINOX1: equinox of input coordinates, numeric scalar        EQUINOX2: equinox of output coordinates, numeric scalar   OUTPUT: 	x,y,z are changed upon return   NOTES:    The equatorial geocentric rectangular coords are converted       to RA and Dec, precessed in the normal way, then changed       back to x, y and z using unit vectors.  EXAMPLE: 	Precess 1950 equinox coords x, y and z to 2000. 	IDL&gt; precess_xyz,x,y,z, 1950, 2000  HISTORY: 	Written by P. Plait/ACC March 24 1999 	   (unit vectors provided by D. Lindler)        Use /Radian call to PRECESS     W. Landsman     November 2000        Use two parameter call to ATAN   W. Landsman    June 2001  ", "xyzequinox1equinox2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/precipmap.html", "precipmap.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "precipmap.pro", "", "", " NAME:        PrecipMap   PURPOSE:         This is a program that demonstrates how to place an IDL map projection        onto an image that is already in a map projection space. It uses a NOAA        precipitation image that is in a polar stereographic map projection, and        for which the latitudes and longitudes of its four corners are known.         For additional details, see http://www.idlcoyote.com/map_tips/precipmap.html.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:         Map Projection   CALLING SEQUENCE:         IDL&gt; PrecipMap, filename   INPUTS:        filename:   The name of the precipitation file. For demo, download                   ST4.2005010112.24h.bin from http://www.idlcoyote.com/data/ST4.2005010112.24h.bin.   KEYWORDS:        DATA:   Set this keyword to a named variable that on output will contain the scaled data.        PALETTE:    Set this keyword to a named variable that on output will contain the color                   palette used to display the data.   RESTRICTIONS:       Requires files from the Coyote Library:       http://www.idlcoyote.com/documents/programs.html   MODIFICATION HISTORY:    Written by David W. Fanning, 28 April 2006 from code and discussion supplied        by James Kuyper in the IDL newsgroup.   Renamed Colorbar procedure to cgColorbar to avoid conflict with IDL 8 Colorbar function.         26 September 2010. DWF.   Got the polar stereo map projection correct. 5 September 2011. DWF.   Added DATA, MAP, and PALETTE output keywords and updated to use more modern Coyote         Library mapping routines. 2 November 2012. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/precipmap.html#PrecipMap_Annotate", "PrecipMap_Annotate", 'routine in <a href="coyote/precipmap.html">precipmap.pro</a>', "precipmap.pro", "", "PrecipMap_Annotate", "", "axisindexvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/precipmap.html#PrecipMap", "PrecipMap", 'routine in <a href="coyote/precipmap.html">precipmap.pro</a>', "precipmap.pro", "", "PrecipMap", "", "DATAMAPPalettefilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/premat.html", "premat.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "premat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/premat.html#premat", "premat", 'routine in <a href="idlastro/premat.html">premat.pro</a>', "premat.pro", "", "premat", " NAME:        PREMAT  PURPOSE:        Return the precession matrix needed to go from EQUINOX1 to EQUINOX2.  EXPLANTION:        This matrix is used by the procedures PRECESS and BARYVEL to precess        astronomical coordinates   CALLING SEQUENCE:        matrix = PREMAT( equinox1, equinox2, [ /FK4 ] )   INPUTS:        EQUINOX1 - Original equinox of coordinates, numeric scalar.        EQUINOX2 - Equinox of precessed coordinates.   OUTPUT:       matrix - double precision 3 x 3 precession matrix, used to precess                equatorial rectangular coordinates   OPTIONAL INPUT KEYWORDS:        /FK4   - If this keyword is set, the FK4 (B1950.0) system precession                angles are used to compute the precession matrix.   The                default is to use FK5 (J2000.0) precession angles   EXAMPLES:        Return the precession matrix from 1950.0 to 1975.0 in the FK4 system         IDL&gt; matrix = PREMAT( 1950.0, 1975.0, /FK4)   PROCEDURE:        FK4 constants from  Computational Spherical Astronomy  by Taff (1983),        p. 24. (FK4). FK5 constants from  Astronomical Almanac Explanatory        Supplement 1992, page 104 Table 3.211.1.   REVISION HISTORY        Written, Wayne Landsman, HSTX Corporation, June 1994        Converted to IDL V5.0   W. Landsman   September 1997  ", "FK4equinox1equinox2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jhuapl/prime.html", "prime.pro", '.pro file in <a href="idlastro/jhuapl/dir-overview.html">idlastro/jhuapl/ directory</a>', "prime.pro", "", "", " NAME:      PRIME  PURPOSE:      Return an array with the specified number of prime numbers.  EXPLANATATION:      This procedure is similar to PRIMES in the standard IDL distribution,      but stores results in a common block, and so is much faster   CALLING SEQUENCE:        p = prime(n)  INPUTS:        n = desired number of primes, scalar positive integer  OUTPUTS:        p = resulting array of primes, vector of positive integers  COMMON BLOCKS:        prime_com  NOTES:        Note: Primes that have been found in previous calls are          remembered and are not regenerated.  MODIFICATION HISTORY:        R. Sterner  17 Oct, 1985.        R. Sterner,  5 Feb, 1993 --- fixed a bug that missed a few primes.        Converted to IDL V5          March 1999   Copyright (C) 1985, Johns Hopkins University/Applied Physics Laboratory  This software may be used, copied, or redistributed as long as it is not  sold and this copyright notice is reproduced on each copy made.  This  routine is provided as is without any express or implied warranties  whatsoever.  Other limitations apply as described in the file disclaimer.txt.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/prime.html#prime", "prime", 'routine in <a href="idlastro/jhuapl/prime.html">prime.pro</a>', "prime.pro", "", "prime", "", "helpn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/print_struct.html", "print_struct.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "print_struct.pro", "", "", " NAME:        PRINT_STRUCT   PURPOSE:        Print the tag values of an array of structures in nice column format.  EXPLANATION:        The tag names are displayed in a header line.   CALLING SEQUENCE:        print_struct, structure, Tags_to_print [ , title, string_matrix                 FILE=, LUN_OUT=, TNUMS= , TRANGE= , FRANGE=, WHICH=                 FORM_FLOAT =, MAX_ELEMENTS  INPUTS:        structure = array of structured variables         Tags_to_print = string array specifying the names of tags to print.                        Default is to print all tags which are not arrays.  OPTIONAL INPUT KEYWORDS:        FILE = string, optional file name to which output will then be written.        LUN_OUT = Logical unit number for output to an open file,                default is to print to standard output.        TNUMS = tag numbers to print (alternative to specifying tag names).        TRANGE = [beg,end] tag number range to print.        FRANGE = same as TRANGE.        WHICH = optional array of subscripts to select                which structure elements to print.        FORM_FLOAT = string array of three elements specifying                floating point format, ex: FORM=['f','9','2'] means  (F9.2) ,                (default float format is G12.4).        MAX_ELEMENTS = positive integer, print only tags that have less than                        this number of elements (default is no screening).        /NO_TITLE - If set, then the header line of tag names is not printed        /STRINGS : instead of printing, return the array of strings in                fourth argument of procedure: string_matrix.  OUTPUTS:        title = optional string, list of tags printed/processed.        string_matrix = optional output of string matrix of tag values,                        instead of printing to terminal or file, if /STRINGS.  PROCEDURE:        Check the types and lengths of fields to decide formats,        then loop and form text string from requested fields, then print.  HISTORY:        Written: Frank Varosi NASA/GSFC 1991.        F.V.1993, fixed up the print formats.        F.V.1994, added more keyword options.        F.V.1997, added WHICH and MAX_ELEM keyword options.        WBL 1997, Use UNIQ() rather than UNIQUE function        Remove call to N_STRUCT()   W. Landsman  March 2004        Avoid overflow with more than 10000 elements  W. Landsman Nov 2005        Really remove call to N_STRUCT() W. Landsman July 2009  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/print_struct.html#print_struct", "print_struct", 'routine in <a href="idlastro/print_struct.html">print_struct.pro</a>', "print_struct.pro", "", "print_struct", "", "TNUMSFRANGETRANGEFILELUN_OUTSTRINGSFORM_FLOATNO_TITLEWHICH_TO_PRINTMAX_ELEMENTSstructureTags_to_printtitlestring_matrix", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/printpath.html", "printpath.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "printpath.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/printpath.html#PrintPath", "PrintPath", 'routine in <a href="coyote/printpath.html">printpath.pro</a>', "printpath.pro", "", "PrintPath", " NAME:        PrintPath   PURPOSE:         This is a utility program for printing the IDL path in a simplied        format for easy browsing.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilites   CALLING SEQUENCE:         IDL&gt; PrintPath   INPUTS:         filename: The name of the output file. If not present, the output is                  written into the command log window.    KEYWORDS:         None.   MODIFICATION HISTORY:         Written by David W. Fanning, 8 Nov 2007.        Added FILENAME parameter, 9 July 2012. DWF.  ******************************************************************************************;   Copyright (c) 2008, by Fanning Software Consulting, Inc.                                ;   All rights reserved.                                                                    ;                                                                                           ;   Redistribution and use in source and binary forms, with or without                      ;   modification, are permitted provided that the following conditions are met:             ;                                                                                           ;       * Redistributions of source code must retain the above copyright                    ;         notice, this list of conditions and the following disclaimer.                     ;       * Redistributions in binary form must reproduce the above copyright                 ;         notice, this list of conditions and the following disclaimer in the               ;         documentation and/or other materials provided with the distribution.              ;       * Neither the name of Fanning Software Consulting, Inc. nor the names of its        ;         contributors may be used to endorse or promote products derived from this         ;         software without specific prior written permission.                               ;                                                                                           ;   THIS SOFTWARE IS PROVIDED BY FANNING SOFTWARE CONSULTING, INC. ''AS IS'' AND ANY        ;   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES    ;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT     ;   SHALL FANNING SOFTWARE CONSULTING, INC. BE LIABLE FOR ANY DIRECT, INDIRECT,             ;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED    ;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;         ;   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND             ;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT              ;   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS           ;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            ; ******************************************************************************************;  ", "filename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/printwindow.html", "printwindow.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "printwindow.pro", "", "", " NAME:    PRINTWINDOW      This program sends the contents of the specified     window to the default printer. The current window     is used if a window index number is not provided.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:    Graphics   CALLING SEQUENCE:    IDL&gt; PrintWindow, wid   OPTIONAL POSITIONAL PARAMETERS:     WID       The window index number of the window to send to the              printer. !D.Window used by default.   KEYWORD PARAMETERS:     LANDSCAPE  If this keyword is set, the output is in Landscape               mode. Otherwise, Portrait mode is used.     PAGESIZE: Set this keyword to a string indicating the type              of PostScript page size you want. Current values are  LETTER ,               LEGAL , and  A4 . Default is  LETTER .     RGB_ERROR: Some printers (particularly attached to LINUX machines) cannot               load a 24-bit image. You get this error message:                   %Can't set RGB color on an indexed destination.                If this happens to you, set this keyword and the 24-bit image will               be made into a 2D image with color table vectors. Colors are not               quaranteed to be accurate with this method, but in practice it is               not usually too bad.                IDL&gt; PrintWindow, /RGB_Error   MODIFICATION HISTORY:   Written by David W. Fanning based on previous PRINT_IT program. 29 July 2000.  Added RGB_Error keyword. 2 Nov 2004. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/printwindow.html#PRINTWINDOW_PSWINDOW_ASPECT", "PRINTWINDOW_PSWINDOW_ASPECT", 'routine in <a href="coyote/printwindow.html">printwindow.pro</a>', "printwindow.pro", "", "PRINTWINDOW_PSWINDOW_ASPECT", "", "MARGINWindowAspectaspectRatio", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/printwindow.html#PRINTWINDOW_PSWINDOW", "PRINTWINDOW_PSWINDOW", 'routine in <a href="coyote/printwindow.html">printwindow.pro</a>', "printwindow.pro", "", "PRINTWINDOW_PSWINDOW", "", "LANDSCAPECMMARGINPageSizePrinterFudgeXFudgeYFudge", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/printwindow.html#PrintWindow_Error", "PrintWindow_Error", 'routine in <a href="coyote/printwindow.html">printwindow.pro</a>', "printwindow.pro", "", "PrintWindow_Error", "", "TracebackNoNametheMessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/printwindow.html#PrintWindow", "PrintWindow", 'routine in <a href="coyote/printwindow.html">printwindow.pro</a>', "printwindow.pro", "", "PrintWindow", "", "LandscapePageSizeRGB_Errorwid", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/prob_ks.html", "prob_ks.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "prob_ks.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/prob_ks.html#prob_ks", "prob_ks", 'routine in <a href="idlastro/prob_ks.html">prob_ks.pro</a>', "prob_ks.pro", "", "prob_ks", " NAME:        PROB_KS  PURPOSE:        Return the significance of the Kolmogoroff-Smirnov statistic  EXPLANATION:        Returns the significance level of an observed value of the        Kolmogorov-Smirnov statistic D for an effective number of data points        N_eff.   Called by KSONE and KSTWO   CALLING SEQUENCE:        prob_ks, D, N_eff, probks   INPUT PARAMATERS:        D -  Kolmogorov statistic, floating scalar, always non-negative        N_eff - Effective number of data points, scalar.   For a 2 sided test                this is given by (N1*N2)/(N1+N2) where N1 and N2 are the number                of points in each data set.   OUTPUT PARAMETERS:        probks - floating scalar between 0 and 1 giving the significance level of                the K-S statistic.   Small values of PROB suggest that the                distribution being tested are not the same   REVISION HISTORY:        Written     W. Landsman                August, 1992        Corrected typo (termbv for termbf)    H. Ebeling/W.Landsman  March 1996        Probably did not affect numeric result, but iteration went longer        than necessary        Converted to IDL V5.0   W. Landsman   September 1997  ", "DN_effprobks", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/prob_kuiper.html", "prob_kuiper.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "prob_kuiper.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/prob_kuiper.html#prob_kuiper", "prob_kuiper", 'routine in <a href="idlastro/prob_kuiper.html">prob_kuiper.pro</a>', "prob_kuiper.pro", "", "prob_kuiper", " NAME:        PROB_KUIPER  PURPOSE:        Return the significance of the Kuiper statistic  EXPLANATION:        Returns the significance level of an observed value of the        Kuiper statistic D for an effective number of data points        N_eff.   Called by KUIPERONE   CALLING SEQUENCE:        prob_kuiper, D, N_eff, probks   INPUT PARAMATERS:        D -  Kuiper statistic, floating scalar, always non-negative        N_eff - Effective number of data points, scalar.   For a 2 sided test                this is given by (N1*N2)/(N1+N2) where N1 and N2 are the number                of points in each data set.   OUTPUT PARAMETERS:        probks - floating scalar between 0 and 1 giving the significance level of                the Kuiper statistic.   Small values of PROB suggest that the                distribution being tested are not the same   REVISION HISTORY:        Written     W. Landsman                August, 1992        Corrected typo (termbv for termbf)    H. Ebeling/W.Landsman  March 1996        Probably did not affect numeric result, but iteration went longer        than necessary        Converted to IDL V5.0   W. Landsman   September 1997        Adapted from PROB_KS    J. Ballet     July 2003  ", "DN_effprobks", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/programrootdir.html", "programrootdir.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "programrootdir.pro", "", "", " NAME:        ProgramRootDir   PURPOSE:         The purpose of this function is to provide a portable way of finding        the root directory of a program distribution. The directory that is returned        is the directory in which the source file using ProgramRootDir resides.        The program is useful for distributing applications that have a large number        of files in specific program directories.   AUTHOR:         FANNING SOFTWARE CONSULTING        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com   SYNTAX:         theDirectory = ProgramRootDir()   RETURN_VALUE:         theDirectory:   The directory in which the program module running ProgramRootDir resides.   ARGUMENTS:         None.   KEYWORDS:         NOMARK: Normally, the directory that is returned contains a path separator at its                end, so that the directory can easily be concatinated with other file names.                If this keyword is set, the final path separator mark is removed from the                directory name.         ONEUP:  Set this keyword if you want to start your search one directory                *above* where your source program resides (i.e.,  ../Source ).                This allows you, for example, to put your source files in a Source                directory that it at the same level as your Data directory, Utility                directory, etc. See the example below.         TWOUP:  Set this keyword if you want to start your search two directories                *above* where your source program resides (i.e.,  ../../Source ).   EXAMPLE:         Assume that your application files (and source programs) reside in this root directory:             ../app         You have placed a DATA directory immediately under the APP directiory, and a RESOURCES        directory immedately under the DATA directory. Your directory structure looks like this:             ../app                    ; Contains your application and source (*.pro) files.            ../app/data               ; Contains your application data files.            ...app/data/resources     ; Contains your application resource files.         The end user can install the APP directory wherever he or she likes. In your        program, you will identify the DATA and RESOURCES directory like this:              ; Get icon image in resources directory.             filename = Filepath(Root_Dir=ProgramRootDir(), Subdirectory=['data','resources'], 'myicon.tif')              ; Get default image in data directory.             filename = Filepath(Root_Dir=ProgramRootDir(), Subdirectory='data', 'ctscan.tif')         Alternatively, you might set up an application directory structure like this:             ../app                    ; Contains your application files.            ../app/source             ; Contains your application source (*.pro) files.            ../app/data               ; Contains your application data files.            ...app/data/resources     ; Contains your application resource files.         In this case, you would use the ONEUP keyword to find your data and resource files, like this:              ; Get icon image in resources directory.             filename = Filepath(Root_Dir=ProgramRootDir(/ONEUP), Subdirectory=['data','resources'], 'myicon.tif')              ; Get default image in data directory.             filename = Filepath(Root_Dir=ProgramRootDir(/ONEUP), Subdirectory='data', 'ctscan.tif')   MODIFICATION_HISTORY:         Written by: David W. Fanning, 23 November 2003. Based on program SOURCEROOT, written by          Jim Pendleton at RSI (http://www.rsinc.com/codebank/search.asp?FID=35).        Added ONEUP keyword. 10 December 2003. DWF.        Added TWOUP keyword. 8 June 2007. DWF.        Added NOMARK keyword. 8 June 2007. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/programrootdir.html#ProgramRootDir", "ProgramRootDir", 'routine in <a href="coyote/programrootdir.html">programrootdir.pro</a>', "programrootdir.pro", "", "ProgramRootDir", "", "OneUpTwoUpNoMark", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/programrootdir.html", "programrootdir.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "programrootdir.pro", "", "", " NAME:        ProgramRootDir   PURPOSE:         The purpose of this function is to provide a portable way of finding        the root directory of a program distribution. The directory that is returned        is the directory in which the source file using ProgramRootDir resides.        The program is useful for distributing applications that have a large number        of files in specific program directories.   AUTHOR:         FANNING SOFTWARE CONSULTING        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com   SYNTAX:         theDirectory = ProgramRootDir()   RETURN_VALUE:         theDirectory:   The directory in which the program module running ProgramRootDir resides.   ARGUMENTS:         None.   KEYWORDS:         NOMARK: Normally, the directory that is returned contains a path separator at its                end, so that the directory can easily be concatinated with other file names.                If this keyword is set, the final path separator mark is removed from the                directory name.         ONEUP:  Set this keyword if you want to start your search one directory                *above* where your source program resides (i.e.,  ../Source ).                This allows you, for example, to put your source files in a Source                directory that it at the same level as your Data directory, Utility                directory, etc. See the example below.         TWOUP:  Set this keyword if you want to start your search two directories                *above* where your source program resides (i.e.,  ../../Source ).   EXAMPLE:         Assume that your application files (and source programs) reside in this root directory:             ../app         You have placed a DATA directory immediately under the APP directiory, and a RESOURCES        directory immedately under the DATA directory. Your directory structure looks like this:             ../app                    ; Contains your application and source (*.pro) files.            ../app/data               ; Contains your application data files.            ...app/data/resources     ; Contains your application resource files.         The end user can install the APP directory wherever he or she likes. In your        program, you will identify the DATA and RESOURCES directory like this:              ; Get icon image in resources directory.             filename = Filepath(Root_Dir=ProgramRootDir(), Subdirectory=['data','resources'], 'myicon.tif')              ; Get default image in data directory.             filename = Filepath(Root_Dir=ProgramRootDir(), Subdirectory='data', 'ctscan.tif')         Alternatively, you might set up an application directory structure like this:             ../app                    ; Contains your application files.            ../app/source             ; Contains your application source (*.pro) files.            ../app/data               ; Contains your application data files.            ...app/data/resources     ; Contains your application resource files.         In this case, you would use the ONEUP keyword to find your data and resource files, like this:              ; Get icon image in resources directory.             filename = Filepath(Root_Dir=ProgramRootDir(/ONEUP), Subdirectory=['data','resources'], 'myicon.tif')              ; Get default image in data directory.             filename = Filepath(Root_Dir=ProgramRootDir(/ONEUP), Subdirectory='data', 'ctscan.tif')   MODIFICATION_HISTORY:         Written by: David W. Fanning, 23 November 2003. Based on program SOURCEROOT, written by          Jim Pendleton at RSI (http://www.rsinc.com/codebank/search.asp?FID=35).        Added ONEUP keyword. 10 December 2003. DWF.        Added TWOUP keyword. 8 June 2007. DWF.        Added NOMARK keyword. 8 June 2007. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/programrootdir.html#ProgramRootDir", "ProgramRootDir", 'routine in <a href="idlastro/coyote/programrootdir.html">programrootdir.pro</a>', "programrootdir.pro", "", "ProgramRootDir", "", "OneUpTwoUpNoMark", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/ps_background.html", "ps_background.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ps_background.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ps_background.html#PS_Background", "PS_Background", 'routine in <a href="coyote/ps_background.html">ps_background.pro</a>', "ps_background.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "PS_Background", "   Provides a device-independent way to set the background color in the PostScript device.   ", "color         The color that is used for the PostScript background. A polygon of          this color is written to the PostScript file and fills the PostScript           window .   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written, 17 November 2010. DWF.</span> <span class= code-output >  Modified to use gcColorFill so that color is done with decomposed color. 24 Dec 2010. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.         IDL&gt; PS_Background, 'rose'   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/ps_background.html", "ps_background.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "ps_background.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/ps_background.html#PS_Background", "PS_Background", 'routine in <a href="idlastro/coyote/ps_background.html">ps_background.pro</a>', "ps_background.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "PS_Background", "   Provides a device-independent way to set the background color in the PostScript device.   ", "color         The color that is used for the PostScript background. A polygon of          this color is written to the PostScript file and fills the PostScript           window .   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written, 17 November 2010. DWF.</span> <span class= code-output >  Modified to use gcColorFill so that color is done with decomposed color. 24 Dec 2010. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.         IDL&gt; PS_Background, 'rose'   ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/ps_end.html", "ps_end.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "ps_end.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/ps_end.html#PS_END", "PS_END", 'routine in <a href="idlastro/coyote/ps_end.html">ps_end.pro</a>', "ps_end.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "PS_END", " The purpose of PS_START and PS_END is to make it easy to set-up  and close a PostScript file. These programs are used extensively  in all Coyote Graphics routines.   If ImageMagick  is installed  on your computer, you can easily convert PostScript output to GIF, JPEG, PNG, and TIFF  raster output. If Ghostscript is installed  you can convert PostScript output to PDF files. See the appropriate keywords below.   When PS_START is called, the current graphics device is set to  PS  (the PostScript  device). When PS_END is called the current graphics device is returned to the device  in effect when PS_START was called.  ", "ALLOW_TRANSPARENT         To make the background of some image files white, rather than transparent,          you have to set the  -alpha off  string in the ImageMagick call. This          string is automatically added to the ImageMagick call unless this keyword          is set, in which case the string is not added and the image background will          be transparent.  BMP        Set this keyword to convert the PostScript output file to a BMP image. Requires ImageMagick.  DELETE_PS        Setting this keyword will delete the PostScript file that is used as the intermediate         file in the conversion to other file types.  DENSITY        The horizontal and vertical density (in dots per inch, DPI) of the image when the PostScript file         is converted to a raster format by ImageMagick.  IM_OPTIONS        A string of ImageMagick  convert  options that can be passed to the ImageMagick convert         command. No error checking occurs with this string.  FILETYPE        This keyword provides a generic way of setting the BMP, GIF, JPEG, PNG, and TIFF         keywords. Set this keyword to the type of file output desired, and the correct  output          keyword will be set.  GIF        Set this keyword to convert the PostScript output file to a GIF image. Requires ImageMagick.  GS_PATH        This program assumes that UNIX users can access Ghostscript with the  gs          command. It assumes WINDOWS users have installed Ghostscript in either         the C:\gs or C:\Program Files\gs directories. If either of these assumptions         is incorrect, you can specify the directory where the Ghostscript executable         resides with this keyword. (The Windows 32-bit executable is named gswin32c.exe         and the 64-bit executable is named gswin64c.exe.) Passed directly to cgPS2PDF.  JPEG        Set this keyword to convert the PostScript output file to a JPEG image. Requires ImageMagick.  NOFIX        If this keyword is set, then the cgFixPS program to fix IDL landscape         PostScript files is not called.  NOMESSAGE        If this keyword is set, then no error messages are issued. The keyword is used primarily         to allow PS_END to reset the internal structure without a lot of ruckus.  OUTFILENAME        The name of the output filename created by the program.  PDF        Set this keyword to convert the PostScript output file to a PDF file. Requires Ghostscript.  PNG        Set this keyword to convert the PostScript output file to a PNG image. Requires ImageMagick.         Normally, 24-bit PNG files are created. However, if the IM_PNG8 keyword is set with         cgWindow_SetDefs, then PS_End will create an 8-bit PNG file instead.  RESIZE        If an image is being created from the PostScript file, it is often resized by some         amount. You can use this keyword to change the value (e.g, RESIZE=100).         The value is passed on to resize argument as a percentage in the ImageMagick call.  SHOWCMD        Set this command to show the command used to do any PostScript coversions.  TIFF        Set this keyword to convert the PostScript output file to a TIFF image. Requires ImageMagick.  UNIX_CONVERT_CMD         There are a number of commands on UNIX machines for converting PostScript files          to PDF files. This program assumes you are using Ghostscript to do the conversion          for you. The Ghostscript command on most UNIX machines is  gs , which is used if          this keyword is undefined. However, if you would prefer to use another program to do          the conversion for you, you can specify the name of the command here. For example,           pstopdf  or  epstopdf . In creating the actual command, this command will be          separated by a space from the input file name. In other words, if the alternative          conversion command was  pstopdf , the actual command would be  pstopdf  +     + ps_file.          Any output filename is ignored. This command does not apply to Macintosh or Windows          computers. Passed directly to cgPS2PDF.  WIDTH         Set the keyword to the final pixel width of the output raster image. Applies          only to raster image file output (e.g., JPEG, PNG, TIFF, etc.). The height of          the image is chosen to preserve the image aspect ratio.   ", "Utilities Graphics", "     Change History: <span class= code-output > Written by: David W. Fanning, 20 May 2008.</span> <span class= code-output > Slight modification to allow filenames with spaces in them.</span> <span class= code-output > Added NoMatch keyword. 17 March 2009. DWF.</span> <span class= code-output > Added a number of keywords to make these commands more configurable. 19 March 2009. DWF.</span> <span class= code-output > Only set thickness system variables if starting system variables are set to their</span> <span class= code-output >     default values (namely, 0). This allows users to set their own system variables</span> <span class= code-output >     before they call PS_START, rather than after. 23 March  2009. DWF.</span> <span class= code-output > Moved PS_END to its own file to allow the IDLExBr_Assistant to work properly. 7 April 2009. DWF.</span> <span class= code-output > Reordered ImageMagick commands to put them in the proper sequence to get  alpha  switch to work. 23 April 2009. DWF.</span> <span class= code-output > Put the switches *ahead* of the PostScript file name. Now resizing works and default size reduction</span> <span class= code-output >     returned to 25%. 23 April 2009. DWF.</span> <span class= code-output > Still having a devil of a time getting the ImageMagick  convert  command right. Fonts</span> <span class= code-output >     have become a problem. Now trying a  flatten  option in the command. 12 May 2009. DWF.</span> <span class= code-output > If the PostScript file is in Landscape mode, it is now  fixed  with cgFixPS to allow it</span> <span class= code-output >     to be displayed right-side up in PostScript viewers. 8 August 2009. DWF.</span> <span class= code-output > Fixed a problem in not checking the GIF keyword properly. 4 December 2009. DWF.</span> <span class= code-output > Added NOFIX keyword to the program. 1 November 2010. DWF.</span> <span class= code-output > Added better handing of errors coming from cgFixPS after update to FIXPS. 15 November 2010. DWF.</span> <span class= code-output > Added DELETE_PS keyword. 16 Jan 2011. DWF.</span> <span class= code-output > Better protection of code from not finding ImageMagick. 17 Jan 2011. DWF.</span> <span class= code-output > Collecting result of SPAWN command. Only printing if QUIET=0. 16 Feb 2011. DWF.</span> <span class= code-output > Changes to handle inability to create raster files from PS encapsulated files in</span> <span class= code-output >     landscape mode. Added NOMESSAGE keyword. 26 Aug 2011. DWF.</span> <span class= code-output >  Added PDF keyword. Requires Ghostscript to use. 6 Dec 2011. DWF.</span> <span class= code-output >  Added SHOWCMD keyword. 9 Dec 2011. DWF.</span> <span class= code-output >  Added OUTFILENAME keyword. 11 Dec 2011. DWF.</span> <span class= code-output >  Just realized a BMP case is missing from one of the CASE statements. 12 Dec 2011. DWF.</span> <span class= code-output >  Added GS_PATH and UNIX_CONVERT_CMD keywords to support PDF output. 14 Dec 2011. DWF.</span> <span class= code-output >  Add the WIDTH keyword. 3 April 2012. DWF.</span> <span class= code-output >  Added a check for IM_PNG8 keyword, using cgWindow_GetDefs to see if an 8-bit or 24-bit</span> <span class= code-output >     PNG file should be created. 3 April 2012. DWF.</span> <span class= code-output >  Modified the ImageMagick commands that resizes the image to a particular width. Necessary</span> <span class= code-output >     to accommodate PNG8 file output. Using ImageMagick 6.7.2-9. 4 April 2012. DWF.</span> <span class= code-output >  Added FILETYPE keyword to provide a generic way of creating raster file output. 30 August 2012. DWF.</span> <span class= code-output >  Modified to use the cgPS2Raster program so code doesn't have to be maintained in</span> <span class= code-output >      two places. 15 Oct 2012. DWF.</span>       Copyright (c) 2008-2012, Fanning Software Consulting, Inc.      To create a line plot in a PostScript file named lineplot.ps and     also create a PNG file named lineplot.png for display in a browser,     type these commands: <span class= code-output >   PS_Start, FILENAME='lineplot.ps'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='navy', /NODATA, XTITLE='Time', YTITLE='Signal'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='indian red', /OVERPLOT</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='olive', PSYM=2, /OVERPLOT</span> <span class= code-output >   PS_End, /PNG</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/ps_end.html", "ps_end.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ps_end.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ps_end.html#PS_END", "PS_END", 'routine in <a href="coyote/ps_end.html">ps_end.pro</a>', "ps_end.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "PS_END", " The purpose of PS_START and PS_END is to make it easy to set-up  and close a PostScript file. These programs are used extensively  in all Coyote Graphics routines.   If ImageMagick  is installed  on your computer, you can easily convert PostScript output to GIF, JPEG, PNG, and TIFF  raster output. If Ghostscript is installed  you can convert PostScript output to PDF files. See the appropriate keywords below.   When PS_START is called, the current graphics device is set to  PS  (the PostScript  device). When PS_END is called the current graphics device is returned to the device  in effect when PS_START was called.  ", "ALLOW_TRANSPARENT         To make the background of some image files white, rather than transparent,          you have to set the  -alpha off  string in the ImageMagick call. This          string is automatically added to the ImageMagick call unless this keyword          is set, in which case the string is not added and the image background will          be transparent.  BMP        Set this keyword to convert the PostScript output file to a BMP image. Requires ImageMagick.  DELETE_PS        Setting this keyword will delete the PostScript file that is used as the intermediate         file in the conversion to other file types.  DENSITY        The horizontal and vertical density (in dots per inch, DPI) of the image when the PostScript file         is converted to a raster format by ImageMagick.  IM_OPTIONS        A string of ImageMagick  convert  options that can be passed to the ImageMagick convert         command. No error checking occurs with this string.  FILETYPE        This keyword provides a generic way of setting the BMP, GIF, JPEG, PNG, and TIFF         keywords. Set this keyword to the type of file output desired, and the correct  output          keyword will be set.  GIF        Set this keyword to convert the PostScript output file to a GIF image. Requires ImageMagick.  GS_PATH        This program assumes that UNIX users can access Ghostscript with the  gs          command. It assumes WINDOWS users have installed Ghostscript in either         the C:\gs or C:\Program Files\gs directories. If either of these assumptions         is incorrect, you can specify the directory where the Ghostscript executable         resides with this keyword. (The Windows 32-bit executable is named gswin32c.exe         and the 64-bit executable is named gswin64c.exe.) Passed directly to cgPS2PDF.  JPEG        Set this keyword to convert the PostScript output file to a JPEG image. Requires ImageMagick.  NOFIX        If this keyword is set, then the cgFixPS program to fix IDL landscape         PostScript files is not called.  NOMESSAGE        If this keyword is set, then no error messages are issued. The keyword is used primarily         to allow PS_END to reset the internal structure without a lot of ruckus.  OUTFILENAME        The name of the output filename created by the program.  PDF        Set this keyword to convert the PostScript output file to a PDF file. Requires Ghostscript.  PNG        Set this keyword to convert the PostScript output file to a PNG image. Requires ImageMagick.         Normally, 24-bit PNG files are created. However, if the IM_PNG8 keyword is set with         cgWindow_SetDefs, then PS_End will create an 8-bit PNG file instead.  RESIZE        If an image is being created from the PostScript file, it is often resized by some         amount. You can use this keyword to change the value (e.g, RESIZE=100).         The value is passed on to resize argument as a percentage in the ImageMagick call.  SHOWCMD        Set this command to show the command used to do any PostScript coversions.  TIFF        Set this keyword to convert the PostScript output file to a TIFF image. Requires ImageMagick.  UNIX_CONVERT_CMD         There are a number of commands on UNIX machines for converting PostScript files          to PDF files. This program assumes you are using Ghostscript to do the conversion          for you. The Ghostscript command on most UNIX machines is  gs , which is used if          this keyword is undefined. However, if you would prefer to use another program to do          the conversion for you, you can specify the name of the command here. For example,           pstopdf  or  epstopdf . In creating the actual command, this command will be          separated by a space from the input file name. In other words, if the alternative          conversion command was  pstopdf , the actual command would be  pstopdf  +     + ps_file.          Any output filename is ignored. This command does not apply to Macintosh or Windows          computers. Passed directly to cgPS2PDF.  WIDTH         Set the keyword to the final pixel width of the output raster image. Applies          only to raster image file output (e.g., JPEG, PNG, TIFF, etc.). The height of          the image is chosen to preserve the image aspect ratio.   ", "Utilities Graphics", "     Change History: <span class= code-output > Written by: David W. Fanning, 20 May 2008.</span> <span class= code-output > Slight modification to allow filenames with spaces in them.</span> <span class= code-output > Added NoMatch keyword. 17 March 2009. DWF.</span> <span class= code-output > Added a number of keywords to make these commands more configurable. 19 March 2009. DWF.</span> <span class= code-output > Only set thickness system variables if starting system variables are set to their</span> <span class= code-output >     default values (namely, 0). This allows users to set their own system variables</span> <span class= code-output >     before they call PS_START, rather than after. 23 March  2009. DWF.</span> <span class= code-output > Moved PS_END to its own file to allow the IDLExBr_Assistant to work properly. 7 April 2009. DWF.</span> <span class= code-output > Reordered ImageMagick commands to put them in the proper sequence to get  alpha  switch to work. 23 April 2009. DWF.</span> <span class= code-output > Put the switches *ahead* of the PostScript file name. Now resizing works and default size reduction</span> <span class= code-output >     returned to 25%. 23 April 2009. DWF.</span> <span class= code-output > Still having a devil of a time getting the ImageMagick  convert  command right. Fonts</span> <span class= code-output >     have become a problem. Now trying a  flatten  option in the command. 12 May 2009. DWF.</span> <span class= code-output > If the PostScript file is in Landscape mode, it is now  fixed  with cgFixPS to allow it</span> <span class= code-output >     to be displayed right-side up in PostScript viewers. 8 August 2009. DWF.</span> <span class= code-output > Fixed a problem in not checking the GIF keyword properly. 4 December 2009. DWF.</span> <span class= code-output > Added NOFIX keyword to the program. 1 November 2010. DWF.</span> <span class= code-output > Added better handing of errors coming from cgFixPS after update to FIXPS. 15 November 2010. DWF.</span> <span class= code-output > Added DELETE_PS keyword. 16 Jan 2011. DWF.</span> <span class= code-output > Better protection of code from not finding ImageMagick. 17 Jan 2011. DWF.</span> <span class= code-output > Collecting result of SPAWN command. Only printing if QUIET=0. 16 Feb 2011. DWF.</span> <span class= code-output > Changes to handle inability to create raster files from PS encapsulated files in</span> <span class= code-output >     landscape mode. Added NOMESSAGE keyword. 26 Aug 2011. DWF.</span> <span class= code-output >  Added PDF keyword. Requires Ghostscript to use. 6 Dec 2011. DWF.</span> <span class= code-output >  Added SHOWCMD keyword. 9 Dec 2011. DWF.</span> <span class= code-output >  Added OUTFILENAME keyword. 11 Dec 2011. DWF.</span> <span class= code-output >  Just realized a BMP case is missing from one of the CASE statements. 12 Dec 2011. DWF.</span> <span class= code-output >  Added GS_PATH and UNIX_CONVERT_CMD keywords to support PDF output. 14 Dec 2011. DWF.</span> <span class= code-output >  Add the WIDTH keyword. 3 April 2012. DWF.</span> <span class= code-output >  Added a check for IM_PNG8 keyword, using cgWindow_GetDefs to see if an 8-bit or 24-bit</span> <span class= code-output >     PNG file should be created. 3 April 2012. DWF.</span> <span class= code-output >  Modified the ImageMagick commands that resizes the image to a particular width. Necessary</span> <span class= code-output >     to accommodate PNG8 file output. Using ImageMagick 6.7.2-9. 4 April 2012. DWF.</span> <span class= code-output >  Added FILETYPE keyword to provide a generic way of creating raster file output. 30 August 2012. DWF.</span> <span class= code-output >  Modified to use the cgPS2Raster program so code doesn't have to be maintained in</span> <span class= code-output >      two places. 15 Oct 2012. DWF.</span> <span class= code-output >  Added a check for ImageMagick and an informational message for raster operations. 4 Nov 2012. DWF.</span> <span class= code-output >  Fixed a problem in which the NOMESSAGE keyword was not getting passed along to cgPS2Raster. 5 Nov 2012. DWF.</span> <span class= code-output >  Fixed a problem where I was not passing the PORTRAIT keyword to cgPS2Raster properly. 22 Jan 2013. DWF.</span> <span class= code-output >  Modified to restore the input True-Type font for PostScript devices. 22 May 2013. DWF.</span>       Copyright (c) 2008-2012, Fanning Software Consulting, Inc.      To create a line plot in a PostScript file named lineplot.ps and     also create a PNG file named lineplot.png for display in a browser,     type these commands: <span class= code-output >   PS_Start, FILENAME='lineplot.ps'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='navy', /NODATA, XTITLE='Time', YTITLE='Signal'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='indian red', /OVERPLOT</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='olive', PSYM=2, /OVERPLOT</span> <span class= code-output >   PS_End, /PNG</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/ps_start.html", "ps_start.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "ps_start.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/ps_start.html#PS_START", "PS_START", 'routine in <a href="coyote/ps_start.html">ps_start.pro</a>', "ps_start.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "PS_START", " The purpose of PS_START and PS_END is to make it easy to set-up  and close a PostScript file. These programs are used extensively  in all Coyote Graphics routines.   If ImageMagick  is installed  on your computer, you can easily convert PostScript output to GIF, JPEG, PNG, and TIFF  raster output. If Ghostscript is installed  you can convert PostScript output to PDF files. See the appropriate keywords to  PS_END.   When PS_START is called, the current graphics device is set to  PS  (the PostScript  device). When PS_END is called the current graphics device is returned to the device  in effect when PS_START was called.   PS_Start uses the current display window as a template for the Postscript  file. Thus, if the display window is wider than it is higher, output is  in Landscape mode. To set the size of the PostScript  window  yourself, be  sure to set the NOMATCH keyword to 1.   To display surface plots correctly the FONT keyword should be set to 1.  Otherwise, the default font is 0, or hardware fonts when outputting to  PostScript.   You can easily configure any modifications you like for your PostScript output  by setting fields in the plot and axis system variables (!P, !X, !Y, and !Z).  The modifications currently made by default in this program are these: <span class= code-output >   !P.Thick = 3</span> <span class= code-output >   !P.CharThick = 3</span> <span class= code-output >   !X.Thick = 3</span> <span class= code-output >   !Y.Thick = 3</span> <span class= code-output >   !Z.Thick = 3</span> <span class= code-output >   !P.Font = 0</span>  The !P.Charsize variable is set differently on Windows computers, and depending  on whether !P.MULTI is being used. On Windows the default is 1.25, or 1.00 for  multiple plots. On other computers, the default is 1.5, or 1.25 for multiple plots.  If true-type fonts are being used (FONT=1), the default is 1.5, or 1.25 for  multiple plots.   The PS_Start program contains the common block, _$FSC_PS_START_. See the FSC_PS_SETUP__DEFINE  program in the Coyote Library for its definition.   ", "CANCEL         An output keyword that is set to 1 if the user cancelled from          PS_Config. Otherwise, set to 0.  CHARSIZE         If this keyword is set, the !P.Charsize variable is set to this value until PS_END is called.  DEFAULT_THICKNESS         Sets the following system variables to this value while creating PostScript output:          !P.Thick, !P.CharThick, !X.Thick, !Y.Thick, !Z.Thick. These variables are returned to          their original values by PS_End. A system variable is set to this value only if it          currently contains the IDL default value of 0.0. If it is set to anything else, this          default thickness value is ignored.  DEJAVUSANS         Set this keyword to select the DejaVuSans true-type font for PostScript output.          This option is ONLY available in IDL 8.2 or higher and/or you have installed the          DejaVuSans true-type font in your font directory.  FILENAME         The name of the PostScript file created. An alternative, and older, way of setting          the filename parameter.  FONT         Set this to the type of font you want. A -1 selects Hershey fonts, a 0 selects hardware          fonts (Helvetica, normally), and a 1 selects a True-Type font. Set to 0 by default.  ENCAPSULATED         Set this keyword to produce encapsulated PostScript output.  GUI         The default behavior is to use PSCONFIG to configure the PostScript device silently.          If you wish to allow the user to interatively configure the PostScript device, set this          keyword.  KEYWORDS         This output keyword contains the keyword structure returned from PS_Config.  LANDSCAPE         Set this keyword to produce landscape PostScript output.  NOMATCH         Normally, PS_Start will try to  match  the aspect ratio of the PostScript file  window           to the current display window. If this keyword is set, then this doesn't occur, giving          the user the option of specifying the size and offsets of the PostScript window directly          though appropriate keywords.  QUIET         If set, informational messages are not set.  SCALE_FACTOR         Set this to the PostScript scale factor. By default: 1.  TT_FONT         The name of a true-type font to use. Using this keyword sets Font to 1.  _REF_EXTRA         Any keyword appropriate for the PostScript configuration program PSConfig, from          the Coyote Library can be used with PS_Start.   filename        The name of the PostScript file created.   ", "Utilities Graphics", "     Change History: <span class= code-output > Written by: David W. Fanning, 20 May 2008.</span> <span class= code-output > Slight modification to allow filenames with spaces in them.</span> <span class= code-output > Added NoMatch keyword. 17 March 2009. DWF.</span> <span class= code-output > Added a number of keywords to make these commands more configurable. 19 March 2009. DWF.</span> <span class= code-output > Only set thickness system variables if starting system variables are set to their</span> <span class= code-output >     default values (namely, 0). This allows users to set their own system variables</span> <span class= code-output >     before they call PS_START, rather than after. 23 March  2009. DWF.</span> <span class= code-output > Moved PS_END to its own file to allow the IDLExBr_Assistant to work properly. 7 April 2009. DWF.</span> <span class= code-output > Modified to allow PostScript page type to be stored for future processing with cgFixPS. 9 August 2009. DWF.</span> <span class= code-output > Added NoFix keyword to PS_END calls to repair previous, but unused set-ups. 1 Nov 2010. DWF.</span> <span class= code-output > Added Charsize keyword to PS_START. 14 Nov 2010. DWF.</span> <span class= code-output > Changed the way default character sizes are set. 19 Nov 2010. DWF.</span> <span class= code-output > Added CANCEL and KEYWORDS output keywords. 16 Jan 2011. DWF.</span> <span class= code-output > Changes to handle inability to create raster files from PS encapsulated files in</span> <span class= code-output >     landscape mode. 26 Aug 2011. DWF.</span> <span class= code-output > The SCALE_FACTOR is called at the time the PostScript file is opened to avoid problems</span> <span class= code-output >     with the bounding box not being set to the correct values. 26 October 2011. DWF.</span> <span class= code-output > Created a DEFAULT_THICKNESS keyword to set the default thicknesses of PostScript</span> <span class= code-output >     system variables. 14 Dec 2011. DWF.</span> <span class= code-output > Moved the true-type font set-up to *after* changing the graphics device to PostScript. 10 Jan 2012. DWF.</span> <span class= code-output > Added DejaVuSans keyword to allow this true-type font to be used in PostScript Output. 21 Dec 2012. DWF.</span> <span class= code-output > Modified so that the PostScript device can keep a consistent interface when using True-Type</span> <span class= code-output >    fonts. Requires using cgSet_TTFont to select True-Type fonts. 22 May 2013. DWF.</span>       Copyright (c) 2008-2013, Fanning Software Consulting, Inc.      To create a line plot in a PostScript file named lineplot.ps and     also create a PNG file named lineplot.png for display in a browser,     type these commands: <span class= code-output >   PS_Start, FILENAME='lineplot.ps'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='navy', /NODATA, XTITLE='Time', YTITLE='Signal'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='indian red', /OVERPLOT</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='olive', PSYM=2, /OVERPLOT</span> <span class= code-output >   PS_End, /PNG</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/ps_start.html", "ps_start.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "ps_start.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/ps_start.html#PS_START", "PS_START", 'routine in <a href="idlastro/coyote/ps_start.html">ps_start.pro</a>', "ps_start.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "PS_START", " The purpose of PS_START and PS_END is to make it easy to set-up  and close a PostScript file. These programs are used extensively  in all Coyote Graphics routines.   If ImageMagick  is installed  on your computer, you can easily convert PostScript output to GIF, JPEG, PNG, and TIFF  raster output. If Ghostscript is installed  you can convert PostScript output to PDF files. See the appropriate keywords to  PS_END.   When PS_START is called, the current graphics device is set to  PS  (the PostScript  device). When PS_END is called the current graphics device is returned to the device  in effect when PS_START was called.   PS_Start uses the current display window as a template for the Postscript  file. Thus, if the display window is wider than it is higher, output is  in Landscape mode. To set the size of the PostScript  window  yourself, be  sure to set the NOMATCH keyword to 1.   To display surface plots correctly the FONT keyword should be set to 1.  Otherwise, the default font is 0, or hardware fonts when outputting to  PostScript.   You can easily configure any modifications you like for your PostScript output  by setting fields in the plot and axis system variables (!P, !X, !Y, and !Z).  The modifications currently made by default in this program are these: <span class= code-output >   !P.Thick = 3</span> <span class= code-output >   !P.CharThick = 3</span> <span class= code-output >   !X.Thick = 3</span> <span class= code-output >   !Y.Thick = 3</span> <span class= code-output >   !Z.Thick = 3</span> <span class= code-output >   !P.Font = 0</span>  The !P.Charsize variable is set differently on Windows computers, and depending  on whether !P.MULTI is being used. On Windows the default is 1.25, or 1.00 for  multiple plots. On other computers, the default is 1.5, or 1.25 for multiple plots.  If true-type fonts are being used (FONT=1), the default is 1.5, or 1.25 for  multiple plots.   The PS_Start program contains the common block, _$FSC_PS_START_. See the FSC_PS_SETUP__DEFINE  program in the Coyote Library for its definition.   ", "CANCEL         An output keyword that is set to 1 if the user cancelled from          PS_Config. Otherwise, set to 0.  CHARSIZE         If this keyword is set, the !P.Charsize variable is set to this value until PS_END is called.  DEFAULT_THICKNESS         Sets the following system variables to this value while creating PostScript output:          !P.Thick, !P.CharThick, !X.Thick, !Y.Thick, !Z.Thick. These variables are returned to          their original values by PS_End. A system variable is set to this value only if it          currently contains the IDL default value of 0.0. If it is set to anything else, this          default thickness value is ignored.  FILENAME         The name of the PostScript file created. An alternative, and older, way of setting          the filename parameter.  FONT         Set this to the type of font you want. A -1 selects Hershey fonts, a 0 selects hardware          fonts (Helvetica, normally), and a 1 selects a True-Type font. Set to 0 by default.  ENCAPSULATED         Set this keyword to produce encapsulated PostScript output.  GUI         The default behavior is to use PSCONFIG to configure the PostScript device silently.          If you wish to allow the user to interatively configure the PostScript device, set this          keyword.  KEYWORDS         This output keyword contains the keyword structure returned from PS_Config.  LANDSCAPE         Set this keyword to produce landscape PostScript output.  NOMATCH         Normally, PS_Start will try to  match  the aspect ratio of the PostScript file  window           to the current display window. If this keyword is set, then this doesn't occur, giving          the user the option of specifying the size and offsets of the PostScript window directly          though appropriate keywords.  QUIET         If set, informational messages are not set.  SCALE_FACTOR         Set this to the PostScript scale factor. By default: 1.  TT_FONT         The name of a true-type font to use if FONT=1.  _REF_EXTRA         Any keyword appropriate for the PostScript configuration program PSConfig, from          the Coyote Library can be used with PS_Start.   filename        The name of the PostScript file created.   ", "Utilities Graphics", "     Change History: <span class= code-output > Written by: David W. Fanning, 20 May 2008.</span> <span class= code-output > Slight modification to allow filenames with spaces in them.</span> <span class= code-output > Added NoMatch keyword. 17 March 2009. DWF.</span> <span class= code-output > Added a number of keywords to make these commands more configurable. 19 March 2009. DWF.</span> <span class= code-output > Only set thickness system variables if starting system variables are set to their</span> <span class= code-output >     default values (namely, 0). This allows users to set their own system variables</span> <span class= code-output >     before they call PS_START, rather than after. 23 March  2009. DWF.</span> <span class= code-output > Moved PS_END to its own file to allow the IDLExBr_Assistant to work properly. 7 April 2009. DWF.</span> <span class= code-output > Modified to allow PostScript page type to be stored for future processing with cgFixPS. 9 August 2009. DWF.</span> <span class= code-output > Added NoFix keyword to PS_END calls to repair previous, but unused set-ups. 1 Nov 2010. DWF.</span> <span class= code-output > Added Charsize keyword to PS_START. 14 Nov 2010. DWF.</span> <span class= code-output > Changed the way default character sizes are set. 19 Nov 2010. DWF.</span> <span class= code-output > Added CANCEL and KEYWORDS output keywords. 16 Jan 2011. DWF.</span> <span class= code-output > Changes to handle inability to create raster files from PS encapsulated files in</span> <span class= code-output >     landscape mode. 26 Aug 2011. DWF.</span> <span class= code-output > The SCALE_FACTOR is called at the time the PostScript file is opened to avoid problems</span> <span class= code-output >     with the bounding box not being set to the correct values. 26 October 2011. DWF.</span> <span class= code-output > Created a DEFAULT_THICKNESS keyword to set the default thicknesses of PostScript</span> <span class= code-output >     system variables. 14 Dec 2011. DWF.</span> <span class= code-output > Moved the true-type font set-up to *after* changing the graphics device to PostScript. 10 Jan 2012. DWF.</span>       Copyright (c) 2008-2011, Fanning Software Consulting, Inc.      To create a line plot in a PostScript file named lineplot.ps and     also create a PNG file named lineplot.png for display in a browser,     type these commands: <span class= code-output >   PS_Start, FILENAME='lineplot.ps'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='navy', /NODATA, XTITLE='Time', YTITLE='Signal'</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='indian red', /OVERPLOT</span> <span class= code-output >   cgPlot, Findgen(11), COLOR='olive', PSYM=2, /OVERPLOT</span> <span class= code-output >   PS_End, /PNG</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/psconfig.html", "psconfig.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "psconfig.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/psconfig.html#PSConfig", "PSConfig", 'routine in <a href="coyote/psconfig.html">psconfig.pro</a>', "psconfig.pro", "     FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "PSConfig", " The purpose of this program is to allow the user to configure the PostScript device  with or without a graphical user interface. This function is essentially a simplified  wrapper to the FSC_PSConfig object, which provides a powerful graphical user interface  for configuring the IDL PostScript device.      ", "AvantGarde        Set this keyword to select the AvantGarde PostScript font.  Bits_per_Pixel        The number of image bits saved for each image pixel: 2, 4, or 8.  Bold        Set this keyword to select a bold PostScript font.  BookStyle        Set this keyword to specify that the book version of the current PostScript         font should be used.  Bkman        Set this keyword to select the Bookman PostScript font.  Cancel        If this keyword is set to 1, the user hit the Cancel button in the GUI.  CMYK        Set this keyword to use CMYK colors instead of RGB colors in the output.  Color        Set this keyword to 1 to select color or gray-scale output.  Courier        Set this keyword to select the Courier font.  Debug        Set this keyword to get traceback information when errors are encountered.  Decomposed        Set this keyword to turn on 24-bit color support. Set to zero to select indexed color         support. Applies only to IDL versions 7.1 and higher.  DefaultSetup        Set this keyword to the  name  of a default style. Current styles (you can easily         create and add your own to the source code) are the following: <span class= code-output >   System (Portrait)  - The normal  default  system set-up. Also,  System .</span> <span class= code-output >   System (Landcape)  - The normal  default  landscape system set-up.</span> <span class= code-output >   Centered (Portrait)  - The window centered on the page. Also,  Center  or  Centered .</span> <span class= code-output >   Centered (Landscape)  - The window centered on the landscape page. Also,  Landscape .</span> <span class= code-output >   Square (Portrait)  - A square plot, centered on the page.</span> <span class= code-output >   Square (Landscape)  - A square plot, centered on the landscape page.</span> <span class= code-output >   Figure (Small)  - A small encapsulated figure size, centered on page. Also,  Encapsulated  or  Encapsulate .</span> <span class= code-output >   Figure (Large)  - A larger encapsulated figure size, centered on page. Also,  Figure .</span> <span class= code-output >   Color (Portrait)  - A  centered  plot, with color turned on. Also,  Color .</span> <span class= code-output >   Color (Landscape)  - A  centered  landscape plot, with color turned on.</span>  Demi        Set this keyword to select the Demi font style.  Directory        Set this keyword to the name of the starting directory. The current directory is used by default.  Encapsulated        Set this keyword to 1 to select Encapsulated PostScript output.  European        This keyword is depreciated in favor or Metric.  Filename        Set this keyword to the name of the PostScript file you wish to create.  FontInfo        Set this keyword if you wish to see font information in the GUI interface. Since font         information has to be interpreted to be used, most users prefer not to see this information         on the GUI.  FontSize        Set this keyword to the desired font size. Values should be between 6 and 32.  FontType        This keyword is both an input and an output keyword. It allows you to specify the font         type you wish to use, and it also returns the font type the user selected in the GUI.         The user is responsibe for configuring the PostScript graphical commands with the appropriate font         type, because it cannot be done via the normal Device keyword channel. Normally, this is set to         !P.Font.  Group_Leader        Set this keyword to the identifer of a widget group leader. This program will be destroyed         if the group leader application is destroyed.  Helvetica        Set this keyword to select the Helvetica PostScript font.  Inches        Set this keyword to indicate sizes and offsets are in inches as opposed to centimeters.         Set to zero by default if the Metric keyword is set.  Italic        Set this keyword to select italic type font styling.  Isolatin        Set this keyword to select ISOlatin1 encoding.  Landscape        Set this keyword to select Landscape page output. Portrait page output is the default.  Light        Set this keyword to select the Light PostScript style for the font.  Match        If this keyword is set, the initial PostScript window will match the aspect ratio of the         current graphics window.  Medium        Set this keyword to select the Medium PostScript style for the font.  Metric        Set this keyword to indicate metric mode (i.e., A4 page and centimeter units).  Name        Set this keyword to the  name  of the created FSC_PSConfig object.  Narrow        Set this keyword to select the Narrow font style.  NoGUI        Set this keyword if you don't want a graphical user interface, but just want to get the         return structure of keywords.  Oblique        Set this keyword to select the Oblique font style.  PageType        Set this keyword to the  type  of page. Possible values are: <span class= code-output >  Letter  - 8.5 by 11 inches. (Default, unless the Metric keyword is set.)</span> <span class= code-output >  Legal  - 8.5 by 14 inches.</span> <span class= code-output >  Ledger  - 11 by 17 inches.</span> <span class= code-output >  A4  - 21.0 by 29.7 centimeters. (Default, if the Metric keyword is set.)</span>  Palatino        Set this keyword to select the Palatino font.  Preview        Set this keyword to select the type of PostScript preview to add to the file. Values 0, 1, or 2.         Adding previews to PostScript files created in IDL is not recommended as the results are always         poor. There are better methods to add PostScript previews using other software, such as GhostView.  Schoolbook        Set this keyword to select the Schoolbook PostScript font.  Set_Font        Set this keyword to the name of a PostScript hardware or true-type font you want to use.         Note that if you specify a true-type font, you must also set the TrueType keyword.  Symbol        Set this keyword to select the Symbol PostScript font.  Times        Set this keyword to select the Times PostScript font.  TrueType        Set this keyword to use true-type fonts in the PostScript output. Set the name of the font         with the Set_Font keyword.  XOffset        Set this keyword to the X Offset. Uses  System (Portrait)  defaults. (Note: offset         calculated from lower-left corner of page.)  XSize        Set this keyword to the X size of the PostScript  window . Uses  System (Portrait)  defaults.  YOffset        Set this keyword to the Y Offset. Uses  System (Portrait)  defaults. (Note: offset         calculated from lower-left corner of page.)  YSize        Set this keyword to the Y size of the PostScript  window . Uses  System (Portrait)  defaults.  ZapfChancery        Set this keyword to select the ZapfChancery PostScript font.  ZapfDingbats        Set this keyword to select the ZapfDingbats PostScript font.   psObject        An FSC_PSCONFIG object reference of the sort returned by this function         can be passed as an argument to the function. It is up to the user to destroy         the object if passed as an argument. Passing an object argument essentially         by-passes the rest of the keywords and the GUI will take its initial values         from the values in the input object. This allows the programmer to keep track         of how the user last configured the GUI and to set it up in exactly the same         way the next time the GUI is invoked.   ", "Utilities Graphics", "     Change History: <span class= code-output >  Written by David W. Fanning, 31 January 2000.</span> <span class= code-output >  Added NOGUI keyword to allow default keywords to be obtained without</span> <span class= code-output >  user interaction. 11 Oct 2004. DWF.</span> <span class= code-output >  Added CMYK option 24 August 2007. Requires LANGUAGE_LEVEL=2 printer. L. Anderson</span> <span class= code-output >  Updated for IDL 7.1 and 24-bt color PostScript support. 24 May 2009. DWF.</span> <span class= code-output >  Added MATCH keyword. 14 Dec 2010. DWF.</span> <span class= code-output >  Changed ENCAPSULATE keyword to ENCAPSULATED, which is what I always type! 29 Jan 2011. DWF.</span> <span class= code-output >  Depreciated EUROPEAN keyword in favor of METRIC. 31 Jan 2011. DWF.</span>       Copyright (c) 2000-2012, Fanning Software Consulting, Inc.      To have the user specify PostScript configuration parameters, use     the program like this: <span class= code-output >  keywords = PSConfig(Cancel=cancelled)</span> <span class= code-output >  IF cancelled THEN RETURN</span> <span class= code-output >  thisDevice = !D.Name</span> <span class= code-output >  Set_Plot, 'PS'</span> <span class= code-output >  Device, _Extra=keywords</span> <span class= code-output >  Plot, findgen(11) ; Or whatever graphics commands you use.</span> <span class= code-output >  Device, /Close_File</span> <span class= code-output >  Set_Plot, thisDevice</span>      A structure of keywords, appropriate for configuring the PostScript device, is returned.     These keywords are generally passed to the PostScript device by means of keyword inheritance: <span class= code-output >    keywords = PSConfig()   ; Obtain PostScript keywords</span> <span class= code-output >    Set_Plot, 'PS'          ; Select the PostScript device</span> <span class= code-output >    Device, _Extra=keywords ; Configure the PostScript device with keywords</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/psconfig.html", "psconfig.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "psconfig.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/psconfig.html#PSConfig", "PSConfig", 'routine in <a href="idlastro/coyote/psconfig.html">psconfig.pro</a>', "psconfig.pro", "     FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "PSConfig", " The purpose of this program is to allow the user to configure the PostScript device  with or without a graphical user interface. This function is essentially a simplified  wrapper to the FSC_PSConfig object, which provides a powerful graphical user interface  for configuring the IDL PostScript device.   ", "AvantGarde        Set this keyword to select the AvantGarde PostScript font.  Bits_per_Pixel        The number of image bits saved for each image pixel: 2, 4, or 8.  Bold        Set this keyword to select a bold PostScript font.  BookStyle        Set this keyword to specify that the book version of the current PostScript         font should be used.  Bkman        Set this keyword to select the Bookman PostScript font.  Cancel        If this keyword is set to 1, the user hit the Cancel button in the GUI.  CMYK        Set this keyword to use CMYK colors instead of RGB colors in the output.  Color        Set this keyword to 1 to select color or gray-scale output.  Courier        Set this keyword to select the Courier font.  Debug        Set this keyword to get traceback information when errors are encountered.  Decomposed        Set this keyword to turn on 24-bit color support. Set to zero to select indexed color         support. Applies only to IDL versions 7.1 and higher.  DefaultSetup        Set this keyword to the  name  of a default style. Current styles (you can easily         create and add your own to the source code) are the following: <span class= code-output >   System (Portrait)  - The normal  default  system set-up. Also,  System .</span> <span class= code-output >   System (Landcape)  - The normal  default  landscape system set-up.</span> <span class= code-output >   Centered (Portrait)  - The window centered on the page. Also,  Center  or  Centered .</span> <span class= code-output >   Centered (Landscape)  - The window centered on the landscape page. Also,  Landscape .</span> <span class= code-output >   Square (Portrait)  - A square plot, centered on the page.</span> <span class= code-output >   Square (Landscape)  - A square plot, centered on the landscape page.</span> <span class= code-output >   Figure (Small)  - A small encapsulated figure size, centered on page. Also,  Encapsulated  or  Encapsulate .</span> <span class= code-output >   Figure (Large)  - A larger encapsulated figure size, centered on page. Also,  Figure .</span> <span class= code-output >   Color (Portrait)  - A  centered  plot, with color turned on. Also,  Color .</span> <span class= code-output >   Color (Landscape)  - A  centered  landscape plot, with color turned on.</span>  Demi        Set this keyword to select the Demi font style.  Directory        Set this keyword to the name of the starting directory. The current directory is used by default.  Encapsulated        Set this keyword to 1 to select Encapsulated PostScript output.  European        This keyword is depreciated in favor or Metric.  Filename        Set this keyword to the name of the PostScript file you wish to create.  FontInfo        Set this keyword if you wish to see font information in the GUI interface. Since font         information has to be interpreted to be used, most users prefer not to see this information         on the GUI.  FontSize        Set this keyword to the desired font size. Values should be between 6 and 32.  FontType        This keyword is both an input and an output keyword. It allows you to specify the font         type you wish to use, and it also returns the font type the user selected in the GUI.         The user is responsibe for configuring the PostScript graphical commands with the appropriate font         type, because it cannot be done via the normal Device keyword channel. Normally, this is set to         !P.Font.  Group_Leader        Set this keyword to the identifer of a widget group leader. This program will be destroyed         if the group leader application is destroyed.  Helvetica        Set this keyword to select the Helvetica PostScript font.  Inches        Set this keyword to indicate sizes and offsets are in inches as opposed to centimeters.         Set to zero by default if the Metric keyword is set.  Italic        Set this keyword to select italic type font styling.  Isolatin        Set this keyword to select ISOlatin1 encoding.  Landscape        Set this keyword to select Landscape page output. Portrait page output is the default.  Light        Set this keyword to select the Light PostScript style for the font.  Match        If this keyword is set, the initial PostScript window will match the aspect ratio of the         current graphics window.  Medium        Set this keyword to select the Medium PostScript style for the font.  Metric        Set this keyword to indicate metric mode (i.e., A4 page and centimeter units).  Name        Set this keyword to the  name  of the created FSC_PSConfig object.  Narrow        Set this keyword to select the Narrow font style.  NoGUI        Set this keyword if you don't want a graphical user interface, but just want to get the         return structure of keywords.  Oblique        Set this keyword to select the Oblique font style.  PageType        Set this keyword to the  type  of page. Possible values are: <span class= code-output >  Letter  - 8.5 by 11 inches. (Default, unless the Metric keyword is set.)</span> <span class= code-output >  Legal  - 8.5 by 14 inches.</span> <span class= code-output >  Ledger  - 11 by 17 inches.</span> <span class= code-output >  A4  - 21.0 by 29.7 centimeters. (Default, if the Metric keyword is set.)</span>  Palatino        Set this keyword to select the Palatino font.  Preview        Set this keyword to select the type of PostScript preview to add to the file. Values 0, 1, or 2.         Adding previews to PostScript files created in IDL is not recommended as the results are always         poor. There are better methods to add PostScript previews using other software, such as GhostView.  Schoolbook        Set this keyword to select the Schoolbook PostScript font.  Set_Font        Set this keyword to the name of a PostScript hardware or true-type font you want to use.         Note that if you specify a true-type font, you must also set the TrueType keyword.  Symbol        Set this keyword to select the Symbol PostScript font.  Times        Set this keyword to select the Times PostScript font.  TrueType        Set this keyword to use true-type fonts in the PostScript output. Set the name of the font         with the Set_Font keyword.  XOffset        Set this keyword to the X Offset. Uses  System (Portrait)  defaults. (Note: offset         calculated from lower-left corner of page.)  XSize        Set this keyword to the X size of the PostScript  window . Uses  System (Portrait)  defaults.  YOffset        Set this keyword to the Y Offset. Uses  System (Portrait)  defaults. (Note: offset         calculated from lower-left corner of page.)  YSize        Set this keyword to the Y size of the PostScript  window . Uses  System (Portrait)  defaults.  ZapfChancery        Set this keyword to select the ZapfChancery PostScript font.  ZapfDingbats        Set this keyword to select the ZapfDingbats PostScript font.   psObject        An FSC_PSCONFIG object reference of the sort returned by this function         can be passed as an argument to the function. It is up to the user to destroy         the object if passed as an argument. Passing an object argument essentially         by-passes the rest of the keywords and the GUI will take its initial values         from the values in the input object. This allows the programmer to keep track         of how the user last configured the GUI and to set it up in exactly the same         way the next time the GUI is invoked.   ", "Utilities Graphics", "     Change History: <span class= code-output >  Written by David W. Fanning, 31 January 2000.</span> <span class= code-output >  Added NOGUI keyword to allow default keywords to be obtained without</span> <span class= code-output >  user interaction. 11 Oct 2004. DWF.</span> <span class= code-output >  Added CMYK option 24 August 2007. Requires LANGUAGE_LEVEL=2 printer. L. Anderson</span> <span class= code-output >  Updated for IDL 7.1 and 24-bt color PostScript support. 24 May 2009. DWF.</span> <span class= code-output >  Added MATCH keyword. 14 Dec 2010. DWF.</span> <span class= code-output >  Changed ENCAPSULATE keyword to ENCAPSULATED, which is what I always type! 29 Jan 2011. DWF.</span> <span class= code-output >  Depreciated EUROPEAN keyword in favor of METRIC. 31 Jan 2011. DWF.</span>       Copyright (c) 2000-2012, Fanning Software Consulting, Inc.      To have the user specify PostScript configuration parameters, use     the program like this: <span class= code-output >  keywords = PSConfig(Cancel=cancelled)</span> <span class= code-output >  IF cancelled THEN RETURN</span> <span class= code-output >  thisDevice = !D.Name</span> <span class= code-output >  Set_Plot, 'PS'</span> <span class= code-output >  Device, _Extra=keywords</span> <span class= code-output >  Plot, findgen(11) ; Or whatever graphics commands you use.</span> <span class= code-output >  Device, /Close_File</span> <span class= code-output >  Set_Plot, thisDevice</span>      A structure of keywords, appropriate for configuring the PostScript device, is returned.     These keywords are generally passed to the PostScript device by means of keyword inheritance: <span class= code-output >    keywords = PSConfig()   ; Obtain PostScript keywords</span> <span class= code-output >    Set_Plot, 'PS'          ; Select the PostScript device</span> <span class= code-output >    Device, _Extra=keywords ; Configure the PostScript device with keywords</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/psf_gaussian.html", "psf_gaussian.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "psf_gaussian.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/psf_gaussian.html#psf_gaussian", "psf_gaussian", 'routine in <a href="idlastro/psf_gaussian.html">psf_gaussian.pro</a>', "psf_gaussian.pro", "", "psf_gaussian", " NAME:        PSF_GAUSSIAN   PURPOSE:        Create a 1-d, 2-d, or 3-d Gaussian with specified FWHM, center  EXPLANATION:        Return a point spread function having Gaussian profiles,        as either a 1D vector, a 2D image, or 3D volumetric-data.   CALLING SEQUENCE:        psf = psf_Gaussian( NPIXEL=, FWHM= , CENTROID =                      [ /DOUBLE, /NORMALIZE, ST_DEV=,  NDIMEN= ] )  or:        psf = psf_Gaussian( parameters, NPIXEL = ,NDIMEN = )   REQUIRED INPUT KEYWORD:        NPIXEL = number pixels for each dimension, specify as an array,                or just one number to make all sizes equal.   OPTIONAL KEYWORDS:        CENTROID = floating scalar or vector giving position of  PSF center.                default is exact center of requested vector/image/volume.                The number of elements in CENTROID should equal the number of                dimensions.    **The definition of Centroid was changed in                March 2002, and now an integer defines the center of a pixel.**         /DOUBLE  = If set, then the output array is computed in double precision                the default is to return a floating point array.         FWHM = the desired Full-Width Half-Max (pixels) in each dimension,                specify as an array, or single number to make all the same.         NDIMEN = integer dimension of result: either 1 (vector), 2 (image), or                 3 (volume), default = 2 (an image result).         /NORMALIZE causes resulting PSF to be normalized so Total( psf ) = 1.         ST_DEV = optional way to specify width by standard deviation param.                 Ignored if FWHM is specified.         XY_CORREL = scalar between 0 and 1 specifying correlation coefficient                Use this keyword, for example, to specify an elliptical                Gaussian oriented at an angle to the X,Y axis.   Only valid                for 2-dimensional case.   INPUTS (optional):         parameters = an NDIMEN by 3 array giving for each dimension:                        [ maxval, center, st_dev ],  overrides other keywords.   EXAMPLE:        (1) Create a 31 x 31 array containing a normalized centered Gaussian        with an X FWHM = 4.3 and a Y FWHM = 3.6         IDL&gt; array = PSF_GAUSSIAN( Npixel=31, FWHM=[4.3,3.6], /NORMAL )         (2) Create a 50 pixel 1-d Gaussian vector with a maximum of 12,           centered at  pixel 23 with a sigma of 19.2         IDL&gt; psf = psf_gaussian([12,23,19.2],npixel=50)  EXTERNAL CALLS:        function Gaussian()  NOTES:        To improve speed, floating underflow exceptions are suppressed (using        the MASK=32  keyword of CHECK_MATH() rather than being flagged.   HISTORY:        Written, Frank Varosi NASA/GSFC 1991.        Converted to IDL V5.0   W. Landsman   September 1997        Suppress underflow messages, add DOUBLE keyword. **Modified centroid        definition so integer position is pixel center** W. Landsman March 2002        Allow use of the ST_DEV (not STDEV) keyword W. Landsman Nov. 2002        Do not modify NPIXEL input keyword   W. Landsman  ", "NPIXELNDIMENSIONFWHMDOUBLECENTROIDST_DEVXY_CORRELNORMALIZEparameters", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/pswindow.html", "pswindow.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "pswindow.pro", "", "", " NAME:     PSWINDOW   PURPOSE:      This function is used to calculate the size of a PostScript     window that has the same aspect ratio (ratio of height to     width) as the current display graphics window. It creates     the largest possible PostScript output window with the     desired aspect ratio. This assures that PostScript output     looks similar, if not identical, to normal graphics output     on the display.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:      Graphics.   CALLING SEQUENCE:      pageInfo = PSWINDOW()   INPUTS:      None.   KEYWORD PARAMETERS:      ASPECTRATIO: Normally the aspect ratio is matched to the     aspect ratio (ratio of height divided by width) of the current     graphics window. However, this keyword can be used to select     a particular aspect ratio for the PostScript window. This should     be a floating point value.      CM: Normally the structure value that is returned from this     function reports its values in inches. Setting this keyword     causes the return values to be in units of centimeters.      EUROPEAN: This keyword is depreciated in favor of METRIC.      FUDGE: A quick way to set symetrical XFUDGE and YFUDGE factors.     If this keyword is set to a value, XFUDGE and YFUDGE keywords are     set to the same value. Fudge factors are used only with some     printers and generally only when output is being sent to the     PRINTER device. (See the description of the XFUDGE and YFUDGE     keywords for additional information.)      LANDSCAPE: Normally, a landscape page is selected if the current     graphics window is wider than it is tall. If you prefer a landscape     aspect window on a Portrait page, set the LANDSCAPE keywword to 0.     Setting  this keyword to 1 will result in a landscape page no     matter the size of the current graphics window.      MARGIN:  The margin around the edges of the plot. The value must be     a floating point value between 0.0 and 0.35. It is expressed in     normalized coordinate units. The default margin is 0.05.      METRIC: If this keyword is set, the program defaults change     so that the CM keyword is set to 1 and the PAGESIZE keyword is     set to  A4 .      PAGESIZE: Set this keyword to a string indicating the type     of PostScript page size you want. Current values are  LETTER ,      LEGAL , and  A4 . Default is  LETTER .      PRINTER: Set this keyword if the output will be used to     configure the PRINTER device, rather than the PS device.     (In the PRINTER device, offsets are always calculated from     the lower-left corner of the page and do not rotate in     Landscape mode, as they do with the PS device.) Note that     the PRINTER device is only able to accept these keywords     in IDL 5.1 and higher.      XFUDGE: Printers calculate the offset point from the printable     edge of the paper (sometimes), rather from the corner of the paper.     For example, on my Lexmark printer, both X and Y offsets are     calculated from a point 0.25 inches in from the edge. This keyword     allows you to set a  fudge  factor that will be subtracted from     the XOFFSET that is returned to the user. This allows you to create     output that is centered on the page. The fudge factor should be in     the same units as the returned size and offset values.      YFUDGE: Printers calculate the offset point from the printable     edge of the paper (sometimes), rather from the corner of the paper.     For example, on my Lexmark printer, both X and Y offsets are     calculated from a point 0.25 inches in from the edge. This keyword     allows you to set a  fudge  factor that will be subtracted from     the YOFFSET that is returned to the user. This allows you to create     output that is centered on the page. The fudge factor should be in     the same units as the returned size and offset values.   OUTPUTS:      pageInfo: The output value is a named structure defined like     this:        pageInfo = {PSWINDOW_STRUCT, XSIZE:0.0, YSIZE:0.0, $          XOFSET:0.0, YOFFSET:0.0, INCHES:0, PORTRAIT:0, LANDSCAPE:0}      The units of the four size fields are inches unless the CM     keyword is set.      The output can be used to immediately configure the PostScript     or Printer device, like this:         Set_Plot, 'PS' ; or 'PRINTER'        Device, _Extra=pageInfo   RESTRICTIONS:      The aspect ratio of the current graphics window is calculated     like this:         aspectRatio = FLOAT(!D.Y_VSIZE) / !D.X_VSIZE   EXAMPLE:      To create a PostScript output window with the same aspect     ratio as the curently active display window, type:       pageInfo = PSWINDOW()      SET_PLOT, 'PS'      DEVICE, _Extra=pageInfo       To configure the PRINTER device:       pageInfo = PSWINDOW(/Printer, Fudge=0.25)      SET_PLOT, 'PRINTER'      DEVICE, _Extra=pageInfo   MODIFICATION HISTORY:      Written by: David W. Fanning, November 1996.        Fixed a bug in which the YOFFSET was calculated incorrectly           in Landscape mode. 12 Feb 97.        Took out a line of code that wasn't being used. 14 Mar 97.        Added correct units keyword to return structure. 29 JUN 98. DWF        Fixed a bug in how landscape offsets were calculated. 19 JUL 99. DWF.        Fixed a bug in the way margins were used to conform to my           original conception of the program. 19 JUL 99. DWF.        Added Landscape and Portrait fields to the return structure. 19 JUL 99. DWF.        Added PageSize keyword, changed MARGIN keyword, and completely           rewrote most of the intenal code. 9 FEB 2000. DWF.        Fixed a bug in how I calculated the aspect ratio. 1 MAR 2000. DWF.        Added PRINTER keyword to return proper offset values for the           PRINTER device, where the offset location is not rotated. 1 MAR 2000. DWF.        Added PRINTER fudge factors to take into account that printer offsets are           calculated from the printable area of the paper, rather than the corner           of the paper. 8 AUG 2000. DWF.        Changed the default margin to 0.05 from 0.15. 29 Nov 2004, DWF.        Added EUROPEAN keyword and set LANDSCAPE mode if window wider than higher            as the default if LANDSCAPE is not set. 13 Dec 2010. DWF.        Added ASPECTRATIO keyword to allow user-specified window aspect ratio. 13 Dec 2010. DWF.        Depreciated EUROPEAN keyword in favor of METRIC. 31 Jan 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/pswindow.html#PSWINDOW_ASPECT", "PSWINDOW_ASPECT", 'routine in <a href="idlastro/coyote/pswindow.html">pswindow.pro</a>', "pswindow.pro", "", "PSWINDOW_ASPECT", "", "MARGINWindowAspectaspectRatio", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/coyote/pswindow.html#PSWINDOW", "PSWINDOW", 'routine in <a href="idlastro/coyote/pswindow.html">pswindow.pro</a>', "pswindow.pro", "", "PSWINDOW", "", "ASPECTRATIOCMEUROPEANFUDGELANDSCAPEMARGINMETRICPAGESIZEPRINTERXFUDGEYFUDGE", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/pswindow.html", "pswindow.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "pswindow.pro", "", "", " NAME:     PSWINDOW   PURPOSE:      This function is used to calculate the size of a PostScript     window that has the same aspect ratio (ratio of height to     width) as the current display graphics window. It creates     the largest possible PostScript output window with the     desired aspect ratio. This assures that PostScript output     looks similar, if not identical, to normal graphics output     on the display.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:      Graphics.   CALLING SEQUENCE:      pageInfo = PSWINDOW()   INPUTS:      None.   KEYWORD PARAMETERS:      ASPECTRATIO: Normally the aspect ratio is matched to the     aspect ratio (ratio of height divided by width) of the current     graphics window. However, this keyword can be used to select     a particular aspect ratio for the PostScript window. This should     be a floating point value.      CM: Normally the structure value that is returned from this     function reports its values in inches. Setting this keyword     causes the return values to be in units of centimeters.      EUROPEAN: This keyword is depreciated in favor of METRIC.      FUDGE: A quick way to set symetrical XFUDGE and YFUDGE factors.     If this keyword is set to a value, XFUDGE and YFUDGE keywords are     set to the same value. Fudge factors are used only with some     printers and generally only when output is being sent to the     PRINTER device. (See the description of the XFUDGE and YFUDGE     keywords for additional information.)      LANDSCAPE: Normally, a landscape page is selected if the current     graphics window is wider than it is tall. If you prefer a landscape     aspect window on a Portrait page, set the LANDSCAPE keywword to 0.     Setting  this keyword to 1 will result in a landscape page no     matter the size of the current graphics window.      MARGIN:  The margin around the edges of the plot. The value must be     a floating point value between 0.0 and 0.35. It is expressed in     normalized coordinate units. The default margin is 0.05.      METRIC: If this keyword is set, the program defaults change     so that the CM keyword is set to 1 and the PAGESIZE keyword is     set to  A4 .      PAGESIZE: Set this keyword to a string indicating the type     of PostScript page size you want. Current values are  LETTER ,      LEGAL , and  A4 . Default is  LETTER .      PRINTER: Set this keyword if the output will be used to     configure the PRINTER device, rather than the PS device.     (In the PRINTER device, offsets are always calculated from     the lower-left corner of the page and do not rotate in     Landscape mode, as they do with the PS device.) Note that     the PRINTER device is only able to accept these keywords     in IDL 5.1 and higher.      XFUDGE: Printers calculate the offset point from the printable     edge of the paper (sometimes), rather from the corner of the paper.     For example, on my Lexmark printer, both X and Y offsets are     calculated from a point 0.25 inches in from the edge. This keyword     allows you to set a  fudge  factor that will be subtracted from     the XOFFSET that is returned to the user. This allows you to create     output that is centered on the page. The fudge factor should be in     the same units as the returned size and offset values.      YFUDGE: Printers calculate the offset point from the printable     edge of the paper (sometimes), rather from the corner of the paper.     For example, on my Lexmark printer, both X and Y offsets are     calculated from a point 0.25 inches in from the edge. This keyword     allows you to set a  fudge  factor that will be subtracted from     the YOFFSET that is returned to the user. This allows you to create     output that is centered on the page. The fudge factor should be in     the same units as the returned size and offset values.   OUTPUTS:      pageInfo: The output value is a named structure defined like     this:        pageInfo = {PSWINDOW_STRUCT, XSIZE:0.0, YSIZE:0.0, $          XOFSET:0.0, YOFFSET:0.0, INCHES:0, PORTRAIT:0, LANDSCAPE:0}      The units of the four size fields are inches unless the CM     keyword is set.      The output can be used to immediately configure the PostScript     or Printer device, like this:         Set_Plot, 'PS' ; or 'PRINTER'        Device, _Extra=pageInfo   RESTRICTIONS:      The aspect ratio of the current graphics window is calculated     like this:         aspectRatio = FLOAT(!D.Y_VSIZE) / !D.X_VSIZE   EXAMPLE:      To create a PostScript output window with the same aspect     ratio as the curently active display window, type:       pageInfo = PSWINDOW()      SET_PLOT, 'PS'      DEVICE, _Extra=pageInfo       To configure the PRINTER device:       pageInfo = PSWINDOW(/Printer, Fudge=0.25)      SET_PLOT, 'PRINTER'      DEVICE, _Extra=pageInfo   MODIFICATION HISTORY:      Written by: David W. Fanning, November 1996.        Fixed a bug in which the YOFFSET was calculated incorrectly           in Landscape mode. 12 Feb 97.        Took out a line of code that wasn't being used. 14 Mar 97.        Added correct units keyword to return structure. 29 JUN 98. DWF        Fixed a bug in how landscape offsets were calculated. 19 JUL 99. DWF.        Fixed a bug in the way margins were used to conform to my           original conception of the program. 19 JUL 99. DWF.        Added Landscape and Portrait fields to the return structure. 19 JUL 99. DWF.        Added PageSize keyword, changed MARGIN keyword, and completely           rewrote most of the intenal code. 9 FEB 2000. DWF.        Fixed a bug in how I calculated the aspect ratio. 1 MAR 2000. DWF.        Added PRINTER keyword to return proper offset values for the           PRINTER device, where the offset location is not rotated. 1 MAR 2000. DWF.        Added PRINTER fudge factors to take into account that printer offsets are           calculated from the printable area of the paper, rather than the corner           of the paper. 8 AUG 2000. DWF.        Changed the default margin to 0.05 from 0.15. 29 Nov 2004, DWF.        Added EUROPEAN keyword and set LANDSCAPE mode if window wider than higher            as the default if LANDSCAPE is not set. 13 Dec 2010. DWF.        Added ASPECTRATIO keyword to allow user-specified window aspect ratio. 13 Dec 2010. DWF.        Depreciated EUROPEAN keyword in favor of METRIC. 31 Jan 2011. DWF.        Now setting LANDSCAPE=0 if aspect GT 1 and not set otherwise. 19 Feb 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/pswindow.html#PSWINDOW_ASPECT", "PSWINDOW_ASPECT", 'routine in <a href="coyote/pswindow.html">pswindow.pro</a>', "pswindow.pro", "", "PSWINDOW_ASPECT", "", "MARGINWindowAspectaspectRatio", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/pswindow.html#PSWINDOW", "PSWINDOW", 'routine in <a href="coyote/pswindow.html">pswindow.pro</a>', "pswindow.pro", "", "PSWINDOW", "", "ASPECTRATIOCMEUROPEANFUDGELANDSCAPEMARGINMETRICPAGESIZEPRINTERXFUDGEYFUDGE", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/putast.html", "putast.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "putast.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/putast.html#putast", "putast", 'routine in <a href="idlastro/putast.html">putast.pro</a>', "putast.pro", "", "putast", " NAME:     PUTAST  PURPOSE:     Put WCS astrometry parameters into a given FITS header.   CALLING SEQUENCE:      putast, hdr              ;Prompt for all values                or      putast, hdr, astr, [EQUINOX =, CD_TYPE =, ALT= , NAXIS=]                or      putast, hdr, cd,[ crpix, crval, ctype], [ EQUINOX =, CD_TYPE =, ALT= ]   INPUTS:      HDR -  FITS header, string array.   HDR will be updated to contain              the supplied astrometry.      ASTR - IDL structure containing values of the astrometry parameters             CDELT, CRPIX, CRVAL, CTYPE, LONGPOLE, and PV2             See EXTAST.PRO for more info about the structure definition                             or      CD   - 2 x 2 array containing the astrometry parameters CD1_1 CD1_2                                                              CD2_1 CD2_2               in units of DEGREES/PIXEL      CRPIX - 2 element vector giving X and Y coord of reference pixel               BE SURE THE COORDINATES IN CRPIX ARE GIVEN IN FITS STANDARD               (e.g. first pixel in image is [1,1] ) AND NOT IDL STANDARD               (first pixel in image is [0,0]      CRVAL - 2 element vector giving R.A. and DEC of reference pixel                in degrees      CTYPE - 2 element string vector giving projection types for the two axes.              For example, to specify a tangent projection one should set              ctype = ['RA---TAN','DEC--TAN']   OUTPUTS:       HDR - FITS header now contains the updated astrometry parameters                A brief HISTORY record is also added.   OPTIONAL KEYWORD INPUTS:        ALT -  single character 'A' through 'Z' or ' ' specifying an alternate               astrometry system to write in the FITS header.    The default is               to write primary astrometry or ALT = ' '.   If /ALT is set,               then this is equivalent to ALT = 'A'.   See Section 3.3 of               Greisen & Calabretta (2002, A&A, 395, 1061) for information about               alternate astrometry keywords.         CD_TYPE - Integer scalar, either 0, 1 or 2 specifying how the CD matrix                 is to be written into the header                (0) write PCn_m values along with CDELT values                (1) convert to rotation and write as a CROTA2 value (+ CDELT)                (2) as CDn_m values (IRAF standard)              All three forms are valid representations according to Greisen &             Calabretta (2002, A&A, 395, 1061), also available at             http://fits.gsfc.nasa.gov/fits_wcs.html ) although form (0) is             preferred.   Form (1) is the former AIPS standard and is now             deprecated and cannot be used if any skew is present.             If CD_TYPE is not supplied, PUTAST will try to determine the             type of astrometry already in the header.   If there is no             astrometry in the header then the default is CD_TYPE = 2.        EQUINOX - numeric scalar giving the year of equinox  of the reference                 coordinates.   Default (if EQUINOX keyword is not already                 present in header) is 2000.        NAXIS - By default, PUTAST does not update the NAXIS keywords in the             FITS header.    If NAXIS is set, and an astrometry structure is             supplied then the NAXIS1 and NAXIS2 keywords in the FITS header             will be updated with the .NAXIS structure tags values.     If an             astrometry structure is not supplied, then one can set NAXIS to a             two element vector to update the NAXIS1, NAXIS2 keywords.  NOTES:        The recommended use of this procedure is to supply an astrometry        structure.         PUTAST does not delete astrometry parameters already present in the        header, unless they are explicity overwritten.         As of April 2012, PUTAST will add SIP       ( http://fits.gsfc.nasa.gov/registry/sip.html ) distortion parameters to        a FITS header if present in the astrometry structure.  PROMPTS:        If only a header is supplied, the user will be prompted for a plate        scale, the X and Y coordinates of a reference pixel, the RA and        DEC of the reference pixel, the equinox of the RA and Dec and a        rotation angle.   PROCEDURES USED:        ADD_DISTORT, GETOPT(), GET_COORDS, GET_EQUINOX, SXADDPAR, SXPAR(),        TAG_EXIST(), ZPARCHECK  REVISION HISTORY:        Written by W. Landsman 9-3-87        Major rewrite, use new astrometry structure   March, 1994        Use both CD and CDELT to get plate scale for CD_TYPE=1   September 1995        Use lower case for FITS keyword Comments  W.L.    March 1997        Fixed for CD_TYPE=1 and CDELT = [1.0,1.0]   W.L   September 1997        Default value of CD_TYPE is now 2, Use GET_COORDS to read coordinates        to correct -0 problem           W.L.  September 1997        Update CROTA1 if it already exists  W.L. October 1997        Convert rotation to degrees for CD_TYPE = 1  W. L.   June 1998        Accept CD_TYPE = 0 keyword input   W.L   October 1998        Remove reference to obsolete !ERR  W.L.  February 2000        No longer support CD001001 format, write default tangent CTYPE value        consistent conversion between CROTA and CD matrix W.L. October 2000        Use GET_EQUINOX to get equinox value  W.L.  January 2001        Update CTYPE keyword if previous value is 'LINEAR'  W.L. July 2001        Use SIZE(/TNAME) instead of DATATYPE()  W.L.   November 2001        Allow direct specification of CTYPE W.L.        June 2002        Don't assume celestial coordinates W. Landsman  April 2003        Make default CD_TYPE = 2  W. Landsman   September 2003        Add projection parameters, e.g. PV2_1, PV2_2 if present in the        input structure   W. Landsman    May 2004        Correct interactive computation of image center W. Landsman Feb. 2005        Don't use CROTA (CD_TYPE=1) if a skew exists W. Landsman  May 2005        Added NAXIS keyword  W. Landsman   January 2007        Update PC matrix, if CD_TYPE=0 and CD matrix supplied W.L. July 2007        Don't write PV2 keywords for WCS types that don't use it W.L. Aug 2011        Add SIP distortion parameters if present W.L. April 2012  ", "EQUINOXCD_TYPEALTNAXIShdrastrcrpixcrvalctype", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/pwd.html", "pwd.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "pwd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/pwd.html#PWD", "PWD", 'routine in <a href="coyote/pwd.html">pwd.pro</a>', "pwd.pro", "", "PWD", " NAME:        PWD   PURPOSE:         This is a utility program simply prints the current IDL working directory.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilites   CALLING SEQUENCE:         IDL&gt; PWD   INPUTS:         None.    KEYWORDS:         None.   MODIFICATION HISTORY:         Written by David W. Fanning, 8 Nov 2007.  ******************************************************************************************;   Copyright (c) 2008, by Fanning Software Consulting, Inc.                                ;   All rights reserved.                                                                    ;                                                                                           ;   Redistribution and use in source and binary forms, with or without                      ;   modification, are permitted provided that the following conditions are met:             ;                                                                                           ;       * Redistributions of source code must retain the above copyright                    ;         notice, this list of conditions and the following disclaimer.                     ;       * Redistributions in binary form must reproduce the above copyright                 ;         notice, this list of conditions and the following disclaimer in the               ;         documentation and/or other materials provided with the distribution.              ;       * Neither the name of Fanning Software Consulting, Inc. nor the names of its        ;         contributors may be used to endorse or promote products derived from this         ;         software without specific prior written permission.                               ;                                                                                           ;   THIS SOFTWARE IS PROVIDED BY FANNING SOFTWARE CONSULTING, INC. ''AS IS'' AND ANY        ;   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES    ;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT     ;   SHALL FANNING SOFTWARE CONSULTING, INC. BE LIABLE FOR ANY DIRECT, INDIRECT,             ;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED    ;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;         ;   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND             ;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT              ;   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS           ;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            ; ******************************************************************************************;  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/qdcb_grid.html", "qdcb_grid.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "qdcb_grid.pro", "", "", " NAME: 	QDCB_GRID   PURPOSE: 	Produce an overlay of latitude and longitude lines over a plot or image  EXPLANATION: 	Grid is plotted on the current graphics device assuming that the 	current plot is a map  in the so called quad cube projection. The 	output plot range is assumed to go from 7.0 to -1.0 on the X axis and 	-3.0 to 3.0 on the Y axis. Within this plotting space, the quad cube 	faces are laid out as follows (X=Empty, Astronomical Layout shown - 	X axis can be swapped for geographic maps):  	    3.0_ 		XXX0 		4321 	   -3.0_XXX5 		|  | 	      7.0  -1.0   CATEGORY: 	Mapping Support Routine   CALLING SEQUENCE:  	QDCB_GRID,[,DLONG,DLAT,[LINESTYLE=N,/LABELS]   INPUT PARAMETERS:  	DLONG	= Optional input longitude line spacing in degrees. If left 		  out, defaults to 30.  	DLAT    = Optional input lattitude line spacing in degrees. If left 		  out, defaults to 30.   OPTIONAL KEYWORD PARAMETERS:  	LINESTYLE	= Optional input integer specifying the linestyle to 			  use for drawing the grid lines.  	LABELS		= Optional keyword specifying that the lattitude and 			  longitude lines on the prime meridian and the 			  equator should be labeled in degrees. If LABELS is 			  given a value of 2, i.e. LABELS=2, then the longitude 			  labels will be in hours and minutes instead of 			  degrees.   OUTPUT PARAMETERS:  	NONE   PROCEDURE:  	Uses WCSSPH2XY.PRO with projection 23 ( QSC  - COBE Quadrilatieralized 	Spherical Cube) to compute positions of grid lines and labels.   COPYRIGHT NOTICE:  	Copyright 1991, The Regents of the University of California. This 	software was produced under U.S. Government contract (W-7405-ENG-36) 	by Los Alamos National Laboratory, which is operated by the 	University of California for the U.S. Department of Energy. 	The U.S. Government is licensed to use, reproduce, and distribute 	this software. Neither the Government nor the University makes 	any warranty, express or implied, or assumes any liability or 	responsibility for the use of this software.   AUTHOR:  	Jeff Bloch   MODIFICATIONS/REVISION LEVEL:  	%I%	%G% 	Use WCSSPH2XY instead of QDCB   Wayne Landsman   December 1994 	Converted to IDL V5.0   W. Landsman   September 1997  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/qdcb_grid.html#QDCB_GRID", "QDCB_GRID", 'routine in <a href="idlastro/qdcb_grid.html">qdcb_grid.pro</a>', "qdcb_grid.pro", "", "QDCB_GRID", "", "LINESTYLELABELSDLONGDLAT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/qget_string.html", "qget_string.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "qget_string.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/qget_string.html#qget_string", "qget_string", 'routine in <a href="idlastro/qget_string.html">qget_string.pro</a>', "qget_string.pro", "", "qget_string", " NAME:      QGET_STRING  PURPOSE:      To get a string from the keyboard without echoing it to the screen.   CALLING SEQUENCE:      string = QGET_STRING()   INPUTS:      None.   OUTPUTS:      string   The string read from the keyboard.   SIDE EFFECTS:      A string variable is created and filled.   PROCEDURE:      The IDL GET_KBRD functions is used to get each character in      the string.  Each character is added to the string until a      carriage return is struck.  The carriage return is not appended      to the string.  Striking the delete key or the backspace key      removes the previous character from the string.   NOTES:      For a widget password procedure see      http://idlcoyote.com/tip_examples/password.pro  MODIFICATION HISTORY:      Written by Michael R. Greason, STX, 8 January 1991.      Work for Mac and Windows IDL  W. Landsman    September 1995  ", "dummy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/qsimp.html", "qsimp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "qsimp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/qsimp.html#qsimp", "qsimp", 'routine in <a href="idlastro/qsimp.html">qsimp.pro</a>', "qsimp.pro", "", "qsimp", " NAME:        QSIMP  PURPOSE:        Integrate using Simpson's rule to specified accuracy.  EXPLANATION:        Integrate a function to specified accuracy using the extended        trapezoidal rule.   Adapted from algorithm in Numerical Recipes,        by Press et al. (1992, 2nd edition), Section 4.2.     This procedure        has been partly obsolete since IDL V3.5 with the introduction of the        intrinsic function QSIMP(), but see notes below.   CALLING SEQUENCE:        QSIMP, func, A, B, S, [ EPS = , MAX_ITER =, _EXTRA =  ]   INPUTS:        func - scalar string giving name of function of one variable to                be integrated        A,B  - numeric scalars giving the lower and upper bound of the                integration   OUTPUTS:        S - Scalar giving the approximation to the integral of the specified                function between A and B.   OPTIONAL KEYWORD PARAMETERS:        EPS - scalar specifying the fractional accuracy before ending the                iteration.  Default = 1E-6        MAX_ITER - Integer specifying the total number iterations at which                QSIMP will terminate even if the specified accuracy has not yet                been met.   The maximum number of function evaluations will be                2^(MAX_ITER).    Default value is MAX_ITER = 20         Any other keywords are passed directly to the user-supplied function        via the _EXTRA facility.  NOTES:        (1) The function QTRAP is robust way of doing integrals that are not        very smooth.  However, if the function has a continuous 3rd derivative        then QSIMP will likely be more efficient at performing the integral.         (2) QSIMP can be *much* faster than the intrinsic QSIMP() function (as        of IDL V7.1).   This is because the intrinsic QSIMP() function only        requires that the user supplied function accept a *scalar* variable.        Thus on the the 16th iteration, the intrinsic QSIMP() makes 32,767        calls to the user function, whereas this procedure makes one call        with a  32,767 element vector.  Also, unlike the intrinsic QSIMP(), this        procedure allows keywords in the user-supplied function.         (3) Since the intrinsic QSIMP() is a function, and this file contains a        procedure, there should be no name conflict.  EXAMPLE:        Compute the integral of sin(x) from 0 to !PI/3.         IDL&gt; QSIMP, 'sin', 0, !PI/3, S   & print, S         The value obtained should be cos(!PI/3) = 0.5   PROCEDURES CALLED:        TRAPZD, ZPARCHECK   REVISION HISTORY:        W. Landsman         ST Systems Co.         August, 1991        Continue after max iter warning message   W. Landsman   March, 1996        Converted to IDL V5.0   W. Landsman   September 1997        Pass keyword to function via _EXTRA facility  W. Landsman July 1999  ", "EPSMAX_ITER_EXTRAfuncABS", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/qtrap.html", "qtrap.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "qtrap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/qtrap.html#qtrap", "qtrap", 'routine in <a href="idlastro/qtrap.html">qtrap.pro</a>', "qtrap.pro", "", "qtrap", " NAME:        QTRAP  PURPOSE:        Integrate using trapezoidal rule to specified accuracy.  EXPLANATION:        Integrate a function to specified accuracy using the extended        trapezoidal rule.   Adapted from Numerical Recipes (1992, 2nd edition),        Section 4.2.   CALLING SEQUENCE:        QTRAP, func, A, B, S, [EPS = , MAX_ITER =, _EXTRA = ]   INPUTS:        func - scalar string giving name of function of one variable to                be integrated        A,B  - numeric scalars giving the lower and upper bound of the                integration   OUTPUTS:        S - Scalar giving the approximation to the integral of the specified                function between A and B.   OPTIONAL KEYWORD PARAMETERS:        EPS - scalar specify the fractional accuracy before ending the              iteration.    Default = 1E-6        MAX_ITER - Integer specifying the total number iterations at which                QTRAP will terminate even if the specified accuracy has not yet                been met.    The maximum number of function evaluations will                be 2^(MAX_ITER).   Default value is MAX_ITER = 20         Any other keywords are passed directly to the user-supplied function        via the _EXTRA facility.  NOTES:        QTRAP is robust way of doing integrals that are not very smooth.  If the        function has a continuous 3rd derivative then the function QSIMP will           likely be more efficient at performing the integral.  EXAMPLE:        Compute the integral of sin(x) from 0 to !PI/3.         IDL&gt; QTRAP, 'sin', 0, !PI/3, S   & print,S         The value obtained should be cos(!PI/3) = 0.5   PROCEDURES CALLED:        TRAPZD, ZPARCHECK  REVISION HISTORY:        W. Landsman         ST Systems Co.         August, 1991        Continue after Max Iter warning message, W. Landsman  March 1996        Converted to IDL V5.0   W. Landsman   September 1997        Pass keyword to function via _EXTRA facility  W. Landsman July 1999  ", "EPSMAX_ITER_EXTRAfuncABS", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/quadterp.html", "quadterp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "quadterp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/quadterp.html#quadterp", "quadterp", 'routine in <a href="idlastro/quadterp.html">quadterp.pro</a>', "quadterp.pro", "", "quadterp", " NAME:        QUADTERP  PURPOSE:        Quadratic interpolation of X,Y vectors onto a new X grid  EXPLANATION:        Interpolate a function Y = f(X) at specified grid points using an        average of two neighboring 3 point quadratic (Lagrangian) interpolants.        Use LINTERP for linear interpolation   CALLING SEQUENCE:        QUADTERP, Xtab, Ytab, Xint, Yint, [ MISSING = ]   INPUT:        Xtab - Vector (X TABle) containing the current independent variable                Must be either monotonic increasing or decreasing        Ytab - Vector (Y TABle) containing the dependent variable defined                at each of the points of XTAB.        Xint - Scalar or vector giving the values of X for which interpolated                Y values are sought   OUTPUT:        Yint - Interpolated value(s) of Y, same number of points as Xint   OPTIONAL INPUT KEYWORD:        MISSING - Scalar specifying Yint value(s) to be assigned, when Xint                value(s) are outside of the range of Xtab.     Default is to                truncate the out of range Yint value(s) to the nearest value                of Ytab.   See the help for the INTERPOLATE function.  METHOD:        3-point Lagrangian interpolation.  The average of the two quadratics        derived from the four nearest  points is returned in YTAB.   A single        quadratic is used near the end points.   VALUE_LOCATE is used        to locate center point of the interpolation.   NOTES:        QUADTERP provides one method of high-order interpolation.   The            RSI interpol.pro function includes the following alternatives:         interpol(/LSQUADRATIC) - least squares quadratic fit to a 4 pt                neighborhood        interpol(/QUADRATIC) - quadratic fit to a 3 pt neighborhood        interpol(/SPLINE) - cubic spline fit to a 4 pt neighborhood         Also, the IDL Astro function HERMITE fits a cubic polynomial and its              derivative to the two nearest points.  RESTRICTIONS:        Unless MISSING keyword is set, points outside the range of Xtab in        which valid quadratics can be computed are returned at the value        of the nearest end point of Ytab (i.e. Ytab[0] and Ytab[NPTS-1] ).   EXAMPLE:        A spectrum has been defined using a wavelength vector WAVE and a        flux vector FLUX.  Interpolate onto a new wavelength grid, e.g.         IDL&gt; wgrid = [1540.,1541.,1542.,1543.,1544.,1545.]        IDL&gt; quadterp, wave, flux, wgrid, fgrid         FGRID will be a 5 element vector containing the quadratically        interpolated values of FLUX at the wavelengths given in WGRID.    EXTERNAL ROUTINES:        ZPARCHECK   REVISION HISTORY:        31 October 1986 by B. Boothman, adapted from the IUE RDAF        12 December 1988 J. Murthy, corrected error in Xint        September 1992, W. Landsman, fixed problem with double precision        August 1993, W. Landsman, added MISSING keyword        June, 1995, W. Landsman, use single quadratic near end points        Converted to IDL V5.0   W. Landsman   September 1997        Fix occasional problem with integer X table,        YINT is a scalar if XINT is a scalar   W. Landsman Dec 1999        Use VALUE_LOCATE instead of TABINV W. Landsman  Feb. 2000  ", "MISSINGxtabytabxintyint", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/quantifyblur.html", "quantifyblur.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "quantifyblur.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/quantifyblur.html#quantifyblur", "quantifyblur", 'routine in <a href="code_snapshots/obsolete_code/quantifyblur.html">quantifyblur.pro</a>', "quantifyblur.pro", "", "quantifyblur", "       Quantify how many pixels it takes to make transitions.         Black   -&gt;  1-sigma        1-sigma -&gt;  White        Black   -&gt;  White        over x & y  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/querydss.html", "querydss.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "querydss.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/querydss.html#QueryDSS", "QueryDSS", 'routine in <a href="idlastro/querydss.html">querydss.pro</a>', "querydss.pro", "", "QueryDSS", " NAME:    QueryDSS   PURPOSE:     Query the digital sky survey (DSS) on-line at  the STSCI (or ESO) server   EXPLANATION:      The script can query the DSS survey and retrieve an image and FITS      header either from the the Space Telescope Science Institute (STScI) or      European Space Observatory (ESO) servers.      See http://archive.eso.org/dss/dss and/or      http://archive.stsci.edu/dss/index.html for details.   CALLING SEQUENCE:       QueryDSS, targetname_or_coords, Im, Hdr, [IMSIZE= , /ESO, Outfile= ]   INPUTS:       TARGETNAME_OR_COORDS - Either a scalar string giving a target name,           (with J2000 coordinates determined by SIMBAD (default) or NED), or           a 2-element numeric vector giving the J2000 right ascension in           *degrees* and the target declination in degrees.   OPTIONAL INPUTS:           None   OPTIONAL KEYWORD PARAMETERS:      ImSize - Numeric scalar giving size of the image to be retrieved in                  arcminutes.    Default is 10 arcminute.       /ESO - Use the ESO server for image retrieval.    Default is to use             the STScI server       /NED - Query the Nasa Extragalactic Database (NED) for the             target's coordinates.  The default is to use Simbad for             the target search.       OUTPUT  - scalar string specifying name of output FITS file.             If set, then the output IDL variables are not used.       /STSCI - obsolete keyword, now does nothing, since STSCI is the default               Server.       SURVEY - Scalar string specifying which survey to retrieve.           Possible values are           '1' - First generation (red), this is the default           '2b' - Second generation blue           '2r' - Second generation red           '2i' - Second generation near-infrared        Note that 2nd generation images may not be available for all regions       of the sky.   Also note that the first two letters of the 'REGION'       keyword in the FITS header gives the bandpass 'XP' - Red IIIaF,       'XJ' - Blue IIIaJ, 'XF' - Near-IR IVN        /VERBOSE - If set, then the query sent to the DSS server is displayed   OUTPUTS:        Im - The image returned by the server. If there is an error, this              contains a single 0.         Hdr - The FITS header of the image. Empty string in case of errors.         If the OutFile keyword is set then no outputs are returned (only the        file is written).  SIDE EFFECTS:      If Im and Hdr exist in advance,  they are overwritten.   RESTRICTIONS:       Relies on a working network connection.   PROCEDURE:       Construct a query-url,  call WEBGET() and sort out the server's       answer.   EXAMPLE:       Retrieve an 10'  image surrounding the ultracompact HII region        G45.45+0.06.   Obtain the 2nd generation blue image.         IDL&gt; QueryDSS, 'GAL045.45+00.06', image, header, survey = '2b'        IDL&gt; tvscl, image        IDL&gt; hprint, header        IDL&gt; writefits,'dss_image.fits', image, header  Note that the coordinates could have been specified directly, rather than  giving the target name.        IDL&gt; QueryDSS, [288.587, 11.1510], image, header,survey='2b'   To write a file directly to disk, use the OutFile keyword         IDL&gt; QueryDSS, [288.587, 11.1510], survey='2b', out='gal045_2b.fits'   PROCEDURES CALLED:        QUERYSIMBAD, WEBGET()  MODIFICATION HISTORY:        Written by M. Feldt, Heidelberg, Oct 2001 &lt;mfeldt@mpia.de&gt;        Option to supply target name instead of coords  W. Landsman Aug. 2002        Added OUTFILE, /NED keywords W. Landsman   April 2003        Don't abort on Simbad failure W. Landsman/J. Brauher  June 2003        Added /VERBOSE keyword W. Landsman   Jan 2009        Make /STScI server the default  W. Landsman June 2010       Fix OUTPUT option  W. Landsman June 2010   ", "IMSIZEESOSTSCINEDSURVEYOUTFILEVERBOSEtargetImageHeader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/querygsc.html", "querygsc.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "querygsc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/querygsc.html#Querygsc", "Querygsc", 'routine in <a href="idlastro/querygsc.html">querygsc.pro</a>', "querygsc.pro", "", "Querygsc", " NAME:    QUERYGSC   PURPOSE:    Query the Guide Star Catalog (GSC V2.3.2) at STScI by position   EXPLANATION:    Uses the IDL SOCKET command to query the GSC 2.3.2 database over the Web.     Alternatively, (and more reliably) one can query the GSC 2.3.2 catalog using    queryvizier.pro and the VIZIER database, e.g.      IDL&gt; st = queryvizier('GSC2.3',[23,35],10,/all)     GSC2.3 is an all-sky export of calibrated photographic survey plate    source parameters from the COMPASS database.  The number of unique    objects is approximately 945,592,683.   All sources are    from the second-generation plate-processing pipeline with the exception    of Tycho-2 and Skymap sources in the case of very bright objects. The    Skymap sources are exported when there is no matching GSC or Tycho    sources.  Each GSC 2.3 entry contains only one position and one    magnitude per bandpass for each unique sky object   CALLING SEQUENCE:      info = QueryGSC(targetname_or_coords, [ dis, /HOURS] )   INPUTS:       TARGETNAME_OR_COORDS - Either a scalar string giving a target name,           (with J2000 coordinates determined by SIMBAD), or a 2-element           numeric vector giving the J2000 right ascension in *degrees* (or           hours if /HOURS is set) and the target declination in degrees.   OPTIONAL INPUT:     dis - Numeric scalar giving search radius in arcminutes to search around           specified target    Default is 5 arcminutes   OPTIONAL INPUT KEYWORDS:      /BOX - if set, then radius gives  a box width in arcminutes     /HOURS - If set, then the right ascension is both input and output (in              the info .ra tag) in hours instead of degrees     /VERBOSE - If set, then the CGI command to the Webserver will be displayed ;  OUTPUTS:    info - IDL structure containing information on the GSC stars within the           specified distance of the specified center.   There are (currently)           23 tags in this structure  -- for further information see           http://gsss.stsci.edu/Catalogs/GSC/GSC2/gsc23/gsc23_release_notes.htm            .HSTID - GSC 2.3 name for HST operations           .GSC1ID - GSC1 name           .RA,.DEC - Position in degrees (double precision).   RA is given in                    hours if the /HOURS keyword is set.           .RAERR, .DECERR - uncertainty (in arcseconds) in the RA and Dec           .EPOCH - mean epoch of the observation           .FPGMAG, .FPGERR - magnitude and error in photographic F           .JPGMAG, .JPGERR - magnitude and error in photographic J           .VPGMAG, .VPGERR - V magnitude and error           .NPGMAG, .NPGERR - magnitude and error           .UMAG, .UERR - magnitude and error           .BMAG, .BERR - magnitude and error           .VMAG, .VERR - magnitude and error           .RMAG, .RERR - magnitude and error           .IMAG, .IERR - magnitude and error           .JMAG, .JERR - magnitude and error           .HMAG, .HERR - magnitude and error           .KMAG, .KERR - magnitude and error           .A - semi-major axis in pixels           .PA - Position angle of extended objects in degrees           .E - eccentricity of extended objects           .CLASS - classification (0-5): 0-star, 1-galaxy, 2-blend,                          3-nonstar, 4-unclassified, 5-defect           .STATUS -10 digit field  used to encode more detailed information               about the properties of the catalog object.   For more info, see http://www-gsss.stsci.edu/Catalogs/GSC/GSC2/gsc23/gsc23_release_notes.htm#ClassificationCodes            .VFLAG, MFLAG - Variability nad multiplicity flags             .FPGBAND, .NPGBAND, .JPGBAND. UBAND, BBAND, .VBAND - flag as             to wether given bandpass is available  EXAMPLE:           Plot a histogram of the photographic J magnitudes of all GSC 2.3.2           stars within 10 arcminutes of the center of the globular cluster M13            IDL&gt; info = querygsc('M13',10)           IDL&gt; plothist,info.jpgmag,xran=[10,20]   PROCEDURES USED:           QUERYSIMBAD, RADEC, WEBGET()   MODIFICATION HISTORY:          Written by W. Landsman  SSAI  August 2002          Fixed parsing of RA and Dec  W. Landsman September 2002          Major rewrite to use new STScI Web server, remove magrange            keyword   W. Landsman Dec 2007          Update server name, added /BOX,/ VERBOSE keywords W.L 19 Dec 2007          Web server now also returns infrared data  W.L. Feb 2010          Fixed case where dec neg. and deg or min 0 Pat Fry Jul 2010   ", "magrangeHOURSVERBOSEBOXtargetdis", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/querysimbad.html", "querysimbad.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "querysimbad.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/querysimbad.html#QuerySimbad", "QuerySimbad", 'routine in <a href="idlastro/querysimbad.html">querysimbad.pro</a>', "querysimbad.pro", "", "QuerySimbad", " NAME:    QUERYSIMBAD   PURPOSE:    Query the SIMBAD/NED/Vizier astronomical name resolver to obtain coordinates   EXPLANATION:    Uses the IDL SOCKET command to query either the SIMBAD or NED nameserver    over the Web to return J2000 coordinates.     ;   By default, QuerySimbad    first queries the Simbad database, then (if no match found) the NED    database, and then the Vizier database.     For details on the SIMBAD service, see http://simbad.u-strasbg.fr/Simbad    and for the NED service, see http://ned.ipac.caltech.edu/   CALLING SEQUENCE:     QuerySimbad, name, ra, dec, [ id, Found=, /NED, /CADC, ERRMSG=, /VERBOSE]   INPUTS:     name - a scalar string containing the target name in SIMBAD (or NED)            nomenclature. For SIMBAD details see            http://vizier.u-strasbg.fr/cgi-bin/Dic-Simbad .   OUTPUTS:      ra -  Right ascension of the target in J2000.0 in *degrees*, scalar      dec - declination of the target in degrees, scalar   OPTIONAL INPUT KEYWORD:      /CFA - if set, then use the Simbad server at the Center for Astrophysics              rather than the default server in Strasbourg, France.      ERRMSG   = If defined and passed, then any error messages will be                   returned to the user in this parameter rather than                   depending on the MESSAGE routine in IDL.  If no errors are                   encountered, then a null string is returned.      /NED - if set, then only the nameserver of the NASA Extragalactic database             is used to resolve the name and return coordinates.   Note that            /NED cannot be used with Galactic objects      /VERBOSE - If set, then the HTTP-GET command is displayed      /PRINT - if set, then output coordinates are displayed at the terminal             By default, the coordinates are displayed if no output parameters            are supplied to QUERYSIMBAD      /SILENT - If set, then don't print warnings if multiple SIMBAD objects              correspond to the supplied name.  OPTIONAL OUTPUT:      id - the primary SIMBAD (or NED) ID of the target, scalar string           As of June 2009, a more reliable ID seems to be found when using           CFA (/CFA) server.   OPTIONAL KEYWORD OUTPUT:      found - set to 1 if the translation was successful, or to 0 if the            the object name could not be translated by SIMBAD or NED      Errmsg - if supplied, then any error messages are returned in this             keyword, rather than being printed at the terminal.   May be either             a scalar or array.      Server - Character indicating which server was actually used to resolve            the object, 'S'imbad, 'N'ed or 'V'izier   EXAMPLES:      (1) Display the J2000 coordinates for the ultracompact HII region          G45.45+0.06        IDL&gt; QuerySimbad,'GAL045.45+00.06'            ===&gt;19 14 20.77  +11 09  3.6  PROCEDURES USED:        REPSTR(), WEBGET()   NOTES:      The actual  query is made to the Sesame name resolver      ( see http://cdsweb.u-strasbg.fr/doc/sesame.htx ).     The Sesame      resolver first searches the Simbad name resolver, then  NED and then      Vizier.  MODIFICATION HISTORY:      Written by M. Feldt, Heidelberg, Oct 2001   &lt;mfeldt@mpia.de&gt;      Minor updates, W. Landsman   August 2002      Added option to use NED server, better parsing of SIMBAD names such as           IRAS F10190+5349    W. Landsman  March 2003      Turn off extended name search for NED server, fix negative declination      with /NED    W. Landsman  April 2003      Use Simbad Sesame sever, add /Verbose, /CADC keywords        B. Stecklum, TLS Tautenburg/ W. Landsman, Feb 2007     Update NED query to account for new IPAC format, A. Barth  March 2007     Update NED query to account for another new IPAC format, A. Barth                                                    July 2007      Update message when NED does not find object  W.L.  October 2008      Remove CADC keyword, add CFA keyword, warning if more than two          matches  W.L. November 2008      Make NED queries through the Sesame server, add Server output           keyword  W.L.  June 2009      Don't get primary name if user didn't ask for it  W.L. Aug 2009      Added /SILENT keyword W.L. Oct 2009      Added /PRINT keyword W.L.   Oct 2011  ", "FoundNEDERRMSGVerboseCADCCFAServerSILENTPrintnameradeid", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/queryvizier.html", "queryvizier.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "queryvizier.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/queryvizier.html#Queryvizier", "Queryvizier", 'routine in <a href="idlastro/queryvizier.html">queryvizier.pro</a>', "queryvizier.pro", "", "Queryvizier", " NAME:    QUERYVIZIER   PURPOSE:    Query any catalog in the Vizier database by position   EXPLANATION:    Uses the IDL SOCKET command to provide a positional query of any catalog    in the the Vizier (http://vizier.u-strasbg.fr/) database over the Web and    return results in an IDL structure.   CALLING SEQUENCE:      info = QueryVizier(catalog, targetname_or_coords, [ dis                         /ALLCOLUMNS, /CANADA, CONSTRAINT= ,/VERBOSE ])   INPUTS:       CATALOG - Scalar string giving the name of the VIZIER catalog to be             searched.    The complete list of catalog names is available at             http://vizier.u-strasbg.fr/vizier/cats/U.htx .              Popular VIZIER catalogs include             'II/294' - Sloan SDSS photometric catalog Release 7 (2009)             '2MASS-PSC' - 2MASS point source catalog (2003)             'GSC2.3' - Version 2.3.2 of the HST Guide Star Catalog (2006)             'USNO-B1' - Verson B1 of the US Naval Observatory catalog (2003)             'NVSS'  - NRAO VLA Sky Survey (1998)             'B/DENIS/DENIS' - 2nd Deep Near Infrared Survey of southern Sky             'I/259/TYC2' - Tycho-2 main catalog (2000)             'I/311/HIP2' - Hipparcos main catalog, new reduction (2007)            Note that some names will prompt a search of multiple catalogs           and QUERYVIZIER will only return the result of the first search.           Thus, setting catalog to  HIP2  will search all catalogs           associated with the Hipparcos mission, and return results for the           first catalog found.    To specifically search the Hipparcos or           Tycho main catalogs use the VIZIER catalog names listed above        TARGETNAME_OR_COORDS - Either a scalar string giving a target name,           (with J2000 coordinates determined by SIMBAD), or a 2-element           numeric vector giving the J2000 right ascension in *degrees* and           the target declination in degrees.           If the targetname is set to 'NONE' then QUERYVIZIER will perform           an all-sky search using the constraints given in the CONSTRAINT           keyword.  OPTIONAL INPUT:     dis - scalar or 2-element vector.   If one value is supplied then this           is the search radius in arcminutes.     If two values are supplied           then this is the width (i.e., in longitude direction) and height           of the search box.   Default is a radius search with radius of           5 arcminutes   OUTPUTS:    info - Anonymous IDL structure containing information on the catalog           sources within the specified distance of the specified center.  The           structure tag names are identical with the VIZIER  catalog column           names, with the exception of an occasional underscore           addition, if necessary to convert the column name to a valid           structure tag.    The VIZIER Web  page should consulted for the           column names and their meaning for each particular catalog..            If the tagname is numeric and the catalog field is blank then either           NaN  (if floating) or -1 (if integer) is placed in the tag.            If no sources are found within the specified radius, or an           error occurs in the query then -1 is returned.  OPTIONAL KEYWORDS:           /ALLCOLUMNS - if set, then all columns for the catalog are returned                  The default is to return a smaller VIZIER default set.            /CANADA - By default, the query is sent to the main VIZIER site in             Strasbourg, France.   If /CANADA is set then the VIZIER site             at the Canadian Astronomical Data Center (CADC) is used instead.             Note that not all Vizier sites have the option to return             tab-separated values (TSV) which is required by this program.            CONSTRAINT - string giving additional nonpositional numeric             constraints on the entries to be selected.     For example, when             in the GSC2.3  catalog, to only select sources with Rmag &lt; 16 set             Constraint = 'Rmag&lt;16'.    Multiple constraints can be             separated by commas.    Use '!=' for  not equal , '&lt;=' for smaller             or equal,  &gt;=  for greater than or equal.  See the complete list             of operators at                  http://vizier.u-strasbg.fr/doc/asu.html#AnnexQual             For this keyword only, **THE COLUMN NAME IS CASE SENSITIVE** and             must be written exactly as displayed on the VIZIER Web page.             Thus for the GSC2.3 catalog one must use 'Rmag' and not 'rmag' or             'RMAG'.    In addition, *DO NOT INCLUDE ANY BLANK SPACE* unless it             is a necessary part of the query.             /SILENT - If set, then no message will be displayed if no sources                 are found.    Error messages are still displayed.            /VERBOSE - If set then the query sent to the VIZIER site is                displayed, along with the returned title(s) of found catalog(s)  EXAMPLES:           (1) Plot a histogram of the J magnitudes of all 2MASS point sources           stars within 10 arcminutes of the center of the globular cluster M13            IDL&gt;  info = queryvizier('2MASS-PSC','m13',10)           IDL&gt; plothist,info.jmag,xran=[10,20]            (2)  Find the brightest J mag GSC2.3 source within 3' of the                J2000 position ra = 10:12:34, dec = -23:34:35            IDL&gt; str = queryvizier('GSC2.3',[ten(10,12,34)*15,ten(-23,34,35)],3)           IDL&gt; print,min(str.jmag,/NAN)            (3) Find sources with V &lt; 19 in the Magellanic Clouds Photometric               Survey (Zaritsky+, 2002) within 5 arc minutes of  the position               00:47:34 -73:06:27                Checking the VIZIER Web page we find that this catalog is           IDL&gt;  catname =  'J/AJ/123/855/table1'           IDL&gt;  ra = ten(0,47,34)*15 & dec = ten(-73,6,27)           IDL&gt; str = queryvizier(catname, [ra,dec], 5, constra='Vmag&lt;19')            (4) Perform an all-sky search of the Tycho-2 catalog for stars with               BTmag = 13+/-0.1           IDL&gt; str = queryvizier('I/259/TYC2','NONE',constrain='BTmag=13+/-0.1')   PROCEDURES USED:           GETTOK(), REMCHAR, REPSTR(), STRCOMPRESS2(), WEBGET()  TO DO:        (1) Allow specification of output sorting  MODIFICATION HISTORY:          Written by W. Landsman  SSAI  October 2003          Give structure name returned by VIZIER not that given by user                     W. Landsman   February 2004          Don't assume same format for all found sources W. L. March 2004          Added CONSTRAINT keyword for non-positional constraints WL July 2004          Remove use of EXECUTE() statement WL June 2005          Make dis optional as advertised WL August 2005          Update for change in Vizier output format WL February 2006          Fix problem in Feb 2006 update when only 1 object found                      WL/D.Apai        March 2006          Accept 'E' format for floating point. M. Perrin April 2006          Added /ALLCOLUMNS option to return even more data.  M. Perrin, May 2006          Return anonymous structure W. Landsman  May 2006          Removed V6.0 notation to restore V5 compatibility W.Landsman July2006          Accept target='NONE' for all-sky search, allow '+/-' constraints                 W. Landsman  October 2006          Use HTTP 1.0 protocol in call to webget.pro          Use vector form of IDL_VALIDNAME if V6.4 or later W.L. Dec 2007          Update Strasbourg Web address for target name W.L. 3 March 2008          Also update Web address for coordinate search W.L. 7 March 2008          Allow for 'D' specification format  R. Gutermuth/W.L.  June 2008          Allow for possible lower-case returned formats  W.L. July 2008          Use STRCOMPRESS2()to remove blanks around operators in constraint               string  W.L.  August 2008          Added /SILENT keyword  W.L.  Jan 2009          Avoid error if output columns but not data returned W.L. Mar 2010          Ignore vector tags (e.g. SED spectra) W.L.   April 2011          Better checking when more than one catalog returned W.L. June 2012  ", "VERBOSECANADACONSTRAINTALLCOLUMNSSILENTcatalogtargetdis", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/quickfidmask.html", "quickfidmask.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "quickfidmask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/quickfidmask.html#quickfidmask", "quickfidmask", 'routine in <a href="code_snapshots/obsolete_code/quickfidmask.html">quickfidmask.pro</a>', "quickfidmask.pro", "", "quickfidmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/quickmask.html", "quickmask.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "quickmask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/quickmask.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/aug22_notworking/quickmask.html">quickmask.pro</a>', "quickmask.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/quickmask.html", "quickmask.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "quickmask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/quickmask.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/test_version/quickmask.html">quickmask.pro</a>', "quickmask.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/quickmask.html", "quickmask.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "quickmask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/quickmask.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/sep11/quickmask.html">quickmask.pro</a>', "quickmask.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/quickmask.html", "quickmask.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "quickmask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/quickmask.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/orig_version/quickmask.html">quickmask.pro</a>', "quickmask.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/quickmask.html", "quickmask.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "quickmask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/quickmask.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/obsolete_code/quickmask.html">quickmask.pro</a>', "quickmask.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/quickmask.html", "quickmask.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "quickmask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/quickmask.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/jul25/quickmask.html">quickmask.pro</a>', "quickmask.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/quickmask.html", "quickmask.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "quickmask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/quickmask.html#quickmask", "quickmask", 'routine in <a href="code_snapshots/albert_version/quickmask.html">quickmask.pro</a>', "quickmask.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/quickmask.html", "quickmask.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "quickmask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/quickmask.html#quickmask", "quickmask", 'routine in <a href="sep20/quickmask.html">quickmask.pro</a>', "quickmask.pro", "", "quickmask", "       Finds center of mask where pixels are above a given threshold   ", "input_image           2D array of pixels to mask with threshold  thresh           Threshold used to select pixels  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/radec.html", "radec.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "radec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/radec.html#radec", "radec", 'routine in <a href="idlastro/radec.html">radec.pro</a>', "radec.pro", "", "radec", " NAME: 	RADEC  PURPOSE: 	To convert RA and Dec  from decimal to sexagesimal units.  EXPLANATION: 	The conversion is to sexagesimal hours for RA,  and sexagesimal 	degrees for declination.   CALLING SEQUENCE: 	radec, ra, dec, ihr, imin, xsec, ideg, imn, xsc, [/HOURS}   INPUTS: 	ra   - Right ascension, scalar or vector, in DEGREES unless the               /HOURS keyword is set 	dec  - declination in decimal DEGREES, scalar or vector, same number 		of elements as RA   OUTPUTS: 	ihr  - right ascension hours   (INTEGER*2) 	imin - right ascension minutes (INTEGER*2) 	xsec - right ascension seconds  (REAL*4 or REAL*8) 	ideg - declination degrees (INTEGER*2) 	imn  - declination minutes (INTEGER*2) 	xsc  - declination seconds (REAL*4 or REAL*8)   OPTIONAL KEYWORD INPUT:        /HOURS - if set, then the input righ ascension should be specified in               hours instead of degrees.  RESTRICTIONS: 	RADEC does minimal parameter checking.   REVISON HISTORY: 	Written by B. Pfarr, STX, 4/24/87 	Converted to IDL V5.0   W. Landsman   September 1997        Added /HOURS keyword W. Landsman  August 2002  ", "hoursradecihriminxsecidegimnxsc", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/randomchi.html", "randomchi.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "randomchi.pro", "", "", "   NAME:       RANDOMCHI  PURPOSE:       GENERATE CHI-SQUARE DISTRIBUTED RANDOM VARIABLES.   AUTHOR : BRANDON C. KELLY, STEWARD OBS., SEP 2005   INPUTS :     SEED - THE SEED FOR THE RANDOM NUMBER GENERATOR, CAN BE UNDEFINED.    DOF - THE DEGREES OF FREEDOM FOR THE CHI-SQUARED DISTRIBUTION.   OPTIONAL INPUTS :     NRAND - THE NUMBER OF RANDOM NUMBERS TO DRAW  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/randomchi.html#randomchi", "randomchi", 'routine in <a href="idlastro/randomchi.html">randomchi.pro</a>', "randomchi.pro", "", "randomchi", "", "seeddofnrand", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/randomdir.html", "randomdir.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "randomdir.pro", "", "", "  NAME:      RANDOMDIR  PURPOSE:      GENERATE DIRICHLET-DISTRIBUTED RANDOM VARIABLES.   AUTHOR : BRANDON C. KELLY, STEWARD OBS., APRIL 2006   INPUTS :     SEED - THE SEED FOR THE RANDOM NUMBER GENERATOR, CAN BE UNDEFINED.    ALPHA - THE SHAPE PARAMETERS FOR THE DIRICHLET DISTRIBUTION. THIS            SHOULD BE A K-ELEMENT VECTOR.   OPTIONAL INPUTS :     NRAND - THE NUMBER OF RANDOM NUMBERS TO DRAW   CALLED ROUTINES :     RANDOMGAM  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/randomdir.html#randomdir", "randomdir", 'routine in <a href="idlastro/randomdir.html">randomdir.pro</a>', "randomdir.pro", "", "randomdir", "", "seedalphanrand", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/randomgam.html", "randomgam.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "randomgam.pro", "", "", " NAME:      RANDOMGAM  PURPOSE:      GENERATE GAMMA-DISTRIBUTED RANDOM VARIABLES.   AUTHOR : BRANDON C. KELLY, STEWARD OBS., APRIL 2006   INPUTS :     SEED - THE SEED FOR THE RANDOM NUMBER GENERATOR, CAN BE UNDEFINED.    ALPHA, BETA - THE SHAPE PARAMETERS FOR THE GAMMA DISTRIBUTION.   OPTIONAL INPUTS :     NRAND - THE NUMBER OF RANDOM NUMBERS TO DRAW  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/randomgam.html#randomgam", "randomgam", 'routine in <a href="idlastro/randomgam.html">randomgam.pro</a>', "randomgam.pro", "", "randomgam", "", "seedalphabetanrand", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/randomnumbergenerator__define.html", "randomnumbergenerator__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "randomnumbergenerator__define.pro", "", "", " NAME:        RANDOMNUMBERGENERATOR   PURPOSE:         Allows the user to obtain a sequence of pseudo-random numbers. The        object maintains the random number generator seed in such a way that        subsequent calls to GetRandomNumbers will guarentee that you don't        get the same random numbers each time you ask for random numbers.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities   CALLING SEQUENCE:         Generate three random numbers.         IDL&gt; rng = Obj_New('RandomNumberGenerator', initialSeed)        IDL&gt; numberOfNumbersNeeded = 3        IDL&gt; randomNumbers = rng -&gt; GetRandomNumbers(numberOfNumbersNeeded)        IDL&gt; Print, randomNumbers              0.80952855      0.35878432      0.52150406         Generate a sequence of 8 random digits.        IDL&gt; Print, rng -&gt; GetRandomDigits(8)              21855786   INPUT PARAMETERS FOR INIT METHOD:         initialSeed:    The initial seed for the random number generator. If undefined                        or absent, the number of seconds after 1 January 1970 is used.   METHODS:         randomNumbers -&gt; GetRandomNumbers(d1, d2, d3, d4 d5, d6, d7, d8)        randomDigits = obj -&gt; GetRandomDigits(numDigets)        obj -&gt; SetSeed, seed   MODIFICATION HISTORY:         Written by David W. Fanning, 13 November 2009.        Added GetRandomDigits method. 7 February 2010. DWF.        Incorrect cleanup of the seed pointer fixed in the CLEANUP procedure.            25 February 2010, DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/randomnumbergenerator__define.html#RandomNumberGenerator::GetRandomDigits", "RandomNumberGenerator::GetRandomDigits", 'routine in <a href="coyote/randomnumbergenerator__define.html">randomnumbergenerator__define.pro</a>', "randomnumbergenerator__define.pro", "", "RandomNumberGenerator::GetRandomDigits", "", "BYTESdigits", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/randomnumbergenerator__define.html#RandomNumberGenerator::GetRandomNumbers", "RandomNumberGenerator::GetRandomNumbers", 'routine in <a href="coyote/randomnumbergenerator__define.html">randomnumbergenerator__define.pro</a>', "randomnumbergenerator__define.pro", "", "RandomNumberGenerator::GetRandomNumbers", "", "BINOMIALDOUBLEGAMMANORMALPOISSONUNIFORMLONGd1d2d3d4d5d6d7d8", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/randomnumbergenerator__define.html#RandomNumberGenerator::SetSeed", "RandomNumberGenerator::SetSeed", 'routine in <a href="coyote/randomnumbergenerator__define.html">randomnumbergenerator__define.pro</a>', "randomnumbergenerator__define.pro", "", "RandomNumberGenerator::SetSeed", "", "theSeed", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/randomnumbergenerator__define.html#RandomNumberGenerator::CLEANUP", "RandomNumberGenerator::CLEANUP", 'routine in <a href="coyote/randomnumbergenerator__define.html">randomnumbergenerator__define.pro</a>', "randomnumbergenerator__define.pro", "", "RandomNumberGenerator::CLEANUP", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/randomnumbergenerator__define.html#RandomNumberGenerator::INIT", "RandomNumberGenerator::INIT", 'routine in <a href="coyote/randomnumbergenerator__define.html">randomnumbergenerator__define.pro</a>', "randomnumbergenerator__define.pro", "", "RandomNumberGenerator::INIT", "", "initialSeed", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/randomnumbergenerator__define.html#RandomNumberGenerator__Define", "RandomNumberGenerator__Define", 'routine in <a href="coyote/randomnumbergenerator__define.html">randomnumbergenerator__define.pro</a>', "randomnumbergenerator__define.pro", "", "RandomNumberGenerator__Define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/randomp.html", "randomp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "randomp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/randomp.html#randomp", "randomp", 'routine in <a href="idlastro/randomp.html">randomp.pro</a>', "randomp.pro", "", "randomp", " NAME:        RANDOMP  PURPOSE:        Generates an array of random numbers distributed as a power law.  CALLING SEQUENCE:        RANDOMP, X, Pow, N, [ RANGE_X = [low,high], SEED= ]'  INPUTS:        Pow:  Exponent of power law.                The pdf of X is f_X(x) = A*x^pow, low &lt;= x &lt;= high                ASTRONOMERS PLEASE NOTE:                pow is little gamma  = big gamma - 1 for stellar IMFs.        N:    Number of elements in generated vector.   OPTIONAL INPUT KEYWORD PARAMETER:        RANGE_X:  2-element vector [low,high] specifying the range of                output X values; the default is [5, 100].   OPTIONAL INPUT-OUTPUT KEYWORD PARAMETER:        SEED:    Seed value for RANDOMU function.    As described in the                documentation for RANDOMU, the value of SEED is updated on                each call to RANDOMP, and taken from the system clock if not                supplied.   This keyword can be used to have RANDOMP give                identical results on different runs.  OUTPUTS:        X:    Vector of random numbers, distributed as a power law between                specified range  PROCEDURE:         Transformation Method  for random variables is described in Bevington        & Robinson,  Data Reduction & Error Analysis for Physical Sciences , 2nd        Edition (McGraw-Hill, 1992). p. 83.        Output of RANDOMU function is transformed to power-law        random variable.   EXAMPLE:        Create a stellar initial mass function (IMF) with 10000 stars        ranging from 0.5 to 100 solar masses and a Salpeter slope.  Enter:         RANDOMP,MASS,-2.35,10000,RANGE_X=[0.5,100]   NOTES:        Versions 5.1.1 and V5.2 of IDL have a bug in RANDOMU such that the SEED        value is initialized to the same value at the start of each session,        rather than being initialized by the system clock.    RANDOMP will be        affected in a similar manner.  MODIFICATION HISTORY:        Written by R. S. Hill, Hughes STX, July 13, 1995        July 14, 1995   SEED keyword added at Landsman's suggestion.                     Documentation converted to standard format.  RSH        Converted to IDL V5.0   W. Landsman   September 1997  ", "range_xseedxpown", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/randomwish.html", "randomwish.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "randomwish.pro", "", "", " NAME:     RANDOMWISH  PURUPOSE:  ROUTINE TO DRAW RANDOM MATRICES FROM A WISHART DISTRIBUTION WITH DOF  DEGREES OF FREEDOM AND SCALE MATRIX S.   AUTHOR : BRANDON C. KELLY, STEWARD OBS., JULY 2006   INPUTS :     SEED - THE SEED FOR THE RANDOM NUMBER GENERATOR, CAN BE UNDEFINED.    DOF - THE DEGREES OF FREEDOM FOR THE WISHART DISTRIBUTION.    S - THE SCALE MATRIX. THE DIMENSION OF S CANNOT BE GREATER THAN        DOF.   OPTIONAL INPUTS :     NRAND - THE NUMBER OF RANDOM MATRICES TO DRAW   CALLED ROUTINES :     MRANDOMN  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/randomwish.html#randomwish", "randomwish", 'routine in <a href="idlastro/randomwish.html">randomwish.pro</a>', "randomwish.pro", "", "randomwish", "", "seeddofSnrand", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/rangeof.html", "rangeof.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "rangeof.pro", "", "", " NAME:   RANGEOF   PURPOSE:    This function returns the range (i.e., the minimum and maximum value)   of its argument.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:    Utilities   CALLING SEQUENCE:    range = RangeOf(variable)   INPUTS:    variable:     Any numeric IDL variable, except complex.   KEYWORD PARAMETERS:    None.   OUTPUTS:    range:        A two-element vector containing the minimum and maximum value                 of the variable.   EXAMPLE:    x = RandomU(3L, 10) * 100   Print, RangeOf(x)         3.78892      98.4703   MODIFICATION HISTORY:    Written by: David W. Fanning, 15 February 2009.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/rangeof.html#RangeOf", "RangeOf", 'routine in <a href="coyote/rangeof.html">rangeof.pro</a>', "rangeof.pro", "", "RangeOf", "", "variable", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rb.html", "rb.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "rb.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " At the end of the day this should find the center of the sun using a variety of (working) methods   Compiled the doc with idldoc,root='/Users/jerensuzuki/Documents/suncentering', $  output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rb.html#scanbox", "scanbox", 'routine in <a href="code_snapshots/obsolete_code/rb.html">rb.pro</a>', "rb.pro", "", "scanbox", "       Boxit was too computation-intensive, this is more a rough boxing program   ", "file       File to be read in  time       Print the elapsed time  meanthresh       Use the average of the image as the threshold value. Otherwise, use half of max  scan_width       How far apart the scanning should be   ", "          -1", "       cropped = scanbox(file='$PWD/sep11_postit/104533_20120912_124300_353097_0.bin',/time)   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rb.html#comp2", "comp2", 'routine in <a href="code_snapshots/obsolete_code/rb.html">rb.pro</a>', "rb.pro", "", "comp2", "           Finds the centroid by summing all values over a certain threshold and averaging them   ", "file       File to be read in  time       Prints the elapsed time  plot       Makes a nice plot  sigmavalue       Sets the threshold to be max(image) - sigmavalue*stddev(image)   xpos       X center  ypos       Y center  thresh       Threshold used to select pixels   ", "          -1", "           comp2,xpos,ypos,/plot   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rb.html#comp4", "comp4", 'routine in <a href="code_snapshots/obsolete_code/rb.html">rb.pro</a>', "rb.pro", "", "comp4", "           Only used to save the strips into structures.  ", "file       File to be read in  time       Prints the elapsed time  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be max(image) - sigmavalue*stddev(image)   xstrips       Structure containing row strips  ystrips       Structure containing column strips  thresh       Threshold used to select pixels   ", "          -1", "           comp4,xstrips,ystrips,thresh,/time,scan_width=10,/thalf   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rb.html#comp5", "comp5", 'routine in <a href="code_snapshots/obsolete_code/rb.html">rb.pro</a>', "rb.pro", "", "comp5", "           Only used to save the cut-down strips into structures.   ", "file       File to be read in  time       Prints the elapsed time  ministrip_length       How long the total array of the cut-down strip will be  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be max(image) - sigmavalue*stddev(image)   xstrips       Contains the row sctructures of strips  ystrips       Contains the col sctructures of strips  thresh       Threshold value used   ", "          -1", "           comp5,xstrips,ystrips,thresh   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rb.html#comp6", "comp6", 'routine in <a href="code_snapshots/obsolete_code/rb.html">rb.pro</a>', "rb.pro", "", "comp6", "       Uses the data from comp5 and draws a linear/quadratic/cubic function to find midpoint.        Order is the power of the function.   ", "file       File to be read in  order       What order polynomial to use for POLY_FIT()  time       Prints the elapsed time  scan_width       Ondicates how far apart to scan  ministrip_length       How long the trimmed down strip will be  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be max(image) - sigmavalue*stddev(image)   xpos       X Center  ypos       Y Center   ", "          -1", "           comp6,xpos,ypos,order=3   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rb.html#cc", "cc", 'routine in <a href="code_snapshots/obsolete_code/rb.html">rb.pro</a>', "rb.pro", "", "cc", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rb.html#rb", "rb", 'routine in <a href="code_snapshots/obsolete_code/rb.html">rb.pro</a>', "rb.pro", "", "rb", "       Finds the centroid using a variety of compression levels  ", "file       File to be read in  ministrip_length       How long the cut-down strip is  scan_width       How far apart the scans are  time       Prints the elapsed time  order       What order polynomial to use for POLY_FIT()  plot       If set, makes some nice plots.  sigmavalue       Sets the threshold to be max(image) - sigmavalue*stddev(image)   ", "          -1", "   More Keywords/parameters     How strict are we going to be for the outputs of each compression file?   ");
  
  

libdata[libdataItem++] = new Array("idlastro/rdfits_struct.html", "rdfits_struct.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "rdfits_struct.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/rdfits_struct.html#rdfits_struct", "rdfits_struct", 'routine in <a href="idlastro/rdfits_struct.html">rdfits_struct.pro</a>', "rdfits_struct.pro", "", "rdfits_struct", " NAME:       RDFITS_STRUCT  PURPOSE:       Read an entire FITS file (all extensions) into a single IDL structure.  EXPLANATION:       Each header, image or table array is placed in a separate structure       tag.   CALLING SEQUENCE:       RDFITS_STRUCT, filename, struct, /SILENT, /HEADER_ONLY, EXTEN= ]   INPUT:       FILENAME = Scalar string giving the name of the FITS file.                  One can also specify a gzip (.gz) compressed file   OPTIONAL KEYWORD:       /HEADER_ONLY - If set, then only the FITS headers (and not the data)                 are read into the structure.       /SILENT - Set this keyword to suppress informational displays at the                terminal.  OUTPUT:       struct = structure into which FITS data is read.   The primary header              and image are placed into tag names HDR0 and IM0.   The ith              extension is placed into the tag names HDRi, and either TABi              (if it is a binary or ASCII table) or IMi (if it is an image              extension)               If /HEADER_ONLY is set, then struct will contain tags HDR0, HDR1              ....HDRn containing all the headers of a FITS file with n              extensions  OPTIONAL INPUT KEYWORD:        EXTEN - positive integer array specifying which extensions to read.              Default is to read all extensions.  PROCEDURES USED:        FITS_OPEN, FITS_READ, FITS_CLOSE   METHOD:        The file is opened with FITS_OPEN which return information on the        number and type of each extension.    The CREATE_STRUCT() function        is used iteratively, with FITS_READ calls to build the final structure.   EXAMPLE:        Read the FITS file 'm33.fits' into an IDL structure, st         IDL&gt; rdfits_struct, 'm33.fits', st        IDL&gt; help, /str, st                   ;Display info about the structure         To just read the second and fourth extensions        IDL&gt; rdfits_struct, 'm33.fits', st, exten=[2,4]  RESTRICTIONS:        Does not handle random groups or variable length binary tables  MODIFICATION HISTORY:        Written K. Venkatakrishna, STX April 1992        Code cleaned up a bit  W. Landsman  STX  October 92        Modified for MacOS     I.  Freedman  HSTX April 1994        Work under Windows 95  W. Landsman   HSTX  January 1996        Use anonymous structures, skip extensions without data WBL April 1998        Converted to IDL V5.0, W. Landsman, April 1998        OS-independent deletion of temporary file  W. Landsman  Jan 1999        Major rewrite to use FITS_OPEN and CREATE_STRUCT() W. Landsman Sep 2002        Added /HEADER_ONLY keyword   W. Landsman  October 2003        Do not copy primary header into extension headers W. Landsman Dec 2004        Do not modify NAXIS when using /HEADER_ONLY W. Landsman Jan 2005        Added EXTEN keyword  W. Landsman July 2009  ", "SILENTHEADER_ONLYEXTENfilenamestruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/rdfloat.html", "rdfloat.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "rdfloat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/rdfloat.html#rdfloat", "rdfloat", 'routine in <a href="idlastro/rdfloat.html">rdfloat.pro</a>', "rdfloat.pro", "", "rdfloat", " NAME:       RDFLOAT  PURPOSE:       Quickly read a numeric ASCII data file into IDL floating/double vectors.  EXPLANATION:       Columns of data may be separated by tabs or spaces.      This       program is fast but is restricted to data files where all columns can       be read as floating point (or all double precision).        Use READCOL if  greater flexibility is desired.   Use READFMT to read a       fixed-format ASCII file.   Use FORPRINT to print columns of data.   CALLING SEQUENCE:       RDFLOAT, name, v1, [ v2, v3, v4, v5, ...  v19]                          COLUMNS, /DOUBLE, SKIPLINE = , NUMLINE = ]   INPUTS:       NAME - Name of ASCII data file, scalar string.  In VMS, an extension of               .DAT is assumed, if not supplied.   OPTIONAL INPUT KEYWORDS:       COLUMNS - Numeric scalar or vector specifying which columns in the file                to read.    For example, if COLUMNS = [3,7,11] then the first                output variable (v1) would contain column 3, the second would                contain column 7 and the third would contain column 11.   If                the number of elements in the COLUMNS vector is less than the                number of output parameters, then consecutive columns are                implied.    For example, if 3 output parameters are supplied                (v1,v2,v3) and COLUMNS = 3, then columns 3,4, and 5 will be                read.       SKIPLINE - Integer scalar specifying number of lines to skip at the top               of file before reading.   Default is to start at the first line.       NUMLINE - Integer scalar specifying number of lines in the file to read.              Default is to read the entire file       /DOUBLE - If this keyword is set, then all variables are read in as               double precision.       /SILENT - Set this keyword to suppress any informative messages   OUTPUTS:       V1,V2,V3,...V19 - IDL vectors to contain columns of data.                Up to 19 columns may be read.  All output vectors are of type                float, unless the /DOUBLE keyword is set,   EXAMPLES:       Each row in a file 'position.dat' contains a star number and 6 columns       of data giving an RA and Dec in sexagesimal format.   Read into IDL       variables.         IDL&gt; rdfloat,'position.dat',ID,hr,min,sec,deg,dmin,dsec         All output vectors will be floating point.    To only read the        declination vectors (Deg,dmin,dsec)         IDL&gt; rdfloat,'position.dat',deg,dmin,dsec,col=4   RESTRICTIONS:       (1) All rows in the file must be formatted identically (except for           those skipped by SKIPLINE).    RDFLOAT reads the first line of           the data (after SKIPLINE) to determine the number of columns of           data.       (2) Cannot be used to read strings  PROCEDURES USED:       None.  REVISION HISTORY:       Written         W. Landsman                 September 1995       Call NUMLINES() function                    February 1996       Read up to 19 columns                       August 1997       Converted to IDL V5.0   W. Landsman         September 1997       Allow to skip more than 32767 lines  W. Landsman  June 2001       Added /SILENT keyword   W. Landsman         March 2002       Added COLUMNS keyword, use STRSPLIT    W. Landsman May 2002       Use SKIP_LUN if V5.6 or later          W. Landsman Nov 2002       V5.6 version, use FILE_LINES()         W. Landsman Dec 2002  ", "SKIPLINENUMLINEDOUBLESILENTCOLUMNSnamev1v2v3v4v5v6v7v8v9v10v11v12v13v14v15v16v17v18v19", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/rdplot.html", "rdplot.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "rdplot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/rdplot.html#RESET_RDPLOT", "RESET_RDPLOT", 'routine in <a href="idlastro/rdplot.html">rdplot.pro</a>', "rdplot.pro", "", "RESET_RDPLOT", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/rdplot.html#RDPLOT", "RDPLOT", 'routine in <a href="idlastro/rdplot.html">rdplot.pro</a>', "rdplot.pro", "", "RDPLOT", " NAME:    RDPLOT   PURPOSE:    Like CURSOR but with a full-screen cursor and continuous readout option   EXPLANATION:    This program is designed to essentially mimic the IDL CURSOR command,    but with the additional options of continuously printing out the data    values of the cursor's position, and using a full-screen cursor rather    than a small cross cursor.  The full screen cursor uses OPLOT and    X-windows graphics masking to emulate the cursor.       One difference is that IF the PRINT keyword is set but the DOWN,    WAIT, CHANGE, or NOWAIT keywords are not set, then the leftmost mouse    button will print a  newline  line-feed, but not exit.   CALLING SEQUENCE:    RDPLOT [, X, Y] [, WaitFlag] [, /DATA | /DEVICE | /NORMAL]       [, /NOWAIT | /WAIT | /DOWN | /CHANGE]       [, /FULLCURSOR] [, /NOCLIP] [, /CROSS] [, /ACCUMULATE]       [, ERR=, PRINT=, XTITLE=, YTITLE=, XVALUES=, YVALUES=        , LINESTYLE=, THICK=, COLOR=, BACKGROUND=]   REQUIRED INPUTS:    None.   OPTIONAL INPUTS:    WAITFLAG = Uses the same table as the intrinsic CURSOR command, But note 	that unlike the CURSOR command, there is no UP keyword. 		WaitFlag=0 sets the NOWAIT keyword 		WaitFlag=1 sets the WAIT keyword {default} 		WaitFlag=2 sets the CHANGE keyword 		WaitFlag=3 sets the DOWN keyword   OPTIONAL OUTPUTS:     X - a named variable to receive the final cursor X position, scalar         or vector (if /ACCUMULATE is set)     Y - a named variable to receive the final cursor Y position, scalar         or vector (if /ACCUMULATE is set)  OPTIONAL KEYWORD INPUT PARAMETERS:    /DATA - data coordinates are displayed and returned.    /DEVICE - device coordinates are displayed and returned.    /NORMAL - normal coordinates are displayed and returned.       Default is to use DATA coordinates if available (see notes).    /NOWAIT = if non-zero the routine will immediately return the cursor's       present position.    /WAIT - if non-zero will wait for a mouse key click before returning.  If       cursor key is already down, then procedure immediately exits.    /DOWN - equivalent to WAIT *except* that if the mouse key is already down       when the procedure is called, the procedure will wait until the mouse       key is clicked down again.    /CHANGE - returns when the mouse is moved OR a key is clicked up or down.    PRINT = if non-zero will continuously print out (at the terminal) the data       values of the cursor's position.  If PRINT&gt;1, program will printout a       brief header describing the mouse button functions.  However, note that       the button functions are overridden if any of the DOWN, WAIT, or       CHANGE values are non-zero.    XTITLE = label used to describe the values of the abscissa if PRINT&gt;0.    YTITLE = label used to describe the values of the ordinate if PRINT&gt;0.    XVALUES = a vector corresponding to the values to be printed when the 	PRINT keyword is set.  This allows the user the option of printing 	out other values rather than the default X coordinate position of 	the cursor.  E.g., if XVALUES is a string vector of dates such as 	['May 1', 'May 2', ...], then those dates will be printed rather than 	the X value of the cursor's position: if X=1 then 'May 2' would be 	printed, etc.  This requires that the values of the X coordinate read 	by the cursor must be positive (can't access negative elements).        If XVALUES=-1, then NO values for X will be printed.    YVALUES = analogous to the XVALUES keyword.    /FULLCURSOR - if non-zero default cursor is blanked out and full-screen       (or full plot window, depending on the value of NOCLIP) lines are       drawn; their intersecton is centered on the cursor position.    /NOCLIP - if non-zero will make a full-screen cursor, otherwise it will       default to the value in !P.NOCLIP.    LINESTYLE = style of line that makes the full-screen cursor.    THICK = thickness of the line that makes the full-screen cursor.    COLOR = color of the full-screen cursor.    BACKGROUND = color of the background of the plot device.  If this has       been set to !P.BackGround, then this keyword is unnecessary.    CROSS = if non-zero will show the regular cross AND full screen cursors.    /ACCUMULATE - all of the positions for which the left button was       clicked are stored in the X and Y variables.  Has no effect if X and Y       are not present.   OPTIONAL KEYWORD OUTPUT PARAMETER:    ERR = returns the most recent value of the !mouse.button value.   NOTES:    Note that this procedure does not allow the  UP  keyword/flag...which    doesn't seem to work too well in the origianl CURSOR version anyway.     If a data coordinate system has not been established, then RDPLOT will    create one identical to the device coordinate system.   Note that this    kluge is required even if the user specified /NORMAL coordinates, since    RDPLOT makes use of the OPLOT procedure.  This new data coordinate system    is effectively  erased  (!X.CRange and !Y.CRange are both set to zero)    upon exit of the routine so as to not change the plot status from the    user's point of view.     Only tested on X-windows systems.  If this program is interrupted, the    graphics function might be left in a non-standard state; in that case,    run the program RESET_RDPLOT to return the standard graphics functions,    or type the command:   DEVICE, /CURSOR_CROSS, SET_GRAPHICS=3, BYPASS=0     Robishaw added /ACCUMULATE keyword to pass back all the positions at    which the mouse was left-clicked.  In addition, the value of the exit    click is returned unless the cursor did not change position between the    last left-click and the exit click.   BUGS:    NOTE: (1/27/05) The bugs below have been fixed by Robishaw and tested    on Solaris, Linux and OS-X.     It is assumed that the current background of the plot is correctly    defined by the value in !P.Background.  Otherwise, the color of the    long cursor probably will not be correct.  Sometimes the color doesn't    work anyway, and I'm not sure why.    NOTE: Robishaw fixed this 1/27/05.     There may be some cases (e.g., when THICK&gt;1 and NOCLIP=0) when the    full-screen cursor is not correctly erased, leaving  ghost images  on the    plot.  It just seems that the screen updates get slow or the positions    ambiguous with a thick line and the cursor off the plot.    NOTE: Robishaw fixed this 1/27/05.   PROCEDURE:    Basically is a bells-n-whistles version of the CURSOR procedure.  All    the details are covered in the above discussion of the keywords.   EXAMPLES:    A silly, but informative one:    Months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', $              'Aug', 'Sep', 'Oct', 'Nov', 'Dec']    plot, indgen(12), xrange=[-5, 15]    rdplot, /FULL, /PRINT, XTITLE='Month: ', YTITLE='Y-value per month = ', $       xvalues=Months     If your plot has a non-black background color, be sure to set either    !p.background or the BACKGROUND keyword.  Here are examples of how to    use a blue full-screen cursor on a plot with a red background and    yellow axes and data. First, deal with color decomposition off:    device, decomposed=0    tvlct, [255,255,0], [0,255,0], [0,0,255], 1    plot, randomn(seed,1024), XSTYLE=19, PSYM=3, COLOR=2, BACK=1    rdplot, /PRINT, /FULL, THICK=5, /NOCLIP, BACK=1, COLOR=3     For decomposition on (TrueColor or DirectColor only):    device, decomposed=1    plot, randomn(seed,1024), XSTYLE=19, PSYM=3, COLOR=65535l, BACK=255l    rdplot, /PRINT, /FULL, THICK=5, /NOCLIP, BACK=255l, COLOR=16711680l   MODIFICATION HISTORY:    Written (originally named CURFULL) by J.Wm.Parker  1993 Nov 22    Created data coordinates if not already present, W. Landsman Nov. 93    Added continuous printout of data values, COLOR and FULLCURSOR keywords       (so that default is that it acts just like the cursor command).       Changed name from CURFULL to RDPLOT.   J.Wm.Parker  1994 Apr 20    Modified (with some translation table assistance from the IDL support       group) to correctly plot the crosshair with the desired IDL       color using the device's translation table to determine the XOR       function and using the BYPASS function.  Added the RESET_RDPLOT       procedure to cleanup crashes that might occur while running       RDPLOT.  Other minor changes/bug fixes.  J.Wm.Parker  1994 May 21    Modified DOWN, WAIT, CHANGE functions to behave more similar to the       generic CURSOR procedure.   J.Wm.Parker  1995 April 24    Added XVALUES, YVALUES keywords and cleanup.   J.Wm.Parker  1995 April 24    Convert to IDL V5.0,  W. Landsman    July 1998    Change !D.NCOLORS to !D.TABLE_SIZE for 24 bit displays W. Landsman May 2000    Skip translation table for TrueColor visuals   W. Landsman  March 2001    Fixed /FULLCURSOR ghosts. Fixed to properly deal with background colors       in 24-bit visual classes (TrueColor and DirectColor).  Added       BACKGROUND keyword. Tim Robishaw 2005 Jan 27    Added /ACCUMULATE keyword. T. Robishaw 2006 Nov 8    Corrected following problems. When /CHANGE and /PRINT were set,       returned X & Y were different than those printed.  When /PRINT and       /NOWAIT were set, or /PRINT and /WAIT were set and the routine was       entered with a mouse button clicked, nothing was printed. When       /PRINT and /DOWN were set, if routine was started with button down,       advertised behavior was that routine would exit on next down click;       in practice if cursor was not moved, successive down clicks had no       effect.  Now, if X is passed as an output variable, requires that Y       is also passed, like CURSOR.  Bottom line is that RDPLOT now really       does behave like CURSOR and when /PRINT is set, the values printed       correspond to those returned in X & Y.  T. Robishaw 2006 Nov 12    Fixed misbehavior when color decomposition was set to off for       TrueColor and DirectColor.  Now thoroughly tested on PseudoColor       displays as well as both decomposition states for TrueColor and       DirectColor.  Also made the default cursor color white when       decomposition is on (this has been its default value for       decomposition off). T. Robishaw 2006 Nov 16  ", "DATADEVICENORMALNOWAITWAITDOWNCHANGEErrPRINTXTITLEYTITLEXVALUESYVALUESFULLCURSORNOCLIPLINESTYLETHICKCOLORBACKGROUNDCROSSACCUMULATExyWaitFlag", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/rdpsf.html", "rdpsf.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "rdpsf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/rdpsf.html#rdpsf", "rdpsf", 'routine in <a href="idlastro/rdpsf.html">rdpsf.pro</a>', "rdpsf.pro", "", "rdpsf", " NAME:        RDPSF  PURPOSE:        Read the FITS file created by GETPSF in the DAOPHOT sequence  EXPLANATION:        Combines the Gaussian with the residuals to create an output PSF array.   CALLING SEQUENCE:        RDPSF, PSF, HPSF, [ PSFname]   OPTIONAL INPUTS        PSFname - string giving the name of the FITS file containing the PSF                residuals   OUTPUTS        psf - array containing the actual PSF        hpsf - header associated with psf   PROCEDURES CALLED:        DAO_VALUE(), MAKE_2D, SXADDPAR, READFITS(), SXPAR()  REVISION HISTORY:        Written W. Landsman              December, 1988        Checked for IDL Version 2, J. Isensee & J. Hill, December, 1990        Converted to IDL V5.0   W. Landsman   September 1997  ", "psfhpsfpsfname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/read_fmr.html", "read_fmr.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "read_fmr.pro", "", "", " NAME:   READ_FMR   PURPOSE:    Read a journal (ApJ, AJ) machine-readable table into IDL   EXPLANATION:   Given a machine readable table name and optionally column   numbers, this FUNCTION reads the format information in the   meta-header and outputs a IDL function containing either the   complete table or only the requested columns.   CALLING SEQUENCE:   data = read_fmr(filename)   INPUTS:   filename [STRING]: the name of the file containing the machine   readable table. If filename is missing a dialog to select the   filename will be presented   INPUT KEYWORD PARAMETERS:    /HELP  - if set show the help     COLUMNS -  [(array of) integers or strings] of column(s) to be returned.      If columns is of type integer they represent indices for which      column numbers to return, if they are strings the columns with the      corresponding names will be returned in the order as given.     MISSINGVALUE [float]: value with which to replace the missing values in the         table, default is NaN.     /USE_COLNUM - If  specified and non-zero then column names will be generated         as 'C1, C2,  .... Cn'  for the number of columns in the table, rather         than using the table names.   OUTPUTS:   The ouput data structure will look like:     TYPE            STRING    'mr_structure'     NAME            STRING    Array[X]     UNIT            STRING    Array[X]     DESCRIPTION     STRING    Array[X]     DATA            STRUCT    -&gt; &lt;Anonymous&gt; Array[1]   where name contains the names of each columns   unit contains the given units   description contains the short descriptions and   data holds the values of the separate columns.   By default the tag names are   taken from the column names, with modifications necessary to make them a   valid tag name.    For example, the column name 'B-V' will be converted to   'B_V' to become a valid tag name.    If the /USE_COLNUM keyword is set, then   the column will be named  C0,  C1, ... , CX, where X stands for the total   number of columns read.   RESTRICTIONS:   (1) The file to be read should be formatted as a machine readable datafile.   (2) Use of the COLUMN keyword currently requires use of the EXECUTE, and so       cannot be used with the IDL Virtural machine.  EXAMPLE:   meas = read_fmr('smith.dat',col=[2,5,6], /Use_colnum)    plot,meas.data.c1,ytitle=meas.name[1]+' ('+meas.unit[1]+')'    and   data = read_fmr('smith.dat',col=['Name','Date'], /Use_colnum)    print,meas.data.c0   MODIFICATION HISTORY:   Version 1:   Written by Sacha Hony (ESA) Nov 14 2003    Based heavily on mrcolextract by Greg Schwarz (AAS Journals    staff scientist) on 8/16/00.    Version 1.1:     Fixed bug where column=[3,4] always returned the first few columns    VErsion 2.0 By default use column names as tag names W. Landsman Feb 2010  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/read_fmr.html#read_fmr", "read_fmr", 'routine in <a href="idlastro/read_fmr.html">read_fmr.pro</a>', "read_fmr.pro", "", "read_fmr", "", "columnsmissingvaluehelpuse_colnumfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/read_key.html", "read_key.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "read_key.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/read_key.html#read_key", "read_key", 'routine in <a href="idlastro/read_key.html">read_key.pro</a>', "read_key.pro", "", "read_key", " NAME: 	READ_KEY  PURPOSE: 	To read a keystroke and return its ASCII equivalent  EXPLANATION: 	If an ESCAPE sequence was produced and  the sequence is 	recognized (e.g. up arrow), then a code is returned.         This functionality is mostly made obsolete by the addition of the        ESCAPE and KEY_NAME keywords to GET_KBRD in IDL V6.2   CALLING SEQUENCE: 	key = READ_KEY(Wait)   INPUTS: 	Wait  -  The wait flag.  If non-zero, execution is halted until a 	         key is struck.  If zero, execution returns immediately and 	         a zero is returned if there was no keystroke waiting in the 	         keyboard buffer.  If not specified, zero is assumed.   OUTPUT: 	Returned - The key struck.  The ASCII code for non-escape sequences. 	           Escape sequence equivalents: 			Up Arrow     --  128 			Down Arrow   --  130 			Left Arrow   --  129 			Right Arrow  --  131 			Else         --    0  	The return value is a byte value.   MODIFICATION HISTORY: 	Written by Michael R. Greason, STX, 22 June 1990. 	Rewritten for a SUN workstation.  MRG, STX, 23 August 1990. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "wait", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/readcol.html", "readcol.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "readcol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/readcol.html#readcol", "readcol", 'routine in <a href="idlastro/readcol.html">readcol.pro</a>', "readcol.pro", "", "readcol", " NAME:        READCOL  PURPOSE:        Read a free-format ASCII file with columns of data into IDL vectors  EXPLANATION:        Lines of data not meeting the specified format (e.g. comments) are        ignored.  By default, columns may be separated by commas or spaces.         Use READFMT to read a fixed-format ASCII file.   Use RDFLOAT for        much faster I/O (but less flexibility).    Use FORPRINT to write        columns of data (inverse of READCOL).         If you sure that all lines meet the specified format (excluding        commented and SKIPed lines) then the speed for reading large files        can be significantly improved by setting the /QUICK keyword.   CALLING SEQUENCE:        READCOL, name, v1, [ v2, v3, v4, v5, ...  v40 , COMMENT=, /NAN            DELIMITER= ,FORMAT = , /DEBUG ,  /SILENT , SKIPLINE = , NUMLINE =            COUNT =, STRINGSKIP=   INPUTS:        NAME - Name of ASCII data file, scalar string.   OPTIONAL INPUT KEYWORDS:        FORMAT - scalar string containing a letter specifying an IDL type                for each column of data to be read.  Allowed letters are                A - string data, B - byte, D - double precision, F- floating                point, I - short integer, L - longword, LL - 64 bit integer,                U - unsigned short integer, UL - unsigned long integer                Z - longword hexadecimal, and X - skip a column.                 Columns without a specified format are assumed to be floating                point.  Examples of valid values of FMT are         'A,B,I'        ;First column to read as a character string, then                        1 column of byte data, 1 column integer data        'L,L,L,L'       ;Four columns will be read as longword arrays.        ' '             ;All columns are floating point         If a FORMAT keyword string is not supplied, then all columns are        assumed to be floating point.         /SILENT - Normally, READCOL will display each line that it skips over.                If SILENT is set and non-zero then these messages will be                suppressed.        /DEBUG - If this keyword is non-zero, then additional information is                 printed as READCOL attempts to read and interpret the file.        COMMENT - single character specifying comment character.   Any line                 beginning with this character will be skipped.   Default is                 no comment lines.        /COMPRESS - If set, then the file is assumed to be gzip compressed.                 There is no automatic recognition of compressed files                 by extension type.        DELIMITER - Character(s) specifying delimiter used to separate                 columns.   Usually a single character but, e.g. delimiter=':,'                 specifies that either a colon or comma as a delimiter.                 Set DELIM = string(9b) to read tab separated data                 The default delimiter is either a comma or a blank.        /NAN - if set, then an empty field will be read into a floating or                 double numeric variable as NaN; by default an empty field is                 converted to 0.0.        /PRESERVE_NULL - If set, then spaces are considered to be valid fields,                 useful if the columns contain missing data.   Note that between                 April and December 2006, /PRESERVE_NULL was the default.        /QUICK -  If set, then READCOL does not check that each individual line                 matches the supplied format.     This makes READCOL less                 flexible but can provide a significant speed improvement when                 reading large files.        SKIPLINE - Scalar specifying number of lines to skip at the top of file                before reading.   Default is to start at the first line.        NUMLINE - Scalar specifying number of lines in the file to read.                Default is to read the entire file        STRINGSKIP - will skip all lines that begin with the specified string.                (Unlike COMMENT this can be more than 1 character.) Useful to                skip over comment lines.   OUTPUTS:        V1,V2,V3,...V40 - IDL vectors to contain columns of data.                Up to 40 columns may be read.  The type of the output vectors                are as specified by FORMAT.   OPTIONAL OUTPUT KEYWORDS:        COUNT - integer giving the number of valid lines actually read        NLINES - integer giving the total number of lines in the file                 (as returned by FILE_LINES)   EXAMPLES:        Each row in a file position.dat contains a star name and 6 columns        of data giving an RA and Dec in sexagesimal format.   Read into IDL        variables.   (NOTE: The star names must not include the delimiter        as a part of the name, no spaces or commas as default.)         IDL&gt; FMT = 'A,I,I,F,I,I,F'        IDL&gt; READCOL,'position.dat',F=FMT,name,hr,min,sec,deg,dmin,dsec         The HR,MIN,DEG, and DMIN variables will be integer vectors.         Alternatively, all except the first column could be specified as        floating point.         IDL&gt; READCOL,'position.dat',F='A',name,hr,min,sec,deg,dmin,dsec         To read just the variables HR,MIN,SEC        IDL&gt; READCOL,'position.dat',F='X,I,I,F',HR,MIN,SEC   RESTRICTIONS:        This procedure is designed for generality and not for speed.        If a large ASCII file is to be read repeatedly, it may be worth        writing a specialized reader.         Columns to be read as strings must not contain the delimiter character        (i.e. commas or spaces by default).   Either change the default        delimiter with the DELIMITER keyword, or use READFMT to read such files.         Numeric values are converted to specified format.  For example,        the value 0.13 read with an 'I' format will be converted to 0.   PROCEDURES CALLED        GETTOK(), STRNUMBER()        The version of STRNUMBER() must be after August 2006.  REVISION HISTORY:        Written         W. Landsman                 November, 1988        Modified             J. Bloch                   June, 1991        (Fixed problem with over allocation of logical units.)        Added SKIPLINE and NUMLINE keywords  W. Landsman    March 92        Read a maximum of 25 cols.  Joan Isensee, Hughes STX Corp., 15-SEP-93.        Call NUMLINES() function W. Landsman          Feb. 1996        Added DELIMITER keyword  W. Landsman          Nov. 1999        Fix indexing typos (i for k) that mysteriously appeared W. L. Mar. 2000        Hexadecimal support added.  MRG, RITSS, 15 March 2000.        Default is comma or space delimiters as advertised   W.L. July 2001        Faster algorithm, use STRSPLIT if V5.3 or later  W.L.  May 2002        Accept null strings separated by delimiter ,e.g. ',,,'        Use SCOPE_VARFETCH instead of EXECUTE() for &gt;V6.1  W.L. Jun 2005        Added compile_opt idl2   W. L.  July 2005        Added the NaN keyword   W. L      August 2006        Added /PRESERVE_NULL keyword  W.L.  January 2007        Assume since V5.6 (FILE_LINES available ) W.L. Nov 2007        Added COUNT output keyword  W.L.  Aug 2008        Added NLINES output keyword W.L.   Nov 2008        Added SKIPSTART keyword  Stephane Beland January 2008        Renamed SKIPSTART to STRINGSKIP to keep meaning of SKIP W.L. Feb 2008        Assume since V6.1, SCOPE_VARFETCH available W.L. July 2009        Read up to 40 columns W.L. Aug 2009        Use pointers instead of SCOPE_VARFETCH. Fixes bug with        IDL Workbench and runs 20% faster Douglas J. Marshall/W.L. Nov 2009        Recognize  LL, UL, and ULL data types, don't use 'val' output from            STRNUMBER()   W.L.  Feb 2010        Graceful return even if no valid lines are present D. Sahnow April 2010        Ability to read tab separated data WL April 2010        Free memory used by pointers  WL  July 2010        Added /QUICK keyword  WL  Sep 2010        Accept normal FORTRAN formats (e.g. F5.1) P. Noterdaeme/W.L Jan 2011        Add COMPRESS keyword, IDL 6 notation W. Landsman/J. Bailin   Feb 2011        Allow filename to be 1 element array W.Landsman/S.Antonille Apr 2011        Feb 2010 change caused errors when reading blanks as numbers.                           W.L. July 2012  ", "COMMENTFORMATDEBUGSILENTSKIPLINENUMLINEDELIMITERNANPRESERVE_NULLCOUNTNLINESSTRINGSKIPQUICKCOMPRESSnamev1V2v3v4v5v6v7v8v9v10v11v12v13v14v15v16v17v18v19v20v21v22v23v24v25v26v27v28v29v30v31v32v33v34v35v36v37v38v39v40", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/readfits.html", "readfits.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "readfits.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/readfits.html#READFITS", "READFITS", 'routine in <a href="idlastro/readfits.html">readfits.pro</a>', "readfits.pro", "", "READFITS", " NAME:        READFITS  PURPOSE:        Read a FITS file into IDL data and header variables.  EXPLANATION:        READFITS() can read FITS files compressed with gzip or Unix (.Z)        compression.  FPACK ( http://heasarc.gsfc.nasa.gov/fitsio/fpack/ )        compressed FITS files can also be read provided that the FPACK software        is installed.        See http://idlastro.gsfc.nasa.gov/fitsio.html for other ways of        reading FITS files with IDL.   CALLING SEQUENCE:        Result = READFITS( Filename/Fileunit,[ Header, heap, /NOSCALE, EXTEN_NO=,                      NSLICE=, /SILENT , STARTROW =, NUMROW = , HBUFFER=,                      /CHECKSUM, /COMPRESS, /FPACK, /No_Unsigned, NaNVALUE = ]   INPUTS:        Filename = Scalar string containing the name of the FITS file                  (including extension) to be read.   If the filename has                   a *.gz extension, it will be treated as a gzip compressed                   file.   If it has a .Z extension, it will be treated as a                   Unix compressed file.     If Filename is an empty string then                   the user will be queried for the file name.                                    OR        Fileunit - A scalar integer specifying the unit of an already opened                   FITS file.  The unit will remain open after exiting                   READFITS().  There are two possible reasons for choosing                   to specify a unit number rather than a file name:           (1) For a FITS file with many extensions, one can move to the               desired extensions with FXPOSIT() and then use READFITS().  This               is more efficient than repeatedly starting at the beginning of               the file.           (2) For reading a FITS file across a Web http: address after opening               the unit with the SOCKET procedure   OUTPUTS:        Result = FITS data array constructed from designated record.                 If the specified file was not found, then Result = -1   OPTIONAL OUTPUT:        Header = String array containing the header from the FITS file.               If you don't need the header, then the speed may be improved by               not supplying this parameter.    Note however, that omitting               the header can imply /NOSCALE, i.e. BSCALE and BZERO values               may not be applied.        heap = For extensions, the optional heap area following the main               data array (e.g. for variable length binary extensions).   OPTIONAL INPUT KEYWORDS:        /CHECKSUM - If set, then READFITS() will call FITS_TEST_CHECKSUM to                 verify the data integrity if CHECKSUM keywords are present                 in the FITS header.   Cannot be used with the NSLICE, NUMROW                 or STARTROW keywords, since verifying the checksum requires                that all the data be read.  See FITS_TEST_CHECKSUM() for more                information.         /COMPRESS - Signal that the file is gzip compressed.  By default,                READFITS will assume that if the file name extension ends in                '.gz' then the file is gzip compressed.   The /COMPRESS keyword                is required only if the the gzip compressed file name does not                end in '.gz' or .ftz         EXTEN_NO - non-negative scalar integer specifying the FITS extension to                read.  For example, specify EXTEN = 1 or /EXTEN to read the                first FITS extension.         /FPACK - Signal that the file is compressed with the FPACK software.                http://heasarc.gsfc.nasa.gov/fitsio/fpack/ ) By default,                (READFITS will assume that if the file name extension ends in                .fz that it is fpack compressed.     The FPACK software must                be installed on the system          HBUFFER - Number of lines in the header, set this to slightly larger                 than the expected number of lines in the FITS header, to                improve performance when reading very large FITS headers.                Should be a multiple of 36 -- otherwise it will be modified                to the next higher multiple of 36.   Default is 180         /NOSCALE - If present and non-zero, then the ouput data will not be                 scaled using the optional BSCALE and BZERO keywords in the                 FITS header.   Default is to scale.         /NO_UNSIGNED - By default, if the header indicates an unsigned integer                (BITPIX = 16, BZERO=2^15, BSCALE=1) then READFITS() will output                an IDL unsigned integer data type (UINT).   But if /NO_UNSIGNED                is set, then the data is converted to type LONG.         NSLICE - An integer scalar specifying which N-1 dimensional slice of a                 N-dimensional array to read.   For example, if the primary                 image of a file 'wfpc.fits' contains a 800 x 800 x 4 array,                 then                   IDL&gt; im = readfits('wfpc.fits',h, nslice=2)                            is equivalent to                  IDL&gt; im = readfits('wfpc.fits',h)                  IDL&gt; im = im[*,*,2]                  but the use of the NSLICE keyword is much more efficient.                  Note that any degenerate dimensions are ignored, so that the                  above code would also work with a 800 x 800 x 4 x 1 array.         NUMROW -  Scalar non-negative integer specifying the number of rows                  of the image or table extension to read.   Useful when one                  does not want to read the entire image or table.         POINT_LUN  -  Position (in bytes) in the FITS file at which to start                  reading.   Useful if READFITS is called by another procedure                  which needs to directly read a FITS extension.    Should                  always be a multiple of 2880, and not be used with EXTEN_NO                  keyword.         /SILENT - Normally, READFITS will display the size the array at the                  terminal.  The SILENT keyword will suppress this          STARTROW - Non-negative integer scalar specifying the row                of the image or extension table at which to begin reading.                Useful when one does not want to read the entire table.         NaNVALUE - This keyword is included only for backwards compatibility                   with routines that require IEEE  not a number  values to be                   converted to a regular value.         /UNIXPIPE - When a FileUnit is supplied to READFITS(), then /UNIXPIPE                  indicates that the unit is to a Unix pipe, and that                  no automatic byte swapping is performed.   EXAMPLE:        Read a FITS file test.fits into an IDL image array, IM and FITS        header array, H.   Do not scale the data with BSCALE and BZERO.                IDL&gt; im = READFITS( 'test.fits', h, /NOSCALE)         If the file contains a FITS extension, it could be read with                IDL&gt; tab = READFITS( 'test.fits', htab, /EXTEN )         The function TBGET() can be used for further processing of a binary        table, and FTGET() for an ASCII table.        To read only rows 100-149 of the FITS extension,                IDL&gt; tab = READFITS( 'test.fits', htab, /EXTEN,                                    STARTR=100, NUMR = 50 )         To read in a file that has been compressed:                IDL&gt; tab = READFITS('test.fits.gz',h)   ERROR HANDLING:        If an error is encountered reading the FITS file, then                (1) the system variable !ERROR_STATE.CODE is set negative                    (via the MESSAGE facility)                (2) the error message is displayed (unless /SILENT is set),                    and the message is also stored in !!ERROR_STATE.MSG                (3) READFITS returns with a value of -1  RESTRICTIONS:        (1) Cannot handle random group FITS   NOTES:        (1) If data is stored as integer (BITPIX = 16 or 32), and BSCALE        and/or BZERO keywords are present, then the output array is scaled to        floating point (unless /NOSCALE is present) using the values of BSCALE        and BZERO.   In the header, the values of BSCALE and BZERO are then        reset to 1. and 0., while the original values are written into the        new keywords O_BSCALE and O_BZERO.     If the BLANK keyword was        present (giving the value of undefined elements *prior* to the        application of BZERO and BSCALE) then the *keyword* value will be        updated with the values of BZERO and BSCALE.         (2) The use of the NSLICE keyword is incompatible with the NUMROW        or STARTROW keywords.         (3) On some Unix shells, one may get a  Broken pipe  message if reading         a Unix compressed (.Z) file, and not reading to the end of the file        (i.e. the decompression has not gone to completion).     This is an         informative message only, and should not affect the output of READFITS.  PROCEDURES USED:        Functions:   SXPAR()        Procedures:  MRD_SKIP, SXADDPAR, SXDELPAR   MODIFICATION HISTORY:        Original Version written in 1988, W.B. Landsman   Raytheon STX        Revision History prior to October 1998 removed        Major rewrite to eliminate recursive calls when reading extensions                   W.B. Landsman  Raytheon STX                    October 1998        Add /binary modifier needed for Windows  W. Landsman    April 1999        Read unsigned datatypes, added /no_unsigned   W. Landsman December 1999        Output BZERO = 0 for unsigned data types   W. Landsman   January 2000        Update to V5.3 (see notes)  W. Landsman                  February 2000        Fixed logic error in use of NSLICE keyword  W. Landsman  March 2000        Fixed byte swapping for Unix compress files on little endian machines                                     W. Landsman    April 2000        Added COMPRESS keyword, catch IO errors W. Landsman September 2000        Option to read a unit number rather than file name W.L    October 2001        Fix undefined variable problem if unit number supplied W.L. August 2002        Don't read entire header unless needed   W. Landsman  Jan. 2003        Added HBUFFER keyword    W. Landsman   Feb. 2003        Added CHECKSUM keyword   W. Landsman   May 2003        Restored NaNVALUE keyword for backwards compatibility,                William Thompson, 16-Aug-2004, GSFC        Recognize .ftz extension as compressed  W. Landsman   September 2004        Fix unsigned integer problem introduced Sep 2004 W. Landsman Feb 2005        Don't modify header for unsigned integers, preserve double precision            BSCALE value  W. Landsman March 2006        Use gzip instead of compress for Unix compress files W.Landsman Sep 2006        Call MRD_SKIP to skip bytes on different file types W. Landsman Oct 2006        Make ndata 64bit for very large files E. Hivon/W. Landsman May 2007        Fixed bug introduced March 2006 in applying Bzero C. Magri/W.L. Aug 2007        Check possible 32bit overflow when using NSKIP W. Landsman Mar 2008        Always reset BSCALE, BZERO even for unsigned integers W. Landsman May 2008        Make ndata 64bit for very large extensions J. Schou/W. Landsman Jan 2009        Use PRODUCT() to compute # of data points  W. Landsman  May 2009        Read FPACK compressed file via UNIX pipe. W. Landsman May 2009        Fix error using NUMROW,STARTROW with non-byte data, allow these            keywords to be used with primary array  W. Landsman July 2009        Ignore degenerate trailing dimensions with NSLICE keyword W.L. Oct 2009        Add DIALOG_PICKFILE() if filename is an empty string  W.L. Apr 2010        Set BLANK values *before* applying BSCALE,BZERO, use short-circuit            operators  W.L. May 2010       Skip extra SPAWN with FPACK decompress J. Eastman, W.L. July 2010       Fix possible problem when startrow=0 supplied J. Eastman/W.L. Aug 2010       First header is not necessarily primary if unit supplied WL Jan 2011  ", "CHECKSUMCOMPRESSHBUFFEREXTEN_NONOSCALENSLICENO_UNSIGNEDNUMROWPOINTLUNSILENTSTARTROWNaNvalueFPACKUNIXpipefilenameheaderheap", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/readfmt.html", "readfmt.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "readfmt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/readfmt.html#readfmt", "readfmt", 'routine in <a href="idlastro/readfmt.html">readfmt.pro</a>', "readfmt.pro", "", "readfmt", " NAME:      READFMT  PURPOSE:        Quickly read a fixed format ASCII data file into IDL variables.  EXPLANATION:        Lines of data not meeting the specified format (e.g. comments) are        ignored.         To read a free format ASCII data file use the procedures        READCOL or RDFLOAT.     To print (formatted or free) columns of data        use the procedure FORPRINT.   CALLING SEQUENCE:        READFMT, name, fmt, v1,[ v2, v3, v4, ..., v25 ,                           /SILENT, /DEBUG, SKIPLINE= , NUMLINE =]   INPUTS:        NAME - Name of ASCII data file.  An extension of .DAT is assumed,                if not supplied.        FMT - scalar string containing a valid FORTRAN read format.                Must include a field length specification.   Cannot include                internal parenthesis.  A format field must be included for                each output vector.   Multiple format fields are allowed, but                the repetition factor must be less than 100, (.i.e. 19X is                allowed but 117X is illegal)         Examples of valid FMT values are                FMT = 'A7,3X,2I4'  or FMT = '1H ,5I7,2A7'        Examples of INVALID FMT values are                FMT = 'A7,B3'           ;'B' is not a valid FORTRAN format                FMT = 'A7,2(I3,F5.1)'   ;Internal parenthesis not allowed                FMT = 'A7,F,I'          ;Field length not included   OUTPUTS:        V1,V2,V3,V4... - IDL vectors to contain columns of data.                Up to 25 output vectors may be read.  The type of the output                vectors are specified by FMT.   OPTIONAL KEYWORD INPUTS:        /SILENT - If this keyword is set and non-zero, then certain terminal                output is suppressed while reading the file        /DEBUG - Set this keyword to display additional information while                reading the file.        SKIPLINE - Scalar specifying number of lines to skip at the top of                file before reading. Default is to start at first line        NUMLINE - Scalar specifying number of lines in the file to read.                Default is to read the entire file   EXAMPLES:        Each row in a fixed-format file POSITION.DAT contains a 5 character        star name  and 6 columns of data giving an RA and Dec in sexagesimal        format.   A possible format for such data might be         IDL&gt; FMT = 'A5,2I3,F5.1,2x,3I3'        and the file could be quickly read with         IDL&gt; READFMT,'POSITION', fmt, name, hr, min, sec, deg, dmin, dsec         NAME will be a string vector,SEC will be a floating point vector, and        the other vectors will be of integer type.   RESTRICTIONS:        This procedure is designed for generality and not for speed.        If a large ASCII file is to be read repeatedly, it may be worth        writing a specialized reader.   NOTES:        When reading a field with an integer format I&lt;n&gt;, the output vector is                byte  - if n = 1                integer*2 - if 1 &lt; n &lt; 5                integer*4  - in all other cases        Octal ('O') and hexadecimal ('Z') formats are read into longwords   PROCEDURE CALLS:        GETTOK(), REMCHAR, ZPARCHECK   REVISION HISTORY:        Written         W. Landsman                 November, 1988        Added SKIPLINE and NUMLINE keywords         March 92        Allow up to 25 columns to be read           June 92        Call NUMLINES() function                    Feb 1996        Recognize 'O' and 'Z' formats  W. Landsman   September 1997        Recognize 'G' format, use SKIP_LUN   W. Landsman  May 2010  ", "SILENTDEBUGSKIPLINENUMLINEnamefmtv1v2v3v4v5v6v7v8v9v10v11v12v13v14v15v16v17v18v19v20v21v22v23v24v25", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jhuapl/recpol.html", "recpol.pro", '.pro file in <a href="idlastro/jhuapl/dir-overview.html">idlastro/jhuapl/ directory</a>', "recpol.pro", "", "", " NAME:        RECPOL  PURPOSE:        Convert 2-d rectangular coordinates to polar coordinates.  CATEGORY:  CALLING SEQUENCE:        recpol, x, y, r, a  INPUTS:        x, y = vector in rectangular form.           in  KEYWORD PARAMETERS:        Keywords:          /DEGREES means angle is in degrees, else radians.  OUTPUTS:        r, a = vector in polar form: radius, angle.  out  COMMON BLOCKS:  NOTES:  MODIFICATION HISTORY:        R. Sterner. 18 Aug, 1986.        Johns Hopkins University Applied Physics Laboratory.        RES 13 Feb, 1991 --- added /degrees.        R. Sterner, 30 Dec, 1991 --- simplified.        R. Sterner, 25 May, 1993 --- Fixed atan (0,0) problem.   Copyright (C) 1986, Johns Hopkins University/Applied Physics Laboratory  This software may be used, copied, or redistributed as long as it is not  sold and this copyright notice is reproduced on each copy made.  This  routine is provided as is without any express or implied warranties  whatsoever.  Other limitations apply as described in the file disclaimer.txt. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/recpol.html#recpol", "recpol", 'routine in <a href="idlastro/jhuapl/recpol.html">recpol.pro</a>', "recpol.pro", "", "recpol", "", "helpdegreesxyra", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/rem_dup.html", "rem_dup.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "rem_dup.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/rem_dup.html#rem_dup", "rem_dup", 'routine in <a href="idlastro/rem_dup.html">rem_dup.pro</a>', "rem_dup.pro", "", "rem_dup", " NAME: 	REM_DUP  PURPOSE: 	Function to remove duplicate values from a vector.   CALLING SEQUENCE: 	result = rem_dup( a, [ flag ] )   INPUTS: 	a - vector of values from which duplicates are to be found 	flag - (optional) if supplied then when duplicates occur, 		the one with the largest value of flag is selected. 		If not supplied the the first occurence of the value 		in a is selected.     Should be a vector with the same                number of elements as a.   OUTPUT: 	A vector of subscripts in a is returned.  Each subscript 	points to a selected value such that a(rem_dup(a,flag)) 	has no duplicates.   SIDE EFFECTS: 	The returned subscripts will sort the values in a in ascending 	order with duplicates removed.   EXAMPLES:  	Remove duplicate values in vector a. 	 	a = a[ rem_dup(a)]  	Remove duplicates in vector WAVE.  When duplicate values 	are found, select the one with the largest intensity, INTE.  		sub = rem_dup( wave, inte) 		wave = wave[sub] 		inte = inte[sub]   NOTES: 	The UNIQ function in the User's Library uses a faster algorithm, 	but has no equivalent of the  flag  parameter.    Also, note that        REM_DUP() gives the index of the *first* equal value found, while        UNIQ() gives the index of the *last* equal value found.   MODIFICATION HISTORY: 	D. Lindler  Mar. 87 	11/16/90 JKF ACC - converted to IDL Version 2. 	August 1997  -- Changed loop index to type LONG 	October 1997 -- Also changed NGOOD index to LONG        April 2007 - Use faster algorithm when Flag vector not set, W. Landsman        Feb 2011 - Remove spurious line W.L.        Jan 2012 - Call BSORT() to ensure original order maintained for equal             values  ", "aflag", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/remchar.html", "remchar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "remchar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/remchar.html#remchar", "remchar", 'routine in <a href="idlastro/remchar.html">remchar.pro</a>', "remchar.pro", "", "remchar", " NAME: 	REMCHAR  PURPOSE: 	Remove all appearances of character (char) from string (st)   CALLING SEQUENCE: 	REMCHAR, ST, CHAR   INPUT-OUTPUT: 	ST  - String from which character will be removed, scalar or vector  INPUT: 	CHAR- Single character to be removed from string or all elements of a 		string array   EXAMPLE: 	If a = 'a,b,c,d,e,f,g' then  	IDL&gt; remchar,a, ','        will give a = 'abcdefg'   REVISIONS HISTORY 	Written D. Lindler October 1986 	Test if empty string needs to be returned   W. Landsman  Feb 1991 	Work on string arrays    W. Landsman   August 1997 	Avoid 32 bit integer overflow K. Tolbert/W. Landsman Feb 2007  ", "stchar", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/remove.html", "remove.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "remove.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/remove.html#remove", "remove", 'routine in <a href="idlastro/remove.html">remove.pro</a>', "remove.pro", "", "remove", " NAME:        REMOVE  PURPOSE:        Contract a vector or up to 25 vectors by removing specified elements  CALLING SEQUENCE:        REMOVE, index, v1,[ v2, v3, v4, v5, v6, ... v25]  INPUTS:        INDEX - scalar or vector giving the index number of elements to                be removed from vectors.  Duplicate entries in index are                ignored.    An error will occur if one attempts to remove                all the elements of a vector.     REMOVE will return quietly                (no error message) if index is !NULL or undefined.   INPUT-OUTPUT:        v1 - Vector or array.  Elements specifed by INDEX will be                removed from v1.  Upon return v1 will contain                N fewer elements, where N is the number of distinct values in                INDEX.   OPTIONAL INPUT-OUTPUTS:        v2,v3,...v25 - additional vectors containing                the same number of elements as v1.  These will be                contracted in the same manner as v1.   EXAMPLES:        (1) If INDEX = [2,4,6,4] and V = [1,3,4,3,2,5,7,3] then after the call                 IDL&gt; remove,index,v         V will contain the values [1,3,3,5,3]         (2) Suppose one has a wavelength vector W, and three associated flux        vectors F1, F2, and F3.    Remove all points where a quality vector,        EPS is negative                 IDL&gt; bad = where( EPS LT 0, Nbad)                IDL&gt; if Nbad GT 0 then remove, bad, w, f1, f2, f3   METHOD:        If more than one element is to be removed, then HISTOGRAM is used        to generate a 'keep' subscripting vector.    To minimize the length of        the subscripting vector, it is only computed between the minimum and        maximum values of the index.   Therefore, the slowest case of REMOVE        is when both the first and last element are removed.   REVISION HISTORY:        Written W. Landsman        ST Systems Co.       April 28, 1988        Cleaned up code          W. Landsman            September, 1992        Major rewrite for improved speed   W. Landsman    April 2000        Accept up to 25 variables, use SCOPE_VARFETCH internally               W. Landsman   Feb 2010        Fix occasional integer overflow problem  V. Geers  Feb 2011        Quietly return if index is !null or undefined W.L. Aug 2011   ", "indexv1v2v3v4v5v6v7v8v9v10v11v12v13v14v15v16v17v18v19v20v21v22v23v24v25", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jhuapl/repchr.html", "repchr.pro", '.pro file in <a href="idlastro/jhuapl/dir-overview.html">idlastro/jhuapl/ directory</a>', "repchr.pro", "", "", " NAME:        REPCHR  PURPOSE:        Replace all occurrences of one character with another in a text string.  CATEGORY:  CALLING SEQUENCE:        new = repchr(old, c1, [c2])  INPUTS:        old = original text string.          in        c1 = character to replace.           in        c2 = character to replace it with.   in             default is space.  KEYWORD PARAMETERS:  OUTPUTS:        new = edited string.                 out  COMMON BLOCKS:  NOTES:  MODIFICATION HISTORY:        R. Sterner.  28 Oct, 1986.        Johns Hopkins Applied Physics Lab.        RES 1 Sep, 1989 --- converted to SUN.        R. Sterner, 27 Jan, 1993 --- dropped reference to array.   Copyright (C) 1986, Johns Hopkins University/Applied Physics Laboratory  This software may be used, copied, or redistributed as long as it is not  sold and this copyright notice is reproduced on each copy made.  This  routine is provided as is without any express or implied warranties  whatsoever.  Other limitations apply as described in the file disclaimer.txt. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/repchr.html#REPCHR", "REPCHR", 'routine in <a href="idlastro/jhuapl/repchr.html">repchr.pro</a>', "repchr.pro", "", "REPCHR", "", "helpOLDC1C2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/repmat.html", "repmat.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "repmat.pro", "", "", " NAME:        REPMAT   PURPOSE:         This program replicates a matrix or array in the style of        the MATLAB RebMat command. The matrix or array is  tiled         in some integer number of columns and rows.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities   CALLING SEQUENCE:         tiledMatrix = RepMat(matrix, ncol, nrow)   AUGUMENTS:         matix:         The matrix or array to be tiled.         ncol:          The number of columns in the tile.         nrow:          The number of rows in the tile.   RETURN_VALUE:        tiledMatrix:    If (xdim,ydim) is the size of the original 2D matrix, then the                       output matrix is sized (ncol*xdim, nrow*ydim).   KEYWORDS:       None.   EXAMPLE:          IDL&gt; matrix = Reform(Indgen(6) + 1, 3, 2)         IDL&gt; Print, matrix, FORMAT='(3I3)'              1  2  3              4  5  6         IDL&gt; Print, RepMat(matrix, 3, 2), FORMAT='(9I3)'              1  2  3  1  2  3  1  2  3              4  5  6  4  5  6  4  5  6              1  2  3  1  2  3  1  2  3              4  5  6  4  5  6  4  5  6   MODIFICATION HISTORY:         Written by David W. Fanning, 8 May 2009.        Algorithm significantly improved by Ronn Kling, 4 August 2009.        Added line to handle an input matrix with a trailing 1 dimension correctly. DJ 8 March 2011.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/repmat.html#RepMat", "RepMat", 'routine in <a href="coyote/repmat.html">repmat.pro</a>', "repmat.pro", "", "RepMat", "", "matrixncolnrow", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/repstr.html", "repstr.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "repstr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/repstr.html#repstr", "repstr", 'routine in <a href="idlastro/repstr.html">repstr.pro</a>', "repstr.pro", "", "repstr", " NAME: 	REPSTR  PURPOSE: 	Replace all occurences of one substring by another.  EXPLANATION: 	Meant to emulate the string substitution capabilities of text editors         For a more sophisticated routine that allows regular expressions look        at MG_STRREPLACE()        http://docs.idldev.com/idllib/strings/mg_streplace.html  CALLING SEQUENCE: 	result = repstr( obj, in, out )   INPUT PARAMETERS: 	obj    = object string for editing, scalar or array 	in     = substring of 'obj' to be replaced, scalar   OPTIONAL INPUT PARMETER: 	out    = what 'in' is replaced with, scalar.   If not supplied 		then out = '', i.e. 'in' is not replaced by anything.   OUTPUT PARAMETERS: 	Result returned as function value.  Input object string 	not changed unless assignment done in calling program.   PROCEDURE: 	Searches for 'in', splits 'obj' into 3 pieces, reassembles 	with 'out' in place of 'in'.  Repeats until all cases done.   EXAMPLE: 	If a = 'I am what I am' then print,repstr(a,'am','was') 	will give 'I was what I was'.   MODIFICATION HISTORY: 	Written by Robert S. Hill, ST Systems Corp., 12 April 1989. 	Accept vector object strings, W. Landsman   HSTX,   April, 1996        Convert loop to LONG, vectorize STRLEN call W. Landsman June 2002        Correct bug in optimization, case where STRLEN(OBJ) EQ          STRLEN(IN), C. Markwardt, Jan 2003        Fixed problem when multiple replacements extend the string length                  D. Finkbeiner, W. Landsman  April 2003        Allow third parameter to be optional again W. Landsman  August 2003        Remove limitation of 9999 characters, C. Markwardt Dec 2003        Test for empty  in  string (causing infinite loop) W. Landsman Jan 2010        Streamline code W Landsman Dec 2011  ", "objinout", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/resistant_mean.html", "resistant_mean.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "resistant_mean.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/resistant_mean.html#RESISTANT_Mean", "RESISTANT_Mean", 'routine in <a href="idlastro/resistant_mean.html">resistant_mean.pro</a>', "resistant_mean.pro", "", "RESISTANT_Mean", " NAME:     RESISTANT_Mean   PURPOSE:     Outlier-resistant determination of the mean and standard deviation.   EXPLANATION:     RESISTANT_Mean trims away outliers using the median and the median     absolute deviation.    An approximation formula is used to correct for     the truncation caused by trimming away outliers   CALLING SEQUENCE:     RESISTANT_Mean, ARRAY, Sigma_CUT, Mean, Sigma_Mean, Num_RejECTED                          [/DOUBLE, DIMENSION= , GOODVEC = ]  INPUT ARGUMENT:        ARRAY    = Vector or array to average        Sigma_CUT = Data more than this number of standard deviations from the                median is ignored. Suggested values: 2.0 and up.   OUTPUT ARGUMENT:        Mean  = the mean of the input array, numeric scalar,    If the             DIMENSION keyword is set, then MEAN will be an array with one             less dimension than the input.  OPTIONAL OUTPUTS: 	Sigma_Mean = the approximate standard deviation of the mean, numeric             scalar.  This is the Sigma of the distribution divided by sqrt(N-1)             where N is the number of unrejected points. The larger             SIGMA_CUT, the more accurate. It will tend to underestimate the             true uncertainty of the mean, and this may become significant for             cuts of 2.0 or less.        Num_RejECTED = the number of points trimmed, integer scalar  OPTIONAL INPUT KEYWORDS:       /DOUBLE - If set, then all calculations are performed internally             in double precision.       DIMENSION - for a multi-dimensional array, the dimension over which to             take the mean, starting at 1. If not set, then the scalar mean             over all elements is used. If this argument is present, the result             is an array with one less dimension than Array. For example, if             the dimensions of Array are N1, N2, N3, and Dimension is 2, then             the dimensions of the result are (N1, N3)       SUMDIM - Obsolete synonym for DIMENSION  OPTIONAL OUTPUT KEYWORD:        Goodvec -  Indices of non-trimmed elements of the input vector        Wused - synonym for Goodvec (for solarsoft compatibility)  EXAMPLE:        IDL&gt; a = randomn(seed, 10000)    ;Normal distribution with 10000 pts        IDL&gt; RESISTANT_Mean,a, 3, mean, meansig, num    ;3 Sigma clipping        IDL&gt; print, mean, meansig,num         The mean should be near 0, and meansig should be near 0.01 ( =         1/sqrt(10000) ).  PROCEDURES USED:        MEAN() - compute simple mean, in Exelis library  REVISION HISTORY:        Written, H. Freudenreich, STX, 1989; Second iteration added 5/91.        Use MEDIAN(/EVEN)    W. Landsman   April 2002        Correct conditional test, higher order truncation correction formula                 R. Arendt/W. Landsman   June 2002        New truncation formula for sigma H. Freudenriech  July 2002        Divide Sigma_mean by Num_good rather than Npts W. Landsman/A. Conley                           January 2006        Use of double precision S. Bianchi February 2008        More double precision B. Carcich December 2009        Added DIMENSION keyword (from M. Desnoyer) B. Carcich December 2009        Use IDL's MEAN() function instead of AVG() W. Landsman Jan 2012        Use of Dimension keyword yielded transpose of correct value                      W. Landsman  July 2012  ", "goodvecdimensiondoublesumdimwusedYCUTMeanSigmaNum_Rej", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/resolve_object.html", "resolve_object.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "resolve_object.pro", "", "", " NAME:   RESOLVE_OBJECT   PURPOSE:     The purpose of this function is to resolve object methods in files that have the object    methods in the same file as the object class definition module (i.e., object__define.pro).    It is particularly useful in restoring object methods for objects that have been saved and    are being restored. Restored objects often do not know about their methods unless an object    of the same object class has been previously compiled in that IDL session.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Utilities   CALLING SEQUENCE:     Resolve_Object, obj_or_class   ARGUMENTS:    obj_or_class:   Either an IDL object or the class name of an IDL object. Required parameter.   KEYWORDRS:    ROUTINE_INFO:   Not strictly used by the user of the program, but this provides a mechanism by which                   currently compiled routine names can be checked, so that object code is not being                   recompiled unnecessarily. It is actually used internally in the code in a sort of                   recursive approach to handling object superclasses.   INFORMATION:    A discussion of this routine, and of the problem the routine was written to address can   be found here:       http://www.idlcoyote.com/tips/saved_objects.html   MODIFICATION HISTORY:    Written by: David W. Fanning, August 20, 2009, and based on code written by JD Smith and      discussed in the article above.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/resolve_object.html#Resolve_Object", "Resolve_Object", 'routine in <a href="coyote/resolve_object.html">resolve_object.pro</a>', "resolve_object.pro", "", "Resolve_Object", "", "ROUTINE_INFOobj_or_class", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/reverse_axes.html", "reverse_axes.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "reverse_axes.pro", "", "", " NAME:        REVERSE_AXES   PURPOSE:         The purpose of this program is to extend the SIMPLE_SURFACE        program to demonstrate how to create reversible axes in        object graphics.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Widgets, Object Graphics.   CALLING SEQUENCE:         REVERSE_AXES, data, x, y   REQUIRED INPUTS:         None. Fake data will be used if no data is supplied in call.   OPTIONAL INPUTS         data: A 2D array of surface data.         x: A vector of X data values.         y: A vector of Y data values.   OPTIONAL KEYWORD PARAMETERS:         EXACT:  Set this keyword to get exact axis scaling.         _EXTRA: This keyword collects otherwise undefined keywords that are         passed to the surface initialization routine.         GROUP_LEADER: The group leader for this program. When the group leader        is destroyed, this program will be destroyed.         LANDSCAPE: Set this keyword if you are printing in landscape mode. The        default is Portrait mode. The Landscape keyword on the PRINTER object        is set, but not all printers will honor this keyword setting. If yours        does not, set Landscape mode in the Printer Setup dialog.         VECTOR: Set this keyword if you want vector printing (as opposed to        the default bitmap printing).         XTITLE: A string used as the X title of the plot.         YTITLE: A string used as the Y title of the plot.         ZTITLE: A string used as the Z title of the plot.   COMMON BLOCKS:         None.   EXAMPLE:         To use this program with your 2D data, type:          IDL&gt; Reverse_Axes, data   MODIFICATION HISTORY:    Written by: David Fanning, October 2001.   Changed FSC_Normalize to cgNormalize to reflect new name. 6 Feb 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/reverse_axes.html#Reverse_Axes_Cleanup", "Reverse_Axes_Cleanup", 'routine in <a href="coyote/reverse_axes.html">reverse_axes.pro</a>', "reverse_axes.pro", "", "Reverse_Axes_Cleanup", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/reverse_axes.html#Reverse_Axes_Draw_Events", "Reverse_Axes_Draw_Events", 'routine in <a href="coyote/reverse_axes.html">reverse_axes.pro</a>', "reverse_axes.pro", "", "Reverse_Axes_Draw_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/reverse_axes.html#Reverse_Axes_Style", "Reverse_Axes_Style", 'routine in <a href="coyote/reverse_axes.html">reverse_axes.pro</a>', "reverse_axes.pro", "", "Reverse_Axes_Style", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/reverse_axes.html#Reverse_Axes_AxisRotation", "Reverse_Axes_AxisRotation", 'routine in <a href="coyote/reverse_axes.html">reverse_axes.pro</a>', "reverse_axes.pro", "", "Reverse_Axes_AxisRotation", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/reverse_axes.html#Reverse_Axes_Output", "Reverse_Axes_Output", 'routine in <a href="coyote/reverse_axes.html">reverse_axes.pro</a>', "reverse_axes.pro", "", "Reverse_Axes_Output", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/reverse_axes.html#Reverse_Axes_Exit", "Reverse_Axes_Exit", 'routine in <a href="coyote/reverse_axes.html">reverse_axes.pro</a>', "reverse_axes.pro", "", "Reverse_Axes_Exit", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/reverse_axes.html#Reverse_Axes_Printing", "Reverse_Axes_Printing", 'routine in <a href="coyote/reverse_axes.html">reverse_axes.pro</a>', "reverse_axes.pro", "", "Reverse_Axes_Printing", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/reverse_axes.html#Reverse_Axes_Resize", "Reverse_Axes_Resize", 'routine in <a href="coyote/reverse_axes.html">reverse_axes.pro</a>', "reverse_axes.pro", "", "Reverse_Axes_Resize", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/reverse_axes.html#Reverse_Axes", "Reverse_Axes", 'routine in <a href="coyote/reverse_axes.html">reverse_axes.pro</a>', "reverse_axes.pro", "", "Reverse_Axes", "", "_ExtraXTitleYTitleZTitleGroup_LeaderHidden_LinesVectorExactLandscapedataxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/rinter.html", "rinter.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "rinter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/rinter.html#RINTER", "RINTER", 'routine in <a href="idlastro/rinter.html">rinter.pro</a>', "rinter.pro", "", "RINTER", " NAME:       RINTER  PURPOSE:       Cubic interpolation of an image at a set of reference points.  EXPLANATION:       This interpolation program is equivalent to using the intrinsic       INTERPOLATE() function with CUBIC = -0.5.   However,       RINTER() has two advantages: (1) one can optionally obtain the       X and Y derivatives at the reference points, and (2) if repeated       interpolation is to be applied to an array, then some values can       be pre-computed and stored in Common.   RINTER() was originally       for use with the DAOPHOT procedures, but can also be used for       general cubic interpolation.   CALLING SEQUENCE:       Z = RINTER( P, X, Y, [ DFDX, DFDY ] )                or       Z = RINTER(P, /INIT)   INPUTS:       P  - Two dimensional data array,       X  - Either an N element vector or an N x M element array,                containing X subscripts where cubic interpolation is desired.       Y -  Either an N element vector or an N x M element array,                containing Y subscripts where cubic interpolation is desired.   OUTPUT:       Z -  Result = interpolated vector or array.  If X and Y are vectors,               then so is Z, but if X and Y are arrays then Z will be also.               If P is DOUBLE precision, then so is Z, otherwise Z is REAL.   OPTIONAL OUTPUT:       DFDX - Vector or Array, (same size and type as Z), containing the                derivatives with respect to X       DFDY - Array containing derivatives with respect to Y   OPTIONAL KEYWORD INPUT:      /INIT - Perform computations associated only with the input array (i.e.              not with X and Y) and store in common.    This can save time if              repeated calls to RINTER are made using the same array.   EXAMPLE:       suppose P is a 256 x 256 element array and X = FINDGEN(50)/2. + 100.       and Y = X.  Then Z will be a 50 element array, containing the       cubic interpolated points.   SIDE EFFECTS:       can be time consuming.   RESTRICTION:       Interpolation is not possible at positions outside the range of        the array (including all negative subscripts), or within 2 pixel        units of the edge.  No error message is given but values of the        output array are meaningless at these positions.   PROCEDURE:        invokes CUBIC interpolation algorithm to evaluate each element        in Z at virtual coordinates contained in X and Y with the data        in P.   COMMON BLOCKS:        If repeated interpolation of the same array is to occur, then        one can save time by initializing the common block RINTER.   REVISION HISTORY:        March 1988 written W. Landsman STX Co.        Checked for IDL Version 2, J. Isensee, September, 1990        Corrected call to HISTOGRAM, W. Landsman November 1990        Converted to IDL V5.0   W. Landsman   September 1997        Fix output derivatives for 2-d inputs, added /INIT W. Landsman May 2000   ", "INITIALIZEPXYDFDXDFDY", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/rob_checkfit.html", "rob_checkfit.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "rob_checkfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/rob_checkfit.html#ROB_CHECKFIT", "ROB_CHECKFIT", 'routine in <a href="idlastro/rob_checkfit.html">rob_checkfit.pro</a>', "rob_checkfit.pro", "", "ROB_CHECKFIT", " NAME: 	ROB_CHECKFIT  PURPOSE: 	Used by ROBUST_... routines to determine the quality of a fit and to 	return biweights.  CALLING SEQUENCE: 	status = ROB_CHECKFIT( Y, YFIT, EPS, DEL, SIG, FRACDEV, NGOOD, W, B 				BISQUARE_LIMIT = )  INPUT: 	Y     = the data 	YFIT  = the fit to the data 	EPS   = the  too small  limit 	DEL   = the  close enough  for the fractional median abs. deviations  RETURNS: 	Integer status. if =1, the fit is considered to have converged   OUTPUTS: 	SIG   = robust standard deviation analog 	FRACDEV = the fractional median absolute deviation of the residuals 	NGOOD   = the number of input point given non-zero weight in the 		calculation 	W     = the bisquare weights of Y 	B     = residuals scaled by sigma   OPTIONAL INPUT KEYWORD: 	BISQUARE_LIMIT = allows changing the bisquare weight limit from 			default 6.0  PROCEDURES USED:        ROBUST_SIGMA()  REVISION HISTORY: 	Written, H.T. Freudenreich, HSTX, 1/94  ", "BISQUARE_LIMITYYFITEPSDELSIGFRACDEVNGOODWB", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/robust_linefit.html", "robust_linefit.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "robust_linefit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/robust_linefit.html#ROBUST_LINEFIT", "ROBUST_LINEFIT", 'routine in <a href="idlastro/robust_linefit.html">robust_linefit.pro</a>', "robust_linefit.pro", "", "ROBUST_LINEFIT", " NAME:        ROBUST_LINEFIT   PURPOSE:        An outlier-resistant two-variable linear regression.  EXPLANATION:        Either Y on X or, for the case in which there is no true independent        variable, the bisecting line of Y vs X and X vs Y is calculated. No        knowledge of the errors of the input points is assumed.   CALLING SEQUENCE:        COEFF = ROBUST_LINEFIT( X, Y, YFIT, SIG, COEF_SIG, [ /BISECT,                        BiSquare_Limit = , Close_factor = , NumIT = ] )   INPUTS:        X = Independent variable vector, floating-point or double-precision        Y = Dependent variable vector   OUTPUTS:        Function result = coefficient vector.        If = 0.0 (scalar), no fit was possible.        If vector has more than 2 elements (the last=0) then the fit is dubious.   OPTIONAL OUTPUT PARAMETERS:        YFIT = Vector of calculated y's        SIG  = The  standard deviation  of the fit's residuals. If BISECTOR                is set, this will be smaller by ~ sqrt(2).        COEF_SIG  = The estimated standard deviations of the coefficients. If                BISECTOR is set, however, this becomes the vector of fit                residuals measured orthogonal to the line.   OPTIONAL INPUT KEYWORDS:        NUMIT = the number of iterations allowed. Default = 25        BISECT  if set, the bisector of the  Y vs X  and  X vs Y  fits is                determined.  The distance PERPENDICULAR to this line is used                in calculating weights. This is better when the uncertainties                in X and Y are comparable, so there is no true independent                variable.  Bisquare_Limit  Limit used for calculation of                bisquare weights. In units of outlier-resistant standard                deviations. Default: 6.                Smaller limit ==&gt;more resistant, less efficient  Close_Factor  - Factor used to determine when the calculation has converged.                Convergence if the computed standard deviation changes by less                than Close_Factor * ( uncertainty of the std dev of a normal                distribution ). Default: 0.03.  SUBROUTINE CALLS:        ROB_CHECKFIT        ROBUST_SIGMA, to calculate a robust analog to the std. deviation   PROCEDURE:        For the initial estimate, the data is sorted by X and broken into 2        groups. A line is fitted to the x and y medians of each group.        Bisquare ( Tukey's Biweight ) weights are then calculated, using the        a limit of 6 outlier-resistant standard deviations.        This is done iteratively until the standard deviation changes by less        than CLOSE_ENOUGH = CLOSE_FACTOR * {uncertainty of the standard                deviation of a normal distribution}   REVISION HISTORY:        Written, H. Freudenreich, STX, 4/91.        4/13/93 to return more realistic SS's HF        2/94 --more error-checking, changed convergence criterion HF        5/94 --added BISECT option. HF.        8/94 --added Close_Factor and Bisquare_Limit options  Jack Saba.        4/02 --V5.0 version, use MEDIAN(/EVEN)  W. Landsman  ", "NUMITBISECTBisquare_LimitClose_FactorXINYINYFITSIGSS", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/robust_poly_fit.html", "robust_poly_fit.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "robust_poly_fit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/robust_poly_fit.html#ROBUST_POLY_FIT", "ROBUST_POLY_FIT", 'routine in <a href="idlastro/robust_poly_fit.html">robust_poly_fit.pro</a>', "robust_poly_fit.pro", "", "ROBUST_POLY_FIT", " NAME: 	ROBUST_POLY_FIT   PURPOSE: 	An outlier-resistant polynomial fit.   CALLING SEQUENCE: 	COEFF = ROBUST_POLY_FIT(X,Y,NDEGREE  ,[ YFIT,SIG, /DOULBE, NUMIT=] )   INPUTS: 	X = Independent variable vector, floating-point or double-precision 	Y = Dependent variable vector        NDEGREE - integer giving degree of polynomial to fit, maximum = 6  OUTPUTS: 	Function result = coefficient vector, length NDEGREE+1. 	IF COEFF=0.0, NO FIT! If N_ELEMENTS(COEFF) &gt; degree+1, the fit is poor 	(in this case the last element of COEFF=0.) 	Either floating point or double precision.   OPTIONAL OUTPUT PARAMETERS: 	YFIT = Vector of calculated y's 	SIG  = the  standard deviation  of the residuals   OPTIONAL INPUT KEYWORD:        /DOUBLE - If set, then force all computations to double precision.        NUMIT - Maximum number of iterations to perform, default = 25  RESTRICTIONS: 	Large values of NDEGREE should be avoided. This routine works best 	when the number of points &gt;&gt; NDEGREE.   PROCEDURE: 	For the initial estimate, the data is sorted by X and broken into 	NDEGREE+2 sets. The X,Y medians of each set are fitted to a polynomial 	 via POLY_FIT.   Bisquare ( Tukey's Biweight ) weights are then 	calculated, using a limit  of 6 outlier-resistant standard deviations. 	The fit is repeated iteratively until the robust standard deviation of 	the residuals changes by less than .03xSQRT(.5/(N-1)).   PROCEDURES CALLED:         POLY(), POLY_FIT()        ROB_CHECKFIT()  REVISION HISTORY 	Written, H. Freudenreich, STX, 8/90. Revised 4/91. 	2/94 -- changed convergence criterion         Added /DOUBLE keyword, remove POLYFITW call  W. Landsman  Jan 2009  ", "NUMITDOUBLEXYNDEGYFITSIG", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/robust_sigma.html", "robust_sigma.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "robust_sigma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/robust_sigma.html#ROBUST_SIGMA", "ROBUST_SIGMA", 'routine in <a href="idlastro/robust_sigma.html">robust_sigma.pro</a>', "robust_sigma.pro", "", "ROBUST_SIGMA", " NAME: 	ROBUST_SIGMA   PURPOSE: 	Calculate a resistant estimate of the dispersion of a distribution.  EXPLANATION: 	For an uncontaminated distribution, this is identical to the standard 	deviation.   CALLING SEQUENCE: 	result = ROBUST_SIGMA( Y, [ /ZERO, GOODVEC = ] )   INPUT: 	Y = Vector of quantity for which the dispersion is to be calculated   OPTIONAL INPUT KEYWORD: 	/ZERO - if set, the dispersion is calculated w.r.t. 0.0 rather than the 		central value of the vector. If Y is a vector of residuals, this 		should be set.   OPTIONAL OUPTUT KEYWORD:        GOODVEC = Vector of non-trimmed indices of the input vector  OUTPUT: 	ROBUST_SIGMA returns the dispersion. In case of failure, returns 	value of -1.0   PROCEDURE: 	Use the median absolute deviation as the initial estimate, then weight 	points using Tukey's Biweight. See, for example,  Understanding Robust 	and Exploratory Data Analysis,  by Hoaglin, Mosteller and Tukey, John 	Wiley & Sons, 1983, or equation 9 in Beers et al. (1990, AJ, 100, 32)   REVSION HISTORY: 	H. Freudenreich, STX, 8/90        Replace MED() call with MEDIAN(/EVEN)  W. Landsman   December 2001        Don't count NaN values  W.Landsman  June 2010   ", "ZEROGOODVECY", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rotated_fiducials.html", "rotated_fiducials.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "rotated_fiducials.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/rottest.html", "rottest.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "rottest.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("coyote/savetomain.html", "savetomain.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "savetomain.pro", "", "", " NAME:   SAVETOMAIN   PURPOSE:     This is used primarily in debugging mode to save a variable to    the main IDL level for later inspection.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Utilities   CALLING SEQUENCE:     SaveToMain, variable, nameOfVariable   ARGUMENTS:    variable:         The variable you wish to save at the main IDL level.    nameOfVariable:   The name of the variable at the main IDL level. If undefined,                     the variable will have the same name as the variable that was                     used as the variable argument.   KEYWORDRS:    None.   MODIFICATION HISTORY:    Written by: David W. Fanning, 2 July 2009.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/savetomain.html#SaveToMain", "SaveToMain", 'routine in <a href="coyote/savetomain.html">savetomain.pro</a>', "savetomain.pro", "", "SaveToMain", "", "dataname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/scale_vector.html", "scale_vector.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "scale_vector.pro", "", "", " NAME:        SCALE_VECTOR   PURPOSE:         This is a utility routine to scale the elements of a vector        (or an array) into a given data range. The processed vector        [MINVALUE &gt; vector &lt; MAXVECTOR] is scaled into the data range        given by MINRANGE and MAXRANGE.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         scaledVector = SCALE_VECTOR(vector, [minRange], [maxRange], [MINVALUE=minvalue], [MAXVALUE=maxvalue])   INPUT POSITIONAL PARAMETERS:         vector:   The vector (or array) to be scaled. Required.        minRange: The minimum value of the scaled vector. Set to 0 by default. Optional.        maxRange: The maximum value of the scaled vector. Set to 1 by default. Optional.        Note that it is the processed vector [MINVALUE &gt; vector &lt; MAXVALUE] that is        scaled between minRange and maxRange. See the MINVALUE and MAXVALUE keywords below.   INPUT KEYWORD PARAMETERS:         DOUBLE:        Set this keyword to perform scaling in double precision.                       Otherwise, scaling is done in floating point precision.         MAXVALUE:      MAXVALUE is set equal to (vector &lt; MAXVALUE) prior to scaling.                       The default value is MAXVALUE = Max(vector).         MINVALUE:      MINVALUE is set equal to (vector &gt; MAXVALUE) prior to scaling.                       The default value is MINXVALUE = Min(vector).         NAN:           Set this keyword to enable not-a-number checking. NANs                       in vector will be ignored.         PRESERVE_TYPE: Set this keyword to preserve the input data type in the output.   RETURN VALUE:         scaledVector: The vector (or array) values scaled into the data range.   COMMON BLOCKS:        None.   EXAMPLES:         x = [3, 5, 0, 10]        xscaled = SCALE_VECTOR(x, -50, 50)        Print, xscaled           -20.0000     0.000000     -50.0000      50.0000        Suppose your image has a minimum value of -1.7 and a maximum value = 2.5.        You wish to scale this data into the range 0 to 255, but you want to use        a diverging color table. Thus, you want to make sure value 0.0 is scaled to 128.        You proceed like this:         scaledImage = SCALE_VECTOR(image, 0, 255, MINVALUE=-2.5, MAXVALUE=2.5)   RESTRICTIONS:       Requires the following programs from the Coyote Library:          http://www.idlcoyote.com/programs/convert_to_type.pro         http://www.idlcoyote.com/programs/fpufix.pro   MODIFICATION HISTORY:         Written by:  David W. Fanning, 12 Dec 1998.        Added MAXVALUE and MINVALUE keywords. 5 Dec 1999. DWF.        Added NAN keyword. 18 Sept 2000. DWF.        Removed check that made minRange less than maxRange to allow ranges to be           reversed on axes, etc. 28 Dec 2003. DWF.        Added PRESERVE_TYPE and DOUBLE keywords. 19 February 2006. DWF.        Added FPUFIX to cut down on floating underflow errors. 11 March 2006. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/scale_vector.html#Scale_Vector", "Scale_Vector", 'routine in <a href="idlastro/coyote/scale_vector.html">scale_vector.pro</a>', "scale_vector.pro", "", "Scale_Vector", "", "MAXVALUEMINVALUENANPRESERVE_TYPEDOUBLEvectorminRangemaxRange", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/scale_vector.html", "scale_vector.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "scale_vector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/scale_vector.html#Scale_Vector", "Scale_Vector", 'routine in <a href="coyote/scale_vector.html">scale_vector.pro</a>', "scale_vector.pro", "    FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "Scale_Vector", " This is a utility routine to scale the elements of a vector or an array into a  given data range. The routine is now depreciated in favor of cgScaleVector.   ", "DOUBLE         Set this keyword to perform scaling in double precision. Otherwise, scaling          is done in floating point precision.      maxvalue: in, optional          Set this value to the maximum value of the vector, before scaling (vector &lt; maxvalue).          The default value is Max(vector).      minvalue: in, optional          Set this value to the mimimum value of the vector, before scaling (minvalue &lt; vector).          The default value is Min(vector).      nan: in, optional, type=boolean, default=0          Set this keyword to enable not-a-number checking. NANs in vector will be ignored.      preserve_type: in, optional, type=boolean, default=0          Set this keyword to preserve the input data type in the output.   MAXVALUEMINVALUENANPRESERVE_TYPEvector       The input vector or array to be scaled.   minRange       The minimum output value of the scaled vector. Set to 0 by default.  maxRange       The maximum output value of the scaled vector. Set to 1 by default.  ", "Utilities", "     Change History: <span class= code-output >   Written by:  David W. Fanning, 12 Dec 1998.</span> <span class= code-output >   Added MAXVALUE and MINVALUE keywords. 5 Dec 1999. DWF.</span> <span class= code-output >   Added NAN keyword. 18 Sept 2000. DWF.</span> <span class= code-output >   Removed check that made minRange less than maxRange to allow ranges to be</span> <span class= code-output >      reversed on axes, etc. 28 Dec 2003. DWF.</span> <span class= code-output >   Added PRESERVE_TYPE and DOUBLE keywords. 19 February 2006. DWF.</span> <span class= code-output >   Added FPUFIX to cut down on floating underflow errors. 11 March 2006. DWF.</span> <span class= code-output >   This routine is being depreciated in favor of cgScaleVector. 16 May 2013. DWF.</span>       Copyright (c) 1998-2013, Fanning Software Consulting, Inc.         Simple example of scaling a vector:   <span class= code-prompt >IDL&gt;</span> x = [3, 5, 0, 10]   <span class= code-prompt >IDL&gt;</span> xscaled = Scale_Vector(x, -50, 50)   <span class= code-prompt >IDL&gt;</span> Print, xscaled <span class= code-output >       -20.0000     0.000000     -50.0000      50.0000</span>       Suppose your image has a minimum value of -1.7 and a maximum value = 2.5.        You wish to scale this data into the range 0 to 255, but you want to use        a diverging color table. Thus, you want to make sure value 0.0 is scaled to 128.        You proceed like this: <span class= code-output >  scaledImage = Scale_Vector(image, 0, 255, MINVALUE=-2.5, MAXVALUE=2.5)</span>       A vector or array of the same size as the input, scaled into the data range given      by minRange and maxRange'. The input vector is confined to the data range set      by MinValue and MaxValue before scaling occurs.   ");
  
  

libdata[libdataItem++] = new Array("coyote/scalemodis.html", "scalemodis.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "scalemodis.pro", "", "", " NAME:   SCALEMODIS   PURPOSE:    MODIS corrected reflectance images often appear drab when initially processed   and displayed on a computer using BYTSCL. In fact, the resulting true-color   images look nothing like the images you can find on the MODIS Rapid Response   web page (http://rapidfire.sci.gsfc.nasa.gov/gallery/). After poking around on   the Internet for awhile, I discovered that the Rapid Response Team doesn't use   BYTSCL to prepare the images. Rather, they selectively scale portions of the   reflectance image, using a piecewise scaling with different slopes. This program   implements this Rapid Response Team algorithm.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:    Graphics   CALLING SEQUENCE:    scaledBand = ScaleModis(red, green, blue)   ARGUMENTS:    red:           A two-dimensional array representing the corrected reflectance                  values of a MODIS image. This is a required parameter. If the                  green and blue parameters are also used, this parameter will                  represent the red band of a RGB 24-bit scaled image that is returned.    green:         If the three parameters--red, green, and blue--are present, the returned                  array is a 24-bit true-color image, scaled appropriately. This parameter                  is used as the green band in such an image. The parameter is a two-dimensional                  array of corrected reflectance values.    blue:          If the three parameters--red, green, and blue--are present, the returned                  array is a 24-bit true-color image, scaled appropriately. This parameter                  is used as the blue band in such an image. The parameter is a two-dimensional                  array of corrected reflectance values.   KEYWORD PARAMETERS:    RANGE:         A two-dimensional array that the input bands are first scaled into, prior to                  the differential scaling using the MODIS Rapid Response algorithm. The default                  input range is [-0.01, 1.10]. These values will be used to set the MIN and MAX                  keywords for the BYTSCL command in the initial scaling of the input bands.    CLOUD:         The MODIS Rapid Response team uses a slightly different scaling algorithm when                  the idea is to emphasize clouds in a MODIS scene. Set this keyword to use the                  alternate cloud scaling algorithm.   OUTPUTS:    scaledBand:    If a single 2D array is passed as the argument, then scaledBand is the scaled                  2D output array. If all three arguments are passed to the program, then scaledBand                  is a scaled 24-bit image that represents a true-color or false color representation                  of the three input bands.   MODIFICATION HISTORY:    Written by: David W. Fanning, July 2009, using the IDL programs MODIS_FALSE_COLOR and      and SCALE_IMAGE for inspiration. I found these programs on the Internet when poking      around MODIS web pages. I suspect, but I am not sure, these programs were originally      written by Liam Gumley.   Minor changes to the ScaleIt function to be sure partitioning is done correctly. 5 Aug 2009. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/scalemodis.html#ScaleModis_ScaleIt", "ScaleModis_ScaleIt", 'routine in <a href="coyote/scalemodis.html">scalemodis.pro</a>', "scalemodis.pro", "", "ScaleModis_ScaleIt", "", "imageinputoutput", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/scalemodis.html#ScaleModis", "ScaleModis", 'routine in <a href="coyote/scalemodis.html">scalemodis.pro</a>', "scalemodis.pro", "", "ScaleModis", "", "RANGECLOUDredgrnblu", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/scatter.html", "scatter.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "scatter.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " Bunch of code deisgned to make sure the things I write are doing the things I want   Compiled the doc with idldoc,root='/Users/jerensuzuki/Documents/suncentering', $  output='rbdoc',format_style='rst',/user,/quiet,markup_style='rst'   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/scatter.html#cc", "cc", 'routine in <a href="code_snapshots/obsolete_code/scatter.html">scatter.pro</a>', "scatter.pro", "", "cc", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/scatter.html#makesomescatplots", "makesomescatplots", 'routine in <a href="code_snapshots/obsolete_code/scatter.html">scatter.pro</a>', "scatter.pro", "", "makesomescatplots", "   Makes a few scatter plots based on varying parameters. Sucks that the values are hardcoded.     Also, as of Nov 14, these are all wrong.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/scatter.html#scatter", "scatter", 'routine in <a href="code_snapshots/obsolete_code/scatter.html">scatter.pro</a>', "scatter.pro", "", "scatter", "   Abbreviated form of  Make Some More Scatter Plots     Making more scat plots now that I've fixed my program and am now moving onto bmp images   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/scratch.html", "scratch.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "scratch.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/scratch.html#scratch", "scratch", 'routine in <a href="code_snapshots/obsolete_code/scratch.html">scratch.pro</a>', "scratch.pro", "", "scratch", "", "inputthresh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("plots_tables_images/scrib.html", "scrib.pro", '.pro file in <a href="plots_tables_images/dir-overview.html">plots_tables_images/ directory</a>', "scrib.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("coyote/scrollwindow.html", "scrollwindow.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "scrollwindow.pro", "", "", " NAME:   SCROLLWINDOW   PURPOSE:    This procedure is more or less a drop-in replacement for the WINDOW   command. The main difference is that if the requested window size   is larger then the current display size, the window is created in a   base widget with scroll bars so the user can scroll around   the larger window. Use the WID keyword to pass in the window   index number of the window you want to create (a small change   from the WINDOW syntax). If the program can create a window with   this window index number, it will. Otherwise, this keyword will   return the window index number of the window that was actually   created.   I use ScrollWindow to create windows that I can view both on   my large monitor at work and on my smaller laptop monitor when   I travel.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:    Graphics   CALLING SEQUENCE:    ScrollWindow, xsize, ysize   ARGUMENTS:    xsize:       The x size of the graphics window. By default, 640.    ysize:       The y size of the graphics window. By default, 512.   KEYWORD PARAMETERS:    FREE:        Get a window with a free or unused window index number.                This is *always* done with a scrollable window. The window                index number of the window is returned in the WID keyword.    PIXMAP:      Set to create a pixmap window. In this case, no scrollable                window is possible. A normal IDL graphics window is                always created.    SIZEFRAC:    Make the window this fraction of the screen dimensions.                A number between 0.0 and 1.0    TITLE:       The title string that is displayed on the window.    WID:         The window index number. If supplied as an IDL variable,                this can be both an input and an output keyword. If a                window with this window index number can be created, it                is. Otherwise, this varible upon exit from the program                contains the window index number of the graphics window                that was created.    XPOS:        The x offset of the upper-left corner of the window.    XSIZE:       The same as the xsize argument. Provided so ScrollWindow                can be a drop-in replacement for the Window command.    YPOS:        The y offset of the upper-left corner of the window.    YSIZE:       The same as the ysize argument. Provided so ScrollWindow                can be a drop-in replacement for the Window command.   EXAMPLE:    ScrollWindow, XSIZE=800, YSIZE=400   ; Produces normal IDL graphics window.   ScrollWindow, XSIZE=1800, YSIZE=1200 ; Produces a scrollable graphics window.   MODIFICATION HISTORY:    Written by: David W. Fanning, 25 March 2009   Added SIZEFRACTION keyword, Mats Löfdahl, 25 November 2012.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/scrollwindow.html#ScrollWindow", "ScrollWindow", 'routine in <a href="coyote/scrollwindow.html">scrollwindow.pro</a>', "scrollwindow.pro", "", "ScrollWindow", "", "FREEPIXMAPSIZEFRACTIONTITLEWIDXPOSXSIZEYSIZEYPOSxsizeysize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/sdevscl.html", "sdevscl.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "sdevscl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/sdevscl.html#SDevScl", "SDevScl", 'routine in <a href="coyote/sdevscl.html">sdevscl.pro</a>', "sdevscl.pro", "     FANNING SOFTWARE CONSULTING: <span class= code-output >  David W. Fanning</span> <span class= code-output >  1645 Sheely Drive</span> <span class= code-output >  Fort Collins, CO 80526 USA</span> <span class= code-output >  Phone: 970-221-0438</span> <span class= code-output >  E-mail: david@idlcoyote.com</span> <span class= code-output >  Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "SDevScl", " This is a utility routine to perform standard deviation scaling  on image arrays. The user defines a multiple of the standard  deviation and this is used with the standard deviation of the  pixels in the image to create a threshold for linear scaling.  Use the EXCLUDE keyword to exclude a particular value from  the standard deviation calculation.   ", "EXCLUDE         Set this keyword to a value in the image array that is to be excluded from the          standard deviation calculation. Normally, this would be the backgroud value of          the image, if there is a background.  MULTIPLIER        The standard deviation of the image pixels is computed and then         multiplied by the multiplier factor to produce upper and lower         thresholds for the linear scaling of the image by subtracting         or adding this value to the mean value of the image. The image         is linearly scaled between these two threshold values.  NEGATIVE          Set this keyword to return the  negative  or reverse of the image scaling.  OMAX          Normally, the image is scaled into the range of 0 to 255. Setting the           OMIN and OMAX keywords can change this scaling.  OMIN          Normally, the image is scaled into the range of 0 to 255. Setting the           OMIN and OMAX keywords can change this scaling.  THRESHOLD          A two-element array that contains the minimum and maximum thresholds, respectively,           that were calculated for the scaling.   image        The image array that is to be scaled.   ", "Utilities Graphics", "     Change History: <span class= code-output >  Written by: David W. Fanning, 5 June 2012.</span>       Copyright (c) 2012, Fanning Software Consulting, Inc.       To display an image with standard deviation scaling: <span class= code-output >  image = cgDemoData(5)</span> <span class= code-output >  cgDisplay, 256*3, 256</span> <span class= code-output >  !P.Multi = [0,3,1]</span> <span class= code-output >  cgImage, image</span> <span class= code-output >  cgImage, SDevScl(image)</span> <span class= code-output >  cgImage, SDevScl(image, Exclude=0)</span> <span class= code-output >  !P.Multi = 0</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/select_objects.html", "select_objects.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "select_objects.pro", "", "", " NAME:        SELECT_OBJECTS   PURPOSE:        The purpose of this program is to demonstrate how to select        and move objects in an object graphics window. Once the objects        appear in the window, use your mouse to select the objects and        move them in the window. The window is resizeable.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Object Graphics.   CALLING SEQUENCE:        SELECT_OBJECTS   REQUIRED INPUTS:        None.   KEYWORD PARAMETERS:        None.   COMMON BLOCKS:        None.   SIDE EFFECTS:        None.   RESTRICTIONS:        Requires VCOLORBAR from the Coyote Library:            http://www.idlcoyote.com/programs/vcolorbar__define.pro.   EXAMPLE:        Select_Objects   MODIFICATION HISTORY:        Written by David Fanning, 21 September 98.        Added the ability to shrink and expand the objects. 27 Sept 98. DWF.        Changed FSC_Normalize to cgNormalize to reflect new name. 6 Feb 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/select_objects.html#Select_Button_Events", "Select_Button_Events", 'routine in <a href="coyote/select_objects.html">select_objects.pro</a>', "select_objects.pro", "", "Select_Button_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/select_objects.html#Select_Cleanup", "Select_Cleanup", 'routine in <a href="coyote/select_objects.html">select_objects.pro</a>', "select_objects.pro", "", "Select_Cleanup", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/select_objects.html#Select_Resize", "Select_Resize", 'routine in <a href="coyote/select_objects.html">select_objects.pro</a>', "select_objects.pro", "", "Select_Resize", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/select_objects.html#Select_Objects", "Select_Objects", 'routine in <a href="coyote/select_objects.html">select_objects.pro</a>', "select_objects.pro", "", "Select_Objects", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/select_w.html", "select_w.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "select_w.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/select_w.html#select_w_event", "select_w_event", 'routine in <a href="idlastro/select_w.html">select_w.pro</a>', "select_w.pro", "", "select_w_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/select_w.html#select_w", "select_w", 'routine in <a href="idlastro/select_w.html">select_w.pro</a>', "select_w.pro", "", "select_w", " NAME: 	SELECT_W  PURPOSE: 	Create a non-exclusive widget menu of items  EXPLANATION: 	More than one item may be selected or 'de-selected'. 	Normally called by SCREEN_SELECT   CALLING SEQUENCE: 	SELECT_W, items ,iselected, [ comments, command_line, only_one ]   INPUTS: 	items - string array giving list of items that can be 		selected.   OPTIONAL INPUTS: 	comments - comments which can be requested for each item in 		array selections.    NOT YET IMPLEMENTED 	command_line - optional command line to be placed at the bottom 		of the screen.  It is usually used to specify what the 		user is selecting. 	only_one - integer flag. If set to 1 then the user can only select 		one item.  The routine returns immediately after the first 		selection is made.  OPTIONAL KEYWORD INPUT        SELECTIN - vector of items to be pre-selected upon input (not used for                only_one option)   OUTPUT: 	iselected - list of indices in selections giving the selected 		items.   OPTIONAL OUTPUT KEYWORD:        COUNT  - Integer scalar giving the number of items selected  COMMON BLOCKS: 	SELECT_W - Used to communicate with the SELECT_W_EVENT procedure   MODIFICATION HISTORY: 	Written, K. Venkatakrishna & W. Landsman, Hughes/STX    January, 1992 	Widgets made MODAL.  M. Greason, Hughes STX, 15 July 1992.        Changed handling of MODAL keyword for V5.0   W.Thompson  September 1997        Added selectin keyword  D. Lindler 01/12/99  ", "CountGROUP_LEADERselectinitemsiselectedcommentscommand_lineonly_one", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/albert_version/setbetterpeak.html", "setbetterpeak.pro", '.pro file in <a href="code_snapshots/albert_version/dir-overview.html">code_snapshots/albert_version/ directory</a>', "setbetterpeak.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/albert_version/setbetterpeak.html#setbetterpeak", "setbetterpeak", 'routine in <a href="code_snapshots/albert_version/setbetterpeak.html">setbetterpeak.pro</a>', "setbetterpeak.pro", "", "setbetterpeak", "       Returns peaks of 2nd deriv of sorted array to set thresholds for image   ", "input           Starting input image   nsuns           Number of suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/orig_version/setbetterpeak.html", "setbetterpeak.pro", '.pro file in <a href="code_snapshots/orig_version/dir-overview.html">code_snapshots/orig_version/ directory</a>', "setbetterpeak.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/orig_version/setbetterpeak.html#setbetterpeak", "setbetterpeak", 'routine in <a href="code_snapshots/orig_version/setbetterpeak.html">setbetterpeak.pro</a>', "setbetterpeak.pro", "", "setbetterpeak", "       Returns peaks of 2nd deriv of sorted array to set thresholds for image   ", "input           Starting input image   nsuns           Number of suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/sep11/setbetterpeak.html", "setbetterpeak.pro", '.pro file in <a href="code_snapshots/sep11/dir-overview.html">code_snapshots/sep11/ directory</a>', "setbetterpeak.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/sep11/setbetterpeak.html#setbetterpeak", "setbetterpeak", 'routine in <a href="code_snapshots/sep11/setbetterpeak.html">setbetterpeak.pro</a>', "setbetterpeak.pro", "", "setbetterpeak", "       Returns peaks of 2nd deriv of sorted array to set thresholds for image   ", "input           Starting input image   nsuns           Number of suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sep20/setbetterpeak.html", "setbetterpeak.pro", '.pro file in <a href="sep20/dir-overview.html">sep20/ directory</a>', "setbetterpeak.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sep20/setbetterpeak.html#setbetterpeak", "setbetterpeak", 'routine in <a href="sep20/setbetterpeak.html">setbetterpeak.pro</a>', "setbetterpeak.pro", "", "setbetterpeak", "       Returns peaks of 2nd deriv of sorted array to set thresholds for image   ", "input           Starting input image   nsuns           Number of suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/setbetterpeak.html", "setbetterpeak.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "setbetterpeak.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/setbetterpeak.html#setbetterpeak", "setbetterpeak", 'routine in <a href="code_snapshots/aug22_notworking/setbetterpeak.html">setbetterpeak.pro</a>', "setbetterpeak.pro", "", "setbetterpeak", "       Returns peaks of 2nd deriv of sorted array to set thresholds for image   ", "input           Starting input image   n_suns           Number of suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/jul25/setbetterpeak.html", "setbetterpeak.pro", '.pro file in <a href="code_snapshots/jul25/dir-overview.html">code_snapshots/jul25/ directory</a>', "setbetterpeak.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/jul25/setbetterpeak.html#setbetterpeak", "setbetterpeak", 'routine in <a href="code_snapshots/jul25/setbetterpeak.html">setbetterpeak.pro</a>', "setbetterpeak.pro", "", "setbetterpeak", "       Returns peaks of 2nd deriv of sorted array to set thresholds for image   ", "input           Starting input image   nsuns           Number of suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/test_version/setbetterpeak.html", "setbetterpeak.pro", '.pro file in <a href="code_snapshots/test_version/dir-overview.html">code_snapshots/test_version/ directory</a>', "setbetterpeak.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/test_version/setbetterpeak.html#setbetterpeak", "setbetterpeak", 'routine in <a href="code_snapshots/test_version/setbetterpeak.html">setbetterpeak.pro</a>', "setbetterpeak.pro", "", "setbetterpeak", "       Returns peaks of 2nd deriv of sorted array to set thresholds for image   ", "input           Starting input image   nsuns           Number of suns   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/setbetterthresh.html", "setbetterthresh.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "setbetterthresh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/setbetterthresh.html#setbetterthresh", "setbetterthresh", 'routine in <a href="code_snapshots/obsolete_code/setbetterthresh.html">setbetterthresh.pro</a>', "setbetterthresh.pro", "", "setbetterthresh", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/setdecomposedstate.html", "setdecomposedstate.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "setdecomposedstate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/setdecomposedstate.html#SetDecomposedState", "SetDecomposedState", 'routine in <a href="idlastro/coyote/setdecomposedstate.html">setdecomposedstate.pro</a>', "setdecomposedstate.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "SetDecomposedState", "   Provides a device-independent way to set the color decomposition state of the    current graphics device. Devices that do not have a DECOMPOSED keyword to the    DEVICE command are assumed to be in indexed color mode always.     I have removed the Z-graphics buffer from being controlled by this program. I    do so reluctantly, but I am pragmatic enough to realize that progress forward    is necessarily slow and that I must recognize the reality of legacy IDL code.     My personal view is that all graphics routines should use 24-bit decomposed    color. There are myriad advantages, but basically they boil down to this:    (1) You have 16.7 million colors available to you simultaneously, and (2) you    don't have to contaminate color tables to use drawing colors. Coyote Graphics    routines are in the habit of switching out of whatever color mode the user happens    to be using, into 24-bit decomposed color mode, then switching back when finished    with its business. But, it is impossible to do this correctly in the Z-graphics    buffer.     The reason for this is that in the Z-graphics buffer, you need to switch not only    the color mode, but also the pixel depth. In other words, I would prefer to set    the Z-graphics buffer up like this: <span class= code-output >   Set_Plot, 'Z'</span> <span class= code-output >   Device, Decomposed=1, Set_Pixel_Depth=24</span>    But, if I do that, then I need to set it back (for 99 people out of a 100) like this: <span class= code-output >   Device, Decomposed=0, Set_Pixel_Depth=8</span>    Unfortunately, using this command will erase whatever is in the Z-graphics buffer!     My solution to this problem is to leave it to the user to configure the Z-graphics buffer    the way they want it. If you configure it to use 24-bit decomposed color, all of the Coyote    Graphics routines will work as they normally do. If you configure it to use 8-bit indexed color,    which is the default configuration, then it will work  normally , but you will be in great    danger of contaminating the system color table. The reason for this is that Coyote Graphics    cannot  restore  the entry color table in the Z-buffer without obliterating what is already    in the graphics window. Users who work with indexed color are probably already very much    aware of this problem, so it shouldn't surprise them. (They might not expect this with    Coyote Graphics, but this is the price that has to be paid.)     My suggestion is to put the Z-graphics configuration in your IDL startup file. Set it    up in 24-bit decomposed color mode, use Coyote Graphics to do all your graphical output,    and you will find things working perfectly.    See Configuring the Z-Graphics Buffer for Coyote Graphics    for additional information.   ", "CURRENTSTATE         The current decomposition state of the current graphics device when the          program is called. A 1 indicates decomposed color. A 0 indicates indexed          color.  DEPTH         The currnet pixel depth of the graphics device.  ZDEPTH         The pixel depth of the Z-graphics device. Set to 8 or 24. Applies ONLY          when setting the Z-graphics device state to 0. If undefined, the current          depth of the Z-graphics device is unchanged from its current state. No          longer used after 24 Dec 2011 update. Code still in place, however.   state         Set to 1 to set the current graphics device to decomposed color. Set to 0          to set the current graphics device to indexed color. Devices lacking a          DECOMPOSED keyword are assumed to be perpetually in indexed color mode.          The Z-graphics buffer is always unchanged after the 24 Dec 2011 update.   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written, 16 November 2010. DWF.</span> <span class= code-output >  Changes to include SET_PIXEL_DEPTH in Z-graphics buffer. 19 Nov 2010. DWF.</span> <span class= code-output >  Allow PostScript 7.0 to set the decomposition keyword. 12 Dec 2010. DWF.</span> <span class= code-output >  Added DEPTH and ZDEPTH keywords. 31 Dec 2010. DWF.</span> <span class= code-output >  Added a do-nothing NULL device to Case statement. 4 Jan 2011. DWF.</span> <span class= code-output >  Removed the Z-graphics buffer from control by this program. 24 Dec 2011. DWF.</span> <span class= code-output >  Added back the ability to set decomposed state for the Z-buffer, but only</span> <span class= code-output >     if the depth buffer is 24-bits or higher. 25 May 2012. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.       To set the device in color decomposition mode, then return it, do something like this: <span class= code-output >  SetDecomposedState, 1, CurrentState=mode</span> <span class= code-output >  ...</span> <span class= code-output >  SetDecomposeState, mode</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/setdecomposedstate.html", "setdecomposedstate.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "setdecomposedstate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/setdecomposedstate.html#SetDecomposedState", "SetDecomposedState", 'routine in <a href="coyote/setdecomposedstate.html">setdecomposedstate.pro</a>', "setdecomposedstate.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "SetDecomposedState", "   Provides a device-independent way to set the color decomposition state of the    current graphics device. Devices that do not have a DECOMPOSED keyword to the    DEVICE command are assumed to be in indexed color mode always.     I have removed the Z-graphics buffer from being controlled by this program. I    do so reluctantly, but I am pragmatic enough to realize that progress forward    is necessarily slow and that I must recognize the reality of legacy IDL code.     My personal view is that all graphics routines should use 24-bit decomposed    color. There are myriad advantages, but basically they boil down to this:    (1) You have 16.7 million colors available to you simultaneously, and (2) you    don't have to contaminate color tables to use drawing colors. Coyote Graphics    routines are in the habit of switching out of whatever color mode the user happens    to be using, into 24-bit decomposed color mode, then switching back when finished    with its business. But, it is impossible to do this correctly in the Z-graphics    buffer.     The reason for this is that in the Z-graphics buffer, you need to switch not only    the color mode, but also the pixel depth. In other words, I would prefer to set    the Z-graphics buffer up like this: <span class= code-output >   Set_Plot, 'Z'</span> <span class= code-output >   Device, Decomposed=1, Set_Pixel_Depth=24</span>    But, if I do that, then I need to set it back (for 99 people out of a 100) like this: <span class= code-output >   Device, Decomposed=0, Set_Pixel_Depth=8</span>    Unfortunately, using this command will erase whatever is in the Z-graphics buffer!     My solution to this problem is to leave it to the user to configure the Z-graphics buffer    the way they want it. If you configure it to use 24-bit decomposed color, all of the Coyote    Graphics routines will work as they normally do. If you configure it to use 8-bit indexed color,    which is the default configuration, then it will work  normally , but you will be in great    danger of contaminating the system color table. The reason for this is that Coyote Graphics    cannot  restore  the entry color table in the Z-buffer without obliterating what is already    in the graphics window. Users who work with indexed color are probably already very much    aware of this problem, so it shouldn't surprise them. (They might not expect this with    Coyote Graphics, but this is the price that has to be paid.)     My suggestion is to put the Z-graphics configuration in your IDL startup file. Set it    up in 24-bit decomposed color mode, use Coyote Graphics to do all your graphical output,    and you will find things working perfectly.    See Configuring the Z-Graphics Buffer for Coyote Graphics    for additional information.   ", "CURRENTSTATE         The current decomposition state of the current graphics device when the          program is called. A 1 indicates decomposed color. A 0 indicates indexed          color.  DEPTH         The currnet pixel depth of the graphics device.  ZDEPTH         The pixel depth of the Z-graphics device. Set to 8 or 24. Applies ONLY          when setting the Z-graphics device state to 0. If undefined, the current          depth of the Z-graphics device is unchanged from its current state. No          longer used after 24 Dec 2011 update. Code still in place, however.   state         Set to 1 to set the current graphics device to decomposed color. Set to 0          to set the current graphics device to indexed color. Devices lacking a          DECOMPOSED keyword are assumed to be perpetually in indexed color mode.          The Z-graphics buffer is always unchanged after the 24 Dec 2011 update.   ", "Graphics Utilities", "     Change History: <span class= code-output >  Written, 16 November 2010. DWF.</span> <span class= code-output >  Changes to include SET_PIXEL_DEPTH in Z-graphics buffer. 19 Nov 2010. DWF.</span> <span class= code-output >  Allow PostScript 7.0 to set the decomposition keyword. 12 Dec 2010. DWF.</span> <span class= code-output >  Added DEPTH and ZDEPTH keywords. 31 Dec 2010. DWF.</span> <span class= code-output >  Added a do-nothing NULL device to Case statement. 4 Jan 2011. DWF.</span> <span class= code-output >  Removed the Z-graphics buffer from control by this program. 24 Dec 2011. DWF.</span> <span class= code-output >  Added back the ability to set decomposed state for the Z-buffer, but only</span> <span class= code-output >     if the depth buffer is 24-bits or higher. 25 May 2012. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.       To set the device in color decomposition mode, then return it, do something like this: <span class= code-output >  SetDecomposedState, 1, CurrentState=mode</span> <span class= code-output >  ...</span> <span class= code-output >  SetDecomposeState, mode</span>  ");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/setdefaultvalue.html", "setdefaultvalue.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "setdefaultvalue.pro", "", "", " NAME:   SetDefaultValue   PURPOSE:     This procedure sets default values for positional and keyword arguments to    IDL procedures and functions.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Utilities   CALLING SEQUENCE:     SetDefaultValue, argument, defaultValue   ARGUMENTS:    argument:       The augument variable you are setting the default value of. If this variable                   is undefined, the defaultValue will be assigned to it. Otherwise, the argument                   variable will not change.    defaultValue:   The default value that will be assigned to the argument variable ONLY if the argument                   variable is undefined. If this variable is undefined, the argument variable will                   be treated as if the BOOLEAN keyword had been set.   KEYWORDS:    BOOLEAN:        If this keyword is set, the argument value will always be forced to return with a                   value of 0 or 1.   EXAMPLE:    FUNCTION Action, arg1, arg2, MULTIPLY=multiply       SetDefaultValue, arg1, 1      SetDefaultValue, arg2, 2      SetDefaultValue, multiply, 1, /BOOLEAN       IF multiply THEN RETURN, arg1 * arg2 ELSE RETURN, arg1 + arg2    END   MODIFICATION HISTORY:    Written by: David W. Fanning, November 26, 2008, from suggestion by Carsten Lechte on      IDL newsgroup on this date.   Made a change to the way the BOOLEAN keyword works. Now argument is set to BOOLEAN before      return, if required. 3 Dec 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/setdefaultvalue.html#SetDefaultValue", "SetDefaultValue", 'routine in <a href="idlastro/coyote/setdefaultvalue.html">setdefaultvalue.pro</a>', "setdefaultvalue.pro", "", "SetDefaultValue", "", "BOOLEANargumentdefaultValue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/setdefaultvalue.html", "setdefaultvalue.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "setdefaultvalue.pro", "", "", " NAME:   SetDefaultValue   PURPOSE:     This procedure sets default values for positional and keyword arguments to    IDL procedures and functions.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:     Utilities   CALLING SEQUENCE:     SetDefaultValue, argument, defaultValue   ARGUMENTS:    argument:       The augument variable you are setting the default value of. If this variable                   is undefined, the defaultValue will be assigned to it. Otherwise, the argument                   variable will not change.    defaultValue:   The default value that will be assigned to the argument variable ONLY if the argument                   variable is undefined. If this variable is undefined, the argument variable will                   be treated as if the BOOLEAN keyword had been set.   KEYWORDS:    BOOLEAN:        If this keyword is set, the argument value will always be forced to return with a                   value of 0 or 1.   EXAMPLE:    FUNCTION Action, arg1, arg2, MULTIPLY=multiply       SetDefaultValue, arg1, 1      SetDefaultValue, arg2, 2      SetDefaultValue, multiply, 1, /BOOLEAN       IF multiply THEN RETURN, arg1 * arg2 ELSE RETURN, arg1 + arg2    END   MODIFICATION HISTORY:    Written by: David W. Fanning, November 26, 2008, from suggestion by Carsten Lechte on      IDL newsgroup on this date.   Made a change to the way the BOOLEAN keyword works. Now argument is set to BOOLEAN before      return, if required. 3 Dec 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/setdefaultvalue.html#SetDefaultValue", "SetDefaultValue", 'routine in <a href="coyote/setdefaultvalue.html">setdefaultvalue.pro</a>', "setdefaultvalue.pro", "", "SetDefaultValue", "", "BOOLEANargumentdefaultValue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/setpeak.html", "setpeak.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "setpeak.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/setpeak.html#setpeak", "setpeak", 'routine in <a href="code_snapshots/obsolete_code/setpeak.html">setpeak.pro</a>', "setpeak.pro", "", "setpeak", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/setthresh.html", "setthresh.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "setthresh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/setthresh.html#setthresh", "setthresh", 'routine in <a href="code_snapshots/obsolete_code/setthresh.html">setthresh.pro</a>', "setthresh.pro", "", "setthresh", "", "input", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/sharpen.html", "sharpen.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "sharpen.pro", "", "", " NAME:        Sharpen   PURPOSE:          This function sharpens an image using a Laplacian kernel.         The final result is color adjusted to match the histogram         of the input image.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Image Processing   CALLING SEQUENCE:         sharp_image = Sharpen(image)   INPUTS:         image - The input image to be sharpened. Assumed to be a 2D byte array.   OUTPUTS:         sharp_image - The sharpened image.   INPUT KEYWORDS:         KERNEL -- By default the image is convolved with this 3-by-3 Laplacian kernel:            [ [-1, -1, -1], [-1, +8, -1], [-1, -1, -1] ].  You can pass in any  kernel            of odd width. The filtered image is added back to the original image to provide            the sharpening effect.         DISPLAY -- If this keyword is set a window is opened and the details of the sharpening            process are displayed.   OUTPUT KEYWORDS:         None.   DEPENDENCIES:         None.   METHOD:         This function is based on the Laplacian kernel sharpening method on pages 128-131        of Digital Image Processing, 2nd Edition, Rafael C. Gonzalez and Richard E. Woods,        ISBN 0-20-118075-8.   EXAMPLE:         There is an example program at the end of this file.   MODIFICATION HISTORY:         Written by David W. Fanning, January 2003.        Updated slightly to use Coyote Library routines. 3 Dec. 2010. DWF.        Modified the example to work with cgImage. 29 March 2011. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/sharpen.html#Sharpen_HistoMatch", "Sharpen_HistoMatch", 'routine in <a href="coyote/sharpen.html">sharpen.pro</a>', "sharpen.pro", "", "Sharpen_HistoMatch", "", "imagehistogram_to_match", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/sharpen.html#Sharpen", "Sharpen", 'routine in <a href="coyote/sharpen.html">sharpen.pro</a>', "sharpen.pro", "", "Sharpen", "", "DisplayKernelimage", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/sharpen.html#Example", "Example", 'routine in <a href="coyote/sharpen.html">sharpen.pro</a>', "sharpen.pro", "", "Example", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sigma_filter.html", "sigma_filter.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sigma_filter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sigma_filter.html#sigma_filter", "sigma_filter", 'routine in <a href="idlastro/sigma_filter.html">sigma_filter.pro</a>', "sigma_filter.pro", "", "sigma_filter", " NAME: 	SIGMA_FILTER  PURPOSE: 	Replace pixels more than a specified pixels deviant from its neighbors  EXPLANATION: 	Computes the mean and standard deviation of pixels in a box centered at 	each pixel of the image, but excluding the center pixel. If the center 	pixel value exceeds some # of standard deviations from the mean, it is 	replaced by the mean in box. Note option to process pixels on the edges.  CALLING SEQUENCE: 	Result = sigma_filter( image, box_width, N_sigma=(#), /ALL,/MON )  INPUTS: 	image = 2-D image (matrix) 	box_width = width of square filter box, in # pixels (default = 3)  KEYWORDS: 	N_sigma = # standard deviations to define outliers, floating point, 			recommend &gt; 2, default = 3. For gaussian statistics: 			N_sigma = 1 smooths 35% of pixels, 2 = 5%, 3 = 1%. 	RADIUS = alternative to specify box radius, so box_width = 2*radius+1.       /ALL_PIXELS causes computation to include edges of image,       /KEEP causes opposite effect: pixels with values outside of specified 		deviation are not changed, pixels within deviation are smoothed.       /ITERATE causes sigma_filter to be applied recursively (max = 20 times) 		until no more pixels change (only allowed when N_sigma &gt;= 2).       /MONITOR prints information about % pixels replaced.  Optional Outputs: 	N_CHANGE = # of pixels changed (replaced with neighborhood mean). 	VARIANCE = image of pixel neighborhood variances * (N_sigma)^2, 	DEVIATION = image of pixel deviations from neighborhood means, squared.  CALLS: 	function filter_image( )  PROCEDURE: 	Compute mean over moving box-cars using smooth, subtract center values, 	compute variance using smooth on deviations from mean, 	check where pixel deviation from mean is within variance of box, 	replace those pixels in smoothed image (mean) with orignal values, 	return the resulting partial mean image.  MODIFICATION HISTORY: 	Written, 1991, Frank Varosi and Dan Gezari NASA/GSFC 	F.V.1992, added optional keywords /ITER,/MON,VAR=,DEV=,N_CHANGE=. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "N_SIGMAALL_PIXELSITERATEMONITORKEEP_OUTLIERSRADIUSN_CHANGEVARIANCE_IMAGEDEVIATION_IMAGEimagebox_width", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sigrange.html", "sigrange.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sigrange.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sigrange.html#SIGRANGE", "SIGRANGE", 'routine in <a href="idlastro/sigrange.html">sigrange.pro</a>', "sigrange.pro", "", "SIGRANGE", " NAME: 	SIGRANGE()  PURPOSE: 	Selects the most significant data range in an image.  EXPLANATION: 	Selects out the most significant range in the data to be used in 	displaying images.  The histogram of ARRAY is used to select the most 	significant range.      Useful for scaling an image display.  CALLING SEQUENCE: 	OUTPUT = SIGRANGE( ARRAY )  INPUTS: 	ARRAY	 = Array to take most significant range of.  OPTIONAL INPUTS: 	None.  OUTPUTS: 	The function returns an array where values above and below the 	selected range are set equal to the maximum and minimum of the 	range respectively.  OPTIONAL INPUT KEYWORDS: 	FRACTION = Fraction of data to consider most significant. 		   Defaults to 0.99 	MISSING	 = Value used to flag missing points.  Data points with this 		   value are not considered or changed.  OPTIONAL OUTPUT KEYWORD 	RANGE    = 2 element vector, giving the range (minimum and maxmimum) 		used   NOTES:        If the image array contains more than 10,000 points then SIGRANGE()        uses random indexing of a subset of the points to determine the range        (for speed).    Thus identical calls to SIGRANGE() might not yield        identical results (although they should be very close).  RESTRICTIONS: 	ARRAY must have more than two points.  Fraction must be greater than 0 	and less than 1.  	SIGRANGE was originally part of the SERTS image display package. 	Other routines from this package are available at  	http://sohowww.nascom.nasa.gov/solarsoft/gen/idl/image/  	Note that this version of SIGRANGE does not include the non-standard 	system variables used in the SERTS package.  REVISION HISTORY: 	Version 1, William Thompson, GSFC, 12 May 1993. 		Incorporated into CDS library. 	Version 2, William Thompson, GSFC, 25 May 1993. 		Changed call to HISTOGRAM to be compatible with OpenVMS/ALPHA        Version 3, CDP, RAL, Add RANGE keyword.  16-Apr-96 	Version 4, William Thompson, GSFC, 17 April 1996 		Corrected some problems when range is too high. 	Version 5, 13-Jan-1998, William Thompson, GSFC 		Use random numbers to improve statistics when only using a 		fraction of the array. 	Version 6, 06-Mar-1998, William Thompson, GSFC 		Change default to 0.99  ", "FRACTIONMISSINGRANGEARRAY", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sixlin.html", "sixlin.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sixlin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sixlin.html#sixlin", "sixlin", 'routine in <a href="idlastro/sixlin.html">sixlin.pro</a>', "sixlin.pro", "", "sixlin", " NAME:        SIXLIN  PURPOSE:        Compute linear regression coefficients by six different methods.  EXPLANATION:        Adapted from the FORTRAN program (Rev. 1.1)  supplied by Isobe,        Feigelson, Akritas, and Babu Ap. J. Vol. 364, p. 104 (1990).        Suggested when there is no understanding about the nature of the        scatter about a linear relation, and NOT when the errors in the        variable are calculable.   CALLING SEQUENCE:        SIXLIN, xx, yy, a, siga, b, sigb, [WEIGHT = ]   INPUTS:        XX - vector of X values        YY - vector of Y values, same number of elements as XX   OUTPUTS:        A - Vector of 6 Y intercept coefficients        SIGA - Vector of standard deviations of 6 Y intercepts        B - Vector of 6 slope coefficients        SIGB - Vector of standard deviations of slope coefficients         The output variables are computed using linear regression for each of        the following 6 cases:                (0) Ordinary Least Squares (OLS) Y vs. X (c.f. linfit.pro)                (1) Ordinary Least Squares  X vs. Y                (2) Ordinary Least Squares Bisector                (3) Orthogonal Reduced Major Axis                (4) Reduced Major-Axis                (5) Mean ordinary Least Squares   OPTIONAL INPUT KEYWORD:       WEIGHT -  vector of weights, same number of elements as XX and YY                 For 1 sigma Gausssian errors, the weights are 1/sigma^2 but                 the weight vector can be more general.   Default is no                 weighting.  NOTES:        Isobe et al. make the following recommendations         (1) If the different linear regression methods yield similar results                then quoting OLS(Y|X) is probably the most familiar.         (2) If the linear relation is to be used to predict Y vs. X then                OLS(Y|X) should be used.         (3) If the goal is to determine the functional relationship between                X and Y then the OLS bisector is recommended.   REVISION HISTORY:        Written   Wayne Landsman          February, 1991        Corrected sigma calculations      February, 1992        Converted to IDL V5.0   W. Landsman   September 1997        Added WEIGHT keyword   J. Moustakas   Februrary 2007  ", "weightxxyyasigabsigb", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sixty.html", "sixty.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sixty.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sixty.html#sixty", "sixty", 'routine in <a href="idlastro/sixty.html">sixty.pro</a>', "sixty.pro", "", "sixty", " NAME: 	SIXTY()  PURPOSE: 	Converts a decimal number to sexagesimal.  EXPLANATION: 	Reverse of the TEN() function.   CALLING SEQUENCE: 	X = SIXTY( SCALAR, [ /TrailSign ] )   INPUTS: 	SCALAR -- Decimal quantity.  OUTPUTS: 	Function value returned = real vector of three elements, 	sexagesimal equivalent of input decimal quantity.    Double        precision if the input is double, otherwise floating point. 	By default, a negative number is signified by making the first non-zero 	element of the output vection negative, but this can be modfied with        the /TrailSign keyword.   OPTIONAL INPUT KEYWORD:       /TrailSign - By default, SIXTY() returns a negative sign in the first          nonzero element.   If /TrailSign is set, then SIXTY() will return          always return a negative sign in the first element, even if it is          zero  PROCEDURE: 	Mostly involves checking arguments and setting the sign.   EXAMPLE: 	If x = -0.345d then sixty(x) = [0.0, -20.0, 42.0]                       and sixty(x,/trail) = [-0.0, 20.0, 42.0]  MODIFICATION HISTORY: 	Written by R. S. Hill, STX, 19-OCT-87 	Output changed to single precision.  RSH, STX, 1/26/88 	Accept single element vector   W. Landsman   Sep. 1996 	Converted to IDL V5.0   W. Landsman   September 1997        Added /TrailSign keyword, preserve data type                  B. Stecklum/ W. Landsman   March 2006  ", "Trailsignscalar", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sky.html", "sky.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sky.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sky.html#sky", "sky", 'routine in <a href="idlastro/sky.html">sky.pro</a>', "sky.pro", "", "sky", " NAME:        SKY  PURPOSE:        Determine the sky level in an image  EXPLANATION:        Approximately 10000 uniformly spaced pixels are selected for the        computation.  Adapted from the DAOPHOT routine of the same name.         The sky is computed either by using the procedure mmm.pro (default)        or by sigma clipping (if /MEANBACK is set)   CALLING SEQUENCE:        SKY, image, [ skymode, skysig ,/SILENT, /MEANBACK, /NAN, CIRCLERAD= ]           Keywords available  when MEANBACK is not set (passed to mmm.pro):                    /DEBUG, HIGHBAD=, /INTEGER, MAXITER=. READNOISE=          Keywords available when /MEANBACK is set:                    CLIPSIG=, /DOUBLE, CONVERGE_NUM=, MAXITER=, /VERBOSE  INPUTS:        IMAGE - One or two dimensional array   OPTIONAL OUTPUT ARRAYS:        SKYMODE - Scalar, giving the mode of the sky pixel values of the                array IMAGE, as determined by the procedures MMM or MEANCLIP        SKYSIG -  Scalar, giving standard deviation of sky brightness.   If it                was not possible to derive a mode then SKYSIG is set to -1   INPUT KEYWORD PARAMETERS: 	CIRCLERAD - Use this keyword to have SKY only select pixels within 		specified pixel radius of the center of the image.  If 		CIRCLERAD =1, then the radius is set equal to half the image 		width.   Can only be used with square images.        /MEANBACK - if set, then the background is computed using the 3 sigma              clipped mean (using meanclip.pro) rather than using the mode              computed with mmm.pro.    This keyword is useful for the Poisson              count regime or where contamination is known  to be minimal.        /NAN - This keyword must be set to  ignore NaN values when computing               the sky.        /SILENT - If this keyword is supplied and non-zero, then SKY will not                display the sky value and sigma at the terminal        The _EXTRA facility can is used to pass optional keywords to the programs              that actually perform the sky computation: either mmm.pro              (default) or meanclip.pro (if /MEANBACK) is set.    The following              keywords are available with the mmm.pro (default) setting        HIGHBAD - scalar value of the (lowest)  bad  pixel level (e.g. cosmic                 rays or saturated pixels) If not supplied, then there is                 assumed to be no high bad pixels.        READNOISE - Scalar giving the read noise (or minimum noise for any                 pixel).     Normally, MMM determines the (robust) median by                 averaging the central 20% of the sky values.     In some cases                 where the noise is low, and pixel values are quantized a                 larger fraction may be needed.    By supplying the optional                 read noise parameter, MMM is better able to adjust the                 fraction of pixels used to determine the median.        /INTEGER - Set this keyword if the  input SKY image only contains                 discrete integer values.    This keyword is only needed if the                 SKY image is of type float or double precision, but contains                 only discrete integer values.       If the /MEANBACK keyword is set then the following keywords are available         CLIPSIG:  Number of sigma at which to clip.  Default=3 	MAXITER:  Ceiling on number of clipping iterations.  Default=5        CONVERGE_NUM:  If the proportion of rejected pixels is less            than this fraction, the iterations stop.  Default=0.02, i.e.,            iteration stops if fewer than 2% of pixels excluded.        /DOUBLE - if set then perform all computations in double precision.                  Otherwise double precision is used only if the input                  data is double   PROCEDURE:        A grid of points, not exceeding 10000 in number, is extracted        from the srray.  The mode of these pixel values is determined        by the procedure mmm.pro or meanclip.pro.   In a 2-d array the grid is        staggered in each row to avoid emphasizing possible bad columns   PROCEDURE CALLS:        MEANCLIP, MMM, DIST_CIRCLE  REVISION HISTORY:        Written, W. Landsman   STX Co.            September, 1987        Changed INDGEN to LINDGEN                 January, 1994        Fixed display of # of points used         March, 1994        Stagger beginning pixel in each row, added NSKY, READNOISE, HIGHBAD           W. Landsman        June 2004       Adjustments for unbiased sampling  W. Landsman June 2004       Added /NAN keyword, put back CIRCLERAD keyword W. Landsman July 2004       Added MEANBACK keyword, _EXTRA kewyord ,preserve data type in              calculations       W. Landsman November 2005       Fix problem for very large images by requiring at least 2 pixels to        be sampled per row.    March 2007    W. Landsman       Avoid possible out of bounds if /NAN set   W. Landsman   Jan 2008       Use  TOTAL(/INTEGER)      June 2009  ", "SILENTCIRCLERAD_EXTRANANMEANBACKimageskymodeskysig", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/skyadj_cube.html", "skyadj_cube.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "skyadj_cube.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/skyadj_cube.html#EXTRAP", "EXTRAP", 'routine in <a href="idlastro/skyadj_cube.html">skyadj_cube.pro</a>', "skyadj_cube.pro", "", "EXTRAP", " NAME:         SKYADJ_CUBE   PURPOSE:        Sky adjust the planes of a datacube.   EXPLANATION:        When removing cosmic rays from a set of images, it is desirable that        all images have the same sky level.    This procedure (called by        CR_REJECT) removes the sky from each image in a data cube.   CALLING SEQUENCE:        SKYADJ_CUBE,Datacube,Skyvals,Totsky   MODIFIED ARGUMENT:        Datacube:  3-D array with one image of same field in each plane.                   Returned with sky in each plane adjusted to zero.   OUTPUT ARGUMENTS:        Skyvals:   Array of sky values used on each plane of datacube.                   For a scalar sky, this parameter is a vector                   containing the sky value for each image plane.  For a                   vector sky, this parameter is a 2-D array where each                   line corresponds to one image plane.   INPUT KEYWORD PARAMETERS:         REGION   - [X0,X1,Y0,Y1] to restrict area used for computation                   of sky.  Default is 0.1*Xdim, 0.9*Xdim, 0.1*Ydim,                   0.9*Ydim.  If INPUT_MASK is specified, the two                   specs are combined, i.e., the intersection of the                   areas is used.        VERBOSE  - Flag.  If set, print information on skyvals.        NOEDIT   - Flag.  If set, return sky values without changing                   datacube.        XMEDSKY  - Flag.  If set, return vector sky as a function of X.        SELECT   - Array of subscripts of planes of the cube to process.                   (Default=all)        EXTRAPR  - Applies only in XMEDSKY mode.                   Subregion to use for polynomial extrapolation of sky                   vector into portions excluded by REGION parameter.                   (Default=first and last 10% of pixels; set to zero                   to defeat extrapolation)        EDEGREE  - Applies only in XMEDSKY mode.                   Degree of polynomial for extrapolation (Default=1)        INPUT_MASK - Cube of flags corresponding to data cube.  If used,                   the sky computation is restricted to the smallest                   contiguous rectangle containing all the pixels flagged                   valid (with 1 rather than 0).   PROCEDURE:        Uses astronomy library  sky  routine for scalar sky and        column-by-column median for vector sky.   MODIFICATION HISTORY:    10 Jul. 1997   - Written.  R. S. Hill, Hughes STX    20 Oct. 1997   - 1-D sky option.  RSH     7 Aug. 1998   - SELECT keyword.  RSH     6 Oct. 1998   - Extrapolation.  RSH     7 Oct. 1998   - INPUT_MASK added.  RSH    21 Oct. 1998   - Fallback to 3-sigma clipped mean if mode fails.  RSH    22 Mar. 2000   - Combine mask with region rather having mask                     override region.  Improve comments.  RSH    16 June 2000   - On_error and message used.  Square brackets for array                     subscripts.  EXTRAP included in this file.                     WBL & RSH, 16 June 2000   NAME:        EXTRAP   PURPOSE:        This procedure fills in the ends of a one-dimensional array from        interior portions using polynomial extrapolation.   CATEGORY:        Image processing   CALLING SEQUENCE:        EXTRAP, Deg, X, Y, Y2   INPUT POSITIONAL PARAMETERS:        Deg:   Degree of polynomial        X:     Independent variable        Y:     Dependent variable   KEYWORD PARAMETERS:        LIMS:  3-element array giving range of X to be used to fit               polynomial and starting point where extrapolation is               to be substituted; if not given, you click on a plot;               order of elements is [xmin, xmax, xstart]; if LIMS is               specified, then program is silent   OUTPUT POSITIONAL PARAMETERS:        Y2:    Dependent variable with extrapolated portion filled in   SIDE EFFECTS:      May pop a window for selecting range.   MODIFICATION HISTORY:      Written by RSH, RITSS, 14 Aug 98      Spiffed up for library.  RSH, 6 Oct 98  ", "LIMSDegXYY2", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/skyadj_cube.html#SKYADJ_CUBE", "SKYADJ_CUBE", 'routine in <a href="idlastro/skyadj_cube.html">skyadj_cube.pro</a>', "skyadj_cube.pro", "", "SKYADJ_CUBE", "", "XMEDSKYREGIONVERBOSENOEDITSELECTEXTRAPREDEGREEINPUT_MASKDatacubeSkyvalsTotsky", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/sort_nd.html", "sort_nd.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "sort_nd.pro", "", "", " NAME:        SORT_ND   PURPOSE:         Efficiently perform an N-dimensional sort along any dimension        of an array.   CALLING SEQUENCE:         inds=sort_nd(array,dimension)   INPUTS:         array: An array of at least 2 dimensions to sort.         dimension: The dimension along which to sort, starting at 1           (1:rows, 2:columns, ...).   OUTPUTS:         inds: An index array with the same dimensions as the input           array, containing the (1D) sorted indices.  Can be used           directly to index the arary (ala SORT).   EXAMPLE:         a=randomu(sd,5,4,3,2)        sorted=a[sort_nd(a,2)]   SEE ALSO:         HISTOGRAM   MODIFICATION HISTORY:         Tue Aug 22 15:51:12 2006, J.D. Smith &lt;jdsmith@as.arizona.edu&gt;     Written, based on discussion on c.l.i-p, 08/2006.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/sort_nd.html#sort_nd", "sort_nd", 'routine in <a href="coyote/sort_nd.html">sort_nd.pro</a>', "sort_nd.pro", "", "sort_nd", "", "arraydimension", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/spec_dir.html", "spec_dir.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "spec_dir.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/spec_dir.html#spec_dir", "spec_dir", 'routine in <a href="idlastro/spec_dir.html">spec_dir.pro</a>', "spec_dir.pro", "", "spec_dir", " NAME:      SPEC_DIR()  PURPOSE:      Complete a file specification by appending the default disk or directory   CALLING SEQUENCE:      File_spec = SPEC_DIR( filename, [ extension ] )  INPUT:      filename - character string giving partial specification of a file                name.  Examples for different operating systems include the                        following:                Unix: 'pro/test.dat', '$IDL_HOME/test','~/subpro'                MacOS: ':Programs:test'                Windows: '\pro\test.dat','d:\pro\test'   OPTIONAL INPUT:      exten - string giving a default file name extension to be used if              filename does not contain one.  Do not include the period.   OUTPUT:      File_spec - Complete file specification using default disk or                directory when necessary.   EXAMPLE:       IDL&gt; a = spec_dir('test','dat')        is equivalent to the commands       IDL&gt; cd, current=cdir       IDL&gt; a = cdir + delim + 'test.dat'        where delim is the OS-dependent separator  METHOD:       SPEC_DIR() decomposes the file name using FDECOMP, and appends the       default directory (obtained from the FILE_EXPAND_PATH) if necessary.        SPEC_DIR() does not check whether the constructed file name actually       exists.  PROCEDURES CALLED:       FDECOMP, EXPAND_TILDE()  REVISION HISTORY:       Written W. Landsman         STX         July, 1987       Expand Unix tilde if necessary              W. Landsman  September 1997       Assume since V5.5, use FILE_EXPAND_PATH, remove VMS support               W. Landsman   September 2006  ", "filenameextension", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jhuapl/sphdist.html", "sphdist.pro", '.pro file in <a href="idlastro/jhuapl/dir-overview.html">idlastro/jhuapl/ directory</a>', "sphdist.pro", "", "", " NAME:        SPHDIST  PURPOSE:        Angular distance between points on a sphere.  CALLING SEQUENCE:        d = sphdist(long1, lat1, long2, lat2)  INPUTS:        long1 = longitude of point 1, scalar or vector        lat1 = latitude of point 1, scalar or vector        long2 = longitude of point 2, scalar or vector        lat2 = latitude of point 2, scalar or vector   OPTIONAL KEYWORD INPUT PARAMETERS:        /DEGREES - means angles are in degrees, else radians.  OUTPUTS:        d = angular distance between points (in radians unless /DEGREES            is set.)  PROCEDURES CALLED:        RECPOL, POLREC  NOTES:        (1) The procedure GCIRC is similar to SPHDIST(), but may be more            suitable for astronomical applications.         (2) If long1,lat1 are scalars, and long2,lat2 are vectors, then            SPHDIST returns a vector giving the distance of each element of            long2,lat2 to long1,lat1.   Similarly, if long1,lat1 are vectors,            and long2, lat2 are scalars, then SPHDIST returns a vector giving            giving the distance of each element of long1,lat1 to to long2,lat2.            If both long1,lat1 and long2,lat2 are vectors then SPHDIST returns            vector giving the distance of each element of long1,lat1 to the            corresponding element of long2, lat2.   If the input vectors are            not of equal length, then excess elements of the longer ones will            be ignored.  MODIFICATION HISTORY:        R. Sterner, 5 Feb, 1991        R. Sterner, 26 Feb, 1991 --- Renamed from sphere_dist.pro   Copyright (C) 1991, Johns Hopkins University/Applied Physics Laboratory  This software may be used, copied, or redistributed as long as it is not  sold and this copyright notice is reproduced on each copy made.  This  routine is provided as is without any express or implied warranties  whatsoever.  Other limitations apply as described in the file disclaimer.txt. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/sphdist.html#sphdist", "sphdist", 'routine in <a href="idlastro/jhuapl/sphdist.html">sphdist.pro</a>', "sphdist.pro", "", "sphdist", "", "helpdegreeslong1lat1long2lat2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/srcor.html", "srcor.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "srcor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/srcor.html#srcor", "srcor", 'routine in <a href="idlastro/srcor.html">srcor.pro</a>', "srcor.pro", "", "srcor", " NAME:        SRCOR  PURPOSE:        Correlate the source positions found on two lists.   EXPLANATION:        Source matching is done by finding sources within a specified radius.        If you have position errors available and wish to match by significance        level, then try match_xy.pro in the TARA library       (http://www.astro.psu.edu/xray/docs/TARA/)   CALLING SEQUENCE:        srcor,x1in,ylin,x2in,y2in,dcr,ind1,ind2,                          [MAGNITUDE=,SPHERICAL=,COUNT=,/SILENT]  INPUTS:        x1in,y1in - First set of x and y coordinates.  The program                    marches through this list element by element,                    looking in list 2 for the closest match.  So, the program                    will run faster if this is the shorter of the two lists.                    Unless you use the option or magnitude keyword, there is                    nothing to guarantee unique matches.        x2in,y2in - Second set of x and y coordinates.  This list is                    searched in its entirety every time one element of list 1                    is processed.        dcr - Critical radius outside which correlations are rejected;              but see 'option' below.  OPTIONAL KEYWORD INPUT:        option - Changes behavior of program and description of output                 lists slightly, as follows:        OPTION=0 or left out              Same as older versions of SRCOR.  The closest match from list2              is found for each element of list 1, but if the distance is              greater than DCR, the match is thrown out.  Thus the index              of that element within list 1 will not appear in the IND1 output              array.        OPTION=1              Forces the output mapping to be one-to-one.  OPTION=0 results,              in general, in a many-to-one mapping from list 1 to list 2.              Under OPTION=1, a further processing step is performed to              keep only the minimum-distance match, whenever an entry from              list 1 appears more than once in the initial mapping.        OPTION=2              Same as OPTION=1, except the critical distance parameter DCR              is ignored.  I.e., the closest object is retrieved from list 2              for each object in list 1 WITHOUT a critical-radius criterion,              then the clean-up of duplicates is done as under OPTION=1.        magnitude              An array of stellar magnitudes corresponding to x1in and y1in.              If this is supplied, then the brightest star from list 1              within the selected distance of the star in list 2 is taken.              The option keyword is ignored in this case.        spherical              If SPHERICAL=1, it is assumed that the input arrays are in              celestial coordinates (RA and Dec), with x1in and x2in in              decimal hours and y1in and y2in in decimal degrees.  If              SPHERICAL=2 then it is assumed that the input arrays are in              longitude and latitude with x1in,x2in,y1in,y2in in decimal              degrees.  In both cases, the critial radius dcr is in              *arcseconds*.  Calculations of spherical distances are made              with the gcirc program.  OUTPUTS:        ind1 - index of matched stars in first list, set to -1 if no matches               found        ind2 - index of matched stars in second list  OPTIONAL OUTPUT KEYWORD:        Count - integer giving number of matches returned  PROCEDURES USED:        GCIRC, REMOVE  REVISON HISTORY:        Adapted from UIT procedure  J.Wm.Parker, SwRI 29 July 1997        Improve speed for spherical searches, added /SILENT keyword                                W. Landsman  Mar 2009        Avoid error when no matches found with /SPHERICAL  O. Trottier June 2009        Added output Count keyword     W.L   June 2009        Adjust right ascension for cosine angle W.L. December 2009        Return as soon as no matches found W.L.  December 2009        Use some V6.0 notation  W.L.   February 2011        Fix problem when /Spherical and Option =2 set, and sources separated           by more han 180 degrees.   W.L.  March 2011   ", "optionmagnitudesphericalsilentcountx1iny1inx2iny2indcrind1ind2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/st_diskread.html", "st_diskread.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "st_diskread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/st_diskread.html#st_diskread", "st_diskread", 'routine in <a href="idlastro/st_diskread.html">st_diskread.pro</a>', "st_diskread.pro", "", "st_diskread", " NAME:        ST_DISKREAD   PURPOSE:        Read HST FITS formatted disk files and reconstruct GEIS (STSDAS) files.   CALLING SEQUENCE:        ST_DISKREAD, infiles   INPUT PARAMETER:        infiles - (scalar string) input disk files to be converted into GEIS                        files. Wildcards are allowed.  FILES CREATED:     GEIS files:          The GEIS file is reconstructed from each input Fits file. The        output filename is composed from the rootname of the observation        and the appropriate GEIS file extension (i.e. d0h/d, c0h/d, etc.).    Tables:          If input file is a fits table, the output is an SDAS table.   EXAMPLES:        a) Reconstruct the GEIS file for disk FITS file z29i020ct*.fits.                st_diskread,'z29i020ct*.fits'   PROCEDURES CALLED:        ST_DISK_DATA, ST_DISK_TABLE, ST_DISK_GEIS        FTSIZE,SXPAR(),TAB_CREATE, TAB_WRITE  HISTORY:        10/17/94        JKF/ACC - taken from ST_TAPEREAD.        11/02/94        JKF/ACC - added /block on open statement to                                  handle files with 512 bytes/record.        12/6/95         JKF/ACC - include new jitter files...replaces                                                st_read_jitter.pro.        03/5/96         W. Landsman, change FORRD to READU, remove Version 1                                type codes, add message facility        05/20/00        W. Landsman, remove obsolete !ERR calls, new calling                                sequence to FTINFO        09/2006        W. Landsman, remove obsolete keywords to OPEN  ****************************************************************************        Converted to IDL V5.0   W. Landsman   September 1997  ", "DUMPinfiles", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/st_diskread.html#st_disk_data", "st_disk_data", 'routine in <a href="idlastro/st_diskread.html">st_diskread.pro</a>', "st_diskread.pro", "", "st_disk_data", " NAME:        ST_DISK_DATA   PURPOSE:        Routine to read next header and data array from an HST FITS disk file.        This is a subroutine of ST_DISKREAD and not intended for stand alone        use.  CALLING SEQUENCE:        st_disk_data,unit,h,data,name,gcount,dimen,opsize,nbytes,itype  INPUTS:        unit - logical unit number.  OUTPUTS:        h - FITS header        data - data array        name - file name        gcount - number of groups        dimen - data dimensions        opsize - parameter blocks size        nbytes - bytes per data group        itype - idl data type   Notes:        This is not a standalone program. Use ST_DISKREAD.   PROCEDURES CALLED:        GETTOK(), SXPAR()  HISTORY:        10/17/94        JKF/ACC         - taken from ST_TAPE_DATA.  ***************************************************************************  ", "unithdatanamegcountdimenopsizenbytesitype", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/st_diskread.html#st_disk_table", "st_disk_table", 'routine in <a href="idlastro/st_diskread.html">st_diskread.pro</a>', "st_diskread.pro", "", "st_disk_table", "NAME:        ST_DISK_TABLE   PURPOSE:        Routine to read FITS table from an ST fits on disk.        This is a subroutine of st_diskread and not intended for stand alone        use.   CALLING SEQUENCE:        st_disk_table,unit,h,data   INPUTS PARAMETER:        unit - disk unit number   OUTPUTS:        h - FITS header        data - table array   NOTES:        This is not a standalone program. Use ST_DISKREAD.   HISTORY:        10/17/94        JKF/ACC - taken from ST_TAPE_TABLE.        12/7/95         JKF/ACC - handle tables for jitter data.  ****************************************************************************  ", "unithdatatable_available", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/st_diskread.html#st_disk_geis", "st_disk_geis", 'routine in <a href="idlastro/st_diskread.html">st_diskread.pro</a>', "st_diskread.pro", "", "st_disk_geis", " NAME:        ST_DISK_GEIS   PURPOSE:         Routine to construct GEIS files from ST FITS disk files.   CALLING SEQUENCE:        ST_DISK_GEIS, h, data, htab, tab, table_available, name, gcount,                dimen,opsize, nbytes_g,itype   INPUT PARAMETERS:        h - header for data        data - data array        htab - header for the table        tab - fits table        table_available - logical variable (1 if table was found)        name - data set name        gcount - number of groups        dimen - data dimensions        opsize - original parameter block size        nbytes_g - number of bytes per group        itype - idl integer data type value for the output data groups   SIDE EFFECTS:         GEIS file updated with group parameters in unit 1 (already open)        and header file created   NOTES:        This is not a standalone program. Use st_diskread.         During the creation of the header, this routine performs the        following steps:        1) create a basic fits header (7 keywords)        2) adjust basic fits header for the number of axis present (i.e. &gt;1)        3) adjust basic fits header for parameter keywords (i.e. ptype,etc)        4) from this point, sequentially copies keywords until it hits one of                the following keywords 'INSTRUME','INSTRUID', or 'CONFG'.        5) append 'END' statement   PROCEDURES CALLED:        FTSIZE, SXADDPAR, SXHWRITE  HISTORY:        10/17/94        JKF/ACC         - taken from ST_DISK_GEIS  ****************************************************************************  ", "hdatahtabtabtable_availablenamegcountdimenopsizenbytes_gitype", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/starast.html", "starast.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "starast.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/starast.html#starast", "starast", 'routine in <a href="idlastro/starast.html">starast.pro</a>', "starast.pro", "", "starast", " NAME:        STARAST  PURPOSE:        Compute astrometric solution using positions of 2 or 3 reference stars  EXPLANATION:        Computes an exact astrometric solution using the positions and        coordinates from 2 or 3 reference stars and assuming a tangent        (gnomonic) projection.   If 2 stars are used, then        the X and Y plate scales are assumed to be identical, and the        axis are assumed to be orthogonal.   Use of three stars will        allow a unique determination of each element of the CD matrix.   CALLING SEQUENCE:        starast, ra, dec, x, y, cd, [/Righthanded, HDR = h, PROJECTION=]   INPUTS:        RA - 2 or 3 element vector containing the Right Ascension in DEGREES        DEC- 2 or 3 element vector containing the Declination in DEGREES        X -  2 or 3 element vector giving the X position of reference stars        Y -  2 or 3 element vector giving the Y position of reference stars  OUTPUTS:        CD - CD (Coordinate Description) matrix (DEGREES/PIXEL) determined                from stellar positions and coordinates.  OPTIONAL INPUT KEYWORD:        /RightHanded - If only 2 stars are supplied, then there is an ambiguity                in the orientation of the coordinate system.   By default,                STARAST assumes the astronomical standard left-handed system                (R.A. increase to the left).   If /Right is set then a                righthanded coordinate is assumed.  This keyword has no effect                if 3 star positions are supplied.         PROJECTION - Either a 3 letter scalar string giving the projection                type (e.g. 'TAN' or 'SIN') or an integer 1 - 25 specifying the                projection as given in the WCSSPH2XY procedure.   If not                specified then a tangent projection is computed.  OPTIONAL INPUT-OUTPUT KEYWORD:         HDR - If a FITS header string array is supplied, then an astrometry               solution is added to the header using the CD matrix and star 0               as the reference pixel (see example).   Equinox 2000 is assumed.  EXAMPLE:         To use STARAST to add astrometry to a FITS header H;          IDL&gt; starast,ra,dec,x,y,cd       ;Determine CD matrix         IDL&gt; crval = [ra[0],dec[0]]      ;Use Star 0 as reference star         IDL&gt; crpix = [x[0],y[0]] +1      ;FITS is offset 1 pixel from IDL         IDL&gt; putast,H,cd,crpix,crval     ;Add parameters to header          This is equivalent to the following command:         IDL&gt; STARAST,ra,dec,x,y,hdr=h   METHOD:        The CD parameters are determined by solving the linear set of equations        relating position to local coordinates (l,m)         For highest accuracy the first star position should be the one closest        to the reference pixel.  REVISION HISTORY:        Written, W. Landsman             January 1988        Converted to IDL V5.0   W. Landsman   September 1997        Added /RightHanded and HDR keywords   W. Landsman   September 2000        Write CTYPE values into header   W. Landsman/A. Surkov  December 2002        CD matrix was mistakenly transpose in 3 star solution        Added projection keyword    W. Landsman   September 2003        Test for singular matrix W. Landsman  August 2011  ", "righthandedhdrprojectionradecxycd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/stationplot.html", "stationplot.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "stationplot.pro", "", "", " NAME:        STATIONPLOT   PURPOSE:         This is routine for drawing station plots on a map or other display.        Normally, this routine is used in conjunction with WINDBARB.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Graphics.   CALLING SEQUENCE:         StationPlot, x, y   REQUIRED INPUTS:         x:            The X location of the center of the station plot, expressed in data coordinates.         y:            The Y location of the center of the station plot, expressed in data coordinates.   KEYWORDS:        COLOR:         The name of the color to draw the station plot in. May be a vector                      the same length as X. Colors are those available in cgColor.        RADIUS:        The radius of the station plot circle in normalized coordinates.   RESTRICTIONS:         Requires cgColor from the Coyote Library:             http://www.idlcoyote.com/programs/cgColor.pro   EXAMPLE:     seed = -3L    lon = Randomu(seed, 20) * 360 - 180    lat = Randomu(seed, 20) * 180 - 90    speed = Randomu(seed, 20) * 100    direction = Randomu(seed, 20) * 180 + 90    Erase, cgColor('Ivory', !P.Background)    Map_Set, /Cylindrical,Position=[0.1, 0.1, 0.9, 0.9], Color=cgColor('Steel Blue'), /NoErase    Map_Grid, Color=cgColor('Charcoal', !D.Table_Size-2)    Map_Continents, Color=cgColor('Sea Green', !D.Table_Size-3)    StationPlot, lon, lat, Color='Indian Red'   MODIFICATION HISTORY:         Written by:  David W. Fanning, 20 May 2003, based on TVCircle from the        NASA Astonomy Library.        Added THICK keyword. 23 February 2005. DWF.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/stationplot.html#StationPlot", "StationPlot", 'routine in <a href="coyote/stationplot.html">stationplot.pro</a>', "stationplot.pro", "", "StationPlot", "", "RadiusColorThickxcyc", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/store_array.html", "store_array.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "store_array.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/store_array.html#STORE_ARRAY", "STORE_ARRAY", 'routine in <a href="idlastro/store_array.html">store_array.pro</a>', "store_array.pro", "", "STORE_ARRAY", " NAME: 	STORE_ARRAY  PURPOSE: 	Insert array INSERT into the array DESTINATION  EXPLANATION: 	The dimensions of the DESTINATION array are adjusted to accommodate 	the inserted array.  CATEGOBY: 	Utility  CALLING SEQUENCE: 	STORE_ARRAY, DESTINATION, INSERT, INDEX  INPUT: 	DESTINATION	= Array to be expanded. 	INSERT		= Array to insert into DESTINATION. 	INDEX		= Index of the final dimension of DESTINATION to insert 			  INSERT into.  OUTPUTS: 	DESTINATION	= Expanded output array.  If both input arrays have the 			  same number of dimensions, then the DESTINATION will 			  be replaced with INSERT.  RESTRICTIONS: 	DESTINATION and INSERT have to be either both of type string or both of 	numerical types.  	INSERT must not have more dimensions than DESTINATION.   MODIFICATION HISTOBY: 	William Thompson, Feb. 1992, from BOOST_ARRAY by D. Zarro and P. Hick. 	Converted to IDL V5.0   W. Landsman   September 1997  ", "DESTINATIONINSERTINDEX", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/str_index.html", "str_index.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "str_index.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/str_index.html#STR_INDEX", "STR_INDEX", 'routine in <a href="idlastro/str_index.html">str_index.pro</a>', "str_index.pro", "", "STR_INDEX", " NAME:        STR_INDEX()   PURPOSE:        Get indices of a substring (SUBSTR) in string.   EXPLANATION:        The IDL intrinsic function STRPOS returns only the index of the first        occurrence of a substring. This routine calls itself recursively to get        indices of the remaining occurrences.   CALLING SEQUENCE:        result= STR_INDEX(str, substr [, offset])   INPUTS:        STR    -- The string in which the substring is searched for        SUBSTR -- The substring to be searched for within STR   OPTIONAL INPUTS:        OFFSET -- The character position at which the search is begun. If                  omitted or being negative, the search begins at the first                  character (character position 0).   OUTPUTS:        RESULT -- Integer scalar or vector containing the indices of SUBSTR                  within STR. If no substring is found, it is -1.   CALLS:        DELVARX   COMMON BLOCKS:        STR_INDEX -- internal common block. The variable save in the block is                     deleted upon final exit of this routine.   CATEGORY:        Utility, string   MODIFICATION HISTORY:        Written January 3, 1995, Liyun Wang, GSFC/ARC        Converted to IDL V5.0   W. Landsman   September 1997        Use size(/TNAME) instead of DATATYPE()   W. Landsman   October 2001   ", "strsubstroffset", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/public/str_replace.html", "str_replace.pro", '.pro file in <a href="coyote/public/dir-overview.html">coyote/public/ directory</a>', "str_replace.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/public/str_replace.html#str_replace", "str_replace", 'routine in <a href="coyote/public/str_replace.html">str_replace.pro</a>', "str_replace.pro", "", "str_replace", " Handle string replacment with regular expressions.   @examples The following example demonstrate basic operations of STR_REPLACE:&lt;pre&gt;  &lt;b&gt;IDL&gt;&lt;/b&gt; print, str_replace('Mike was here', 'was', 'was not')  Mike was not here  &lt;b&gt;IDL&gt;&lt;/b&gt; print, str_replace('Mike was here', '([^ ]*) ([^ ]*)', '$2 $1')  was Mike here  &lt;b&gt;IDL&gt;&lt;/b&gt; print, str_replace('MikeGeorgeHenryMikeBill', 'Mike([A-Z][a-z]*)', ' Mike +strupcase( $1 )', /evaluate, /global)  MikeGEORGEHenryMikeBILL  &lt;b&gt;IDL&gt;&lt;/b&gt; print, str_replace('Mike5', 'Mike([0-9]+)', 'strtrim(fix($1) * 2, 2)', /evaluate)  10  &lt;b&gt;IDL&gt;&lt;/b&gt; str = '187438273587285'  &lt;b&gt;IDL&gt;&lt;/b&gt; for i = 0, strlen(str)/3 - 1 do str = str_replace(str, '^[+-]?([[:digit:]]+)([[:digit:]]{3})', '$1,$2', /global)  &lt;b&gt;IDL&gt;&lt;/b&gt; print, str  187,438,273,587,285&lt;/pre&gt;  @returns string  @param str {in}{required}{type=string} a string to search for expressions             and replace them  @param pattern {in}{required}{type=string} a regular expression possibly         using subexpressions; see IDL's online help for STREGEX for more         help on regular expressions  @param replacement {in}{required}{type=string} the string to replace matches         of the  pattern ; can use $1, $2, etc. to refer to subexpressions         in  pattern   @keyword evaluate {in}{optional}{type=boolean} set to evaluate the            replacement  as a IDL expression instead of just a string.  @keyword fold_case {in}{optional}{type=boolean} set to make a case           insensitive match with  pattern   @keyword global {in}{optional}{type=boolean} set to replace all expressions           that match  @keyword start {out}{optional}{type=integral}{private} where to start looking  @author Michael Galloy  @copyright RSI, 2002  ", "evaluatefold_caseglobalstartstrpatternreplacement", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/str_size.html", "str_size.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "str_size.pro", "", "", " NAME:   STR_SIZE   PURPOSE:    The purpose of this function is to return the proper   character size to make a specified string a specifed   width in a window. The width is specified in normalized   coordinates. The function is extremely useful for sizing   strings and labels in resizeable graphics windows.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:    Graphics Programs, Widgets.   CALLING SEQUENCE:    thisCharSize = STR_SIZE(thisSting, targetWidth)   INPUTS:    thisString:  This is the string that you want to make a specifed      target size or width.   OPTIONAL INPUTS:    targetWidth:  This is the target width of the string in normalized      coordinates in the current graphics window. The character      size of the string (returned as thisCharSize) will be      calculated to get the string width as close as possible to      the target width. The default is 0.25.   KEYWORD PARAMETERS:    INITSIZE:  This is the initial size of the string. Default is 1.0.    STEP:   This is the amount the string size will change in each step      of the interative process of calculating the string size.      The default value is 0.05.    XPOS:   X position of the output test string. This can be      used on the Postscript device, where no pixmap windows are      available and where therefore the test strings would appear on      the printable area. Default is 0.5 on most devices. If !D.NAME      is PS, the default is 2.0 to draw the test string out of the      drawable window area.    YPOS:   Y position of the output test string. This can be      used on the Postscript device, where no pixmap windows are      available and where therefore the test strings would appear on      the printable area. Default is 0.5 on most devices. If !D.NAME      is PS, the default is 2.0 to draw the test string out of the      drawable window area.   OUTPUTS:    thisCharSize:  This is the size the specified string should be set      to if you want to produce output of the specified target      width. The value is in standard character size units where      1.0 is the standard character size.   EXAMPLE:    To make the string  Happy Holidays  take up 30% of the width of   the current graphics window, type this:        XYOUTS, 0.5, 0.5, ALIGN=0.5,  Happy Holidays , $         CHARSIZE=STR_SIZE( Happy Holidays , 0.3)   MODIFICATION HISTORY:    Written by: David Fanning, 17 DEC 96.   Added a scaling factor to take into account the aspect ratio      of the window in determing the character size. 28 Oct 97. DWF   Added check to be sure hardware fonts are not selected. 29 April 2000. DWF.   Added a pixmap to get proper scaling in skinny windows. 16 May 2000. DWF.   Forgot I can't do pixmaps in all devices. :-( Fixed. 7 Aug 2000. DWF.   Added support of PostScript at behest of Benjamin Hornberger. 11 November 2004. DWF.   Cleaned up the code a bit. 28 Feb 2011. DWF.   Fixed non-square window algorithm to reflect my original intentions. 10 June 2011.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/str_size.html#STR_SIZE", "STR_SIZE", 'routine in <a href="idlastro/coyote/str_size.html">str_size.pro</a>', "str_size.pro", "", "STR_SIZE", "", "INITSIZESTEPXPOSYPOStheStringtargetWidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/str_size.html", "str_size.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "str_size.pro", "", "", " NAME:   STR_SIZE   PURPOSE:    The purpose of this function is to return the proper   character size to make a specified string a specifed   width in a window. The width is specified in normalized   coordinates. The function is extremely useful for sizing   strings and labels in resizeable graphics windows.   AUTHOR:     FANNING SOFTWARE CONSULTING    David Fanning, Ph.D.    1645 Sheely Drive    Fort Collins, CO 80526 USA    Phone: 970-221-0438    E-mail: david@idlcoyote.com    Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:    Graphics Programs, Widgets.   CALLING SEQUENCE:    thisCharSize = STR_SIZE(thisSting, targetWidth)   INPUTS:    thisString:  This is the string that you want to make a specifed      target size or width.   OPTIONAL INPUTS:    targetWidth:  This is the target width of the string in normalized      coordinates in the current graphics window. The character      size of the string (returned as thisCharSize) will be      calculated to get the string width as close as possible to      the target width. The default is 0.25.   KEYWORD PARAMETERS:    INITSIZE:  This is the initial size of the string. Default is 1.0.    STEP:   This is the amount the string size will change in each step      of the interative process of calculating the string size.      The default value is 0.05.    XPOS:   X position of the output test string. This can be      used on the Postscript device, where no pixmap windows are      available and where therefore the test strings would appear on      the printable area. Default is 0.5 on most devices. If !D.NAME      is PS, the default is 2.0 to draw the test string out of the      drawable window area.    YPOS:   Y position of the output test string. This can be      used on the Postscript device, where no pixmap windows are      available and where therefore the test strings would appear on      the printable area. Default is 0.5 on most devices. If !D.NAME      is PS, the default is 2.0 to draw the test string out of the      drawable window area.   OUTPUTS:    thisCharSize:  This is the size the specified string should be set      to if you want to produce output of the specified target      width. The value is in standard character size units where      1.0 is the standard character size.   EXAMPLE:    To make the string  Happy Holidays  take up 30% of the width of   the current graphics window, type this:        XYOUTS, 0.5, 0.5, ALIGN=0.5,  Happy Holidays , $         CHARSIZE=STR_SIZE( Happy Holidays , 0.3)   MODIFICATION HISTORY:    Written by: David Fanning, 17 DEC 96.   Added a scaling factor to take into account the aspect ratio      of the window in determing the character size. 28 Oct 97. DWF   Added check to be sure hardware fonts are not selected. 29 April 2000. DWF.   Added a pixmap to get proper scaling in skinny windows. 16 May 2000. DWF.   Forgot I can't do pixmaps in all devices. :-( Fixed. 7 Aug 2000. DWF.   Added support of PostScript at behest of Benjamin Hornberger. 11 November 2004. DWF.   Cleaned up the code a bit. 28 Feb 2011. DWF.   Fixed non-square window algorithm to reflect my original intentions. 10 June 2011.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/str_size.html#STR_SIZE", "STR_SIZE", 'routine in <a href="coyote/str_size.html">str_size.pro</a>', "str_size.pro", "", "STR_SIZE", "", "INITSIZESTEPXPOSYPOStheStringtargetWidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/strcompress2.html", "strcompress2.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "strcompress2.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/strcompress2.html#strcompress2", "strcompress2", 'routine in <a href="idlastro/strcompress2.html">strcompress2.pro</a>', "strcompress2.pro", "", "strcompress2", " NAME: 	STRCOMPRESS2  PURPOSE: 	Remove blanks around specified characters in a string  CALLING SEQUENCE 	newstring = strcompress2( st, chars)  INPUTS:        st - any scalar string       chars - scalar  or vector string specifing which characters around which              blanks should be removed.    For example, if chars=['=','-','+']               then spaces around the three characters  =', '-', and '+' will              be removed.  OUTPUTS:        newstring - input string with spaces removed around the specified         characters.  EXAMPLE:        The Vizier constraint string (see queryvizier.pro) does not allow        blanks around the operators '=','&lt;', or '&gt;'.     But we do not want        to remove blanks around names (e.g. 'NGC 5342'):         IDL&gt; st = 'name = NGC 5342, v&lt; 23'        IDL&gt; print,strcompress2(st, ['=','&lt;','&gt;'])             name=NGC 5342, v&lt;23  MODIFICATION HISTORY: 	Written by W.Landsman                   July 2008  ", "strchars", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/strn.html", "strn.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "strn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/strn.html#strn", "strn", 'routine in <a href="idlastro/strn.html">strn.pro</a>', "strn.pro", "", "strn", " NAME: 	STRN  PURPOSE: 	Convert a number to a string and remove padded blanks.  EXPLANATION: 	The main and original purpose of this procedure is to convert a number 	to an unpadded string (i.e. with no blanks around it.)  However, it 	has been expanded to be a multi-purpose formatting tool.  You may 	specify a length for the output string; the returned string is either 	set to that length or padded to be that length.  You may specify 	characters to be used in padding and which side to be padded.  Finally, 	you may also specify a format for the number.  NOTE that the input 	 number  need not be a number; it may be a string, or anything.  It is 	converted to string.   CALLING SEQEUNCE: 	tmp = STRN( number, [ LENGTH=, PADTYPE=, PADCHAR=, FORMAT = ] )   INPUT: 	NUMBER    This is the input variable to be operated on.  Traditionally, 		 it was a number, but it may be any scalar type.   OPTIONAL INPUT: 	LENGTH    This KEYWORD specifies the length of the returned string. 		If the output would have been longer, it is truncated.  If 		the output would have been shorter, it is padded to the right 		length. 	PADTYPE   This KEYWORD specifies the type of padding to be used, if any. 		0=Padded at End, 1=Padded at front, 2=Centered (pad front/end) 		IF not specified, PADTYPE=1 	PADCHAR   This KEYWORD specifies the character to be used when padding. 		The default is a space (' '). 	FORMAT    This keyword allows the FORTRAN type formatting of the input 		number (e.g. '(f6.2)')   OUTPUT: 	tmp       The formatted string   USEFUL EXAMPLES: 	print,'Used ',strn(stars),' stars.'  ==&gt; 'Used 22 stars.' 	print,'Attempted ',strn(ret,leng=6,padt=1,padch='0'),' retries.' 		==&gt; 'Attempted 000043 retries.' 	print,strn('M81 Star List',length=80,padtype=2) 		==&gt; an 80 character line with 'M81 Star List' centered. 	print,'Error: ',strn(err,format='(f15.2)') 		==&gt; 'Error: 3.24'     or ==&gt; 'Error: 323535.22'   HISTORY: 	03-JUL-90 Version 1 written by Eric W. Deutsch 	10-JUL-90 Trimming and padding options added         (E. Deutsch) 	29-JUL-91 Changed to keywords and header spiffed up     (E. Deutsch) 	Ma7 92 Work correctly for byte values (W. Landsman) 	19-NOV-92 Added Patch to work around IDL 2.4.0 bug which caused an 	error when STRN('(123)') was encountered.            (E. Deutsch) 	Converted to IDL V5.0   W. Landsman   September 1997  ", "LENGTHPADTYPEPADCHARFORMATnumber", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/strnumber.html", "strnumber.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "strnumber.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/strnumber.html#strnumber", "strnumber", 'routine in <a href="idlastro/strnumber.html">strnumber.pro</a>', "strnumber.pro", "", "strnumber", " NAME:       STRNUMBER()  PURPOSE:       Function to determine if a string is a valid numeric value.   EXPLANATION:       A string is considered a valid numeric value if IDL can convert it       to a numeric variable without error.  CALLING SEQUENCE:       result = strnumber( st, [val, /HEX] )   INPUTS:       st - any IDL scalar string   OUTPUTS:       1 is returned as the function value if the string st has a       valid numeric value, otherwise, 0 is returned.   OPTIONAL OUTPUT:       val - (optional) value of the string. double precision unless /L64 is set   OPTIONAL INPUT KEYWORD:        /HEX - If present and nonzero, the string is treated as a hexadecimal              longword integer.        /L64 - If present and nonzero, the val output variable is returned               as a 64 bit integer.    This to ensure that precision is not               lost when returning a large 64 bit integer as double precision.               This keyword has no effect on the function result.        /NAN - if set, then the value of an empty string is returned as NaN,               by default the returned value is 0.0d.     In either case,               an empty string is considered a valid numeric value.   EXAMPLES:       IDL&gt; res = strnumber('0.2d', val)            returns res=1 (a valid number), and val = 0.2000d   NOTES:       (1) STRNUMBER was modified in August 2006 so that an empty string is       considered a valid number.   Earlier versions of strnumber.pro did not       do this because in very early (pre-V4.0) versions of IDL       this could corrupt the IDL session.         (2) STRNUMBER will return a string such as '23.45uyrg' as a valid       number (=23.45) since this is how IDL performs the type conversion.  If       you want a stricter definition of valid number then use the VALID_NUM()       function.  HISTORY:       version 1  By D. Lindler Aug. 1987       test for empty string, W. Landsman          February, 1993       Hex keyword added.  MRG, RITSS, 15 March 2000.       An empty string is a valid number   W. Landsman    August 2006       Added /NAN keyword  W. Landsman August 2006       Added /L64 keyword W. Landsman  Feb 2010  ", "hexNaNL64stval", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/substar.html", "substar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "substar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/substar.html#substar", "substar", 'routine in <a href="idlastro/substar.html">substar.pro</a>', "substar.pro", "", "substar", " NAME: 	SUBSTAR  PURPOSE: 	Subtract a scaled point spread function at specified star position(s).  EXPLANATION: 	Part of the IDL-DAOPHOT photometry sequence   CALLING SEQUENCE: 	SUBSTAR, image, x, y, mag, [ id, psfname, /VERBOSE]   INPUT-OUTPUT: 	IMAGE -  On input, IMAGE is the original image array.  A scaled 		PSF will be subtracted from IMAGE at specified star positions. 		Make a copy of IMAGE before calling SUBSTAR, if you want to 		keep a copy of the unsubtracted image array   INPUTS: 	X -   REAL Vector of X positions found by NSTAR (or FIND) 	Y -   REAL Vector of Y positions found by NSTAR (or FIND) 	MAG - REAL Vector of stellar magnitudes found by NSTAR (or APER) 		Used to scale the PSF to match intensity at star position. 		Stars with magnitude values of 0.0 are assumed missing and 		ignored in the subtraction.   OPTIONAL INPUTS: 	ID -  Index vector indicating which stars are to be subtracted.  If 		omitted, (or set equal to -1), then stars will be subtracted 		at all positions specified by the X and Y vectors.  	PSFNAME - Name of the FITS file containing the PSF residuals, as 		generated by GETPSF.  SUBSTAR will prompt for this parameter 		if not supplied.   OPTIONAL INPUT KEYWORD: 	VERBOSE - If this keyword is set and nonzero, then SUBSTAR will 		display the star that it is currently processing   COMMON BLOCKS: 	The RINTER common block is used (see RINTER.PRO) to save time in the 	PSF calculations   PROCEDURES CALLED: 	DAO_VALUE(), READFITS(), REMOVE, SXOPEN, SXPAR(), SXREAD()  REVISION HISTORY: 	Written, W. Landsman                      August, 1988 	Added VERBOSE keyword                     January, 1992 	Fix star subtraction near edges, W. Landsman    May, 1996 	Assume the PSF file is in FITS format  W. Landsman   July, 1997 	Converted to IDL V5.0   W. Landsman   September 1997  ", "VERBOSEimagexymagidpsfname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sunpos.html", "sunpos.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sunpos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sunpos.html#sunpos", "sunpos", 'routine in <a href="idlastro/sunpos.html">sunpos.pro</a>', "sunpos.pro", "", "sunpos", " NAME:        SUNPOS  PURPOSE:        To compute the RA and Dec of the Sun at a given date.   CALLING SEQUENCE:        SUNPOS, jd, ra, dec, [elong, obliquity, /RADIAN ]  INPUTS:        jd    - The Julian date of the day (and time), scalar or vector                usually double precision  OUTPUTS:        ra    - The right ascension of the sun at that date in DEGREES                double precision, same number of elements as jd        dec   - The declination of the sun at that date in DEGREES   OPTIONAL OUTPUTS:        elong - Ecliptic longitude of the sun at that date in DEGREES.        obliquity - the obliquity of the ecliptic, in DEGREES   OPTIONAL INPUT KEYWORD:        /RADIAN - If this keyword is set and non-zero, then all output variables                are given in Radians rather than Degrees   NOTES:        Patrick Wallace (Rutherford Appleton Laboratory, UK) has tested the        accuracy of a C adaptation of the sunpos.pro code and found the        following results.   From 1900-2100 SUNPOS  gave 7.3 arcsec maximum        error, 2.6 arcsec RMS.  Over the shorter interval 1950-2050 the figures        were 6.4 arcsec max, 2.2 arcsec RMS.         The returned RA and Dec are in the given date's equinox.         Procedure was extensively revised in May 1996, and the new calling        sequence is incompatible with the old one.  METHOD:        Uses a truncated version of Newcomb's Sun.    Adapted from the IDL        routine SUN_POS by CD Pike, which was adapted from a FORTRAN routine        by B. Emerson (RGO).  EXAMPLE:        (1) Find the apparent RA and Dec of the Sun on May 1, 1982         IDL&gt; jdcnv, 1982, 5, 1,0 ,jd      ;Find Julian date jd = 2445090.5        IDL&gt; sunpos, jd, ra, dec        IDL&gt; print,adstring(ra,dec,2)                 02 31 32.61  +14 54 34.9         The Astronomical Almanac gives 02 31 32.58 +14 54 34.9 so the error                in SUNPOS for this case is &lt; 0.5 .         (2) Find the apparent RA and Dec of the Sun for every day in 1997         IDL&gt; jdcnv, 1997,1,1,0, jd                ;Julian date on Jan 1, 1997        IDL&gt; sunpos, jd+ dindgen(365), ra, dec    ;RA and Dec for each day   MODIFICATION HISTORY:        Written by Michael R. Greason, STX, 28 October 1988.        Accept vector arguments, W. Landsman     April,1989        Eliminated negative right ascensions.  MRG, Hughes STX, 6 May 1992.        Rewritten using the 1993 Almanac.  Keywords added.  MRG, HSTX,                10 February 1994.        Major rewrite, improved accuracy, always return values in degrees        W. Landsman  May, 1996        Added /RADIAN keyword,    W. Landsman       August, 1997        Converted to IDL V5.0   W. Landsman   September 1997  ", "RADIANjdradeclongmedoblt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sunsymbol.html", "sunsymbol.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sunsymbol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sunsymbol.html#sunsymbol", "sunsymbol", 'routine in <a href="idlastro/sunsymbol.html">sunsymbol.pro</a>', "sunsymbol.pro", "", "sunsymbol", " NAME: 	SUNSYMBOL  PURPOSE: 	Return the Sun symbol as a subscripted postscript character string  EXPLANATION: 	Returns the Sun symbol (circle with a dot in the middle) as a 	(subscripted) postscript character string.    Needed because although 	the Sun symbol	is available using the vector fonts as the string 	'!9n', it is not in the standard postscript set.   CALLING SEQUENCE: 	result = SUNSYMBOL([FONT= ])   INPUTS: 	None   OPTIONAL INPUT KEYWORDS:        font = scalar font graphics keyword (-1,0 or 1) for text.   Note that               this keyword is useful for printing text with XYOUTS but *not*               e.g. the XTIT keyword to PLOT where the font call to PLOT takes               precedence.   OUTPUTS: 	result - a scalar string representing the Sun symbol.   A different 		string is output depending (1) the device is postscript and 		hardware fonts are used (!P.FONT=0), (2) vector fonts are used, 		or (3) hardware fonts are used on a non-postscript device. 		For case (3), SUNSYMBOL simply outputs the 3 character string 		'Sun'   EXAMPLE: 	To make the X-axis of a plot read  M/M_Sun 	IDL&gt;  plot,indgen(10),xtit = 'M / M' + sunsymbol()   RESTRICTIONS: 	(1) The postscript output does not have the dot perfectly centered in 		the circle.   For a better symbol, consider postprocessing with                psfrag (see http://www.astrobetter.com/idl-psfrag/ ). 	(2) SUNSYMBOL() includes subscript output positioning commands in the 		output string.        (3) True type fonts (!p.font = 1) are not supported.   If you want            to make a Sun symbol with true type fonts, see the discussion of            installing the Marvosym font at http://tinyurl.com/mst5q  REVISION HISTORY: 	Written,  W. Landsman,    HSTX          April, 1997 	Converted to IDL V5.0   W. Landsman   September 1997        Allow font keyword to be passed.  T. Robishaw Apr. 2006  ", "FONT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxaddhist.html", "sxaddhist.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxaddhist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxaddhist.html#sxaddhist", "sxaddhist", 'routine in <a href="idlastro/sxaddhist.html">sxaddhist.pro</a>', "sxaddhist.pro", "", "sxaddhist", " NAME:        SXADDHIST  PURPOSE:        Procedure to add HISTORY (or COMMENT) line(s) to a FITS header   EXPLANATION:        The advantage of using SXADDHIST instead of SXADDPAR is that with        SXADDHIST many HISTORY or COMMENT records can be added in a single call.   CALLING SEQUENCE        sxaddhist, history, header, [ /PDU, /COMMENT ]   INPUTS:         history - string or string array containing history or comment line(s)                to add to the FITS header  INPUT/OUTPUT        header - FITS header (string array).   Upon output, it will contain the                specified HISTORY records added to the end   OPTIONAL KEYWORD INPUTS:        /BLANK - If specified then blank ('       ') keywords will be written               rather than 'HISTORY ' keywords.        /COMMENT - If specified, then 'COMMENT ' keyword will be written rather               than 'HISTORY ' keywords.               Note that according to the FITS definition, any number of               'COMMENT' and 'HISTORY' or blank keywords may appear in a header,               whereas all other keywords may appear only once.        LOCATION=key - If present, the history will be added before this               keyword.  Otherwise put it at the end.        /PDU - if specified, the history will be added to the primary               data unit header, (before the line beginning BEGIN EXTENSION...)               Otherwise, it will be added to the end of the header.               This has meaning only for extension headers using the STScI               inheritance convention.  OUTPUTS:        header - updated FITS header   EXAMPLES:        sxaddhist, 'I DID THIS', header      ;Add one history record         hist = strarr(3)        hist[0] = 'history line number 1'        hist[1[ = 'the next history line'        hist[2] = 'the last history line'        sxaddhist, hist, header              ;Add three history records   SIDE EFFECTS:        Header array is truncated to the final END statement        LOCATION overrides PDU.  HISTORY:        D. Lindler  Feb. 87        April 90  Converted to new idl  D. Lindler        Put only a single space after HISTORY   W. Landsman  November 1992        Aug. 95   Added PDU keyword parameters        LOCATION added.  M. Greason, 28 September 2004.        Missing minus sign (1 -&gt; -1) in testing for WHERE output when         looking for location to insert a comment  M. Haffner Oct 2012  ", "blankcommentlocationpduhistoryheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxaddpar.html", "sxaddpar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxaddpar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxaddpar.html#sxaddpar", "sxaddpar", 'routine in <a href="idlastro/sxaddpar.html">sxaddpar.pro</a>', "sxaddpar.pro", "", "sxaddpar", " NAME:        SXADDPAR  PURPOSE:        Add or modify a parameter in a FITS header array.   CALLING SEQUENCE:        SXADDPAR, Header, Name, Value, [ Comment,  Location, /SaveComment,                                BEFORE =, AFTER = , FORMAT= , /PDU]   INPUTS:        Header = String array containing FITS or STSDAS header.    The                length of each element must be 80 characters.    If not                defined, then SXADDPAR will create an empty FITS header array.         Name = Name of parameter. If Name is already in the header the value                and possibly comment fields are modified.  Otherwise a new                record is added to the header.  If name is equal to 'COMMENT'                or 'HISTORY' or a blank string then the value will be added to                the record without replacement.  For these cases, the comment                parameter is ignored.         Value = Value for parameter.  The value expression must be of the                correct type, e.g. integer, floating or string.  String values                 of 'T' or 'F' are considered logical values.   OPTIONAL INPUT PARAMETERS:        Comment = String field.  The '/' is added by this routine.  Added                starting in position 31.    If not supplied, or set equal to                '', or /SAVECOMMENT is set, then the previous comment field is                retained (when found)         Location = Keyword string name.  The parameter will be placed before the                location of this keyword.    This parameter is identical to                the BEFORE keyword and is kept only for consistency with                earlier versions of SXADDPAR.   OPTIONAL INPUT KEYWORD PARAMETERS:        BEFORE  = Keyword string name.  The parameter will be placed before the                location of this keyword.  For example, if BEFORE='HISTORY'                then the parameter will be placed before the first history                location.  This applies only when adding a new keyword;                keywords already in the header are kept in the same position.         AFTER   = Same as BEFORE, but the parameter will be placed after the                location of this keyword.  This keyword takes precedence over                BEFORE.         FORMAT  = Specifies FORTRAN-like format for parameter, e.g.  F7.3 .  A                scalar string should be used.  For complex numbers the format                should be defined so that it can be applied separately to the                real and imaginary parts.  If not supplied then the default is                'G19.12' for double precision, and 'G14.7' for floating point.         /PDU    = specifies keyword is to be added to the primary data unit                header. If it already exists, it's current value is updated in                the current position and it is not moved.        /SAVECOMMENT = if set, then any existing comment is retained, i.e. the                COMMENT parameter only has effect if the keyword did not                previously exist in the header.  OUTPUTS:        Header = updated FITS header array.   EXAMPLE:        Add a keyword 'TELESCOP' with the value 'KPNO-4m' and comment 'Name        of Telescope' to an existing FITS header h.         IDL&gt; sxaddpar, h, 'TELESCOPE','KPNO-4m','Name of Telescope'  NOTES:        The functions SXADDPAR() and FXADDPAR() are nearly identical, with the        major difference being that FXADDPAR forces required FITS keywords        BITPIX, NAXISi, EXTEND, PCOUNT, GCOUNT to appear in the required order        in the header, and FXADDPAR supports the OGIP LongString convention.        There is no particular reason for having two nearly identical        procedures, but both are too widely used to drop either one.         All HISTORY records are inserted in order at the end of the header.         All COMMENT records are also inserted in order at the end of the header        header, but before the HISTORY records.  The BEFORE and AFTER keywords        can override this.         All records with no keyword (blank) are inserted in order at the end of        the header, but before the COMMENT and HISTORY records.  The BEFORE and        AFTER keywords can override this.  RESTRICTIONS:        Warning -- Parameters and names are not checked                against valid FITS parameter names, values and types.   MODIFICATION HISTORY:        DMS, RSI, July, 1983.        D. Lindler Oct. 86  Added longer string value capability        Converted to NEWIDL  D. Lindler April 90        Added Format keyword, J. Isensee, July, 1990        Added keywords BEFORE and AFTER. K. Venkatakrishna, May '92        Pad string values to at least 8 characters   W. Landsman  April 94        Aug 95: added /PDU option and changed routine to update last occurence                of an existing keyword (the one SXPAR reads) instead of the                first occurence.        Comment for string data can start after column 32 W. Landsman June 97        Make sure closing quote supplied with string value  W. Landsman  June 98        Converted to IDL V5.0    W. Landsman   June 98        Increase precision of default formatting of double precision floating                point values.   C. Gehman, JPL  September 1998        Mar 2000, D. Lindler, Modified to use capital E instead of lower case                e for exponential formats.        Apr 2000, Make user-supplied format upper-case  W. Landsman        Oct 2001, Treat COMMENT or blank string like HISTORY keyword W. Landsman        Jan 2002, Allow BEFORE, AFTER to apply to COMMENT keywords W. Landsman        June 2003, Added SAVECOMMENT keyword    W. Landsman        Jan 2004, If END is missing, then add it at the end W. Landsman        May 2005 Fix SAVECOMMENT error with non-string values W. Landsman        Oct 2005 Jan 2004 change made SXADDPAR fail for empty strings W.L.        May 2011 Fix problem with slashes in string values W.L.   ", "beforesavecommentafterformatpduHeaderNameValueCommentLocation", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxdelpar.html", "sxdelpar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxdelpar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxdelpar.html#sxdelpar", "sxdelpar", 'routine in <a href="idlastro/sxdelpar.html">sxdelpar.pro</a>', "sxdelpar.pro", "", "sxdelpar", " NAME: 	SXDELPAR  PURPOSE: 	Procedure to delete a keyword parameter(s) from a FITS header   CALLING SEQUENCE: 	sxdelpar, h, parname   INPUTS: 	h - FITS or STSDAS header, string array 	parname - string or string array of keyword name(s) to delete   OUTPUTS: 	h - updated FITS header, If all lines are deleted from 		the header, then h is returned with a value of 0   EXAMPLE: 	Delete the astrometry keywords CDn_n from a FITS header, h  	IDL&gt; sxdelpar, h, ['CD1_1','CD1_2','CD2_1','CD2_2']   NOTES: 	(1)  No message is returned if the keyword to be deleted is not found 	(2)  All appearances of a keyword in the header will be deleted  HISTORY: 	version 1  D. Lindler Feb. 1987 	Test for case where all keywords are deleted    W. Landsman Aug 1995        Allow for headers with more than 32767 lines W. Landsman Jan. 2003        Use ARRAY_EQUAL, cleaner syntax  W. L.  July 2009  ", "hparname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxginfo.html", "sxginfo.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxginfo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxginfo.html#sxginfo", "sxginfo", 'routine in <a href="idlastro/sxginfo.html">sxginfo.pro</a>', "sxginfo.pro", "", "sxginfo", " NAME: 	SXGINFO   PURPOSE: 	Return information on all group parameters in an STSDAS header.  EXPLANATION: 	Return datatype, starting byte, and number bytes for all group 	parameters in an STSDAS file.     Obtaining these values 	greatly speed up execution time in subsequent calls to SXGPAR.   CALLING SEQUENCE: 	sxginfo, h, par, type, sbyte, nbytes   INPUTS: 	h - header returned by SXOPEN 	par - parameter block returned by SXREAD or multiple 		parameter blocks stored in array of dimension 		greater than one.   OUTPUT: 	type - data type (if not supplied or null string, the 		header is searched for type,sbyte, and nbytes) 	sbyte - starting byte in parameter block for data 	nbytes - number of bytes in parameter block for data  	The number of elements in type,sbyte and nbytes equals the total 	number of group parameters.   METHOD: 	The parameter type for each parameter is obtained 	from PDTYPEn keyword.  If not found then DATATYPE keyword 	value is used.  If that is not found then BITPIX is 	used.  BITPIX=8, byte; BITPIX=16 integer*2; BITPIX=32 	integer*4.   NOTES: 	For an example of the use of SXGINFO, see CONV_STSDAS   HISTORY: 	version 1  W. Landsman   Apr. 93  	Converted to IDL V5.0   W. Landsman   September 1997  ", "hpartypesbytenbytes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxgpar.html", "sxgpar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxgpar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxgpar.html#sxgpar", "sxgpar", 'routine in <a href="idlastro/sxgpar.html">sxgpar.pro</a>', "sxgpar.pro", "", "sxgpar", " NAME: 	SXGPAR   PURPOSE: 	Obtain group parameter value in SDAS/FITS file   CALLING SEQUENCE: 	result = sxgpar( h, par, name, [ type, sbyte, nbytes] )   INPUTS: 	h - header returned by SXOPEN 	par - parameter block returned by SXREAD or multiple 		parameter blocks stored in array of dimension 		greater than one. 	name - parameter name (keyword PTYPEn) or integer 		parameter number.   OPTIONAL INPUT/OUTPUT 	type - data type (if not supplied or null string, the 		header is searched for type,sbyte, and nbytes) 	sbyte - starting byte in parameter block for data 	nbytes - number of bytes in parameter block for data   OUTPUT: 	parameter value or value(s) returned as function value   SIDE EFFECTS: 	If an error occured then !err is set to -1   OPERATIONAL NOTES: 	Supplying type, sbyte and nbytes greatly decreases execution 	time.  The best way to get the types is on the first call 	pass undefined variables for the three parameters or set 	type = ''.  The routine will then return their values for 	use in subsequent calls.   METHOD: 	The parameter type for parameter n is obtained 	from PDTYPEn keyword.  If not found then DATATYPE keyword 	value is used.  If that is not found then BITPIX is 	used.  BITPIX=8, byte; BITPIX=16 integer*2; BITPIX=32 	integer*4.   HISTORY: 	version 1  D. Lindler  Oct. 86 	version 2  D. Lindler Jan. 90  added ability to process 		multiple parameter blocks in single call 	version 3  D. Lindler  (converted to New vaxidl)        Apr 14 1991      JKF/ACC - fixed make_array datatypes(float/double) 	Converted to IDL V5.0   W. Landsman   September 1997  ", "hparnametypesbytenbytes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxgread.html", "sxgread.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxgread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxgread.html#sxgread", "sxgread", 'routine in <a href="idlastro/sxgread.html">sxgread.pro</a>', "sxgread.pro", "", "sxgread", " NAME: 	SXGREAD  PURPOSE: 	Read group parameters from a Space Telescope STSDAS image file   CALLING SEQUENCE: 	grouppar = sxgread( unit, group )   INPUTS: 	UNIT   = Supply same unit as used in SXOPEN. 	GROUP  =  group number to read.  if omitted, read first group. 		The first group is number 0.   OUTPUTS: 	GROUPPAR  =  parameter values from fits group parameter block. 		It is a byte array which may contain multiple data types. 		The function SXGPAR can be used to retrieve values from it.   COMMON BLOCKS: 	Uses IDL Common STCOMMN to access parameters.  SIDE EFFECTS: 	IO is performed.  MODIFICATION HISTORY: 	WRITTEN, Don Lindler, July, 1 1987 	MODIFIED, Don Neill, Jan 11, 1991 - derived from sxread.pro 	Converted to IDL V5.0   W. Landsman   September 1997  ", "unitgroup", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxhcopy.html", "sxhcopy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxhcopy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxhcopy.html#sxhcopy", "sxhcopy", 'routine in <a href="idlastro/sxhcopy.html">sxhcopy.pro</a>', "sxhcopy.pro", "", "sxhcopy", " NAME: 	SXHCOPY  PURPOSE: 	Copies selected portions of one header to another   CALLING SEQUENCE: 	sxhcopy, h, keyword1, keyword2, hout   INPUTS: 	h - input header 	keyword1 - first keyword to copy 	keyword2 - last keyword to copy   INPUT/OUTPUT: 	hout - header to copy the information to.   METHOD: 	the headers lines from keyword1 to keyword2 are copied to 	the end of the output header.  No check is made to verify 	that a keyword value already exists in the output header.   HISTORY: 	version 1  D. Lindler    Sept. 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "hkeyword1keyword2hout", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxhmake.html", "sxhmake.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxhmake.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxhmake.html#sxhmake", "sxhmake", 'routine in <a href="idlastro/sxhmake.html">sxhmake.pro</a>', "sxhmake.pro", "", "sxhmake", " NAME:        SXHMAKE  PURPOSE:        Create a basic STSDAS header file from an IDL data array   CALLING SEQUENCE:        sxhmake, Data, Groups, Header   INPUTS:        Data = IDL data array of the same type, dimensions and                size as are to be written to file.        Groups = # of groups to be written.   OUTPUTS:        Header = String array containing ST header file.   PROCEDURE:        Call sxhmake to create a header file.  Then call sxopen to        open output image, followed by sxwrite to write the data.        If you do not plan to change the header created by sxhmake        before calling sxopen, you might consider using sxmake which        does both steps.   MODIFICATION HISTORY:        Don Lindler  Feb 1990 modified from SXMAKE by DMS, July, 1983.        D. Lindler April 90  Converted to new VMS IDL        M. Greason May 1990  Header creation bugs eliminated.        W. Landsman Aug 1997 Use SYSTIME() instead of !STIME for V5.0        Converted to IDL V5.0   W. Landsman   September 1997        Recognize unsigned datatype    January 2000   W. Landsman  ", "datagroupsheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxhread.html", "sxhread.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxhread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxhread.html#sxhread", "sxhread", 'routine in <a href="idlastro/sxhread.html">sxhread.pro</a>', "sxhread.pro", "", "sxhread", " NAME:        SXHREAD  PURPOSE:        Procedure to read a STSDAS header from disk.  EXPLANATION:        This version of SXHREAD can read two types of disk files        (1)  Unix stream files with a CR after every 80 bytes        (2)  Variable length record files        (3)  Fixed length (80 byte) record files   CALLING SEQUENCE:        sxhread, name, header   INPUT:        name - file name, scalar string.  An extension of .hhh is appended                if not already supplied.   (Note STSDAS headers are required                to have a 3 letter extension ending in 'h'.)   gzip extensions                .gz will be recognized as compressed.  OUTPUT:        header - STSDAS header, string array  NOTES:        SXHREAD  does not do any checking to see if the file is a valid        STSDAS header.    It simply reads the file into a string array with        80 byte elements   HISTORY:        Version 1  D. Lindler  July, 1987        Version 2  M. Greason, August 1990        Use READU for certain ST VAX GEIS files   W. Landsman January, 1992        Read variable length Unix files  E. Deutsch/W. Landsman November, 1994        Converted to IDL V5.0   W. Landsman   September 1997        Updated by E. Artigau to handle gzipped fits  August 2004        Remove VMS support, W. Lnadsman September 2006  ", "nameheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxhwrite.html", "sxhwrite.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxhwrite.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxhwrite.html#sxhwrite", "sxhwrite", 'routine in <a href="idlastro/sxhwrite.html">sxhwrite.pro</a>', "sxhwrite.pro", "", "sxhwrite", " NAME:        SXHWRITE  PURPOSE:        Procedure to write an STSDAS or FITS header to disk as a *.hhh file.   CALLING SEQUENCE:        SXHWRITE,name,h   INPUTS:        name - file name. If an extension is supplied it must be 3 characters                ending in  h .        h - FITS header, string array   SIDE EFFECTS:        File with specified name is written.  If qualifier not specified        then .hhh is used         SXHWRITE will modify the header in the following ways, if necessary        (1)  If not already present, an END statement is added as the                last line.   Lines after an existing END statment are                deleted.        (2)  Spaces are appended to force each line to be 80 characters.        (3)  On Unix machines, a carriage return is appended at the end                of each line.   This is consistent with STSDAS and allows                the file to be directly displayed on a stream device   PROCEDURES USED:        zparcheck, fdecomp  HISTORY:        version 1  D. Lindler  June 1987        conversion cleaned up.  M. Greason, June 1990        Add carriage return at the end of Unix files   W. Landsman Oct 1991        Use SYSTIME() instead of !STIME for V5.0 compatibility Aug 1997        Assume since V55, remove VMS support  ", "nameh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxmake.html", "sxmake.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxmake.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxmake.html#sxmake", "sxmake", 'routine in <a href="idlastro/sxmake.html">sxmake.pro</a>', "sxmake.pro", "", "sxmake", " NAME:        SXMAKE  PURPOSE:        Create a basic ST header file from an IDL array prior to writing data.   CALLING SEQUENCE:        sxmake, Unit, File, Data, Par, Groups, Header, [ PSIZE = ]   INPUTS:        Unit = Logical unit number from 1 to 9.        File = file name of data and header files to create.   If no file name               extension is supplied then the default is to use .hhh for the               header file extension and .hhd for the data file extension               If an extension is supplied, it should be of the form .xxh               where xx are any alphanumeric characters.        Data = IDL data array of the same type, dimensions and                size as are to be written to file.        Par = # of elements in each parameter block for each data record.  If              set equal to 0, then parameter blocks will not be written.  The              data type of the parameter blocks must be the same as the data              array.   To get around this restriction, use the PSIZE keyword.        Groups = # of groups to write.  If 0 then write in basic                format without groups.   OPTIONAL INPUT PARAMETERS:        Header = String array containing ST header file.  If this                parameter is omitted, a basic header is constructed.                If included, the basic parameters are added to the                header using sxaddpar.  The END keyword must terminate                the parameters in Header.   OPTIONAL KEYWORD INPUT PARAMETER:         PSIZE - Integer scalar giving the number of bits in the parameter                block.    If the PSIZE keyword is given, then the Par input                parameter is ignored.   OPTIONAL OUTPUT PARAMETERS:        Header = ST header array, an 80 by N character array.   COMMON BLOCKS:        Stcommn - as used in sxwrite, sxopen, etc.   SIDE EFFECTS:        The header file is created and written and then the        data file is opened on the designated unit.   RESTRICTIONS:        Header files must be named .xxh and data files must be        named .xxd, where xx are any alphanumeric characters.   PROCEDURE:        Call sxmake to create a header file.  Then call sxwrite        to output each group.   PROCEDURES USED:        GET_DATE, SXADDPAR, SXOPEN  MODIFICATION HISTORY:        DMS, July, 1983.        converted to new VMS IDL  April 90        Use SYSTIME() instead of !STIME   W. Landsman   Aug 1997        Converted to IDL V5.0   W. Landsman   September 1997        Added optional PSIZE keyword   August 1999 W. Landsman        Recognize unsigned datatype    January 2000   W. Landsman  ", "PSIZEunitFileDataParGroupsHeader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxopen.html", "sxopen.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxopen.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxopen.html#SXOPEN", "SXOPEN", 'routine in <a href="idlastro/sxopen.html">sxopen.pro</a>', "sxopen.pro", "", "SXOPEN", " NAME:        SXOPEN  PURPOSE:        Open a Space Telescope formatted (STSDAS) header file.  EXPLANATION:        Saves the parameters required subsequent SX routines in        the common block Stcommn.  Optionally save the header in        the string array Header, and the history in the string array        History.  Open the data file associated with this        header on the same unit.   CALLING SEQUENCE:        SXOPEN, Unit, Fname [, Header [,History] [,Access]]   INPUTS:        Unit = IDL unit used for IO.  Must be from 1 to 9.        Fname = File name of header file.  Default extension                is .hhh for header files and .hhd for data                files.    If an extension is supplied it must have the                form .xxh where xx are any alphanumeric characters. The                data file must have extension .xxd                No version number is allowed.  Most recent versions                of the files are used.   OPTIONAL INPUT PARAMETER:        Access = 'R' to open for read, 'W' to open for write.   OUTPUTS:        Stcommn = Common block containing ST parameter blocks.                (Long arrays.)   OPTIONAL OUTPUT PARAMETERS:        Header = 80 char by N string array containing the                names, values and comments from the FITS header.                Use the function SXPAR to obtain individual                parameter values.        History = String array containing the value of the                history parameter.   COMMON BLOCKS:        STCOMMN - Contains RESULT(20,10) where RESULT(i,LUN) =        0 - 121147 for consistency check, 1 - Unit for consistency,        2 - bitpix, 3 - naxis, 4 - groups (0 or 1), 5 - pcount,        6 - gcount, 7 - psize, 8 - data type as idl type code,        9 - bytes / record, 10 to 10+N-1 - dimension N,        17 = record length of file in bytes.        18 - # of groups written, 19 = gcount.   SIDE EFFECTS:        The data and header files are accessed.   RESTRICTIONS:        Works only for disc files.  The data file must have        must have the extension  .xxd  and the header file must        have the extension  .xxh  where x is any alphanumeric character   PROCEDURE:        The header file is opened and each line is read.        Important parameters are stored in the output        parameter.  If the last two parameters are specified        the parameter names and values are stored.  The common        block STCOMMN is filled with the type of data, dimensions,        etc. for use by SXREAD.         If access is for write, each element of the header        array, which must be supplied, is written to the        header file.  The common block is filled with        relevant parameters for SXWRITE.  A keyword of  END         ends the header.   MODIFICATION HISTORY:        Written, DMS, May, 1983.        D. Lindler Feb. 1990                Modified to allow var. record length header files.        D. Lindler April 1990   Conversion to new VMS IDL        Added /BLOCK when opening new .hhd file        Converted to IDL V5.0   W. Landsman   September 1997        Recognize unsigned datatype for V5.1 or greater   W. Landsman Jan 2000        Assume since V5.5  W. Landsman Sep 2006  ", "unitfnameheaderhistoryaccess", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxpar.html", "sxpar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxpar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxpar.html#SXPAR", "SXPAR", 'routine in <a href="idlastro/sxpar.html">sxpar.pro</a>', "sxpar.pro", "", "SXPAR", " NAME:       SXPAR  PURPOSE:       Obtain the value of a parameter in a FITS header   CALLING SEQUENCE:       result = SXPAR( Hdr, Name, [ Abort, COUNT=, COMMENT =, /NoCONTINUE,                                            /SILENT  ])   INPUTS:       Hdr =  FITS header array, (e.g. as returned by READFITS)              string array, each element should have a length of 80 characters        Name = String name of the parameter to return.   If Name is of the              form 'keyword*' then an array is returned containing values of              keywordN where N is a positive (non-zero) integer.  The value of              keywordN will be placed in RESULT[N-1].  The data type of RESULT              will be the type of the first valid match of keywordN found.   OPTIONAL INPUTS:        ABORT - string specifying that SXPAR should do a RETALL                if a parameter is not found.  ABORT should contain                a string to be printed if the keyword parameter is not found.                If not supplied, SXPAR will return quietly with COUNT = 0                (and !ERR = -1) if a keyword is not found.   OPTIONAL INPUT KEYWORDS:        /NOCONTINUE = If set, then continuation lines will not be read, even                  if present in the header        /SILENT - Set this keyword to suppress warning messages about duplicate                  keywords in the FITS header.   OPTIONAL OUTPUT KEYWORDS:        COUNT - Optional keyword to return a value equal to the number of                parameters found by SXPAR, integer scalar         COMMENT - Array of comments associated with the returned values   OUTPUTS:        Function value = value of parameter in header.                If parameter is double precision, floating, long or string,                the result is of that type.  Apostrophes are stripped                from strings.  If the parameter is logical, 1b is                returned for T, and 0b is returned for F.                If Name was of form 'keyword*' then a vector of values                are returned.   SIDE EFFECTS:        !ERR is set to -1 if parameter not found, 0 for a scalar        value returned.  If a vector is returned it is set to the        number of keyword matches found.    The use of !ERR is deprecated, and        instead the COUNT keyword is preferred         If a keyword (except HISTORY or COMMENT) occurs more than once in a        header, a warning is given, and the *last* occurence is used.   EXAMPLES:        Given a FITS header, h, return the values of all the NAXISi values        into a vector.    Then place the history records into a string vector.         IDL&gt; naxisi = sxpar( h ,'NAXIS*')         ; Extract NAXISi value        IDL&gt; history = sxpar( h, 'HISTORY' )      ; Extract HISTORY records   PROCEDURE:        The first 8 chacters of each element of Hdr are searched for a        match to Name.  The value from the last 20 characters is returned.        An error occurs if there is no parameter with the given name.         If a numeric value has no decimal point it is returned as type        LONG.   If it contains more than 8 numerals, or contains the        characters 'D' or 'E', then it is returned as type DOUBLE.  Otherwise        it is returned as type FLOAT.    Very large integer values, outside        the range of valid LONG, are returned as DOUBLE.         If the value is too long for one line, it may be continued on to the        the next input card, using the OGIP CONTINUE convention.  For more info,        see http://fits.gsfc.nasa.gov/registry/continue_keyword.html         Complex numbers are recognized as two numbers separated by one or more        space characters.         If a numeric value has no decimal point (or E or D) it is returned as        type LONG.  If it contains more than 8 numerals, or contains the        character 'D', then it is returned as type DOUBLE.  Otherwise it is        returned as type FLOAT.    If an integer is too large to be stored as        type LONG, then it is returned as DOUBLE.   NOTES:        The functions SXPAR() and FXPAR() are nearly identical, although        FXPAR() has slightly more sophisticated parsing, and additional keywords        to specify positions in the header to search (for speed), and to force        the output to a specified data type..   There is no        particular reason for having two nearly identical procedures, but        both are too widely used to drop either one.   PROCEDURES CALLED:        GETTOK(), VALID_NUM()  MODIFICATION HISTORY:        DMS, May, 1983, STPAR Written.        D. Lindler Jan 90 added ABORT input parameter        J. Isensee Jul,90 added COUNT keyword        W. Thompson, Feb. 1992, added support for FITS complex values.        W. Thompson, May 1992, corrected problem with HISTORY/COMMENT/blank                keywords, and complex value error correction.        W. Landsman, November 1994, fix case where NAME is an empty string        W. Landsman, March 1995,  Added COMMENT keyword, ability to read                values longer than 20 character        W. Landsman, July 1995, Removed /NOZERO from MAKE_ARRAY call        T. Beck May 1998, Return logical as type BYTE        W. Landsman May 1998, Make sure integer values are within range of LONG        W. Landsman Feb 1998, Recognize CONTINUE convention        W. Landsman Oct 1999, Recognize numbers such as 1E-10 as floating point        W. Landsman Jan 2000, Only accept integer N values when name = keywordN        W. Landsman Dec 2001, Optional /SILENT keyword to suppress warnings        W. Landsman/D. Finkbeiner  Mar 2002  Make sure extracted vectors              of mixed data type are returned with the highest type.        W.Landsman Aug 2008  Use vector form of VALID_NUM()        W. Landsman Jul 2009  Eliminate internal recursive call        W. Landsman Apr 2012  Require vector numbers be greater than 0  ", "COUNTCOMMENTNoContinueSILENThdrnameabort", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxread.html", "sxread.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxread.html#sxread", "sxread", 'routine in <a href="idlastro/sxread.html">sxread.pro</a>', "sxread.pro", "", "sxread", " NAME: 	SXREAD  PURPOSE: 	Read a Space Telescope STSDAS image file   CALLING SEQUENCE: 	result = sxread( Unit, group , [par] )   INPUTS: 	UNIT  =  Unit number of file, must be from 1 to 9. 		Unit must have been opened with SXOPEN. 	GROUP  =  group number to read.  if omitted, read first record. 		The first record is number 0.  OUTPUTS: 	Result of function  =  array constructed from designated record.   OPTIONAL OUTPUT: 	PAR  =  Variable name into which parameter values from STSDAS 		group parameter block are read.  It is a byte array 		which may contain multiple data types.  The function 		SXGPAR can be used to retrieve values from it.   COMMON BLOCKS: 	Uses IDL Common STCOMMN to access parameters.   NOTES: 	Use the function SXGREAD to read the group parameter blocks without 	having to read the group array.  	If the STSDAS file does not contain groups, then the optional output 	parameter PAR is returned undefined, but no error message is given.   SIDE EFFECTS: 	IO is performed.  MODIFICATION HISTORY: 	WRITTEN, Don Lindler, July, 1 1987 	Converted to IDL V5.0   W. Landsman   September 1997  ", "unitgrouppar", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/sxwrite.html", "sxwrite.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "sxwrite.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/sxwrite.html#SXWRITE", "SXWRITE", 'routine in <a href="idlastro/sxwrite.html">sxwrite.pro</a>', "sxwrite.pro", "", "SXWRITE", " NAME: 	SXWRITE  PURPOSE: 	Write a group of data and parameters in ST format 	to a STSDAS data file.   CALLING SEQUENCE: 	SXWRITE, Unit, Data,[ Par]   INPUTS: 	Unit = unit number of file.  The file must have been 		previously opened by SXOPEN. 	Data = Array of data to be written.  The dimensions 		must agree with those supplied to SXOPEN and written 		into the FITS header.  The type is converted if 		necessary.   OPTIONAL INPUT PARAMETERS: 	Par = parameter block.  The size of this array must 		agree with the Psize parameter in the FITS header.   OUTPUTS: 	None.  COMMON BLOCKS: 	STCOMMN - Contains RESULT(20,10) where RESULT(i,LUN) = 	0 - 121147 for consistency check, 1 - Unit for consistency, 	2 - bitpix, 3 - naxis, 4 - groups (0 or 1), 5 - pcount, 	6 - gcount, 7 - psize, 8 - data type as idl type code, 	9 - bytes / record, 10 to 10+N-1 - dimension N, 	18 - # of groups written, 19 = gcount.   SIDE EFFECTS: 	The data are written into the next group.   RESTRICTIONS: 	SXOPEN must have been called to initialize the 	header and the common block.   MODIFICATION HISTORY: 	DMS, July, 1983. 	D.Lindler July, 1986 - changed block size of file to 512 			moved group parameters after the groups data. 	D.Lindler July, 1987 - modified to allow any size parameter block 			(in bytes). 	D. Lindler  April, 1990 - converted to new VMS IDL 	Converted to IDL V5.0   W. Landsman   September 1997  ", "UnitDataPar", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/symcat.html", "symcat.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "symcat.pro", "", "", " NAME:        SYMCAT   PURPOSE:         This function provides a symbol catalog for specifying a number of plotting symbols.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Graphics   CALLING SEQUENCE:         Plot, findgen(11), PSYM=SYMCAT(theSymbol)         To connect symbols with lines, use a negative value for the PSYM keyword:         Plot, findgen(11), PSYM=-SYMCAT(theSymbol)   INPUTS:         theSymbol:    The number of the symbol you wish to use. Possible values are:         0  : No symbol.        1  : Plus sign.        2  : Asterisk.        3  : Dot (period).        4  : Open diamond.        5  : Open upward triangle.        6  : Open square.        7  : X.        8  : Defined by the user with USERSYM.        9  : Open circle.       10  : Histogram style plot.       11  : Open downward triangle.       12  : Open rightfacing triangle.       13  : Open leftfacing triangle.       14  : Filled diamond.       15  : Filled square.       16  : Filled circle.       17  : Filled upward triangle.       18  : Filled downward triangle.       19  : Filled rightfacing triangle.       20  : Filled leftfacing triangle.       21  : Hourglass.       22  : Filled Hourglass.       23  : Bowtie.       24  : Filled bowtie.       25  : Standing Bar.       26  : Filled Standing Bar.       27  : Laying Bar.       28  : Filled Laying Bar.       29  : Hat up.       30  : Hat down.       31  : Hat right.       32  : Hat down.       33  : Big cross.       34  : Filled big cross.       35  : Circle with plus.       36  : Circle with X.       37  : Upper half circle.       38  : Filled upper half circle.       39  : Lower half circle.       40  : Filled lower half circle.       41  : Left half circle.       42  : Filled left half circle.       43  : Right half circle.       44  : Filled right half circle.       45  : Star.       46  : Filled star.   RETURN VALUE:         The return value is whatever is appropriate for passing along        to the PSYM keyword of (for example) a PLOT or OPLOT command.        For the vast majority of the symbols, the return value is 8.   KEYWORDS:         COLOR:  Set this keyword to the color (index or 24-bit value) of                the color desired. For example:                 Plot, Findgen(11), COLOR=cgColor('yellow'), PSYM=-SYMCAT(4, COLOR=cgColor('green'))         THICK:  Set this keyword to the thickness desired. Default is 1.   MODIFICATION HISTORY:         Written by David W. Fanning, 2 September 2006. Loosely based on the           program MC_SYMBOL introduced on the IDL newsgroup 1 September 2006,           and MPI_PLOTCONFIG__DEFINE from the Coyote Library.        2 October 2006. DWF. Modified to allow PSYM=8 and PSYM=10 to have           their normal meanings. This shifted previous symbols by two values           from their old meanings. For example, an hourglass went from symbol           number 19 to 21.        Whoops! Added two symbols but forgot to change limits to allow for them. 4 May 2007. DWF.        Added THICK keyword. 21 Aug 2007. DWF.        Added COLOR keyword and made THICK keyword apply to all symbols. 11 Nov 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/symcat.html#SymCat", "SymCat", 'routine in <a href="idlastro/coyote/symcat.html">symcat.pro</a>', "symcat.pro", "", "SymCat", "", "THICKCOLORtheSymbol", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/t_aper.html", "t_aper.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "t_aper.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/t_aper.html#t_aper", "t_aper", 'routine in <a href="idlastro/t_aper.html">t_aper.pro</a>', "t_aper.pro", "", "t_aper", " NAME:        T_APER  PURPOSE:        Driver procedure (for APER) to compute concentric aperture photometry.  EXPLANATION:        Data is read from and written to disk FITS ASCII tables.        Part of the IDL-DAOPHOT photometry sequence   CALLING SEQUENCE:        T_APER, image, fitsfile, [ apr, skyrad, badpix, PRINT=, NEWTABLE=,                        /EXACT, /SILENT, SETSKYVAL = ]   INPUTS:        IMAGE   - input data array        FITSFILE  - disk FITS ASCII table name (from T_FIND).  Must contain                the keywords 'X' and 'Y' giving the centroid of the source                positions in FORTRAN (first pixel is 1) convention.   An                extension of .fit is assumed if not supplied.   OPTIONAL INPUTS:        User will be prompted for the following parameters if not supplied.         APR    -  Vector of up to 12 REAL photometry aperture radii.        SKYRAD  - Two element vector giving the inner and outer radii                to be used for the sky annulus        BADPIX  - Two element vector giving the minimum and maximum                value of a good pixel (Default [-32765,32767])   OPTIONAL KEYWORDS INPUTS:        /EXACT - If this keyword is set, then intersection of the circular                aperture is computed exactly (and slowly) rather than using                an approximation.   See APER for more info.        /PRINT - if set and non-zero then NSTAR will also write its results to                a file aper.prt.   One can specify a different output file                name by setting PRINT = 'filename'.        /SILENT - If this keyword is set and non-zero, then APER will not                display photometry results at the screen, and the results                will be automatically incorporated in the FITS table without                prompting the user        NEWTABLE  - Name of output disk FITS ASCII table, scalar string.                If not supplied, then the input FITSFILE will be updated with                the aperture photometry results.        SETSKYVAL - Use this keyword to force the sky to a specified value                rather than have APER compute a sky value.    SETSKYVAL                can either be a scalar specifying the sky value to use for                all sources, or a 3 element vector specifying the sky value,                the sigma of the sky value, and the number of elements used                to compute a sky value.   The 3 element form of SETSKYVAL                is needed for accurate error budgeting.   PROMPTS:        T_APER requires the number of photons per analog digital unit        (PHPADU), so that it can compute Poisson noise statistics to assign        photometry errors.    It first tries to find the PHPADU keyword in the        original image header, and if not found will look for the GAIN,        CCDGAIN and finally ATODGAIN keywords.   If still not found, T_APER        will prompt the user for this value.   PROCEDURES:        APER, FTADDCOL, FTGET(), FTINFO, FTPUT, READFITS(), SXADDPAR,        SXPAR(), WRITEFITS  REVISON HISTORY:        Written   W. Landsman   ST Systems Co.            May 1988        Store results as flux or magnitude                August 1988        Added SILENT keyword  W. Landsman                 Sep. 1991        Changed ERR SKY to ERR_SKY W. Landsman   March 1996        Replace TEXTOUT keyword with PRINT keyword  W. Landsman  May 1996        Check CCDGAIN or ATODGAIN keywords to find phpadu W. Landsman May 1997        Converted to IDL V5.0   W. Landsman   September 1997        Updated for new FTINFO calling sequence   W. Landsman  May 2000        Added /EXACT keyword                      W. Landsman  June 2000   ", "PRINTSILENTNEWTABLESETSKYVALEXACTimagefitsfileaprskyradbadpix", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/t_find.html", "t_find.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "t_find.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/t_find.html#t_find", "t_find", 'routine in <a href="idlastro/t_find.html">t_find.pro</a>', "t_find.pro", "", "t_find", " NAME:         T_FIND  PURPOSE:        Driver procedure (for FIND) to locate stars in an image.  EXPLANATION:        Finds positive brightness perturbations (i.e stars) in a        2 dimensional image.  Output is to a FITS ASCII table.   CALLING SEQUENCE:        T_FIND, image, im_hdr, [ fitsfile, hmin, fwhm, sharplim, roundlim,                                        PRINT = , /SILENT ]  INPUTS:        image - 2 dimensional image array (integer or real) for which one                wishes to identify the stars present        im_hdr - FITS header associated with image array   OPTIONAL INPUTS:        T_FIND will prompt for these parameters if not supplied         fitsfile - scalar string specifying the name of the output FITS ASCII                table file        fwhm - FWHM to be used in the convolving filter        hmin - Threshold intensity for a point source - should generally                be 3 or 4 sigma above background level        sharplim - 2 element vector giving low and high Limit for                sharpness statistic (Default: [0.2,1.0] )        roundlim - 2 element vector giving low and high Limit for                roundness statistic (Default: [-1.0,1.0] )   OPTIONAL INPUT KEYWORDS:        /PRINT - if set and non-zero then NSTAR will also write its results to                a file find.prt.   One can specify the output file name by                setting PRINT = 'filename'.        /SILENT -   If this keyword is set and non-zero, then FIND will work                silently, and not display each star found   OUTPUTS:        None   PROCEDURES CALLED:        CHECK_FITS, FDECOMP, FIND, FTADDCOL, FTCREATE, SXADDHIST, SXADDPAR,        SXDELPAR, SXPAR(), WRITEFITS   REVISION HISTORY:        Written W. Landsman, STX  May, 1988        Added phpadu, J. Hill, STX, October, 1990        New calling syntax output to disk FITS table, W. Landsman    May 1996        Work with more than 32767 stars  W. Landsman August 1997        Converted to IDL V5.0   W. Landsman   September 1997        Remove obsolete !ERR system variable   W. Landsman   May 2000  ", "PRINTSILENTimageim_hdrfitsfilehminfwhmsharplimroundlim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/t_getpsf.html", "t_getpsf.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "t_getpsf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/t_getpsf.html#t_getpsf", "t_getpsf", 'routine in <a href="idlastro/t_getpsf.html">t_getpsf.pro</a>', "t_getpsf.pro", "", "t_getpsf", " NAME:        T_GETPSF  PURPOSE:        Driver procedure (for GETPSF) to generate a PSF from isolate stars.  EXPLANATION:        Generates a point-spread function from one or more isolated stars.        List of stars is read from the FITS ASCII table output of T_APER.        PSF is represented as a sum of a Gaussian plus residuals.        Ouput residuals are written to a FITS image file.   CALLING SEQUENCE:        T_GETPSF, image, fitsfile, [ idpsf, psfrad, fitrad, psfname,                                        /DEBUG, NEWTABLE =]   INPUTS:        IMAGE - image array        FITSFILE  - scalar string giving name of disk FITS ASCII table.  Must                contain the keywords 'X','Y' (from T_FIND) and 'AP1_MAG','SKY'                (from T_APER).   OPTIONAL INPUTS:        IDPSF - vector of stellar ID indices indicating which stars are to be                used to create the PSF.    Not that the PSF star should be                specified *not* by its STAR_ID value, but rather by the its                row number (starting with 0) in the FITS table        PSFRAD - the radius for which the PSF will be defined        FITRAD - fitting radius, always smaller than PSFRAD        PSFNAME - name of FITS image file to contain PSF residuals,                scalar string        GETPSF will prompt for all the above values if not supplied.   OPTIONAL KEYWORD INPUT        NEWTABLE - scalar string specifying the name of the output FITS ASCII                table.   If not supplied, then the input table is updated with                the keyword PSF_CODE, specifying which stars were used for the                PSF.        DEBUG - if this keyword is set and non-zero, then the result of each                fitting iteration will be displayed.   PROMPTS:        T_GETPSF will prompt for the readout noise (in data numbers), and        the gain (in photons or electrons per data number) so that pixels can        be weighted during the PSF fit.   To avoid the prompt, add the        keywords RONOIS and PHPADU to the FITS ASCII table header.   PROCEDURES USED:        FTADDCOL, FTGET(), FTPUT, GETPSF, READFITS(), SXADDHIST, SXADDPAR,        SXPAR(), WRITEFITS, ZPARCHECK  REVISION HISTORY:        Written  W. Landsman     STX           May, 1988        Update PSF_CODE to indicate PSF stars in order used, W. Landsman Mar 96        I/O to FITS ASCII disk files  W. Landsman    May 96        Converted to IDL V5.0   W. Landsman   September 1997        Update for new FTINFO call   W. Landsman   May 2000  ", "NEWTABLEDEBUGimagefitsfileidpsfpsfradfitradpsfname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/t_group.html", "t_group.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "t_group.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/t_group.html#t_group", "t_group", 'routine in <a href="idlastro/t_group.html">t_group.pro</a>', "t_group.pro", "", "t_group", " NAME: 	T_GROUP  PURPOSE: 	Driver procedure (for GROUP) to place stars in non-overlapping groups.  EXPLANATION: 	This procedure is part of the DAOPHOT sequence that places star 	positions with non-overlapping PSFs into distinct groups 	Input and output are to FITS ASCII tables   CALLING SEQUENCE: 	T_GROUP, fitsfile, [ rmax, XPAR = , YPAR = , NEWTABLE = ]   INPUTS: 	FITSFILE -  Name of disk FITS ASCII table containing the X,Y positions 		in FITS (FORTRAN) convention (first pixel is 1,1)   OPTIONAL INPUTS: 	rmax - maximum allowable distance between stars in a single group   OPTIONAL INPUT KEYWORDS: 	XPAR, YPAR - scalar strings giving the field name in the output table 		containing the X and Y coordinates.   If not supplied, 		then the fields 'X' and 'Y' are read. 	NEWTABLE - scalar giving name of output disk FITS ASCII table.   If not 		supplied,   PROCEDURES: 	FTADDCOL, FTGET(), FTINFO, FTPUT, GROUP, READFITS(), SXADDHIST, 	SXADDHIST, WRITEFITS  REVISION HISTORY: 	Written, W. Landsman        STX Co.      May, 1996 	Converted to IDL V5.0   W. Landsman   September 1997        Updated for new FTINFO call    W. Landsman    May 2000  ", "xparyparNEWTABLEfitsfilermax", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/t_nstar.html", "t_nstar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "t_nstar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/t_nstar.html#t_nstar", "t_nstar", 'routine in <a href="idlastro/t_nstar.html">t_nstar.pro</a>', "t_nstar.pro", "", "t_nstar", " NAME:        T_NSTAR  PURPOSE:        Driver procedure (for NSTAR) for simultaneous PSF fitting.  EXPLANATION:        Input and output are to disk FITS ASCII tables.   CALLING SEQUENCE:        T_NSTAR, image, fitsfile, [psfname, groupsel, /SILENT, /PRINT                                NEWTABLE = , /VARSKY ]  INPUTS:        IMAGE - 2-d image array        FITSFILE  - scalar string giving name of disk FITS ASCII table.  Must                contain the keywords 'X','Y' (from T_FIND) 'AP1_MAG','SKY'                (from T_APER) and 'GROUP_ID' (from T_GROUP).   This table                will be updated with the results of T_NSTAR, unless the                keyword NEWTABLE is supplied.   OPTIONAL INPUTS:        PSFNAME - Name of the FITS file created by T_GETPSF containing                PSF residuals, scalar string        GROUPSEL - Scalar or vector listing the groups to process.  For                example, to process stars in groups 2 and 5 set                GROUPSEL = [2,5].  If omitted, or set equal to -1,                then NSTAR will process all groups.   OPTIONAL KEYWORD INPUTS:        VARSKY - If this keyword is set and non-zero, then the mean sky level                in each group of stars, will be fit along with the brightness                and positions.        /SILENT - if set and non-zero, then NSTAR will not display its results                at the terminal        /PRINT - if set and non-zero then NSTAR will also write its results to                a file NSTAR.PRT.   One can specify the output file name by                setting PRINT = 'filename'.        NEWTABLE  - Name of output disk FITS ASCII table to contain the results                of NSTAR.   If not supplied, then the input FITSFILE will be                updated.        DEBUG - if this keyword is set and non-zero, then the result of each                fitting iteration will be displayed.   PROCEDURES CALLED:        FTADDCAL, FTINFO, FTGET(), FTPUT, NSTAR, SXADDHIST,        SXADDPAR, SXPAR(), READFITS(), WRITEFITS  REVISION HISTORY:        Written        W. Landsman         STX Co.    May, 1988        Check for CCDGAIN, ATODGAIN keywords to get PHPADU  W. Landsman May 1997        Fixed typo preventing compilation, groupsel parameter W.L. July 1997        Converted to IDL V5.0   W. Landsman   September 1997        Update for new FTINFO call    W. Landsman   May 2000  ", "SILENTPRINTNEWTABLEVARSKYDEBUGimagefitsfilepsfnamegroupsel", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/t_substar.html", "t_substar.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "t_substar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/t_substar.html#t_substar", "t_substar", 'routine in <a href="idlastro/t_substar.html">t_substar.pro</a>', "t_substar.pro", "", "t_substar", " NAME:        T_SUBSTAR  PURPOSE:        Driver procedure (for SUBSTAR) to subtract scaled PSF values  EXPLANATION:        Computes residuals of the PSF fitting program   CALLING SEQUENCE:        T_SUBSTAR, image, fitsfile, id,[ psfname, /VERBOSE, /NOPSF ]   INPUT-OUTPUT:        IMAGE -  On input, IMAGE is the original image array.  A scaled                PSF will be subtracted from IMAGE at specified star positions.                Make a copy of IMAGE before calling SUBSTAR, if you want to                keep a copy of the unsubtracted image array  INPUTS:        FITSFILE  - scalar string giving the name of the disk FITS ASCII                produced as an output from T_NSTAR.   OPTIONAL INPUTS:        ID -  Index vector indicating which stars are to be subtracted.  If                omitted, (or set equal to -1), then stars will be subtracted                at all positions specified by the X and Y vectors.                (IDL convention - zero-based subscripts)        PSFNAME - Name of the FITS file containing the PSF residuals, as                generated by GETPSF.  SUBSTAR will prompt for this parameter                if not supplied.  OPTIONAL INPUT KEYWORD:        /VERBOSE - If this keyword is set and non-zero, then the value of each                star number will be displayed as it is processed.        /NOPSF - if this keyword is set and non-zero, then all stars will be                be subtracted *except* those used to determine the PSF.                An improved PSF can then be derived from the subtracted image.                If NOPSF is supplied, then the ID parameter is ignored  NOTES:        T_SUBSTAR does not modify the input FITS table.   PROCEDURES USED:        FTGET(), FTINFO, READFITS(), REMOVE, SUBSTAR  REVISION HISTORY:        Written, R. Hill, ST Sys. Corp., 22 August 1991        Added NOPSF keyword   W. Landsman        March, 1996        Use FITS format for PSF resduals         July, 1997        Converted to IDL V5.0   W. Landsman   September 1997        Call FTINFO first to improve efficiency   W. Landsman  May 2000  ", "VERBOSENOPSFimagefitsfileidpsfname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_addcol.html", "tab_addcol.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_addcol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_addcol.html#tab_addcol", "tab_addcol", 'routine in <a href="idlastro/tab_addcol.html">tab_addcol.pro</a>', "tab_addcol.pro", "", "tab_addcol", " NAME: 	TAB_ADDCOL  PURPOSE: 	Procedure to add a new column to an existing STSDAS table.   CALLING SEQUENCE: 	tab_addcol, name, data, tcb, tab   INPUTS: 	name - column name 	data - sample data of type to be written to the column. 		This parameter is only used to determine data type.   INPUT/OUTPUTS: 	tcb - table control block 	tab - table array   HISTORY: 	version 1  D. Lindler April 89 	Converted to IDL V5.0   W. Landsman   September 1997  ", "namedatatcbtab", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_col.html", "tab_col.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_col.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_col.html#tab_col", "tab_col", 'routine in <a href="idlastro/tab_col.html">tab_col.pro</a>', "tab_col.pro", "", "tab_col", " NAME: 	TAB_COL  PURPOSE: 	Procedure to extract column information from table control block   CALLING SEQUENCE: 	tab_col, tcb, column, offset, width, datatype, name, units, format   INPUTS: 	tcb - table control block returned by tab_open. 	column - column name (string) or column number   OUTPUTS: 	offset - column offset bytes 	width - column width in bytes 	datatype - column data type: 		6 - real*4 		7 - real*8 		4 - integer*4 		1 - boolean 		2 - character string 	name - column name 	units - column units 	format - format code   SIDE EFFECTS: 	If the column is not found then !err is set to -1. 	Otherwise !err is set to the column number (starting at one).   HISTORY: 	version 1  D. Lindler  Jan 88 	Converted to NEW IDL  April 90 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbcolumnoffsetwidthdatatypenameunitsformat", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_create.html", "tab_create.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_create.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_create.html#tab_create", "tab_create", 'routine in <a href="idlastro/tab_create.html">tab_create.pro</a>', "tab_create.pro", "", "tab_create", " NAME: 	TAB_CREATE  PURPOSE: 	Procedure to create a new table file.   CALLING SEQUENCE: 	tab_create, tcb, tab, maxcol, maxrows, row_len, tb_type   OUTPUTS: 	tcb - table control block for reading from and writing 		to the file (see tab_open for description) 	tab - table array   OPTIONAL INPUTS: 	maxcol - maximum allocated number of columns [default=10] 	maxrows - maximum allocated number of rows   [default=100] 	row_len - row length in 2 byte units	     [default=2*maxcol] 	tb_type - table type 'row' or 'column' ordered   SIDE EFFECTS: 	Table file is created and left opened to unit number tcb(0,0) 	for writing.   HISTORY: 	version 1   D. Lindler   Dec. 88 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbtabmaxcolmaxrowsrow_lentb_type", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_del.html", "tab_del.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_del.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_del.html#tab_del", "tab_del", 'routine in <a href="idlastro/tab_del.html">tab_del.pro</a>', "tab_del.pro", "", "tab_del", " NAME: 	TAB_DEL  PURPOSE: 	Delete specified row(s) from an STSDAS table   CALLING SEQUENCE: 	tab_del, tcb, tab, rows   INPUT/OUTPUTS 	tcb - table control block 	tab - table array   OPTIONAL INPUTS: 	rows - row (scalar) or rows(vector) to delete from the table 		If not supplied all rows are deleted.   HISTORY: 	version 1  D. Lindler  April 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbtabrows", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_expand.html", "tab_expand.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_expand.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_expand.html#tab_expand", "tab_expand", 'routine in <a href="idlastro/tab_expand.html">tab_expand.pro</a>', "tab_expand.pro", "", "tab_expand", " NAME: 	TAB_EXPAND  PURPOSE: 	routine to expand the size of an SDAS table file.   CALLING SEQUENCE: 	tab_expand, tcb, tab, maxcol, maxrow, rowlen   INPUT/OUTPUT: 	tcb - table control block returned by routine TAB_READ 		or TAB_CREATE. 	tab - table array   OPTIONAL INPUTS: 	maxcol - new maximum number of columns. 	maxrow - new maximum number of rows. 	rowlen - new maximum row length in 2 byte units.  	If maxcol, maxrow, or rowlen are supplied with 	values less than the previous maximums, the previous 	maximums are used.  All values are defaulted to zero 	if not supplied.   HISTORY: 	Version 1   D. Lindler   Dec. 88 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbtabmaxcolmaxrowrowlen", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_fortospp.html", "tab_fortospp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_fortospp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_fortospp.html#tab_fortospp", "tab_fortospp", 'routine in <a href="idlastro/tab_fortospp.html">tab_fortospp.pro</a>', "tab_fortospp.pro", "", "tab_fortospp", " NAME: 	TAB_FORTOSPP  PURPOSE: 	Procedure to convert a FORTRAN format to an SPP format specfication.   CALLING SEQUENCE: 	sppformat, format, sppformat   INPUTS: 	format - fortran format specification   OUTPUTS: 	sppformat - sppformat specification   HISTORY: 	version 1  D. Lindler   Jan, 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "formatsppformat", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_modcol.html", "tab_modcol.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_modcol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_modcol.html#tab_modcol", "tab_modcol", 'routine in <a href="idlastro/tab_modcol.html">tab_modcol.pro</a>', "tab_modcol.pro", "", "tab_modcol", " NAME: 	TAB_MODCOL  PURPOSE: 	Modify column description in a STSDAS table   CALLING SEQUENCE: 	tab_modcol, tcb, column, units, format, newname   INPUTS: 	tcb - table control block 	column - column name or number to be modified   OPTIONAL INPUTS: 	units - string giving physical units for the column. 		If not supplied or set to the null string 		the units are not changed. 	format - print format (either fortran or SPP format) 		An spp format should be preceeded by a '%'. 		If not supplied or set to a null string, the 		print format for the column is not changed. 	newname - new name for the column.  If not supplied 		or set to a null string, the name is not 		changed  EXAMPLES:  	change the wavelength column to WAVE with a new format 	of 'F10.3' and columns units of ANGSTROMS.  	   tab_modcol,tcb,'wavelength','ANGSTROMS','F10.3','WAVE'  	Change to print format of column 3 to spp format 	20.10e 	   tab_modcol,tcb,3,'','%20.10e'  HISTORY: 	version 1  D. Lindler   Apr 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbcolumnunitsformatnewname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_null.html", "tab_null.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_null.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_null.html#tab_null", "tab_null", 'routine in <a href="idlastro/tab_null.html">tab_null.pro</a>', "tab_null.pro", "", "tab_null", " NAME: 	TAB_NULL  PURPOSE: 	function to locate null values within a vector of values from 	an STSDAS table.   CALLING SEQUENCE 	result = tab_null(values)   INPUTS: 	values - data value(s)   OUTPUTS: 	a boolean variable is returned with the same length as values. 	1 indicates that the corresponding value was null   OPERATIONAL NOTES: 	Boolean columns in an STSDAS table does not presently 	have the capability to flag null values.   HISTORY: 	version 1   D. Lindler   April 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "values", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_nullrow.html", "tab_nullrow.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_nullrow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_nullrow.html#tab_nullrow", "tab_nullrow", 'routine in <a href="idlastro/tab_nullrow.html">tab_nullrow.pro</a>', "tab_nullrow.pro", "", "tab_nullrow", " NAME: 	TAB_NULLROW  PURPOSE: 	Insert null row(s) into a STSDAS table   CALLING SEQUENCE: 	tab_nullrow, tcb, tab, [ row1, row2  ]   INPUTS: 	tcb - table control block   INPUT/OUTPUTS: 	tab - table array   OPTIONAL INPUTS: 	row1 - first row number to insert nulls (default=0) 	row2 - last row number to insert nulls (default = last row)   HISTORY: 	version 1, D. Lindler  Apr 89 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbtabrow1row2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_print.html", "tab_print.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_print.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_print.html#tab_print", "tab_print", 'routine in <a href="idlastro/tab_print.html">tab_print.pro</a>', "tab_print.pro", "", "tab_print", " NAME: 	TAB_PRINT  PURPOSE: 	Routine to print an stsdas table.   CALLING SEQUENCE: 	tab_print, tcb, tab, columns, row1, row2   INPUTS: 	tcb - table control block returned by TAB_READ 	tab - table array read by TAB_READ   OPTIONAL INPUTS: 	columns - vector of column numbers to be printed or a string 		with column names separated by commas. If not supplied 		or set to the null string, all columns are printed.  	row1 - first row to print.  (default=0) 	row2 - last row to print.  (default=last row in table)   SIDE EFFECTS: 	text is printed as directed by !textout   HISTORY: 	version 1, D. Lindler  Apr 89 	April 90  Converted to NEW IDL D. Lindler 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbtabcolumnsrow1row2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_put.html", "tab_put.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_put.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_put.html#tab_put", "tab_put", 'routine in <a href="idlastro/tab_put.html">tab_put.pro</a>', "tab_put.pro", "", "tab_put", " NAME: 	TAB_PUT  PURPOSE: 	Procedure to place new values into a STSDAS table.   CALLING SEQUENCE: 	tab_put, column, values, tcb, tab, row   INPUTS: 	column - column name or number (if it is a new column then 		a column name must be specified) 	values - data values to add to the table   INPUT/OUTPUTS: 	tcb - table control block 	tab - table array   OPTIONAL INPUT: 	row - starting row to insert values   HISTORY: 	version 1  D. Lindler   April 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "columnvaluestcbtabrow", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_read.html", "tab_read.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_read.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_read.html#tab_read", "tab_read", 'routine in <a href="idlastro/tab_read.html">tab_read.pro</a>', "tab_read.pro", "", "tab_read", " NAME:    TAB_READ  PURPOSE:    Procedure to read an SDAS table file  CALLING SEQUENCE: 	tab_read,name,tcb,table,header  INPUTS: 	name - name of the table file  OUTPUTS: 	tcb - table control block 		Longword array of size 16 x maxcols+2 		where maxcols is the maximum number of columns 		allocated for the table. 		tcb(*,0) contains: 		   word	0	SPARE 			1	number of user parameters 			2	max. number of user par. allowed 			3	number of rows in the table 			4	number of allocated rows (for col. ordered tab) 			5	number of columns defined 			6	max number of columns 			7	length of row used (in units of 2-bytes) 			8	max row length (in units of 2-bytes) 					relevant only for row ordered tables. 			9	table type (11 for row order, 12 for col. order) 			15	update flag (0-readonly, 1-update) 		tcb(*,i) contains description of column i 		   word 0	column number 			1	offset for start of row in units of 2-bytes 			2	width or column in 2-byte units 			3	data type 					6 = real*4 					7 = real*8 					4 = integer*4 					1 = boolean*4 					2 = character string 			4-8	ascii column name up to 19 characters 			9-13	column units (up to 19 characters) 			14-15	format string 		tcb(*,max number of columns+1)= file name  	table - table array, Byte array row length (bytes) x nrows   	header - header parameters in form usable by sxpar, sxaddhist, 		sxaddpar, ect.  HISTORY: 	Version 1  D. Lindler  Jan 88 	Converted to NEW IDL  April 90  D. Lindler 	Converted to IDL V5.0   W. Landsman   September 1997  ", "nametcbtableheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_size.html", "tab_size.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_size.html#tab_size", "tab_size", 'routine in <a href="idlastro/tab_size.html">tab_size.pro</a>', "tab_size.pro", "", "tab_size", " NAME: 	TAB_SIZE  PURPOSE: 	Routine to extract the table size from a table control block   CALLING SEQUENCE: 	tab_size, tcb, nrows, ncols, maxrows, maxcols, rowlen, max_rowlen   INPUTS: 	tcb - table control block   OUTPUTS: 	nrows - number of rows in the table 	ncols - number of columns in the table 	maxrows - number of rows allocated 	maxcols - number of columns allocated 	rowlen - length of the rows in bytes 	max_rowlen - allocated row length   HISTORY: 	version 1  D. Lindler  April 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbnrowsncolsmaxrowsmaxcolsrowlenmax_rowlen", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_sort.html", "tab_sort.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_sort.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_sort.html#tab_sort", "tab_sort", 'routine in <a href="idlastro/tab_sort.html">tab_sort.pro</a>', "tab_sort.pro", "", "tab_sort", " NAME: 	TAB_SORT  PURPOSE: 	Procedure to sort table by the specified column   CALLING SEQUENCE: 	tab_sort, column, tcb, tab   INPUTS: 	column - column name or number to sort on 	tcb - table control block   INPUT/OUTPUTS: 	tab - table array   HISTORY: 	version 1  D. Lindler  April 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "columntcbtab", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_spptofor.html", "tab_spptofor.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_spptofor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_spptofor.html#tab_spptofor", "tab_spptofor", 'routine in <a href="idlastro/tab_spptofor.html">tab_spptofor.pro</a>', "tab_spptofor.pro", "", "tab_spptofor", " NAME: 	TAB_SPPTOFOR  PURPOSE: 	This procedure converts an spp format specification to a normal 	Fortran format specification.   CALLING SEQUENCE: 	tab_spptofor, sppformat, format, width   INPUTS: 	sppformat - spp format specification (without preceeding %)   OUTPUTS: 	forformat - fortran format specification (string) 	width - field width (integer)   HISTORY: 	version 1  D. Lindler  Jan 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "sppformatformatwidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_val.html", "tab_val.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_val.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_val.html#tab_val", "tab_val", 'routine in <a href="idlastro/tab_val.html">tab_val.pro</a>', "tab_val.pro", "", "tab_val", " NAME: 	TAB_VAL  PURPOSE: 	Routine to read a column from an SDAS table file   CALLING SEQUENCE: 	values = tab_val( tcb, table, column, [ rows ] )  INPUTS: 	tcb - table control block returned by tab_val 	table - table array returned by tab_val 	column - scalar column name or number  OPTIONAL INPUT: 	rows - scalar giving row number or vector giving rows. 		If not supplied all rows are returned.  OUTPUT: 	the values for the specified column (and rows) is returned 	as the function value.  If row is specified as a scalar 	(single row) then the result will be a scalar.  HISTORY: 	version 1  D. Lindler  Jan. 1988        Allow for a null column Landsman/Feggans    April 1992 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbtablecolumnrows", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tab_write.html", "tab_write.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tab_write.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tab_write.html#tab_write", "tab_write", 'routine in <a href="idlastro/tab_write.html">tab_write.pro</a>', "tab_write.pro", "", "tab_write", " NAME:        TAB_WRITE  PURPOSE:        Routine to write an stsdas table to disk   CALLING SEQUENCE:        tab_write, name, tcb, tab, header   INPUTS:        name - file name (default extension = .tab)        tcb - table control block        tab - table array   OPTIONAL INPUT:        header - FITS header array   HISTORY:        version 1  D. Lindler   April 1989        Converted to IDL V5.0   W. Landsman   September 1997        Remove VMS-specific OPEN statement  W. Landsman  September 2006   ", "nametcbtabheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tabinv.html", "tabinv.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tabinv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tabinv.html#TABINV", "TABINV", 'routine in <a href="idlastro/tabinv.html">tabinv.pro</a>', "tabinv.pro", "", "TABINV", " NAME:        TABINV  PURPOSE:        To find the effective index of a function value in an ordered vector.   CALLING SEQUENCE:        TABINV, XARR, X, IEFF, [/FAST]  INPUTS:        XARR - the vector array to be searched, must be monotonic                increasing or decreasing        X    - the function value(s) whose effective                index is sought (scalar or vector)   OUTPUT:        IEFF - the effective index or indices of X in XARR               always floating point, same # of elements as X   OPTIONAL KEYWORD INPUT:        /FAST - If this keyword is set, then the input vector is not checked                for monotonicity, in order to improve the program speed.  RESTRICTIONS:        TABINV will abort if XARR is not monotonic.  (Equality of        neighboring values in XARR is allowed but results may not be        unique.)  This requirement may mean that input vectors with padded        zeroes could cause routine to abort.   PROCEDURE:        VALUE_LOCATE() is used to find the values XARR[I]        and XARR[I+1] where XARR[I] &lt; X &lt; XARR[I+1].        IEFF is then computed using linear interpolation        between I and I+1.                IEFF = I + (X-XARR[I]) / (XARR[I+1]-XARR[I])        Let N = number of elements in XARR                if x &lt; XARR[0] then IEFF is set to 0                if x &gt; XARR[N-1] then IEFF is set to N-1   EXAMPLE:        Set all flux values of a spectrum (WAVE vs FLUX) to zero        for wavelengths less than 1150 Angstroms.         IDL&gt; tabinv, wave, 1150.0, I        IDL&gt; flux[ 0:fix(I) ] = 0.   FUNCTIONS CALLED:        None  REVISION HISTORY:        Adapted from the IUE RDAF                     January, 1988        More elegant code  W. Landsman                August, 1989        Mod to work on 2 element decreasing vector    August, 1992        Updated for V5.3 to use VALUE_LOCATE()     W. Landsman January 2000        Work when both X and Xarr are integers     W. Landsman August 2001        Use ARRAY_EQUAL, always internal double precision W.L.  July 2009        Allow Double precision output, faster test for monotonicity.                     WL, January 2012  ", "FASTXARRXIEFF", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/table_append.html", "table_append.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "table_append.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/table_append.html#table_append", "table_append", 'routine in <a href="idlastro/table_append.html">table_append.pro</a>', "table_append.pro", "", "table_append", " NAME: 	TABLE_APPEND  PURPOSE: 	Routine to append STSDAS tables to create a single table. 	Input tables must all have identical columns.   CALLING SEQUENCE: 	table_append,list,name   INPUTS: 	list - string array listing the file names or a string 		scalar giving a file name template. 	name - output file name.  SIDE EFFECTS: 	a new STSDAS table is created with the specified name.   OPERATIONAL NOTES: 	all input tables must have the same number of columns 	with the same names, datatypes, and column order. 	Header parameters are taken only from the first table.   HISTORY: 	version 1  D. Lindler	April 1989        Removed call to non-standard system variable !DUMP WBL  September 1997 	Converted to IDL V5.0   W. Landsman   September 1997        Use file_search rather than findfile  W. Landsman Sep 2006  ", "listname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/table_calc.html", "table_calc.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "table_calc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/table_calc.html#table_calc", "table_calc", 'routine in <a href="idlastro/table_calc.html">table_calc.pro</a>', "table_calc.pro", "", "table_calc", " NAME: 	TABLE_CALC  PURPOSE: 	Adds a new table column from a expression using existing columns   CALLING SEQUENCE: 	table_calc, table, expression, table_out   INPUTS: 	table - input SDAS table table 	expression - expression for new or updated column values. 		Any legal IDL expression is valid where existing 		column names can be used as variables.  User functions 		within the expression are allowed if the function 		is in an IDL library or previously compiled.   OPTIONAL INPUT: 	table_out - output table name.  If not supplied, the 		input name is used.   OUTPUTS: 	a new SDAS table file is created.   EXAMPLES:  	 create a column WAVELENGTH in table TAB which is the average 	of the WLOW and WHIGH columns of table TAB.  		table_calc,'tab','WAVELENGTH=(WLOW+WHIGH)/2.0'  	add a column SINX which is the sin of column X to table JUNK.  		table_calc,'junk','SINX=sin(X)'  	add 10.0 to an existing column in table MYTAB.  		table_calc,'mytab','flux=flux+10.0'   HISTORY 	version 1  D. Lindler November, 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tableexpressiontable_out", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/table_delete.html", "table_delete.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "table_delete.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/table_delete.html#table_delete", "table_delete", 'routine in <a href="idlastro/table_delete.html">table_delete.pro</a>', "table_delete.pro", "", "table_delete", " NAME: 	TABLE_DELETE  PURPOSE: 	Delete specified rows from an STSDAS table   CALLING SEQUENCE: 	table_delete, name, rows, [ outname ]   INPUT: 	name - table name 	rows - row (scalar) or rows(vector) to delete from the table   OPTIONAL OUTPUT: 	outname - output table name, if not supplied the input name 		is used   HISTORY: 	version 1  D. Lindler  April 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "namerowsoutname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/table_ext.html", "table_ext.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "table_ext.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/table_ext.html#table_ext", "table_ext", 'routine in <a href="idlastro/table_ext.html">table_ext.pro</a>', "table_ext.pro", "", "table_ext", " NAME: 	TABLE_EXT  PURPOSE: 	Routine to extract columns from an STSDAS table   CALLING SEQUENCE: 	TABLE_EXT, name, columns, v1, [v2,v3,v4,v5,v6,v7,v8,v9]  INPUTS: 	name - table name, scalar string 	columns - table columns to extract.  Can be either 		(1) String with names separated by commas 		(2) Scalar or vector of column numbers   OUTPUTS: 	v1,...,v9 - values for the columns   EXAMPLES: 	Read wavelength and throughput vectors from STSDAS table, wfpc_f725.tab  	IDL&gt; table_ext,'wfpc_f725.tab','wavelength,throughput',w,t 		or 	IDL&gt; table_ext,'wfpc_f725.tab',[1,2],w,t   PROCEDURES CALLED: 	GETTOK(), TAB_READ, TAB_VAL()  HISTORY: 	version 1  D. Lindler  May 1989 	Accept Column Numbers as well as names, W. Landsman  February 1996 	Converted to IDL V5.0   W. Landsman   September 1997  ", "namecolumnsv1v2v3v4v5v6v7v8v9", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/table_help.html", "table_help.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "table_help.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/table_help.html#table_help", "table_help", 'routine in <a href="idlastro/table_help.html">table_help.pro</a>', "table_help.pro", "", "table_help", " NAME: 	TABLE_HELP  PURPOSE: 	Procedure to decribe an SDAS table file.   CALLING SEQUENCE: 	table_help, tcb, header 	table_help, name   INPUTS: 	tcb - table control block returned by TAB_READ or TAB_CREATE 	name -	the table name   OPTIONAL INPUTS: 	header - header array returned by TAB_READ.  If supplied 		it will be printed, otherwise it won't.   SIDE EFFECTS: 	text output as specified by !textout   HISTORY: 	version 1  D. Lindler  JAN 1988 	Converted to IDL V5.0   W. Landsman   September 1997  ", "tcbheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/table_list.html", "table_list.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "table_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/table_list.html#table_list", "table_list", 'routine in <a href="idlastro/table_list.html">table_list.pro</a>', "table_list.pro", "", "table_list", " NAME: 	TABLE_LIST  PURPOSE: 	List the contents of an STSDAS table.  EXPLANATION: 	Procedure to list contents of an STSDAS table.  This does not 	print the table in tabular form but instead for each row 	prints the column name followed by its value (one column per 	output line.   CALLING SEQUENCE: 	table_list, name, row1, row2, [ TEXTOUT=, /HEADER ]   INPUTS: 	name - table name   OPTIONAL KEYWORD INPUT: 	TEXTOUT  - Scalar string giving output file name, or integer (1-5) 		specifying output device.   See TEXTOPEN for more info. 		Default is to display output at the terminal 	HEADER - if set, the header is printed before the selected row printout   OPTIONAL INPUTS: 	row1 - first row to list (default = first row) 	row2 - last row to list (default = last row)   OUTPUT: 	text output is written to the output device specified by the TEXTOUT 	keyword, or the nonstandard system variable !TEXTOUT   PROCEDURES USED: 	TAB_COL, TAB_READ, TAB_SIZE, TAB_VAL(), TEXTOPEN, TEXTCLOSE   HISTORY: 	version 1  D. Lindler   May 1989 	July 1996, DJL, added /header keyword to optionally print header 	August 1996, WBL, added TEXTOUT keyword 	Converted to IDL V5.0   W. Landsman   September 1997  ", "headertextoutnamerow1row2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/table_print.html", "table_print.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "table_print.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/table_print.html#table_print", "table_print", 'routine in <a href="idlastro/table_print.html">table_print.pro</a>', "table_print.pro", "", "table_print", " NAME: 	TABLE_PRINT  PURPOSE: 	Routine to print an stsdas table.   CALLING SEQUENCE: 	table_print, name, columns, row1, row2   INPUTS: 	name - table name   OPTIONAL INPUTS: 	columns - vector of column numbers to be printed or a string 		with column names separated by commas. If not supplied 		or set to the null string, all columns are printed.  	row1 - first row to print.  (default=0) 	row2 - last row to print.  (default=last row in table)   SIDE EFFECTS: 	text is printed as directed by !textout   HISTORY: 	version 1, D. Lindler  Apr 89 	Converted to IDL V5.0   W. Landsman   September 1997  ", "namecolumnsrow1row2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/table_sort.html", "table_sort.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "table_sort.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/table_sort.html#table_sort", "table_sort", 'routine in <a href="idlastro/table_sort.html">table_sort.pro</a>', "table_sort.pro", "", "table_sort", " NAME: 	TABLE_SORT  PURPOSE: 	Procedure to sort an STSDAS table by the specified column   CALLING SEQUENCE: 	table_sort, name, column, [ name_out ]   INPUTS: 	name - table name 	column - column to sort on   OPTIONAL INPUTS: 	name_out - output table name.  If not supplied, input name 		is used.   HISTORY: 	version 1  D. Lindler  MAY 1989 	Converted to IDL V5.0   W. Landsman   September 1997  ", "namecolumnname_out", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tag_exist.html", "tag_exist.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tag_exist.pro", "", "", " NAME:        TAG_EXIST()  PURPOSE:        To test whether a tag name exists in a structure.  EXPLANATION:        Routine obtains a list of tagnames and tests whether the requested one        exists or not. The search is recursive so if any tag names in the        structure are themselves structures the search drops down to that level.        (However, see the keyword TOP_LEVEL).   CALLING SEQUENCE:        status = TAG_EXIST(str, tag, [ INDEX =, /TOP_LEVEL, /QUIET ] )   INPUT PARAMETERS:        str  -  structure variable to search        tag  -  tag name to search for, scalar string   OUTPUTS:        Function returns 1b if tag name exists or 0b if it does not.   OPTIONAL INPUT KEYWORD:        /TOP_LEVEL = If set, then only the top level of the structure is                            searched.        /QUIET - if set, then do not print messages if invalid parameters given        /RECURSE - does nothing but kept for compatibility with the                   Solarsoft version for which recursion is not the default         http://sohowww.nascom.nasa.gov/solarsoft/gen/idl/struct/tag_exist.pro  OPTIONAL OUTPUT KEYWORD:        INDEX = index of matching tag, scalar longward, -1 if tag name does                not exist   EXAMPLE:        Determine if the tag 'THICK' is in the !P system variable         IDL&gt; print,tag_exist(!P,'THICK')   PROCEDURE CALLS:        None.   MODIFICATION HISTORY:     :        Written,       C D Pike, RAL, 18-May-94        Passed out index of matching tag,  D Zarro, ARC/GSFC, 27-Jan-95        William Thompson, GSFC, 6 March 1996    Added keyword TOP_LEVEL        Zarro, GSFC, 1 August 1996    Added call to help        Use SIZE(/TNAME) rather than DATATYPE()  W. Landsman  October 2001        Added /RECURSE and /QUIET for compatibility with Solarsoft version                 W. Landsman  March 2009        Slightly faster algorithm   W. Landsman    July 2009        July 2009 update was not setting Index keyword  W. L   Sep 2009.        Use V6.0 notation W.L. Jan 2012         Not setting index again, sigh  W.L./ K. Allers  Jan 2012  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tag_exist.html#tag_exist", "tag_exist", 'routine in <a href="idlastro/tag_exist.html">tag_exist.pro</a>', "tag_exist.pro", "", "tag_exist", "", "indextop_levelrecursequietstrtag", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tbdelcol.html", "tbdelcol.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tbdelcol.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tbdelcol.html#tbdelcol", "tbdelcol", 'routine in <a href="idlastro/tbdelcol.html">tbdelcol.pro</a>', "tbdelcol.pro", "", "tbdelcol", " NAME:        TBDELCOL  PURPOSE:        Delete a column of data from a FITS binary table   CALLING SEQUENCE:        TBDELCOL, h, tab, name   INPUTS-OUPUTS        h,tab - FITS binary table header and data array.  H and TAB will                be updated with the specified column deleted   INPUTS:        name - Either (1) a string giving the name of the column to delete                        or (2) a scalar giving the column number to delete   EXAMPLE:        Delete the column  FLUX  from FITS binary table test.fits         IDL&gt; tab = readfits('test.fits',h,/ext)    ;Read table        IDL&gt; tbdelcol, h, tab, 'FLUX'              ;Delete Flux column        IDL&gt; modfits,'test.fits',tab,h,/ext        ;Write back table   PROCEDURES USED:        SXADDPAR, TBINFO, TBSIZE  REVISION HISTORY:        Written   W. Landsman        STX Co.     August, 1988        Use new structure returned by TBINFO,  August, 1997        Use SIZE(/TNAME) instead of DATATYPE()   October 2001        Use /NOSCALE in call to TBINFO, update TDISP   W. Landsman   March 2007  ", "htabname", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tbdelrow.html", "tbdelrow.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tbdelrow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tbdelrow.html#tbdelrow", "tbdelrow", 'routine in <a href="idlastro/tbdelrow.html">tbdelrow.pro</a>', "tbdelrow.pro", "", "tbdelrow", " NAME: 	TBDELROW  PURPOSE: 	Delete specified row or rows of data from a FITS binary table   CALLING SEQUENCE: 	TBDELROW, h, tab, rows   INPUTS-OUPUTS 	h,tab - FITS binary table header and data array.  H and TAB will 		be updated on output with the specified row(s) deleted.  	rows  -  scalar or vector, specifying the row numbers to delete 		First row has index 0.   If a vector it will be sorted and 		duplicates removed by TBDELROW   EXAMPLE: 	Compress a table to include only non-negative flux values  	flux = TBGET(h,tab,'FLUX')       ;Obtain original flux vector 	bad = where(flux lt 0)           ;Find negative fluxes 	TBDELROW,h,tab,bad               ;Delete rows with negative fluxes   PROCEDURE: 	Specified rows are deleted from the data array, TAB.  The NAXIS2 	keyword in the header is updated.   REVISION HISTORY: 	Written   W. Landsman        STX Co.     August, 1988 	Checked for IDL Version 2, J. Isensee, July, 1990 	Converted to IDL V5.0   W. Landsman   September 1997  ", "htabrows", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tbget.html", "tbget.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tbget.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tbget.html#tbget", "tbget", 'routine in <a href="idlastro/tbget.html">tbget.pro</a>', "tbget.pro", "", "tbget", " NAME:        TBGET  PURPOSE:        Return value(s) from specified column in a FITS binary table   CALLING SEQUENCE        values = TBGET( h, tab, field, [ rows, nulls, /NOSCALE] )                or        values = TBGET( tb_str, tab, field, [ rows, nulls, /NOSCALE] )   INPUTS:        h - FITS binary table header, e.g. as returned by FITS_READ                        or        tb_str - IDL structure extracted from FITS header by TBINFO.                Use of the IDL structure will improve processing speed        tab - FITS binary table array, e.g. as returned by FITS_READ        field - field name or number, scalar   OPTIONAL INPUTS:        rows -  scalar or vector giving row number(s)                Row numbers start at 0.  If not supplied or set to                -1 then values for all rows are returned   OPTIONAL KEYWORD INPUT:        /NOSCALE - If this keyword is set and nonzero, then the TSCALn and                TZEROn keywords will *not* be used to scale to physical values                Default is to perform scaling        CONTINUE - This keyword does nothing, it is kept for consistency with                with earlier versions of TBGET().  OUTPUTS:        the values for the row are returned as the function value.        Null values are set to 0 or blanks for strings.   OPTIONAL OUTPUT:        nulls - null value flag of same length as the returned data.                Only used for integer data types, B, I, and J                It is set to 1 at null value positions and 0 elsewhere.                If supplied then the optional input, rows, must also                be supplied.   EXAMPLE:        Read the columns labeled 'WAVELENGTH' and 'FLUX' from the second        extension of a FITS file 'spectra.fits' into IDL vectors w and f         IDL&gt; fits_read,'spectra.fits',tab,htab,exten=2   ;Read 2nd extension        IDL&gt; w = tbget(htab,tab,'wavelength')        IDL&gt; f = tbget(htab,tab,'flux')   NOTES:        (1) If the column is variable length ('P') format, then TBGET() will        return the longword array of pointers into the heap area.   TBGET()        currently lacks the ability to actually extract the data from the        heap area.        (2) Use the higher-level procedure FTAB_EXT (which calls TBGET()) to        extract vectors directly from the FITS file.        (3) Use the procedure FITS_HELP to determine which extensions are        binary tables, and FTAB_HELP or TBHELP to determine the columns of the        table  PROCEDURE CALLS:        TBINFO, TBSIZE  HISTORY:        Written  W. Landsman        February, 1991        Work for string and complex   W. Landsman         April, 1993        Default scaling by TSCALn, TZEROn, Added /NOSCALE keyword,        Fixed nulls output, return longword pointers for variable length                binary tables,     W. Landsman  December 1996        Added a check for zero width column  W. Landsman   April, 1997        Add TEMPORARY() and REFORM() for speed  W. Landsman  May, 1997        Use new structure returned by TBINFO    W. Landsman  August 1997        Add IS_IEEE_BIG(), No subscripting when all rows requested                                W. Landsman    March 2000        Use SIZE(/TNAME) instead of DATATYPE()  W. Landsman October 2001        Bypass IEEE_TO_HOST call for improved speed W. Landsman November 2002        Cosmetic changes to SIZE() calls W. Landsman December 2002        Added unofficial support for 64bit integers W. Landsman February 2003        Support unsigned integers, new pointer types of TSCAL and TZERO        returned by TBINFO   W. Landsman        April 2003        Add an i = i[0] for V6.0 compatibility  W. Landsman  August 2003        Use faster BYTEORDER byteswapping  W. Landsman April 2006        Free pointers if FITS header supplied W. Landsman March 2007  ", "NOSCALECONTINUEhdr_or_tbstrtabfieldrowsnulls", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tbhelp.html", "tbhelp.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tbhelp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tbhelp.html#tbhelp", "tbhelp", 'routine in <a href="idlastro/tbhelp.html">tbhelp.pro</a>', "tbhelp.pro", "", "tbhelp", " NAME:        TBHELP  PURPOSE:        Routine to print a description of a FITS binary table header   CALLING SEQUENCE:        TBHELP, h, [TEXTOUT = ]   INPUTS:        h - FITS header for a binary table, string array   OPTIONAL INPUT KEYWORD:        TEXTOUT - scalar number (0-7) or string (file name) controling                output device (see TEXTOPEN).  Default is TEXTOUT=1, output                to the user's terminal   METHOD:        FITS Binary Table keywords NAXIS*,EXTNAME,TFIELDS,TTYPE*,TFORM*,TUNIT*,        are read from the header and displayed at the terminal         A FITS header is recognized as bein for a binary table if the keyword        XTENSION has the value 'BINTABLE' or 'A3DTABLE'   NOTES:        Certain fields may be truncated in the display  SYSTEM VARIABLES:        Uses the non-standard system variables !TEXTOUT and !TEXTUNIT.   These        are automatically defined by TBHELP if they have not been defined        previously.  PROCEDURES USED:        REMCHAR, SXPAR(), TEXTCLOSE, TEXTOPEN, ZPARCHECK  HISTORY:        W. Landsman       February, 1991        Parsing of a FITS binary header made more robust    May, 1992        Added TEXTOUT keyword      August 1997        Define !TEXTOUT if not already present   W. Landsman  November 2002        Slightly more compact display   W. Landsman August 2005        Fix Aug 2005 error omitting TFORM display W. Landsman Sep 2005  ", "TEXTOUTh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tbinfo.html", "tbinfo.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tbinfo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tbinfo.html#tbinfo", "tbinfo", 'routine in <a href="idlastro/tbinfo.html">tbinfo.pro</a>', "tbinfo.pro", "", "tbinfo", " NAME:        TBINFO  PURPOSE:        Return an informational IDL structure from a FITS binary table header.   CALLING SEQUENCE:        tbinfo, h, tb_str, [ERRMSG = ]  INPUTS:        h - FITS binary table header, e.g. as returned by READFITS()   OUTPUTS:        tb_str - IDL structure with extracted info from the FITS binary table                header.   Tags include        .tbcol - starting column position in bytes, integer vector        .width - width of the field in bytes, integer vector        .idltype - idltype of field, byte vector                7 - string, 4- real*4, 3-integer*4, 5-real*8        .numval - repeat count, longword vector        .tunit - string unit numbers, string vector        .tnull - integer null value for the field, stored as a string vector                  so that an empty string indicates that TNULL is not present        .tform - format for the field, string vector        .ttype - field name, string vector        .maxval- maximum number of elements in a variable length array, long                vector        .tscal - pointer array giving the scale factor for converting to                 physical values, default 1.0        .tzero - pointer array giving the additive offset for converting to                 physical values, default 0.0        .tdisp - recommended output display format         All of the output vectors will have same number of elements, equal        to the number of columns in the binary table.         The .tscal and .tzero values are stored as pointers so as to preserve        the individual data types (e.g. float or double) which may differ        in different columns.   For example, to obtain the value of TSCAL for        the third column use *tab_str.tscal[2]  OPTIONAL INPUT KEYWORD:        /NOSCALE - if set, then the TSCAL* and TZERO* keywords are not extracted             from the FITS header, and the .tscal and .tzero pointers do not             appear in the output structure.  OPTIONAL OUTPUT KEYWORD:         ERRMSG = if present, then error messages are returned in this keyword             rather than displayed using the MESSAGE facility  PROCEDURES USED:        SXPAR()  NOTES:        For variable length ('P' format) column, TBINFO returns values for        reading the 2 element longward array of pointers (numval=2,        idltype = 3, width=4)  HISTORY:        Major rewrite to return a structure      W. Landsman   August 1997        Added  unofficial  64 bit integer  K  format W. Landsamn Feb. 2003        Store .tscal and .tzero tags as pointers, so as to preserve        type information   W. Landsman          April 2003        Treat repeat count for string as specifying string length, not number           of elements, added ERRMSG    W. Landsman        July 2006        Treat logical as character string 'T' or 'F' W. Landsman  October 2006        Added NOSCALE keyword  W. Landsman   March 2007  ", "errmsgNOSCALEhtb_str", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tbprint.html", "tbprint.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tbprint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tbprint.html#tbprint", "tbprint", 'routine in <a href="idlastro/tbprint.html">tbprint.pro</a>', "tbprint.pro", "", "tbprint", " NAME:        TBPRINT   PURPOSE:        Procedure to print specified columns & rows of a FITS binary table   CALLING SEQUENCE:        TBPRINT, h, tab, columns, [ rows, TEXTOUT =, FMT=, NUM_HEADER= ]                or        TBPRINT,tb_str, tab, columns, [ rows, TEXTOUT =, FMT=, NUM_HEADER =  ]   INPUTS:        h - FITS header for table, string array                        or        tb_str - IDL structure extracted from FITS header by TBINFO, useful            when TBPRINT is called many times with the same header        tab - table array        columns - string giving column names, or vector giving                column numbers (beginning with 1).  If string                supplied then column names should be separated by comma's.                If set to '*' then all columns are printed in table format                (1 row per line, binary tables only).        rows - (optional) vector of row numbers to print.  If                not supplied or set to scalar, -1, then all rows                are printed.   OUTPUTS:        None  OPTIONAL INPUT KEYWORDS:        FMT = Format string for print display.   If not supplied, then any                formats in the TDISP keyword fields of the table will be                used, otherwise IDL default formats.        NUM_HEADER_LINES - Number of lines to display the column headers                default = 1).  By setting NUM_HEADER_LINES to an integer larger                than 1, one can avoid truncation of the column header labels.                In addition, setting NUM_HEADER_LINES will display commented                lines indicating a FORMAT for reading the data, and a                suggested call to  readfmt.pro.        NVAL_PER_LINE - The maximum number of values displayed from a multivalued                column when printing in table format.   Default = 6        TEXTOUT - scalar number (0-7) or string (file name) determining                output device (see TEXTOPEN).  Default is TEXTOUT=1, output                to the user's terminal  SYSTEM VARIABLES:        Uses nonstandard system variables !TEXTOUT and !TEXTOPEN        Set !TEXTOUT = 3 to direct output to a disk file.   The system        variable is overriden by the value of the keyword TEXTOUT   EXAMPLES:        tab = readfits('test.fits',htab,/ext) ;Read first extension into vars        tbprint,h,tab,'STAR ID,RA,DEC'    ;print id,ra,dec for all stars        tbprint,h,tab,[2,3,4],indgen(100) ;print columns 2-4 for                                           first 100 stars        tbprint,h,tab,text= stars.dat     ;Convert entire FITS table to                                          ;an ASCII file named 'stars.dat'   PROCEDURES USED:        GETTOK(), STRNUMBER(), TEXTOPEN, TEXTCLOSE, TBINFO   RESTRICTIONS:        (1) Program does not check whether output length exceeds output                device capacity (e.g. 80 or 132).        (2) Column heading may be truncated to fit in space defined by                the FORMAT specified for the column.    Use NUM_HEADER_LINES                to avoid truncation.        (3) Program does not check for null values        (4) Does not work with variable length columns        (5) Will only the display the first value of fields with multiple values         (unless there is one row each with the same number of mulitple values)         If printing in table format (column='*') then up to 6 values         can be printed per line.   HISTORY:        version 1  D. Lindler Feb. 1987        Accept undefined values of rows,columns W. Landsman  August 1997        Use new structure returned by TBINFO    W. Landsman  August 1997        Made formatting more robust    W. Landsman   March 2000        Use STRSPLIT to parse string column listing W. Landsman July 2002        Wasn't always printing last row   W. Landsman  Feb. 2003        Better formatting (space between columns) W. Landsman Oct. 2005        Use case-insensitive match with TTYPE, use STRJOIN W.L. June 2006        Fixed check for multiple values W.L. August 2006        Fixed bad index value in August 2006 fix  W.L Aug 15 2006        Free-up pointers after calling TBINFO  W.L. Mar 2007        Add table format capability  W.L. Mar 2010        Add NUM_HEADER_LINE keyword  P. Broos Apr 2010  ", "textoutfmtnum_header_linesnval_per_linehdr_or_tbstrtabcolumnsrows", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tbsize.html", "tbsize.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tbsize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tbsize.html#tbsize", "tbsize", 'routine in <a href="idlastro/tbsize.html">tbsize.pro</a>', "tbsize.pro", "", "tbsize", " NAME:        TBSIZE   PURPOSE:        Procedure to return the size of a FITS binary table.   CALLING SEQUENCE:        tbsize, h, tab, ncols, nrows, tfields, ncols_all, nrows_all   INPUTS:        h - FITS table header        tab - FITS table array   OUTPUTS:        ncols - number of characters per row in table        nrows - number of rows in table        tfields - number of fields per row        ncols_all - number of characters/row allocated (size of tab)        nrows_all - number of rows allocated  PROCEDURES USED:        SXPAR()  HISTORY        D. Lindler  July, 1987        Converted to IDL V5.0   W. Landsman   September 1997        Remove obsolete !ERR call   W. Landsman   May 2000  ", "htabncolsnrowstfieldsncols_allnrows_all", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tdb2tdt.html", "tdb2tdt.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tdb2tdt.pro", "", "", " NAME:    TDB2TDT   AUTHOR:    Craig B. Markwardt, NASA/GSFC Code 662, Greenbelt, MD 20770    craigm@lheamail.gsfc.nasa.gov    UPDATED VERSIONs can be found on my WEB PAGE:       http://cow.physics.wisc.edu/~craigm/idl/idl.html   PURPOSE:    Relativistic clock corrections due to Earth motion in solar system   MAJOR TOPICS:    Planetary Orbits   CALLING SEQUENCE:    corr = TDB2TDT(JD, TBASE=, DERIV=deriv)   DESCRIPTION:     The function TDB2TDT computes relativistic corrections that must    be applied when performing high precision absolute timing in the    solar system.     According to general relativity, moving clocks, and clocks at    different gravitational potentials, will run at different rates    with respect to each other.  A clock placed on the earth will run    at a time-variable rate because of the non-constant influence of    the sun and other planets.  Thus, for the most demanding    astrophysical timing applications -- high precision pulsar timing    -- times in the accelerating earth observer's frame must be    corrected to an inertial frame, such as the solar system    barycenter (SSB).  This correction is also convenient because the    coordinate time at the SSB is the ephemeris time of the JPL    Planetary Ephemeris.     In general, the difference in the rate of Ti, the time kept by an    arbitrary clock, and the rate of T, the ephemeris time, is given    by the expression (Standish 1998):        dTi/dT = 1 - (Ui + vi^2/2) / c^2     where Ui is the potential of clock i, and vi is the velocity of    clock i.  However, when integrated, this expression depends on the    position of an individual clock.  A more convenient approximate    expression is:       T = Ti + (robs(Ti) . vearth(T))/c^2 + dtgeo(Ti) + TDB2TDT(Ti)     where robs is the vector from the geocenter to the observer;    vearth is the vector velocity of the earth; and dtgeo is a    correction to convert from the observer's clock to geocentric TT    time.  TDB2TDT is the value computed by this function, the    correction to convert from the geocenter to the solar system    barycenter.     As the above equation shows, while this function provides an    important component of the correction, the user must also be    responsible for (a) correcting their times to the geocenter (ie,    by maintaining atomic clock corrections); (b) estimating the    observatory position vector; and and (c) estimating earth's    velocity vector (using JPLEPHINTERP).     Users may note a circularity to the above equation, since    vearth(T) is expressed in terms of the SSB coordinate time.  This    appears to be a chicken and egg problem since in order to get the    earth's velocity, the ephemeris time is needed to begin with.    However, to the precision of the above equation, &lt; 25 ns, it is    acceptable to replace vearth(T) with vearth(TT).     The method of computation of TDB2TDT in this function is based on    the analytical formulation by Fairhead, Bretagnon & Lestrade, 1988    (so-called FBL model) and Fairhead & Bretagnon 1990, in terms of    sinusoids of various amplitudes.  TDB2TDT has a dominant periodic    component of period 1 year and amplitude 1.7 ms.  The set of 791    coefficients used here were drawn from the Princeton pulsar timing    program TEMPO version 11.005 (Taylor & Weisberg 1989).     Because the TDB2TDT quantity is rather expensive to compute but    slowly varying, users may wish to also retrieve the time    derivative using the DERIV keyword, if they have many times to    convert over a short baseline.   Verification     This implementation has been compared against a set of FBL test    data found in the 1996 IERS Conventions, Chapter 11, provided by    T. Fukushima.  It has been verified that this routine reproduces    the Fukushima numbers to the accuracy of the table, within    10^{-14} seconds.     Fukushima (1995) has found that the 791-term Fairhead & Bretagnon    analytical approximation use here has a maximum error of 23    nanoseconds in the time range 1980-2000, compared to a numerical    integration.  In comparison the truncated 127-term approximation    has an error of ~130 nanoseconds.   PARAMETERS:     JD - Geocentric time TT, scalar or vector, expressed in Julian         days.  The actual time used is (JD + TBASE).  For maximum         precision, TBASE should be used to express a fixed epoch in         whole day numbers, and JD should express fractional offset         days from that epoch.   KEYWORD PARAMETERS:     TBASE - scalar Julian day of a fixed epoch, which provides the            origin for times passed in JD.           Default: 0     DERIV - upon return, contains the derivative of TDB2TDT in units            of seconds per day.  As many derivatives are returned as            values passed in JD.   RETURNS:    The correction offset(s) in units of seconds, to be applied as    noted above.   EXAMPLE:     Find the correction at ephemeris time 2451544.5 (JD):      IDL&gt; print, tdb2tdt(2451544.5d)        -0.00011376314    or 0.11 ms.   REFERENCES:     Princeton TEMPO Program       http://pulsar.princeton.edu/tempo/     FBL Test Data Set       ftp://maia.usno.navy.mil/conventions/chapter11/fbl.results     Fairhead, L. & Bretagnon, P. 1990, A&A, 229, 240      (basis of this routine)     Fairhead, L. Bretagnon, P. & Lestrade, J.-F. 1988, in *The Earth's      Rotation and Reference Frames for Geodesy and Geodynamics*,      ed. A. K. Babcock and G. A. Wilkins, (Dordrecht: Kluwer), p. 419      (original  FBL  paper)     Fukushima, T. 1995, A&A, 294, 895  (error analysis)     Irwin, A. W. & Fukushima, T. 1999, A&A, 348, 642  (error analysis)     Standish, E. M. 1998, A&A, 336, 381 (description of time scales)     Taylor, J. H. & Weisberg, J. M. 1989, ApJ, 345, 434 (pulsar timing)   SEE ALSO    JPLEPHREAD, JPLEPHINTERP, JPLEPHTEST   MODIFICATION HISTORY:    Original logic from Fairhead & Bretagnon, 1990    Drawn from TEMPO v. 11.005, copied 20 Jun 2001    Documented and vectorized, 30 Jun 2001    $Id: tdb2tdt.pro,v 1.4 2001/07/01 07:37:40 craigm Exp $   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tdb2tdt.html#tdb2tdt_calc", "tdb2tdt_calc", 'routine in <a href="idlastro/tdb2tdt.html">tdb2tdt.pro</a>', "tdb2tdt.pro", "", "tdb2tdt_calc", "", "derivtbasejd", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/tdb2tdt.html#tdb2tdt", "tdb2tdt", 'routine in <a href="idlastro/tdb2tdt.html">tdb2tdt.pro</a>', "tdb2tdt.pro", "", "tdb2tdt", "", "derivtbasejd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ten.html", "ten.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ten.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ten.html#ten", "ten", 'routine in <a href="idlastro/ten.html">ten.pro</a>', "ten.pro", "", "ten", " NAME: 	TEN()  PURPOSE: 	Converts a sexagesimal number or string to decimal.  EXPLANATION: 	Inverse of the SIXTY() function.   CALLING SEQUENCES: 	X = TEN( [ HOUR_OR_DEG, MIN, SEC ] ) 	X = TEN( HOUR_OR_DEG, MIN, SEC ) 	X = TEN( [ HOUR_OR_DEG, MIN ] ) 	X = TEN( HOUR_OR_DEG, MIN ) 	X = TEN( [ HOUR_OR_DEG ] )      &lt;--  Trivial cases 	X = TEN( HOUR_OR_DEG )          &lt;--          or        X = TEN(HRMNSC_STRING)   INPUTS: 	HOUR_OR_DEG,MIN,SEC -- Scalars giving sexagesimal quantity in 		in order from largest to smallest.                          or        HRMNSC_STRING - String giving sexagesmal quantity separated by                spaces or colons e.g.  10 23 34  or  -3:23:45.2                 Any negative values should begin with a minus sign.  OUTPUTS: 	Function value returned = double real scalar, decimal equivalent of 	input sexigesimal quantity.  A minus sign on any nonzero element 	of the input vector causes all the elements to be taken as 	&lt; 0.   EXAMPLES:        IDL&gt; print,ten(0,-23,34)                  --&gt; -0.39277778        IDL&gt; print,ten( -0:23:34 )                  --&gt; -0.39277778  PROCEDURE: 	Mostly involves checking arguments and setting the sign.  	The procedure TENV can be used when dealing with a vector of 	sexigesimal quantities.   MODIFICATION HISTORY: 	Written by R. S. Hill, STX, 21 April 87 	Modified to allow non-vector arguments.  RSH, STX, 19-OCT-87        Recognize -0.0   W. Landsman/B. Stecklum   Dec 2005        Work with string input  W. Landsman Dec 2008  ", "ddmmss", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tenv.html", "tenv.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tenv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tenv.html#tenv", "tenv", 'routine in <a href="idlastro/tenv.html">tenv.pro</a>', "tenv.pro", "", "tenv", " NAME: 	TENV()  PURPOSE: 	Converts sexagesimal number or string vector to decimal.  EXPLANATION: 	Like TEN() but allows vector input.   CALLING SEQUENCES: 	Result = TENV( dd, mm )           ; result = dd + mm/60. 	Result = TENV( dd, mm, ss)        ; result = dd + mm/60. + ss/3600.                        or        Result = TENV(ddmmss_string)  INPUTS: 	dd - sexagesimal element(s) corresponding to hours or degrees 	mm - sexagesimal element(s) corresponding to minutes 	ss - sexagesimal element(s) corresponding to seconds (optional) 		The input parameters can be scalars or vectors.   However, the 		number of elements in each parameter must be the same.         HRMNSC_STRING - String scalar or vector giving sexagesmal quantity                separated by spaces or colons e.g.  10 23 34  or  -3:23:45.2                 Any negative values should begin with a minus sign.  OUTPUTS: 	Result -  double, decimal equivalent of input sexagesimal 		quantities.  Same number of elements as the input parameters. 		If the nth element in any of the input parameters is negative 		then the nth element in Result will also be negative.   EXAMPLE: 	If dd = [60,60,0], and mm = [30,-30,-30], then  	IDL&gt; Result = TENV(dd,mm)  ====&gt;   Result =  [60.5,-60.5,-0.5]         Alternatively, the input could be written as the string vector        IDL&gt; str = ['60:30','-60:30','-0:30']        IDL&gt; print,tenv(str)   ====&gt;   Result =  [60.5,-60.5,-0.5]   WARNING:        TENV() will recognize floating point values of -0.0 as negative numbers.        However,  there is no distinction in the binary representation of -0        and 0  (integer values), and so TENV will treat both values as positive.  PROCEDURES USED:        GETTOK(), REPCHR()  for string processing.  PROCEDURE: 	Mostly involves checking arguments and setting the sign.     MODIFICATION HISTORY: 	Written by W.B. Landsman           April, 1991        Recognize -0.0   W. Landsman/B. Stecklum   Dec 2005        Work with string input   W. Landsman Feb 2009   ", "ddmmss", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/textbox.html", "textbox.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "textbox.pro", "", "", " NAME:   TEXTBOX   PURPOSE:    This function allows the user to type some text in a   pop-up dialog widget and have it returned to the program.   This is an example of a Pop-Up Dialog Widget.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:    Utility, Widgets   CALLING SEQUENCE:    thetext = TextBox()   INPUTS:    None.   KEYWORD PARAMETERS:    CANCEL: An output parameter. If the user kills the widget or clicks the Cancel        button this keyword is set to 1. It is set to 0 otherwise. It        allows you to determine if the user canceled the dialog without        having to check the validity of the answer.         theText = TextBox(Title='Provide Phone Number...', Label='Number:', Cancel=cancelled)        IF cancelled THEN Return    GROUP_LEADER: The widget ID of the group leader of this pop-up        dialog. This should be provided if you are calling        the program from within a widget program:            thetext = TextBox(Group_Leader=event.top)         If a group leader is not provided, an unmapped top-level base widget        will be created as a group leader.    LABEL: A string the appears to the left of the text box.    TITLE:  The title of the top-level base. If not specified, the        string 'Provide Input:' is used by default.    VALUE: A string variable that is the intial value of the textbox. By default, a null string.    XSIZE: The size of the text widget in pixel units. By default, 200.   OUTPUTS:    theText: The string of characters the user typed in the        text widget. No error checking is done.   RESTRICTIONS:    The widget is destroyed if the user clicks on either button or   if they hit a carriage return (CR) in the text widget. The   text is recorded if the user hits the ACCEPT button or hits   a CR in the text widget.   MODIFICATION HISTORY:    Written by: David W. Fanning, December 20, 2001.   Added VALUE keyword to set the initial value of the text box. 4 Nov 2002. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/textbox.html#TextBox_Event", "TextBox_Event", 'routine in <a href="coyote/textbox.html">textbox.pro</a>', "textbox.pro", "", "TextBox_Event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/textbox.html#TextBox", "TextBox", 'routine in <a href="coyote/textbox.html">textbox.pro</a>', "textbox.pro", "", "TextBox", "", "TitleLabelCancelGroup_LeaderXSizeValue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/textclose.html", "textclose.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "textclose.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/textclose.html#textclose", "textclose", 'routine in <a href="idlastro/textclose.html">textclose.pro</a>', "textclose.pro", "", "textclose", " NAME: 	TEXTCLOSE   PURPOSE: 	Close a text outpu file previously opened with TEXTOPEN  EXPLANATION: 	procedure to close file for text output as specifed 	by the (non-standard) system variable !TEXTOUT.   CALLING SEQUENCE: 	textclose, [ TEXTOUT = ]   KEYWORDS: 	textout - Indicates output device that was used by 		TEXTOPEN   SIDE EFFECTS: 	if !textout is not equal to 5 and the textunit is 	opened.   Then unit !textunit is closed and released   HISTORY: 	D. Lindler  Dec. 1986  (Replaces PRTOPEN) 	Test if TEXTOUT is a scalar string   W. Landsman   August 1993  Can't close unit -1 (Standard Output) I. Freedman  April  1994 	Converted to IDL V5.0   W. Landsman   September 1997  ", "textout", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/textlineformat.html", "textlineformat.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "textlineformat.pro", "", "", " NAME:        TextLineFormat   PURPOSE:         This is a utility program for taking a line of text and shortening        it to a defined maximum length. The result of the function is a string        array in which no line of text in the string array is longer than the maximum        length. The text is broken into  words  by white space. The algorithm is        modified slightly if there are LF (line feeds) in the text, or if any single        word in the text is too large to fit on a line.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         formattedText = TextLineFormat(theText)   INPUTS:         theText:   The line of text that is to be formatted.   KEYWORDS:         LENGTH:    The maximum line length allowed in the resulting text array.                   Set to 60 characters by default. Lines greater than length                   can be permitted if Line Feeds (ASCII 10B) are found                   in the text or single words are too large to fit on a line.   MODIFICATION HISTORY:         Written by David Fanning, June 2005.        Fixed a small problem with cumulative total not counting spaces between           words. Changed the default size to 60. DWF. 18 August 2005.        Added check for LF in text to accommodate reading netCDF file attributes.            If LF are present, I break on these, and return. 15 Feb 2008. DWF.        Better handling of lines with no white space in them for breaking. 23 March 2009. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/textlineformat.html#TEXTLINEFORMAT", "TEXTLINEFORMAT", 'routine in <a href="coyote/textlineformat.html">textlineformat.pro</a>', "textlineformat.pro", "", "TEXTLINEFORMAT", "", "LENGTHtheText", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/textopen.html", "textopen.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "textopen.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/textopen.html#TEXTOPEN", "TEXTOPEN", 'routine in <a href="idlastro/textopen.html">textopen.pro</a>', "textopen.pro", "", "TEXTOPEN", " NAME:        TEXTOPEN  PURPOSE:        Open a device specified by TEXTOUT with unit !TEXTUNIT  EXPLANATION:        Procedure to open file for text output.   The type of output        device (disk file or terminal screen) is specified by the        TEXTOUT keyword or the (nonstandard) system variable !TEXTOUT.   CALLING SEQUENCE:        textopen, program, [ TEXTOUT =, /STDOUT, /SILENT, MORE_SET=, WIDTH= ]   INPUTS:        program - scalar string giving name of program calling textopen   OPTIONAL INPUT KEYWORDS:        TEXTOUT - Integer scalar (0-7) specifying output file/device to be                opened (see below) or scalar string giving name of output file.                If TEXTOUT is not supplied, then the (non-standard) system                variable !TEXTOUT is used.        /SILENT - By default, TEXTOPEN prints an informational message when                 opening a file for hardcopy output.   Set /SILENT (or !QUIET)                 to suppress this message.        /STDOUT - if this keyword is set and non-zero, then the standard output                (unit = -1) is used for TEXTOUT=1 or TEXTOUT=2.   The use                of STDOUT has  2 possible advantages:                (1) the output will appear in a journal file                (2) Many Unix machines print spurious control characters when                printing to /dev/tty.   These characters are eliminated by                setting /STDOUT                 The disadvantage of /STDOUT is that the /MORE option is not                available.           WIDTH - Specify line width for hardcopy output line wrapping (passed onto OPENW).   OPTIONAL OUTPUT KEYWORD:        MORE_SET - Returns 1 if the output unit was opened with /MORE.   This                occurs if (1) TEXTOUT = 1 and (2) the device is a tty, and                (3) /STDOUT is not set.      User can use the returned value                 of MORE_SET to determine whether to end output when user                 presses 'Q'.  SIDE EFFECTS:        The following dev/file is opened for output.    Different effects        occur depending whether the standard output is a GUI (Macintosh,        Windows, Unix/IDLTool) or a TTY                 textout=0       Nowhere                textout=1       if a TTY then TERMINAL using /more option                                    otherwise standard (Unit=-1) output                textout=2       if a TTY then TERMINAL without /more option                                    otherwise standard (Unit=-1) output                textout=3       &lt;program&gt;.prt                textout=4       laser.tmp                textout=5      user must open file                textout=7      same as 3 but text is appended to &lt;program&gt;.prt                                file if it already exists.                textout = filename (default extension of .prt)         The unit to be opened is obtained with the procedure GET_LUN        unless !TEXTOUT=5.  The unit number is placed in system variable        !TEXTUNIT.  For !TEXTOUT=5 the user must set !TEXTUNIT to the        appropriate unit number.   NOTES:        When printing to a TTY terminal, the output will *not* appear in an        IDL JOURNAL session, unlike text printed with the PRINT command.   NON-STANDARD SYSTEM VARIABLES:        TEXTOPEN will automatically define the following system variables if        they are not previously defined:         DEFSYSV,'!TEXTOUT',1        DEFSYSV,'!TEXTUNIT',0  HISTORY:        D. Lindler  Dec. 1986        Keyword textout added, J. Isensee, July, 1990        Made transportable, D. Neill, April, 1991        Trim input PROGRAM string W. Landsman  Feb 1993        Don't modify TEXTOUT value   W. Landsman   Aug 1993        Modified for MacOS  I. Freedman April 1994        Modified for output terminals without a TTY  W. Landsman  August 1995        Added /STDOUT keyword   W. Landsman    April 1996        added textout=7 option, D. Lindler, July, 1996        Exit with RETURN instead of RETALL  W. Landsman  June 1999        In IDL V5.4 filepath(/TERMINAL) not allowed in the IDLDE WL August 2001        Added MORE_SET output keyword   W.Landsman   January 2002        Added /SILENT keyword  W. Landsman  June 2002 	Define !TEXTOUT and !TEXTUNIT if needed.  R. Sterner, 2002 Aug 27        Return Calling Sequence if no parameters supplied W.Landsman Nov 2002        Remove VMS specific code  W. Landsman Sep 2006        Make sure MORE_SET is always defined   W. Landsman Jan 2007        Added WIDTH keyword   J. Bailin Nov 2010        Use V6.0 notation  W. Landsman April 2011  ", "TEXTOUTSTDOUTMORE_SETSILENTWIDTHPROGRAM", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/texture_surface.html", "texture_surface.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "texture_surface.pro", "", "", " NAME:        TEXTURE_SURFACE   PURPOSE:         The purpose of this program is to demonstrate how to        create a simple surface plot with an image applied as        a texture in object graphics.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Widgets, Object Graphics.   CALLING SEQUENCE:         TEXTURE_SURFACE, data, x, y, Image=image   REQUIRED INPUTS:         None. Fake data will be used if no data is supplied in call.   OPTIONAL INPUTS         data: A 2D array of surface data.         x: A vector of X data values.         y: A vector of Y data values.   OPTIONAL KEYWORD PARAMETERS:         BORDERCOLOR : A three element array [R, G, B] describing the color        used to draw the non-textured part of the surface if POSITION is        specified.         COLORTABLE: The number of an IDL color table to use for the image        texture. Used only if the supplied image is 2D. Ignored otherwise.         EXACT:  Set this keyword to get exact axis scaling.         _EXTRA: This keyword collects otherwise undefined keywords that are         passed to the surface initialization routine.         GROUP_LEADER: The group leader for this program. When the group leader        is destroyed, this program will be destroyed.         IMAGE: An 8-bit or 24-bit image you wish to use for the image texture.         LANDSCAPE: Set this keyword if you are printing in landscape mode. The        default is Portrait mode. The Landscape keyword on the PRINTER object        is set, but not all printers will honor this keyword setting. If yours        does not, set Landscape mode in the Printer Setup dialog.         POSITION: A four element array of the form [x1, y1, x2, y2] that will        position the image with its lower-left corner at (x1,y1) and its upper-        right corner at (x2,y2) in the device coordinate system of the surface.        In other words, if my surface is a 41 by 41 array, and I want the image        positioned with lower-left at (5,10) and upper-right at (25,18), then        I call the program like this: Texture_Surface, Position=[5, 10, 25, 18].         VECTOR: Set this keyword if you want vector printing (as opposed to        the default bitmap printing).         XTITLE: A string used as the X title of the plot.         YTITLE: A string used as the Y title of the plot.         ZSCALE: A number larger than or equal to 0.001 and less than or equal to 1.0 that affects Z scaling.         ZTITLE: A string used as the Z title of the plot.   COMMON BLOCKS:         None.   EXAMPLE:         To use this program with your surface data and 2D image, type:          IDL&gt; data = cgDemoData(2)         IDL&gt; image = cgDemoData(7)         IDL&gt; Texture_Surface, data, Image=image, Colortable=33   RESTRICTIONS:          Requires the ASPECT program from the Coyote Library:             http://www.idlcoyote.com/programs/aspect.pro   MODIFICATION HISTORY         Written by David W. Fanning, 1 Nov 2001, from previous Simple_Surface code.        Modifications suggested by Karl Shultz added to allow surface color           specification and improved resolution about image edges when           positioning images. BORDERCOLOR keyword added. DWF. 4 Nov 2001.        The surface now maintains the same X/Y aspect ratio as the surface data. DWF. 8 April 2002.        Added ZSCALE keyword. DWF. 8 April 2002.        Changed FSC_Normalize to cgNormalize to reflect new name. 6 Feb 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/texture_surface.html#Texture_Surface_Cleanup", "Texture_Surface_Cleanup", 'routine in <a href="coyote/texture_surface.html">texture_surface.pro</a>', "texture_surface.pro", "", "Texture_Surface_Cleanup", "", "tlb", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/texture_surface.html#Texture_Surface_Draw_Events", "Texture_Surface_Draw_Events", 'routine in <a href="coyote/texture_surface.html">texture_surface.pro</a>', "texture_surface.pro", "", "Texture_Surface_Draw_Events", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/texture_surface.html#Texture_Surface_Style", "Texture_Surface_Style", 'routine in <a href="coyote/texture_surface.html">texture_surface.pro</a>', "texture_surface.pro", "", "Texture_Surface_Style", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/texture_surface.html#Texture_Surface_Output", "Texture_Surface_Output", 'routine in <a href="coyote/texture_surface.html">texture_surface.pro</a>', "texture_surface.pro", "", "Texture_Surface_Output", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/texture_surface.html#Texture_Surface_Exit", "Texture_Surface_Exit", 'routine in <a href="coyote/texture_surface.html">texture_surface.pro</a>', "texture_surface.pro", "", "Texture_Surface_Exit", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/texture_surface.html#Texture_Surface_Printing", "Texture_Surface_Printing", 'routine in <a href="coyote/texture_surface.html">texture_surface.pro</a>', "texture_surface.pro", "", "Texture_Surface_Printing", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/texture_surface.html#Texture_Surface_Resize", "Texture_Surface_Resize", 'routine in <a href="coyote/texture_surface.html">texture_surface.pro</a>', "texture_surface.pro", "", "Texture_Surface_Resize", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/texture_surface.html#Texture_Surface", "Texture_Surface", 'routine in <a href="coyote/texture_surface.html">texture_surface.pro</a>', "texture_surface.pro", "", "Texture_Surface", "", "_ExtraXTitleYTitleZTitleGroup_LeaderHidden_LinesVectorExactLandscapeImageColortablePositionBorderColorZScalesurfaceDataxy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/themonths.html", "themonths.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "themonths.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/themonths.html#TheMonths", "TheMonths", 'routine in <a href="coyote/themonths.html">themonths.pro</a>', "themonths.pro", "", "TheMonths", " NAME:        TheMonths   PURPOSE:         This is a utility program for obtaining the months of the        year in various string formats. Primarily used for graphic        labeling and the like.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilites   CALLING SEQUENCE:         listOfMonths = theMonths()   RETURN VALUE:         listOfMonths: The list of months as a string or string array,                      depending upon which keywords are set.   INPUTS:         index:        The index of the month you are interested in                      returning. Integer from 1 to 12.    KEYWORDS:         ABBREVIATION: Set this keyword if you wish to return the months                      as a three letter abbreviation.         ALLCAPS:      Set this keyword if you wish to return the months                      in all capital letters. (Default is first letter                      capitalized.)         FIRSTLETTER:  Set this keyword to return just the first letter                      of the months.         LOWCASE:      Set this keyword to return all lowercase letters.   MODIFICATION HISTORY:         Written by David W. Fanning, 8 Nov 2007.        Retired 9 January 2013 and replaced with cgMonths.  ******************************************************************************************;   Copyright (c) 2008, by Fanning Software Consulting, Inc.                                ;   All rights reserved.                                                                    ;                                                                                           ;   Redistribution and use in source and binary forms, with or without                      ;   modification, are permitted provided that the following conditions are met:             ;                                                                                           ;       * Redistributions of source code must retain the above copyright                    ;         notice, this list of conditions and the following disclaimer.                     ;       * Redistributions in binary form must reproduce the above copyright                 ;         notice, this list of conditions and the following disclaimer in the               ;         documentation and/or other materials provided with the distribution.              ;       * Neither the name of Fanning Software Consulting, Inc. nor the names of its        ;         contributors may be used to endorse or promote products derived from this         ;         software without specific prior written permission.                               ;                                                                                           ;   THIS SOFTWARE IS PROVIDED BY FANNING SOFTWARE CONSULTING, INC. ''AS IS'' AND ANY        ;   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES    ;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT     ;   SHALL FANNING SOFTWARE CONSULTING, INC. BE LIABLE FOR ANY DIRECT, INDIRECT,             ;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED    ;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;         ;   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND             ;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT              ;   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS           ;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            ; ******************************************************************************************;  ", "FIRSTLETTERALLCAPSABBREVIATIONLOWCASEindex", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tic_one.html", "tic_one.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tic_one.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tic_one.html#tic_one", "tic_one", 'routine in <a href="idlastro/tic_one.html">tic_one.pro</a>', "tic_one.pro", "", "tic_one", " NAME: 	TIC_ONE  PURPOSE: 	Determine the position of the first tic mark for astronomical images.  EXPLANATION: 	For use in labelling images with right ascension 	and declination axes. This routine determines the 	position in pixels of the first tic.   CALLING SEQUENCE: 	tic_one, zmin, pixx, incr, min2, tic1, [RA = ]   INPUTS: 	zmin  - astronomical coordinate value at axis zero point (degrees 		or hours) 	pixx - distance in pixels between tic marks (usually obtained from TICS) 	incr - increment in minutes for labels (usually an even number obtained 		from the procedure TICS)   OUTPUTS: 	min2 - astronomical coordinate value at first tic mark 	tic1 - position in pixels of first tic mark   EXAMPLE: 	Suppose a declination axis has a value of 30.2345 degrees at its 	zero point.  A tic mark is desired every 10 arc minutes, which 	corresponds to 12.74 pixels.  Then  	IDL&gt; TIC_ONE, 30.2345, 1, 12.74, min2, tic1  	yields values of min2 = 30.333 and tic1 = 5.74, i.e. the first tic 	mark should be labeled 30 deg 20 minutes and be placed at pixel value 	5.74   REVISION HISTORY: 	by B. Pfarr, 4/15/87 	Converted to IDL V5.0   W. Landsman   September 1997  ", "RAminpixxincrmin2tic1", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ticlabels.html", "ticlabels.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ticlabels.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ticlabels.html#ticlabels", "ticlabels", 'routine in <a href="idlastro/ticlabels.html">ticlabels.pro</a>', "ticlabels.pro", "", "ticlabels", " NAME: 	TICLABELS  PURPOSE: 	Create tic labels for labeling astronomical images.  EXPLANATION: 	Used to display images with right ascension or declination 	axes.  This routine creates labels for already determined tic 	marks (every other tic mark by default)   CALLING SEQUENCE: 	TICLABELS, minval, numtics, incr, ticlabs, [ RA = ,DELTA = ]   INPUTS: 	minval  - minimum value for labels (degrees) 	numtics - number of tic marks 	incr    - increment in minutes for labels   OUTPUTS: 	ticlabs - array of charater string labels   OPTIONAL INPUT KEYWORDS: 	/RA - if this keyword is set then the grid axis is assumed to be 		a Right Ascension.   Otherwise a declination axis is assumed 	DELTA - Scalar specifying spacing of labels.   The default is 		DELTA = 2 which means that a label is made for every other tic 		mark.  Set DELTA=1 to create a label for every tic mark.        FONT - scalar font graphics keyword (-1,0 or 1) for text   PROCEDURES USED: 	RADEC   RESTRICTIONS: 	Invalid for wide field (&gt; 2 degree) images since it assumes that a 	fixed interval in Y (or X) corresponds to a fixed interval in Dec 	(or RA)   REVISON HISTORY: 	written by B. Pfarr, 4/15/87 	Added DELTA keywrd for compatibility with IMCONTOUR W. Landsman Nov 1991 	Added nicer hms and dms symbols when using native PS fonts Deutsch 11/92 	Added Patch for bug in IDL &lt;2.4.0 as explained in NOTES E. Deutsch 11/92 	Fix when crossing 0 dec or 24h RA 	Fix DELTA keyword so that it behaves according to the documentation 			W. Landsman  Hughes STX,  Nov 95        Allow sub arcsecond formatting  W. Landsman   May 2000        Better formatting for non-unity DELTA values  W. Landsman July 2004        Allow FONT keyword to be passed.  T. Robishaw Apr. 2006        Write 0h rather than 24h  W. L. August 2008        Fix problem when tic values is exactly 0 degrees   Mar 2012        Only modulo 24 when /RA is set  WL.  October 2012  ", "RADELTAFONTminvalnumticsincrticlabs", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ticpos.html", "ticpos.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ticpos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ticpos.html#ticpos", "ticpos", 'routine in <a href="idlastro/ticpos.html">ticpos.pro</a>', "ticpos.pro", "", "ticpos", " NAME:        TICPOS  PURPOSE:        Specify distance between tic marks for astronomical coordinate overlays  EXPLANATION:        User inputs number an approximate distance        between tic marks, and the axis length in degrees.  TICPOS will return        a distance between tic marks such that the separation is a round        multiple in arc seconds, arc minutes, or degrees   CALLING SEQUENCE:        TICPOS, deglen, pixlen, ticsize, incr, units   INPUTS:        deglen - length of axis in DEGREES        pixlen - length of axis in plotting units (pixels)        ticsize - distance between tic marks (pixels).  This value will be                adjusted by TICPOS such that the distance corresponds to                a round multiple in the astronomical coordinate.   OUTPUTS:        ticsize - distance between tic marks (pixels), positive scalar        incr    - incremental value for tic marks in round units given                by the UNITS parameter        units - string giving units of ticsize, either 'ARC SECONDS',                'ARC MINUTES', or 'DEGREES'   EXAMPLE:        Suppose a 512 x 512 image array corresponds to 0.2 x 0.2 degrees on        the sky.   A tic mark is desired in round angular units, approximately        every 75 pixels.         IDL&gt; ticsize = 75        IDL&gt; TICPOS,0.2,512,ticsize,incr,units         ==&gt; ticsize = 85.333, incr = 2. units = 'Arc Minutes'         i.e. a good tic mark spacing is every 2 arc minutes, corresponding        to 85.333 pixels.   REVISON HISTORY:        written by W. Landsman            November, 1988        Converted to IDL V5.0   W. Landsman   September 1997        Don't use all capital letters  W. Landsman May 2003        Fix case where incr crosses degree/minute or minute/degree boundary                A. Mortier/W.Landsman April 2005  ", "deglenpixlenticsizeincrunits", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tics.html", "tics.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tics.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tics.html#tics", "tics", 'routine in <a href="idlastro/tics.html">tics.pro</a>', "tics.pro", "", "tics", " NAME:        TICS  PURPOSE:        Compute a nice increment between tic marks for astronomical images.  EXPLANATION:        For use in labelling a displayed image with right ascension        or declination axes.  An approximate distance between tic        marks is input, and a new value is computed such that the        distance between tic marks is in simple increments of the        tic label values.   CALLING SEQUENCE:        tics, radec_min, radec_max, numx, ticsize, incr, [ /RA ]   INPUTS:        radec_min - minimum axis value (degrees)        radec_max - maximum axis value (degrees)        numx  - number of pixels in x direction   INPUT/OUTPUT        ticsize - distance between tic marks (pixels)   OUTPUTS:        incr    - incremental value for tic labels (in minutes of                time for R.A., minutes of arc for dec.)   REVISON HISTORY:        written by B. Pfarr, 4/14/87        Added some more tick precision (i.e. 1 & 2 seconds in case:) EWD May92        Added sub arcsecond tick precision   W. Landsman   May 2000        Plate scale off by 1 pixel  W. Landsman July 2004  ", "RAradec_minradec_maxnumxticsizeincr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/tmp.html", "tmp.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "tmp.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("idlastro/to_hex.html", "to_hex.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "to_hex.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/to_hex.html#TO_HEX", "TO_HEX", 'routine in <a href="idlastro/to_hex.html">to_hex.pro</a>', "to_hex.pro", "", "TO_HEX", " NAME:        TO_HEX  PURPOSE:        Translate a non-negative decimal integer to a hexadecimal string  CALLING SEQUENCE:        HEX = TO_HEX( D, [ NCHAR ] )  INPUTS:        D - non-negative decimal integer, scalar or vector.  If input as a            string, (e.g. '32') then all leading blanks are removed.   OPTIONAL INPUT:        NCHAR - number of characters in the output hexadecimal string.                If not supplied, then the hex string will contain no                leading zeros.   OUTPUT:        HEX - hexadecimal translation of input integer, string   EXAMPLES:        IDL&gt; A = TO_HEX([11,16])    ==&gt;   A = ['B','10']        IDL&gt; A = TO_HEX(100,3) ==&gt;   A = '064'   METHOD:        The hexadecimal format code '(Z)' is used to convert.  No parameter        checking is done.  PROCEDURES CALLED:        None.  REVISION HISTORY:        Written   W. Landsman         November, 1990        Converted to IDL V5.0   W. Landsman   September 1997        Use FSTRING() for more than 1024 values      March 2000        Assume since  V5.4, omit FSTRING() call      April 2006  ", "DNCHAR", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/transform_coeff.html", "transform_coeff.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "transform_coeff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/transform_coeff.html#transform_coeff", "transform_coeff", 'routine in <a href="idlastro/transform_coeff.html">transform_coeff.pro</a>', "transform_coeff.pro", "", "transform_coeff", " NAME:     TRANSFORM_COEFF()  PURPOSE:     Compute new polynomial coefficients under a linear transformation  EXPLANATION:      Suppose one has a (nonlinear) polynomial (similar to the POLY() function)           y = C[0] + C[1]*x  + C[2]*x^2 + C[3]*x^3 + ...        and one has a linear transformation in X            x = alpha*x' + beta      This function computes the new polynomial coefficients under the linear      transformation.   CALLING SEQUENCE:      newcoeff = TRANSFORM_COEFF( coeff, alpha, beta)  INPUTS:      Coeff  -  vector of polynomial coefficients (as with POLY()).    The          degree of the polynomial is N_elements(coeff) - 1      Alpha, Beta - numeric scalars defining the linear transformation in X  OUTPUTS:     NewCoeff - Vector (same size as Coeff) giving the new polyomial                coefficients  EXAMPLE:      Suppose one has polynomial mapping a nonlinear distortion in the X      direction of a spectrum       y = 0.2 + 1.1*x + 0.1*x^2       if one rebins the spectrum to half the size then the linear transformation      is  x = 2.*x'      so alpha = 2 and beta = 0      The new coefficients are      IDL&gt; print, transform_coeff([0.2,1.1,0.1],2.,0)      ==&gt; [0.2, 2.2, 0.4]  METHOD:     Performs a binomial expansion of the polynomial and collect like terms     groups.google.com/group/comp.lang.idl-pvwave/msg/11132d96d9c0f93d?hl=en&  REVISION HISTORY:    Written   W. Landsman          December 2007  ", "coeffalphabeta", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/transform_volume.html", "transform_volume.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "transform_volume.pro", "", "", " NAME:        TRANSFORM_VOLUME   PURPOSE:         The purpose of this program is to transform (e.g., rotate,        scale, and translate) a 3D array or volume.   AUTHOR:         Martin Downing,        Clinical Research Physicist,        Grampian Orthopaedic RSA Research Centre,        Woodend Hospital, Aberdeen, AB15 6LS.        Pnone: 01224 556055 / 07903901612        Fa: 01224 556662        E-mail: m.downing@abdn.ac.uk   CATEGORY:        Mathematics, graphics.   CALLING SEQUENCE:        result = TRANSFORM_VOLUME( volume )   INPUTS:         volume:    The 3D array or volume to be transformed.   OPTIONAL KEYWORDS:        BUFFER_SIZE: To reduce memory overhead the routine processes the job in chunks, the number          of elements of which can be set using the BUFFER_SIZE keyword, set this keyword to          0 to force the whole array to be processed at one time. The default value is 128.        MISSING: The value to return for transformed values outside the bounds of          the volume. (Passed to the INTERPOLATE function.) Default is 0.        T3DMAT: The homogeneous transforamtion matrix. If this keyword is not present,          the following keywords can be used to create a homogeneous transformation matrix:           ROTATION - The rotation vector [rx,ry,rz]. The order of rotation is ZYX.          TRANSLATE - The translation vector [tx,ty,tz].          SCALE - The scale vector [sx,sy,sz].          CENTRE_ROTATION - The centre of rotation [cx,cy,cz].   OUTPUTS:         result:    The transformed array or volume.   COMMON BLOCKS:         None.   DEPENDENCIES:         The program uses the library INTERPLOLATE routine, which currently (IDL 5.4)        uses linear interpolation. Note that the operation is performed in chunks,        each of which is independant of the result of the others, so the operation        could easiliy be parallelised.   MODIFICATION HISTORY:         Written by: Martin Downing, 16 September 2001.        Added MISSING keyword. Removed INPLACE keyword. 25 Nov 2001. MD  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/transform_volume.html#Transform_Volume", "Transform_Volume", 'routine in <a href="coyote/transform_volume.html">transform_volume.pro</a>', "transform_volume.pro", "", "Transform_Volume", "", "RotationScaleTranslateCentre_RotationT3DmatBuffer_SizeMissingvolume", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/trapzd.html", "trapzd.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "trapzd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/trapzd.html#trapzd", "trapzd", 'routine in <a href="idlastro/trapzd.html">trapzd.pro</a>', "trapzd.pro", "", "trapzd", " NAME:        TRAPZD  PURPOSE:        Compute the nth stage of refinement of an extended trapezoidal rule.  EXPLANATION:        This procedure is called by QSIMP and QTRAP.   Algorithm from Numerical        Recipes, Section 4.2.   TRAPZD is meant to be called iteratively from        a higher level procedure.   CALLING SEQUENCE:        TRAPZD, func, A, B, S, step, [ _EXTRA = ]   INPUTS:        func - scalar string giving name of function to be integrated.   This                must be a function of one variable.        A,B -  scalars giving the limits of the integration   INPUT-OUTPUT:        S -    scalar giving the total sum from the previous iterations on                input and the refined sum after the current iteration on output.         step - LONG scalar giving the number of points at which to compute the                function for the current iteration.   If step is not defined on                input, then S is intialized using the average of the endpoints                of limits of integration.   OPTIONAL INPUT KEYWORDS:        Any supplied keywords will be passed to the user function via the        _EXTRA facility.   NOTES:        (1) TRAPZD will check for math errors (except for underflow) when        computing the function at the endpoints, but not on subsequent        iterations.         (2) TRAPZD always uses double precision to sum the function values        but the call to the user-supplied function is double precision only if        one of the limits A or B is double precision.  REVISION HISTORY:        Written         W. Landsman                 August, 1991        Always use double precision for TOTAL       March, 1996        Pass keyword to function via _EXTRA facility  W. Landsman July 1999        Don't check for floating underflow  W.Landsman  April 2008  ", "_EXTRAfuncabsstep", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/tribox.html", "tribox.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "tribox.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/tribox.html#tribox", "tribox", 'routine in <a href="code_snapshots/obsolete_code/tribox.html">tribox.pro</a>', "tribox.pro", "", "tribox", "       The triple-sun variant of scanbox(), the goal of this is to provide cropped regions for        each centering method to compute the centers of.   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Print the elapsed time   file           File to be read in  scan_width           How apart the scans are for minicrop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "       cropped = scanbox(file='triplesun.bmp',/time)   ");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/tricenter.html", "tricenter.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "tricenter.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    TRICENTER   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image.   ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/trilimbcenter.html", "trilimbcenter.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "trilimbcenter.pro", "   JEREN SUZUKI: <span class= code-output >   Space Sciences Laboratory</span> <span class= code-output >   7 Gauss Way</span> <span class= code-output >   Berkeley, CA 94720 USA</span> <span class= code-output >   E-mail: jsuzuki@ssl.berkeley.edu</span>  ", "", " NAME:    TRICENTER   PURPOSE:    Finds the center of 3 suns in a single image. Currently limited to a .bmp test image.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/trilimbcenter.html#makelimbstrips", "makelimbstrips", 'routine in <a href="code_snapshots/obsolete_code/trilimbcenter.html">trilimbcenter.pro</a>', "trilimbcenter.pro", "", "makelimbstrips", "       Makes limb strips from full-length strips   ", "nstrips           How many strips to select, centered around the row/col diameter  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time   thresh           Threshold used to select pixels   xstripsystripsfile           File to be read in  ministrip_length           How long the total array of the cut-down strip will be  scan_width           Indicates how far apart to scan  sigmavalue           Sets the threshold to be:            max(image) - sigmavalue*stddev(image)   sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  ", "          -1", "   Exactly how much data should be stored in a structure? Since we're interested in saving space,    doesn't make sense to repeat any data in the structures.  ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/trilimbcenter.html#makestrips", "makestrips", 'routine in <a href="code_snapshots/obsolete_code/trilimbcenter.html">trilimbcenter.pro</a>', "trilimbcenter.pro", "", "makestrips", "       Only saves 5 strips centered around the solar diameter to reduce the amount of limb-            darkened pixels and to make the polynomial-fitted limbs more-or-less look similar.   ", "nstrips       How many strips to select, centered around the row/col diameter  region       Which sun out of the three to find the center of. Defaults to the brightest sun  time       Prints elapsed time  thresh       Threshold used to select pixels  xstrips       Structure containing row strips  ystrips       Structure containing column strips   file       File to be read in  scan_width       Indicates how far apart to scan  sigmavalue       Sets the threshold to be:        max(image) - sigmavalue*stddev(image)   sundiam       Approximate diameter of sun in pixels. (Based on bmp image)  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/trilimbcenter.html#limbfit", "limbfit", 'routine in <a href="code_snapshots/obsolete_code/trilimbcenter.html">trilimbcenter.pro</a>', "trilimbcenter.pro", "", "limbfit", "   Uses the data from makelimbstrips and fits an n-th order polynomial to the limb to find where        it crosses the threshold.   ", "nstrips           How many strips to select, centered around the row/col diameter  plot           Makes some nice plots  region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Prints the elapsed time  thresh           Threshold used to select pixels  xpos           X center  ypos           Y center   file           File to be read in  ministrip_length           How long the trimmed down strip will be  order           What order polynomial to use for POLY_FIT()  scan_width           Indicates how far apart to scan  sigmavalue           Sets the threshold to be:            max(image) - sigmavalue*stddev(image)   sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/trilimbcenter.html#getstruct", "getstruct", 'routine in <a href="code_snapshots/obsolete_code/trilimbcenter.html">trilimbcenter.pro</a>', "trilimbcenter.pro", "", "getstruct", "       Finds the centers of a triple-sun image and loads all relevant information        including offsets and angles into a new structure.   ", "time           Outputs how much time the program takes  file           What file to find 3 centers for  struct           Structure containing the centers and cropped images of all 3 suns  scan_width           How apart the scans are for minicrop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/trilimbcenter.html#cropit", "cropit", 'routine in <a href="code_snapshots/obsolete_code/trilimbcenter.html">trilimbcenter.pro</a>', "trilimbcenter.pro", "", "cropit", "       Loads a triple-sun image and crops out selected regions one-by-one.   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time         Print the elapsed time   inputarr           Starting image to crop  location           Structure containing the cropped image along with the X and Y distances from origin  scan_width           How apart the scans are for minicrop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)   ", "          -1", "       cropped = cropit(inputarr,scan_width,sigmavalue,sundiam,region=1)   ");
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/trilimbcenter.html#minicrop", "minicrop", 'routine in <a href="code_snapshots/obsolete_code/trilimbcenter.html">trilimbcenter.pro</a>', "trilimbcenter.pro", "", "minicrop", "       Small function to keep code small in cropit. Finds the row where the threshold is crossed        and then steps back in the x-direction to find the left side of the cropping box. Skips        over the sun by a predetermined value then crops out the sun.   ", "time           Print the elapsed time  temparr           2D array to check boundary limits of  rowscan           Where to crop the rows from  colscan           Where to crop the columns from  rowendscan           Where to crop the rows to  colendscan           Where to crop the columns to  scan_width           How apart the scans are for minicrop().  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  thresh           What the minimum threshold will be for scanning   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/trimask.html", "trimask.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "trimask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/trimask.html#trimask", "trimask", 'routine in <a href="code_snapshots/obsolete_code/trimask.html">trimask.pro</a>', "trimask.pro", "", "trimask", "       Had to make a new version of comp3 because the old one called scanbox() by default   ", "region           Which sun out of the three to find the center of. Defaults to the brightest sun  time           Print the elapsed time  file           What file to load in  xpos           Computed X position of center  ypos           Computed Y position of center  scan_width           How apart the scans are for minicrop().  sigmavalue          Sets the threshold to be: <span class= code-output >max(image) - sigmavalue*stddev(image)</span>  sundiam           Approximate diameter of sun in pixels. (Based on bmp image)  thresh           Threshold used in finding center   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tsc.html", "tsc.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tsc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tsc.html#tsc", "tsc", 'routine in <a href="idlastro/tsc.html">tsc.pro</a>', "tsc.pro", "", "tsc", " NAME:        TSC   PURPOSE:        Interpolate an irregularly sampled field using a Triangular Shaped Cloud   EXPLANATION:        This function interpolates an irregularly sampled field to a        regular grid using Triangular Shaped Cloud (nearest grid point        gets weight 0.75-dx^2, points before and after nearest grid        points get weight 0.5*(1.5-dx)^2, where dx is the distance        from the sample to the grid point in units of the cell size).   CATEGORY:        Mathematical functions, Interpolation   CALLING SEQUENCE:        Result = TSC, VALUE, POSX, NX[, POSY, NY, POSZ, NZ,                      AVERAGE = average, WRAPAROUND =  wraparound,                      ISOLATED = isolated, NO_MESSAGE = no_message]   INPUTS:        VALUE: Array of sample weights (field values). For e.g. a               temperature field this would be the temperature and the               keyword AVERAGE should be set. For e.g. a density field               this could be either the particle mass (AVERAGE should               not be set) or the density (AVERAGE should be set).        POSX:  Array of X coordinates of field samples, unit indices: [0,NX&gt;.        NX:    Desired number of grid points in X-direction.   OPTIONAL INPUTS:       POSY: Array of Y coordinates of field samples, unit indices: [0,NY&gt;.       NY:   Desired number of grid points in Y-direction.       POSZ: Array of Z coordinates of field samples, unit indices: [0,NZ&gt;.       NZ:   Desired number of grid points in Z-direction.   KEYWORD PARAMETERS:        AVERAGE:    Set this keyword if the nodes contain field samples                    (e.g. a temperature field). The value at each grid                    point will then be the weighted average of all the                    samples allocated to it. If this keyword is not                    set, the value at each grid point will be the                    weighted sum of all the nodes allocated to it                    (e.g. for a density field from a distribution of                    particles). (D=0).        WRAPAROUND: Set this keyword if you want the first grid point                    to contain samples of both sides of the volume                    (see below).        ISOLATED:   Set this keyword if the data is isolated, i.e. not                    periodic. In that case total mass' is not conserved.                    This keyword cannot be used in combination with the                    keyword WRAPAROUND.        NO_MESSAGE: Suppress informational messages.   Example of default allocation of nearest grid points: n0=4, *=gridpoint.       0   1   2   3     Index of gridpoints      *   *   *   *     Grid points    |---|---|---|---|   Range allocated to gridpoints ([0.0,1.0&gt; --&gt; 0, etc.)    0   1   2   3   4   posx   Example of ngp allocation for WRAPAROUND: n0=4, *=gridpoint.     0   1   2   3         Index of gridpoints    *   *   *   *         Grid points  |---|---|---|---|--     Range allocated to gridpoints ([0.5,1.5&gt; --&gt; 1, etc.)    0   1   2   3   4=0   posx   OUTPUTS:        Prints that a TSC interpolation is being performed of x        samples to y grid points, unless NO_MESSAGE is set.   RESTRICTIONS:        Field data is assumed to be periodic with the sampled volume        the basic cell, unless ISOLATED is set.        All input arrays must have the same dimensions.        Postition coordinates should be in index units' of the        desired grid: POSX=[0,NX&gt;, etc.        Keywords ISOLATED and WRAPAROUND cannot both be set.   PROCEDURE:        Nearest grid point is determined for each sample.        TSC weights are computed for each sample.        Samples are interpolated to the grid.        Grid point values are computed (sum or average of samples).   EXAMPLE:        nx=20        ny=10        posx=randomu(s,1000)        posy=randomu(s,1000)        value=posx^2+posy^2        field=tsc(value,posx*nx,nx,posy*ny,ny,/average)        surface,field,/lego   NOTES:        Use csc.pro or ngp.pro for lower order interpolation schemes.    A        standard reference for these interpolation methods is:   R.W. Hockney        and J.W. Eastwood, Computer Simulations Using Particles (New York:        McGraw-Hill, 1981).   MODIFICATION HISTORY:        Written by Joop Schaye, Feb 1999.        Check for overflow for large dimensions  P. Riley/W. Landsman Dec. 1999  ", "AVERAGEWRAPAROUNDNO_MESSAGEISOLATEDvalueposxnxposynyposznz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tsum.html", "tsum.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tsum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tsum.html#TSUM", "TSUM", 'routine in <a href="idlastro/tsum.html">tsum.pro</a>', "tsum.pro", "", "TSUM", " NAME:        TSUM  PURPOSE:        Trapezoidal summation of the area under a curve.  EXPLANATION:        Adapted from the procedure INTEG in the IUE procedure library.   CALLING SEQUENCE:        Result = TSUM(y)               or        Result = TSUM( x, y, [ imin, imax ] )  INPUTS:        x = array containing monotonic independent variable.  If omitted, then                x is assumed to contain the index of the y variable.                x = lindgen( N_elements(y) ).        y = array containing dependent variable y = f(x)   OPTIONAL INPUTS:        imin = scalar index of x array at which to begin the integration                If omitted, then summation starts at x[0].        imax = scalar index of x value at which to end the integration                If omitted then the integration ends at x[npts-1].   OUTPUTS:        result = area under the curve y=f(x) between x[imin] and x[imax].   EXAMPLE:        IDL&gt; x = [0.0,0.1,0.14,0.3]        IDL&gt; y = sin(x)        IDL&gt; print,tsum(x,y)    ===&gt;  0.0445843         In this example, the exact curve can be computed analytically as        1.0 - cos(0.3) = 0.0446635  PROCEDURE:        The area is determined of individual trapezoids defined by x[i],        x[i+1], y[i] and y[i+1].         If the data is known to be at all smooth, then a more accurate        integration can be found by interpolation prior to the trapezoidal        sums, for example, by the standard IDL User Library int_tabulated.pro.  MODIFICATION HISTORY:        Written, W.B. Landsman, STI Corp. May 1986        Modified so X is not altered in a one parameter call Jan 1990        Converted to IDL V5.0   W. Landsman   September 1997        Allow non-integer values of imin and imax  W. Landsman April 2001        Fix problem if only 1 parameter supplied W. Landsman June 2002  ", "XYIMINIMAX", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tvbox.html", "tvbox.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tvbox.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tvbox.html#tvbox", "tvbox", 'routine in <a href="idlastro/tvbox.html">tvbox.pro</a>', "tvbox.pro", "", "tvbox", " NAME:       TVBOX  PURPOSE:       Draw a box(es) or rectangle(s) of specified width  EXPLANATION:       Positions can be specified either by the cursor position or by       supplying a vector of X,Y positions.  By default, TVBOX now      (since Jan 2012) assumes data coordinates if !X.crange is set.   CALLING SEQUENCE:       TVBOX, width, [ x, y, color, /DATA, ANGLE= ,COLOR =, _EXTRA =  ]   INPUTS:       WIDTH -  either a scalar giving the width of a box, or a 2 element                vector giving the length and width of a rectangle.   OPTIONAL INPUTS:       X  -  x position for box center, scalar or vector       Y  -  y position for box center, scalar or vector.   If vector, then Y             must have the same number of elements as X             Positions are specified in device coordinates unless /DATA is set             If X and Y are not specified, and device has a cursor, then             TVBOX will draw a box at current cursor position       COLOR - String or integer specifying the color  to draw the box(es)             If COLORS is a scalar then all boxes are drawn with the same             color value.   Otherwise, the Nth box is drawn with the             Nth value of color.    Color can also be specified as             string (e.g.'red').   See cgCOLOR for a list of available             color names.     Default =  opposite .  OUTPUTS:       None   OPTIONAL KEYWORD INPUTS:       ANGLE - numeric scalar specifying the clockwise rotation of               the boxes or rectangles.       COLOR - Scalar or vector, overrides the COLOR input parameter               Color can be specified as a string (e.g. 'red') or intensity               value. See cgCOLOR() for a list of color names.                Default = 'opposite' (i.e. color opposite the background).       /DATA - if this keyword is set and non-zero, then the box width and               X,Y position center are interpreted as being in DATA               coordinates.   Note that data coordinates must be previously               defined (with a PLOT or CONTOUR call).   The default               is to assume data coordinates if !X.CRANGE is set.    Force               device coordinates by setting DATA = 0 or /DEVICE       /DEVICE Set this keyword to force use of device coordinates       /FILL  - If set, fill the box using cgCOLORFILL       /SQUARE - If set, then a square is drawn, even if in data coordinates                with unequal X and Y axes.   The X width is used for the                square width, and the Y width is ignored.        Any keyword recognized by cgPLOTS (or cgCOLORFILL if /FILL is set)       is also recognized by TVBOX.       In particular, the linestyle, thickness and clipping of the boxes       is controlled by the  LINESTYLE, THICK and NOCLIP keywords.       (Clipping is turned off by default, set NOCLIP=0 to activate it.)       If /FILL is set then available keywords include LINE_FILL and       FILL_PATTERN.   SIDE EFFECTS:        A square or rectangle will be drawn on the device        For best results WIDTH should be odd when using the default DEVICE        coordinates.  (If WIDTH is even, the actual size of the box will be        WIDTH + 1, so that box remains centered.)   EXAMPLES:        (1) Draw a double thick box of width 13, centered at 221,256 in the        currently active window             IDL&gt; tvbox, 13, 221, 256, thick=2         (2) Overlay a  slit  with dimension 52  x 2  on a previously displayed            image at a position angle (East of North) of 32 degrees.    The            slit is to be centered at XC, YC and the plate scale            arcsec_per_pixel is known.             IDL&gt; w = [2.,52.]/arcsec_per_pixel ;Convert slit size to pixel units            IDL&gt; tvbox,w,XC,YC,ang=-32          ;Draw slit  RESTRICTIONS:          Allows use of only device (default) or data (if /DATA is set)            coordinates.   Normalized coordinates are not allowed  PROCEDURES USED:        cgpolygon, zparcheck  REVISON HISTORY:        Written, W. Landsman   STX Co.           10-6-87        Modified to take vector arguments. Greg Hennessy Mar 1991        Fixed centering of odd width    W. Landsman    Sep. 1991        Let the user specify COLOR=0, accept vector color, W. Landsman Nov. 1995        Fixed typo in _EXTRA keyword  W. Landsman   August 1997        Added ANGLE keyword    W.Landsman     February 2000        Make sure ANGLE is a scalar   W. Landsman  September 2001        Don't round coordinates if /DATA is set.   M. Perrin  August 2005        Use STRICT_EXTRA to flag valid keywords W. Landsman Sep 2005        Check that width has only 1 or 2 elements W. Landsman August 2010        Use Coyote Graphcis  W. Landsman February 2011        Added /FILL keyword  W. Landsman  July 2011        Default to data coordinates if !X.crange present  WL Jan 2012        Added Square keyword  WL.  April 2012   ", "DATAColorANGLEDEVICESQUARE_EXTRAwidthxycolor", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tvcircle.html", "tvcircle.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tvcircle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tvcircle.html#Tvcircle", "Tvcircle", 'routine in <a href="idlastro/tvcircle.html">tvcircle.pro</a>', "tvcircle.pro", "", "Tvcircle", " NAME:      TVCIRCLE  PURPOSE:      Draw circle(s) of specified radius at specified position(s)  EXPLANATION:      If a position is not specified, and device has a cursor, then a circle      is drawn at the current cursor position.    By default, TVCIRCLE now      (since Jan 2012) assumes data coordinates if !X.crange is set.   CALLING SEQUENCE:      TVCIRCLE, rad, x, y, color, [ /DATA, /FILL, _EXTRA  =  ]   INPUTS:      RAD - radius of circle(s) to be drawn, positive numeric scalar   OPTIONAL INPUT:       X - x position for circle center, vector or scalar       Y - y position for circle center, vector or scalar                If X and Y are not specified, and the device has a cursor,                then program will draw a circle at the current cursor position       COLOR -  color name or intensity value(s) (0 - !D.N_COLORS) used to draw                the circle(s).   If COLOR is a scalar then all circles are drawn                with the same color value.   Otherwise, the Nth circle is drawn                with the  Nth value of color.  See cgCOLOR() for a list of color                names.  Default = 'opposite' (i.e. color opposite the                background).   OPTIONAL KEYWORD INPUTS:        /DATA - if this keyword is set and non-zero, then the circle width and               X,Y position center are interpreted as being in DATA               coordinates.   Note that data coordinates must be previously               defined (with a PLOT or CONTOUR call).    TVCIRCLE will               internally convert to device coordinates before drawing the               circle, in order to maintain optimal smoothness.    The default               is to assume data coordinates if !X.CRANGE is set.    Force               device coordinates by setting DATA = 0 or /DEVICE        /DEVICE - If set, then force use of device coordinates..        /FILL  - If set, fill the circle using cgCOLORFILL                 Any keyword recognized by cgPLOTS (or cgCOLORFILL if /FILL is                set) is also recognized by TVCIRCLE.   In particular, the color,                linestyle, thickness and clipping of the circles are controlled                by the  COLOR, LINESTYLE, THICK and NOCLIP keywords.  (Clipping                is turned off by default, set NOCLIP=0 to activate it.)                If /FILL is set then available keywords are LINE_FILL and                FILL_PATTERN.  OUTPUTS:        None   RESTRICTIONS:        (1) Some round-off error may occur when non-integral values are            supplied for both the radius and the center coordinates        (2) TVCIRCLE does not accept /NORMAL coordinates.        (3) TVCIRCLE always draws a circle --- even when in data coordinates            and the X and Y data scales are unequal.    (The X data scale is            used to define the circle radius.)     If this is not the behaviour            you want, then use TVELLIPSE instead.  EXAMPLE:        (1) Draw circles of radius 9 pixels at the positions specified by            X,Y vectors, using double thickness lines             IDL&gt; tvcircle, 9, x, y, THICK = 2             Now fill in the circles using the LINE_FILL method             IDL&gt; tvcircle, 9, x, y, /FILL, /LINE_FILL  METHOD:            The method used is that of Michener's, modified to take into account            the fact that IDL plots arrays faster than single points.   See             Fundamental of Interactive Computer Graphics  by Foley and Van Dam             p. 445 for the algorithm.   REVISON HISTORY:            Original version   written by B. Pfarr  STX   10-88            Major rewrite adapted from CIRCLE by Allyn Saroyan   LNLL            Wayne Landsman   STX     Sep. 91            Added DATA keyword   Wayne Landsman  HSTX    June 1993            Added FILL keyword.  R. S. Hill, HSTX, 4-Nov-1993            Always convert to device coords, add _EXTRA keyword, allow vector            colors.   Wayne Landsman, HSTX,  May 1995            Allow one to set COLOR = 0,   W. Landsman, HSTX, November 1995            Check if data axes reversed.  P. Mangifico, W. Landsman  May 1996            Use strict_extra to check input keywords W. Landsman  July 2005            Update documentation to note NOCLIP=0 option W.L.  Oct. 2006            Make all integers default to LONG  W. Landsman  Dec 2006            Use Coyote Graphics procedures W. Landsman Feb 2011            Default to data coordinates if !X.crange present  WL Jan 2012            Add /DEVICE coords, fix Jan 2012 update.   Mar 2012  ", "COLORDeviceDATAFILL_Extraradiusxcyccolor", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/public/tvcircle.html", "tvcircle.pro", '.pro file in <a href="coyote/public/dir-overview.html">coyote/public/ directory</a>', "tvcircle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/public/tvcircle.html#Tvcircle", "Tvcircle", 'routine in <a href="coyote/public/tvcircle.html">tvcircle.pro</a>', "tvcircle.pro", "", "Tvcircle", " NAME:      TVCIRCLE  PURPOSE:      Draw circle(s) of specified radius at specified position(s)  EXPLANATION:      If a position is not specified, and device has a cursor, then a circle      is drawn at the current cursor position.    By default, TVCIRCLE now      (since Jan 2012) assumes data coordinates if !X.crange is set.   CALLING SEQUENCE:      TVCIRCLE, rad, x, y, color, [ /DATA, /FILL, _EXTRA  =  ]   INPUTS:      RAD - radius of circle(s) to be drawn, positive numeric scalar   OPTIONAL INPUT:       X - x position for circle center, vector or scalar       Y - y position for circle center, vector or scalar                If X and Y are not specified, and the device has a cursor,                then program will draw a circle at the current cursor position       COLOR -  color name or intensity value(s) (0 - !D.N_COLORS) used to draw                the circle(s).   If COLOR is a scalar then all circles are drawn                with the same color value.   Otherwise, the Nth circle is drawn                with the  Nth value of color.  See cgCOLOR() for a list of color                names.  Default = 'opposite' (i.e. color opposite the                background).   OPTIONAL KEYWORD INPUTS:        /DATA - if this keyword is set and non-zero, then the circle width and               X,Y position center are interpreted as being in DATA               coordinates.   Note that data coordinates must be previously               defined (with a PLOT or CONTOUR call).    TVCIRCLE will               internally convert to device coordinates before drawing the               circle, in order to maintain optimal smoothness.    The default               is to assume data coordinates if !X.CRANGE is set.    Force               device coordinates by setting DATA = 0 or /DEVICE        /DEVICE - If set, then force use of device coordinates..        /FILL  - If set, fill the circle using cgCOLORFILL                 Any keyword recognized by cgPLOTS (or cgCOLORFILL if /FILL is                set) is also recognized by TVCIRCLE.   In particular, the color,                linestyle, thickness and clipping of the circles are controlled                by the  COLOR, LINESTYLE, THICK and NOCLIP keywords.  (Clipping                is turned off by default, set NOCLIP=0 to activate it.)                If /FILL is set then available keywords are LINE_FILL and                FILL_PATTERN.  OUTPUTS:        None   RESTRICTIONS:        (1) Some round-off error may occur when non-integral values are            supplied for both the radius and the center coordinates        (2) TVCIRCLE does not accept /NORMAL coordinates.        (3) TVCIRCLE always draws a circle --- even when in data coordinates            and the X and Y data scales are unequal.    (The X data scale is            used to define the circle radius.)     If this is not the behaviour            you want, then use TVELLIPSE instead.  EXAMPLE:        (1) Draw circles of radius 9 pixels at the positions specified by            X,Y vectors, using double thickness lines             IDL&gt; tvcircle, 9, x, y, THICK = 2             Now fill in the circles using the LINE_FILL method             IDL&gt; tvcircle, 9, x, y, /FILL, /LINE_FILL  METHOD:            The method used is that of Michener's, modified to take into account            the fact that IDL plots arrays faster than single points.   See             Fundamental of Interactive Computer Graphics  by Foley and Van Dam             p. 445 for the algorithm.   REVISON HISTORY:            Original version   written by B. Pfarr  STX   10-88            Major rewrite adapted from CIRCLE by Allyn Saroyan   LNLL            Wayne Landsman   STX     Sep. 91            Added DATA keyword   Wayne Landsman  HSTX    June 1993            Added FILL keyword.  R. S. Hill, HSTX, 4-Nov-1993            Always convert to device coords, add _EXTRA keyword, allow vector            colors.   Wayne Landsman, HSTX,  May 1995            Allow one to set COLOR = 0,   W. Landsman, HSTX, November 1995            Check if data axes reversed.  P. Mangifico, W. Landsman  May 1996            Use strict_extra to check input keywords W. Landsman  July 2005            Update documentation to note NOCLIP=0 option W.L.  Oct. 2006            Make all integers default to LONG  W. Landsman  Dec 2006            Use Coyote Graphics procedures W. Landsman Feb 2011            Default to data coordinates if !X.crange present  WL Jan 2012            Add /DEVICE coords, fix Jan 2012 update.   Mar 2012  ", "COLORDeviceDATAFILL_Extraradiusxcyccolor", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tvellipse.html", "tvellipse.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tvellipse.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tvellipse.html#tvellipse", "tvellipse", 'routine in <a href="idlastro/tvellipse.html">tvellipse.pro</a>', "tvellipse.pro", "", "tvellipse", " NAME:       TVELLIPSE   PURPOSE:       Draw an ellipse on the current graphics device.   CALLING SEQUENCE:       TVELLIPSE, rmax, rmin, xc, yc, [ pos_ang, color, COLOR= ,/DATA, NPOINTS=                                         LINESTYLE=, THICK=, /MAJOR, /MINOR ]  INPUTS:        RMAX,RMIN - Scalars giving the semi-major and semi-minor axes of                    the ellipse  OPTIONAL INPUTS:        XC,YC - Scalars giving the position on the TV of the ellipse center                If not supplied (or if XC, YC are negative and /DATA is not                set), and an interactive graphics device (e.g. not postscript)                is set,  then the user will be prompted for X,Y        POS_ANG - Position angle of the major axis, measured counter-clockwise                  from the X axis.  Default is 0.        COLOR - Scalar  integer or string specifying color to draw ellipse.                See cgcolor.pro for a list of possible color names  OPTIONAL KEYWORD INPUT:         COLOR - Intensity value or color name used to draw the circle,                 overrides parameter value.  Default = 'opposite'                 See cgCOLOR() for a list of color names.;        /DATA - if this keyword is set and non-zero, then the ellipse radii and                X,Y position center are interpreted as being in DATA                coordinates.   Note that the data coordinates must have been                previously defined (with a PLOT or CONTOUR call).  The default               is to assume data coordinates if !X.CRANGE has been set by a               previous plot.    Force device coordinates by setting DATA = 0.         /DEVICE - Set to force use of device coordinates.         /FILL - If set, then fill the ellipse using cgCOLORFILL         NPOINTS - Number of points to connect to draw ellipse, default = 120                   Increase this value to improve smoothness         /MAJOR - Plot a line along the ellipse's major axis         /MINOR - Plot a line along the ellipse's minor axis                 Any keyword recognized by cgPLOTS is also recognized by TVELLIPSE.                In particular, the color, linestyle, thickness and clipping of                the ellipses are controlled by the  COLOR, LINESTYLE, THICK and                NOCLIP keywords.  (Clipping is turned off by default, set                NOCLIP=0 to activate it.)  If /FILL is set then available                keywords include LINE_FILL and FILL_PATTERN.   RESTRICTIONS:         TVELLIPSE does not check whether the ellipse is within the boundaries         of the window.          The ellipse is evaluated at NPOINTS (default = 120) points and         connected by straight lines, rather than using the more sophisticated         algorithm used by TVCIRCLE          TVELLIPSE does not accept normalized coordinates.          TVELLIPSE is not vectorized; it only draws one ellipse at a time   EXAMPLE:         Draw an ellipse of semi-major axis 50 pixels, minor axis 30         pixels, centered on (250,100), with the major axis inclined 25         degrees counter-clockwise from the X axis.  Use a double thickness         line and device coordinates  	IDL&gt; tvellipse,50,30,250,100,25,thick=2,/device   NOTES:         Note that the position angle for TVELLIPSE (counter-clockwise from         the X axis) differs from the astronomical position angle         (counter-clockwise from the Y axis).   REVISION HISTORY:         Written  W. Landsman STX          July, 1989         Converted to use with a workstation.  M. Greason, STX, June 1990         LINESTYLE keyword, evaluate at 120 points,  W. Landsman HSTX Nov 1995         Added NPOINTS keyword, fixed /DATA keyword W. Landsman HSTX Jan 1996         Check for reversed /DATA coordinates  P. Mangiafico, W.Landsman May 1996         Work correctly when X & Y data scales are unequal  December 1998         Removed cursor input when -ve coords are entered with /data         keyword set  P. Maxted, Keele, 2002         Use _EXTRA keywords including NOCLIP  W. Landsman October 2006         Add plotting of major and minor axes and /MAJOR, /MINOR keywords;         fixed description of RMAX,RMIN (semi-axes).  J. Guerber Feb. 2007         Update to use Coyote graphics W. Landsman Feb 2011         Default to data coordinates if a previous plot has been made         (X.crange is non-zero)  W. Landsman Jan 2012         Added /DEVICE keyword W. Landsman   Mar 2012         Added /FILL keyword  W. Landsman Mar 2012  ", "DATANPOINTSCOLORMAJORMINORDEVICEFILL_Extrarmaxrminxcycpos_angcolor", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tvlaser.html", "tvlaser.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tvlaser.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tvlaser.html#TVLASER", "TVLASER", 'routine in <a href="idlastro/tvlaser.html">tvlaser.pro</a>', "tvlaser.pro", "", "TVLASER", " NAME:       TVLASER  PURPOSE:       Prints screen or image array onto a Postscript file or printer.       Information from FITS header is optionally used for labeling.   CALLING SEQUENCE:       TVLASER, [header, Image, BARPOS = ,CARROWS =, CLABELS = ,/COLORPS,              COMMENTS = ,CSIZE = ,CTITLE = , DX = , DY =, /ENCAP, FILENAME =              HEADER = ,/HELP, IMAGEOUT = ,/INTERP, /MAGNIFY, /NoCLOSE,              /NoDELETE, /NO_PERS_INFO, /NoEIGHT, /NoPRINT, /NoRETAIN,              /PORTRAIT, PRINTER = , /REVERSE, /SCALE, TITLE = , /TrueColor,              XDIM=, XSTART=, YDIM=, YSTART=, BOTTOMDW=, NCOLORSDW= ]         Note that the calling sequence was changed in May 1997  OPTIONAL INPUTS:        HEADER - FITS header string array.   Object and astrometric info from                the FITS header will be used for labeling, if available        IMAGE - if an array is passed through this parameter, then this image                will be used rather than reading off the current window.  This 		allows easy use of large images.     It is usually preferable                to optimally byte scale IMAGE before supplying it to TVLASER   OPTIONAL KEYWORD INPUT PARAMETERS:        BARPOS - A four- or five-element vector giving the position and             orientation of the color bar.  The first four elements             [X0,Y0,XSize,YSize] indicate the position and size of the color             bar in INCHES, relative to origin of the displayed image.             (X0,Y0) are the position of the lower left corner and             (XSize,YSize) are the width and height.  The fifth element is             optional, and if present, the color bar will be printed             horizontally rather than vertically.  If BARPOS is set to             anything but a four- or five-element vector, the bar is NOT             printed.  The default value is BARPOS = [-0.25, 0.0, 0.2, 2.0]        BOTTOMDW - The lowest value to use in building the density             wedge.  Used with NCOLORSDW.  Compatible with BOTTOM and             NCOLORS keywords of XLOADCT.        CARROWS - The color to print the North-East arrows.  Default is dark.             Three types of values can be passed:                  SCALAR: that value's color in the current color table                  3-ELEMENT VECTOR: the color will be [R,G,B]                  STRING: A letter indicating the color.  Valid names are:                  'W' (white), 'D' (dark/black), 'R' (red),    'G' (green),                  'B' (blue),  'T' (turquoise),  'V' (violet), 'Y' (yellow),              If the keyword is set to a value of -1, the arrows are              NOT printed.        COLORPS - If present and non-zero, the idl.ps file is written using              color postscript.        COMMENTS - A string that will be included in the comment line below the                 image.  For multi-line comments you can either use  !C  in the                 string as a carriage return {although the vertical spacing                 might be a little off} or, preferably, make the COMMENTS a                 string array with each line as a separate element.        CLABELS - Color to print the labels, same format as for CARROWS.        CSIZE - Color to print the size-scale bar and label, same format as for                 CARROWS.        CTITLE - Color to print the title, same format as for CARROWS.        DX,DY - offsets in INCHES added to the position of the figure on the                paper.  As is the case for the device keywords XOFFSET and                YOFFSET, when in landscape mode DX and DY are the same                *relative to the paper*, not relative to the plot (e.g., DX is                the horizontal offset in portrait mode, but the *vertical*                offset in landscape mode).        ENCAP - If present and non-zero, the IDL.PS file is written in                encapsulated postscript for import into LaTeX documents        FILENAME - scalar string giving name of output postscript file.                Default is idl.ps.   Automatically sets /NODELETE        HEADER = FITS header.   This is an alternative to supplying the FITS                 header in the first parameter.        HELP - print out the sytax for this procedure.        INTERP - If present and non-zero, current color table will be                 interpolated to fill the full range of the PostScript color                 table (256 colors).  Otherwise, the current color table will be                 directly copied.   You probably will want to use this if you                 are using IMAGE keyword and a shared color table.        MAGNIFY - The net magnification of the entire figure.  At this point,                 the figure is not automatically centered on the paper if the                 value of MAGNIFY is not equal to 1, but the DX and DY keywords                 can be used to shift location.  For example, to fit a full plot                 on the printable area (8.5x8.5 inches) of the Tek PhaserIISD                 color printer use:  MAGNIFY=0.8, DX=0.5, DY=0.5.;        NCOLORSDW - The number of values to include in the density                 wedge.  Used with BOTTOMDW.  Compatible with                 BOTTOM/NCOLORS keywords of XLOADCT.        NoCLOSE - If present and non-zero, then the postscript file is not              closed (or printed), the device is set to 'PS', and the data              coordinate system is set to match the image size.  This allows the              user to add additional plotting commands before printing.  For              example, to include a 15 pixel circle around a source at              coordinates (150,160), around an image, im, with FITS header              array, h                  IDL&gt; tvlaser,h,im,/NoClose      ;Write image & annotation                 IDL&gt; tvcircle,15,150,160,/data  ;Draw circle                 IDL&gt; device,/close              ;Close postscript file & print         NoDELETE - If present and non-zero, the postscript file is kept AND is                  also sent to the printer        NoEIGHT - if set then only four bits sent to printer (saves space)        NO_PERS_INFO - if present and non-zero, output notation will NOT                  include date/user block of information.        NoPRINT - If present and non-zero, the output is sent to a file (default                 name 'idl.ps'), which is NOT deleted and is NOT sent to the                 printer.        NoRETAIN - In order to avoid possible problems when using TVRD with                  an obscured window, TVLASER will first copy the current window                  to a temporary RETAIN=2 window.    Set /NORETAIN to skip this                  step and improve performance        PORTRAIT - if present and non-zero, the printer results will be in                  portrait format; otherwise, they will be in landscape format.                  If labels are requested, image will be in portrait mode,                  regardless        PRINTER - scalar string giving the OS command to send a the postscript                file to the printer.   Under Unix, the default value of PRINTER                is 'lpr ' while for other OS it is 'print '        REVERSE - if present and non-zero, color table will be fliped, so black                and white are reversed.        SCALE - if present and non-zero, image will be bytscaled before being                sent to postscript file.        TITLE - if present and non-zero, the string entered here will be the                title of the picture.  Default is the OBJECT field in the                header (if present).        TRUECOLOR - if present and non-zero, the postscript file is created                using the truecolor switch (i.e. true=3). The colorbar is                not displayed in this mode.        XDIM,YDIM - Number of pixels.  Default is from !d.x_size and !d.y_size,                or size of image if passed with IMAGE keyword.        XSTART,YSTART - lower left corner (default of (0,0))   OPTIONAL KEYWORD OUTPUT PARAMETER         IMAGEOUT = the image byte array actually sent to the postscript file.   SIDE EFFECTS:         A postscript file is created in the current directory.  User must have         write privileges in the current directory.  The file is named idl.ps         unless the FILENAME keyword is given.   The file is directed to the         printer unless the /ENCAP, /NoCLOSE, or /NOPRINT keywords are given.         After printing, the file is deleted unless the /NODELETE or FILENAME         keywords are given.  PROCEDURE:        Read display or take IMAGE and then redisplay into a postscript file.        If a header exists, printout header information.  If header has        astrometry, then print out orientation and scale information.  PROCEDURES USED:         ARROWS, EXTAST, FDECOMP, GETROT, PIXCOLOR, SXPAR(), XYAD, ZPARCHECK  *EXAMPLE:        1) Send a true color image (xsize,ysize,3) to a printer (i.e. print23l),                 tvlaser,huv,cpic,/colorps,/truecolor,printer= print23l                  % TVLASER: Now printing image: $print23l idl.ps   MODIFICATION HISTORY:        Major rewrite from UIT version   W. Landsman   Dec 94        Massive rewrite.  Added North-East arrows, pixel scale bar, color bar,        and keywords DX, DY, MAGNIFY, INTERP, HELP, and COMMENTS.        Created ablility to define colors for annotation and        text.  Repositioned text labels.     J.Wm.Parker, HITC, 5/95        Make Header and Image parameters instead of keywords.   Add PRINTER        keyword.   Include alternate FITS keywords.   W. Landsman May 97        Copy to a RETAIN=2 window, work without FITS header W. Landsman June 97        Cleaner output when no astrometry in header  W. Landsman  June 97        Added /INFO to final MESSAGE  W. Landsman   July 1997        12/4/97	jkf/acc	- added TrueColor optional keyword.        Added /NoClose keyword, trim Equinox format  W. Landsman 9-Jul-1998        Don't display coordinate labels if no astrometry, more flexible        formatting of exposure time W. Landsman 30-Aug-1998        BottomDW and NColorsDW added.  R. S. Hill, 1-Mar-1999        Apply func tab to color bar if not colorps.  RSH, 21 Mar 2000        Fix problem with /NOCLOSE and unequal X,Y sizes  W. Landsman Feb 2001        Use TVRD(True=3) if /TRUECOLOR set    W. Landsman   November 2001        More synonyms, check for header supplied W. Landsman November 2007  ", "BARPOSCARROWSCLABELSCOLORPSCOMMENTSCSIZECTITLEDXDYENCAPFILENAMEHEADERHELPIMAGEOutINTERPMAGNIFYNoCloseNODELETENO_PERS_INFONOEIGHTNOPRINTNORETAINPORTRAITPRINTERREVERSESCALETITLEXSTARTYSTARTXDIMYDIMTrueColorBOTTOMDWNCOLORSDWhdrImage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/tvlist.html", "tvlist.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "tvlist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/tvlist.html#tvlist", "tvlist", 'routine in <a href="idlastro/tvlist.html">tvlist.pro</a>', "tvlist.pro", "", "tvlist", " NAME: 	TVLIST  PURPOSE: 	Cursor controlled listing of image pixel values in a window.   CALLING SEQUENCE: 	TVLIST, [image, dx, dy, TEXTOUT=, OFFSET= , ZOOM= ]   OPTIONAL INPUTS: 	IMAGE - Array containing the image currently displayed on the screen. 		If omitted, the byte pixel intensities are read from the TV 		If the array does not start at position (0,0) on the window then 		the OFFSET keyword should be supplied.  	DX     -Integer scalar giving the number of pixels in the X direction 		to be displayed.  If omitted then DX = 18 for byte images, and 		DX = 14 for integer images.  TVLIST will display REAL data 		with more significant figures if more room is availble to 		print.  	DY    - Same as DX, but in Y direction.  If omitted, then DY = DX   OPTIONAL INPUT KEYWORDS:       OFFSET - 2 element vector giving the location of the image pixel (0,0) 		on the window display.   OFFSET can be positive (e.g if the 		image is centered in a larger window) or negative (e.g. if the 		only the central region of an image much larger than the window 		is being displayed. 		Default value is [0,0], or no offset. 	ZOOM - Scalar specifying the magnification of the window with respect 		to the image variable.    Use, for example, if image has been 		REBINed before display. 	TEXTOUT - Optional keyword that determines output device. 		The following dev/file is opened for output.  		textout=1	TERMINAL using /more option (default) 		textout=2	TERMINAL without /more option 		textout=3	&lt;program&gt;.prt 		textout=4	laser.tmp 		textout=5       user must open file 		textout=7	Append to an existing &lt;program&gt;.prt file if it 				exists 		textout = filename (default extension of .prt)  	If TEXTOUT &gt; 3 or set to a filename, then TVLIST will prompt for a 	brief description to be included in the output file  OUTPUTS: 	None.  PROCEDURE: 	Program prompts user to place cursor on region of interest in 	image display.  Corresponding region of image is then displayed at 	the terminal.   A compression factor between the image array and the 	displayed image is determined using the ratio of image sizes.  If 	necessary, TVLIST will divide all pixel values in a REAL*4 image by a 	(displayed) factor of 10^n (n=1,2,3...) to make a pretty format.   SYSTEM VARIABLE: 	The nonstandard system variable !TEXTOUT is used as an alternative to 	the keyword TEXTOUT.   The procedure ASTROLIB can be used to define 	!TEXTOUT (and !TEXTUNIT) if necessary.   RESTRICTIONS: 	TVLIST may not be able to correctly format all pixel values if the 	dynamic range near the cursor position is very large.         For the cursor to work under Mac OSX  the  Click-through Inactive        Windows  setting the in X11:Preferences:Window needs to be enabled.  PROCEDURES CALLED: 	IMLIST, UNZOOM_XY  REVISION HISTORY: 	Written by rhc, SASC Tech, 3/14/86. 	Added textout keyword option, J. Isensee, July, 1990 	Check for readable pixels     W. Landsman   May 1992 	Use integer format statement from F_FORMAT    W. Landsman   Feb 1994 	Added OFFSET, ZOOM keywords  W. Landsman   Mar 1996 	More intelligent formatting of longword, call TEXTOPEN with /STDOUT 		W. Landsman  April, 1996 	Added check for valid dx value  W. Landsman   Mar 1997 	Converted to IDL V5.0   W. Landsman   September 1997        Major rewrite to call IMLIST, recognize new integer data types                                            W. Landsman Jan 2000        Remove all calls to !TEXTUNIT   W. Landsman   Sep 2000        Always call UNZOOM_XY for MOUSSE compatibility  W. Landsman Sep. 2004  ", "TEXTOUTOFFSETZOOMimagedxdy", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/twopixfit.html", "twopixfit.pro", '.pro file in <a href="code_snapshots/aug22_notworking/dir-overview.html">code_snapshots/aug22_notworking/ directory</a>', "twopixfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/aug22_notworking/twopixfit.html#twopixfit", "twopixfit", 'routine in <a href="code_snapshots/aug22_notworking/twopixfit.html">twopixfit.pro</a>', "twopixfit.pro", "", "twopixfit", "       Fits 2nd order polynomial to limb strips   ", "inputstruct           Structure containing all the solar information   inputimage           Starting input image   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/undefine.html", "undefine.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "undefine.pro", "", "", " NAME:        UNDEFINE   PURPOSE:        The purpose of this program is to delete or undefine        an IDL program variable from within an IDL program or        at the IDL command line. It is a more powerful DELVAR.        Pointer and structure variables are traversed recursively        to undefine any variables pointed to in the pointer or in        a structure dereference.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1642 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities.   CALLING SEQUENCE:        UNDEFINE, variable   REQUIRED INPUTS:        variable: The variable to be deleted. Up to 10 variables may be specified as arguments.   SIDE EFFECTS:        The variable no longer exists.   EXAMPLE:        To delete the variable  info , type:          IDL&gt; Undefine, info          IDL&gt; var = ptr_new({a:ptr_New(5), b:findgen(11), c: {d:ptr_New(10), f:findgen(11)}})         IDL&gt; Help, /Heap         Heap Variables:             # Pointer: 3             # Object : 0         &lt;PtrHeapVar3&gt;   LONG      =            5         &lt;PtrHeapVar4&gt;   LONG      =            10         &lt;PtrHeapVar5&gt;   STRUCT    = -&gt; &lt;Anonymous&gt; Array[1]          IDL&gt; Undefine, var         IDL&gt; Help, /Heap         Heap Variables:             # Pointer: 0             # Object : 0         IDL&gt; Help, var          VAR               UNDEFINED = &lt;Undefined&gt;   MODIFICATION HISTORY:        Written by David W. Fanning, 8 June 97, from an original program        given to me by Andrew Cool, DSTO, Adelaide, Australia.        Simplified program so you can pass it an undefined variable. :-) 17 May 2000. DWF        Simplified it even more by removing the unnecessary SIZE function. 28 June 2002. DWF.        Added capability to delete up to 10 variables at suggestion of Craig Markwardt. 10 Jan 2008. DWF.        If the variable is a pointer, object or structure reference the variable is recursively traversed           to free up all variables pointed to before the variable is itself destroyed. 10 June 2009. DWF.        Updated to allow undefining of pointer arrays. 8 October 2009. DWF.        Valid pointers that point to undefined variable can cause an infinite loop. Now using            Heap_Free, rather than recursion, with pointers. 30 May 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/undefine.html#UNDEFINE", "UNDEFINE", 'routine in <a href="coyote/undefine.html">undefine.pro</a>', "undefine.pro", "", "UNDEFINE", "", "var0var1var2var3var4var5var6var7var8var9", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/undefine.html", "undefine.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "undefine.pro", "", "", " NAME:        UNDEFINE   PURPOSE:        The purpose of this program is to delete or undefine        an IDL program variable from within an IDL program or        at the IDL command line. It is a more powerful DELVAR.        Pointer and structure variables are traversed recursively        to undefine any variables pointed to in the pointer or in        a structure dereference.   AUTHOR:        FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1642 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Utilities.   CALLING SEQUENCE:        UNDEFINE, variable   REQUIRED INPUTS:        variable: The variable to be deleted. Up to 10 variables may be specified as arguments.   SIDE EFFECTS:        The variable no longer exists.   EXAMPLE:        To delete the variable  info , type:          IDL&gt; Undefine, info          IDL&gt; var = ptr_new({a:ptr_New(5), b:findgen(11), c: {d:ptr_New(10), f:findgen(11)}})         IDL&gt; Help, /Heap         Heap Variables:             # Pointer: 3             # Object : 0         &lt;PtrHeapVar3&gt;   LONG      =            5         &lt;PtrHeapVar4&gt;   LONG      =            10         &lt;PtrHeapVar5&gt;   STRUCT    = -&gt; &lt;Anonymous&gt; Array[1]          IDL&gt; Undefine, var         IDL&gt; Help, /Heap         Heap Variables:             # Pointer: 0             # Object : 0         IDL&gt; Help, var          VAR               UNDEFINED = &lt;Undefined&gt;   MODIFICATION HISTORY:        Written by David W. Fanning, 8 June 97, from an original program        given to me by Andrew Cool, DSTO, Adelaide, Australia.        Simplified program so you can pass it an undefined variable. :-) 17 May 2000. DWF        Simplified it even more by removing the unnecessary SIZE function. 28 June 2002. DWF.        Added capability to delete up to 10 variables at suggestion of Craig Markwardt. 10 Jan 2008. DWF.        If the variable is a pointer, object or structure reference the variable is recursively traversed           to free up all variables pointed to before the variable is itself destroyed. 10 June 2009. DWF.        Updated to allow undefining of pointer arrays. 8 October 2009. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/undefine.html#UNDEFINE", "UNDEFINE", 'routine in <a href="idlastro/coyote/undefine.html">undefine.pro</a>', "undefine.pro", "", "UNDEFINE", "", "var0var1var2var3var4var5var6var7var8var9", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/unzoom_xy.html", "unzoom_xy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "unzoom_xy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/unzoom_xy.html#unzoom_xy", "unzoom_xy", 'routine in <a href="idlastro/unzoom_xy.html">unzoom_xy.pro</a>', "unzoom_xy.pro", "", "unzoom_xy", " NAME:       UNZOOM_XY  PURPOSE:       Converts X, Y position on the image display to the the X,Y position       on the corresponding image array.  (These  positions are identical       only for an unroamed, unzoomed image with with pixel (0,0) of the       image placed at position (0,0) on the TV.)   CALLING SEQUENCE:       UNZoom_XY, Xtv,Ytv,Xim,Yim, [ OFFSET =, ZOOM = ]   INPUTS:       XTV - Scalar or vector giving X position(s) as read on the image             display (e.g. with CURSOR,XTV,YTV,/DEVICE)       XTV - Scalar or vector giving Y position(s) on the image display.       If only 2 parameters are supplied then XTV and YTV will be modfied       on output to contain the image array coordinates.   OPTIONAL KEYWORD INPUT:       OFFSET - 2 element vector giving the location of the image pixel (0,0)                on the window display.   OFFSET can be positive (e.g if the                image is centered in a larger window) or negative (e.g. if the                only the central region of an image much larger than the window                is being displayed.                Default value is [0,0], or no offset.  OUTPUTS:       XIM,YIM - X and Y coordinates of the image corresponding to the             cursor position on the TV display.  COMMON BLOCKS:        If present, ZOOM_XY will use the TV and IMAGE common blocks which are        defined in the MOUSSE software system (see         http://archive.stsci.edu/uit/analysis.html)   If the user is not using        the MOUSSE software (which keeps track of the offset and zoom in each        window) then the common blocks are ignored.  NOTES:        The integer value of a pixel is assumed to refer to the *center*        of a pixel.  REVISON HISTORY:        Adapted from MOUSSE procedure  W. Landsman       March 1996        Converted to IDL V5.0   W. Landsman   September 1997        Proper handling of offset option          S. Ott/W. Landsman May 2000        Put back common blocks for MOUSSE compatibility    September 2004  ", "OFFSETZOOMxtvytvximyim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/update_distort.html", "update_distort.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "update_distort.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/update_distort.html#update_distort", "update_distort", 'routine in <a href="idlastro/update_distort.html">update_distort.pro</a>', "update_distort.pro", "", "update_distort", " NAME:     UPDATE_DISTORT  PURPOSE:     Update SIP nonlinear distortion coefficients for a linear transformation  EXPLANATION:     The SIP coefficients can account for nonlinearities in the astrometry     of an astronomical image.    When the image is compressed or expanded     these coefficients must be adjusted in a nonlinear way.  CALLING SEQUENCE:     UPDATE_DISTORT, distort, xcoeff, ycoeff  INPUT/OUTPUT:     distort - structure giving SIP coefficients.    See extast.pro for              description of the SIP distortion structure     xcoeff - 2 element numeric vector describing the linear transformation               xp = xcoeff[0]*x + xcoeff[1]     xcoeff - 2 element numeric vector describing the linear transformation               yp = ycoeff[0]*x + ycoeff[1]   METHOD:      The procedure TRANSFORM_COEFF is  used to determine how the      coefficients change under the linear transformation.       See example of usage in hrebin.pro  REVISION HISTORY:      Written, December 2007            W. Landsman  ", "distortxcoeffycoeff", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/uvbybeta.html", "uvbybeta.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "uvbybeta.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/uvbybeta.html#uvbybeta", "uvbybeta", 'routine in <a href="idlastro/uvbybeta.html">uvbybeta.pro</a>', "uvbybeta.pro", "", "uvbybeta", " NAME:        UVBYBETA  PURPOSE:        Derive dereddened colors, metallicity, and Teff from Stromgren colors.  EXPLANATION:        Adapted from FORTRAN routine of same name published by T.T. Moon,        Communications of University of London Observatory, No. 78. Parameters        can either be input interactively (with /PROMPT keyword) or supplied        directly.   CALLING SEQUENCE:        uvbybeta, /PROMPT               ;Prompt for all parameters        uvbybeta,by,m1,c1,Hbeta,n        ;Supply inputs, print outputs        uvbybeta, by, m1, c1, Hbeta, n, Te, Mv, Eby, delm0, radius,                        [ TEXTOUT=, Eby_in =, Name =  ]   INPUTS:        by - Stromgren b-y color, scalar or vector        m1 - Stromgren line-blanketing parameter, scalar or vector        c1 - Stromgren Balmer discontinuity parameter, scalar or vector        Hbeta - H-beta line strength index.  Set  Hbeta to 0 if it is not             known, and UVBYBETA will estimate a value based on by, m1,and c1.             Hbeta is not used for stars in group 8.        n -  Integer (1-8), scalar or vector,  giving approximate stellar             classification         (1) B0 - A0, classes III - V, 2.59 &lt; Hbeta &lt; 2.88,-0.20 &lt;   c0  &lt; 1.00        (2) B0 - A0, class   Ia     , 2.52 &lt; Hbeta &lt; 2.59,-0.15 &lt;   c0  &lt; 0.40        (3) B0 - A0, class   Ib     , 2.56 &lt; Hbeta &lt; 2.61,-0.10 &lt;   c0  &lt; 0.50        (4) B0 - A0, class   II     , 2.58 &lt; Hbeta &lt; 2.63,-0.10 &lt;   c0  &lt; 0.10        (5) A0 - A3, classes III - V, 2.87 &lt; Hbeta &lt; 2.93,-0.01 &lt; (b-y)o&lt; 0.06        (6) A3 - F0, classes III - V, 2.72 &lt; Hbeta &lt; 2.88, 0.05 &lt; (b-y)o&lt; 0.22        (7) F1 - G2, classes III - V, 2.60 &lt; Hbeta &lt; 2.72, 0.22 &lt; (b-y)o&lt; 0.39        (8) G2 - M2, classes  IV _ V, 0.20 &lt; m0   &lt; 0.76, 0.39 &lt; (b-y)o&lt; 1.00   OPTIONAL INPUT KEYWORD:        Eby_in - numeric scalar specifying E(b-y) color to use.   If not              supplied, then E(b-y) will be estimated from the Stromgren colors        NAME - scalar or vector string giving name(s) of star(s).  Used only                when writing to  disk for identification purposes.        /PROMPT - if set, then uvbybeta.pro will prompt for Stromgren indicies                 interactively        TEXTOUT  -  Used to determine output device.  If not present, the                value of the !TEXTOUT system variable is used (see TEXTOPEN)                textout=1       Terminal with /MORE (if a tty)                textout=2       Terminal without /MORE                textout=3       uvbybeta.prt   (output file)                textout=4       Laser Printer                textout=5       User must open file                textout=7       Append to existing uvbybeta.prt file                textout = filename (default extension of .prt)       /PRINT - if set, then force display output information to the device                specified by !TEXTOUT.    By default, UVBYBETA does not display                information if output variables are supplied (and TEXTOUT is                not set).   OPTIONAL OUTPUTS:        Te - approximate effective temperature        MV - absolute visible magnitude        Eby - Color excess E(b-y)        delm0 - metallicity index, delta m0, (may not be calculable for early                B stars).        radius - Stellar radius (R/R(solar))  EXAMPLE:        Suppose 5 stars have the following Stromgren parameters         by = [-0.001 ,0.403, 0.244, 0.216, 0.394 ]        m1 = [0.105, -0.074, -0.053, 0.167, 0.186 ]        c1 = [0.647, 0.215, 0.051, 0.785, 0.362]        hbeta = [2.75, 2.552, 2.568, 2.743, 0 ]        nn = [1,2,3,7,8]              ;Processing group number         Determine stellar parameters and write to a file uvbybeta.prt        IDL&gt; uvbybeta, by,m1,c1,hbeta, nn, t=3             ==&gt; E(b-y) = 0.050    0.414   0.283  0.023  -0.025                 Teff =   13060    14030   18420  7250    5760                 M_V =    -0.27    -6.91   -5.94  2.23    3.94                 radius=  2.71     73.51    39.84 2.02    1.53  SYSTEM VARIABLES:        The non-standard system variables !TEXTOUT and !TEXTUNIT will be        automatically defined if they are not already present.         DEFSYSV,'!TEXTOUT',1        DEFSYSV,'!TEXTUNIT',0   NOTES:        (1) **This procedure underwent a major revision in January 2002        and the new calling sequence may not be compatible with the old** (NAME        is now a keyword rather than a parameter.)         (2) Napiwotzki et al. (1993, A&A, 268, 653) have written a FORTRAN            program that updates some of the Moon (1985) calibrations.  These            updates are *not* included in this IDL procedure.  PROCEDURES USED:        DEREDD, TEXTOPEN, TEXTCLOSE  REVISION HISTORY:        W. Landsman          IDL coding              February, 1988        Keyword textout added, J. Isensee, July, 1990        Made some constants floating point.   W. Landsman    April, 1994        Converted to IDL V5.0   W. Landsman   September 1997        Added Eby_in, /PROMPT keywords, make NAME a keyword and not a parameter                  W. Landsman      January 2002  ", "TEXTOUTeby_innamepromptprintxbyxm1xc1xHbetaxnTeMVebydelm0radius", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/vactoair.html", "vactoair.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "vactoair.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/vactoair.html#vactoair", "vactoair", 'routine in <a href="idlastro/vactoair.html">vactoair.pro</a>', "vactoair.pro", "", "vactoair", " NAME: 	VACTOAIR  PURPOSE: 	Convert vacuum wavelengths to air wavelengths  EXPLANATION: 	Corrects for the index of refraction of air under standard conditions. 	Wavelength values below 2000 A will not be altered.  Accurate to 	about 10 m/s.   CALLING SEQUENCE: 	VACTOAIR, WAVE_VAC, [WAVE_AIR]   INPUT/OUTPUT: 	WAVE_VAC - Vacuum Wavelength in Angstroms, scalar or vector 		If the second parameter is not supplied, then this will be                updated on output to contain double precision air wavelengths.   OPTIONAL OUTPUT:         WAVE_AIR - Air wavelength in Angstroms, same number of elements as                  WAVE_VAC, double precision   EXAMPLE: 	If the vacuum wavelength is  W = 2000, then  	IDL&gt; VACTOAIR, W  	yields an air wavelength of W = 1999.353 Angstroms   METHOD: 	Formula from Ciddor 1996  Applied Optics , 35, 1566   REVISION HISTORY 	Written, D. Lindler 1982 	Documentation W. Landsman  Feb. 1989        Use Ciddor (1996) formula for better accuracy in the infrared            Added optional output vector, W Landsman Mar 2011  ", "wave_vacwave_air", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/valid_num.html", "valid_num.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "valid_num.pro", "", "", " NAME:      VALID_NUM()  PURPOSE:      Check if a string is a valid number representation.  EXPLANATION:      The input string is parsed for characters that may possibly      form a valid number.  It is more robust than simply checking      for an IDL conversion error because that allows strings such      as '22.3qwert' to be returned as the valid number 22.3       This function had a major rewrite in August 2008 to use STREGEX      and allow vector input.    It should be backwards compatible.  CALLING SEQUENCE:      IDL&gt; status = valid_num(string  [,value]  [,/integer])   INPUTS:      string  -  the string to be tested, scalar or array   RETURNS      status - byte scalar or array, same size as the input string               set to 1 where the string is a  valid number, 0 for invalid  OPTIONAL OUTPUT:      value     - The value the string decodes to, same size as input string.            This will be returned as a double precision number unless            /INTEGER is present, in which case a long integer is returned.   OPTIONAL INPUT KEYWORD:     /INTEGER   -  if present code checks specifically for an integer.  EXAMPLES:      (1) IDL&gt; print,valid_num(3.2,/integer)         --&gt; 0     ;Since 3.2 is not an integer      (2) IDL&gt; str =['-0.03','2.3g', '3.2e12']          IDL&gt; test = valid_num(str,val)               test = [1,0,1]    &  val =  [-0.030000000 ,NaN ,3.2000000e+12]  REVISION HISTORY:           Version 1, C D Pike, RAL, 24-May-93           Version 2, William Thompson, GSFC, 14 October 1994                        Added optional output parameter VALUE to allow                        VALID_NUM to replace STRNUMBER in FITS routines.           Version 3 Wayne Landsman rewrite to use STREGEX, vectorize           Version 4 W.L. (fix from C. Markwardt) Better Stregex expression,                     was missing numbers like '134.' before Jan 1 2010  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/valid_num.html#valid_num", "valid_num", 'routine in <a href="idlastro/valid_num.html">valid_num.pro</a>', "valid_num.pro", "", "valid_num", "", "INTEGERstringvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/vcolorbar__define.html", "vcolorbar__define.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "vcolorbar__define.pro", "", "", " NAME:        VCOLORBAR   FILENAME:         vcolorbar__define.pro   PURPOSE:         The purpose of this program is to create a vertical        colorbar object to be used in conjunction with other        IDL 5 graphics objects.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com/   CATEGORY:         IDL Object Graphics.   CALLING SEQUENCE:         thisColorBar = Obj_New('VColorBar')   REQUIRED INPUTS:         None.   INIT METHOD KEYWORD PARAMETERS:         COLOR: A three-element array representing the RGB values of a color           for the colorbar axes and annotation. The default value is           white: [255,255,255].         NAME: The name associated with this object.         NCOLORS: The number of colors associated with the colorbar. The           default is 256.         MAJOR: The number of major tick divisions on the colorbar axes.           The default is 5.         MINOR: The number of minor tick marks on the colorbar axes.           The default is 4.         PALETTE: A palette object for the colorbar. The default palette            is a gray-scale palette object.         POSITION: A four-element array specifying the position of the            colorbar in the arbitary coordinate system of the viewplane            rectangle. The default position is [0.90, 0.10, 0.95, 0.90].         RANGE: The range associated with the colorbar axis. The default            is [0, NCOLORS].         TITLE: A string containing a title for the colorbar axis            annotation. The default is a null string.   OTHER METHODS:         Clamp (Procedure): Given a two-element array in the data range of           the colorbar, the colorbar image is clamped to this range. In           other words, the range of colors is clamped to the specified           range. Values above or below the range in the colorbar are set to           the minimum and maximum range values, respectively.         GetProperty (Procedure): Returns colorbar properties in keyword           parameters as defined for the INIT method. Keywords allowed are:                 COLOR                MAJOR                MINOR                NAME                PALETTE                POSITION                RANGE                TITLE                TRANSFORM         SetProperty (Procedure): Sets colorbar properties in keyword           parameters as defined for the INIT method. Keywords allowed are:                 COLOR                NAME                MAJOR                MINOR                PALETTE                POSITION                RANGE                TITLE                TRANSFORM   SIDE EFFECTS:         A VCOLORBAR object is created. The colorbar INHERITS IDLgrMODEL.        Thus, all IDLgrMODEL methods and keywords can also be used. It is        the model that is selected in a selection event, since the SELECT_TARGET        keyword is set for the model.   EXAMPLE:         To create a colorbar object and add it to a plot view object, type:         thisColorBarObject = Obj_New('VColorBar')        plotView-&gt;Add, thisColorBarObject        plotWindow-&gt;Draw, plotView   MODIFICATION HISTORY:         Written by David W. Fanning, 19 June 97.        Changed the optional  colorbarmodel  parameter to an            optional GETMODEL parameter. 26 June 97. DWF.        Fixed bug in the way the color palette was assigned. 13 Aug 97. DWF.        Added missing container object to self structure. 13 Aug 97. DWF.        Removed image model, which was a workaround for            broken 5.0 objects. 5 Oct 97. DWF        Fixed cleanup procedure to clean up ALL objects. 12 Feb 98. DWF.        Changed IDLgrContainer to IDL_Container to fix 5.1 problems. 20 May 98. DWF.        Modified colorbar to INHERIT an IDLgrModel object. This allows me to            add the colorbar to other models directly. 20 Sept 98. DWF.        Added NAME keyword to give the colorbar a name. 20 Sept 98. DWF.        Changed a reference to _Ref_Extra to _Extra. 27 Sept 98. DWF.        Fixed bug when adding a text object via the TEXT keyword. 9 May 99. DWF.        Fixed a bug with getting the text object via the TEXT keyword. 16 Aug 2000. DWF.        Added the TRANSFORM keyword to GetProperty and SetProperty methods. 16 Aug 2000. DWF.        Added RECOMPUTE_DIMENSIONS=2 to text objects. 16 Aug 2000. DWF.        Added a polygon object around the image object. This allows rotation in 3D space. 16 Aug 2000. DWF.        Removed TEXT keyword (which was never used) and fixed TITLE keyword. 8 Dec 2000. DWF.        Added ENABLE_FORMATTING keyword to title objects. 22 October 2001. DWF.        Added a CLAMP method. 18 November 2001. DWF.        Forgot to pass extra keywords along to the text widget. As a result, you couldn't           format tick labels, etc. Fixed this. Any keywords appropriate for IDLgrTick objects           are now available. 26 June 2002. DWF.        Fixed a problem with POSITION keyword in SetProperty method. 23 May 2003. DWF.        Removed NORMALIZE from source code. 29 Nov 2005. DWF.        Font sizes have changed. Now using a 12 point font. 6 May 2011. DWF.        Changed FSC_Normalize to cgNormalize to reflect new name. 6 Feb 2013. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/vcolorbar__define.html#VColorBar::Clamp", "VColorBar::Clamp", 'routine in <a href="coyote/vcolorbar__define.html">vcolorbar__define.pro</a>', "vcolorbar__define.pro", "", "VColorBar::Clamp", "", "datarange", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/vcolorbar__define.html#VColorBar::INIT", "VColorBar::INIT", 'routine in <a href="coyote/vcolorbar__define.html">vcolorbar__define.pro</a>', "vcolorbar__define.pro", "", "VColorBar::INIT", "", "PositionNColorsTitlePaletteMajorMinorRangeColor_ExtraName", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/vcolorbar__define.html#VColorBar::Cleanup", "VColorBar::Cleanup", 'routine in <a href="coyote/vcolorbar__define.html">vcolorbar__define.pro</a>', "vcolorbar__define.pro", "", "VColorBar::Cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/vcolorbar__define.html#VColorBar::GetProperty", "VColorBar::GetProperty", 'routine in <a href="coyote/vcolorbar__define.html">vcolorbar__define.pro</a>', "vcolorbar__define.pro", "", "VColorBar::GetProperty", "", "PositionTextTitlePaletteMajorMinorRangeColorNameTransform_Ref_Extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/vcolorbar__define.html#VColorBar::SetProperty", "VColorBar::SetProperty", 'routine in <a href="coyote/vcolorbar__define.html">vcolorbar__define.pro</a>', "vcolorbar__define.pro", "", "VColorBar::SetProperty", "", "PositionTitlePaletteMajorMinorRangeColorNameTransform_Extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/vcolorbar__define.html#VColorBar__Define", "VColorBar__Define", 'routine in <a href="coyote/vcolorbar__define.html">vcolorbar__define.pro</a>', "vcolorbar__define.pro", "", "VColorBar__Define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/vect.html", "vect.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "vect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/vect.html#VECT", "VECT", 'routine in <a href="idlastro/vect.html">vect.pro</a>', "vect.pro", "", "VECT", " NAME: 	VECT  PURPOSE: 	Print a set of numbers as a string with delimiters included  EXPLANATION: 	This function returns the given vector in parenthesized coordinates 	as in the form (X,Y).  No limit on the number of dimensions.  Also 	note that the vector does not need to be numbers.  It may also be a 	string vector.  e.g. ['X','Y']   CALLING SEQEUNCE: 	tmp = VECT( vctr, [ form, FORMAT = , DELIM =  ] )  INPUT: 	VCTR      The vector to be displayed  e.g. [56,44]   OPTIONAL KEYWORD INPUT: 	FORMAT    This KEYWORD allows the specification of a format for the 		elements.  e.g.: VECT([2,3],format='(f7.1)') gives '(2.0,3.0)' 	DELIM     This KEYWORD specifies the delimeter.  The default is ',' but 		other useful examples might be ', ' or ':'   OPTIONAL INPUT 	FORM      This parameter may be used instead of the keyword FORMAT   OUTPUT: 	tmp       A returned string of the parenthesized vector   Other Procedures/Functions Called: 	STRN   HISTORY: 	03-JUL-90 Version 1 written by Eric W. Deutsch 	24-AUG-91 Format='' keyword added (E. Deutsch) 	29-AUG-91 FORM parameter added (E. Deutsch) 	Converted to IDL V5.0   W. Landsman   September 1997  ", "Formatdelimvctrform", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/vsym.html", "vsym.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "vsym.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/vsym.html#VSYM", "VSYM", 'routine in <a href="idlastro/vsym.html">vsym.pro</a>', "vsym.pro", "", "VSYM", " NAME:        VSYM   PURPOSE:        Create  Mongo -like polygonal plot symbols  EXPLANATION:        This procedure generates a subset of Mongo-like plot symbols.        The symbols are the rotationally symmetric ones that have        a specified number of vertices and are either open or filled.        (The half-filled symbols are not included.)     After defining the        plot symbol with VSYM, make the call to PLOT (or PLOTS or OPLOT) with        PSYM=8.   CATEGORY:        Graphics   CALLING SEQUENCE:        VSYM, Nvert   INPUT POSITIONAL PARAMETERS:        Nvert:     Number of vertices in plot symbol.  Maximum value                   used is 24.   INPUT KEYWORD PARAMETERS:        STAR:      Set this flag to get a star.  E.g.,                   vsym, 5,/star gets you a pentagram.        SKELETON:  Set this flag to get an asterisk-like symbol, where                   the center is connected to each vertex.  E.g.,                   vsym, 4, /skel gets you an X.        POLYGON:   Set this flag to get a regular polygon.  This is                   the default symbol type.        FILL:      Set this flag to get filled symbol.  Default=open        ROT:       Rotation of symbol about center, in degrees.                   E.g., vsym, 4, rot=45 gets you a diamond, whereas                   vsym, 4 gets you a square.        THICK:     Line thickness of symbol.  Default=!P.thick   MODIFICATION HISTORY:        Written by:     R. S. Hill, RITSS, 2 Oct 98  ", "STARSKELETONPOLYGONFILLROTTHICKNvert", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/wcs_demo.html", "wcs_demo.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "wcs_demo.pro", "", "", " NAME:        WCS_DEMO   PURPOSE:        Demonstrate the basic capabilities of procedures WCSSPH2XY & WCSXY2SPH   CATEGORY:        Mapping and Auxilary FITS Demo Routine   CALLING SEQUENCE:         .run wcs_demo: compiles wcs_demo and the supporting demo routines        wcs_demo: run the demo   INPUT PARAMETERS:         none   OUTPUT PARAMETERS:        none   PROCEDURE:         This is a demo program which is meant to call the routines        wcssph2xy.pro and wcsxy2sph.pro.  Since the purpose of this        routine is both to show what the routines can do and what the        user has to do, a file is created with all of the commands        needed to complete the desired operation.  Wcs_demo actually        executes this command file, so the user can exactly duplicate        the results by simply re-executing this file.  Also, this        allows a user to edit an already existing file which calls        wcssph2xy.pro and wcsxy2sph.pro properly and extend the file's        usefulness.  This demo program allows several possible tests.        The first option is to simply draw a grid of evenly spaced        latitude and longitude lines in a particular map transformation.        Another possibility is to do a full loop, creating a Cartesian        grid of latitude and longitude lines and calling wcssph2xy.pro        to convert them to a particular map.  Then, wcsxy2sph.pro is        called to invert the process and the difference between the        original and final latitudes and longitudes can be plotted.        This allows one to assess the level of the numerical errors        introduced by the mapping routines.  A third possible option is to        look at some of the map transformations and include rotations of        the reference points so that a different perspective is given.   COMMON BLOCKS:        none   PROCEDURES CALLED:        SPHDIST(), WCSXY2SPH, WCSSPH2XY  COPYRIGHT NOTICE:         Copyright 1991, The Regents of the University of California. This        software was produced under U.S. Government contract (W-7405-ENG-36)        by Los Alamos National Laboratory, which is operated by the        University of California for the U.S. Department of Energy.        The U.S. Government is licensed to use, reproduce, and distribute        this software. Neither the Government nor the University makes        any warranty, express or implied, or assumes any liability or        responsibility for the use of this software.   AUTHOR:         Rick Balsano   MODIFICATIONS/REVISION LEVEL:         1.1     8/31/93        1.2     3/19/96 - J. Bloch - LANL                         - Made compatible with wcslib-2.2 by Calabretta.        Converted to IDL V5.0   W. Landsman   September 1997        Updated for conical projections W. Landsman  July 2003  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/wcs_demo.html#wcssph2xy_plot", "wcssph2xy_plot", 'routine in <a href="idlastro/wcs_demo.html">wcs_demo.pro</a>', "wcs_demo.pro", "", "wcssph2xy_plot", "", "file_unitmapparam1param2", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/wcs_demo.html#inversion_error", "inversion_error", 'routine in <a href="idlastro/wcs_demo.html">wcs_demo.pro</a>', "wcs_demo.pro", "", "inversion_error", "", "file_unitmapparam1param2", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/wcs_demo.html#wcs_rot", "wcs_rot", 'routine in <a href="idlastro/wcs_demo.html">wcs_demo.pro</a>', "wcs_demo.pro", "", "wcs_rot", "", "file_unitmapparam1param2", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/wcs_demo.html#wcs_demo", "wcs_demo", 'routine in <a href="idlastro/wcs_demo.html">wcs_demo.pro</a>', "wcs_demo.pro", "", "wcs_demo", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/wcs_getpole.html", "wcs_getpole.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "wcs_getpole.pro", "", "", " NAME:        WCS_GETPOLE   PURPOSE:        Compute the coordinates of the native pole for a non-polar projection  EXPLANATION:        For non-polar (cylindrical or conic) projections, the native pole is        not at the reference point, and WCS_GETPOLE is used to determine the        position of the native pole.    See section 2.4 of the paper         Representation of Celestial Coordinates in FITS  by Calabretta        Greisen (2002, A&A, 395, 1077, also available at        http://fits.gsfc.nasa.gov/fits_wcs.html    Called by WCS_ROTATE   CALLING SEQUENCE:        WCS_GETPOLE,  crval, lonpole, theta0, alpha_p, delta_p, LATPOLE= ]   INPUT PARAMETERS:        crval - 2 element vector containing standard system coordinates (the                longitude and latitude) of the reference point in degrees        lonpole - native longitude of the celestial North Pole (degrees)        theta0 - native latitude of the fiducial point  OUTPUT PARAMETERS:        alpha_p, delta_p - celestial longitude and latitude of the native pole                (Radians)  OPTIONAL KEYWORD INPUT PARAMETERS:        LATPOLE - native latitude of the celestial North Pole (degrees)  REVISION HISTORY:        Written    W. Landsman               June, 2003        Fix calculation when theta0 is not 0 or 90     February 2004        E. Hivon: alpha_p, delta_p consistenly in Radians May 2010  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/wcs_getpole.html#WCS_GETPOLE", "WCS_GETPOLE", 'routine in <a href="idlastro/wcs_getpole.html">wcs_getpole.pro</a>', "wcs_getpole.pro", "", "WCS_GETPOLE", "", "LATPOLEcrvallonpoletheta0alpha_pdelta_p", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/wcs_rotate.html", "wcs_rotate.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "wcs_rotate.pro", "", "", " NAME:        WCS_ROTATE   PURPOSE:        Rotate between standard (e.g. celestial) and native coordinates  EXPLANATION:        Computes a spherical coordinate rotation between native coordinates        and  standard celestial coordinate system (celestial, Galactic, or        ecliptic).   Applies the equations in Appendix B of the paper         Representation of Celestial Coordinates in FITS  by Calabretta        Greisen (2002, A&A, 395, 1077).    Also see        http://fits.gsfc.nasa.gov/fits_wcs.html   CATEGORY:        Mapping and Auxiliary FITS Routine   CALLING SEQUENCE:        WCS_ROTATE, longitude, latitude, phi, theta, crval,                [LONGPOLE = , LATPOLE = , /REVERSE, /ORIGIN ]   INPUT PARAMETERS:        crval - 2 element vector containing standard system coordinates (the                longitude and latitude) of the reference point   INPUT OR OUTPUT PARAMETERS        longitude - longitude of data, scalar or vector, in degrees, in the                standard celestial coordinate system        latitude - latitude of data, same number of elements as longitude,                in degrees        phi - longitude of data in the native system, in degrees, scalar or                vector        theta - latitude of data in the native system, in degrees, scalar or                vector         If the keyword(REVERSE) is set then phi and theta are input parameters        and longitude and latitude are computed.    Otherwise, longitude and        latitude are input parameters and phi and theta are computed.   OPTIONAL KEYWORD INPUT PARAMETERS:        ORIGIN - If this keyword is set and non-zero, then the reference point                given by CRVAL in the native system is assumed to be at the                origin of the coordinates, rather than at the North Pole.                ORIGIN should be set for cylindrical projections (Cylindrical                perspective-CYP, Cartesian - CAR, Mercator - MER, Cylindrical                Equal area - CEA) and conventional projections (Bonne's equal                area - BON, Polyconic - PCO, Sinusoidal - GLS, Parabolic - PAR,                Aitoff - AIT, Mollweide - MOL, COBE quadrilateralized sphere -                CSC, Quadrilateralized Spherical Cube - QSC, and Tangential                Spherical Cube - TSC)         LONGPOLE - native longitude of standard system's North Pole, default                for a Zenithal system is 180 degrees        LATPOLE -  native latitude of the standard system's North Pole        /REVERSE - if set then phi and theta are input parameters and longitude                   and latitude are computed.    By default, longitude and                   latitude are input parameters and phi and theta are computed.  REVISION HISTORY:        Written    W. Landsman               December, 1994        Fixed error in finding North Pole if /ORIGIN and LONGPOLE NE 180        Xiaoyi Wu and W. Landsman,   March, 1996        Fixed implementation of March 96 error, J. Thieler,  April 1996        Updated to IDL V5.0   W. Landsman    December 1997        Fixed determination of alpha_p if /ORIGIN and LONGPOLE EQ 180                W. Landsman    May 1998        Ensure argument of ASIN() is -1&lt;x&lt;-1 after roundoff                W. Landsman/R. Arendt  June 2002        Call WCS_GETPOLE, accept LATPOLE keyword, update cylindrical coords                W. Landsman  June 2003        Don't attempt to rotate NaN values   W. Landsman  May 2004   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/wcs_rotate.html#wcs_rotate", "wcs_rotate", 'routine in <a href="idlastro/wcs_rotate.html">wcs_rotate.pro</a>', "wcs_rotate.pro", "", "wcs_rotate", "", "LONGPOLELATPOLEREVERSEORIGINTHETA0longitudelatitudephithetacrval", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/wcssph2xy.html", "wcssph2xy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "wcssph2xy.pro", "", "", " NAME:      WCSSPH2XY  PURPOSE:      Convert spherical coordinates to x and y (map) angular coordinates  EXPLANATION:      Convert spherical (longitude and latitude -- sky) coordinates to x      and y (map) angular coordinates.  This procedure is the inverse of      WCSXY2SPH.    See WCS_DEMO for example of use.       This is a lower level procedure -- given a FITS header, the user will      usually use ADXY which will then call WCSSPH2XY with the appropriate      parameters.  CATEGORY:      Mapping and Auxiliary FITS Routine   CALLING SEQUENCE:       wcssph2xy, longitude, latitude, x, y, [ map_type , CTYPE = ,                FACE =,PV2= , CRVAL = , CRXY = , LONGPOLE = ,                LATPOLE = , NORTH_OFFSET =, SOUTH_OFFSET =, BADINDEX =]   INPUT PARAMETERS:      longitude - longitude of data, scalar or vector, in degrees      latitude - latitude of data, same number of elements as longitude,                in degrees      map_type - optional positional parameter, numeric scalar (0-26)                corresponding to a particular map projection.  This is not a                FITS standard, it is simply put in to allow function similar                to that of less general map projection procedures (eg AITOFF).                The following list gives the map projection types and their                respective numbers.    FITS  Number  Name                       Comments   code   code   ----  ------  -----------------------    -----------------------------------    DEF     0    Default = Cartesian    AZP     1    Zenithal perspective       PV2_1 required    TAN     2    Gnomic                     AZP w/ mu = 0    SIN     3    Orthographic               PV2_1,PV2_2 optional    STG     4    Stereographic              AZP w/ mu = 1    ARC     5    Zenithal Equidistant    ZPN     6    Zenithal polynomial        PV2_0, PV2_1....PV2_20 possible    ZEA     7    Zenithal equal area    AIR     8    Airy                       PV2_1 required    CYP     9    Cylindrical perspective    PV2_1 and PV2_2 required    CAR    10    Cartesian    MER    11    Mercator    CEA    12    Cylindrical equal area     PV2_1 required    COP    13    Conical perspective        PV2_1 and PV2_2 required    COD    14    Conical equidistant        PV2_1 and PV2_2 required    COE    15    Conical equal area         PV2_1 and PV2_2 required    COO    16    Conical orthomorphic       PV2_1 and PV2_2 required    BON    17    Bonne's equal area         PV2_1 required    PCO    18    Polyconic    SFL    19    Sanson-Flamsteed    PAR    20    Parabolic    AIT    21    Hammer-Aitoff    MOL    22    Mollweide    CSC    23    Cobe Quadrilateralized     convergence of inverse is poor                 Spherical Cube    QSC    24    Quadrilateralized                 Spherical Cube    TSC    25    Tangential Spherical Cube    SZP    26    Slant Zenithal Projection   PV2_1,PV2_2, PV2_3 optional    HPX    27    HealPix    HCT    28    HealCart (Cartesian approximation of Healpix)   OPTIONAL INPUT KEYWORD PARAMETERS:       CTYPE - One, two, or three element vector containing 8 character               strings corresponding to the CTYPE1, CTYPE2, and CTYPE3               FITS keywords:                 CTYPE[0] - first four characters specify standard system                ('RA--','GLON' or 'ELON' for right ascension, Galactic                longitude or ecliptic longitude respectively), second four                letters specify the type of map projection (eg '-AIT' for                Aitoff projection)                CTYPE[1] - first four characters specify standard system                ('DEC-','GLAT' or 'ELAT' for declination, galactic latitude                or ecliptic latitude respectively; these must match                the appropriate system of ctype1), second four letters of                ctype2 must match second four letters of ctype1.                CTYPE[2] - if present must be the 8 character string,'CUBEFACE',                 only used for spherical cube projections to identify an axis                as containing the face on which each x and y pair of                coordinates lie.        PV2  - Vector of projection parameter associated with latitude axis              PV2 will have up to 21 elements for the ZPN projection, up to 3              for the SIN projection and no more than 2 for any other              projection.   The first element corresponds to PV2_1, the              second to PV2_2, etc.        CRVAL - 2 element vector containing standard system coordinates (the                longitude and latitude) of the reference point        CRXY - 2 element vector giving the x and y coordinates of the                reference point, if this is not set the offset is [0,0]                This is not a FITS standard -- it is similar to CRPIX but in                angular X,Y coordinates (degrees) rather than pixel coordinates        LATPOLE -  native latitude of the standard system's North Pole        LONGPOLE - native longitude of standard system's North Pole, default                is 180 degrees for Zenithal systems        NORTH_OFFSET - offset (radians) added to input points near north pole.        SOUTH_OFFSET - offset (radians) added to input points near south pole.        BADINDEX     - vector, list of transformed points too close to poles.   OUTPUT PARAMETERS:         x - x coordinate of data, same number of elements as longitude, in                degrees; if CRXY is set, then x will be returned offset by                crxy(0).  NOTE: x in all map projections increases to the                left, not the right.        y - y coordinate of data, same number of elements as longitude, in                degrees; if CRXY is set, y will be returned offset by crxy[1]        bad - vector returning index to transformed points close to pole.   OPTIONAL OUTPUT KEYWORD PARAMETERS:        FACE - a output variable used for spherical cube projections to                designate the face of the cube on which the x and y                coordinates lie.   Will contain the same number of elements as                X and Y.    Must contain at least 1 arbitrary element on input                If FACE is NOT defined on input, it is assumed that the                spherical cube projection is laid out over the whole sky                in the  sideways T  configuration.  NOTES:        The conventions followed here are described in more detail in         Representations of Celestial Coordinates in FITS  by Calabretta        and  Greisen (2002, A&A, 395, 1077; also see        http://fits.gsfc.nasa.gov/fits_wcs.html).  The general        scheme outlined in that article is to first use WCS_ROTATE to convert        coordinates in one of three standard systems (celestial, galactic,        or ecliptic) into a  native system  of latitude and longitude.  The        latitude and longitude are then converted into x and y coordinates        which depend on the map projection which is performed.   The rotation        from standard to native coordinates can be skipped if one so desires.        This procedure necessitates two basic sections.  The first converts         standard  coordinates to  native  coordinates while the second converts         native  coordinates to x and y coordinates.  The first section is        simply a call to WCS_ROTATE, while the second contains the guts of        the code in which all of the map projection is done.  This procedure        can be called in a form similar to AITOFF, EQPOLE, or QDCB by calling        wcssph2xy with a fifth parameter specifying the map projection by        number and by not using any of the keywords related to the map        projection type (e.g. CTYPE).   PROCEDURE:         The first task of the procedure is to do general error-checking to        make sure the procedure was called correctly and none of the        parameters or keywords conflict.  This is particularly important        because the procedure can be called in two ways (either using        FITS-type keywords or using a number corresponding to a map projection        type).  All variables are converted into double precision values and        angular measurements are converted from degrees into radians.        If necessary, longitude values are converted into the range -pi to pi.        Any latitude points close to the  of the poles are mapped to a specific        latitude of  from the pole so that the map transformations become        completely invertible.  The magnitude of this correction is given by        the keywords NORTH_OFFSET and SOUTH_OFFSET and a list of affected        points is optionally returned in the  badindex  output parameter.        The next task of the procedure is to convert the  standard         coordinates to  native  coordinates by rotating the coordinate system.        This rotation is performed by the procedure WCS_ROTATE and is governed        by the keywords CRVAL and LONGPOLE.   The final task of the WCSSPH2XY        is to take  native  latitude and longitude coordinates and convert        them into x and y coordinates.  Any map specific error-checking is        done at this time.  All of the equations were obtained from         Representations of Celestial Coordinates in FITS  and cases needing        special attention are handled appropriately (see the comments with        individual map projections for more information on special cases).         Note that a further transformation (using the CD matrix) is required        to convert the (x,y) coordinates to pixel coordinates.  COMMON BLOCKS:         none   PROCEDURES CALLED:        WCS_ROTATE   AUTHOR:         Rick Balsano   MODIFICATIONS/REVISION LEVEL:         1.1     8/31/93        2.3     9/15/93  W. Landsman (HSTX) Update quad cube coords, vectorize                         keywords        2.4     12/29/93 I. Freedman (HSTX) Eliminated LU decomposition        2.5     1/5/93   I. Freedman (HSTX) Offset keywords / bad point index        2.6     Dec 94   Compute pole for transformations where the reference                        pixel is at the native origin    W. Landsman (HSTX)        2.7     May 95  Change internal variable BETA for V4.0 compatibility        2.8     June 95 Change loop indices from integer to long        2.9     3/18/96 Change FACE usage for cube projections to match WCSLIB                        C/FORTRAN software library.        2.10    02/18/99 Fixed implementation of ARC algorithm        2.11    June 2003 Update conic projections, add LATPOLE keyword 	2.12	Aug 2003, N.Rich - Fix pre-V5.5 bug from previous update        2.13    Sep 2003, W. Landsman CTYPE keywords need not be 8 characters        2.14    Jan 2004, W. Landsman don't modify scalars, fix PARabolic code        2.15    Feb 2004, W. Landsman Fix AZP and AIR algorithms        3.0    May 2004  W. Landsman Support extended SIN (=NCP), slant zenithal                   (SZP), and zenithal polynomail (ZPN) projections, use                    PV2 keyword vector instead of PROJP1, PROJP2        3.1     Jul 2005 W.Landsman/C. Markwardt Set unprojectable points in                    tangent projection to NaN        3.1.1   Jul 2005 Fixed 3.1 mod to work for scalars        3.2     Dec 2005 Fixed Airy projection for latitude centered at 90 deg        3.3     Aug 2007 R. Munoz, W.Landsman Correct treatment of PV1_2 and                         PV2_2 parameters        3.4    Oct 2007  Sergey Koposov Support HEALPIX projection        3.4.1  June 2009 Check for range of validity of ZPN polynomial W.L.        3.5    May 2012  Benjamin Alan Weaver, Add nonstandard HEALCART                         projection, Allow map_index to be &gt; 25  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/wcssph2xy.html#wcssph2xy", "wcssph2xy", 'routine in <a href="idlastro/wcssph2xy.html">wcssph2xy.pro</a>', "wcssph2xy.pro", "", "wcssph2xy", "", "ctypefacepv2crvalcrxylongpolelatpolenorth_offsetsouth_offsetbadindexlongitudelatitudexymap_type", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/wcsxy2sph.html", "wcsxy2sph.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "wcsxy2sph.pro", "", "", " NAME:       WCSXY2SPH   PURPOSE:       Convert x and y (map) coordinates to spherical coordinates  EXPLANATION:       To convert x and y (map) coordinates to spherical (longitude and       latitude or sky) coordinates.    This procedure is the inverse of       WCSSPH2XY.       This is a lower level procedure -- given a FITS header, the user will      usually use XYAD which will then call WCSXY2SPH with the appropriate      parameters.  CATEGORY:       Mapping and Auxilary FITS Routine   CALLING SEQUENCE:        wcsxy2sph, x, y, longitude, latitude, [map_type], [ CTYPE = ,$              FACE = ,PV2 = ,CRVAL =, CRXY =, LONGPOLE=, LATPOLE=]   INPUT PARAMETERS:         x - x coordinate of data, scalar or vector, in degrees, NOTE: x                increases to the left, not the right        y - y coordinate of data, same number of elements as x, in degrees        map_type - optional positional parameter, scalar corresponding to a                particular map projection.  This is not a FITS standard, it is                simply put in to allow function similar to that of less general                map projection procedures (eg AITOFF).  The following list gives                the map projection types and their respective numbers.    FITS  Number  Name                       Comments   code   code   ----  ------  -----------------------    -----------------------------------    DEF     0    Default = Cartesian    AZP     1    Zenithal perspective       pv2_1 required    TAN     2    Gnomic                     AZP w/ pv2_1 = 0    SIN     3    Orthographic               pv2_1, pv2_2 optional    STG     4    Stereographic              AZP w/ pv2_1 = 1    ARC     5    Zenithal Equidistant    ZPN     6    Zenithal polynomial        PV2_0, PV2_1....PV2_20 possible    ZEA     7    Zenithal equal area    AIR     8    Airy                       pv2_1 required    CYP     9    Cylindrical perspective    pv2_1 and pv2_2 required    CAR    10    Cartesian    MER    11    Mercator    CEA    12    Cylindrical equal area     pv2_1 required    COP    13    Conical perspective        pv2_1 and pv2_2 required    COD    14    Conical equidistant        pv2_1 and pv2_2 required    COE    15    Conical equal area         pv2_1 and pv2_2 required    COO    16    Conical orthomorphic       pv2_1 and pv2_2 required    BON    17    Bonne's equal area         pv2_1 required    PCO    18    Polyconic    SFL    19    Sanson-Flamsteed    PAR    20    Parabolic    AIT    21    Hammer-Aitoff    MOL    22    Mollweide    CSC    23    Cobe Quadrilateralized     inverse converges poorly                 Spherical Cube    QCS    24    Quadrilateralized                 Spherical Cube    TSC    25    Tangential Spherical Cube    SZP    26    Slant Zenithal perspective  PV2_1,PV2_2, PV2_3 optional    HPX    27    HealPix    HCT    28    HealCart (Cartesian approximation of Healpix)   OPTIONAL KEYWORD PARAMETERS:         CTYPE - One, two, or three element vector containing 8 character                strings corresponding to the CTYPE1, CTYPE2, and CTYPE3                FITS keywords:                 CTYPE[0] - first four characters specify standard system                ('RA--','GLON' or 'ELON' for right ascension, galactic                longitude or ecliptic longitude respectively), second four                letters specify the type of map projection (eg '-AIT' for                Aitoff projection)                CTYPE[1] - first four characters specify standard system                ('DEC-','GLAT' or 'ELAT' for declination, galactic latitude                or ecliptic latitude respectively; these must match                the appropriate system of ctype1), second four letters of                ctype2 must match second four letters of ctype1.                CTYPE[2] - if present must be the 8 character string,'CUBEFACE',                 only used for spherical cube projections to identify an axis                as containing the face on which each x and y pair of                coordinates lie.        FACE - a input variable used for spherical cube projections to                designate the face of the cube on which the x and y                coordinates lie.   Must contain the same number of elements                as X and Y.        CRVAL - 2 element vector containing standard system coordinates (the                longitude and latitude) of the reference point        CRXY - 2 element vector giving the x and y coordinates of the                reference point, if this is not set the offset of the x                coordinate is assumed to be 0.        LATPOLE -  native latitude of the standard system's North Pole        LONGPOLE - native longitude of standard system's North Pole, default                is 180 degrees, numeric scalar        PV2  - Vector of projection parameter associated with latitude axis              PV2 will have up to 21 elements for the ZPN projection, up to 3              for the SIN projection and no more than 2 for any other              projection.   The first element corresponds to PV2_1, the              second to PV2_2, etc.   OUTPUT PARAMETERS:         longitude - longitude of data, same number of elements as x, in degrees        latitude - latitude of data, same number of elements as x, in degrees         Longitude and latitude will be set to NaN, wherever elements of X,Y        have no corresponding longitude, latitude values.  NOTES:        The conventions followed here are described in more detail in the paper        Representations of Celestial Coordinates in FITS  by Calabretta &        Greisen (2002, A&A, 395, 1077, also see        http://fits.gsfc.nasa.gov/fits_wcs.html).   The general scheme        outlined in that article is to convert x and y coordinates into a         native  longitude and latitude and then rotate the system into one of        three generally recognized systems (celestial, galactic or ecliptic).         This procedure necessitates two basic sections.  The first converts        x and y coordinates to  native  coordinates while the second converts         native  to  standard  coordinates.  The first section contains the        guts of the code in which all of the map projection is done.  The        second step is performed by WCS_ROTATE and only involves rotation of        coordinate systems.  WCSXY2SPH can be called in a form similar to        AITOFF, EQPOLE, or QDCB by calling wcsxy2sph with a fifth parameter        specifying the map projection by number and by not using any of the        keywords related to the map projection type (eg ctype1 and ctyp2).   PROCEDURE:        The first task of the procedure is to do general error-checking to        make sure the procedure was called correctly and none of the        parameters or keywords conflict.  This is particularly important        because the procedure can be called in two ways (either using        FITS-type keywords or using a number corresponding a map projection        type).  All variables are converted into double precision values.         The second task of the procedure is to take x and y coordinates and        convert them into  native  latitude and longitude coordinates.        Map-specific error-checking is done at this time.  All of the        equations were obtained from  Representations of Celestial        Coordinates in FITS  and cases needing special attention are handled        appropriately (see the comments with individual map projections for        more information on special cases).     WCS_ROTATE is then called to        convert the  native  coordinates to  standard  coordinates by rotating        the coordinate system.  This rotation is governed by the keywords        CRVAL, and LONGPOLE.  The transformation is a straightforward        application of euler angles.  Finally, longitude values are converted        into the range from 0 to 360 degrees.   COMMON BLOCKS:        none  PROCEDURES CALLED:        WCS_ROTATE   AUTHOR:         Rick Balsano   MODIFICATIONS/REVISION LEVEL:   1.1    8/31/93  1.2    9/12/93   W. Landsman Vectorized CRXY, CRVAL, CTYPE  1.3    29/12/93  I. Freedman Eliminated LU decomposition  1.4    22/09/94  W. Landsman If scalar input, then scalar output  1.5    02/03/05  W. Landsman Change variable name BETA for V4.0 compatibility  1.6    06/07/05  W. Landsman Change loop index from integer to long  1.7    02/18/99  W. Landsman Fixed implementation of ARC algorithm  1.8    June 2003 W. Landsman Update conic projections, add LATPOLE keyword  1.81   Sep 2003 W. Landsman Avoid divide by zero  1.82   Sep 2003 W. Landsman CTYPE keywords need not be 8 characters  1.83   Sep 2003 W. Landsman Preserve input array sizes  1.9    Jan 2004 W. Landsman don't modify scalars, fix PARabolic code  2.0    Feb 2004 W. Landsman Fix AIR and AZP projections  2.1    Feb 2004 W. Landsman Fix tangent projection for matrix input  3.0    May 2004  W. Landsman Support extended SIN (=NCP), slant zenithal                   (SZP), and zenithal polynomial (ZPN) projections, use                    PV2 keyword vector instead of PROJP1, PROJP2  3.1    May 2004 W. Landsman/J. Ballet Handle NaN values, flag invalid output                    for AITOFF projection  3.1.1  Dec 2005 W. Landsman/W. Thompson Fixed problem with Airy projection                    centered on 90 degree latitude  3.1.2  May 2006 W. Landsman/Y.Sato Fix problem selecting the correct root                     for the ZPN projection  3.2    Aug 2007  W. Landsman Correct treatment of PVi_j parameters  3.3    Oct 2007  Sergey Koposov Support HEALPIX projection  3.4    May 2012  Benjamin Alan Weaver, Add nonstandard HEALCART                         projection, Allow map_index to be &gt; 25  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/wcsxy2sph.html#wcsxy2sph", "wcsxy2sph", 'routine in <a href="idlastro/wcsxy2sph.html">wcsxy2sph.pro</a>', "wcsxy2sph.pro", "", "wcsxy2sph", "", "ctypefacepv2crvalcrxylongpoleLatpolexylongitudelatitudemap_type", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/webget.html", "webget.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "webget.pro", "", "", " NAME:     WEBGET()   PURPOSE:     Use the IDL SOCKET procedure to get data from http servers   EXPLANATION:      WEBGET() can access http servers - even from behind a firewall -      and perform simple downloads. Currently, text and FITS files can be      accessed.   CALLING SEQUENCE:       a=webget(URL)   INPUTS:       URL - scalar string giving a fully qualified url of the form           'http://server.eso.org/path/file.html'.    WEBGET() can           also use other valid URLs that contain 'GET' or 'POST' codes.   OPTIONAL INPUT KEYWORD PARAMETERS:        COPYFILE - if set to a valid filename (file must have write permission),             the data contents of the web server's answer is copied to that             file.        HTTP10 - If set, then use the HTTP 1.0        POST - if set to a structure, the structure tags and values               will be used as post variables and POST'ed to the URL.               If POST is not set, the normal HTTP GET is used to               retrieve the URL.        /SILENT - If set, the information error messages are suppressed        TIMEOUT - Integer scalar giving number of seconds to wait to connect                 or for data to arrive before giving up and issuing an error.                 Default=15 seconds  OUTPUTS: A structure with the following fields:              .Header - the HTTP header sent by the server              .Text   - The text part of the downloaded file. If the                      content type of the file was not of class                      'text',  this will be an empty string.              .ImageHeader - Header file of a FITS-image. FITS images                           are read when the content type is                           'image/fits' or 'application/octet-stream'                           (for dss-access). If the file is not a FITS                           image,  this will be an empty string.              .Image - The FITS image read from the server. If the file                     did not contain a FITS image,  this will be zero.   RESTRICTIONS:      The mime-type recognition is extremely limited. Only the content-type is      determined. Any text-file  will be stored in out.Text. The only other      category which can be fetched is FITS files,  which will be stored in      out.Image and out.ImageHeader.       PROXY: If you are behind a firewall and have to access the net through a          Web proxy,  set the environment variable 'http_proxy' to point to          your proxy server and port, e.g.          'setenv http_proxy=http://web-proxy.mpia-hd.mpg.de:3128'                 The URL *MUST* begin with  http:// .   PROCEDURE:      Open a socket to the webserver and download the header. After deciding      whether it is text or binary, either store the text or try to read a      FITS file.   EXAMPLE:       IDL&gt; a=webget('http://www.mpia.de/index.html')       IDL&gt; print,a.Text       or            &gt; PointingRA=0.0           &gt; PointingDE=30.0           &gt; QueryURL = strcompress( http://archive.eso.org/dss/dss/image?ra= +$           &gt;                          string(PointingRA)+$           &gt;                           &dec= +$           &gt;                          string(PointingDE)+$           &gt;                           &x=10&y=10&Sky-Survey=DSS1&mime-type=download-fits , $           &gt;                          /remove)           &gt; a=webget(QueryURL)           &gt; tvscl,a.Image           &gt; print,a.ImageHead   MODIFICATION HISTORY:      Written by M. Feldt, Heidelberg, Oct 2001 &lt;mfeldt@mpia.de&gt;      Use /swap_if_little_endian keyword to SOCKET  W. Landsman August 2002      Less restrictive search on Content-Type   W. Landsman   April 2003      Modified to work with FIRST image server-  A. Barth, Nov 2006      Better recovery from errors  W. Landsman  April 2007      Add support for POST access               J.D. Smith    June 2007      Recognize  fits  image type used by SKYVIEW   W. Landsman  June 2007      Upgraded, partially, to HTTP 1.1				M. Perrin, July 2007        The HTTP 1.1 support is presently INCOMPLETE: virtual servers are        supported, but chunked transfer encoding is not yet supported, so        technically this is not fully HTTP 1.1 compliant.      Added http10 keyword  W. Landsman   August 2007      Assume since V5.6, sockets always available  W. Landsman Nov 2007      Fix problem when using proxy server   W. Landsman July 2008      Fix problem with /SILENT keyword  W. Landsman  Jan 2009      Added check for missing Mime TYPE in CLASSANDTYPE, Zarro, December 2011      Timeout applies to connecting as well as reading, default is now 15                seconds  W Landsman January 2012  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/webget.html#MimeType", "MimeType", 'routine in <a href="idlastro/webget.html">webget.pro</a>', "webget.pro", "", "MimeType", "", "HeaderClassTypeLength", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/webget.html#webget", "webget", 'routine in <a href="idlastro/webget.html">webget.pro</a>', "webget.pro", "", "webget", "", "SILENTCOPYFILEPOSTHTTP10timeouturl", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/wfpc2_metric.html", "wfpc2_metric.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "wfpc2_metric.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/wfpc2_metric.html#wfpc2_metric", "wfpc2_metric", 'routine in <a href="idlastro/wfpc2_metric.html">wfpc2_metric.pro</a>', "wfpc2_metric.pro", "", "wfpc2_metric", " NAME:    WFPC2_METRIC  PURPOSE:    Compute the distortion in a WFPC2 image and optionally return coordinates  EPLANATION:    Uses the distortion solution of Anderson & King (2003, PASP, 115, 113)    Pixel 424, 424 on each chip remains fixed, and other pixel positions are    mapped to remove nonlinearities.   If /GLOBAL is set, then all chips are    put on the same reference frame where pixel 424, 424 in the WF3 chip    remains fixed.  CALLING SEQUENCE:       WFPC2_METRIC, xin, yin, xout, yout, [ChipNum, HEADER=, /GLOBAL                                            YEAR =, FILTER=                             or       WFPC2_METRIC, xin, yin, a, d, HEADER=, /RAdec, /GLOBAL ]  INPUTS:      XIN, YIN - X,Y positions (0-799) on a WFPC2 chip in                IDL convention (first pixel is 0,0), scalar or vectors  OUTPUTS:      XOUT, YOUT - X,Y positions in the undistorted frame, same number of                   elements as XIN, YIN                           or if /RADEC is set      AA, DD  - Right ascension and declination (in degrees) corresponding                to the input coordinates after distortion correction.  OPTIONAL INPUT:      ChipNum - Integer  1, 2, 3, or 4  specifying the WFPC2 chip number              1-PC, 2-WF2, 3-WF3, 4-WF4.   If not supplied, then WFPC2_METRIC              will try to read the value from the DETECTOR in the FITS header.  OPTIONAL INPUTS:      /GLOBAL - If set, then positions are returned in a master reference               frame with pixel 424,424 of WF3 remaining fixed.   Thus,               information  concerning the  interchip separation and               orientation (with a weak dependence on time and filter) is               incorporated.      Header - FITS header with astrometry for a particular chip.              If both /RADec and /Global are set, then the header must be              from the WF3 chip.      /RADec - If set, then astrometry information in the FITS header (which              must be supplied as a keyword) is used to convert the output              to Right Ascension and declination (both in degrees).      FILTER - Filter name needed if /GLOBAL is set, must be either 'F300W'              'F336W', 'F439W', 'F555W' or 'F814W'; otherwise the plate scale              for F555W is assumed.   WFPC2_METRIC will try to read this              value from the FITS header if not supplied as a keyword.      YEAR -  Observation year including fraction (e.g. 1998.56) needed if              /GLOBAL is set.  WFPC2_METRIC will try to read this value from              the FITS header if not supplied as a keyword.  The time              correction is currently applied through the year 2002; later              dates will use the year 2002 correction.  EXAMPLES:      (1) Find the undistorted X,Y coordinates of position 682.3,234.2 on chip 1          (the PC chip).           IDL&gt; WFPC2_METRIC, 682.3, 234.2, xout, yout, 1              ==&gt; xout = 681.13   yout = 235.05       (2) Determine the RA and Dec of position 682.3, 234.2 on chip 1 on the          WFPC2 image U2Z30201T          IDL&gt; WFPC2_READ, 'u2z30201t.c0h', im,h   ;Get header for chip 1          IDL&gt; WFPC2_METRIC, 682.3, 234.2, aa, dd, header= h,/RADec          IDL&gt; print, adstring(aa,dd,2)          05 20 53.572  -69 35 18.17           Note that a chip number did not need to be specified since its value          is in the FITS header       (3) As above, but now compute coordinates in the global frame, needed          for example, to compute the distance between stars on two different          chips.          First get headers for chips 1 and 3         IDL&gt; WFPC2_READ, 'u2z30201t.c0h', im1,h1, im3,h3,num=[1,3]         IDL&gt; WFPC2_METRIC, 682.3, 234.2, aa, dd, 1, header=h3,/RADec,/GLOBAL         IDL&gt; print, adstring(aa,dd,2)          05 20 53.513  -69 35 17.98          Note that with /GLOBAL set, that the header must be for WF3, even         though coordinates are being computed for chip 1.   Also note that         the time and filter will be read from the FITS header.   Finally,         note that the coordinates given in examples (2) and (3) differ         slightly, because the chip separations incorporated in the FITS         headers differ slightly from those in the Anderson & King solution.  PROCEDURES USED:      LINTERP, SXPAR(), XYAD, YMD2DN()  REVISION HISTORY:      Written     W. Landsman         March 2003  ", "HeaderGLOBALYEARFILTERRADecxinyinxoutyoutchip", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/wfpc2_read.html", "wfpc2_read.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "wfpc2_read.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/wfpc2_read.html#wfpc2_read", "wfpc2_read", 'routine in <a href="idlastro/wfpc2_read.html">wfpc2_read.pro</a>', "wfpc2_read.pro", "", "wfpc2_read", " NAME:     WFPC2_READ   PURPOSE:    Read WFPC2 images in either FITS or STSDAS format into IDL variables.   EXPLANATION:    This a versatile procedure for reading Wide Field Planetary Camera 2    (WFPC2) images.   One can read either multi-extension FITS or  STSDAS or    STSDAS converted to FITS format, and specific    chip or chips.    One can also read all four chips into a  batwing  mosaic--    so-called because the PC chip (chip 1) has a plate scale of 0.045 , while    the other three WF chips have a plate scale of 0.1    CALLING SEQUENCE:     WFPC2_READ,filename,chip1,hdr1,chip2,hdr2,chip3,hdr3,chip4,hdr4                    or     WFPC2_READ,filename,chip,hdr, NUM_CHIP = [1,2,3,4], [/TRIM, PATH = ]                    or     WFPC2_READ,filename,image,hdr,/BATWING   INPUTS:     filename - Name of FITS or STSDAS file with a stack of images from             the four WF/PC-2 chips, followed by a FITS ASCII             table with header parameters for each chip.    If the file             name extension ends in 'h' then it is assumed to be an             STSDAS file.   If no extension is supplied, and the file is             is not found, then WFPC2_READ first tries appending a '.fits'             extension, and then tries appending a '.c0h' extension.              The file may als be gzip compressed (with a .gz extension)  INPUT KEYWORD PARAMETERS:     NUM_CHIP - Integer scalar or vector, subset of 1, 2, 3, 4, specifying                particular chip numbers to read.    Outputs will be in same                order as specification of subset.   (See Example 2.)     /TRIM   - If set, trim off areas with no image and re-orient so that               all  the chips have a common orientation suitable for insertion                into  bat-wing  mosaic (no image distortion removal, however).     PATH   -   scalar string specifying a !PATH-like list of directories                in which to search for the file.   Default is to look only                in the current directory.     /BATWING -  Return a 1600 x 1600 array containing all four chips in a                 bat wing  mosaic formation.     This image is mainly for                display  purposes, since the PC chip is compressed to match the plate                scale of the WF chips.    In addition, a small astrometry error                is introduced since chips do not have the same rotation, nor                are they aligned at the integer pixel level.  OUTPUTS:     chipN    - 800 X 800 image from chip N.   If /TRIM is set then the output                size is somewhat smaller (e.g. 756 x 757)     headerN  - Individual FITS header for chip N with correct astrometry.   PROCEDURES USED:      For FITS I/O: FITS_CLOSE, FITS_OPEN, FITS_READ      For STSDAS I/O: EXTGRP, FTGET(), SXOPEN, SXREAD()      Other procedures:  CHECK_FITS, FDECOMP, FIND_WITH_DEF(), FREBIN, HEXTRACT,            HROTATE, SXADDHIST, SXADDPAR, SXPAR()  EXAMPLE:     (1) Read all four chips of the FITS file u2ou0201t_c0f.fits      IDL&gt; wfpc2_read,'u2ou0201t_c0f',c1,h1,c2,h2,c3,h3,c4,h4       (2) Note that supplying the .fits extension is optional.   Now read only      chips 1 (the PC chip) and 3.   Trim off portions of the arrays where      there is no image.      IDL&gt; wfpc2_read,'u2ou0201t_c0f',c1,h1,c3,h3,num=[1,3],/trim        (3) Note that with the /TRIM option the output chip sizes are no longer           800 x 800 but odd sizes such as 770 by 753.    Now read all 4 chips           into a 1600 x 1600  batwing  mosaic      IDL&gt; wfpc2_read,'u2ou0201t_c0f',im,h,/batwing   MODIFICATION HISTORY:      Written by W. Landsman, Raytheon STX, for IDL V5.0     June 1998      Based on code by Robert Hill, Raytheon STX      Better astrometry of PC image in  batwing  configuration, W. Landsman                 August 1999      Use vector call to SXADDHIST  W. Landsman   March 2003      Don't use EXECUTE() for V6.1 or later W. Landsman Dec 2006      Assume since V6.1  W. Landsman  June 2009      Ability to read multi-extension format FITS  W. Landsman May 2010      Correct header in MEF form when only reading PC chip.  W.L. July 2010  ", "num_chiptrimpathbatwingfilenamechip1header1chip2header2chip3header3chip4header4", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/where_tag.html", "where_tag.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "where_tag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/where_tag.html#where_Tag", "where_Tag", 'routine in <a href="idlastro/where_tag.html">where_tag.pro</a>', "where_tag.pro", "", "where_Tag", " NAME: 	WHERE_TAG  PURPOSE: 	Like WHERE but works on structure tag names  EXPLANATION: 	Obtain subscripts of elements in structure array for which 	a particular Tag has values in a range or matching specified values. 	Like the WHERE function but for use with structures  CATEGORY: 			Structures  CALLING SEQUENCE: 	 w = where_tag( struct, [ Nfound,  TAG_NAME=, TAG_NUMBER = , RANGE =, 				VALUES =, RANGE =, ISELECT =, /NOPRINT ]   INPUTS: 	Struct = structure array to search.   INPUT KEYWORDS: 	User *must* specify (1) TAG_NAME or TAG_NUMBER to search, and (2) 		the VALUES or RANGE to search on  	TAG_NAME = Scalar string specifying Tag Name 	TAG_NUMBER = otherwise give the Tag Number, 	RANGE = [min,max] range to search for in Struct, 	VALUES = one or array of numbers to match for in Struct, 	ISELECT= specifies indices to select only part of structure array, 		(use it to recycle subscripts from previous searches). 	/NOPRINT = suppress informational messages about nothing found.   OUTPUTS: 	Nfound = # of occurences found.   RESULT: 	Function returns subscripts (indices) to desired elements.   EXAMPLES: 	Suppose STR is a structure with tags CAT_NO:indgen(10), and 		NAME:strarr(10).   Find the indices where STR.CAT_NO is 		between 3 and 5.  	IDL&gt; print, WHERE_TAG( str, TAG_NAME = 'CAT_NO', VALUE = [3,4,5] )  ;or 	IDL&gt; print, WHERE_TAG( str, TAG_NUM = 0, RANGE = [3,5])   PROCEDURE: 	Get tag number and apply the WHERE function appropriately.   MODIFICATION HISTORY: 	written 1990 Frank Varosi STX @ NASA/GSFC 	Stop printing  Tag &lt;xxx&gt; not found  with /NOPRINT, CD Pike 8-Jun-93        Use STRJOIN for display  W.L. July 2009  ", "TAG_NAMETAG_NUMBERISELECTNOPRINTRANGEVALUESStructNfound", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/wherenan.html", "wherenan.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "wherenan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/wherenan.html#WHERENAN", "WHERENAN", 'routine in <a href="idlastro/wherenan.html">wherenan.pro</a>', "wherenan.pro", "", "WHERENAN", " NAME:       WHERENAN()  PURPOSE:       Find the indices of all big-endian NaN values in an array.  OBSOLETE  EXPLANATION:       Find the positions of all values within an array that correspond to the       big-endian NaN (not-a-number) special values.        THIS PROCEDURE ONLY IDENTIFIES BIG_ENDIAN NaN VALUES.  DO NOT USE IT       TO IDENTIFY NaN VALUES IN GENERAL.   Instead, to identify NaN values on       the host machine use the FINITE() function        IDL&gt;     result = where( finite(array,/NAN) )        The main purpose of this routine is to catch  NaN special values       written in big_endian format (e.g. FITS data) on a little endian       machine prior to conversion with e.g. IEEE_TO_HOST.    It was needed       many years ago because VMS machines could not handle big-endian       special values, but this routine is now kept only for backwards       compatibility.   CALLING SEQUENCE:       Result = WHERENAN( ARRAY [, COUNT ] )   INPUT PARAMETERS:       ARRAY   = Array to test against the IEEE NaN special values.  Must be                 of either floating point, double-precision, or complex type.   OUTPUTS:       The result of the function is the indices of all values of ARRAY       corresponding to the IEEE NaN specification, similar to the IDL WHERE       function.   OPTIONAL OUTPUT PARAMETERS:       COUNT   = Number of values found corresponding to IEEE NaN.   SIDE EFFECTS:       If no NaN values are found, or if ARRAY is not of type float, double       precision, or complex, then -1 is returned, and COUNT is set to 0.   RESTRICTIONS:       ARRAY must be of type float, double-precision, or complex.   PROCEDURE:       The bit patterns of the numbers being tested are compared against the       IEEE NaN standard.   MODIFICATION HISTORY:       William Thompson, Feb. 1992.       William Thompson, Oct. 1992, fixed bug regarding order of bytes on VAX               machines.       Converted to IDL V5.0   W. Landsman   September 1997  ", "ARRAYCOUNT", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/whichcropmethod copy.html", "whichcropmethod copy.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "whichcropmethod copy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/whichcropmethod copy.html#whichcropmethod", "whichcropmethod", 'routine in <a href="code_snapshots/obsolete_code/whichcropmethod copy.html">whichcropmethod copy.pro</a>', "whichcropmethod copy.pro", "", "whichcropmethod", "       Crops differently according to which region is selected.   ", "region           1) main sun            2) 50% brightness sun            3) 25% brightness sun  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/whichcropmethod.html", "whichcropmethod.pro", '.pro file in <a href="code_snapshots/obsolete_code/dir-overview.html">code_snapshots/obsolete_code/ directory</a>', "whichcropmethod.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("code_snapshots/obsolete_code/whichcropmethod.html#whichcropmethod", "whichcropmethod", 'routine in <a href="code_snapshots/obsolete_code/whichcropmethod.html">whichcropmethod.pro</a>', "whichcropmethod.pro", "", "whichcropmethod", "       Crops differently according to which region is selected.   ", "region           1) main sun            2) 50% brightness sun            3) 25% brightness sun  ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/whoami.html", "whoami.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "whoami.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/whoami.html#WhoAmI", "WhoAmI", 'routine in <a href="coyote/whoami.html">whoami.pro</a>', "whoami.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "WhoAmI", "   This is a function that will identify the name of the procedure or function which    calls this function.   ", "", "Utilities", "     Change History: <span class= code-output >  Written, 28 January 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used to a module by name:   <span class= code-prompt >IDL&gt;</span> Print, WhoAmI()  <span class= code-output >  ; Compile and run the following main level program.</span> <span class= code-output >  ;***************************</span> <span class= code-output >  PRO junker</span> <span class= code-output >     Print, WhoAmI()</span> <span class= code-output >  END</span>  <span class= code-output >  PRO junk</span> <span class= code-output >     Print, WhoAmI()</span> <span class= code-output >  END</span>  <span class= code-output >  junk</span> <span class= code-output >  END</span> <span class= code-output >  ;**************************</span>   <span class= code-prompt >IDL&gt;</span> .go <span class= code-output >       JUNK</span> <span class= code-output >       JUNKER</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/whocalledme.html", "whocalledme.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "whocalledme.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/whocalledme.html#WhoCalledMe", "WhoCalledMe", 'routine in <a href="coyote/whocalledme.html">whocalledme.pro</a>', "whocalledme.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "WhoCalledMe", "   This is a function that will identify the caller of the program module    that contains this funciton.   ", "", "Utilities", "     Change History: <span class= code-output >  Written, 16 January 2011. DWF.</span>       Copyright (c) 2011, Fanning Software Consulting, Inc.      Used to determine which module called this module containing WhoCalledMe:   <span class= code-prompt >IDL&gt;</span> Print, WhoCalledMe()  <span class= code-output >  ; Compile and run the following main level program.</span> <span class= code-output >  ;***************************</span> <span class= code-output >  PRO junker</span> <span class= code-output >     Print, WhoCalledMe()</span> <span class= code-output >  END</span>  <span class= code-output >  PRO junk</span> <span class= code-output >     Print, WhoCalledMe()</span> <span class= code-output >  END</span>  <span class= code-output >  junk</span> <span class= code-output >  END</span> <span class= code-output >  ;**************************</span>   <span class= code-prompt >IDL&gt;</span> .go <span class= code-output >       $MAIN$</span> <span class= code-output >       JUNK</span>  ");
  
  

libdata[libdataItem++] = new Array("coyote/windbarb.html", "windbarb.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "windbarb.pro", "", "", " NAME:        WINDBARB   PURPOSE:         This is routine for drawing wind barbs on a map.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:        Graphics.   CALLING SEQUENCE:         Windbarb, x, y, speed, direction   REQUIRED INPUTS:         x:            The X location of the wind barb, expressed in data coordinates.                      Positive X is pointing in EAST direction.         y:            The Y location of the wind barb, expressed in data coordinates.                      Positive Y is pointing in NORTH direction.         speed:        The wind speed, expressed in knots.         direction:    The wind direction in degrees clockwise from north. Winds from                      the NE come at 45 degrees, and the wind  arrow  points in the                      direction from which the window is blowing. (The wind arrow                      points in the direction of the station circle, with the  barbs                       of the arrow at the end of the arrow from which the wind is coming.)   KEYWORDS:        ASPECT:        The aspect ratio of the map or plot in the display window.        CLIP:          A four-element array in normalized coordinates [x0,y0,x1,y1] giving                      the lower-left and upper-right corner of a cliping rectangle. This                      is normally the extent of your plot. See the example below.        COLOR:         The name of the color to draw the wind barbs in. May be a vector                      the same length as X.        LENGTH:        The approximate length of the wind barb in normalized coordinates.                      Will be set to 0.066 of the plot distance in the X direction by default.        MAP_ROTATION:  The clockwise rotation in degrees of the map North from the                      top of the plot. Will be set to 0.0 by default.        SOUTHERN_HEMISPHERE: Windbarb  feathers  are traditionally drawn in the clockwise                      direction in the northern hemispere and countercolockwise in the                      southern hemisphere. Default is  northern  type feathers. Set this                      keyword to select  southern  type feathers.        STATION:       Set this keyword if you want to draw the wind barbs with station symbols.                      (Requires STATIONPLOT from the Coyote Library.)   RESTRICTIONS:         Requires cgColor and STATIONPLOT from the Coyote Library:             http://www.idlcoyote.com/programs/cgColor.pro            http://www.idlcoyote.com/programs/stationplot.pro   EXAMPLE:      Window, Title='Wind Barbs', /Free     seed = -3L     lon = Randomu(seed, 9) * 360 - 180     lat = Randomu(seed, 9) * 180 - 90     speed = Randomu(seed, 9) * 100 + 5.0     direction = Indgen(9)*45     Erase, Color=cgColor('Ivory', !P.Background)     Polyfill,[0.1, 0.1, 0.9, 0.9, 0.1], [0.1, 0.9, 0.9, 0.1, 0.1], /Normal, Color=cgColor('light gray')     Map_Set, /Cylindrical, Position=[0.1, 0.1, 0.9, 0.9], Color=cgColor('Steel Blue'), /NoErase     Map_Grid, Color=cgColor('Charcoal', !D.Table_Size-2)     Map_Continents, Color=cgColor('Sea Green', !D.Table_Size-3)     Windbarb, lon, lat, speed, direction, /Station, Color='Indian Red', /Southern_Hemisphere      To clip the windbards that fall outside the plot, substitute these two lines     for the last line in the example above:      clip = [0.1, 0.1, 0.9, 0.9]     Windbarb, lon, lat, speed, direction, /Station, Color='Indian Red', Clip=clip   MODIFICATION HISTORY:         Written by:  David W. Fanning, 20 May 2003.        It has been called to my attention that the wind barbs are pointing          in *exactly* the wrong direction. Sigh... Rotated by 180 degrees. DWF. 8 June 2004.        Now someone complains that the *corrected* version is off by 180 degrees! Sheesh!          Clearly, I'm no meteorologist. Both lines of code are in the file. Please use the one          you like the best. :-) (Line 177-178) 20 July 2004. DWF.        Added a CLIP keyword so you can clip the output to the extend of your graphics plot. 12 Nov 2004. DWF.        Added THICK keyword 23 February 2005. DWF.        After further research, I've reverted to the direction specified originally.        And I have changed the  feathers  to point clockwise normally, and counterdlockwise          if the SOUTHERN_HEMISPHERE keyword is set. Here are my sources (21 July 2005. DWF):              http://ww2010.atmos.uiuc.edu/(Gh)/guides/maps/sfcobs/wnd.rxml             http://www.al.noaa.gov/WWWHD/pubdocs/windbarb.html       Fixed a small CLIP problem. 21 July 2005. DWF.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/windbarb.html#Windbarb", "Windbarb", 'routine in <a href="coyote/windbarb.html">windbarb.pro</a>', "windbarb.pro", "", "Windbarb", "", "AspectClipColorLengthMap_RotationStationSouthern_HemisphereThickxywspeedwdirection", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/coyote/windowavailable.html", "windowavailable.pro", '.pro file in <a href="idlastro/coyote/dir-overview.html">idlastro/coyote/ directory</a>', "windowavailable.pro", "", "", " NAME:        WindowAvailable   PURPOSE:         This function returns a 1 if the specified window index number is        currently open or available. It returns a 0 if the window is currently        closed or unavailable.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         available = WindowAvaiable(windowIndexNumber)   INPUTS:         windowIndexNumber:   The window index number of the window you wish to                             know is available or not.   KEYWORDS:         None.   NOTES:         The window vector obtained from the DEVICE command is not always the same length. It        is normally (on my machine) 65 elements long, but can be much longer if you have lots        of IDL windows open (by calling cgPickColorName, for example). But if no windows with        index numbers greater than 65 are open, IDL shinks the larger vector to the smaller one        as part of its housekeeping operations, which means it happens on their timetable, not yours.        This can result in the user having  stale  index numbers greater than 65, but no larger vector        to check them against. I have modified the code to return a 0 in this case, assuming that        whatever window your index number points to is long gone. I have not experience any ill effects        by doing this, but I STRONGLY advice you to ALWAYS know what window you are drawing into        when you issue a graphics command.   MODIFICATION HISTORY:         Written by David W. Fanning, June 2005.        Modified to return 0 if the window index number is larger than the number of elements              in the WINDOW_STATE array. 25 June 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/coyote/windowavailable.html#WindowAvailable", "WindowAvailable", 'routine in <a href="idlastro/coyote/windowavailable.html">windowavailable.pro</a>', "windowavailable.pro", "", "WindowAvailable", "", "windowID", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/windowavailable.html", "windowavailable.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "windowavailable.pro", "", "", " NAME:        WindowAvailable   PURPOSE:         This function returns a 1 if the specified window index number is        currently open or available. It returns a 0 if the window is currently        closed or unavailable.   AUTHOR:         FANNING SOFTWARE CONSULTING        David Fanning, Ph.D.        1645 Sheely Drive        Fort Collins, CO 80526 USA        Phone: 970-221-0438        E-mail: david@idlcoyote.com        Coyote's Guide to IDL Programming: http://www.idlcoyote.com   CATEGORY:         Utilities   CALLING SEQUENCE:         available = WindowAvaiable(windowIndexNumber)   INPUTS:         windowIndexNumber:   The window index number of the window you wish to                             know is available or not.   KEYWORDS:         None.   NOTES:         The window vector obtained from the DEVICE command is not always the same length. It        is normally (on my machine) 65 elements long, but can be much longer if you have lots        of IDL windows open (by calling cgPickColorName, for example). But if no windows with        index numbers greater than 65 are open, IDL shinks the larger vector to the smaller one        as part of its housekeeping operations, which means it happens on their timetable, not yours.        This can result in the user having  stale  index numbers greater than 65, but no larger vector        to check them against. I have modified the code to return a 0 in this case, assuming that        whatever window your index number points to is long gone. I have not experience any ill effects        by doing this, but I STRONGLY advice you to ALWAYS know what window you are drawing into        when you issue a graphics command.   MODIFICATION HISTORY:         Written by David W. Fanning, June 2005.        Modified to return 0 if the window index number is larger than the number of elements              in the WINDOW_STATE array. 25 June 2008. DWF.  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/windowavailable.html#WindowAvailable", "WindowAvailable", 'routine in <a href="coyote/windowavailable.html">windowavailable.pro</a>', "windowavailable.pro", "", "WindowAvailable", "", "windowID", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/windowimage.html", "windowimage.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "windowimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("coyote/windowimage.html#WindowImage_OriginalSettings", "WindowImage_OriginalSettings", 'routine in <a href="coyote/windowimage.html">windowimage.pro</a>', "windowimage.pro", "", "WindowImage_OriginalSettings", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/windowimage.html#WindowImage_Quit", "WindowImage_Quit", 'routine in <a href="coyote/windowimage.html">windowimage.pro</a>', "windowimage.pro", "", "WindowImage_Quit", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/windowimage.html#WindowImage_Resize", "WindowImage_Resize", 'routine in <a href="coyote/windowimage.html">windowimage.pro</a>', "windowimage.pro", "", "WindowImage_Resize", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/windowimage.html#WindowImage_DrawEvents", "WindowImage_DrawEvents", 'routine in <a href="coyote/windowimage.html">windowimage.pro</a>', "windowimage.pro", "", "WindowImage_DrawEvents", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/windowimage.html#WindowImage_Display", "WindowImage_Display", 'routine in <a href="coyote/windowimage.html">windowimage.pro</a>', "windowimage.pro", "", "WindowImage_Display", "", "info", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/windowimage.html#WindowImage", "WindowImage", 'routine in <a href="coyote/windowimage.html">windowimage.pro</a>', "windowimage.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "WindowImage", "   Allows the user to interactively adjust image contrast by means of  windowing and    leveling  the image. Move the cursor vertically in the window to adjust the image    stretch  window . Move the cursor horizontally in the window to adjust the image     level .   ", "BREWER         Set this keyword to indicate a Brewer color table is desired.  COLORTABLE          The index number of a color table to load with cgLoadCT.  NEUTRALCOLOR         The name of the color to use for values outside the image  window  in          the color table. If a default grayscale color table is loaded, the default          color is  rose , otherwise the default is  black .  REVERSE         Set this keyword if you wish to reverse the color table.   image         Any 2D array that you wish to adjust the contrast of.   ", "Graphics", "     Change History: <span class= code-output >  Written, 29 November 2010. DWF.</span> <span class= code-output >  Added color protection to the program. 30 Nov 2010. DWF.</span> <span class= code-output >  Modification of cgImage command to prevent flashing. 27 Feb 2011. DWF.</span>       Copyright (c) 2010, Fanning Software Consulting, Inc.      To see a demonstation:   <span class= code-prompt >IDL&gt;</span> WindowImage  ");
  
  

libdata[libdataItem++] = new Array("idlastro/writefits.html", "writefits.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "writefits.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/writefits.html#writefits", "writefits", 'routine in <a href="idlastro/writefits.html">writefits.pro</a>', "writefits.pro", "", "writefits", " NAME:        WRITEFITS  PURPOSE:        Write IDL array and header variables to a disk FITS file.   EXPLANATION:        A minimal FITS header is created if not supplied.        WRITEFITS works for all types of FITS files except random groups   CALLING SEQUENCE:        WRITEFITS, filename, data [, header, /APPEND, /COMPRESS, /CHECKSUM]   INPUTS:        FILENAME = String containing the name of the file to be written.         DATA = Image array to be written to FITS file.    If DATA is               undefined or a scalar, then only the FITS header (which               must have NAXIS = 0) will be written to disk   OPTIONAL INPUT:        HEADER = String array containing the header for the FITS file.                 If variable HEADER is not given, the program will generate                 a minimal FITS header.        HEAP -   A byte array giving the heap area following, e.g. a variable                 length binary table   OPTIONAL INPUT KEYWORD:        /APPEND - If this keyword is set then the supplied header and data                 array are assumed to be an extension and are appended onto                 the end of an existing FITS file.    If the file does not                 exist, then WRITEFITS will create one with a minimal primary                 header (and /EXTEND keyword) and then append the supplied                 extension header and array.     Note that the primary                 header in an existing file must already have an EXTEND                 keyword to indicate the presence of an FITS extension.        /COMPRESS - If this keyword is set, then the FITS file is written as                 a gzip compressed file.   An extension '.gz' is appended to                 to the file name if it does not already exist.   The /COMPRESS                 option is incompatible with the /APPEND option.       /Checksum - If set, then the CHECKSUM keywords to monitor data integrity                  will be included in the FITS header.    For more info, see                   http://heasarc.gsfc.nasa.gov/docs/heasarc/fits/checksum.html                  By default, checksum keywords will updated if they are already                  in the FITS header.        NaNvalue - Value in the data array which represents missing pixels. 		 This keyword should only used when missing pixels are not 		 represented by NaN values in the input array.  OUTPUTS:        None   RESTRICTIONS:        (1) It recommended that BSCALE and BZERO not be used (or set equal            to 1. and 0) except with integer data        (2) WRITEFITS will remove any group parameters from the FITS header        (3) As of Feb 2008, WRITEFITS no longer requires the primary header of a            FITS file with extension contain the EXTEND keyword, consistent with            Section 4.4.2.1 of the FITS 3.0 standard.    A warning is still            given.  See http://fits.gsfc.nasa.gov/fits_standard.html   EXAMPLE:        Write a randomn 50 x 50 array as a FITS file creating a minimal header.         IDL&gt; im = randomn(seed, 50, 50)        ;Create array        IDL&gt; writefits, 'test', im             ;Write to a FITS file  test    PROCEDURES USED:        CHECK_FITS, FITS_ADD_CHECKSUM, MKHDR, MRD_HREAD, SXDELPAR, SXADDPAR,        SXPAR()   MODIFICATION HISTORY:        WRITTEN, Jim Wofford, January, 29 1989        Added call to IS_IEEE_BIG()  W. Landsman  Apr 96        Make sure SIMPLE is written in first line of header  W. Landsman Jun 97        Use SYSTIME() instead of !STIME    W. Landsman  July 97        Create a default image extension header if needed W. Landsman June 98        Write unsigned data types W. Landsman       December 1999        Update for IDL V5.3, add /COMPRESS keyword W. Landsman  February 2000        Correct BZERO value for unsigned data  W. Landsman   July 2000        Eliminate duplication of input array if possible W. Landsman April 2001        Use FILE_SEARCH for V5.5 or later     W. Landsman    April 2002        Create the file if not already present and /APPEND is set                                              W. Landsman    September 2002        Proper call to MRD_HREAD if /APPEND is set  W. Landsman December 2002        Added /CHECKSUM keyword              W. Landsman     December 2002 	Restored NANvalue keyword, William Thompson,	     October 2003        Write BZERO in beginning of header for unsigned integers WL April 2004        Added ability to write heap array       WL             October 2004        Correct checksum if writing heap array   WL           November 2004        Assume since V5.5, no VMS support, use file_search() WL   September 2006        Set nbytes variable to LONG64 for very large files WL  May 2007        Update CHECKSUM keywords if already present  WL   Oct 2007        EXTEND keyword no longer required in FITS files with extensions WL Feb 2008        Bug fix when filename ends with '.gz' and COMPRESS is used,             the output file must be compressed          S. Koposov June 2008        Introduce V6.0 notation                W.L. Nov. 2010        Set /APPEND if XTENSION specifies a table   W.L.  July 2012  ", "AppendcompressCheckSumNaNValuefilenamedataheaderheap", "          -1", "");
  
  

libdata[libdataItem++] = new Array("coyote/xcolors.html", "xcolors.pro", '.pro file in <a href="coyote/dir-overview.html">coyote/ directory</a>', "xcolors.pro", "       FANNING SOFTWARE CONSULTING: <span class= code-output >   David W. Fanning</span> <span class= code-output >   1645 Sheely Drive</span> <span class= code-output >   Fort Collins, CO 80526 USA</span> <span class= code-output >   Phone: 970-221-0438</span> <span class= code-output >   E-mail: david@idlcoyote.com</span> <span class= code-output >   Coyote's Guide to IDL Programming: http://www.idlcoyote.com</span>  ", "", " The purpose of this program is to interactively change color tables  in a manner similar to XLoadCT. No common blocks are used so  multiple copies of XColors can be on the display at the same  time (if each has a different Title). XColors has the ability  to notify a widget event handler, an object method, or an IDL  procedure if and when a new color table has been loaded. Brewer  color tables can also be accessed from this program, if the file  fsc_brewer.tbl can be found somewhere in your IDL path.   Events are sent to widgets if the NotifyID keyword is used. Object  methods are called if the NotifyObj keyword is used. This program  is a non-blocking widget unless the Block keyword is set.      ", "", "Graphics", "    Change History: <span class= code-output >  Written by David W. Fanning, 15 April 97.</span> <span class= code-output >  Added OBJECT_DATA keyword so that I can get additional information</span> <span class= code-output >      about the state of the color table tool into object methods. 21 October 2008. DWF.</span> <span class= code-output >  Add REVERSE keyword and Reverse Color Table button. 12 April 2009. DWF.</span> <span class= code-output >  In looking for a Brewer color table file, I replaced all FILE_WHICH</span> <span class= code-output >      commands with FIND_RESOURCE_FILE commands. 28 April 2009. DWF.</span> <span class= code-output >  Made sure all  NOTIFY  data structures have both a  REVERSED  and</span> <span class= code-output >       BREWER  field in them to indicate the status of the XCOLORS program. Also</span> <span class= code-output >      inproved the documentation and made it more accurate. 20 Sept 2009. DWF.</span> <span class= code-output >  Still a few problems getting the Brewer color tables completely integrated.</span> <span class= code-output >      Fixed several bugs with updating color table names and type. 14 Oct 2009. DWF.</span> <span class= code-output >  Modified the program to work correctly with a user-supplied color table file. 29 Sept 2010. DWF.</span> <span class= code-output >  Fixed a problem I noticed when starting the program with reversed color tables. The</span> <span class= code-output >       initial colors were incorrect on subsequent calls. Also made a modification so that</span> <span class= code-output >       color index -1 as input is handled properly (ignored). 26 November 2010. DWF.</span> <span class= code-output >  Added WINDOW and WINID keywords. 26 January 2011. DWF.</span> <span class= code-output >  Changed several Get_Decomposed calls to the more generic SetDecomposedState. 15 Jan 2012. DWF.</span>       Copyright (c) 1997-2012, Fanning Software Consulting, Inc.      To load a color table into 100 colors, starting at color index      50 and send an event to the widget identified at info.drawID      in the widget heirarchy of the top-level base event.top, type: <span class= code-output >  XCOLORS, NCOLORS=100, BOTTOM=50, NOTIFYID=[info.drawID, event.top]</span>  ");
  
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XColors_Congrid", "XColors_Congrid", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XColors_Congrid", " This routines is identical to the IDL Congrid command, except that it  handles a problem with floating divides by zero properly.   ", "CUBIC       Set this keyword to perform cubic convolution interpolation rather than nearest neighbor        interpolation.  INTERP       Set this keyword to do bilinear interpolation rather than nearest neighbor interpolation.  MINUS_ONE       Set this keyword to prevent extrapolating one row or column beyond the bounds of the input.  arr       The input array to be resized.  x       The X dimension of the output.  y       The Y dimension of the output.  z       The Z dimension of the output.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XColors_NotifyObj__Define", "XColors_NotifyObj__Define", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XColors_NotifyObj__Define", " Define a structure for notifying an object method.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XColors_Set", "XColors_Set", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XColors_Set", " Set the new colors for the program.   ", "info         The information structure for the widget program, containing all the          information needed to run the program.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_TOP_SLIDER", "XCOLORS_TOP_SLIDER", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_TOP_SLIDER", " The event handler for the TOP slider. Modify the color table when  the slider is moved.   ", "event         The event structure passed from the Window Manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_BOTTOM_SLIDER", "XCOLORS_BOTTOM_SLIDER", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_BOTTOM_SLIDER", " The event handler for the BOTTOM slider. Modify the color table when  the slider is moved.   ", "event         The event structure passed from the Window Manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_GAMMA_SLIDER", "XCOLORS_GAMMA_SLIDER", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_GAMMA_SLIDER", " The event handler for the GAMMA slider. Modify the color table when  the slider is moved.   ", "event         The event structure passed from the Window Manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_REVERSE_BUTTON", "XCOLORS_REVERSE_BUTTON", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_REVERSE_BUTTON", " The event handler for the REVERSE button. Modify the color table when  the button is selectd.   ", "event         The event structure passed from the Window Manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_COLORTABLE", "XCOLORS_COLORTABLE", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_COLORTABLE", " The event handler for the color table selector. Modify the color table when  the selector is clicked.   ", "event         The event structure passed from the Window Manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_PROTECT_COLORS", "XCOLORS_PROTECT_COLORS", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_PROTECT_COLORS", " The event handler for updating the colors on a 24-bit display.   ", "event         The event structure passed from the Window Manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_CANCEL", "XCOLORS_CANCEL", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_CANCEL", " The event handler for the CANCEL button. Update to original color table.   ", "event         The event structure passed from the Window Manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_DISMISS", "XCOLORS_DISMISS", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_DISMISS", " The event handler for the QUIT button. Destroy the widget.   ", "event         The event structure passed from the Window Manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_SWITCH_COLORS", "XCOLORS_SWITCH_COLORS", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_SWITCH_COLORS", " The event handler for the BREWER colors button. Switch between IDL  and Brewer color tables.   ", "event         The event structure passed from the Window Manager.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS_CLEANUP", "XCOLORS_CLEANUP", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS_CLEANUP", " The cleanup routine for the widget program. Called when the widget  dies.   ", "tlb         The widget identifier of the widget that just died.  ", "          -1", "");
  
  libdata[libdataItem++] = new Array("coyote/xcolors.html#XCOLORS", "XCOLORS", 'routine in <a href="coyote/xcolors.html">xcolors.pro</a>', "xcolors.pro", "", "XCOLORS", " This is a procedure to load color tables into a restricted color range of the physical  color table. It is a highly simplified, but much more powerful, version of XLoadCT.   ", "Block        If this keyword is set, the program will try to block the         IDL command line. Note that this is only possible if no other         widget program is currently blocking the IDL command line. It         is much more reliable to make XCOLORS a modal widget (see the MODAL         keyword), although this can generally only be done when XCOLORS         is called from another widget program.  Brewer        Set this keyword if you wish to use the Brewer Colors, as explained         in this reference: http://www.idlcoyote.com/color_tips/brewer.html. The         file, fsc_brewer.tbl         must be found somewhere in your IDL path for this option to be available.         Note that if this file is found, the Brewer colors are automatically added         to the program as an option. In this case, the BREWER keyword just makes sure         this is the initial user choice.  Bottom        The lowest color index of the colors to be changed.  ColorInfo        This output keyword will return either a pointer to a color information structure         (if the program is called in a non-modal fashion) or a color information structure         (if the program is called in modal or blocking fashion). The color information          structure is an anonymous structure defined like this: <span class= code-output >   struct = { R: BytArr(!D.Table_Size), $ ; The current R color vector.</span> <span class= code-output >              G: BytArr(!D.Table_Size), $ ; The current G color vector.</span> <span class= code-output >              B: BytArr(!D.Table_Size), $ ; The current B color vector.</span> <span class= code-output >              NAME:   , $                 ; The name of the current color table.</span> <span class= code-output >              INDEX: 0, $                 ; The index number of the current color table.</span> <span class= code-output >              TYPE:   , $                 ; The type of color table (e.g, BREWER or IDL).</span> <span class= code-output >              BREWER: 0, $                ; Set to 1 if using BREWER color tables, else to 0.</span> <span class= code-output >              REVERSED: 0B }              ; Set to 1 if the color table is reversed.</span>         If a pointer to the structure is obtained, you will be responsible         for freeing it to prevent memory leakage: <span class= code-output >    XColors, ColorInfo=colorInfoPtr</span> <span class= code-output >    Print,  Color Table Name:  , (*colorInfoPtr).Name</span> <span class= code-output >    Ptr_Free, colorInfoPtr</span>         Note that that Name field will be  Unknown  and the Index field will         be -1 until a color table is actually selected by the user. You are         responsible for checking this value before you use it.          When called in modal or blocking fashion, you don't have to worry about freeing         the pointer, since no pointer is involved: <span class= code-output >    XColors, /Block, ColorInfo=colorInfoData</span> <span class= code-output >    Help, colorInfoData, /Structure</span> <span class= code-output >    Print,  Color Table Name:  , colorInfoData.Name</span>  Data        This keyword can be set to any valid IDL variable. If         the variable is defined, the specified object method or notify         procedure will be passed this variable via a DATA keyword. This         keyword is defined primarily so that Notify Procedures are compatible         with the XLOADCT way of passing data. It is not strictly required,         since the _EXTRA keyword inheritance mechanism will allow passing         of *any* keyword parameter defined for the object or procedure that is         to be notified.  Drag        Set this keyword if you want colors loaded as you drag         the sliders. Default is to update colors only when you release         the sliders. Use of this keyword is greatly discouraged.  File        A name of a color table file. The supplied colors1.tbl file is used by default.  Group_Leader        The group leader identifier for this program. When the group           leader is destroyed, this program will be destroyed.  Index        The index of the color table to start up. If provided, a color         table of this index number is loaded prior to display. Otherwise,         the current color table is used. Set this keyword if you wish         to have the index number of the event structure correct when         the user CANCELs out of the progam.  Modal        Set this keyword (along with the GROUP_LEADER keyword) to         make the XCOLORS dialog a modal widget dialog. Note that NO         other events can occur until the XCOLORS program is destroyed         when in modal mode.  NColors        Set this keyword to the number of colors to load when a color table         is selected.  NoSliders        If this keyword is set, the color stretch and color gamma         sliders are not displayed. This would be appropriate, for example,         for programs that just load pre-defined color tables.  NotifyID        A 2-column by n-row array that contains the IDs of widgets         that should be notified when XCOLORS loads a color table. The first         column of the array is the widgets that should be notified. The         second column contains IDs of widgets that are at the top of the         hierarchy in which the corresponding widgets in the first column         are located. (The purpose of the top widget IDs is to make it         possible for the widget in the first column to get the  info          structure of the widget program.) An XCOLORS_LOAD event will be         sent to the widget identified in the first column. The event         structure is defined like this: <span class= code-output >  event = {XCOLORS_LOAD, ID:0L, TOP:0L, HANDLER:0L, $</span> <span class= code-output >     R:BytArr(!D.TABLE_SIZE &lt; 256), G:BytArr(!D.TABLE_SIZE &lt; 256), $</span> <span class= code-output >     B:BytArr(!D.TABLE_SIZE &lt; 256), INDEX:0, NAME:  , $</span> <span class= code-output >     TYPE:  , BREWER:0, REVERSED:0}</span>         The ID field will be filled out with NOTIFYID[0, n] and the TOP         field will be filled out with NOTIFYID[1, n]. The R, G, and B         fields will have the current color table vectors, obtained by         exectuing the command TVLCT, r, g, b, /Get. The INDEX field will         have the index number of the just-loaded color table. The name         field will have the name of the currently loaded color table.         The TYPE field with be  BREWER  if a Brewer color table was loaded,         or  IDL  otherwise. The BREWER field will be set to 1 if a Brewer         color table was loaded, or to 0 otherwise. The REVERSED field will         be set to 1 if the color table is reversed, or to 0 otherwise.          Note that XCOLORS can't initially tell *which* color table is         loaded, since it just uses whatever colors are available when it         is called. Thus, it stores a -1 in the INDEX field to indicate         this  default  value. Programs that rely on the INDEX field of         the event structure should normally do nothing if the value is         set to -1. This value is also set to -1 if the user hits the         CANCEL button. (Note the NAME field will initially be  Unknown ).          Typically the XCOLORS button will be defined like this: <span class= code-output >    xcolorsID = Widget_Button(parentID, Value='Load New Color Table...', $</span> <span class= code-output >       Event_Pro='Program_Change_Colors_Event')</span>         The event handler will be written something like this: <span class= code-output >    PRO Program_Change_Colors_Event, event</span>  <span class= code-output >       ; Handles color table loading events. Allows colors be to changed.</span>  <span class= code-output >    Widget_Control, event.top, Get_UValue=info, /No_Copy</span> <span class= code-output >    thisEvent = Tag_Names(event, /Structure_Name)</span> <span class= code-output >    CASE thisEvent OF</span>  <span class= code-output >       'WIDGET_BUTTON': BEGIN</span>  <span class= code-output >            ; Color table tool.</span>  <span class= code-output >          XColors, NColors=info.ncolors, Bottom=info.bottom, $</span> <span class= code-output >             Group_Leader=event.top, NotifyID=[event.id, event.top]</span> <span class= code-output >          ENDCASE</span>  <span class= code-output >       'XCOLORS_LOAD': BEGIN</span>  <span class= code-output >            ; Update the display for 24-bit displays.</span>  <span class= code-output >          Device, Get_Visual_Depth=thisDepth</span> <span class= code-output >          IF thisDepth GT 8 THEN BEGIN</span> <span class= code-output >          WSet, info.wid</span>  <span class= code-output >           ...Whatever display commands are required go here. For example...</span>  <span class= code-output >           TV, info.image</span>  <span class= code-output >        ENDIF</span> <span class= code-output >        ENDCASE</span>  <span class= code-output >     ENDCASE</span>  <span class= code-output >     Widget_Control, event.top, Set_UValue=info, /No_Copy</span> <span class= code-output >     END</span>  NotifyObj        A vector of structures (or a single structure), with each element of the vector         defined as follows: <span class= code-output >    struct = {XCOLORS_NOTIFYOBJ, object:Obj_New(), method:''}</span>         where the Object field is an object reference, and the Method field         is the name of the object method that should be called when XCOLORS         loads its color tables: <span class= code-output >    ainfo = {XCOLORS_NOTIFYOBJ, a, 'Draw'}</span> <span class= code-output >    binfo = {XCOLORS_NOTIFYOBJ, b, 'Display'}</span> <span class= code-output >    XColors, NotifyObj=[ainfo, binfo]</span>         Note that the XColors program must be compiled before these structures         are used. Alternatively, you can put this program, named          xcolors_notifyobj__define.pro  (*three* underscore characters in this         name!) in your PATH: <span class= code-output >    PRO XCOLORS_NOTIFYOBJ__DEFINE</span> <span class= code-output >     struct = {XCOLORS_NOTIFYOBJ, OBJECT:Obj_New(), METHOD:''}</span> <span class= code-output >    END</span>         Or, you can simply define this structure as it is shown here in your code.           Extra  keywords added to the XCOLORS call are passed along to         the object method, which makes this an alternative way to get information         to your methods. If you expect such keywords, your methods should be defined         with an _Extra keyword.          If you set the /OBJECT_DATA keyword, the same structure defined for the         COLORINFO keyword above will be passed to your object method via an         XCOLORS_DATA keyword that you will have to define for the method.   NotifyPro        The name of a procedure to notify or call when the color         tables are loaded. If the DATA keyword is also defined with a valid         IDL variable, it will be passed to this program via an DATA keyword.         But note that *any* keyword appropriate for the procedure can be used         in the call to XCOLORS. For example, here is a procedure that re-displays         an image in the current graphics window: <span class= code-output >    PRO REFRESH_IMAGE, Image=image, _Extra=extra, WID=wid</span> <span class= code-output >    IF N_Elements(wid) NE 0 THEN WSet, wid</span> <span class= code-output >    cgImage, image, _Extra=extra</span> <span class= code-output >    END</span>         This program can be invoked with this series of commands:     <span class= code-prompt >IDL&gt;</span> Window, /Free     <span class= code-prompt >IDL&gt;</span> cgImage, image, Position=[0.2, 0.2, 0.8, 0.8]     <span class= code-prompt >IDL&gt;</span> XColors, NotifyPro='Refresh_Image', Image=image, WID=!D.Window         Note that  extra  keywords added to the XCOLORS call are passed along to         your procedure, which makes this an alternative way to get information         to your procedure. If you expect such keywords, your procedure should         be defined with an _Extra keyword as illustrated above.  Object_Data        Set this keyword if you wish color information to be         supplied to your object notification method via an XCOLORS_DATA         keyword. This keyword is ignored unless the NOTIFYOBJ keyword is         also used. The color information is supplied as a structure and is         defined in the COLORINFO keyword definition above.  Reverse        If this keyword is set, the color table is reversed and the         Reverse Color Table button is set on.  Title        This is the window title. It is  Load Color Tables  by default. The program         is registered with the name 'XCOLORS:' plus the TITLE string. The  register         name  is checked before the widgets are defined. If a program with that name         has already been registered you cannot register another with that name. This         means that you can have several versions of XCOLORS open simultaneously as long         as each has a unique title or name. For example, like this:    <span class= code-prompt >IDL&gt;</span> XColors, NColors=100, Bottom=0, Title='First 100 Colors'    <span class= code-prompt >IDL&gt;</span> XColors, NColors=100, Bottom=100, Title='Second 100 Colors'  Window        Set this keyword to send the colors to a Coyote Graphics cgWindow program.  WinID        The window index number of a Coyote Graphics cgWindow program to receive the color vectors.  XOffset        This is the X offset of the program on the display. The program will be placed         approximately in the middle of the display by default.  YOffset        This is the Y offset of the program on the display. The program will be placed         approximately in the middle of the display by default.  _EXTRA        The keyword inheritance mechanism will pick up and pass along to any method or procedure         to be notified any keywords that are defined for that procedure. Note that you should be         sure that keywords are spelled correctly. Any mis-spelled keyword will be ignored.   ", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/xdispstr.html", "xdispstr.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "xdispstr.pro", "", "", "  NAME:      XDISPSTR    PURPOSE:      Display a string array in a text widget with a simple search capability.   EXPLANATION:      Similar to the IDL XDISPLAYFILE procedure but includes a search capbility.  CALLING SEQUENCE:       xdispstr, array, [/BLOCK, WIDTH= , HEIGHT=, TITLE=, GROUP_LEADER=, FONT=                        TOP_LINE = ]   INPUT PARAMETER:       array  - String array (.e.g. FITS header) to be displayed    OPTIONAL INPUT KEYWORD PARAMETERS:      block -  Set to 1 to make widget blocking.  Default = block=0      width, height  - Scalars giving number of characters per line, number                            of lines.  Default = 80x24      title  - Scalar Title for outermost base widget.      group_leader  -    Group leader for top level base.      top_line - first line in the string array to display (default is 0)      font  -     Display font for text.    MODIFICATION HISTORY:      Written by R. S. Hill, RITSS, 17 Nov 2000      Use cumulative keyword to TOTAL   W. Landsman   May 2006  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/xdispstr.html#XDISPSTR_EVENT", "XDISPSTR_EVENT", 'routine in <a href="idlastro/xdispstr.html">xdispstr.pro</a>', "xdispstr.pro", "", "XDISPSTR_EVENT", "", "Event", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/xdispstr.html#XDISPSTR_CLEANUP", "XDISPSTR_CLEANUP", 'routine in <a href="idlastro/xdispstr.html">xdispstr.pro</a>', "xdispstr.pro", "", "XDISPSTR_CLEANUP", "", "Id", "          -1", "");
  
  libdata[libdataItem++] = new Array("idlastro/xdispstr.html#XDISPSTR", "XDISPSTR", 'routine in <a href="idlastro/xdispstr.html">xdispstr.pro</a>', "xdispstr.pro", "", "XDISPSTR", "", "BLOCKWIDTHHEIGHTTITLEGROUP_LEADERFONTtop_lineArray", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/xmedsky.html", "xmedsky.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "xmedsky.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/xmedsky.html#XMEDSKY", "XMEDSKY", 'routine in <a href="idlastro/xmedsky.html">xmedsky.pro</a>', "xmedsky.pro", "", "XMEDSKY", " NAME:        XMEDSKY   PURPOSE:        Subtract sky from an image as a 1-D function of X  EXPLANATION:        This procedure is designed to remove the sky from slitless spectra.        The sky is assumed to vary with wavelength (along a row) but not with        position (along a column).    The sky is computed as the        column-by-column median of pixels within 3 sigma of the image global        median.   This procedure is called by the cosmic ray rejection routine        CR_REJECT   CALLING SEQUENCE:        XMEDSKY, Image, Bkg, [ CLIP=[x0, x1, y0, y1], NSIG= ]   INPUTS:        Image:  Input image for which sky vector is to be computed.   INPUT KEYWORD PARAMETERS:        CLIP:   [x0, x1, y0, y1]: region of image to be used for all                statistical computations.    Default is to use the entire                image.   For STIS 1024 x 512 slitless spectra, the suggested                value is CLIP = [32,1023,12,499]        NSIG:   Positive scalar giving the number of sigma a pixel must be above                the global median to be reject.   Default is 3 sigma.  OUTPUT PARAMETER:        Bkg:    Vector of sky values. ;  MODIFICATION HISTORY:        Written by:     R. S. Hill, Hughes STX, 20 Oct. 1997        Converted to V5.0, use STDDEV()   W. Landsman   June 1998        Check for valid WHERE, added NSIG keyword  W. Landsman   December 2000        Assume since V5.1 so always use STDDEV  W. Landsman Feb 2004        Assume since V5.6 use DIMEN keyword to MEDIAN W. Landsman Jan 2008  ", "CLIPNsigImageBkg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/xy2ad.html", "xy2ad.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "xy2ad.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/xy2ad.html#xy2ad", "xy2ad", 'routine in <a href="idlastro/xy2ad.html">xy2ad.pro</a>', "xy2ad.pro", "", "xy2ad", " NAME:      XY2AD   PURPOSE:      Compute R.A. and Dec from X and Y and a FITS astrometry structure  EXPLANATION:      The astrometry structure must first be extracted by EXTAST from a FITS      header.   The offset from the reference pixel is computed and the CD      matrix is applied.     If distortion is present then this is corrected.      If a WCS projection (Calabretta & Greisen 2002, A&A, 395, 1077) is      present, then the procedure WCSXY2SPH is used to compute astronomical      coordinates.    Angles are returned in  degrees.       XY2AD is meant to be used internal to other procedures.      For interactive purposes use XYAD.   CALLING SEQUENCE:      XY2AD, x, y, astr, a, d   INPUTS:      X     - row position in pixels, scalar or vector      Y     - column position in pixels, scalar or vector            X and Y should be in the standard IDL convention (first pixel is            0), and not the FITS convention (first pixel is 1).      ASTR - astrometry structure, output from EXTAST procedure containing:         .CD   -  2 x 2 array containing the astrometry parameters CD1_1 CD1_2                in DEGREES/PIXEL                                   CD2_1 CD2_2         .CDELT - 2 element vector giving physical increment at reference pixel         .CRPIX - 2 element vector giving X and Y coordinates of reference pixel                (def = NAXIS/2)         .CRVAL - 2 element vector giving R.A. and DEC of reference pixel                in DEGREES         .CTYPE - 2 element vector giving projection types         .LONGPOLE - scalar longitude of north pole         .LATPOLE - scalar giving native latitude of the celestial pole         .PV2 - Vector of projection parameter associated with latitude axis              PV2 will have up to 21 elements for the ZPN projection, up to 3              for the SIN projection and no more than 2 for any other              projection         .DISTORT - Optional substructure specifying distortion parameters   OUTPUT:      A - R.A. in DEGREES, same number of elements as X and Y      D - Dec. in DEGREES, same number of elements as X and Y   RESTRICTIONS:        Note that all angles are in degrees, including CD and CRVAL        Also note that the CRPIX keyword assumes an FORTRAN type        array beginning at (1,1), while X and Y give the IDL position        beginning at (0,0).   No parameter checking is performed.   NOTES:       AD2XY tests for presence of WCS coordinates by the presence of a dash       in the 5th character position in the value of CTYPE (e.g 'DEC--SIN').  PROCEDURES USED:        TAG_EXIST(), WCSXY2SPH  REVISION HISTORY:        Written by R. Cornett, SASC Tech., 4/7/86        Converted to IDL by B. Boothman, SASC Tech., 4/21/86        Perform CD  multiplication in degrees  W. Landsman   Dec 1994        Understand reversed X,Y (X-Dec, Y-RA) axes,   W. Landsman  October 1998        Consistent conversion between CROTA and CD matrix W. Landsman Oct. 2000        No special case for tangent projection W. Landsman June 2003        Work for non-WCS coordinate transformations W. Landsman Oct 2004        Use CRVAL reference point for non-WCS transformation  W.L. March 2007        Use post V6.0 notation   W.L. July 2009   ", "xyastrad", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/xyad.html", "xyad.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "xyad.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/xyad.html#xyad", "xyad", 'routine in <a href="idlastro/xyad.html">xyad.pro</a>', "xyad.pro", "", "xyad", " NAME:        XYAD  PURPOSE:        Use a FITS header to convert pixel (X,Y) to world coordinates  EXPLANATION:        Use astrometry in a FITS image header to compute world        coordinates in decimal degrees from X and Y.         If spherical coordinates (Calabretta & Greisen 2002, A&A, 395, 1077) are        not present, then XYAD will still perform the transformation specified        by the CD, CRVAL, and CRPIX keywords.  CALLING SEQUENCE:        XYAD, HDR               ;Prompt for X and Y positions        XYAD, HDR, X, Y, A, D, [ /PRINT, /Galactic, /Celestial, /Ecliptic,                                 ALT =, PRECISION=]  INPUTS:        HDR - FITS Image header containing astrometry info   OPTIONAL INPUTS:        X     - row position in pixels, scalar or vector        Y     - column position in pixels, scalar or vector         X and Y should be in IDL convention, (first pixel is (0,0) where        the integral value corresponds to the center of the pixel.)   OPTIONAL OUTPUT:        A - Output longitude in decimal DEGREES (for spherical coordinates),                same number of elements as X and Y.    For celestial                coordinates, this is the Right ascension.        D - Output latitude in decimal DEGREES.   For celestial coordinates,                this is the declination.  OPTIONAL KEYWORD INPUT:        ALT -  single character 'A' through 'Z' or ' ' specifying an alternate              astrometry system present in the FITS header.    The default is              to use the primary astrometry or ALT = ' '.   If /ALT is set,              then this is equivalent to ALT = 'A'.   See Section 3.3 of              Greisen & Calabretta (2002, A&A, 395, 1061) for information about              alternate astrometry keywords.        PRECISION - Integer scalar (0-4) specifying the number of digits              displayed after the decimal of declination.   The RA is              automatically one digit more.   See ADSTRING() for more info.              Default value is 1, and the keyword is ignored if results are not              displayed at the terminal        /PRINT - If this keyword is set and non-zero, then results are displayed                at the terminal.in both decimal and sexagesimal notation.         The default for XYAD is to return the coordinate system present in        in the FITS header.    However, the following mutually exclusive        keywords can be used to convert to a particular coordinate system:         /CELESTIAL - Output is Right Ascension and declination        /ECLIPTIC - Output is Ecliptic longitude and latitude        /GALACTIC - Output is Galactic longitude and latitude   OPERATIONAL NOTES:        If less than 5 parameters are supplied, or if the /PRINT keyword is        set, then the computed astronomical coordinates are displayed at the        terminal.         If this procedure is to be used repeatedly with the same header,        then it would be faster to use XY2AD.   EXAMPLE:        A FITS header, hdr, contains astrometric information in celestial        coordinates.   Find the RA and Dec corresponding to position X=23.3         Y = 100.2 on an image         IDL&gt; xyad, hdr, 23.3, 100.2      ;Displays results at the terminal        To display the results in Galactic coordinates         IDL&gt; xyad, hdr, 23.3, 100.2, /GALACTIC   PROCEDURES CALLED        ADSTRING(), EULER, EXTAST, GSSSXYAD, REPCHR(),  XY2AD   REVISION HISTORY:        W. Landsman                 STX          Jan, 1988        Use astrometry structure  W. Landsman    Jan, 1994        Recognize GSSS header  W. Landsman       June, 1994        Changed ADSTRING output format   W. Landsman    September 1995        Converted to IDL V5.0   W. Landsman   September 1997        Use vector call to ADSTRING() W. Landsman February 2000        Added ALT input keyword  W. Landsman June 2003        Add precision keyword  W. Landsman February 2004        Fix display if 'RA','DEC' reversed in CTYPE  W. Landsman Feb. 2004        Handle display of NaN values W. Landsman May 2004        Work for non-spherical coordinate transformations W. Landsman Oct 2004        Fix output display units if ALT keyword used W. Landsman March 2005        More informative error message if no astrometry present W.L Nov 2007        Fix display when no equinox in header W.L. Dec 2007        Fix header display for noncelestial coords W.L. Jan 2008  ", "PRINTGALACTICALTCELESTIALECLIPTICPRECISIONhdrxyad", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/xyxy.html", "xyxy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "xyxy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/xyxy.html#xyxy", "xyxy", 'routine in <a href="idlastro/xyxy.html">xyxy.pro</a>', "xyxy.pro", "", "xyxy", " NAME: 	XYXY  PURPOSE: 	To use a pair of headers to convert X/Y positions from one frame 	to another.  CALLING SEQUENCE: 	XYXY, hdra, hdrb, xa, ya, [ xb, yb ]  INPUTS: 	hdra - The header containing the plate solution describing the 	       frame of reference being converted FROM. 	hdra - The header containing the plate solution describing the 	       frame of reference being converted TO. 	xa   - A scalar or vector containing the x coordinate(s) to convert. 	ya   - A scalar or vector containing the y coordinate(s) to convert. 	       Must have the same number of elements as 'xa'.  OUTPUTS: 	xb   - The converted x coordinate(s).  If this parameter is not 	       specified, it is returned through 'xa'. 	yb   - The converted y coordinate(s).  If this parameter is not 	       specified, it is returned through 'ya'.  PROCEDURE: 	The procedures 'xyad' and 'adxy' are used to perform the        conversion.     The equinoxes of each header are checked with         get_equinox  to make sure that they are identical, and  precess         is used if they are not.   HEULER used if the headers have a different        coordinate system (e.g. Celestial, Galactic, Ecliptic)         Note that all X,Y coordinates are in the IDL convention (starting with        0,0) and not the FITS convention (first pixel is 1,1)  PROCEDURES USED: 	GET_EQUINOX(), EXTAST, XYAD, ADXY, PRECESS, HEULER  MODIFICATION HISTORY: 	Written by Michael R. Greason, Hughes-STX, 13 April 1992. 	Updated to use ASTROMETRY structures.  J.D.Offenberg, HSTX, Jan 1993 	Converted to IDL V5.0   W. Landsman   September 1997        Check coordinate system   J. Ballet/ W. Landsman  April 2004  ", "hdrahdrbxayaxbyb", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/xyz.html", "xyz.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "xyz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/xyz.html#xyz", "xyz", 'routine in <a href="idlastro/xyz.html">xyz.pro</a>', "xyz.pro", "", "xyz", " NAME:        XYZ  PURPOSE:        Calculate geocentric X,Y, and Z  and velocity coordinates of the Sun  EXPLANATION:        Calculates geocentric X,Y, and Z vectors and velocity coordinates        (dx, dy and dz) of the Sun.   (The positive X axis is directed towards        the equinox, the y-axis, towards the point on the equator at right        ascension 6h, and the z axis toward the north pole of the equator).        Typical position accuracy is &lt;1e-4 AU (15000 km).   CALLING SEQUENCE:        XYZ, date, x, y, z, [ xvel, yvel, zvel, EQUINOX = ]   INPUT:        date: reduced julian date (=JD - 2400000), scalar or vector   OUTPUT:        x,y,z: scalars or vectors giving heliocentric rectangular coordinates                  (in A.U) for each date supplied.    Note that sqrt(x^2 + y^2                  + z^2) gives the Earth-Sun distance for the given date.        xvel, yvel, zvel: velocity vectors corresponding to X, Y and Z.   OPTIONAL KEYWORD INPUT:        EQUINOX: equinox of output. Default is 1950.   EXAMPLE:        What were the rectangular coordinates and velocities of the Sun on        Jan 22, 1999 0h UT (= JD 2451200.5) in J2000 coords? NOTE:        Astronomical Almanac (AA) is in TDT, so add 64 seconds to        UT to convert.         IDL&gt; xyz,51200.5+64.d/86400.d,x,y,z,xv,yv,zv,equinox = 2000         Compare to Astronomical Almanac (1999 page C20)                    X  (AU)        Y  (AU)     Z (AU)        XYZ:      0.51456871   -0.76963263  -0.33376880        AA:       0.51453130   -0.7697110   -0.3337152        abs(err): 0.00003739    0.00007839   0.00005360        abs(err)            (km):   5609          11759         8040         NOTE: Velocities in AA are for Earth/Moon barycenter              (a very minor offset) see AA 1999 page E3                   X VEL (AU/DAY) YVEL (AU/DAY)   Z VEL (AU/DAY)        XYZ:      -0.014947268   -0.0083148382    -0.0036068577        AA:       -0.01494574    -0.00831185      -0.00360365        abs(err):  0.000001583    0.0000029886     0.0000032077        abs(err)         (km/sec): 0.00265        0.00519          0.00557   PROCEDURE CALLS:        PRECESS_XYZ  REVISION HISTORY        Original algorithm from Almanac for Computers, Doggett et al. USNO 1978        Adapted from the book Astronomical Photometry by A. Henden        Written  W. Landsman   STX       June 1989        Correct error in X coefficient   W. Landsman HSTX  January 1995        Added velocities, more terms to positions and EQUINOX keyword,           some minor adjustments to calculations           P. Plait/ACC March 24, 1999  ", "equinoxdatexyzxvelyvelzvel", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/ydn2md.html", "ydn2md.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "ydn2md.pro", "", "", " NAME:        YDN2MD  PURPOSE:        Convert from year and day number of year to month and day of month.  CALLING SEQUENCE:        YDN2MD,yr,dy,m,d  INPUTS:        yr = 4 digit year (like 1988), integer scalar        dy = day number in year (like 310), integer scalar or vector   OUTPUTS:        m = month number (1-12, e.g. 11 = Nov)        d = day of month (like 5).        Note: On error returns m = d = -1.   EXAMPLE:        Find the month/day of days 155 and 255 in the year 2001         IDL&gt; ydn2md, 2001, [155,255], m, d          ==&gt; m = [6,9]   & d = [4,12]        ; = June 4 and September 12   MODIFICATION HISTORY:        Adapted from Johns Hopkins University/Applied Physics Laboratory        Update to use VALUE_LOCATE,   W. Landsman    January 2001  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/ydn2md.html#YDN2MD", "YDN2MD", 'routine in <a href="idlastro/ydn2md.html">ydn2md.pro</a>', "ydn2md.pro", "", "YDN2MD", "", "helpYRDYMD", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/jhuapl/ymd2dn.html", "ymd2dn.pro", '.pro file in <a href="idlastro/jhuapl/dir-overview.html">idlastro/jhuapl/ directory</a>', "ymd2dn.pro", "", "", " NAME:        YMD2DN  PURPOSE:        Convert from year, month, day to day number of year.  CATEGORY:  CALLING SEQUENCE:        dy = ymd2dn(yr,m,d)  INPUTS:        yr = year (like 1988).      scalar or vector        m = month number (like 11 = Nov).   scalar or vector        d = day of month (like 5).        scalar or vector  KEYWORD PARAMETERS:  OUTPUTS:        dy = day number in year (like 310).  out  COMMON BLOCKS:  NOTES:  MODIFICATION HISTORY:        Written by R. Sterner, 20 June, 1985.        Johns Hopkins University Applied Physics Laboratory.        RES 18 Sep, 1989 --- converted to SUN        R. Sterner, 1997 Feb 3 --- Made work for arrays.   Copyright (C) 1985, Johns Hopkins University/Applied Physics Laboratory  This software may be used, copied, or redistributed as long as it is not  sold and this copyright notice is reproduced on each copy made.  This  routine is provided as is without any express or implied warranties  whatsoever.  Other limitations apply as described in the file disclaimer.txt. 	Converted to IDL V5.0   W. Landsman  2-Jan-1998  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/jhuapl/ymd2dn.html#ymd2dn", "ymd2dn", 'routine in <a href="idlastro/jhuapl/ymd2dn.html">ymd2dn.pro</a>', "ymd2dn.pro", "", "ymd2dn", "", "helpyrmd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/zang.html", "zang.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "zang.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/zang.html#zang", "zang", 'routine in <a href="idlastro/zang.html">zang.pro</a>', "zang.pro", "", "zang", " NAME:        ZANG  PURPOSE:        Determine the angular size of an object as a function of redshift  EXPLANATION:        Requires an input size in kpc and returns an angular size in arc seconds        Default cosmology has a Hubble constant of 70 km/s/Mpc, Omega (matter)        =0.3 and a normalized cosmological constant Lambda = 0.7; however these        values can be changed with appropriate keywords.   CALLING SEQUENCE:        angsiz = zang( dl, [ z, H0 =, Omega_m =, Lambda0 = , q0 = , k =,                                /SILENT] )   INPUTS:        dl - linear size of the object *in kpc*, non-negative scalar or vector        z - redshift of object, postive  scalar or vector            Either dl and z must have the same number of elements, or at least            one of them must be a vector.  OPTIONAL INPUT KEYWORDS     H0 -  Hubble constant in km/s/Mpc, default is 70          No more than two of the following four parameters should be         specified.    None of them need be specified, default values are given     k - curvature constant, normalized to the closure density.   Default is         0, indicating a flat universe     Omega_m -  Matter density, normalized to the closure density, default         is 0.3.   Must be non-negative     Lambda0 - Cosmological constant, normalized to the closure density,         default is 0.7     q0 - Deceleration parameter, numeric scalar = -R*(R'')/(R')^2, default         is -0.55      Note that Omega_m + lambda0 + k = 1 and q0 = 0.5*omega_m - lambda0  OUTPUT:        angsiz - Angular size of the object at the given redshift in                arc seconds  EXAMPLE:   (1) What would be the angular size of galaxy of diameter 50 kpc at a redshift       of 1.5 in an open universe with Lambda = 0 and Omega (matter) = 0.3.       Assume the default Hubble constant value of 70 km/s/Mpc.        IDL&gt; print,zang(50,1.5, Lambda = 0,omega_m = 0.3)              ====&gt; 6.58 arc seconds    (2) Now plot the angular size of a 50 kpc diameter galaxy as a function of       redshift for the default cosmology (Lambda = 0.7, Omega_m=0.3) up to       z = 0.5       IDL&gt; z = findgen(50)/10. + 0.1    ;Angular size undefined at z = 0       IDL&gt; plot,z,zang(50,z),xtit='z',ytit='Angular Size ( )'  NOTES:       This procedure underwent a major revision in April 2000 to allow for a       cosmological constant, ***including a change of the calling sequence***        Be sure to supply the input linear size dl in units of kpc.  PROCEDURES CALLED:       LUMDIST() -- Calculates the luminosity distance  REVISION HISTORY:       Written    J. Hill   STX           July, 1988       Converted to IDL V5.0   W. Landsman   September 1997       Major rewrite to call LUMDIST function  W. Landsman   April 2000  ", "h0kLambda0Omega_mq0SILENTdlz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/zbrent.html", "zbrent.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "zbrent.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/zbrent.html#ZBRENT", "ZBRENT", 'routine in <a href="idlastro/zbrent.html">zbrent.pro</a>', "zbrent.pro", "", "ZBRENT", " NAME:      ZBRENT  PURPOSE:      Find the zero of a 1-D function up to specified tolerance.  EXPLANTION:      This routine assumes that the function is known to have a zero.      Adapted from procedure of the same name in  Numerical Recipes  by      Press et al. (1992), Section 9.3   CALLING:        x_zero = ZBRENT( x1, x2, FUNC_NAME= name , MaX_Iter=, Tolerance=,                                  _EXTRA =  )   INPUTS:        x1, x2 = scalars, 2 points which bracket location of function zero,                                                that is, F(x1) &lt; 0 &lt; F(x2).        Note: computations are performed with        same precision (single/double) as the inputs and user supplied function.   REQUIRED INPUT KEYWORD:        FUNC_NAME = function name (string)                Calling mechanism should be:  F = func_name( px )                where:  px = scalar independent variable, input.                        F = scalar value of function at px,                            should be same precision (single/double) as input.   OPTIONAL INPUT KEYWORDS:        MAX_ITER = maximum allowed number iterations, default=100.        TOLERANCE = desired accuracy of minimum location, default = 1.e-3.         Any other keywords are passed directly to the user-supplied function        via the _EXTRA facility.  OUTPUTS:        Returns the location of zero, with accuracy of specified tolerance.   PROCEDURE:        Brent's method to find zero of a function by using bracketing,        bisection, and inverse quadratic interpolation,   EXAMPLE:        Find the root of the COSINE function between 1. and 2.  radians          IDL&gt; print, zbrent( 1, 2, FUNC = 'COS')         and the result will be !PI/2 within the specified tolerance  MODIFICATION HISTORY:        Written, Frank Varosi NASA/GSFC 1992.        FV.1994, mod to check for single/double prec. and set zeps accordingly.        Use MACHAR() to define machine precision   W. Landsman September 2002        Added _EXTRA keyword  W. Landsman  December 2011        Need to check whether user function accepts keywords W.L. Jan 2012  ", "FUNC_NAME_EXTRAMAX_ITERATIONSTOLERANCEx1x2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/zenpos.html", "zenpos.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "zenpos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/zenpos.html#ZENPOS", "ZENPOS", 'routine in <a href="idlastro/zenpos.html">zenpos.pro</a>', "zenpos.pro", "", "ZENPOS", " NAME:        ZENPOS  PURPOSE:        Return the zenith RA and Dec in radians for a given Julian date.   CALLING SEQUENCE:        ZENPOS, Date, Ra, Dec   INPUT:        Date  The Julian date, in double precision, of the date and time                for which the zenith position is desired, scalar or vector.   OUTPUTS:        Ra    The right ascension in RADIANS of the zenith.        Dec   The declination in RADIANS of the zenith.   PROCEDURE:        The local sidereal time is computed; this is the RA of the zenith.        It and the observatories latitude (corresponding to the Dec.) are        converted to radians and returned as the zenith direction.   PROMPTS:        ZENPOS will prompt for the following 3 parameters if they are not        defined in the common block SITE (see below)         LAT,LNG - north latitude and east longitude of the desired location                in DEGREES        TZONE - Time Zone (in hours) of the desired location (e.g. 4 = EDT,                5 = EST)   COMMON BLOCKS:        SITE - This common block should contain the three scalars LAT, LNG                and TZONE   PROCEDURE CALLS:        CT2LST - Convert to Local Mean Sidereal Time  MODIFICATION HISTORY:        Written by Michael R. Greason, STX, 14 October 1988.        Converted to IDL V5.0   W. Landsman   September 1997        Update documentation, longitude now *east* of Greenwich W.L. July 2000  ", "dateradec", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/zoom_xy.html", "zoom_xy.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "zoom_xy.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/zoom_xy.html#zoom_xy", "zoom_xy", 'routine in <a href="idlastro/zoom_xy.html">zoom_xy.pro</a>', "zoom_xy.pro", "", "zoom_xy", " NAME:       ZOOM_XY  PURPOSE:        Converts X, Y position on the image array to the the X,Y position        in the current window.   (These  positions are identical        only for an unroamed, zoomed image with with pixel (0,0) of the        image placed at position (0,0) on the TV.)   CALLING SEQUENCE:       ZOOM_XY, Xim,Yim,Xtv,Ytv, [ OFFSET =, ZOOM = ]   INPUTS:       XIM - Scalar or vector giving X position(s) as read on the image             display (e.g. with CURSOR,XIM,YIM,/DEVICE)       YIM - Like XTV but giving Y position(s) as read on the image display.        If only 2 parameters are supplied then XIM and YIM will be modfied       on output to contain the converted coordinates.   OPTIONAL KEYWORD INPUT:       OFFSET - 2 element vector giving the location of the image pixel (0,0)                on the window display.   OFFSET can be positive (e.g if the                image is centered in a larger window) or negative (e.g. if the                only the central region of an image much larger than the window                is being displayed.                Default value is [0,0], or no offset.         ZOOM - Scalar specifying the magnification of the window with respect                to the image variable.  OUTPUTS:       XTV,YTV - REAL*4 X and Y coordinates of the image corresponding to the             cursor position on the TV display.   Same number of elements as             XIM, YIM.  COMMON BLOCKS:        If present, ZOOM_XY will use the TV and IMAGE common blocks which are        defined in the MOUSSE software system (see         http://archive.stsci.edu/uit/analysis.html)   If the user is not using        the MOUSSE software (which keeps track of the offset and zoom in each        window) then the common blocks are ignored.  NOTES:        The integer value of a pixel is assumed to refer to the *center*        of a pixel.  REVISON HISTORY:        Adapted from MOUSSE procedure of the same name W. Landsman HSTX Mar 1996        Converted to IDL V5.0   W. Landsman   September 1997        Properly include ZOOM keyword  W. Landsman   May 2000        Put back common blocks for MOUSSE compatibility    September 2004  ", "OFFSETZOOMximyimxtvytv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("idlastro/zparcheck.html", "zparcheck.pro", '.pro file in <a href="idlastro/dir-overview.html">idlastro/ directory</a>', "zparcheck.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("idlastro/zparcheck.html#zparcheck", "zparcheck", 'routine in <a href="idlastro/zparcheck.html">zparcheck.pro</a>', "zparcheck.pro", "", "zparcheck", " NAME:        ZPARCHECK  PURPOSE:        Routine to check user parameters to a procedure   CALLING SEQUENCE:        zparcheck, progname, parameter, parnum, types, dimens, [ message ]   INPUTS:        progname  - scalar string name of calling procedure        parameter - parameter passed to the routine        parnum    - integer parameter number        types     - integer scalar or vector of valid types                 1 - byte        2 - integer   3 - int*4                 4 - real*4      5 - real*8    6 - complex                 7 - string      8 - structure 9 - double complex                10 - pointer    11 - object ref 12 - Unsigned integer                13 - unsigned int*4                14 - int*8                15 - Unsigned int*8        dimens   - integer scalar or vector giving number                      of allowed dimensions.  OPTIONAL INPUT:        message - string message describing the parameter to be printed if an                error is found   OUTPUTS:        none   EXAMPLE:        IDL&gt; zparcheck, 'HREBIN', hdr, 2, 7, 1, 'FITS Image Header'         This example checks whether the parameter 'hdr' is of type string (=7)        and is a vector (1 dimension).   If either of these tests fail, a        message will be printed                 Parameter 2 (FITS Image Header) is undefined                  Valid dimensions are 1                  Valid types are string    SIDE EFFECTS:        If an error in the parameter is a message is printed        a RETALL issued   HISTORY        version 1  D. Lindler  Dec. 86        documentation updated.  M. Greason, May 1990.        Recognize double complex datatype    W. Landsman   September 1995        Converted to IDL V5.0   W. Landsman   September 1997        Check for new data types (e.g. unsigned) W. Landsman February 2000        Print a traceback if an error occurs  W. Landsman  Aug 2011  ", "prognameparameterparnumtypesdimensmessage", "          -1", "");
  
  

